<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/articles/</link>
    <description>Recent content in Articles on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 May 2021 03:35:28 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/articles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using a Native C Library in Android</title>
      <link>https://alvarogarcia7.github.io/blog/2021/05/02/native-c-library-android/</link>
      <pubDate>Sun, 02 May 2021 03:35:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2021/05/02/native-c-library-android/</guid>
      <description>For a client, we needed to integrate a pure C library into an android application.
The library is written in C (not C++), the application in Kotlin.
Context We have created an Android application, that is using a native C library. This library provides an upgrade in performance over using a JVM library.
For this particular example, we&amp;rsquo;re showcasing how to integrate libsodium, but this can be expanded to any other library.</description>
    </item>
    
    <item>
      <title>On private but leaked information in a SaaS</title>
      <link>https://alvarogarcia7.github.io/blog/2019/11/04/private-leaked-information-saas/</link>
      <pubDate>Mon, 04 Nov 2019 10:22:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/11/04/private-leaked-information-saas/</guid>
      <description>This is another tool for your toolbox: how to uncorrelate public and private information.
Context Context: there are clients who have sensitive information. Some is just &amp;lsquo;companies being stealth&amp;rsquo; (e.g., don&amp;rsquo;t want to make public until launching), some is just protected by a Non-Disclosure Agreement (NDA), some are protected by security clearance. The more sensitive, the greater protection needed. This tool applies to all sensitive information, regardless of where it&amp;rsquo;s stored or how it is used.</description>
    </item>
    
    <item>
      <title>Automatically keeping the intermediate history of your work using git</title>
      <link>https://alvarogarcia7.github.io/blog/2019/05/29/keeping-intermediate-history-work-git/</link>
      <pubDate>Wed, 29 May 2019 22:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/05/29/keeping-intermediate-history-work-git/</guid>
      <description>This is another tool for your toolbox: using git to automatically document your development process (special cases only.)
Context When I&amp;rsquo;m spiking a feature, I usually get in the zone (e.g., Csikszentmihalyi&amp;rsquo;s Flow), and I can forget my good engineering practices, searching for that desired answer. After a few of those bouts of coding, you realize you&amp;rsquo;re wandering. You circle around, get lost, get back on track, then get lost again.</description>
    </item>
    
    <item>
      <title>Writing safe(r) bash scripts</title>
      <link>https://alvarogarcia7.github.io/blog/2018/07/13/writing-safe-bash-scripts/</link>
      <pubDate>Fri, 13 Jul 2018 07:03:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/07/13/writing-safe-bash-scripts/</guid>
      <description>After writing more and more bash scripts for a client, I&amp;rsquo;ve decided to write down my thoughts about it.
This assumes you have some knowledge about bash, as it is not intended as a beginner&amp;rsquo;s tutorial.
Why bash scripts?  Bash is present in almost every unix/linux-based stack, now some Windows as well. An exception is the &amp;lsquo;alpine&amp;rsquo; docker images, which have a smaller, lighter shell (more on that later) Everything that you can automate, you can do from bash.</description>
    </item>
    
    <item>
      <title>Questioning the existing choices</title>
      <link>https://alvarogarcia7.github.io/blog/2018/07/04/questioning-existing-choices/</link>
      <pubDate>Wed, 04 Jul 2018 07:03:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/07/04/questioning-existing-choices/</guid>
      <description>Context For a client, we have worked on a service that works with files (containing sensitive data) that get corrupted very often.
The use case is generally:
 Two/Three file opens per day One modification per 10 file opens One corruption per 100 file opens  Initial solution The initial solution was just to copy the file (file.txt) before opening, after closing. This results in two files (YYY-MM-DDTHH-mm-ss_before_file.txt, YYY-MM-DDTHH-mm-ss_after_file.txt).
As this solution quickly became unmaintainable, the client developed a solution to hash the contents of the file and to remove the duplicated files.</description>
    </item>
    
    <item>
      <title>Support for out of hours on-call support</title>
      <link>https://alvarogarcia7.github.io/articles/2016/10/05/support-for-out-of-hours-on-call-support/</link>
      <pubDate>Wed, 05 Oct 2016 17:58:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/articles/2016/10/05/support-for-out-of-hours-on-call-support/</guid>
      <description>As the preface for the guide for on-call support, a positive note:
README  You’re cool. I know it. Do not trust yourself, trust me that I trust you. You might be sleepy. It’s OK Everything is going to be fine. Take 5 minutes to think about anything, anytime. Especially before any rash decision. With great power comes great responsibility. Use it wisely. Restoring the services comes first, investigation comes second Do the very minimum of investigation after the incident (collect things that might disappear), leave the rest for the next day on office hours Whenever everything is done, go to sleep but keep an eye on your phone.</description>
    </item>
    
    <item>
      <title>Refactoring functional code</title>
      <link>https://alvarogarcia7.github.io/articles/2016/09/28/refactoring-functional-code/</link>
      <pubDate>Wed, 28 Sep 2016 20:36:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/articles/2016/09/28/refactoring-functional-code/</guid>
      <description>With my pairing mate we have refactored this piece of functional code.
Original code:
function filterTokens (rawTokens) { const cleanedTokens = rawTokens.map(token =&amp;gt; (token.length &amp;amp;&amp;amp; token[0] === &amp;#39;-&amp;#39;) ? token.substring(1) : token) return cleanedTokens.filter(token =&amp;gt; token !== &amp;#39;&amp;#39; &amp;amp;&amp;amp; stopWordsArray.indexOf(token) === -1) } Refactored code:
function filterTokens (rawTokens) { const cleanedTokens = rawTokens.map(token =&amp;gt; startsWithADash(token) ? removeDashFrom(token) : token) const processedTokens = cleanedTokens.filter(token =&amp;gt; isNotEmpty(token) &amp;amp;&amp;amp; isNotAStopWord(token)) return processedTokens function startsWithADash (token) { return (token.</description>
    </item>
    
    <item>
      <title>The Joys of the Craft as Article</title>
      <link>https://alvarogarcia7.github.io/articles/2014/12/15/the-joys-of-the-craft-as-article/</link>
      <pubDate>Mon, 15 Dec 2014 22:46:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/articles/2014/12/15/the-joys-of-the-craft-as-article/</guid>
      <description>Quoting the book,
 Why is programming fun? What delights may its practitioner expect as his reward?
First is the sheer joy of making things. As the child delights in his mud pie, so the adult enjoys building things, especially things of his own design [&amp;hellip;]
Second is the pleasure of making things that are useful to other people. Deep within, we want other to use our work and to find it helpful.</description>
    </item>
    
  </channel>
</rss>
