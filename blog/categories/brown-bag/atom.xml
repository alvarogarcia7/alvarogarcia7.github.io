<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Brown-bag | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/brown-bag/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2016-02-19T20:08:38+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Brown Bag Session: Clojure's Data and Code]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/09/23/brown-bag-session-clojures-data-and-code/"/>
    <updated>2015-09-23T19:24:58+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/09/23/brown-bag-session-clojures-data-and-code</id>
    <content type="html"><![CDATA[<p>Today, at a client, I&rsquo;ve facilitated the brown-bag session on Clojure, introducing Lisp&rsquo;s <a href="https://en.wikipedia.org/wiki/Homoiconicity">homoiconicity</a>.</p>

<h2>Session Structure</h2>

<p>The session was designed as a kata, first introducing participants in the problem, letting some time to read the initial version and to think about possible solutions.</p>

<p>Then, I structured the rest of the time as a prepared kata, where I was explaining in the beamer our current problems (day-to-day tasks) and possible solutions in Clojure.</p>

<p>Among them:</p>

<ul>
<li>Configuration and extensibility: allowing for flexibility, define at configuration time new features without recompiling or modifying the system.</li>
<li>Persisting and restoring certain state: this is a problem that could easily be solved persisting data in Lisp</li>
</ul>


<p>I explained, in private to those who asked, about <a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a> and its dialects <a href="https://en.wikipedia.org/wiki/Common_Lisp">Common Lisp</a>, <a href="https://en.wikipedia.org/wiki/Clojure">Clojure</a> and <a href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme</a>.</p>

<h2>Feedback</h2>

<ul>
<li>They liked the effort of investigating new languages to solve problems we have in our current stack</li>
<li>They liked introducing the language features with a back-story to better understand the concepts</li>
<li>They suggested to improve the level of the session: as the group as a whole is still starting with Clojure, leaving them on their own with code is too much. They asked for more guidance</li>
</ul>

]]></content>
  </entry>
  
</feed>
