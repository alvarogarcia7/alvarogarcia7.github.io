<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Training | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/training/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-03-29T19:50:03+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TDD Meetup Retrospective]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/16/tdd-meetup-retrospective/"/>
    <updated>2015-03-16T05:42:44+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/16/tdd-meetup-retrospective</id>
    <content type="html"><![CDATA[<p>Yesterday we organized a TDD meetup at the <a href="http://www.fib.upc.edu/fib.html">FIB - Barcelona School of Informatics UPC</a>, within <a href="http://www.meetup.com/Barcelona-Software-Craftsmanship/">Barcelona Software Craftsmanship</a> sponsored by the <a href="http://jediupc.com/">Junior Empresa d&#8217;Informàtica</a>. The meetup started at 9:00 until 18:00, with a one-hour pause in the middle.</p>

<h2>Where</h2>

<ul>
<li>Please make sure the meetup space (e.g., classroom, meeting room) is available and ready to be used at least 15 minutes before the meetup starts</li>
<li>The organizer and the event host should be there in advance to prepare the physical environment (chairs, wifi, beamer, etc) as well as mentally: getting comfortable with the space, loading the presentation, prepare the speaker notes, etc.</li>
<li>Plan for the worse and hope for the best: in this particular meetup, the beamer was not available, so the host gracefully lent us some 23 inch screen as a second monitor.</li>
</ul>


<h2>What</h2>

<ul>
<li>The speaker should have had already decided what they are going to cover on the meetup and not deviate much from this. Leave some empty buffer space at the end because you will cumulate some deviation during the day.</li>
<li>Of course, have the slides ready if you plan on using them</li>
<li>I prefer having more conversations during the meetup rather than a masterclass-style one. The organizer(s) should act as conversation moderators, often guiding the conversation where (they think) it is most useful. Sometimes, it is a good idea to interrupt the conversation when someone is getting bored or losing focus<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</li>
<li>Be prepared to ask to your attendees what do they want: they are your target</li>
<li>Please ask to your attendees to bring their laptop with git, dependency manager, IDE / editor, test double framework installed. Otherwise, most of the first session is invested in downloading / configuring these.</li>
<li>Please try to be communicative / funny in some way. This makes the slides easier to understand</li>
</ul>


<h2>Meetup details</h2>

<ul>
<li><p>We did two sessions of slides:</p>

<ul>
<li>Introduction to TDD</li>
<li>TDD on a daily basis: learn TDD for a greater good</li>
</ul>
</li>
<li><p>We did three katas:</p>

<ul>
<li>LinkedList: <a href="http://codekata.com/kata/kata21-simple-lists/">source</a>. Originally by <a href="http://twitter.com/@pragdave">Dave &ldquo;Pragmatic Dave&rdquo; Thomas</a></li>
<li>Password: <a href="https://gist.github.com/trikitrok/c031d6b621f28b85ce0d">source</a>. Taken from <a href="http://twitter.com/@trikitrok">Manuel Rivero</a>, also seen on a <a href="http://twitter.com/@carlosble">Carlos Blé</a> workshop</li>
<li>Bank Kata: <a href="https://github.com/sandromancuso/Bank-kata">source</a>. Originally from <a href="http://twitter.com/@sandromancuso">Sandro Mancuso</a></li>
</ul>
</li>
<li><p>The format was this: the first set of slides, the two first katas, some discussion, then lunch; coffee (mandatory); the second set of slides, the third kata (done by them), later done by me at the beamer, explaining the situation and my mental process.</p></li>
</ul>


<h2>Useful feedback</h2>

<ul>
<li><p>About the event:</p>

<ul>
<li>One 8-hour event is much more effective / efficient that 4 2-hour ones</li>
<li>No one complained about the lack of beamer. So don&rsquo;t worry too much if your host doesn&rsquo;t have one, as long as everybody can get close to the (big) screen.</li>
</ul>
</li>
<li><p>About the LinkedList kata:</p>

<ul>
<li>This, as a first TDD example was too complex. Getting into TDD with classes, and serveral functions at the same time might be difficult.</li>
<li>Too academic. This is an example you will usually never implement yourself, as there are libraries who provide it. Therefore, not applicable.</li>
</ul>
</li>
<li><p>About the Password kata:</p>

<ul>
<li>They graded this kata easier than the linkedList</li>
<li>Start with this as it is only a function</li>
<li>This has didactic value as there are some gotchas with this kata</li>
<li>More likely to be implemented by yourself, as most systems require some kind of user authentication</li>
</ul>
</li>
<li><p>About the Bank kata:</p>

<ul>
<li>More resembling of a day-to-day problem</li>
<li>This is a difficult kata if you haven&rsquo;t learned about mocks / test doubles</li>
<li>Interesting interactions between objects</li>
</ul>
</li>
<li><p>For me:</p>

<ul>
<li>They liked both the format and the speaker (a.k.a., me)</li>
<li>They thought this meetup was well prepared in advance</li>
</ul>
</li>
<li><p>My own feedback:</p>

<ul>
<li>It is difficult to ask the attendees to rate their own level or for you to rate it. I thought the linkedlist example would be so easy they would finish it in half the allowed time<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, but it wasn&rsquo;t this way</li>
<li>The productivity level varies hugely from person to person. There were some pairs that dug thoroughly on the problem and others who got stuck (sometimes with the language). Even though both types of pairs were working hard on the proposed problem</li>
<li>We still haven&rsquo;t solved the problem with reservations: many people book a seat on the event but later won&rsquo;t come. This makes other (interested) attendees to not have a seat.</li>
</ul>
</li>
</ul>


<p>Should you want to, please share your feedback / comments via the comments section below or sending a pull request to this <a href="https://github.com/alvarogarcia7/blog_source">repository</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>a good indicator of this is body language or position and whether they are doodling on a paper sheet.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>I did prepare against this adding more possible requirements to the kata, although we finally didn&rsquo;t use them<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mob Programming String Calculator Kata]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/03/mob-programming-string-calculator-kata/"/>
    <updated>2015-03-03T04:46:48+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/03/mob-programming-string-calculator-kata</id>
    <content type="html"><![CDATA[<p>Last Friday we did a kata<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> using a projector the string calculator <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> using pair programming, TDD and some mob-programming for the last refactoring.</p>

<p>We used a projector (beamer) so everyone could see it. I tried to take really small baby steps but the adding part was done in ~6 cycles<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>We&rsquo;ve all learnt about shotcuts, live user templates for the IDE <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>, TDD methodology, other ways of tackling the problem, how to refactor as a group, clean code, etc</p>

<p>These sessions are necessary to share some knowledge among the teammates and have another chance of doing code review, releasing some pressure from daily practices or bad abstractions / designs (that will be taken care of in the future)</p>

<p>We&rsquo;ve had such a great time, learning together, that would be a candidate for a weekly interaction.</p>

<p><a href="http://en.wikipedia.org/wiki/Mob_programming">Mob programming</a> is such an eye opening practice. It forces you to reconsider your previous dogma and to understand the others&#8217; positions. Wikipedia reads &ldquo;early use of phrase [&hellip;] was made in &lsquo;Extreme Programming Perspectives&rsquo;&rdquo; but this practice is practiced by some, such as <a href="https://twitter.com/carlosble">Carlos Blé</a>, <a href="https://twitter.com/sandromancuso">Sandro Mancuso</a> among others; also at the <a href="http://www.softwarecraftsmanshipbarcelona.org/">Software Craftsmanship Barcelona</a> <a href="https://twitter.com/hashtag/scbcn2013?src=hash">2013</a> and <a href="https://twitter.com/hashtag/SCBCN14?src=hash">2014</a> and the <a href="https://twitter.com/hashtag/socracan?src=hash">SoCra Canaries 2015</a></p>

<h2>One goal</h2>

<p>Our goal for this session was to practice TDD and baby steps, so the team can improve its ability on these skills.</p>

<p>In any case, my objective for the katas (or deliberate practice) is not to get there as fast as we can but to improve our automated routines. This can affect our daily performance, as it becomes natural. It is not about the getting to the destination but enjoying the path along the way. In this manner, you are not so hurried up about a slow train but enjoy the views across the window.</p>

<p>It was good that QA people in the team came to the session. He even participated with some tips / implementations during the refactors. Always fruitful to discuss (and learn) mixed skills (QA / dev) from the other side of the wall</p>

<h2>Conclusion</h2>

<p>I still haven&rsquo;t mastered the recipe (algorithm) for knowing when it is a scaffold and when it&rsquo;s time to refactor using &ldquo;replace algorithm&rdquo;. For know, I just use the three (3) rule and a bit of gut feeling on the side. The bad thing is that this can not be easily taught to someone else. Just learnt by osmosis and practice.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>matching none of the styles explained in <a href="http://johannesbrodwall.com/2011/12/18/how-to-start-a-coding-dojo/">here</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>This is a very good beginner&rsquo;s kata, created by <a href="https://twitter.com/royosherove">Roy Osherove</a>. Can be found <a href="http://osherove.com/tdd-kata-1/">here</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>One piece of feedback I received is that I talk too much while coding, as these 6 cycles took us about 45 minutes, total<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>There are some for <a href="https://www.jetbrains.com/idea/help/live-templates.html">IntelliJ IDEA</a>, <a href="http://stackoverflow.com/questions/4022367/what-is-the-eclipse-equivalent-of-intellij-live-templates">Eclipse</a> too<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Discussion: Behaviour-Driven Development]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/15/open-discussion-behaviour-driven-development/"/>
    <updated>2015-02-15T02:30:38+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/15/open-discussion-behaviour-driven-development</id>
    <content type="html"><![CDATA[<p>This week we had a great discussion about Behavior Driven Development (BDD). We have explained it as a way of developing software based on requirements, via automatically tested specifications. For more information, see the <a href="http://en.wikipedia.org/wiki/Behavior-driven_development">wikipedia&rsquo;s article on the subject</a></p>

<p>I forgot to mention that this is the perfect start to TDD, as this is usually called the double-loop TDD. See a post on it on <a href="http://coding-is-like-cooking.info/2013/04/outside-in-development-with-double-loop-tdd/">coding is like cooking</a></p>

<p>In this double-loop TDD, the first thing is to create a BDD scenario, run it (red-1), create a unit test that reflects this red (red-2), pass it, refactor; go to red-1 as many times as you need, doing TDD cycles. When you think the feature is done, execute the BDD scenarios and go to green (outer layer) and refactor.</p>

<h2>(Our) Common setting</h2>

<p>Going back to BDD, a common scenario would be the following:</p>

<p>Layers of software:</p>

<ul>
<li>Domain-Specific Language (DSL). See <a href="http://en.wikipedia.org/wiki/Domain-specific_language">wikipedia&rsquo;s article</a></li>
<li>Test adapter: an interpreter for this DSL</li>
<li>Test software: test fixtures, methods, structures to arrange, act, and assert on the sut</li>
<li>Production software (system under test - SUT): thing being tested</li>
</ul>


<h2>A BDD test vs A TDD test</h2>

<p>Let&rsquo;s imagine a BDD test for a <a href="http://en.wikipedia.org/wiki/Linked_list">linked list</a>:</p>

<pre><code>Given I have an empty list
When I add an element
Then I have an element on the list
</code></pre>

<p>now, the same test in TDD [using java, junit 4, hamcrest]</p>

<pre><code class="java">@Test
public void add_an_element_to_an_empty_list(){
    MyLinkedList linkedList = new MyLinkedList();

    linkedList.add("something");

    assertThat(linkedList.size(), is(1));
}
</code></pre>

<p>In some aspects, a BDD and a TDD test are similar:</p>

<ul>
<li>the given is the arrange, i.e., the prerequisite</li>
<li>the when is the act, i.e., the command</li>
<li>the then is the assertion, i.e., the postcondition</li>
</ul>


<p>(for more information on this, see <a href="http://en.wikipedia.org/wiki/Hoare_logic">Hoare&rsquo;s triple</a>)</p>

<p>But in others, they are not. In BDD you do not specify the APIs, methods, etc. You only care about behavior.</p>

<h2>Conclusion</h2>

<p>Benefits:</p>

<ul>
<li>everyone might involved in the specification by example workshops (source: <a href="http://www.amazon.com/ATDD-Example-Test-Driven-Development-Addison-Wesley/dp/0321784154">ATDD by example</a>)</li>
<li>live specifications. managers can now understand the real state</li>
<li><a href="http://en.wikipedia.org/wiki/Regression_testing">regression tests</a> are much cheaper (from automation)</li>
</ul>


<p>Gotchas:</p>

<ul>
<li>Test only the happy paths</li>
<li>This has a cost, do not overdo it</li>
<li>Doesn&rsquo;t remove manual tests</li>
<li>How do you manage multiple scenarios</li>
<li>How fast should it be?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Discussion: On Code Reviews]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/07/open-discussion-on-code-reviews/"/>
    <updated>2015-02-07T18:54:54+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/07/open-discussion-on-code-reviews</id>
    <content type="html"><![CDATA[<p>We had a great conversation yesterday about code reviews.</p>

<p>The main idea was to discuss about it and share the ideas each one had. I didn&rsquo;t want it to turn into a masterclass (see <a href="http://chimera.labs.oreilly.com/books/1234000001813/ch02.html#the_white_belt">the white belt</a>)</p>

<h2>Benefits</h2>

<p>These are the main benefits we saw in it:</p>

<ul>
<li>Increased trust</li>
<li>Learning from others, other approaches</li>
<li>Less defects, more quality</li>
<li>Increased <a href="http://en.wikipedia.org/wiki/Bus_factor">bus factor</a>, decreased information silos</li>
<li>Also:

<ul>
<li>Getting out of your comfort zone</li>
<li>Communicating more often (code style, edge cases, complaining, etc)</li>
</ul>
</li>
</ul>


<h2>Pair programming</h2>

<p>Then we discussed about the topic of <a href="/blog/categories/code-review">code reviews</a> and <a href="/blog/categories/pair-programming/">pair programming</a>:</p>

<ul>
<li><p>How do they mix</p>

<ul>
<li>Is the need for code review reduced when doing pair programming?</li>
<li>It is cheaper to catch defects when pairing than code review (e.g., less to modify, mental caches are hot, &hellip;), so why do code reviews? <a href="https://twitter.com/jbrains">J. B. Rainsberger</a> has an <a href="http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=acc77a0fb2&amp;e=4a925444f9">article</a> about it</li>
</ul>
</li>
<li><p>Does it give you the same benefits?</p>

<ul>
<li>I argued that it does, some of my colleagues argued against as one is &ldquo;while doing&rdquo; and the other is after.</li>
</ul>
</li>
</ul>


<h2>Practice, Practice, Practice</h2>

<p>This is also a reference to a chapter by the same name (<a href="http://chimera.labs.oreilly.com/books/1234000001813/ch05.html#practice_comma_practice_comma_practice">here</a>)</p>

<p>We proposed this problem:</p>

<blockquote><p>Receive a list of numbers to a command-line (CLI) application and print their sum</p></blockquote>

<p>I wrote simple code listing and we reviewed it. The code is <a href="https://gist.github.com/alvarogarcia7/258faea12cb9375539fe">here as a gist</a></p>

<p>(Just in case, I wrote this listing with some defects / smells on purpose)</p>

<p>Here are the comments:</p>

<ul>
<li>Not all parameters will be added, only the first three</li>
<li>The parameters are out of order, overcomplicating things. Is it due to something? Should I be careful about it?</li>
<li>There is duplication (i.e., parsing from string)</li>
<li>Bad naming: what is <code>a</code>, <code>b</code>, <code>c</code>?</li>
<li>There are no tests for it. No manual / javadoc either. Therefore, it&rsquo;s difficult to maintain</li>
<li><p>Difficult to test: a smell for bad design?</p>

<ul>
<li>How to test the adding by itself? The output is to the console, so we have to capture it (at GMaur we published this tool: <a href="https://github.com/GMaur/legacyutils">legacyUtils</a>)</li>
<li>How to test the parsing if there is no mock to be injected? Only via state tests, therefore &ldquo;end to end&rdquo; tests as it includes the adding</li>
</ul>
</li>
<li><p>Mixed concerns / responsibilities. Parsing the numbers and adding them are different concerns and should not be together</p></li>
</ul>


<h2>Conclusion</h2>

<ul>
<li>No one was against it</li>
<li>We all agreed that is important to do it even in time-constrained environments</li>
<li>It is also important to review our code reviews to make the most of it. The article by <a href="http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=acc77a0fb2&amp;e=4a925444f9">J. B. Rainsberger</a> is quite useful for that</li>
<li>Even small codes can be bad and need to be reviewed (as the example)</li>
<li>Quick and dirty proof of concept do not mix well with code reviews</li>
</ul>

]]></content>
  </entry>
  
</feed>
