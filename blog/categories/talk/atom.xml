<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Talk | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/talk/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-05-04T01:06:40+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Talk: Simplicity Matters]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/18/talk-simplicity-matters/"/>
    <updated>2015-04-18T14:44:06+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/18/talk-simplicity-matters</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve seen this video by <a href="http://twitter.com/@richhickey">Rich Hickey</a>: &ldquo;<a href="https://www.youtube.com/watch?v=rI8tNMsozo0">Simplicity matters</a>&rdquo;, taken from <a href="http://twitter.com/@trikitrok">Manuel Rivero</a>&rsquo;s google plus&#8217; <a href="https://plus.google.com/u/0/117817370205182982732/posts/W6Gd9v67BgS?cfem=1">site</a></p>

<p>here are my notes:</p>

<ul>
<li>the software is the elephant</li>
<li>do more, do it differently, do it better</li>
<li>complexity of the elephant is going to dominate what you can do</li>
<li>your ability to reason about your program is critical</li>
<li>design is about pulling things apart</li>
<li>become familiar by learning, trying</li>
<li>&ldquo;We can be creating the exact same programs out of significantly simpler components&rdquo;. Rich Hickey</li>
</ul>


<p>Complexity vs simplicity:</p>

<table>
<thead>
<tr>
<th>Complexity     </th>
<th> Simplicity</th>
</tr>
</thead>
<tbody>
<tr>
<td>state, objects </td>
<td> values</td>
</tr>
<tr>
<td>methods </td>
<td> functions, namespaces</td>
</tr>
<tr>
<td>variables </td>
<td> managed refs</td>
</tr>
<tr>
<td>inheritance, switch, matching  </td>
<td> polymorphism à la carte</td>
</tr>
<tr>
<td>syntax </td>
<td> data</td>
</tr>
<tr>
<td>imperative loops, fold </td>
<td> set functions</td>
</tr>
<tr>
<td>actors </td>
<td> queues</td>
</tr>
<tr>
<td>ORM </td>
<td> declarative data manipulation</td>
</tr>
<tr>
<td>conditionals </td>
<td> rules</td>
</tr>
<tr>
<td>inconsistency </td>
<td> consistency </td>
</tr>
</tbody>
</table>


<ul>
<li>he does not agree on &ldquo;simplicity&rdquo; on the agile manifesto</li>
<li>simplicity is not about you. simplicity is a lot of hard work

<ul>
<li>clicked with paul graham&rsquo;s <a href="http://www.paulgraham.com/avg.html">LISP startup</a></li>
</ul>
</li>
<li>simplicity is not an objective</li>
</ul>


<p>Order is all over the place:</p>

<table>
<thead>
<tr>
<th>Complex  </th>
<th> Simple</th>
</tr>
</thead>
<tbody>
<tr>
<td>positional arguments </td>
<td> named arguments or map</td>
</tr>
<tr>
<td>syntax </td>
<td> data</td>
</tr>
<tr>
<td>product types  </td>
<td> associate records</td>
</tr>
<tr>
<td>imperative programs </td>
<td> declarative programs</td>
</tr>
<tr>
<td>prolog </td>
<td> datalog</td>
</tr>
<tr>
<td>call chains </td>
<td> queues</td>
</tr>
<tr>
<td>XML </td>
<td> JSON, Clojure literals</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk: 'Is TDD Dead? Of Course Not! But What´s All the Fuzz About Then?' by Emily Bache]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-by-emily-bache/"/>
    <updated>2015-01-06T15:47:47+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-by-emily-bache</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just seen this talk: <a href="https://www.youtube.com/watch?v=PCEHRFHKZSk">Is TDD dead? Of course not! But what´s all the fuzz about then?</a> by <a href="https://twitter.com/emilybache">Emily Bache</a></p>

<h3>My notes</h3>

<ul>
<li>deliberate vs accidental learning (around minute 19)</li>
<li><p>do not be an evangelist for tdd but rather &ldquo;come learn tdd, come at a dojo with us!&rdquo;</p></li>
<li><p>points to <a href="https://twitter.com/tastapod">Dan North</a>&rsquo;s <a href="www.youtube.com/watch?v=SPj-23z-hQA">talk</a> (at the same foo café)</p></li>
<li>points to her book - <a href="https://leanpub.com/codingdojohandbook">The Coding Dojo Handbook</a></li>
<li><p>points to <a href="http://cyber-dojo.org/">cyber dojo</a></p></li>
<li><p>design is hard whether you do TDD or not</p></li>
<li><a href="https://twitter.com/dhh">dhh</a>: too much focus on unit test.</li>
</ul>


<blockquote><p>I thought we got rid of best practices in agile</p></blockquote>

<ul>
<li>different kinds of advice for each kind of target (eg, based on experience level)</li>
<li>points to self-testing code (by <a href="https://twitter.com/martinfowler">Martin Fowler</a>)</li>
<li>problem: the test suite is no longer in sync with the production code</li>
<li>points to approval testing:

<ul>
<li>code kata &ldquo;minesweeper&rdquo;</li>
<li>test data + code produces output data</li>
<li>I approve the data</li>
<li>Useful for full features</li>
<li>Useful for asserting on difficult parts like images</li>
<li>realistic users to generate tests</li>
<li>tool to manage these &ldquo;approval tests&rdquo;. Easy way of managing tests cases</li>
<li><a href="http://texttest.org">TextTest</a> is one of these tools</li>
</ul>
</li>
</ul>


<h3>Her conclusions</h3>

<ul>
<li>Watch out the fundamentalism</li>
<li>TDD might take you to too many layers of indirection</li>
<li>The share of each test (end to end, integration, unit) depends on each project / part</li>
<li>Many TDD pieces of advice is directed to novices. When you&rsquo;re not, you should know when to stop listening</li>
</ul>


<p>PS: I&rsquo;ve first seen this video in <a href="http://garajeando.blogspot.com/2015/01/interesting-talk-is-tdd-dead-of-course.html">garajeando</a></p>
]]></content>
  </entry>
  
</feed>
