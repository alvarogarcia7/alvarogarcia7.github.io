<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2016-01-20T09:31:53+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tool: Building a Local Pipeline]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/10/10/tool_building_local_pipeline/"/>
    <updated>2015-10-10T10:06:58+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/10/10/tool_building_local_pipeline</id>
    <content type="html"><![CDATA[<h2>Motivation</h2>

<p>At a client, one of the projects has a long building process and the tests are mostly slow, so I use a local building <a href="https://en.wikipedia.org/wiki/Pipeline_(software)">pipeline</a>, an example of the <a href="https://msdn.microsoft.com/library/dn568100.aspx">Pipes and Filters</a> pattern.</p>

<p>This allows for executing manually only the fast unit tests, then automatically (no user intervention, no time spent) executing the rest of them before pushing. In case the latter fails, it is possible to do <code>git push -f</code> to the <code>pipeline</code> without corrupting the central repository (<code>origin</code>) history, possibly disturbing others.</p>

<p>This strategy also allows for parallel modification of sources: you can continue working on your IDE while the compiler is working on the other working directory. Should you introduce any syntax / logical error on your working code, the compiler is not affected, as it has a working copy just for itself.</p>

<h2>Implementation</h2>

<p>This requires two git repositories:</p>

<ul>
<li><code>local</code> or working copy. Configure it so it has a remote called <code>pipeline</code> and the <code>origin</code>, the repository you cloned from. This is a non-bare repository.</li>
<li><code>pipeline</code>, used for building. This also is a non-bare repository.</li>
</ul>


<p>In the <code>local</code> you can do the development and local commits.</p>

<p>When you&rsquo;re done, instead of</p>

<pre><code class="bash">git push origin $branch
</code></pre>

<p>do</p>

<pre><code class="bash">git push pipeline $branch
</code></pre>

<p>After the git hook is installed, this will trigger the pipeline execution.</p>

<h3>Git hook</h3>

<p>In the <code>pipeline</code>, in the <code>.git/hooks/post-receive</code> file:</p>

<pre><code class="bash">#!/bin/bash
chmod +x pipeline.sh
while read oldrev newrev refname
do
  # whatever you want to execute
   branch=$(git rev-parse --symbolic --abbrev-ref $refname)
  ./pipeline.sh $branch
done
</code></pre>

<p>In the above script, we&rsquo;re telling git to execute the <code>pipeline.sh</code> with the received branch as argument.</p>

<h3>Pipeline executor</h3>

<p>In the <code>pipeline</code> repository, in <code>.git/pipeline.sh</code> file:</p>

<pre><code class="bash">#!/bin/bash

set -e
set -o pipefail

function cleanup {
  git checkout develop
  git pull develop
}

# upon failure, tell the user
function err {
  cleanup
  growlnotify "pipeline fails"
}

# trap signal ERR, executing function 'err'
trap "err" ERR

branch=$1

if [[ -z $branch ]]; then
    echo "need to specify a branch"
    exit -1
fi

git checkout $branch
mvn clean install | tee output.log
git push --set-upstream origin $branch
cleanup
</code></pre>

<h4>Pipeline executor explanation</h4>

<ul>
<li><p>We prepare the bash environment:</p>

<ul>
<li><code>-e</code>: fail the script when a command fails</li>
<li><code>-o pipefail</code>: fail the script when some command fails in a pipe</li>
<li><code>err</code> and <code>trap</code>: create a hook to be executed when the signal is trapped</li>
</ul>
</li>
<li><p>We require a branch to execute this script.</p></li>
<li>Checkout to that branch</li>
<li>Clean, compile &amp; execute tests</li>
<li>Push to origin</li>
<li>Clean up</li>
<li>In case this fails, the script will stop and notify the user with <code>growl</code> and clean up.</li>
</ul>


<p>Clean up: checkout to develop (or any other branch that always exists), leaving the system prepared to execute again.</p>

<h3>Notifications: telling the user</h3>

<p>The program <code>growlnotify</code> is a <a href="http://www.growlforwindows.com/gfw/help/growlnotify.aspx">CLI notifier</a> to <code>growl</code> (<a href="http://www.growlforwindows.com/gfw/default.aspx">windows</a>, <a href="http://mattn.github.io/growl-for-linux/">linux</a>)</p>

<h2>Conclusions</h2>

<p>Ideally, the tests should be faster, and executing them locally should always be possible, maybe in the <code>pre-commit</code> hook. Whenever this is not possible, a local pipeline can reduce the time spent waiting for test execution and remove the lock on the working directory while the compiler is working.</p>

<p>This pipeline aims to be simple, without many customizations and being single-user. For more complex workflows and other restrictions, it might be better to drop this project and start investigating continuous integration (CI) tools such as e.g., <a href="https://jenkins-ci.org/">Jenkins</a>, <a href="https://travis-ci.org/">Travis</a>, <a href="https://atlassian.com/software/bamboo">Bamboo</a></p>

<h2>Further work</h2>

<p>The jobs in the <code>pipeline</code> could be queued, so it is possible to push to the pipeline before the previous job has started. See reference below.</p>

<h2>Reference</h2>

<ul>
<li><a href="http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_12_02.html">Trap</a></li>
<li><a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html#The-Set-Builtin">Set Builtin</a></li>
<li><a href="http://idolinux.blogspot.com/2008/08/bash-script-error-handling.html">Sample bash error handling</a></li>
<li><a href="http://superuser.com/questions/220364/how-to-run-commands-as-in-a-queue">Queuing bash jobs</a></li>
</ul>


<h2>Appendix</h2>

<p>This script will push to the pipeline:</p>

<pre><code class="bash">#!/bin/bash

git push pipeline  2&gt;&amp;1 &gt; /dev/null &amp;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Massively Reverting Local Changes]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/07/08/tip-massively-reverting-local-changes/"/>
    <updated>2015-07-08T00:40:24+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/07/08/tip-massively-reverting-local-changes</id>
    <content type="html"><![CDATA[<p>I was changing a massive amount of files (>1000) for a repeated code. The search and replace query was not too exact and it broke many tests in the system. For that, I preferred reverting those tests.</p>

<p>Here&rsquo;s how to do it automatically:</p>

<p>Copy all the failing tests to a text editor:</p>

<p>Input:</p>

<pre><code>testSearchXMLDocument(io.company.controller.dms.DocumentControllerTest)
testCreateXMLDocument(io.company.controller.dms.DocumentControllerTest)
testUpdateXFPageMetadata(io.company.controller.dms.DocumentControllerTest)
testCreateDocumentCrop(io.company.controller.dms.DocumentControllerTest)
testUpdateCropMetadata(io.company.controller.dms.DocumentControllerTest)
testDeleteDocument(io.company.controller.dms.DocumentControllerTest)
testUpdateXmlDocumentMetadata(io.company.controller.dms.DocumentControllerTest)
testUpdateXML(io.company.controller.dms.DocumentControllerTest)
testSearchXFPage(io.company.controller.dms.DocumentControllerTest)
testCreateXFPage(io.company.controller.dms.DocumentControllerTest)
testUpdatePage(io.company.controller.dms.DocumentControllerTest)
testSearchCrop(io.company.controller.dms.DocumentControllerTest)
testUpdateCrop(io.company.controller.dms.DocumentControllerTest)
testMoveDocument(io.company.controller.dms.DocumentControllerTest)
testGetDocument(io.company.controller.dms.DocumentControllerTest)
</code></pre>

<p>regex:</p>

<p>(tested in Sublime 3, build 3083, Windows 64)</p>

<p>find what: <code>^[^(]+\([a-Z.]*\.(.*)\)</code></p>

<p>replace with: <code>$1</code></p>

<p>Regex explanation for <code>^[^(]+\([a-Z.]*\.(.*)\)</code>:</p>

<ul>
<li><code>^</code>: beginning of line</li>
<li><code>[^(]+</code>: every character except parenthesis, one or more times</li>
<li><code>\([a-Z.]*</code>: start with one parenthesis, any number of a-z, A-Z</li>
<li>`.``: a dot, as I&rsquo;m using regex replacement</li>
<li><code>(.*)</code>: any character, zero or more times, captured in group <code>$1</code></li>
<li><code>\)</code>: closing parenthesis</li>
</ul>


<p>Output:</p>

<pre><code>DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
</code></pre>

<p>copy that to file <code>a.txt</code></p>

<p>Revert all the changes in these files:</p>

<pre><code class="bash">for i in $(cat a.txt | uniq); do
  git checkout -- *$i*
done
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Committing to the Repo File by File]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/07/08/tip-committing-to-the-repo-file-by-file/"/>
    <updated>2015-07-08T00:37:08+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/07/08/tip-committing-to-the-repo-file-by-file</id>
    <content type="html"><![CDATA[<p>I was prefer committing to the repo with commits that are as small as possible as long as it makes sense. It makes it much easier to rever the changes.</p>

<p>This is why I have some scripts to commit all the changes, even with the same message. This is one of them:</p>

<pre><code class="bash">for f in $(git status -s |grep "^M"|awk '{print $2}'); do
  git add $f
  git commit -m "generic commit for all files"
done
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-study in June 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/"/>
    <updated>2015-06-03T11:13:10+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015</id>
    <content type="html"><![CDATA[<p>Update: I&rsquo;ve grouped all small posts related to the self-study from June 2015
into a single post</p>

<h2>Le monitoring de flux par l’exemple</h2>

<p>I&rsquo;ve read <a href="http://blog.octo.com/le-monitoring-de-flux-par-lexemple/">this article</a> about monitoring, in the way of &ldquo;by example&rdquo;, by Cédrick Lunven and Julien Kirch (French)</p>

<h2>The First Micro-service Architecture</h2>

<p>I&rsquo;ve read <a href="http://blog.cleancoder.com/uncle-bob/2015/05/28/TheFirstMicroserviceArchitecture.html">this article</a> about microservices and how they were implemented many years ago by Robert C. Martin</p>

<h2>How I Learned to Balance My Life With Remote Work</h2>

<p>I&rsquo;ve read <a href="https://open.bufferapp.com/remote-work/?utm_content=bufferaa5a2&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">this article</a> about balancing life and work, either physical or remote by Michael Erasmus</p>

<h2>Demystified CQRS</h2>

<p>I&rsquo;ve read <a href="https://blog.codecentric.de/en/2015/05/demystified-cqrs/?utm_content=buffer35b18&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">this article</a> about CQRS by Nino Martincevic</p>

<h2>The perils of programmer education in the bazaar</h2>

<p>I&rsquo;ve read <a href="http://blog.practicingruby.com/2015/06/04/the-perils-of-programmer-education-in-the-bazaar/">this article</a> by Gregory Brown</p>

<h2>6 useful and lesser-known git commands</h2>

<p>I&rsquo;ve read <a href="http://blog.joncairns.com/2015/05/6-useful-and-lesser-known-git-commands/">this article</a> about git commands (log, checkout, stash, cherry-pick, annotate) by Jon Cairns</p>

<h2>Is Your Scrum Standup Slowing You Down?</h2>

<p>I&rsquo;ve read <a href="http://www.sitepoint.com/scrum-standup-slowing-down/">this article</a> by M. David Green</p>

<h2>Me duele Indra</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;id=67ce79e01b">this Bonilista</a> (Spanish) by David Bonilla</p>

<h2>TDD, BDD, [add every other method that promises software quality here] and the tea tasting lady</h2>

<p>I&rsquo;ve read <a href="https://blinkingcaret.wordpress.com/2012/10/02/tdd-bdd-add-every-other-method-that-promises-software-quality-here-and-the-tea-tasting-lady/">this article</a> by Rui Figueiredo about the scientific method, TDD / BDD and how to scientifically detect if the &lsquo;how&rsquo; affects the result. In this case, exemplified by how to prepare your tea</p>

<h2>The Art of Metaprogramming in Java</h2>

<p>I&rsquo;ve read <a href="http://www.slideshare.net/PolymathicCoder/the-art-of-metaprogramming-in-java">these slides</a> by Abdelmonaim Remani</p>

<h2>When TDD does not work</h2>

<p>I&rsquo;ve read <a href="https://blog.8thlight.com/uncle-bob/2014/04/30/When-tdd-does-not-work.html">this article</a> by Uncle Bob on situations where TDD might not be appropiate, especially around the borders</p>

<h2>Mi primera semana como aprendiz</h2>

<p>I&rsquo;ve read <a href="http://ronnyancorini.es/blog/index.php/2015/06/08/mi-primera-semana-como-aprendiz/">Ronny Ancorini&rsquo;s experiences</a> in his first week as apprentince with Carlos Blé &amp; Associates (Spanish)</p>

<h2>Refactoring without good tests</h2>

<p>I&rsquo;ve read <a href="http://blog.codeclimate.com/blog/2013/12/05/refactoring-without-good-tests/">this article</a> by Peter Bell on how to deal with a legacy codebase, what are the effects of not having tests and how to deal with. How to add tests to a codebase that is not ready for it.</p>

<h2>Big Ball of Mud</h2>

<p>I&rsquo;ve read <a href="http://www.laputan.org/mud/">this paper</a>, containing a collection of patterns and antipatterns (disguised as notes) by Brian Foote and Joseph Yoder</p>

<h2>Comparision of different concurrency models: Actors, CSP, Disruptor and Threads [sic]</h2>

<p>I&rsquo;ve read <a href="http://java-is-the-new-c.blogspot.com.es/2014/01/comparision-of-different-concurrency.html">this comparison of concurrency models</a> by Rüdiger Möller</p>

<h2>5 Whys</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/5_Whys">this wikipedia</a> article on the technique called &ldquo;5 Whys&rdquo;</p>

<h2>Expectations, Outcomes, and Challenges of Modern Code Review</h2>

<p>I&rsquo;ve read <a href="http://research.microsoft.com/apps/pubs/default.aspx?id=180283">this paper</a>, <a href="http://research.microsoft.com/pubs/180283/ICSE%202013-codereview.pdf">direct link</a>, by Alberto Bacchelli and Christian Bird on code review at Microsoft.</p>

<p>They explain how they do it, the exact methodology they are using and why they do it.</p>

<p>The main reasons to code review are:</p>

<ul>
<li>finding defects</li>
<li>code improvement</li>
<li>alternative solutions</li>
<li>knowledge transfer</li>
<li>team awareness and transparency</li>
<li>also:

<ul>
<li>improve development process</li>
<li>avoid build breaks</li>
<li>share code ownership</li>
<li>track rationale</li>
<li>team assessment</li>
</ul>
</li>
</ul>


<h2>The quality wheel</h2>

<p>I&rsquo;ve read <a href="http://blog.jessitron.com/2015/04/the-quality-wheel.html">this article</a> by Jessica Kerr about the qualities of beautiful code</p>

<h2>5 Minute Physics</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=n6FKT-KafRk">this video</a> on interactions with the mobile devices and related to physics by David DeSandro</p>

<h2>Rise of the Transpilers</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=DspYurD75Ns">this video</a> on the rise of the transpilers and coffeescript by Jeremy Ashkenas</p>

<h2>Drawing Lines with Bresenham&rsquo;s Line Algorithm</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=zytBpLlSHms">this video</a> about how to apply the Bresenham&rsquo;s algorithm to draw lines (implemented in pseudo-code and javascript) by Jenn Schiffer</p>

<h2>Working with Minified JavaScript</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=SuFNR7-XjKI">this video</a> by John Crepezzi on how to mix javascript files (clients and yours), how to decompile javascript in chrome, dev &amp; debug tools</p>

<h2>How we ran our Legacy Code Retreat</h2>

<p>I&rsquo;ve read <a href="https://pboop.wordpress.com/2012/02/19/how-we-ran-our-legacy-code-retreat/">this article</a> by Andreas Leidig, looking for inspiration on running a legacy code retreat / brown-bag session. The experience report <a href="../../../../2015/06/23/brown-bag-session-refactoring-legacy-code/">is here</a></p>

<h2>Shift Left: Testing Earlier in Development</h2>

<p>I&rsquo;ve read <a href="http://wirfs-brock.com/blog/2015/06/18/shift-left">this article</a> by Rebecca Wirfs-Brock</p>

<h2>Polymorphic Equality</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/06/polymorphic-equality/">this article</a> on implementing polymorphic equality on C#, by Carlos Blé</p>

<h2>Commit messages are not titles</h2>

<p>I&rsquo;ve read <a href="http://antirez.com/news/90">this article</a> on git commit messages and how to use them, by antirez</p>

<h2>Oracle Considers G1 Garbage Collector for Java 9</h2>

<p>I&rsquo;ve read this <a href="https://adtmag.com/articles/2015/06/22/oracle-java-9.aspx">press article</a> on the G1 and CMS collector, by John K. Waters</p>

<h2>What Tech Newbies Need</h2>

<p>I&rsquo;ve read <a href="https://storify.com/jesslynnrose/what-tech-newbies-need">this set of tweets</a>, grouped by Jessica Rose about the most helpful things beginners can do to improve their programming skills.</p>

<h2>JavaScript For Cats</h2>

<p>I&rsquo;ve read <a href="http://jsforcats.com/">this introductory guide</a> to javascript by <a href="https://twitter.com/maxogden">Max Ogden</a></p>

<h2>Why Doesn&rsquo;t Python Have Switch/Case?</h2>

<p>I&rsquo;ve read <a href="http://www.pydanny.com/why-doesnt-python-have-switch-case.html">this article</a> on the switch case in the python language by Daniel Roy Greenfeld</p>

<h2>[Joseph Moniz&rsquo;s] Notes on Clojure</h2>

<p>I&rsquo;ve read Joseph Moniz&rsquo;s <a href="http://blog.plasmaconduit.com/notes-on-clojure/">Notes on Clojure</a>.</p>

<h2>Chemical Computing with Clojure</h2>

<p>I&rsquo;ve read <a href="http://gigasquidsoftware.com/chemical-computing/index.html">an article</a> on performing abstract computations with chemicals, written in Clojure by Carin Meier</p>

<h2>Lenses</h2>

<p>I&rsquo;ve read <a href="http://www.haskellforall.com/2012/01/haskell-for-mainstream-programmers_28.html">this tutorial</a> on writing lenses for haskell, a way of importing imperative getters / setters to a Data. Written by Gabriel Gonzalez.</p>

<p>On another note, the first part, about writing getters and setters in the naive way, is also explained in Learn you a Haskell > Chapter 8 Making Our Own Types and Typeclasses > Record syntax</p>

<h2>Microservices in Haskell</h2>

<p>I&rsquo;ve read <a href="https://github.com/AlexanderAA/haskell-microservices/blob/gh-pages/haskell-microservices.md">these notes</a> on implementing a microservice in haskell, by <a href="https://github.com/AlexanderAA">AlexanderAA</a></p>

<h2>Overcoming Resistance to Change - Isn&rsquo;t It Obvious?</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=hcz1aZ60k7w">this video</a> in the channel of The World with Theory of Constraints</p>

<h2>Bacon is bad for you</h2>

<p>I&rsquo;ve read <a href="https://speakerdeck.com/garann/bacon-is-bad-for-you">these slides</a>
 on professionalism and the programmer culture, by Garann Means</p>

<h2>Code is a job</h2>

<p>I&rsquo;ve read <a href="https://speakerdeck.com/garann/code-is-a-job">these slides</a>, that are the continuation of &ldquo;Bacon is bad for you&rdquo;, by the same author, Garann Means</p>

<h2>The Great Newline Schism</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/the-great-newline-schism/">this article</a> by Jeff Atwood on the difference in newline character(s)</p>

<h2>Top ten reasons why I won’t use your open source project</h2>

<p>I&rsquo;ve read <a href="https://changelog.com/top-ten-reasons-why-i-wont-use-your-open-source-project/">this article</a> on what&rsquo;s necessary for an open-source project to be usable by others. Written by Adam Stacoviak</p>
]]></content>
  </entry>
  
</feed>
