<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code-review | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/code-review/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2016-03-31T17:22:32+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Open Space: Code Reviews]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews/"/>
    <updated>2015-03-16T21:44:42+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ve discussed about code reviews on <a href="http://www.meetup.com/Barcelona-Software-Craftsmanship/events/220293683/">this open space</a></p>

<h2>Notes</h2>

<p>These are my notes, in no particular order:</p>

<ul>
<li>reduce information silos all around the company, as everyone [technical] can participate in these events</li>
<li>raise the &ldquo;just arrived&rdquo; people&rsquo;s knowledge [Difficult to hit the ground up and running, but these code review sessions can help]</li>
<li>invest one person as &lsquo;sheriff&rsquo; for the sprint: they will take care of static analysis tools (such as sonar) and continuous integration (CI; such as jenkins). They will make sure others follow the working agreements</li>
<li>In the academic environment, some teams do share their patches via mailing lists and this makes it much slower to adapt and review changes [As compared to an on-line sharing system - like web-based interfaces to distributed version control systems] As this team doesn&rsquo;t have a CI tool, they must test it / try it manually before reviewing the code.</li>
<li>Pair programming does not remove the need for code review [This has been surfaced twice]</li>
<li>Your work is not more important than your team members' one. [Related to not having time to code review]</li>
<li>Do code reviews include architecture? [We&rsquo;ve agreed that the architecture to some degree should be discussed before code reviews]</li>
<li>&ldquo;Troll review&rdquo;</li>
<li>Anyone can veto pull requests [By opening a question; do not allow for pull requests to be closed with open questions]</li>
<li>A 15-minute time slot everyday to code review [As code hygiene; Done right after lunch,  breakfast or just before leaving, when you&rsquo;re tired]</li>
<li>Code review tasks have higher priority than other tasks [Do not take other tasks if there are code reviews to do]</li>
<li>Code reviews put a lot of pressure so people learn and the knowledge level equalizes across the team</li>
</ul>


<h2>Conclusions</h2>

<p> My conclusions, even though some of them were not shared by everyone:</p>

<ul>
<li>Most of the people approve of code review practices: either they are doing them or are trying to apply them at their clients. (Warning: this was a code review meetup, so there&rsquo;s a bias: people not interested in them won&rsquo;t come). No one was against doing them.</li>
<li>Code reviews have a cost, although it is beneficial to do them</li>
<li>Should your teammates not want to participate in the code review after agreeing on doing them, appeal to their professionalism / accountability, then to their time (stated before), then troll them: after a few (healthy) trolling code review sessions, people will feel more comfortable reviewing and being reviewed. Special mention to Miguel who coined (?)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> the term: troll review.</li>
<li>Great way of equalizing the (technical) knowledge level within the team</li>
<li>Great way of reduce information silos across the whole company</li>
<li>They can be fun if you do them properly</li>
<li>The need for code reviews do not disappear when pair programming: as long as you have a personal attachment to the code, you might not see its defects.</li>
</ul>


<h2>Your own</h2>

<p>Should you have any conclusions to share, please add a pull request to this <a href="https://github.com/alvarogarcia7/blog_source">repository</a> or do it as a comment.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>after searching some ten minutes on the internet, there are only a couple of questions on meta.codereview stackoverflow, but not related to this. <strong>Update</strong>: In <a href="https://twitter.com/mallyvai/status/314260072798752768">here</a>, Vaibhav Mallya talks about a #trollReview, related to code. So, unfortunately, Miguel, you&rsquo;re not the first one. But there are fewer than 10 results on twitter.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Discussion: On Code Reviews]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/07/open-discussion-on-code-reviews/"/>
    <updated>2015-02-07T17:54:54+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/07/open-discussion-on-code-reviews</id>
    <content type="html"><![CDATA[<p>At a client, I organized an open discussion on code reviews. We had a great conversation.</p>

<p>The main idea was to discuss about it and share the ideas each one had. I didn&rsquo;t want it to turn into a masterclass (see <a href="http://chimera.labs.oreilly.com/books/1234000001813/ch02.html#the_white_belt">the white belt</a>)</p>

<h2>Benefits</h2>

<p>These are the main benefits we saw in it:</p>

<ul>
<li>Increased trust</li>
<li>Learning from others, other approaches</li>
<li>Less defects, more quality</li>
<li>Increased <a href="http://en.wikipedia.org/wiki/Bus_factor">bus factor</a>, decreased information silos</li>
<li>Also:

<ul>
<li>Getting out of your comfort zone</li>
<li>Communicating more often (code style, edge cases, complaining, etc)</li>
</ul>
</li>
</ul>


<h2>Pair programming</h2>

<p>Then we discussed about the topic of <a href="/blog/categories/code-review">code reviews</a> and <a href="/blog/categories/pair-programming/">pair programming</a>:</p>

<ul>
<li><p>How do they mix</p>

<ul>
<li>Is the need for code review reduced when doing pair programming?</li>
<li>It is cheaper to catch defects when pairing than code review (e.g., less to modify, mental caches are hot, &hellip;), so why do code reviews? <a href="https://twitter.com/jbrains">J. B. Rainsberger</a> has an <a href="http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=acc77a0fb2&amp;e=4a925444f9">article</a> about it</li>
</ul>
</li>
<li><p>Does it give you the same benefits?</p>

<ul>
<li>I argued that it does, some of my colleagues argued against as one is &ldquo;while doing&rdquo; and the other is after.</li>
</ul>
</li>
</ul>


<h2>Practice, Practice, Practice</h2>

<p>This is also a reference to a chapter by the same name (<a href="http://chimera.labs.oreilly.com/books/1234000001813/ch05.html#practice_comma_practice_comma_practice">here</a>)</p>

<p>We proposed this problem:</p>

<blockquote><p>Receive a list of numbers to a command-line (CLI) application and print their sum</p></blockquote>

<p>I wrote simple code listing and we reviewed it. The code is <a href="https://gist.github.com/alvarogarcia7/258faea12cb9375539fe">here as a gist</a></p>

<p>(Just in case, I wrote this listing with some defects / smells on purpose)</p>

<p>Here are the comments:</p>

<ul>
<li>Not all parameters will be added, only the first three</li>
<li>The parameters are out of order, overcomplicating things. Is it due to something? Should I be careful about it?</li>
<li>There is duplication (i.e., parsing from string)</li>
<li>Bad naming: what is <code>a</code>, <code>b</code>, <code>c</code>?</li>
<li>There are no tests for it. No manual / javadoc either. Therefore, it&rsquo;s difficult to maintain</li>
<li><p>Difficult to test: a smell for bad design?</p>

<ul>
<li>How to test the adding by itself? The output is to the console, so we have to capture it (at GMaur we published this tool: <a href="https://github.com/GMaur/legacyutils">legacyUtils</a>)</li>
<li>How to test the parsing if there is no mock to be injected? Only via state tests, therefore &ldquo;end to end&rdquo; tests as it includes the adding</li>
</ul>
</li>
<li><p>Mixed concerns / responsibilities. Parsing the numbers and adding them are different concerns and should not be together</p></li>
</ul>


<h2>Conclusion</h2>

<ul>
<li>No one was against it</li>
<li>We all agreed that is important to do it even in time-constrained environments</li>
<li>It is also important to review our code reviews to make the most of it. The article by <a href="http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=acc77a0fb2&amp;e=4a925444f9">J. B. Rainsberger</a> is quite useful for that</li>
<li>Even small codes can be bad and need to be reviewed (as the example)</li>
<li>Quick and dirty proof of concept do not mix well with code reviews</li>
</ul>

]]></content>
  </entry>
  
</feed>
