<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress-2 | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/octopress-2/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2016-04-19T16:09:11+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Faster Site Generation With a Native Octopress 2]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2016/04/17/faster-site-generation-native-octopress/"/>
    <updated>2016-04-17T21:39:23+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2016/04/17/faster-site-generation-native-octopress</id>
    <content type="html"><![CDATA[<p>Note: this article is an answer to <a href="../../../../2015/07/13/faster-site-generation-for-octopress-2/">a previous one</a>, about the same topic: a tool for a faster site generation while developing / writing articles, using octopress 2.</p>

<h2>Introduction</h2>

<p>Octopress 2 packs, out of the box, some tasks to speed up the site generation while you&rsquo;re writing articles:</p>

<p>Isolate a post:</p>

<pre><code class="ruby"># usage rake isolate[my-post]
desc "Move all other posts than the one currently being worked on to a temporary stash location (stash) so regenerating the site happens much more quickly."
task :isolate, :filename do |t, args|
  stash_dir = "#{source_dir}/#{stash_dir}"
  FileUtils.mkdir(stash_dir) unless File.exist?(stash_dir)
  Dir.glob("#{source_dir}/#{posts_dir}/*.*") do |post|
    system "git update-index --assume-unchanged #{post}" unless post.include?(args.filename)
    FileUtils.mv post, stash_dir unless post.include?(args.filename)
  end
end
</code></pre>

<p>Integrate with the rest of the posts:</p>

<pre><code class="ruby">desc "Move all stashed posts back into the posts directory, ready for site generation."
task :integrate do
  posts_dir = "#{source_dir}/#{posts_dir}/"
  Dir.glob("#{source_dir}/#{stash_dir}/*.*") do |post|
    FileUtils.mv post, posts_dir
    full_path = "#{posts_dir}/#{post.split("/").reverse.first}"
    system "git update-index --no-assume-unchanged #{full_path}"
  end
end
</code></pre>

<h2>Usage</h2>

<p>(at the folder where the Rakefile is located)</p>

<ul>
<li>isolate the selected file. Specify the pattern to keep.</li>
</ul>


<pre><code class="bash">rake isolate["draft"]
</code></pre>

<ul>
<li>write the new content</li>
<li>commit to git</li>
<li>integrate with the rest of the files</li>
</ul>


<pre><code class="bash">rake integrate
</code></pre>

<ul>
<li>git push</li>
</ul>


<h2>Conclusion</h2>

<p>When I needed this tool, to speed up my feedback cycle, I didn&rsquo;t find any that did this job, so I created <a href="../../../../2015/07/13/faster-site-generation-for-octopress-2/">a small tool for this same purpose</a>. Unfortunately, there was one, so close to my nose that I could not find it. I was reinventing the wheel.</p>

<p>It is better to switch to a tool that has been tested by more users, that has received the community&rsquo;s approval than a custom-made tool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faster Site Generation for Octopress 2]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/07/13/faster-site-generation-for-octopress-2/"/>
    <updated>2015-07-13T05:49:23+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/07/13/faster-site-generation-for-octopress-2</id>
    <content type="html"><![CDATA[<p>2016-04 update: I&rsquo;ve discovered that the original Rakefile does a similar job. See <a href="[here](../../../../2016/04/17/faster-site-generation-native-octopress/)">here</a></p>

<p>After a while, the generation of the static site using <a href="http://octopress.org/2011/07/23/octopress-20-surfaces/">Octopress 2</a> was starting to be slow (around 2 minutes for 85 posts) for the kind of fast feedback cycle I was expecting.</p>

<p>Inspired by their new features in <a href="http://octopress.org/2015/01/15/octopress-3.0-is-coming/">Octopress 3</a>, one of them being faster site generation, I decided to retrofit my installation with the same feature.</p>

<p>Octopress 3 now has a different structure of posts and drafts. You can specify you only want to publish to your local preview your current draft instead of all of them, therefore being it faster. When you finish editing, all the posts are recovered and publishing to production uploads all of them</p>

<p>For Octopress 2, you can do something similar in a manual way. Create a copy of your working environment:</p>

<pre><code class="bash">cp -R blog_source blog_post_factory
</code></pre>

<p>Git ignore all existing markdown files in the folder <code>source/_posts</code></p>

<pre><code class="bash">cd blog_post_factory/source/_posts
git update-index --assume-unchanged $(ls *markdown)
</code></pre>

<p>Delete all existing markdown files</p>

<pre><code class="bash">rm *markdown
</code></pre>

<p>Check that git doesn&rsquo;t realize about the difference:</p>

<pre><code class="bash">git status

# On branch source
nothing to commit (working directory clean)
</code></pre>

<p>Create a new post:</p>

<pre><code class="bash">rake new_post["Faster site generation for Octopress 2"]
</code></pre>

<pre><code class="bash"># On branch source
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#   2015-07-13-faster-site-generation-for-octopress-2.markdown
nothing added to commit but untracked files present (use "git add" to track)
</code></pre>

<p>Edit as much as needed, reviewing changes in local. Push to the remote repository.</p>

<p>In the original (<code>blog_source</code>) folder, pull, then generate:</p>

<pre><code class="bash">rake generate &amp;&amp; rake deploy
</code></pre>

<p>[Optional: change the remote URL for the cloned repository, so the git push is faster.]</p>

<p>After each new post, you have to ignore old files again. I&rsquo;ve created a new task in the <code>Rakefile</code> for this purpose:</p>

<pre><code class="ruby">desc "Cleans all *.markdown files for a faster site generation"
task :ignore do
  cd "#{source_dir}/#{posts_dir}"
  system "git update-index --assume-unchanged $(ls *.markdown)"
  system "rm $(ls *.markdown)"
end
</code></pre>

<h2>Conclusion</h2>

<p>I&rsquo;ve reduced the amount of time to generate files from 2 minutes for 85 files to ~0.62 seconds for 1 file.</p>

<pre><code>Regenerating: 1 file(s) changed at 2015-07-13 08:03:29 ...done in 0.617269045 seconds.
</code></pre>
]]></content>
  </entry>
  
</feed>
