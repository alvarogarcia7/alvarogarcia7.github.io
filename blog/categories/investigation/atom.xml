<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Investigation | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/investigation/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-05-23T13:45:18+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Paper: TDD in Industrial Teams]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams/"/>
    <updated>2015-05-12T00:02:44+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve read <a href="http://www.msr-waypoint.net/en-us/groups/ese/nagappan_tdd.pdf">this paper</a> by Nagappan, Maximilien, Bhat and Williams on the cost, advantages, pitfalls of doing TDD in industrial teams (private companies who create software).</p>

<h2>My notes</h2>

<p>Abstract:</p>

<blockquote><p>little empirical evidence supports or refutes the utility of this practice in an industrial context</p></blockquote>

<ul>
<li>they seem to be talking about inside-out tdd as in chapter 2 (page 291), they talk about small units and then integrating them in a bigger context</li>
</ul>


<h3>Benefits</h3>

<p>taken from chapter 2 (page 292)</p>

<ul>
<li>Better design</li>
<li>Efficiency</li>
<li>Test assets</li>
<li>Reducing defect injection</li>
</ul>


<h3>Conclusions</h3>

<blockquote><p>TDD seems to be applicable in various domains</p>

<p>[TDD] can significantly reduce the defect density of developed software without significant productivity reduction [&hellip;]</p>

<p>[&hellip;] an important aspect of TDD is the creation of tests assets.</p></blockquote>

<p>Recommendations (this is all quotes):</p>

<ul>
<li>Start TDD from the beginning of projects</li>
<li>For a team new to TDD, introduce automated build test integration towards the second third of the development phase</li>
<li>[&hellip;] add new tests every time a problem is found</li>
<li>Get the test team involved and knowledgeable about the TDD approach</li>
<li>Constantly running the unit tests [&hellip;]</li>
<li>Encourage fast unit test execution and efficient unit testing design</li>
</ul>

]]></content>
  </entry>
  
</feed>
