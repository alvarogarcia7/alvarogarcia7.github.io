<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-04-14T23:53:18+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Inserting Clojure Code in Octopress]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/14/inserting-clojure-code-in-octopress/"/>
    <updated>2015-04-14T23:48:27+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/14/inserting-clojure-code-in-octopress</id>
    <content type="html"><![CDATA[<p>Inserting this code in the blog:</p>

<pre><code>```clojure
(defn all-access[k]
    (let [{:keys [a b] :as k}]
        (do a)
        (do (:b k))))
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;the octopress processor throws the error:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;Error: Pygments can't parse unknown language: clojure
</span><span class='line'>Error: Run jekyll build --trace for more information.
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;A solution would be to include it as lisp code:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;```lisp
</span><span class='line'>(defn all-access[k]
</span><span class='line'>    (let [{:keys [a b] :as k}]
</span><span class='line'>        (do a)
</span><span class='line'>        (do (:b k))))</span></code></pre></td></tr></table></div></figure>
</code></pre>

<p>this is an example:</p>

<pre><code class="lisp">(defn all-access[k]
    (let [{:keys [a b] :as k}]
        (do a)
        (do (:b k))))
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Destructuring as a Refactor in Clojure]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure/"/>
    <updated>2015-04-14T23:36:23+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/@trikitrok">Manuel</a> has taught us today about the default value while destructuring:</p>

<blockquote><p>The following example illustrates the use of an :as directive to bind a local with the entire map.</p></blockquote>

<pre><code>user=&gt; (def point {:x 5 :y 7})
#'user/point

(let [{:keys [x y] :as the-point} point]
         (println "x:" x "y:" y "point:" the-point))

x: 5 y: 7 point: {:x 5, :y 7}
</code></pre>

<blockquote><p>We&rsquo;ve now seen the :as directive used for both vectors and maps. In both cases the local is always assigned to the entire expression that is being destructured.</p></blockquote>

<p><a href="http://blog.jayfields.com/2010/07/clojure-destructuring.html">Source</a></p>

<p>This has been used for a method like this one:</p>

<pre><code class="lisp">(defn all-access[k]
  (do (:a k))
  (do (:b k)))
</code></pre>

<p>this has been refactored to this</p>

<pre><code class="lisp">(defn all-access[k]
  (let [{:keys [a b] :as k}]
      (do a)
      (do (:b k))))
</code></pre>

<p>the best thing about this is I can introduce the keys to the array while keeping the original map (<code>k</code>) and, when I&rsquo;m ready, to change some of the accesses to <code>k</code> to its destructured variables.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kata: Mars Rover in Clojure]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/05/kata-mars-rover-in-clojure/"/>
    <updated>2015-03-05T00:33:50+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/05/kata-mars-rover-in-clojure</id>
    <content type="html"><![CDATA[<p>Yesterday at the <a href="http://www.meetup.com/ClojureBCN/events/220773795/">clojure meetup</a> we<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> did the <a href="http://dallashackclub.com/rover">mars rover</a> in clojure and today I&rsquo;ve tried my hand at it again. Original, from the three of us <a href="https://github.com/jesusdiez/kata-rover-clojure">here</a> and my <a href="https://github.com/alvarogarcia7/kata-rover-clojure">results here</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://twitter.com/jorgeavila_ss">Jorge Ávila</a>, <a href="https://twitter.com/jdiezc">Jesús Díez</a> and I<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
