<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Non-strictness | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/non-strictness/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2016-04-30T19:04:38+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Self-Study in March 2016]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/"/>
    <updated>2016-03-02T10:58:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016</id>
    <content type="html"><![CDATA[<h2>Learning Programming Isn’t That Hard, Deep Work Is Hard</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@benedictfritz/learning-programming-isn-t-that-hard-deep-work-is-hard-40a4cf3104f4">this article</a> by Benedict Fritz on two types of work (i.e., deep and shallow) and how programming is of the deep type. He links the difficulty of learning to program to the difficulty of practicing deep work.</p>

<p>Tags: analogy, benedict-fritz, deep-work, shallow-work, learn-to-program, psychology</p>

<h2>BeCodeWeek by Yeray Darias</h2>

<p>I&rsquo;ve read <a href="http://developerscookbook.blogspot.com.es/search/label/desk-surfing">this category of posts</a> by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.</p>

<p>Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc</p>

<p>Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis</p>

<h2>BeCodeWeek by Yeray Darias</h2>

<p>I&rsquo;ve read <a href="http://developerscookbook.blogspot.com.es/search/label/desk-surfing">this category of posts</a> by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.</p>

<p>Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc</p>

<p>Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis</p>

<h2>Tracer Bullets</h2>

<p>I&rsquo;ve read <a href="http://c2.com/cgi/wiki?TracerBullets">this page</a> about tracer bullets, an analogy from the military warfare to a software project.</p>

<p>Serves the purpose of adjusting the aim of the cannon to better reach the target.</p>

<p>Tags: analogy, metaphor, warfare, management</p>

<h2>Cohesion - the cornerstone of software design</h2>

<p>I&rsquo;ve read <a href="http://codurance.com/2016/03/03/cohesion-cornerstone-software-design/">this article</a> by Sandro Mancuso on the topic of cohesion. Describes the 7 types of cohesion, as described in Structured Design<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, from worst to best:</p>

<ul>
<li>Coincidental cohesion</li>
<li>Logical cohesion</li>
<li>Temporal cohesion</li>
<li>Procedural cohesion</li>
<li>Communicational/informational cohesion</li>
<li>Sequential cohesion</li>
<li>Functional cohesion</li>
</ul>


<p>and about Design-Level Cohesion:</p>

<ul>
<li>Coincidental relation (R1)</li>
<li>Conditional relation (R2)</li>
<li>Iterative relation (R3)</li>
<li>Communication relation (R4)</li>
<li>Sequential relation (R5)</li>
<li>Functional (R6)</li>
</ul>


<p>Tags: cohesion, codurance, edward-yourdon, larry-constantine, list, sandro-mancuso, software-design, design-level-cohesion, smc-cohesion, dlc-cohesion</p>

<h2>Etsy CTO Q&amp;A: We Need Software Engineers, Not Developers</h2>

<p>I&rsquo;ve read <a href="http://thenewstack.io/etsy-cto-qa-need-software-engineers-not-developers/">this interview</a> with John Allspaw, where they explain the onboarding experience for new hires at Etsy, the DevOps philosophy and the need for engineering skills, more than developer skills. This can be exemplified in the need to know more, defining the boundaries of your job and finding the right tool for the job.</p>

<p>Tags: devops, interview, q-and-a, john-allspaw, etsy, onboarding, hire, team-management, deploy</p>

<h2>Frequency Reduces Difficulty</h2>

<p>I&rsquo;ve read <a href="http://martinfowler.com/bliki/FrequencyReducesDifficulty.html">this article</a> by Martin Fowler on why we should repeat things that are difficult for us:</p>

<ul>
<li>Perfectioning the technique</li>
<li>Internalizing the details</li>
<li>Easing its automation</li>
</ul>


<p>Tags: martin-fowler, automation, process, perfection, internalizing, technique, detail, process-theory, agile</p>

<h2>Lambdas are confusing</h2>

<p>I&rsquo;ve watched this video where Coman Hamilton from JAXenter interviews Dr. Heinz Kabutz about Java&rsquo;s lambda syntax. Cites the problem with exceptions, generics, method overloading.</p>

<p>Tags: java, lambda, coman-hamilton, jaxenter, heinz-kabutz, problem</p>

<p><a href="https://www.youtube.com/watch?v=WcHom1eVhi4&amp;feature=youtu.be">https://www.youtube.com/watch?v=WcHom1eVhi4&amp;feature=youtu.be</a></p>

<h2>El full-stack developer en 2016</h2>

<p>I&rsquo;ve read <a href="http://www.developerdepueblo.com/development/full-stack-developer-2016/">this article</a> by Jose Ignacio Andrés about the job descriptions of 2016.</p>

<blockquote><p>El principal valor de un full-stack es poder simplificar el trabajo a los demás miembros del equipo.</p></blockquote>

<p>My translation:</p>

<blockquote><p>The main value of a full-stack developer is to be able to simplify other teammates' work</p></blockquote>

<p>Tags: teamwork, teammate, fullstack, simplification, work, team-management, jose andres</p>

<h2>I am a software craftsman</h2>

<p>I&rsquo;ve read <a href="http://www.dirv.me/i-am-a-software-craftsman/index.html">this article</a> by Daniel Irvine about calling yourself a craftsman or not. He says that if you adhere to their values, you should.</p>

<p>Tags: craftsmanship, label, daniel-irvine, craftsman, group-belonging</p>

<h2>Teaching Programming Languages in a Post-Linnaean Age</h2>

<p>I&rsquo;ve read <a href="http://cs.brown.edu/~sk/Publications/Papers/Published/sk-teach-pl-post-linnaean/paper.pdf">this paper</a> by Shriram Krishnamurthi where he explains the need for books like <a href="http://www.plai.org/">PLAI</a>:</p>

<ul>
<li>lack of paradigms in new languages, and its separation (or lack of)</li>
<li>design of languages cheaper and cheaper these days</li>
<li>rigor level in publications</li>
<li>inductive and deductive learning</li>
</ul>


<h2>Notes</h2>

<p><code>post-Linnaean</code> refers to the <a href="https://en.wikipedia.org/wiki/Carl_Linnaeus">Carl Linnaeus</a>:</p>

<blockquote><p>He is known as the father of modern taxonomy</p></blockquote>

<p>Tags: inductive-learning, deductive-learning, dsl, domain-specific-language, type-soundness, continuation-style, garbage-collection, reactive-programming, scheme, plai, teaching, programming-language, shriram-krishnamurthi</p>

<h2>Lazy Ruby</h2>

<p>I&rsquo;ve read <a href="http://sonnym.github.io/2014/04/05/lazy-ruby/">this article</a> by sonnym about using ruby&rsquo;s lazy (non-strict) features, detailing an example with Fibonacci&rsquo;s sequence.</p>

<p>Tags: laziness, strictness, non-strictness, ruby, fibonacci, comparison</p>

<h2>Jessica Livingston</h2>

<p>I&rsquo;ve read <a href="http://paulgraham.com/jessica.html">this essay</a> by Paul Graham about his co-founder at the Y-combinator: Jessica Livingston. She was considered the Social Radar at YC</p>

<p>The essay also talks about the non-existent separation between working hours and not and about her implication and personality.</p>

<p>Tags: jessica-livingston, paul-graham, y-combinator, feminism, yc, essay</p>

<h2>Four Laws Of Software Economics (Part 1)</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@RichMironov/four-laws-of-software-economics-part-1-e162aa0ea9e5">this article</a> by Rich Mironov on why the development team will never be big enough (because of economics, because there are more things to be done than time to do them, so we have to prioritize them) and about the communication problems between the dev team and the client(s).</p>

<p>Also talks about the general personality of clients and devs and task prioritization</p>

<p>Tags: exclusive-or, magical-thinking, tnstaafl, management, agile, team, capacity, death-march, estj, intp, software-economics, product-strategy, law-of-ruthless-prioritization, law, rich-mironov, slack, myers-briggs-type</p>

<h2>You Should Take A Codecation</h2>

<p>I&rsquo;ve read <a href="https://robots.thoughtbot.com/you-should-take-a-codecation">this article</a> by Ben Orenstein explaining what is a codecation and what he&rsquo;s done in the two codecations he&rsquo;s taken.</p>

<p>Tags: codecation, ben-orenstein, vacation, holiday, coding, shipping, in-company</p>

<h2>Giving Up on TDD</h2>

<p>I&rsquo;ve read <a href="http://iansommerville.com/systems-software-and-technology/giving-up-on-test-first-development/">this article</a> by Ian Sommerville about the problems he&rsquo;s found while doing TDD, mainly about design, but also about being conservative in the amount of tests you allow yourself to break while refactoring.</p>

<p>Tags: tdd, ian-sommerville, refactoring, problem, design-problem, design, giving-up-tdd</p>

<h2>Giving Up on TDD - answer</h2>

<p>I&rsquo;ve read <a href="http://blog.cleancoder.com/uncle-bob/2016/03/19/GivingUpOnTDD.html">this article</a> by Robert C. Martin on the common issues for people adopting TDD:</p>

<ul>
<li>The Fragile Test Problem</li>
<li>The Design Problem</li>
<li>The Testable Design Problem</li>
<li>The Magic Bullet Problem</li>
</ul>


<p>This article is an answer to another by Ian Sommerville.</p>

<p>Tags: tdd, uncle-bob, robert-martin, adoption, ian-sommerville, fragile-test-problem, giving-up-tdd, design-problem, testable-design-problem, magic-bullet-problem</p>

<h2>Seek out jobs with fast learning cycles</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@sarahtavel/seek-out-jobs-with-fast-learning-cycles-f923c8d8a4be#.7bxx65a4x">this article</a> by Sarah Tavel on learning on the job and how fast these learning cycles can happen at companies at different stages of maturity.</p>

<blockquote><p>So if you’re thinking of changing jobs, or taking your first, my advice: find a place with a fast learning cycle, and a steep learning curve.</p></blockquote>

<p>Tags: learning, job, hypothesis, sarah-tavel, learning-cycle, maturity-level, learning-process, product-management</p>

<h2>Clean Code Vs. Implementation Patterns</h2>

<p>I&rsquo;ve read <a href="http://blog.xebia.com/clean-code-vs-implementation-patterns/">this comparison</a> of Clean Code vs Implementation Pattern books, by Vincent Partington.</p>

<p>In it, the author explains the differences in style in both books, and how they compare to others.</p>

<p>Tags: clean-code, implementation-patterns, comparison, book-review, book-comparison, vincent-partington</p>

<h2>Stuck in Traffic vlog #103 - New Spammer Techniques</h2>

<p>I&rsquo;ve seen <a href="https://www.peerlyst.com/posts/stuck-in-traffic-vlog-103-new-spammer-techniques-j-wolfgang-goerlich">this vlog entry</a> on machines fighting machines (exemplified with the spam producing and filtering) and how some spammers are trying more direct techniques focusing on higher-value targets, sometimes even handcrafting messages and modifying them every few units.</p>

<p>Tags: wolfgang-goerlich, spam, vlog, spammer, machine-learning</p>

<h2>Becoming A Finisher</h2>

<p>I&rsquo;ve read <a href="http://christopherdbui.com/becoming-a-finisher/">this article</a> by Christopher Bui where he explains that projects that are too ambitious stall your productivity and make you lose your focus.</p>

<p>Tags: christopher-bui, pomodoro, time-management, productivity, motivation, ambition, paul-graham, quote</p>

<h2>Hanging around with red-black tree implementations: the beginnings</h2>

<p>I&rsquo;ve read <a href="http://blog.fraixed.es/post/hanging-around-red-black-trees-implementations/">this article</a> by Ivan Fraixedes where he details the progress of implementing a red-black tree, and also his motivation for doing it.</p>

<p>Tags: ivan-fraixedes, red-black-tree, abstract-data-structure, adt, deliberate-practice, pet-project</p>

<h2>Some Tools for Faster Blogging in Octopress</h2>

<p>I&rsquo;ve read <a href="http://dgmstuart.github.io/blog/2015/03/27/some-tools-for-faster-blogging-in-octopress/">this article</a> for tips and tricks on how to blog faster with octopress. Written by Duncan Stuart.</p>

<p>Tags: duncan-stuart, blog, improvement, meta, octopress, tip-and-trick</p>

<h2>The veil of ignorance</h2>

<p>I&rsquo;ve read <a href="http://mrmrs.io/writing/2016/03/23/the-veil-of-ignorance/">this article</a> by Adam Morse on how not being on the top of the skills performance can affect your design and your user experience. Also, references the concept of &ldquo;The Veil of Ignorance&rdquo;, a concept by John Rawls.</p>

<p>Tags: john-rawls, veil-of-ignorance, user-experience, design</p>

<h2>To Smile Again &ndash; Recovering from the paralysis of burnout</h2>

<p>I&rsquo;ve read <a href="https://m.signalvnoise.com/to-smile-again-ae0ba9f2198c">this article</a> by Jamis Buck on his story of burnout, what symptoms had on him and how he got out of it.</p>

<p>Tags: burnout, jamis-buck, psychology, productivity, personal, story, analogy</p>

<h2>Beyond email: could startup Slack change the way you work?</h2>

<p>I&rsquo;ve read <a href="http://www.theguardian.com/technology/2016/mar/25/slack-butterfield-emoji-chat-nasa-harvard-silicon-valley">this article</a> on Slack&rsquo;s office culture, with their diversity, policies and values after a high people growth in a short period of time. By Jemima Kiss</p>

<p>Tags: culture, office-culture, slack, jemima-kiss</p>

<h2>Slack: Work This Way</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@iaintait/slack-work-this-way-9221284472dd">this article</a>, a response to my above read, about the office culture at Slack.</p>

<p>Tags: iain-tait, response, slack, office-culture</p>

<h2>BEM 101</h2>

<p>I&rsquo;ve read <a href="https://css-tricks.com/bem-101/">this introduction</a> to a CSS style called Block, Element, Modifier methodology (BEM).</p>

<p>In it,</p>

<blockquote><ul>
<li>a block is a top-level abstraction of a new component</li>
<li>Child items, or elements, can be placed inside and these are denoted by two underscores following the name of the block [&hellip;].
modifiers can manipulate the block so that we can theme or style that particular component without inflicting changes on a completely unrelated module. This is done by appending two hyphens to the name of the block [&hellip;].</li>
</ul>
</blockquote>

<p>By Joe Richardson, Robin Rendle et al.</p>

<p>Tags: joe-richardson, robin-rendle, bem, css, css-methodology, introduction, css-architecture, sass</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Structured Design: Fundamentals of a Discipline of Computer Program and Systems Design by Yourdon and Constantine.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Study in August 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/"/>
    <updated>2015-08-02T19:45:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015</id>
    <content type="html"><![CDATA[<h2>Humble Object</h2>

<p>I&rsquo;ve read the <a href="http://xunitpatterns.com/Humble%20Object.html">Humble Object</a> list of patterns, by Gerard Meszaros, including:</p>

<ul>
<li>humble dialog</li>
<li>humble executable</li>
<li>humble transaction controller</li>
<li>humble container adapter</li>
</ul>


<p>Tags: pattern, gerard-meszaros</p>

<h2>How you know</h2>

<p>I&rsquo;ve reread <a href="http://www.paulgraham.com/know.html">this small essay</a> by Paul Graham on storing information in our heads, based on the context. On the importance of rereading, to add more contexts to the initial one.</p>

<p>Tags: paul-graham, reread, read</p>

<h2>Protected Variation: The Importance of Being Closed</h2>

<p>I&rsquo;ve read <a href="http://www.martinfowler.com/ieeeSoftware/protectedVariation.pdf">this article</a> by Craig Larman in the magazine IEEE Software > Design.</p>

<p>Discusses Information Hiding, Protected Variation and the Open-Closed Principle.</p>

<p>Tags: craig-larman, ocp, open-closed principle, design, information-hiding, ih, protected-variation, pv,</p>

<h2>Lambda, Javascript Micro-Services on AWS</h2>

<p>I&rsquo;ve read <a href="http://www.jayway.com/2014/12/18/lambda-javascript-micro-services-aws/">this post</a> explaining how to deploy a microservice on AWS on top of Lambda. Written by Anders Janmyr</p>

<p>The cool thing is that you get billed by milliseconds!</p>

<p>Tags: anders-janmyr, devops, microservice, lambda, aws</p>

<h2>Migrating To Clojure. So Much Fn</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=Hv4slaRydRM">this talk</a> by Jan Stępień where he talks about his experience on migrating part of an application to clojure from ruby on rails</p>

<p>Tags: jan-stepien, clojure, migration, ruby-on-rails, talk, wrocloverb</p>

<h2>Te recomiendo escribir en un blog</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/07/te-recomiendo-escribir-en-un-blog/">this article</a> from Carlos Blé in which he recommends writing a blog, on things we discover along the way. (Spanish)</p>

<p>Tags: carlos-ble, meta, blog, long-way</p>

<h2>We need enough technical debt</h2>

<p>I&rsquo;ve read <a href="https://blog.svpino.com/2015/08/05/we-need-enough-technical-debt">this article</a> on why we need to accumulate a bit of technical debt, as a way of being less perfectionist and deliver more features / value to our stakeholders. Written by Santiago L. Valdarrama.</p>

<p>Tags: santiago-valdarrama, technical-debt, perfectionism</p>

<h2>Escribe mejores tests en Javascript</h2>

<p>I&rsquo;ve read <a href="http://carlosvillu.com/escribe-mejores-tests-en-javascript/">this list</a> of tips to write better javascript tests (Spanish). By Carlos Villuendas</p>

<p>Tags: carlos-villuendas, javascript, test</p>

<h2>Down the Rabbit Hole</h2>

<p>I&rsquo;ve read <a href="https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole">this wiki</a> page on how to tune some aspects of the server hotspot JVM, by Brett Wooldridge</p>

<p>Tags: performance, jvm, hotspot, inline, bytecode, brett-wooldridge</p>

<h2>XP Manchester Lightning Talks 2015 Live broadcast</h2>

<p>I have watched the first two <a href="https://www.youtube.com/watch?v=VD4UEW2i7hU">lightning talks</a> from XP Manchester, edition number 61.</p>

<p>Tags: lightning-talk, broadcast, simplicity, manchester, 2015</p>

<h2>Counting hash collisions with the birthday paradox</h2>

<p>I&rsquo;ve read <a href="http://matt.might.net/articles/counting-hash-collisions/">this article</a> on the birthday paradox, or the percentage of chance of people sharing the same birthday. This could be applied to hash function, as the title says, but is not included in the article. Written by Matt Might</p>

<h2>Why I&rsquo;m The Best Programmer In The World*</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/why-im-the-best-programmer-in-the-world/">this ironically-titled article</a> by Jeff Atwood on humility and how to improve as a programmer.</p>

<p>Tags: jeff-atwood</p>

<h2>The Key to Giving and Receiving Negative Feedback</h2>

<p>I&rsquo;ve read <a href="https://hbr.org/2015/08/the-key-to-giving-and-receiving-negative-feedback?">this article</a> by Joseph Grenny about how to give and receive negative feedback. It is exemplified by the plant manager who was expecting another kind of feedback from his subordinates and was surprised by their negative feedback.</p>

<p>Tags: joseph-grenny, negative-feedback, feedback, by-example</p>

<h2>Testing Clojure web applications with Kerodon</h2>

<p>I&rsquo;ve read <a href="https://semaphoreci.com/community/tutorials/testing-clojure-web-applications-with-kerodon">this guide</a> on how to test compojure-based applications with kerodon. Written by Nebojša Stričević</p>

<p>Tags: nebojsa-stricevic, compojure, kerodon, clojure, testing, guide</p>

<h2>Using The Option Type Effectively</h2>

<p>I&rsquo;ve read <a href="https://blog.8thlight.com/uku-taht/2015/04/29/using-the-option-type-effectively.html">this article</a> on how to use the <code>Option</code> type (in rust), similar to <code>Optional</code> in java or <code>Maybe</code> in haskell. Written by Uku Taht.</p>

<p>Tags: uku-taht, option, maybe, optional, rust</p>

<h2>When Should You Think?</h2>

<p>I&rsquo;ve read <a href="https://blog.8thlight.com/uncle-bob/2014/03/11/when-to-think.html">this post</a> by Robert C Martin on when to think and the hypothesis that TDD does not allow you to think before coding.</p>

<p>Tags: tdd, robert-c-martin, design, hypothesis</p>

<h2>Orthogonal latin squares: an application of experiment design to compiler testing</h2>

<p>I&rsquo;ve read <a href="http://barbie.uta.edu/~mehra/20_an%20application%20of%20experiment%20design%20to%20compiler%20testing.pdf">this paper</a> by Robert Mandl on techniques that can be applied to reduce the burden of exhaustive testing to compilers. Preferring &ldquo;surely all relevant distinct combinations&rdquo; we can reduce the amount of testing. This paper tries to formalize the concept of &ldquo;near-exhaustive testing&rdquo;</p>

<p>Tags: latin-square, robert-mandl, compiler, testing, near-exhaustive-testing, optimization, exhaustive-testing</p>

<h2>  Practical Type System Benefits</h2>

<p>I&rsquo;ve read <a href="https://themonadreader.files.wordpress.com/2014/04/nccb.pdf">this article</a> by Neil Brown on benefits of the type system, with examples in haskell. He goes on to explore the benefits of involving the type-checker at compile time to remove type errors and ease the programming effort:</p>

<blockquote><p>I find that several problems in Haskell can be solved by involving the type system
further: The trick is to involve the type system in ways that provide a big benefit
for the cost, but not going so far that the type system gets in the way of code
that you know &ndash;but can’t easily prove to the compiler&ndash; is safe</p></blockquote>

<p>I&rsquo;ve also learned the concept of the quasi-quoter: similar to a preprocessor, executed at compile time and type-checked</p>

<p>Tags: neil-brown, quote, quasi-quoter, preprocessor, haskell, monad-reader</p>

<h2>ClojureScript and the Blub Paradox</h2>

<p>I&rsquo;ve read this article comparing javascript and clojurescript using the fizzbuzz kata. There is a nice example of the pattern matching for the cases (i.e. &ldquo;switch&rdquo;) of the fizz, buzz. Written by Nate Wildermuth</p>

<p>Tags: clojurescript, javascript, fizzbuzz, kata, nate-wildermuth</p>

<h2>No malinterpretes tu carrera</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2011/02/no-malinterpretes-tu-carrera/">this article</a> on (not) changing careers from programmer to designer, analyst, team manager. About the programmer&rsquo;s passion and why not to misinterpret your career. Written by Carlos Blé. In Spanish.</p>

<p>Tags: carlos-ble, career, programming, management, career-change</p>

<h2>Just Haskell or Nothing</h2>

<p>I&rsquo;ve read <a href="https://cheecheeo.github.io/just_haskell_or_nothing.html">these slides</a> on packaging values in (Just a) or Nothing for possibly failed computations in haskell. Written by John Chee</p>

<p>Tags: john-chee, haskell, just, nothing, maybe, functor</p>

<h2>Tracking Joy at Work</h2>

<p>I&rsquo;ve read <a href="http://begriffs.com/posts/2015-03-15-tracking-joy-at-work.html">this article</a> about quantifying happiness at the office (or at work). Joe Nelson, the author of the article, uses the quantifying method described int the book <a href="http://www.amazon.com/Experience-Sampling-Method-Measuring-Everyday/dp/1412925576/">Experience Sampling Method</a> (<a href="https://en.wikipedia.org/wiki/Experience_sampling_method">wikipedia page</a>) by Hektner, Schmidt, Csikszentmihalyi.</p>

<p>The last one, not coincidentally is the author of <a href="http://www.amazon.com/Flow-The-Psychology-Optimal-Experience/dp/0061339202">Flow: The Psychology of Optimal Experience</a>.</p>

<p>Tags: mihaly-csikszentmihalyi, flow, quantification, data, experience-sampling, article, joe-nelson</p>

<h2>Going &ldquo;Write-Only&rdquo;</h2>

<p>I&rsquo;ve read <a href="http://begriffs.com/posts/2015-04-20-going-write-only.html">this article</a> by Joe Nelson on going &ldquo;write-only&rdquo; on social media, blogs, news, etc, as opposed to read-only (only consuming media) or read-write (consuming and producing). He cites another programmer, <a href="http://joey.hess.usesthis.com/">Joey Hess</a> and about the quality and durability of your work.</p>

<p>Tags: article, joe-nelson, write-only, social-media, reading, philosophy, thoreau, nietzsche, joey-hess</p>

<h2>Create a static site with Hakyll, Github and Travis CI</h2>

<p>I&rsquo;ve read <a href="http://begriffs.com/posts/2014-08-12-create-static-site-with-hakyll-github.html">this article</a> on how to create your blog with hakyll and travis ci. Written by Joe Nelson</p>

<p>Travis ci is used to do continuous integration and automatically deploy each commit to production (github pages).</p>

<p>Tags: hakyll, haskell, joe-nelson, meta, blog, continuous-deployment, github, github-pages, travis-ci</p>

<h2>Falling in Love with Computer Science</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=haxusGuUyt4">this video</a> by Kathy Pham, an American that discovered her passion, her love to computer science a few years ago. She tells the events around computer science from the beginning of college to the current moment.</p>

<p>Tags: kathy-pham, passion, love, computer-science, autobiography, time-lapse, google-developers</p>

<h2>Duck Typing</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=h0rTF__RNo4">this video</a> by Dan Grossman, part of the <a href="https://www.coursera.org/course/proglang">&ldquo;Programming Languages&rdquo; MOOC</a>, in which he explains what is a Duck Type and how to use (and abuse) them in ruby.</p>

<p>Tags: ruby, dan-grossman, mooc, mooc-programming-languages</p>

<h2>Not-So-Private Clojure Functions</h2>

<p>I&rsquo;ve read <a href="http://christophermaier.name/blog/2011/04/30/not-so-private-clojure-functions">this article</a> explaining how to bypass private functions in clojure: either create a lambda or create a different namespace. Written by Christopher Maier</p>

<p>Tags: private-variable, clojure, testing, joy-of-clojure, christopher-maier, private-function, namespace</p>

<h2>Frege (and Clojure)</h2>

<p>I&rsquo;ve read <a href="http://seancorfield.github.io/blog/2015/02/13/frege-and-clojure/">this article</a> that tells the Pragmatic Programmer&rsquo;s advice to learn a new language every year and the author (Sean Corfield) explains his trajectory learning them. He also cites the Lein plugin he&rsquo;s built: <code>lein-fregec</code> and how to connect clojure and frege (a.k.a JVM&rsquo;s haskell).</p>

<p>Tags: haskell, frege, jvm, clojure, ffi, pragmatic-programmer, advice, lein-fregec,  sean-corfield, comparison</p>

<h2>Two months early. 300k under budget</h2>

<p>I&rsquo;ve read <a href="https://thoughtworks.github.io/p2/issue09/two-months-early/">the tale</a> of a Thoughtworks Project Manager who convinced his client to start using clojure to deliver a custom-made CMS. Written by Dave Elliman.</p>

<p>Tags: dave-elliman, thoughtworks, project-manager, clojure, cms, microservice</p>

<h2>Convince your boss to use Clojure</h2>

<p>I&rsquo;ve read <a href="http://www.lispcast.com/convince-your-boss-to-use-clojure">this guide</a> by Eric Normand on how to convince your boss or your company to start using clojure.</p>

<p>Tags: company, clojure, eric-normand, how-to, guide</p>

<h2>A brief introduction to Prolog</h2>

<p>I&rsquo;ve read <a href="https://docs.google.com/presentation/d/1NAUo8nWLfNvvW3Wb7HJMunljjDJbzu7mo-5twKeGDvc/edit#slide=id.g63daf4745_0_56">these slides</a> about a brief introduction to prolog and how to do web development in it. By Jaelle Scheuerman</p>

<p>Tags: jaelle-scheuerman, prolog, web-development, rest, slide</p>

<h2>Arrayzing - The JavaScript array cheatsheet</h2>

<p>I&rsquo;ve read <a href="https://gist.github.com/ourmaninamsterdam/1be9a5590c9cf4a0ab42">this cheatsheet</a> for javascript arrays. Written by Justin Perry</p>

<p>Tags: cheatsheet, array, javascript, gist, justin-perry</p>

<h2>Some words on lazy evaluation and sharing</h2>

<p>I&rsquo;ve read <a href="http://pseudo.fixme.fi/~opqdonut/blog/Some_words_on_lazy_evaluation_and_sharing.html">this article</a> comparing the <code>fix</code> definition with a hand-made one and its &ldquo;sharing&rdquo; problems. Written by Joel E. Kaasinen</p>

<p>Tags: joel-kaasinen, haskell, fix, sharing, non-strictness, lazy-evaluation</p>

<h2>Hammock Driven Development</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=f84n5oFoZBc">this video</a> by Rich Hickey. A few notes:</p>

<p>A: identifying a problem that we&rsquo;re trying to solve</p>

<p>D: assessing if the proposed solution solves the problem</p>

<p>the union of the features is not the purpose of the product / is not the product</p>

<p>proramming is not completing features</p>

<p>avoiding problems /= solving problems</p>

<p>book: how to solve it - G. Polya. Practices &amp; techniques for solving mathematic problems</p>

<p>How to solve the problem</p>

<ul>
<li>state the problem</li>
<li>understand the problem:

<ul>
<li>what do you know: facts, context, constraints.</li>
<li>what do you don&rsquo;t know</li>
<li>are there related problems? solutions to related problems. find an analogy: starting from scratch vs incremental step</li>
</ul>
</li>
<li>be discerning</li>
<li>more input, better output:

<ul>
<li>read about your domain problem, research papers (maybe ACM)</li>
</ul>
</li>
<li>tradeoffs:

<ul>
<li>find at least two options (ups and downs) to compare before taking a decision</li>
</ul>
</li>
</ul>


<p>Focus time for programmers like alone time for kids. Hammock time is important mind&rsquo;s eye time</p>

<p>Waking mind:</p>

<ul>
<li>critical thinking</li>
<li>analysis</li>
<li>tactics</li>
<li>prone to local maxima</li>
<li>feed work to background mind</li>
<li>analyze its products</li>
</ul>


<p>Background mind:</p>

<ul>
<li>making connections</li>
<li>synthesis</li>
<li>strategy</li>
<li>abstracts, analogies</li>
<li>solves most non-trivial problems</li>
</ul>


<p>loading it: work it hard in the waking mind to be included in the background mind</p>

<p>abstraction = software strategy</p>

<p>tip: small answer is better than big answer (occam&rsquo;s razor?)​</p>

<p>Tags: rich-hickey, hammock-driven-development, background-mind, waking-mind, solve-problem, george-polya, book, analysis, design, talk</p>

<h2>Parallelism /= Concurrency</h2>

<p>I&rsquo;ve read <a href="https://ghcmutterings.wordpress.com/2009/10/06/parallelism-concurrency/">this article</a> on the differences between parallelism and concurrency, with examples in the haskell compiler GHC. Written by <a href="https://ghcmutterings.wordpress.com/author/simonmar/">simonmar</a></p>

<p>Tags: haskell, concurrency, parallelism, ghc, simonmar, comparison</p>

<h2>Parallelism vs. Concurrency</h2>

<p>I&rsquo;ve read <a href="https://wiki.haskell.org/Parallelism_vs._Concurrency">this page</a> from the haskell wiki.</p>

<p>Tags: haskell, concurrency, parallelism, ghc, comparison</p>

<h2>Writing code that writes code — with Hack Codegen</h2>

<p>I&rsquo;ve read <a href="https://code.facebook.com/posts/1624644147776541/writing-code-that-writes-code-with-hack-codegen/">this article</a> about metaprogramming (code that generates code) in PHP. Written by Alejandro Marcu.</p>

<p>I&rsquo;ve arrived to this from this tweet:</p>

<blockquote class="twitter-tweet" data-cards="hidden" lang="en"><p lang="en" dir="ltr">This is what happens when your programming language doesn&#39;t have macros <a href="https://t.co/ZfsEe2EJIj">https://t.co/ZfsEe2EJIj</a>. Yuck.</p>&mdash; David Nolen (@swannodette) <a href="https://twitter.com/swannodette/status/634495099607613440">August 20, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Tags: alejandro-marcu, metaprogramming, php, macro, lisp, clojure</p>

<h2>How katas can help you learn</h2>

<p>I&rsquo;ve read <a href="http://codurance.com/2015/08/18/How-katas-can-help-you-learn/">this article</a> on learning from katas, with the example of the Roman Numerals kata in Objective-C. Written by Sandro Mancuso.</p>

<p>Tags: sandro-mancuso, kata, learning, roman-numeral, objective-c</p>

<h2>Java 8: Definitive guide to CompletableFuture</h2>

<p>I&rsquo;ve read <a href="http://www.nurkiewicz.com/2013/05/java-8-definitive-guide-to.html">this article</a> about Java 8&rsquo;s feature, the <code>CompletableFeature</code>. Written by Tomasz Nurkiewicz</p>

<p>Tags: tomasz-nurkiewicz, java-8, completable-future, future, non-blocking, reactive-programming</p>

<h2>Are You Making These 10 DDD Mistakes?</h2>

<p>I&rsquo;ve read <a href="http://danielwhittaker.me/2015/07/05/are-you-making-these-10-ddd-mistakes/#">this infographic</a> on 10 DDD common mistakes, by Daniel Whittaker.</p>

<p>Tags: ddd, daniel-whittaker, bounded-context, ubiquitous-language, infographic</p>

<h2>Haste: Full-Stack Haskell for Non-PhD Candidates</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=3v03NFcyvzc">this talk</a> at the Strange Loop Conference 2014 about Haste language, a haskell version that compiles to javascript, therefore letting you write haskell in the browser. By Erin Swenson-Healey and James Cooper</p>

<p>In this talk they recommend the <a href="http://www.seas.upenn.edu/~cis194/lectures.html">CIS194 course</a></p>

<p>Tags: haste, haskell, james-cooper, erin-swenson-healey, strange-loop, 2014, talk</p>

<h2>A Year of Haskell</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=wZ0RQG3mFPw">this talk</a> about experiences using haskell professionally, by the American Justin Leitgeb in a Equatorian company in Quito, Stack Builders. He goes on to explain the haskell language in comparison to ruby on rails, what he mostly used with his clients.</p>

<p>Also explains what sells and doesn&rsquo;t (mostly productivity, not security) and gives pointer for applying it to a company</p>

<p>Tags: justin-leitgeb, ecuador, haskell, stack-builders, lambda-days, 2015, client, professional, consulting, consultancy</p>

<h2>A Taste of Haskell</h2>

<p>I&rsquo;ve watched a lesson by Simon Peyton-Jones, that introduces haskell to experienced programmers, not in the language but in programming in general. At the conference OSCON 2007</p>

<p>Links: <a href="https://www.youtube.com/watch?v=jLj1QV11o9g">part 1</a>, <a href="https://www.youtube.com/watch?v=IqXTUbdLig0">part 2</a>, <a href="http://www.slideshare.net/oscon2007/os-peytonjones">slides</a></p>

<p>Tags: oscon, 2007, haskell, introduction, lesson, simon-peyton-jones</p>

<h2>Programming - Why Haskell is Great</h2>

<p>I&rsquo;ve seen <a href="https://www.youtube.com/watch?v=RqvCNb7fKsg">this video</a> introducing some features of haskell. The most basic features, the REPL,  function composition. By FrungyKing</p>

<p>Tags: haskell, introduction, video, screencast, repl, frungyking</p>

<h2>History of Haskell: being lazy with class</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=3bjXGrycMhQ">this video</a> by Simon Peyton-Jones at the &ldquo;History of Programming Languages Conference III&rdquo; which explains how the language was designed and written, a language timeline, what options they took, how they decided about monadic IO, etc.</p>

<p>Tags: simon-peyton-jones, 2007, history-of-programming-languages-conference, haskell, talk</p>

<h2>The Humble Programmer</h2>

<p>I&rsquo;ve read <a href="http://www.cs.utexas.edu/users/EWD/transcriptions/EWD03xx/EWD340.html">this EWD</a> about the necessary humbleness for being a programmer and the slow expansion of the trade, as compared to hardware engineers.</p>

<p>He cites six reasons for preferring to be a humble programmer:</p>

<ul>
<li>the programmer only needs to manage simple programs</li>
<li>simple programs imply reducing the search space</li>
<li>construct a program from a mathematical proof instead of test its properties after building the software. see quote below</li>
<li>a good abstraction can hide much complexity and difficulty</li>
<li>the importance of the used tool in the final product</li>
<li>&ldquo;the only problems we can satisfactory solve are the ones that admit a factored solution&rdquo;</li>
</ul>


<p>In this essay I&rsquo;ve found the idea of</p>

<blockquote><p>Testing shows the presence, not the absence of bugs</p></blockquote>

<p>That <a href="https://en.wikiquote.org/wiki/Edsger_W._Dijkstra">Wikiquote</a> attributes to an earlier paper (in 1969). In this paper, the verbatim quote is:</p>

<blockquote><p>program testing can be a very effective way to show the presence of bugs, but is hopelessly inadequate for showing their absence.</p></blockquote>

<p>This idea also connects to the &ldquo;lower bounds&rdquo; and &ldquo;upper bounds&rdquo; of program correctness expressed in the article <a href="https://cdsmith.wordpress.com/2011/01/09/an-old-article-i-wrote/">An Old Article I Wrote</a> which is about static types, by Cdsmith. Admittedly, much later, in 2008, so this idea could be inspired by the Dijkstra&rsquo;s article.</p>

<p>Tags: edsger-dijkstra, ewd, dijkstra, humble-programmer, essay, comparison, absence-of-bugs, quote</p>

<h2>Building a Link Shortener with Snaplets</h2>

<p>I&rsquo;ve seen <a href="https://vimeo.com/59109358">this video</a> of how to build a link shortener webapp in haskell with the framework snap. By Ryan Trinkle. Found it in the <a href="http://snapframework.com/docs">snap docs</a> page.</p>

<p>Tags: snap, haskell, link-shortener, talk, webapp, framework, ryan-trinkle</p>

<h2>Comparing Haskell Web Frameworks</h2>

<p>I&rsquo;ve read <a href="http://www.edofic.com/posts/2014-02-23-haskell-web.html">this comparison</a> of haskell web frameworks, by Andraz Bajt (a.k.a, edofic)</p>

<p>Tags: andraz-bajt, edofic, haskell, web-framework, framework, comparison</p>
]]></content>
  </entry>
  
</feed>
