<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hacking | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/hacking/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2016-05-11T09:12:06+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Self-Study in April 2016]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2016/04/01/self-study/"/>
    <updated>2016-04-01T00:08:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2016/04/01/self-study</id>
    <content type="html"><![CDATA[<h2>Deliberate Practice: What It Is and Why You Need It</h2>

<p>I&rsquo;ve read this article by Corbett Barr on what is deliberate practice and why it is needed to become an expert in a given domain field.</p>

<p>The four essential components:</p>

<ul>
<li>Motivation</li>
<li>Tailored (practice)</li>
<li>Feedback</li>
<li>Repetion</li>
</ul>


<p>Tags: corbett-barr, deliberate-practice, expert, practice, anders-ericsson, talent, professional-development, career</p>

<h2>10 Features I Wish Java Would Steal From the Kotlin Language</h2>

<p>I&rsquo;ve read <a href="http://blog.jooq.org/2016/03/31/10-features-i-wish-java-would-steal-from-the-kotlin-language/">this list of features</a> that the Kotlin Language has that would be an improvement for the Java language. By Lukas Eder</p>

<p>Tags: list, lukas-eder, kotlin, java, comparison, language, jooq</p>

<h2>How we built Uber engineering&rsquo;s highest query per second service using Go</h2>

<p>I&rsquo;ve read <a href="https://eng.uber.com/go-geofence/">this post</a> by Kai Wei on a microservice they&rsquo;ve built using Go.</p>

<p>Explains the reasons for choosing that algorithm for geofencing, the performance they&rsquo;re achieving, and the architecture.</p>

<p>Tags: uber, go, microservice, performance, geofence, geofencing, rps, go-memory-model, kai-wei</p>

<h2>Unwinding Uber&rsquo;s Most Efficient Service</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@buckhx/unwinding-uber-s-most-efficient-service-406413c5871d">this article</a> by Buck Heroux commenting on the decisions of Uber for building the geofencing microservice (above read).</p>

<p>Explains the different alternatives for algorithms in this problem space and has implemented them in go. Provides a benchmark for comparing those, including a profiling session.</p>

<p>Tags: s2, quadtree, rtree, brute-force, geofence, geofencing, uber, comment, buck-heroux, go, read-on-read, meta-read</p>

<h2>Lawful Hacking and Continuing Vulnerabilities</h2>

<p>I&rsquo;ve read <a href="https://www.schneier.com/blog/archives/2016/03/lawful_hacking_.html">this article</a> by Bruce Schneier on the stance the FBI is taking in regards to vulnerabilities discovered in Apple&rsquo;s devices.</p>

<p>Tags: bruce-schneier, apple, security, fbi, vulnerability, exploit, law, hacking</p>

<h2>A Side Project Helped Jumpstart My Career — Life Learning</h2>

<p>I&rsquo;ve read <a href="https://medium.com/life-learning/a-side-project-helped-jumpstart-my-career-7cd6f8e9b07f">this article</a> by Dave Gerhardt on how making a side project happen affected his life and his skills.</p>

<p>Some of the reasons for doing it include:</p>

<ul>
<li>It forces you to figure stuff out</li>
<li>The only way to learn is by doing</li>
<li>It gets your brain working on something other than your job</li>
<li>You have to create your own network</li>
<li>You are the CEO</li>
</ul>


<p>Tags: long-life-learning, continuous-learning, side-project, dave-gerhardt, drift, professional-development, personal-development, business, career</p>

<h2>Fun Jekyll Tricks</h2>

<p>I&rsquo;ve read <a href="http://www.madebymarket.com/blog/dev/fun-jekyll-tricks.html">this article</a> by Brian Knapp where he explains some tips and tricks of jekyll (in which octopress is based on): speed, deployment, subcategories inside the blog, <em>data, </em>includes.</p>

<p>Tags: brian-knapp, jekyll, octopress, tip-and-trick, improvement, subcategory, meta, automation, deployment</p>

<h2>La ola que llega</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;id=f8a8ee92cc">this bonilista</a> by David Bonilla, where he explains (in Spanish) the &lsquo;contractor&rsquo; phenomenon arriving to Spain, 2-3 years after being in other countries and the effects that this could have both for workers and companies.</p>

<p>Tags: bonilista, david-bonilla, contractor</p>

<h2>10 razones por las que este sábado deberías ir a un code retreat</h2>

<p>I&rsquo;ve read <a href="http://francho.org/2015/11/10/10-razones-para-ir-a-un-coderetreat/">this list</a> of reasons for attending a code retreat, by Francho Joven, who I met in the Global Day Of Code Retreat (GDCR) &lsquo;15 in Zaragoza</p>

<p>Tags: francho-joven, list, zaragoza, code-retreat, gdcr</p>

<h2>Meaningful Work through Passion, not Genius</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=pIYUMwxKFzo">this talk</a> on the importance of hard work and how it can be mistaken as genious. By Malcolm Gladwell</p>

<p>Tags: malcolm-gladwell, passion, genius, work, time-management, productivity, career, mastery-autonomy-purpose</p>

<h2>How to ask your wife for permission to spend $250,000 on a domain name</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@Stockphoto.com/how-to-ask-your-wife-for-permission-to-spend-250-000-on-a-domain-name-c27a3c2852e1">this article</a> by Jon Yau on how they started StockPhoto.com, buying a $250,000 domain name.</p>

<p>Tags: startup, domain, stockphoto, jon-yau</p>

<h2>Sorry, developer bootcamps: I was wrong</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@dillonforrest/sorry-developer-bootcamps-i-was-wrong-ea37fcc5572c">this article</a> by Dillon Forrest on the topic of developer bootcamps. Explains why developers should not be threatened by recent graduates of these programs and describes how people pursuing these programs usually are:</p>

<ul>
<li>Intelligence</li>
<li>Risk appetite</li>
<li>Resilience</li>
<li>Self-investment</li>
<li>Entrepreneurship</li>
<li>Growth trajectory</li>
</ul>


<p>Tags: bootcamp, developer-bootcamp, dev-bootcamp, dillon-forrest, intelligence, risk-appetite, resilience, self-investment, entrepreneurship, growth-trajectory</p>

<h2>The JVM and Java Garbage Collection</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=DoJr5QQYsl8">this webcast</a> about how the JVM garbage collection works. By Michael W Williams</p>

<p>Tags: michael-williams, oracle, webcast, jvm, garbage-collection, gc,</p>

<h2>Files Are Hard</h2>

<p>I&rsquo;ve read <a href="http://danluu.com/file-consistency/">this article</a> on why software that writes on files is difficult, based on the different filesystems that are below, and the operating system. Written by Dan Luu.</p>

<p>Uses software product to find bugs in filesystems</p>

<p>Tags: filesystem, file, dan-luu, analysis</p>

<h2>Applying a ceiling to the bug count</h2>

<p>I&rsquo;ve read <a href="https://techblog.king.com/applying-a-ceiling-to-the-bug-count/">this interview</a>, written by Susanna Berg, on how King has reduced the amount of bugs in their backlog using an agile technique, measuring and setting a limit.</p>

<p>Tags: susanna-berg, king, agile, bug, bug-count, defect, defect-count, per-malmen</p>

<h2>Coming up in 2016: Spring Framework 4.3 &amp; 5.0</h2>

<p>I&rsquo;ve read <a href="https://spring.io/blog/2015/08/03/coming-up-in-2016-spring-framework-4-3-5-0">this announcement</a> of Spring&rsquo;s new release, 5.0, which will require java 8 and will turn most of the features into the reactive programming paradigm. By Juergen Hoeller.</p>

<p>Tags: juergen-hoeller, spring, reactive-programming, release, announcement</p>

<h2>Why offices are where work goes to die</h2>

<p>I&rsquo;ve read <a href="http://swizec.com/blog/why-offices-are-where-work-goes-to-die/swizec/6695">this article</a> by Swizec Teller explaining the downsides of working in an office as compared to working remotely.</p>

<p>Tags: swizec-teller, remote, home-office, office, comparison, time-management</p>

<h2>The Myth of the Passionate Developer</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@bm2yogi/the-myth-of-the-passionate-developer-76a41d457304">this article</a> by Michael Ibarra on what are the implications of being a passionate developer, how it affects your tasks and what are the factors to a job.</p>

<p>Tags: michael-ibarra, passion, development, job, motivation, myth</p>

<h2>Mossack Fonseca Breach – WordPress Revolution Slider Plugin Possible Cause</h2>

<p>I&rsquo;ve read <a href="https://www.wordfence.com/blog/2016/04/mossack-fonseca-breach-vulnerable-slider-revolution/">this article</a> by Mark Maunder, which describes an hypothesis on how the Mossack Fonseca breach could have happened. Also describes and shows how to breach a Wordpress installation with a vulnerable Revolution Slider plugin.</p>

<p>Tags: mark-maunder, security, breach, mossack-fonseca-breach, mossack-fonseca, hypothesis, attack, plugin, revolution-slider, wordpress</p>

<h2>Tim Urban: Inside the mind of a master procrastinator</h2>

<p>I&rsquo;ve watched <a href="https://www.ted.com/talks/tim_urban_inside_the_mind_of_a_master_procrastinator">this TED talk</a> from Tim Urban on how the procrastinator&rsquo;s mind works, exemplified by his own career.</p>

<p>Tags: procrastinator, procrastination, mind, time-management, tim-urban</p>

<h2>PEP 20 &ndash; The Zen of Python</h2>

<p>I&rsquo;ve read <a href="https://www.python.org/dev/peps/pep-0020/">the PEP20</a>, the zen of python, with special attention to this:</p>

<blockquote><p>Explicit is better than implicit.</p></blockquote>

<h2>Why I switched from Octopress 2 to Hugo</h2>

<p>I&rsquo;ve read <a href="http://conscientiousprogrammer.com/blog/2015/05/31/why-i-switched-from-octopress-2-to-hugo/">this article</a> by Franklin Chen on the change he made on the static site generator (SSG) he used. He considered hakyll, octopress, jekyll, hugo. Was decided between hakyll and hugo for their speed but, finally, decided to use hugo for their bigger community.</p>

<p>Tags: franklin-chen, comparison, ssg, static-site-generator, hakyll, octopress, jekyll, hugo, change, speed, statically-typed, dynamically-typed, golang, performance</p>

<h2>Why incremental regeneration in Jekyll 3.0 is such a big deal</h2>

<p>I&rsquo;ve read <a href="http://idratherbewriting.com/2015/11/04/jekyll-30-released-incremental-regeneration-rocks/">this article</a> by Tom Johnson on one of the new features that jekyll 3.0 brings: incremental generation. How this can speed up the generation</p>

<p>Tags: tom-johnson, incremental-generation, speed, performance, octopress-2, octopress-3, jekyll-3</p>

<h2>Hugo, S3, Travis CI, oh boy!</h2>

<p>I&rsquo;ve read <a href="http://continuousfailure.com/post/s3_blog/">this guide</a> by Alan Scherger on how to set up a specific stack for developing and deploying a static site blog.</p>

<p>Tags: alan-scherger, static-site-generator, ssg, travis, hugo, s3</p>

<h2>Deploy your blog to github pages automatically using Hugo and Travis</h2>

<p>I&rsquo;ve read <a href="http://rcoedo.com/post/hugo-static-site-generator/">this article</a> by Roman Coedo on how to deploy a hugo blog to github pages, using travis.</p>

<p>Tags: roman-coedo, travis, hugo, github, github-pages, ssg, static-site-generator</p>

<h2>Improve Octopress with Advanced Tweaks &amp; Tips</h2>

<p>I&rsquo;ve read <a href="https://www.narga.net/improve-octopress-advanced-tweaks-tips/">this list</a> of tips on how to improve the octopress (2) installation. By Nguyễn Đình Quân.</p>

<p>Tags: nguyen-dinh-quan, octopress-2, tip, tweak</p>

<h2>Laboratorios</h2>

<p>I&rsquo;ve read <a href="http://www.presionblogosferica.com/2014/11/12/laboratorios/">this article</a> by Ángel Medinilla, about laboratories to use a percentage of company time to investigate, innovate, learn and improve.</p>

<p>Tags: angel-medinilla, team-management, time-management, innovation, strategy, improvement, kaizen, laboratory, craftsmanship, spanish</p>

<h2>What Refactoring is, and what it isn’t</h2>

<p>I&rsquo;ve read <a href="http://swreflections.blogspot.com/2012/04/what-refactoring-is-and-what-it-isnt.html">this article</a> by Jim Bird, where he splits some practices into refactoring and not refactoring. Draws the line between these two different activities.</p>

<p>Also cites scratch refactoring.</p>

<p>Tags: jim-bird, scratch-refactoring, refactoring, martin-fowler, kent-beck, definition, quote, design</p>

<h2>Pitfalls of Unlimited Vacations</h2>

<p>I&rsquo;ve read <a href="http://haacked.com/archive/2016/02/18/unlimited-vaction-pitfalls/">this article</a> by Phil Haack on the github, travis and netflix policies about unlimited vacations and the effects they have on the employees.</p>

<p>Also about minimum vacation periods, (paternity) paid leave.</p>

<p>Tags: phil-haack, unlimited-vacation, holiday, vacation, team-management, burnout, github, travis, netflix, policy</p>

<h2>Cultura Corporativa</h2>

<p>I&rsquo;ve read <a href="http://www.presionblogosferica.com/2011/02/06/cultura-corporativa/">this article</a> by Ángel Medinilla about the corporate culture, and how &ldquo;hanging a highly interchangeable sentence on a wall&rdquo; does not represent it.</p>

<p>Tags: angel-medinilla, corporate culture, spanish</p>

<h2>What It’s Really Like to Learn to Code</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@sandjar/what-it-s-really-like-to-learn-to-code-53f6d9156a32">this article</a> that explains firsthand how it is to learn programming for a novice student,even with a strong financial background and having completed a university degree. By Sandjar Kozubaev</p>

<p>Tags: sandjar-kozubaev, learning, programming, student, firsthand, coding, story</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Study in November 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/"/>
    <updated>2015-11-02T13:25:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015</id>
    <content type="html"><![CDATA[<h2>Call me maybe: RabbitMQ</h2>

<p>I&rsquo;ve read <a href="https://aphyr.com/posts/315-call-me-maybe-rabbitmq">this article</a> by Kyle Kingsbury on using RabbitMQ as a lock service. It investigates and gives a counterexample of using it for this purpose.</p>

<p>Uses Knossos to do the testing and surfaces a problem with it. Explains specific problems on locking: at-most-once and at-least-once message delivery</p>

<p>Note: References Jepsen (I guess an inside joke to the song &ldquo;Call me maybe&rdquo; by Carly Rae Jepsen) for at-most-once and at-least-once message delivery.</p>

<p>Tags: rabbitmq, kyle-kingsbury, lock, cap-theorem, distributed-system, jepsen, knossos, at-most-once-delivery, at-least-once-delivery, counterexample, mutex</p>

<h2>Everyone is potentially a teacher</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/09/everyone-is-potentially-a-teacher">this article</a> by Carlos Blé where he explains that everyone can have ideas worth spreading and that the knowledge not only comes from others but also from the relationships that tie you to other people.</p>

<p>Tags: carlos-ble, teaching, pedagogy, idea, teacher, relationship</p>

<h2>Ragel State Machine Compiler</h2>

<p>I&rsquo;ve read <a href="http://www.colm.net/open-source/ragel/">this article</a> explaining what the Ragel project is about: a code generator from regex to code in languages such as C#, Java, etc. It is limited to finite state machines (FSM), with determinism. It can also handle some indeterminism. Written by Adrian D. Thurston</p>

<p>Tags: adrian-thurston, fsm, state-machine, finite-state-machine, code-generation, ragel</p>

<h2>HTTP is obsolete. It&rsquo;s time for the distributed, permanent web</h2>

<p>I&rsquo;ve read <a href="https://ipfs.io/ipfs/QmNhFJjGcMPqpuYfxL62VVB9528NXqDNMFXiqN5bgFYiZ1/its-time-for-the-permanent-web.html">this article</a> by Kyle Drake explaining the need for a permanent, distributed web archive.</p>

<p>Using a distributed file system (IPFS) and software similar to Bitcoin, they can host parts of the web locally, making it immutable and distributed</p>

<p>Tags: kyle-drake, web-archive, centralization, decentralization, distribution, permanent-web, ipfs, federation,</p>

<h2>Recovering From the Integrated Tests Scam</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive1.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=42e61e203e&amp;e=4a925444f9">this article</a> from J. B. Rainsberger on the integrated test scam and how to solve it: refactoring.</p>

<p>Tags: jbrains, tdd, integrated-test, integration-test, j-rainsberger</p>

<h2>Broken windows theory</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Broken_windows_theory">this wikipedia article</a> that talks about the broken windows theory, that states that controlling and monitoring public spaces leads to lowering the serious crimes.</p>

<p>Cites three causes for this:</p>

<ul>
<li>Social norms and conformity</li>
<li>Lack of routing monitoring</li>
<li>Social signaling and signal crime</li>
</ul>


<p>Also discusses examples in the US and in the Netherlands, as well as criticisms.</p>

<p>I&rsquo;ve read it to better understand how to apply this theory to software development, on a day-to-day basis.</p>

<p>Tags: wikipedia, theory, broken-window</p>

<h2>Scsh</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Scsh">the wikipedia page</a> for Scsh, the Scheme shell.</p>

<h2>Why is Scala&rsquo;s type inference not as powerful as Haskell&rsquo;s?</h2>

<p>I&rsquo;ve read the reasoning why Haskell supports other type inferences that are not present in Scala, in <a href="http://stackoverflow.com/questions/7234095/why-is-scalas-type-inference-not-as-powerful-as-haskells">this StackOverflow question</a></p>

<p>Tags: scala, haskell, type-inference, hindley-milner, type-inference-algorithm</p>

<h2>The Future of the LispM</h2>

<p>I&rsquo;ve read <a href="http://arrdem.com/2014/11/28/the_future_of_the_lispm/">this article</a> explaining the past and current situation in the Lisp world: from Lisp, to LispM, to the MIT and Symbolics Inc., to Clojure and Scheme.</p>

<p>Also talks about integration with the operating system and its execution in the microprocessor. Written by Reid McKenzie</p>

<p>Tags: reid-mckenzie, lisp, lispm, clojure, scheme, symbolics</p>

<h2>The Lisp Curse</h2>

<p>I&rsquo;ve read <a href="http://www.winestockwebdesign.com/Essays/Lisp_Curse.html">this essay</a> by Rudolf Winestock, where he explains the low barrier (or low cost) for people in powerful languages (such as Lisp) to not accept the status quo in their project and fork / start their own.</p>

<p>It also compares languages and the people attracted to them. Cites Mark Tarver&rsquo;s essays several times, including the Brilliant Bipolar Mind (BBM) in <a href="https://web.archive.org/web/20150308085419/http://www.lambdassociates.org/blog/bipolar.htm">this other</a> essay (from WebArchive). Compares the BBM and the normal worker in usefulness to companies.</p>

<p>Cites the Pareto principle (80-20 rule): a single hacker will port 80% the library from another language, leaving it buggy, undocumented and only understandable by the original author (assuming this is only 20% of the work). The rest (e.g., documentation, bugfixing, maintenance) are dropped and never taken care of.</p>

<p>Cites that this could be somewhat based on the facility of creating new features for the language. A small effort implies small implementation time, leaving no margin for thinking it through and seeing other corner cases. Also, a single person working on the project means no code review. The style might be coherent (always the same one), but might not be idiomatic, understandable by others, maintainable, etc.</p>

<p>Closes the essay with this quote:</p>

<blockquote><p>The expressive power of Lisp has drawbacks. There is no such thing as a free lunch.</p></blockquote>

<p>Tags: rudolf-winestock, essay, pareto-principle, hacking, one-man-band, lisp, no-free-lunch, quote</p>

<h2>The Bipolar Lisp Programmer</h2>

<p>I&rsquo;ve read <a href="https://web.archive.org/web/20150308085419/http://www.lambdassociates.org/blog/bipolar.htm">this essay</a> by Mark Tarver on the Bipolar Lisp programmmer or the koan of Lisp.</p>

<p>It explains the history of the Brilliant Bipolar Mind (BBM) when they attend high school and college. The freedom they&rsquo;re given, exactly the same as in Lisp, as you don&rsquo;t need to mix and socialize with others to create a good-enough solution.</p>

<p>In this fashion, he says, most of the projects are 80% finished, not documented, not maintained. The same problems that worry enterprises.</p>

<p>Cites the article &ldquo;Lisp: Good News, Bad News, How to Win Big&rdquo;</p>

<p>Tags: essay, mark-tarver, bipolar-lisp-programmer, lisp-programmer, programmer, brillian-bipolar-mind, blp, bbm, koan</p>

<p>Note: this article was no longer present on its original site. Fetched it from the Web Archive (WayBack Machine).</p>

<h2>Writing readable Clojure code</h2>

<p>I&rsquo;ve read <a href="http://www.slideshare.net/jiriknesl/writing-readable-clojure-code">these slides</a> by Jiří Knesl, that explains how to write better clojure code:</p>

<ul>
<li>Macros</li>
<li>HOFs</li>
<li>left-to-right vs right-to-left code</li>
</ul>


<p>Tags: clojure, jiri-knesl, macro, hof, thread, slide</p>

<h2>How can I get a reference to a method?</h2>

<p>I&rsquo;ve read <a href="http://stackoverflow.com/questions/485151/how-can-i-get-a-reference-to-a-method">this question</a>, <a href="http://stackoverflow.com/questions/4294485/how-do-i-reference-a-function-in-ruby">another question</a> from StackOverflow</p>

<p>Tags: stackoverflow, question, ruby, functional-programming, method-reference</p>

<h2>Implicit and Explicit Blocks</h2>

<p>I&rsquo;ve read <a href="https://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/18-blocks/lessons/55-new-lesson">this lesson from rubyMonk</a></p>

<p>Tags: rubymonk, lesson, block, ruby</p>

<h2>What&rsquo;s Point-free Programing?</h2>

<p>I&rsquo;ve read <a href="http://xahlee.info/comp/point-free_programing.html">this article</a> by Xah Lee explaining point-free programming, which requires a glance at function decomposition (currying)</p>

<blockquote><p>[&hellip;] “point-free programing” is:</p>

<ul>
<li>It is about a particular <strong>syntax</strong> for <strong>function definition</strong>.</li>
<li>When <strong>defining a function</strong>, no symbol is used for function parameter.</li>
</ul>
</blockquote>

<h2>Oracle’s “planned obsolescence” for Java</h2>

<p>I&rsquo;ve read <a href="https://jaxenter.com/oracle-and-javas-planned-obsolescence-121144.html">this article</a> by Coman Hamilton on the possible Java&rsquo;s planned obsolescence by Oracle.</p>

<p>Discusses features pushed to future releases, comparing it to other legacy languages.</p>

<p>Tags: obsolescence, legacy-language, planned-obsolescence, java, java-ee, oracle, fortran, cobol, coman-hamilton</p>

<h2>Your first Ruby native extension: C</h2>

<p>I&rsquo;ve read <a href="https://blog.jcoglan.com/2012/07/29/your-first-ruby-native-extension-c/">this article</a> about writing a native extension for ruby. Written by James Coglan</p>

<p>Tags: james-coglan, ruby, c, native-extension</p>

<h2>What&rsquo;s the difference between equal?, eql?, ===, and ==?</h2>

<p>I&rsquo;ve read <a href="http://stackoverflow.com/questions/7156955/whats-the-difference-between-equal-eql-and">this stackoverflow</a> question regarding Ruby operators: equal?, eql?, ===, ==:</p>

<ul>
<li>==: generic equality</li>
<li>===: case equality (for case - when)</li>
<li>eql?: hash equality</li>
<li>equal?: identity comparison (pointer comparison)</li>
</ul>


<p>Tags: comparison, stackoverflow, ruby, equal, eq, ==, ===, question, answer, jtbandes</p>

<h2>Kanban</h2>

<p>I&rsquo;ve read <a href="https://es.wikipedia.org/wiki/Kanban">the wikipedia page</a> for Kanban (Spanish)</p>

<p>Tags: wikipedia, kanban, agile-methodology, management</p>

<h2>Is your Scrum team Agile?</h2>

<p>I&rsquo;ve read <a href="https://blog.thesoftwarecraft.com/2014/04/is-your-scrum-team-agile.html">this article</a> by  Bart Bakker where he discusses some common patterns in Agile implementations (in software companies)</p>

<p>Tags: scrum, team, agile, scrum-implementation, bart-bakker</p>

<h2>Mejora tu trabajo en equipo con el método Kanban</h2>

<p>I&rsquo;ve read <a href="http://hipertextual.com/archivo/2013/11/que-es-kanban/">this article</a> that explains then kanban management framework, with its principles and its values. Written by Jose López (in Spanish)</p>

<p>Tags: kanban, management, agile-methodology, management-framework, principle, value, jose-lopez</p>

<h2>¿Qué es el método Kanban para la gestión de proyectos?</h2>

<p>I&rsquo;ve read <a href="http://www.javiergarzas.com/2011/11/kanban.html">this article</a> (Spanish) written by Javier Garzás where it is explained the kanban methodology and three of its main rules:</p>

<ul>
<li>visualize workflow</li>
<li>limit WIP</li>
<li>measure {lead, cycle} time</li>
</ul>


<p>Tags: kanban, management, agile-methodology, management-framework, principle, value, javier-garzas</p>

<h2>describe vs. context in rspec</h2>

<p>I&rsquo;ve read <a href="http://lmws.net/describe-vs-context-in-rspec">this article</a> that explains the (lack of) functional difference between RSpec&rsquo;s <code>describe</code> and <code>context</code> methods. The difference is contextual (i.e., the amount of information they convey). Written by LM</p>

<p>Tags: rspec, ruby, describe, context, difference</p>
]]></content>
  </entry>
  
</feed>
