<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tdd | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-01-12T04:43:01+01:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kata: Reverse Polish Notation in Java]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/12/kata-reverse-polish-notation-in-java/"/>
    <updated>2015-01-12T03:56:58+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/12/kata-reverse-polish-notation-in-java</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve written a <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation">RPN</a> string calculator in java, using TDD with these: mockito, hamcrest, junit</p>

<p>It&rsquo;s close to the <a href="http://osherove.com/tdd-kata-1/">String Calculator kata</a>, by <a href="https://twitter.com/RoyOsherove">Roy Osherove</a>. This RPN is using mocks (so more difficult than the String calculator)</p>

<p>I&rsquo;ve tried to practice <a href="http://us2.campaign-archive1.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=42f9a0b66f&amp;e=6ca6702beb">&ldquo;Your tests are dragging you down&rdquo;</a> by <a href="https://twitter.com/jbrains">J.B Rainsberger</a> (mainly, to use something to write on). This behavior is also explained in the book <a href="http://www.carlosble.com/libro-tdd/">Dirigido por tests</a> (Spanish) by <a href="https://twitter.com/carlosble">Carlos Blé</a>.</p>

<p>My solution is <a href="https://github.com/alvarogarcia7/kata-rpn-calculator-java">here</a>. Every step (red, green, refactor) has been saved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Listening to the Tests]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/06/listening-to-the-tests/"/>
    <updated>2015-01-06T22:05:55+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/06/listening-to-the-tests</id>
    <content type="html"><![CDATA[<p>Specifically the chapter no. 20 (&ldquo;Listening to the tests&rdquo;) from <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> available <a href="http://www.amazon.com/dp/0321503627/ref=as_sl_pd_tf_lc?tag=httpwwwm3pcou-20&amp;camp=213381&amp;creative=390973&amp;linkCode=as4&amp;creativeASIN=0321503627&amp;adid=12B4KPA3REF515ASAZN8&amp;&amp;ref-refURL=http%3A%2F%2Fwww.growing-object-oriented-software.com%2F">here</a> is so good to learn to hear to your tests.</p>

<p>To hear what they&rsquo;re trying to tell you, the authors (<a href="https://twitter.com/sf105">Steve Freeman</a> and <a href="https://twitter.com/natpryce">Nat Pryce</a>) explain this to you:</p>

<ul>
<li>I Need to Mock an Object I Can’t Replace</li>
<li>Logging Is a Feature</li>
<li>Mocking Concrete Classes</li>
<li>Don’t Mock Values</li>
<li>Bloated Constructor</li>
<li>Confused Object</li>
<li>Too Many Dependencies</li>
<li>Too Many Expectations</li>
</ul>


<p>To close, a quote:</p>

<blockquote><p>[&hellip;] We’ve found that the qualities that make an object easy to test also make our code responsive to change</p>

<p><a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a>, chapter 20, page 229</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kata: Prime Factors]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/06/kata-prime-factors/"/>
    <updated>2015-01-06T21:47:04+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/06/kata-prime-factors</id>
    <content type="html"><![CDATA[<p>I just did the prime factors kata, in java using TDD. Results: <a href="https://github.com/alvarogarcia7/primeFactors">https://github.com/alvarogarcia7/primeFactors</a></p>

<p>Code review, comments, pull requests are more than welcome</p>

<p>Source: <a href="http://craftsmanship.sv.cmu.edu/katas/prime-factors-kata">http://craftsmanship.sv.cmu.edu/katas/prime-factors-kata</a></p>

<p>Source: <a href="http://butunclebob.com/ArticleS.UncleBob.ThePrimeFactorsKata">http://butunclebob.com/ArticleS.UncleBob.ThePrimeFactorsKata</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk: 'Is TDD Dead? Of Course Not! But What´s All the Fuzz About Then?' by Emily Bache]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-by-emily-bache/"/>
    <updated>2015-01-06T15:47:47+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-by-emily-bache</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just seen this talk: <a href="https://www.youtube.com/watch?v=PCEHRFHKZSk">Is TDD dead? Of course not! But what´s all the fuzz about then?</a> by <a href="https://twitter.com/emilybache">Emily Bache</a></p>

<h3>My notes</h3>

<ul>
<li>deliberate vs accidental learning (around minute 19)</li>
<li><p>do not be an evangelist for tdd but rather &ldquo;come learn tdd, come at a dojo with us!&rdquo;</p></li>
<li><p>points to <a href="https://twitter.com/tastapod">Dan North</a>&rsquo;s <a href="www.youtube.com/watch?v=SPj-23z-hQA">talk</a> (at the same foo café)</p></li>
<li>points to her book - <a href="https://leanpub.com/codingdojohandbook">The Coding Dojo Handbook</a></li>
<li><p>points to <a href="http://cyber-dojo.org/">cyber dojo</a></p></li>
<li><p>design is hard whether you do TDD or not</p></li>
<li><a href="https://twitter.com/dhh">dhh</a>: too much focus on unit test.</li>
</ul>


<blockquote><p>I thought we got rid of best practices in agile</p></blockquote>

<ul>
<li>different kinds of advice for each kind of target (eg, based on experience level)</li>
<li>points to self-testing code (by <a href="https://twitter.com/martinfowler">Martin Fowler</a>)</li>
<li>problem: the test suite is no longer in sync with the production code</li>
<li>points to approval testing:

<ul>
<li>code kata &ldquo;minesweeper&rdquo;</li>
<li>test data + code produces output data</li>
<li>I approve the data</li>
<li>Useful for full features</li>
<li>Useful for asserting on difficult parts like images</li>
<li>realistic users to generate tests</li>
<li>tool to manage these &ldquo;approval tests&rdquo;. Easy way of managing tests cases</li>
<li><a href="http://texttest.org">TextTest</a> is one of these tools</li>
</ul>
</li>
</ul>


<h3>Her conclusions</h3>

<ul>
<li>Watch out the fundamentalism</li>
<li>TDD might take you to too many layers of indirection</li>
<li>The share of each test (end to end, integration, unit) depends on each project / part</li>
<li>Many TDD pieces of advice is directed to novices. When you&rsquo;re not, you should know when to stop listening</li>
</ul>


<p>PS: I&rsquo;ve first seen this video in <a href="http://garajeando.blogspot.com/2015/01/interesting-talk-is-tdd-dead-of-course.html">garajeando</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Should We Start the TDD Cycle on Refactor?]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2014/12/29/should-we-start-the-tdd-cycle-on-refactor/"/>
    <updated>2014-12-29T20:30:01+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2014/12/29/should-we-start-the-tdd-cycle-on-refactor</id>
    <content type="html"><![CDATA[<p>In this lexical scope, TDD by example is referring to this book<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, available <a href="http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530">on Amazon</a></p>

<h3>The TDD cycle</h3>

<p>Altough <a href="https://twitter.com/KentBeck">Kent Beck</a> in his book Test-Driven Development by example explains in &ldquo;Part I: the money example&rdquo;<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> that one should</p>

<blockquote><p>quickly add a test;</p>

<p>run all the tests and see the new one fail [&hellip;]</p>

<p><cite>Kent Beck </cite></p></blockquote>

<p>Implying that the TDD cycle starts with the red. Later on he explains that the cycle continues with green and refactor and back to red.</p>

<p>But I&rsquo;ve been hearing for a while that there&rsquo;re some useful refactors to be done before introducing new code. Rings in my head but the only example I have is Xavi Gost&rsquo;s &ldquo;La economía del refactoring<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>&rdquo;</p>

<h3>Refactoring</h3>

<p>Let&rsquo;s take a look at the definition of refactor (found <a href="http://www.refactoring.com/">here</a>):</p>

<blockquote><p>[Refactoring] is a disciplined technique for restructuring an existing body of code, altering its internal structure without changing its external behavior.</p>

<p> <cite>Martin Fowler</cite></p></blockquote>

<p>I&rsquo;ve found some info on <a href="http://stackoverflow.com/questions/1355101/test-code-refactor-when-should-we-start-a-refactoring">stackoverflow</a> about the subject. The currently <a href="http://stackoverflow.com/a/1355782">accepted answer</a> points out some interesting comments:</p>

<ul>
<li>Do not refactor on red. Always a good reminder</li>
<li>If you are refactoring for introducing a feature, how much refactor is enough? This is speculative development, possibly taking much time from needed development</li>
</ul>


<p>The last point is the one that interests me the most:</p>

<ul>
<li>Your refactoring might not be where you&rsquo;re going to introduce new production code<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> (spatial caché)</li>
<li>You might end up introducing features after a few hours/days of refactoring, therefore losing focus on the refactor you did and why (local caché)</li>
<li>Given that I&rsquo;ve already &ldquo;cleaned up&rdquo; this, I could also go somewhere else (slippery slope). Heard from <a href="https://twitter.com/xav1uzz">Xavi Gost</a> at the CAS2014 at his talk <a href="http://cas2014.agile-spain.org/sessions/sesion-1h-la-economia-del-refactoring-una-vision-desde-la-gestion-economica-del-proyecto-xavier-gost/">La economía del refactoring</a></li>
</ul>


<blockquote><p>No está justificado hacer cambios fuera de la rebanada.</p></blockquote>

<p>Roughly translated to &ldquo;It&rsquo;s not justified to change outside the bread slice&rdquo;, as Xavi was referring to software as sliced bread instead of layers, vertical rather than horizontal</p>

<h3>Should you do it?</h3>

<ul>
<li>Doing it would be a good thing, as long as you know in advance what will be affected by the next feature.</li>
<li>It can allow for less refactoring at the end of the cycle. This is not about duplication but refactoring to patterns. There might be a gain in refactoring to a pattern before introducing another feature. An example might be adding a new strategy when it&rsquo;s currently coded as if-then-else</li>
<li>The last responsible moment might be before or after introducing the feature. You decide.</li>
<li>Work less as there&rsquo;s no need for adding new cases to old structures and then simplifying</li>
</ul>


<h3>Should you not do it?</h3>

<ul>
<li>Foreseeing the future is difficult, therefore you might end with unused development, as it is speculating</li>
<li>Related to the last point, you might end refactoring in the wrong places. There&rsquo;s no current business value to it.</li>
<li>Not useful on first round of a new feature, you can use a lambda transition to the red again. But then, this is not a general pattern, only applicable to a big percent of cases.</li>
</ul>


<h2>Conclusions</h2>

<p>Short answer: it mainly depends on your environment:</p>

<ul>
<li>You: experience, common sense (sadly) &mdash;another post coming&mdash;, benefit/time-wasted ratio</li>
<li>Your project: how tight are deadlines, how critical that code is, the team&rsquo;s pressure</li>
</ul>


<p>Long answer: Yes, as long as:
 1. You realize there is a fine line between fixing code and rewriting code (Egoless programming #4). Don&rsquo;t be a lone enforcer
 2. Strictly follow the boy scout rule but only around your campfire, not outside of it.
 1. You know your domain, pitfalls and team well
 1. You want to test this hypothesis and post an answer</p>

<h3>Sources</h3>

<ul>
<li><a href="http://cas2014.agile-spain.org/sessions/sesion-1h-la-economia-del-refactoring-una-vision-desde-la-gestion-economica-del-proyecto-xavier-gost/">La economía del refactoring</a>, <a href="https://twitter.com/xav1uzz">Xavi Gost</a></li>
<li><a href="http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530">Test-Driven Development by example</a>, <a href="https://twitter.com/KentBeck">Kent Beck</a></li>
<li><a href="http://refactoring.com">Refactoring.com</a>, <a href="https://twitter.com/martinfowler">Martin Fowler</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Test-Driven Development by example; Beck, K. (ISBN-13: 078-5342146530)<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>from the book, description of part I, before chapter I<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>That talk is not yet available (AFAIK), but there&rsquo;s a <a href="http://ocana.github.io/articles/Conferencia-Agile-Spain-2014-primer-dia/">post</a> about it (Spanish)<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>The &ldquo;pains&rdquo; you might feel before introducing new features might not be real<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
