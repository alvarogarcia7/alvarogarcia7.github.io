<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tdd | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-06-29T00:17:06+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Self-study in June 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/"/>
    <updated>2015-06-03T13:13:10+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015</id>
    <content type="html"><![CDATA[<p>Update: I&rsquo;ve grouped all small posts related to the self-study from June 2015
into a single post</p>

<h2>Le monitoring de flux par l’exemple</h2>

<p>I&rsquo;ve read <a href="http://blog.octo.com/le-monitoring-de-flux-par-lexemple/">this article</a> about monitoring, in the way of &ldquo;by example&rdquo;, by Cédrick Lunven and Julien Kirch (French)</p>

<h2>The First Micro-service Architecture</h2>

<p>I&rsquo;ve read <a href="http://blog.cleancoder.com/uncle-bob/2015/05/28/TheFirstMicroserviceArchitecture.html">this article</a> about microservices and how they were implemented many years ago by Robert C. Martin</p>

<h2>How I Learned to Balance My Life With Remote Work</h2>

<p>I&rsquo;ve read <a href="https://open.bufferapp.com/remote-work/?utm_content=bufferaa5a2&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">this article</a> about balancing life and work, either physical or remote by Michael Erasmus</p>

<h2>Demystified CQRS</h2>

<p>I&rsquo;ve read <a href="https://blog.codecentric.de/en/2015/05/demystified-cqrs/?utm_content=buffer35b18&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">this article</a> about CQRS by Nino Martincevic</p>

<h2>The perils of programmer education in the bazaar</h2>

<p>I&rsquo;ve read <a href="http://blog.practicingruby.com/2015/06/04/the-perils-of-programmer-education-in-the-bazaar/">this article</a> by Gregory Brown</p>

<h2>6 useful and lesser-known git commands</h2>

<p>I&rsquo;ve read <a href="http://blog.joncairns.com/2015/05/6-useful-and-lesser-known-git-commands/">this article</a> about git commands (log, checkout, stash, cherry-pick, annotate) by Jon Cairns</p>

<h2>Is Your Scrum Standup Slowing You Down?</h2>

<p>I&rsquo;ve read <a href="http://www.sitepoint.com/scrum-standup-slowing-down/">this article</a> by M. David Green</p>

<h2>Me duele Indra</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;id=67ce79e01b">this Bonillista</a> (Spanish) by David Bonilla</p>

<h2>TDD, BDD, [add every other method that promises software quality here] and the tea tasting lady</h2>

<p>I&rsquo;ve read <a href="https://blinkingcaret.wordpress.com/2012/10/02/tdd-bdd-add-every-other-method-that-promises-software-quality-here-and-the-tea-tasting-lady/">this article</a> by Rui Figueiredo about the scientific method, TDD / BDD and how to scientifically detect if the &lsquo;how&rsquo; affects the result. In this case, exemplified by how to prepare your tea</p>

<h2>The Art of Metaprogramming in Java</h2>

<p>I&rsquo;ve read <a href="http://www.slideshare.net/PolymathicCoder/the-art-of-metaprogramming-in-java">these slides</a> by Abdelmonaim Remani</p>

<h2>When TDD does not work</h2>

<p>I&rsquo;ve read <a href="https://blog.8thlight.com/uncle-bob/2014/04/30/When-tdd-does-not-work.html">this article</a> by Uncle Bob on situations where TDD might not be appropiate, especially around the borders</p>

<h2>Mi primera semana como aprendiz</h2>

<p>I&rsquo;ve read <a href="http://ronnyancorini.es/blog/index.php/2015/06/08/mi-primera-semana-como-aprendiz/">Ronny Ancorini&rsquo;s experiences</a> in his first week as apprentince with Carlos Blé &amp; Associates (Spanish)</p>

<h2>Refactoring without good tests</h2>

<p>I&rsquo;ve read <a href="http://blog.codeclimate.com/blog/2013/12/05/refactoring-without-good-tests/">this article</a> by Peter Bell on how to deal with a legacy codebase, what are the effects of not having tests and how to deal with. How to add tests to a codebase that is not ready for it.</p>

<h2>Big Ball of Mud</h2>

<p>I&rsquo;ve read <a href="http://www.laputan.org/mud/">this paper</a>, containing a collection of patterns and antipatterns (disguised as notes) by Brian Foote and Joseph Yoder</p>

<h2>Comparision of different concurrency models: Actors, CSP, Disruptor and Threads [sic]</h2>

<p>I&rsquo;ve read <a href="http://java-is-the-new-c.blogspot.com.es/2014/01/comparision-of-different-concurrency.html">this comparison of concurrency models</a> by Rüdiger Möller</p>

<h2>5 Whys</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/5_Whys">this wikipedia</a> article on the technique called &ldquo;5 Whys&rdquo;</p>

<h2>Expectations, Outcomes, and Challenges of Modern Code Review</h2>

<p>I&rsquo;ve read <a href="http://research.microsoft.com/apps/pubs/default.aspx?id=180283">this paper</a>, <a href="http://research.microsoft.com/pubs/180283/ICSE%202013-codereview.pdf">direct link</a>, by Alberto Bacchelli and Christian Bird on code review at Microsoft.</p>

<p>They explain how they do it, the exact methodology they are using and why they do it.</p>

<p>The main reasons to code review are:</p>

<ul>
<li>finding defects</li>
<li>code improvement</li>
<li>alternative solutions</li>
<li>knowledge transfer</li>
<li>team awareness and transparency</li>
<li>also:

<ul>
<li>improve development process</li>
<li>avoid build breaks</li>
<li>share code ownership</li>
<li>track rationale</li>
<li>team assessment</li>
</ul>
</li>
</ul>


<h2>The quality wheel</h2>

<p>I&rsquo;ve read <a href="http://blog.jessitron.com/2015/04/the-quality-wheel.html">this article</a> by Jessica Kerr about the qualities of beautiful code</p>

<h2>5 Minute Physics</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=n6FKT-KafRk">this video</a> on interactions with the mobile devices and related to physics by David DeSandro</p>

<h2>Rise of the Transpilers</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=DspYurD75Ns">this video</a> on the rise of the transpilers and coffeescript by Jeremy Ashkenas</p>

<h2>Drawing Lines with Bresenham&rsquo;s Line Algorithm</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=zytBpLlSHms">this video</a> about how to apply the Bresenham&rsquo;s algorithm to draw lines (implemented in pseudo-code and javascript) by Jenn Schiffer</p>

<h2>Working with Minified JavaScript</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=SuFNR7-XjKI">this video</a> by John Crepezzi on how to mix javascript files (clients and yours), how to decompile javascript in chrome, dev &amp; debug tools</p>

<h2>How we ran our Legacy Code Retreat</h2>

<p>I&rsquo;ve read <a href="https://pboop.wordpress.com/2012/02/19/how-we-ran-our-legacy-code-retreat/">this article</a> by Andreas Leidig, looking for inspiration on running a legacy code retreat / brown-bag session. The experience report <a href="../../../../2015/06/23/brown-bag-session-refactoring-legacy-code/">is here</a></p>

<h2>Shift Left: Testing Earlier in Development</h2>

<p>I&rsquo;ve read <a href="http://wirfs-brock.com/blog/2015/06/18/shift-left">this article</a> by Rebecca Wirfs-Brock</p>

<h2>Polymorphic Equality</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/06/polymorphic-equality/">this article</a> on implementing polymorphic equality on C#, by Carlos Blé</p>

<h2>Commit messages are not titles</h2>

<p>I&rsquo;ve read <a href="http://antirez.com/news/90">this article</a> on git commit messages and how to use them, by antirez</p>

<h2>Oracle Considers G1 Garbage Collector for Java 9</h2>

<p>I&rsquo;ve read this <a href="https://adtmag.com/articles/2015/06/22/oracle-java-9.aspx">press article</a> on the G1 and CMS collector, by John K. Waters</p>

<h2>What Tech Newbies Need</h2>

<p>I&rsquo;ve read <a href="https://storify.com/jesslynnrose/what-tech-newbies-need">this set of tweets</a>, grouped by Jessica Rose about the most helpful things beginners can do to improve their programming skills.</p>

<h2>JavaScript For Cats</h2>

<p>I&rsquo;ve read <a href="http://jsforcats.com/">this introductory guide</a> to javascript by <a href="https://twitter.com/maxogden">Max Ogden</a></p>

<h2>Why Doesn&rsquo;t Python Have Switch/Case?</h2>

<p>I&rsquo;ve read <a href="http://www.pydanny.com/why-doesnt-python-have-switch-case.html">this article</a> on the switch case in the python language by Daniel Roy Greenfeld</p>

<h2>[Joseph Moniz&rsquo;s] Notes on Clojure</h2>

<p>I&rsquo;ve read Joseph Moniz&rsquo;s <a href="http://blog.plasmaconduit.com/notes-on-clojure/">Notes on Clojure</a>.</p>

<h2>Chemical Computing with Clojure</h2>

<p>I&rsquo;ve read <a href="http://gigasquidsoftware.com/chemical-computing/index.html">an article</a> on performing abstract computations with chemicals, written in Clojure by Carin Meier</p>

<h2>Lenses</h2>

<p>I&rsquo;ve read <a href="http://www.haskellforall.com/2012/01/haskell-for-mainstream-programmers_28.html">this tutorial</a> on writing lenses for haskell, a way of importing imperative getters / setters to a Data. Written by Gabriel Gonzalez.</p>

<p>On another note, the first part, about writing getters and setters in the naive way, is also explained in Learn you a Haskell > Chapter 8 Making Our Own Types and Typeclasses > Record syntax</p>

<h2>Microservices in Haskell</h2>

<p>I&rsquo;ve read <a href="https://github.com/AlexanderAA/haskell-microservices/blob/gh-pages/haskell-microservices.md">these notes</a> on implementing a microservice in haskell, by <a href="https://github.com/AlexanderAA">AlexanderAA</a></p>

<h2>Overcoming Resistance to Change - Isn&rsquo;t It Obvious?</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=hcz1aZ60k7w">this video</a> in the channel of The World with Theory of Constraints</p>

<h2>Bacon is bad for you</h2>

<p>I&rsquo;ve read <a href="https://speakerdeck.com/garann/bacon-is-bad-for-you">these slides</a>
 on professionalism and the programmer culture, by Garann Means</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paper: TDD in Industrial Teams]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams/"/>
    <updated>2015-05-12T00:02:44+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve read <a href="http://www.msr-waypoint.net/en-us/groups/ese/nagappan_tdd.pdf">this paper</a> by Nagappan, Maximilien, Bhat and Williams on the cost, advantages, pitfalls of doing TDD in industrial teams (private companies who create software).</p>

<h2>My notes</h2>

<p>Abstract:</p>

<blockquote><p>little empirical evidence supports or refutes the utility of this practice in an industrial context</p></blockquote>

<ul>
<li>they seem to be talking about inside-out tdd as in chapter 2 (page 291), they talk about small units and then integrating them in a bigger context</li>
</ul>


<h3>Benefits</h3>

<p>taken from chapter 2 (page 292)</p>

<ul>
<li>Better design</li>
<li>Efficiency</li>
<li>Test assets</li>
<li>Reducing defect injection</li>
</ul>


<h3>Conclusions</h3>

<blockquote><p>TDD seems to be applicable in various domains</p>

<p>[TDD] can significantly reduce the defect density of developed software without significant productivity reduction [&hellip;]</p>

<p>[&hellip;] an important aspect of TDD is the creation of tests assets.</p></blockquote>

<p>Recommendations (this is all quotes):</p>

<ul>
<li>Start TDD from the beginning of projects</li>
<li>For a team new to TDD, introduce automated build test integration towards the second third of the development phase</li>
<li>[&hellip;] add new tests every time a problem is found</li>
<li>Get the test team involved and knowledgeable about the TDD approach</li>
<li>Constantly running the unit tests [&hellip;]</li>
<li>Encourage fast unit test execution and efficient unit testing design</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk: Software Is Eating the World]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/10/talk-software-is-eating-the-world/"/>
    <updated>2015-05-10T21:00:52+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/10/talk-software-is-eating-the-world</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve watched <a href="http://reaktor.com/blog/erik-meijer-software-eating-world/">this talk</a> by Erik Meijer</p>

<h2>My notes</h2>

<ul>
<li><p><a href="http://www.amazon.com/Agile-The-Good-Hype-Ugly/dp/3319051547">Agile!: The Good, the Hype and the Ugly</a></p></li>
<li><p>The hacker way</p>

<ul>
<li>code always wins vs manager always wins</li>
<li>source: <a href="http://www.wired.com/2012/02/zuck-letter/">http://www.wired.com/2012/02/zuck-letter/</a></li>
</ul>
</li>
<li>we&rsquo;re doing maths => we&rsquo;re building a proof</li>
<li>reinforcement learning

<ul>
<li>agent is the company</li>
</ul>
</li>
<li>related to &ldquo;build, measure, learn&rdquo; by Eric Ries (<a href="http://theleanstartup.com/book">the lean startup</a>)</li>
</ul>


<h3>Feedback systems</h3>

<ul>
<li>Open (no) feedback system, such as timed sprinklers</li>
<li>Closed feedback system</li>
<li>Output only system</li>
</ul>


<h3>Why everything is software</h3>

<ul>
<li>Examples of everything is software</li>
<li>Software is eating the world</li>
<li>Even hardware is modeled as software</li>
</ul>


<h3>Modeling as a Finite State Machine (FSM)</h3>

<ul>
<li>There&rsquo;s memory in the feedback loop. See the <a href="http://en.wikipedia.org/wiki/Finite-state_machine">finite state machine</a></li>
<li>A lesson from &ldquo;World War Z&rdquo;: &ldquo;When nine people agree on something, it&rsquo;s the tenth man&rsquo;s responsibility to disagree no matter how improbable the idea&rdquo;. &ldquo;You don&rsquo;t believe your own [ideas]&rdquo;. There&rsquo;s an article <a href="http://lifehacker.com/plan-more-effectively-with-the-tenth-man-rule-1689738373">here</a> and <a href="http://evidencemag.com/world-war-z/">here</a>, but they don&rsquo;t cite any official source related to this. The second one cites World War Z again, so it might be <a href="http://en.wikipedia.org/wiki/Confirmation_bias">confirmation bias</a>.</li>
<li>Test in production (e.g., <a href="https://github.com/Netflix/SimianArmy/wiki/Chaos-Monkey">chaos monkey</a> from Netflix) rather than doing TDD</li>
<li>No evidence of TDD as effective, he sees it as waste</li>
<li>Move fast and break things</li>
</ul>


<h3>About layered organizations</h3>

<ul>
<li>Layered architecture. Examples: OSI, Catholic Church, Army</li>
<li>Analogy: Software development as a professional team structure (also cited from Netflix)</li>
<li>Book: Creativity from Constraints: the psychology of breakthrough. Focus, constraint, creativity</li>
<li>Presentation: <a href="http://www.infoq.com/presentations/Developing-Expertise-Dave-Thomas">Developing Expertise: Herding Racehorses, Racing Sheep</a></li>
<li>Analogy: Developers are like junkies, we want to be high all the time</li>
<li>Answering a new proposal: instead of &ldquo;no, but&rdquo; (black hat), &ldquo;yes and&rdquo; (blue hat). Reference to <a href="http://www.amazon.com/Bossypants-Tina-Fey-ebook/dp/B0047Y0FGY">Bossypants</a> by Tina Fey</li>
<li>Your knives, your tools. &ldquo;How can we make millions if we don&rsquo;t value our tools?&rdquo;</li>
</ul>


<h3>Conclusion</h3>

<p>About software:</p>

<blockquote><p>software will take over the world, and developers are the ones who make it happen.</p></blockquote>

<p>About methodologies:</p>

<blockquote><p>&ldquo;Programming, motherfucker. Do you speak it?&rdquo; (<a href="http://programming-motherfucker.com/">Source</a>)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internal Training: Testing Is Hard - Just Do It]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it/"/>
    <updated>2015-05-05T23:00:17+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it</id>
    <content type="html"><![CDATA[<p>At a client, last week I&rsquo;ve organized an internal training, in the form of a discussion about this article: <a href="http://davidsouther.com/#/posts/2013/10/30/testing-its-hard-just-do-it/">Testing is hard - just do it</a></p>

<h2>Our thoughts</h2>

<blockquote><p>When a bug is found, prove it exists with a test</p></blockquote>

<p>This immediately reduces defect rate: the same regression cannot be introduced again</p>

<blockquote><p> fix a bug a second time</p></blockquote>

<p>If fixing a bug (having defects in your code) was &lsquo;waste&rsquo;, as defined by lean methodologies, it also is wast fixing it for the following times</p>

<blockquote><p>testing requires discipline</p></blockquote>

<p>Agree. See quote by Larry Wall (this same article)</p>

<blockquote><p>[Three requirements for a good test suite]:</p>

<ol>
<li>The tests need to be easier to write</li>
<li>The test suite must run, and pass, before any code is allowed out the door</li>
<li>Support from the project&rsquo;s leadership</li>
</ol>
</blockquote>

<p>Agree.</p>

<blockquote><p>Programming is like drawing water from a well</p></blockquote>

<p>Good analogy</p>

<blockquote><p>I&rsquo;m going to assume you are smarter than me [&hellip;]</p></blockquote>

<p>This is related to &lsquo;doing clever things&rsquo;: when I write &lsquo;clever code&rsquo;, that has neither comments, nor it is massaged to be Clean Code, it will cost me many times more to modify / understand in the future vs massage it a little bit.</p>

<p>For me, an example of clever code are certain bitwise operations. Even though these operations are publicly available on websites and books, you must know about them before understanding the code.</p>

<p>Another example of clever code is taking assumptions, even if they are valid. Example: always return the second element because the first one is the header</p>

<pre><code class="java">private String select(List&lt;String&gt; elements){
    return elements.get(2);
}
</code></pre>

<p>vs</p>

<pre><code class="java">private String selectFirstValidLine(List&lt;String&gt; elements){
    List&lt;String&gt; validElements = skipHeader(elements);
    return validElements.get(1);
}
</code></pre>

<h2>Open questions / other ideas</h2>

<ul>
<li>There are tests that are more important than others. Is there a tool to assign them weights and inform about which preponderation of the codebase is broken? The same (i.e., more importance) can happen for production code.</li>
<li>Is SCRUM apt for junior developers? In the sense of the increased autonomy, more decisions, more required technical skills / values, etc</li>
<li>We discussed what differentiates a project with a shorter deadline from one with a longer deadline. The consensus was: you should do tests for any kind of project, the shorter deadline project won&rsquo;t allow as much time for refactoring</li>
<li>Tests iff (i.e., if and only if) working code</li>
<li>Tests do not guarantee lack of defects</li>
<li>Bijectiveness between tests and features (production code)
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demand for TDD and Refactor]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/25/demand-for-tdd-and-refactor/"/>
    <updated>2015-04-25T13:28:20+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/25/demand-for-tdd-and-refactor</id>
    <content type="html"><![CDATA[<p>When I went to the Jason Gorman&rsquo;s TDD workshop (experience report <a href="../../../../2015/04/12/jason-gorman-tdd-intensive-workshop">here</a>), he said something interesting regarding refactor and TDD:</p>

<blockquote><p>In job offers / advertisements, TDD is much more in demand than refactor. But the latter is included in the former as an integral part.</p>

<p>Jason Gorman</p></blockquote>

<p>I agree with the second thought: you cannot properly do TDD without refactoring, as it is an integral part; also the third phase.</p>

<p>For me, sometimes refactoring is the difference between code and &ldquo;Clean Code&rdquo; (as defined in the book by the same title). If I cannot find the (algorithmic) pattern for the software I&rsquo;m writing, I try to introduce scaffolds to keep investigating until I can find a viable, general solution (if the problem requires it.)</p>

<p>Even after doing the refactor <code>replace algorithm</code>, the code might not have the responsibilities in the right place, the methods might be long, value objects not extracted yet, etc. This is where further refactor is needed to introduce all those qualities in the piece of software.</p>

<p>I believe that we programmers have done a bad job of communicating with the rest of the organization what refactoring is about. It has nothing to do with beauty, style or design (in the visual sense) but is related to maintainability, coupling, defects and quality. Money, in the long run, as its objective is to make it cheaper to change in the future, a better investment and ROI. This is the common language that the rest of the company understands.</p>
]]></content>
  </entry>
  
</feed>
