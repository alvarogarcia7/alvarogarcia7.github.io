<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2014 | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/2014/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-06-14T16:27:11+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Talk: Software Is Eating the World]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/10/talk-software-is-eating-the-world/"/>
    <updated>2015-05-10T21:00:52+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/10/talk-software-is-eating-the-world</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve watched <a href="http://reaktor.com/blog/erik-meijer-software-eating-world/">this talk</a> by Erik Meijer</p>

<h2>My notes</h2>

<ul>
<li><p><a href="http://www.amazon.com/Agile-The-Good-Hype-Ugly/dp/3319051547">Agile!: The Good, the Hype and the Ugly</a></p></li>
<li><p>The hacker way</p>

<ul>
<li>code always wins vs manager always wins</li>
<li>source: <a href="http://www.wired.com/2012/02/zuck-letter/">http://www.wired.com/2012/02/zuck-letter/</a></li>
</ul>
</li>
<li>we&rsquo;re doing maths => we&rsquo;re building a proof</li>
<li>reinforcement learning

<ul>
<li>agent is the company</li>
</ul>
</li>
<li>related to &ldquo;build, measure, learn&rdquo; by Eric Ries (<a href="http://theleanstartup.com/book">the lean startup</a>)</li>
</ul>


<h3>Feedback systems</h3>

<ul>
<li>Open (no) feedback system, such as timed sprinklers</li>
<li>Closed feedback system</li>
<li>Output only system</li>
</ul>


<h3>Why everything is software</h3>

<ul>
<li>Examples of everything is software</li>
<li>Software is eating the world</li>
<li>Even hardware is modeled as software</li>
</ul>


<h3>Modeling as a Finite State Machine (FSM)</h3>

<ul>
<li>There&rsquo;s memory in the feedback loop. See the <a href="http://en.wikipedia.org/wiki/Finite-state_machine">finite state machine</a></li>
<li>A lesson from &ldquo;World War Z&rdquo;: &ldquo;When nine people agree on something, it&rsquo;s the tenth man&rsquo;s responsibility to disagree no matter how improbable the idea&rdquo;. &ldquo;You don&rsquo;t believe your own [ideas]&rdquo;. There&rsquo;s an article <a href="http://lifehacker.com/plan-more-effectively-with-the-tenth-man-rule-1689738373">here</a> and <a href="http://evidencemag.com/world-war-z/">here</a>, but they don&rsquo;t cite any official source related to this. The second one cites World War Z again, so it might be <a href="http://en.wikipedia.org/wiki/Confirmation_bias">confirmation bias</a>.</li>
<li>Test in production (e.g., <a href="https://github.com/Netflix/SimianArmy/wiki/Chaos-Monkey">chaos monkey</a> from Netflix) rather than doing TDD</li>
<li>No evidence of TDD as effective, he sees it as waste</li>
<li>Move fast and break things</li>
</ul>


<h3>About layered organizations</h3>

<ul>
<li>Layered architecture. Examples: OSI, Catholic Church, Army</li>
<li>Analogy: Software development as a professional team structure (also cited from Netflix)</li>
<li>Book: Creativity from Constraints: the psychology of breakthrough. Focus, constraint, creativity</li>
<li>Presentation: <a href="http://www.infoq.com/presentations/Developing-Expertise-Dave-Thomas">Developing Expertise: Herding Racehorses, Racing Sheep</a></li>
<li>Analogy: Developers are like junkies, we want to be high all the time</li>
<li>Answering a new proposal: instead of &ldquo;no, but&rdquo; (black hat), &ldquo;yes and&rdquo; (blue hat). Reference to <a href="http://www.amazon.com/Bossypants-Tina-Fey-ebook/dp/B0047Y0FGY">Bossypants</a> by Tina Fey</li>
<li>Your knives, your tools. &ldquo;How can we make millions if we don&rsquo;t value our tools?&rdquo;</li>
</ul>


<h3>Conclusion</h3>

<p>About software:</p>

<blockquote><p>software will take over the world, and developers are the ones who make it happen.</p></blockquote>

<p>About methodologies:</p>

<blockquote><p>&ldquo;Programming, motherfucker. Do you speak it?&rdquo; (<a href="http://programming-motherfucker.com/">Source</a>)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Books Read in 2014Q4]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2014/12/31/books-read-in-2014q4/"/>
    <updated>2014-12-31T11:49:50+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2014/12/31/books-read-in-2014q4</id>
    <content type="html"><![CDATA[<p>Books I&rsquo;ve read this quarter Q4 on 2014, as inspired by Manuel, on this <a href="http://garajeando.blogspot.com.es/2015/04/books-i-read-january-april-2015.html">post</a>:</p>

<ul>
<li><a href="http://www.amazon.com/ATDD-Example-Test-Driven-Development-Addison-Wesley/dp/0321784154">ATDD by Example: A Practical Guide to Acceptance Test-Driven Development</a> by Markus Gärtner</li>
<li><a href="http://shop.oreilly.com/product/9780596007126.do">Head First Design Patterns</a> by Eric Freeman, Elisabeth Robson, Bert Bates, Kathy Sierra</li>
<li><a href="http://shop.oreilly.com/product/9780596518387.do">Apprenticeship Patterns, Guidance for the Aspiring Software Craftsman</a> by Dave Hoover, Adewale Oshineye</li>
<li><a href="http://www.carlosble.com/libro-tdd/">Diseño ágil con TDD</a>, by Carlos Blé Jurado; again</li>
<li><a href="http://www.amazon.com/The-Mythical-Man-Month-Anniversary-Edition-ebook/dp/B00B8USS14">The Mythical Man-Month, Anniversary Edition: Essays On Software Engineering</a> by Frederick P. Brooks Jr.</li>
<li><a href="http://www.amazon.com/Implementation-Patterns-Kent-Beck/dp/0321413091">Implementation Patterns</a> by Kent Beck</li>
</ul>


<p>Books started, not yet finished (WIP):</p>

<ul>
<li>do not remember if there were any</li>
</ul>


<p>(Note: I&rsquo;ve written this list a posteriori, in May 2015)</p>
]]></content>
  </entry>
  
</feed>
