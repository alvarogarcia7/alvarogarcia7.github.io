<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Object | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/object/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-12-14T08:44:19+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tip: Calling All Methods in an Object in Ruby]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/10/12/calling-all-methods-in-a-ruby-object/"/>
    <updated>2015-10-12T09:55:17+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/10/12/calling-all-methods-in-a-ruby-object</id>
    <content type="html"><![CDATA[<p>In Ruby, you can query the methods an object accepts:</p>

<pre><code class="ruby">pry(main)&gt; 1.methods 
=&gt; [:to_s,               
 :-@,                    
 :+,                     
 :-,                     
 :*,                     
 :/,                     
 :div,                   
 :%,                     
 :modulo,                
 :divmod,                
 :fdiv,                  
 ...
</code></pre>

<p>In case you want to call all methods, <a href="https://github.com/alvarogarcia7/ruby-simple-sessions/blob/master/call_all_methods/call_all_methods.rb">this</a> can be useful (plus its <a href="https://github.com/alvarogarcia7/ruby-simple-sessions/blob/master/call_all_methods/call_all_methods_spec.rb">tests</a>):</p>

<pre><code class="ruby">def call_all_methods(object, *args)
  # remove methods that modify the PRY environment or are too verbose
  success = {}
  error = {}
  exclusions = [:pry,
                :methods,
                :private_methods,
                :public_methods,
                :gem].map { |x| x.to_s}
  object.methods.each { |x|
    unless exclusions.include? x.to_s then
      begin
        if (args.empty?) then
          success[x] = object.__send__(x)
        else
          success[x] = object.__send__(x, *args)
        end
      rescue StandardError =&gt; ex
        error[x] = ex
      end
    end
  }

  success.select! { |x| not x.nil?}
  error.select! { |x| not x.nil?}

  {success: success, error: error}
end
</code></pre>

<p>usage:</p>

<pre><code class="ruby">[51] pry(main)&gt; call_all_methods(1)
=&gt; {:success =&gt; 
[[:to_s, "1"],
 [:-@, -1],
 [:abs, 1],
 [:magnitude, 1],
 [:~, -2],
 [:to_f, 1.0],
 [:size, 4],
 [:zero?, false],
 [:odd?, true],
 [:even?, false],
 [:succ, 2],
 ...
</code></pre>

<p>also with parameters:</p>

<pre><code class="ruby">[4] pry(main)&gt; call_all_methods(1,1)
â˜º=&gt; {:success=&gt;
  [[:+, 2],
   [:-, 0],
   [:*, 1],
   [:/, 1],
</code></pre>

<p>Should you be interested in having this as a gem, please tell me (comments or <a href="https://twitter.com/@alvarobiz">@alvarobiz</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recognizing Dependencies]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/08/08/recognizing-dependencies/"/>
    <updated>2015-08-08T12:11:29+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/08/08/recognizing-dependencies</id>
    <content type="html"><![CDATA[<p>From the Chapter 3, Managing Dependencies, from the book Practical Object-Oriented Design in Ruby, by Sandi Metz:</p>

<blockquote><p>An object has a dependency when it knows:</p>

<ul>
<li>The name of another class. [&hellip;]</li>
<li>The name of a message that it intends to send to someone other than self. [&hellip;]</li>
<li>The arguments that a message requires. [&hellip;]</li>
<li>The order of those arguments. [&hellip;]</li>
</ul>
</blockquote>

<p>If an object knows any of these facts about another object, it has dependencies to the other.</p>

<p>This is not to say that having dependencies to others is bad, as</p>

<blockquote><p>A single object cannot know everything, so inevitably it will have to talk to another object.
Chapter 3, Managing Dependencies, Introduction</p></blockquote>

<p>For this latter purpose, there is the section &ldquo;Writing loosely coupled code&rdquo;</p>
]]></content>
  </entry>
  
</feed>
