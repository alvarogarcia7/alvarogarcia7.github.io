<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Brown-bag-session | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/brown-bag-session/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2016-06-06T19:33:44+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Brown-bag Session: eXtreme Programming]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/09/02/brownbag-session-xtreme-programming/"/>
    <updated>2015-09-02T08:41:16+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/09/02/brownbag-session-xtreme-programming</id>
    <content type="html"><![CDATA[<p>At a client, today I&rsquo;ve introduced the eXtreme Programmig methodology, with its values, principles, practices in a brown-bag session.</p>

<p>It has been an informal session, without slides, but we have used <a href="https://www.youtube.com/watch?v=4nN6Gh79Yg8">this video</a> by the Kleer guys (in Spanish).</p>

<p>The video gives a high-level overview of what XP is. We also needed to cover the daily practices (e.g., TDD, pair programming, whole team)</p>

<p>After that, we&rsquo;ve done a questions&amp;answers round to solve the teammates' doubts</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brown-bag Session: Spring Boot]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/08/12/brownbag-session-spring-boot/"/>
    <updated>2015-08-12T08:44:16+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/08/12/brownbag-session-spring-boot</id>
    <content type="html"><![CDATA[<p>At a client, today we&rsquo;ve done a brown-bag session on <a href="http://projects.spring.io/spring-boot/">Spring Boot</a>: we&rsquo;ve gone through the basics with a <a href="https://github.com/Rossyafk/spring-boot-demo/">sample maven project</a> and its <a href="https://github.com/Rossyafk/spring-boot-demo/blob/master/pom.xml">pom file</a>.</p>

<p>We&rsquo;ve seen the <a href="http://start.spring.io/">Spring Initializr</a> and a live demo, using curl for REST client.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brown-bag Session and Dojo: Beginning Clojure]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/08/04/brown-bag-session-and-dojo-beginning-clojure/"/>
    <updated>2015-08-04T23:14:14+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/08/04/brown-bag-session-and-dojo-beginning-clojure</id>
    <content type="html"><![CDATA[<p>At a client, today I&rsquo;ve facilitated a brown-bag session introducing the Clojure language to a group of java programmers.</p>

<p>I&rsquo;ve started hands-on, live coding on a REPL. To make things easier, I&rsquo;ve created a maven project that imports the clojure jar and lets you obtain dependencies from clojars. The repo is <a href="https://github.com/alvarogarcia7/clojure-for-java-devs">here</a>. This repo wouldn&rsquo;t have been possible without the <a href="https://github.com/talios/clojure-maven-plugin">clojure maven plugin</a>, written by Mark Derricutt.</p>

<p>I&rsquo;ve more or less followed <a href="https://github.com/alvarogarcia7/clojure-for-java-devs/blob/master/guide.md">this guide</a></p>

<p>We&rsquo;ve also practiced, using a dojo in clojure, the fizzbuzz kata.</p>

<p>There is a sample implementation in the same repo, <a href="https://github.com/alvarogarcia7/clojure-for-java-devs/tree/sample-implementation/src">this folder</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brown-bag Session: Refactoring Legacy Code]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/07/01/brownbag-session-refactoring-legacy-code/"/>
    <updated>2015-07-01T11:18:28+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/07/01/brownbag-session-refactoring-legacy-code</id>
    <content type="html"><![CDATA[<p>Today I have done a brown bag session about refactoring legacy code. It includes:</p>

<ul>
<li>legacy code definition. There is no agreement about this in the team.</li>
<li>the legacy code change algorithm (source is Feathers, Working effectively with legacy code). Plus an example about it.</li>
<li>working with legacy code</li>
<li>experience with it.</li>
</ul>


<p>The slides are available <a href="/blog/categories/../uploads/refactoring-legacy-code-slides.pdf">here</a> (PDF format)</p>

<p>We also did a practical session, whose experience report is <a href="../../../../2015/06/23/brown-bag-session-refactoring-legacy-code/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brown-bag Session: Refactoring Legacy Code]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/"/>
    <updated>2015-06-23T17:19:28+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code</id>
    <content type="html"><![CDATA[<p>Today I have facilitated a brown bag session about refactoring legacy code applications, as this is the case with one of the applications we maintain and add new features to.</p>

<p>The contents of the session:</p>

<ul>
<li>Briefly exposing the problem to the team, me taking the role of the Product Owner (PO)</li>
<li>Ask the dev team to add an easy feature</li>
<li>Do it without tests, as it was so simple that they thought they could do it (using mob programming)</li>
<li>Ask if they were satisfied by the patch / fix. Answer was yes.</li>
<li>Point out that there are regressions in the few lines of the patch</li>
<li>Repeat the session, starting with adding tests to guarantee the behavior is preserved  (using mob programming)</li>
<li>Explain the technique of the golden master</li>
<li>Some more programming, until they start to see the light at the end of the tunnel</li>
<li>Small retrospective, including:

<ul>
<li>asking them their feelings when dealing with legacy code. The contents of this is pretty similar to the concepts that appear in the retrospectives, when talking about the legacy project / submodule.</li>
<li>what could I improve as facilitator or for the structure of the session</li>
</ul>
</li>
</ul>


<p>The repo can be found <a href="https://github.com/alvarogarcia7/trivia-kata-spike">here</a>.</p>

<p>I prepared a small script:</p>

<pre><code class="bash">while test true; do
  git add --all;
  git commit --all -m "save process - uknown state";
  sleep 120;
done;
</code></pre>

<p>that saves the process and the progress, without disturbing the attendees. This allows you to follow the progress without any distraction. This idea was taken from a similar one from  <a href="http://twitter.com/@xav1uzz">Xavi Gost</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>This same idea was also cited by someone else, if I recall correctly by Sandro Mancuso, saying that it would be a good idea to have a background git repository while working. IntelliJ IDEA already does something similar (and saves the events, e.g., when the tests are run, either red or green)</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Cannot find the source, it was about having a script to commit automatically each time you run the tests; if it was red while refactoring, it would do git checkout (to revert); Was related to the noFlopSquad<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
