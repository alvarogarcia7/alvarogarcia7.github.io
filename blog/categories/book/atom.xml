<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Book | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/book/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-07-13T07:47:25+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Books Read in 2015Q2]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/06/30/books-read-in-2015q2/"/>
    <updated>2015-06-30T12:49:50+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/06/30/books-read-in-2015q2</id>
    <content type="html"><![CDATA[<p>Books I&rsquo;ve read this quarter Q2 on 2015:</p>

<ul>
<li><a href="http://www.amazon.com/Flow-Psychology-Experience-Perennial-Classics/dp/0061339202">Flow</a> by Mihaly Csikszentmihalyi. Blog posts under the tag <a href="/blog/categories/flow">flow</a></li>
<li><a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> by Steve Freeman and Nat Pryce. Blog posts under the tag <a href="/blog/categories/goos">goos</a>. Read in the &lsquo;<a href="https://twitter.com/@deaprendices">@deAprendices</a>&rsquo;s reading club&rsquo;.</li>
</ul>


<p>Books started, not yet finished (WIP):</p>

<ul>
<li><a href="http://www.manning.com/evans/">The Well-Grounded Java Developer</a> by Benjamin J. Evans and Martijn Verburg</li>
<li><a href="https://leanpub.com/lisphackers">Lisp Hackers</a> by Vsevolod Dyomkin</li>
<li><a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good!</a> by Miran Lipovaƒça</li>
<li><a href="http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052">Working Effectively with Legacy Code</a> by Michael Feathers, again</li>
<li><a href="http://www.poodr.com/">Practical Object-Oriented Design in Ruby, An Agile Primer (POODR)</a> by Sandi Metz, with the &lsquo;<a href="https://twitter.com/@deaprendices">@deAprendices</a>&rsquo;s reading club&rsquo;. Blog posts under the tag <a href="/blog/categories/poodr">poodr</a>.</li>
</ul>


<p>Books I want to finish:</p>

<ul>
<li><a href="http://martinfowler.com/books/refactoring.html">Refactoring</a> by Martin Fowler, with Kent Beck, John Brant, William Opdyke, and Don Roberts</li>
<li><a href="http://shop.oreilly.com/product/0636920028499.do">Java Performance: The Definitive Guide</a> by Scott Oaks</li>
<li><a href="http://www.infoq.com/minibooks/scrum-xp-from-the-trenches">Scrum and XP from the trenches</a> by Henrik Kniberg</li>
</ul>


<p>Books that have entered the queue:</p>

<ul>
<li><a href="http://carlos.bueno.org/optimization/mature-optimization.pdf">Mature optimization</a>, by Carlos Bueno</li>
<li><a href="https://leanpub.com/leprechauns">The Leprechauns of Software Engineering</a> by Laurent Bossavit, again. <a href="https://twitter.com/alvarobiz/status/611799849911103488">Gift</a></li>
<li><a href="http://xunitpatterns.com/">XUnit Test Patterns</a> by Gerard Meszaros</li>
<li><a href="https://leanpub.com/nightowls">Why programmers work at night</a> by Swizec Teller</li>
<li><a href="http://letoverlambda.com/">Let Over Lambda</a> by Doug Hoyte</li>
<li><a href="http://fldit-www.cs.uni-dortmund.de/~peter/PS07/HR.pdf">The Haskell Road to Logic, Math and Programming</a> by Kees Doets and Jan van Eijck</li>
<li><a href="http://mitpress.mit.edu/sicp/">Structure and Interpretation of Computer Programs</a> by Abelson, Sussman, and Sussman</li>
<li><a href="http://www.cis.upenn.edu/~bcpierce/tapl/">Types and Programming Languages</a> by Benjamin C. Pierce</li>
<li><a href="http://www.amazon.co.uk/Craftsman-Richard-Sennett/dp/0141022094">The Craftsman</a> by Richard Sennett</li>
<li><a href="http://www.amazon.co.uk/Software-Craftsmanship-Imperative-McBreen-Aug-2001/dp/B00L6JZAT0">Software Craftsmanship: The New Imperative</a> by Pete McBreen</li>
<li><a href="http://www.amazon.co.uk/dp/020169946X/ref=pe_385721_37038051_TE_3p_dp_1">Fundamentals of Object-oriented Design in UML</a> by Meilir Page-Jones</li>
</ul>


<p>Starting in 2015-Q2, I&rsquo;m also writing here the list of books that I want to read.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Category: Poodr]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/06/01/category-poodr/"/>
    <updated>2015-06-01T07:09:43+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/06/01/category-poodr</id>
    <content type="html"><![CDATA[<p>This category is mainly dedicated to anything related or included in the book &lsquo;<a href="http://www.poodr.com/">Practical Object-Oriented Design in Ruby</a>&rsquo;, by Sandi Metz</p>

<p>Note: This has been created a posteriori with a previous date</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Versus How]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/06/what-versus-how/"/>
    <updated>2015-05-06T07:15:08+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/06/what-versus-how</id>
    <content type="html"><![CDATA[<p>After reading the GOOS<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, the more and more I get this feeling of what vs how:</p>

<ul>
<li>Information hiding</li>
<li>The total simpler than the sum of the parts</li>
<li>Extracting a concept so you can think about this. Makes you find better names:

<ul>
<li>test name</li>
<li>variable name</li>
<li>method name</li>
<li>interface / protocol name</li>
</ul>
</li>
</ul>


<p>I also got this feeling when reading Clean Code. But with this other book the smell is much harder, stronger. This same concept is repeated all over the book. In our discussions about the book, this concept appears again and again. I&rsquo;m thinking of adding a sub-title to the book:</p>

<pre><code>Growing Object-Oriented Software, Guided by Tests
What and not How
</code></pre>

<h2>Applying this in your team</h2>

<p>Now, there might be a problem if your team has a split opinion on &lsquo;what vs how&rsquo; (i.e., part of the team prefers what and another prefers how)</p>

<p>Reasons I&rsquo;ve heard to defend how:</p>

<ul>
<li>The ones cited above</li>
<li>Concision / shortness</li>
<li>Code reusability</li>
<li>Easier to test, extracting to collaborators<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
</ul>


<p>Reasons I&rsquo;ve heard to defend what:</p>

<ul>
<li>Knowing exactly what the code is doing: i.e., do not have to think what the name means and to what this corresponds</li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Altough I believe you shouldn&rsquo;t do anything <em>just</em> for the purpose of tests. If it also improves your design, OK, but only for the tests, no.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whose Fault Is This?]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/25/whose-fault-is-this/"/>
    <updated>2015-04-25T14:10:31+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/25/whose-fault-is-this</id>
    <content type="html"><![CDATA[<p>In the prologue of the book, while thanking everyone that has made the book possible:</p>

<blockquote><p>[&hellip;], none of the people mentioned here would be responsible for any inaccuracy that might exist in the book, as this responsibility is exclusively mine</p>

<p>Mihaly Csikszentmihalyi (translated)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, prologue of &ldquo;<a href="http://www.amazon.com/Flow-The-Psychology-Optimal-Experience/dp/0061339202">Flow</a>&rdquo;</p></blockquote>

<p></p>

<p>This connects with what <a href="http://twitter.com/@tastapod">Dan North</a> said in the Craft Conf about this idea of the &ldquo;I&rsquo;m the only one in the company producing good quality work, the rest are not doing the same&rdquo;. Of course, he was quoting greedy, selfish people who think this instead of attributing the success to the whole team.</p>

<p>Regarding the whole team, if I recall correctly, it was <a href="http://twitter.com/@svenpet">Sven Peters</a> who explained that &ldquo;[&hellip;] either the team wins or looses. There are no individual wins [&hellip;]&rdquo; <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>In this sense, Csikszentmihalyi assumes all responsibility when quoting and reflecting on other&rsquo;s works. It was his idea to develop on top of others, so any imperfection is his.</p>

<p>This is similar as when approving a pull request: you make sure that the code works and you stand by it. It is no longer the original owner&rsquo;s cause, but yours too, as you have signed this request. On the pull request, though, the code ownership is already distributed among the whole team, but approvals ensures the presence of the <a href="/blog/categories/guardian-of-the-source">guardian of the source</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I had to translate the quote, because I did not borrow the book in English<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>When the talks are available, we will be able the ensure the correct attribution of this idea.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Read Apprenticeship Patterns]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/25/how-i-read-apprenticeship-patterns/"/>
    <updated>2015-04-25T13:49:01+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/25/how-i-read-apprenticeship-patterns</id>
    <content type="html"><![CDATA[<p></p>

<p>At the Craft Conf 2015 I saw someone with the book <a href="http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382">Apprenticeship Patterns</a> by <a href="http://twitter.com/@davehoover">Dave Hoover</a> and <a href="http://twitter.com/@ade_oshineye">Adewale Oshineye</a> and asked them about the book. After praising the contents, they asked me how to approach the book.</p>

<p>I recalled reading it non-sequentially, and explained it to them:</p>

<ul>
<li>Read the introduction, preface, etc first</li>
<li>When you get to the patterns, pick one at random</li>
<li><code>10</code>: Read it and navigate through the <code>see also</code>.</li>
<li>If there are unread chapters from the <code>see also</code>, <code>goto 10</code></li>
<li>Find the remaining unread chapters and read them, try to apply the same algorithm</li>
<li>Read the appendices and finishing words</li>
</ul>


<p>Reading a connected chapter after the first one made me connect the dots and understand it much better than reading them sequentially.</p>

<p>PS: This post was extracted from this one: <a href="../../../../2015/02/02/your-first-language/">here</a></p>
]]></content>
  </entry>
  
</feed>
