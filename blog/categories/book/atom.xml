<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Book | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/book/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-05-04T01:05:47+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Whose Fault Is This?]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/25/whose-fault-is-this/"/>
    <updated>2015-04-25T14:10:31+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/25/whose-fault-is-this</id>
    <content type="html"><![CDATA[<p>In the prologue of the book, while thanking everyone that has made the book possible:</p>

<blockquote><p>[&hellip;], none of the people mentioned here would be responsible for any inaccuracy that might exist in the book, as this responsibility is exclusively mine</p>

<p>Mihaly Csikszentmihalyi (translated)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, prologue of &ldquo;<a href="http://www.amazon.com/Flow-The-Psychology-Optimal-Experience/dp/0061339202">Flow</a>&rdquo;</p></blockquote>

<p></p>

<p>This connects with what <a href="http://twitter.com/@tastapod">Dan North</a> said in the Craft Conf about this idea of the &ldquo;I&rsquo;m the only one in the company producing good quality work, the rest are not doing the same&rdquo;. Of course, he was quoting greedy, selfish people who think this instead of attributing the success to the whole team.</p>

<p>Regarding the whole team, if I recall correctly, it was <a href="http://twitter.com/@svenpet">Sven Peters</a> who explained that &ldquo;[&hellip;] either the team wins or looses. There are no individual wins [&hellip;]&rdquo; <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>In this sense, Csikszentmihalyi assumes all responsibility when quoting and reflecting on other&rsquo;s works. It was his idea to develop on top of others, so any imperfection is his.</p>

<p>This is similar as when approving a pull request: you make sure that the code works and you stand by it. It is no longer the original owner&rsquo;s cause, but yours too, as you have signed this request. On the pull request, though, the code ownership is already distributed among the whole team, but approvals ensures the presence of the <a href="/blog/categories/guardian-of-the-source">guardian of the source</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I had to translate the quote, because I did not borrow the book in English<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>When the talks are available, we will be able the ensure the correct attribution of this idea.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Read Apprenticeship Patterns]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/25/how-i-read-apprenticeship-patterns/"/>
    <updated>2015-04-25T13:49:01+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/25/how-i-read-apprenticeship-patterns</id>
    <content type="html"><![CDATA[<p></p>

<p>At the Craft Conf 2015 I saw someone with the book <a href="http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382">Apprenticeship Patterns</a> by <a href="http://twitter.com/@davehoover">Dave Hoover</a> and <a href="http://twitter.com/@ade_oshineye">Adewale Oshineye</a> and asked them about the book. After praising the contents, they asked me how to approach the book.</p>

<p>I recalled reading it non-sequentially, and explained it to them:</p>

<ul>
<li>Read the introduction, preface, etc first</li>
<li>When you get to the patterns, pick one at random</li>
<li><code>10</code>: Read it and navigate through the <code>see also</code>.</li>
<li>If there are unread chapters from the <code>see also</code>, <code>goto 10</code></li>
<li>Find the remaining unread chapters and read them, try to apply the same algorithm</li>
<li>Read the appendices and finishing words</li>
</ul>


<p>Reading a connected chapter after the first one made me connect the dots and understand it much better than reading them sequentially.</p>

<p>PS: This post was extracted from this one: <a href="../../../../2015/02/02/your-first-language/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book: Diseño Ágil Con TDD (Spanish)]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/02/book-diseno-agil-con-tdd-spanish/"/>
    <updated>2015-02-02T21:32:21+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/02/book-diseno-agil-con-tdd-spanish</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve read this book <a href="http://www.carlosble.com/libro-tdd/">Diseño Ágil con TDD</a> (Spanish) by
<a href="https://twitter.com/carlosble">Carlos Blé</a> from cover to cover,
when previously I had only read the theoretical parts (Part I and Chapter 12 in Part II).</p>

<p>It&rsquo;s worth noting that this is the first TDD book in Spanish (I haven&rsquo;t found any book in Spanish predating this one - also backed by the author; published in January 2010) and, as such, there are some translations that could be improved. Not that it makes it more difficult to read. Sometimes it&rsquo;s a good idea to roughly translate concepts into English and then you&rsquo;ll understand the point.</p>

<h2>First part</h2>

<p>The first part is very interesting, a theoretical introduction into TDD, ATDD and Agile methodologies. Points to some good books as a reference (e.g., Growing Object Oriented Software, Guided by Tests; Working Effectively with Legacy Code; Refactoring; etc)</p>

<p>He explains the TDD algorithm (chapter 2) and the ATDD one (chapter 3). These two are maybe the two most important ones on the book. Should you read only a part of this book, I&rsquo;d recommend to read the motivational intro (the fable on the preface) and these two.</p>

<p>He gives excellent pieces of advice who, correctly applied, would set the basis for good software development, such as SOLID, Object Oriented Design (OOD), Inversion of Control (IoC), etc. (See chapter 7, &ldquo;Diseño orientado a objetos&rdquo;).</p>

<p>There&rsquo;s a chapter (number 6) on &ldquo;Mocks and other test doubles&rdquo; (translation is mine)</p>

<h2>Second part</h2>

<p>The second part, as many other books where the source code is printed, was dense for me. Other books, such as <a href="http://www.growing-object-oriented-software.com/">GOOS</a>, show differences in content with bold typeface, to ease the reader&rsquo;s task.  In my opinion, it would be useful to color the diffs, show them on the left and right, or even show the raw diff (e.g., <code>+++</code> <code>---</code>). I&rsquo;m envisioning a typing program as LaTeX where you could specify a commit with its parent and a range of lines to output.</p>

<p>The second part is written in C# and python, to show a TDD session with him. Warning: it&rsquo;s much better in person than reading his book!</p>

<p>The chapter 12 is a set of antipatterns you might find after starting with TDD. Even after you keep practicing TDD for a while, you will not get rid of these smells. Highly recommended.</p>

<p>There&rsquo;s also an appendix on Continuous Integration, although there are better books for this.</p>

<h2>Conclusion</h2>

<p>Recommend this book if you are starting with TDD, or you are more advanced but it&rsquo;s difficult for you to read in English.</p>

<p>Always good as a refresher to read the theoretical part and the antipatterns</p>

<p>PS: This book is free to read, published under a Creative Commons license (don&rsquo;t know exactly which one)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your First Language]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/02/your-first-language/"/>
    <updated>2015-02-02T21:25:37+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/02/your-first-language</id>
    <content type="html"><![CDATA[<p>After reading (in a specific order - below) part of the patterns in <a href="http://shop.oreilly.com/product/9780596518387.do">Apprenticeship Patterns</a>,
I stumbled upon the <a href="http://chimera.labs.oreilly.com/books/1234000001813/ch02.html#your_first_language">&ldquo;Your First Language&rdquo;</a></p>

<p>First of all, the illustration with the baby reading a Java book is priceless.</p>

<p>Having said that, I came to the realization that you might not know a paradigm but just an implementation
(e.g., you don&rsquo;t know about Object-Oriented programming but just about Java), in the same fashion as you could not know about LISPs but only about an implementation, such as clojure.</p>

<p>Also, clicks with the idea of &ldquo;code to interfaces, not implementations&rdquo;. Does it also click with you?</p>

<p>PS: What a great book this is. I&rsquo;m reading it as explained <a href="../../../../2015/04/25/how-i-read-apprenticeship-patterns/">here</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>PPS: you can read it online for free, <a href="http://chimera.labs.oreilly.com/books/1234000001813/">here</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This post was extracted on 2015-04-25. The refactor techniques are very useful, not only for programming<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Listening to the Tests]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/06/listening-to-the-tests/"/>
    <updated>2015-01-06T22:05:55+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/06/listening-to-the-tests</id>
    <content type="html"><![CDATA[<p>Specifically the chapter no. 20 (&ldquo;Listening to the tests&rdquo;) from <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> available <a href="http://www.amazon.com/dp/0321503627/ref=as_sl_pd_tf_lc?tag=httpwwwm3pcou-20&amp;camp=213381&amp;creative=390973&amp;linkCode=as4&amp;creativeASIN=0321503627&amp;adid=12B4KPA3REF515ASAZN8&amp;&amp;ref-refURL=http%3A%2F%2Fwww.growing-object-oriented-software.com%2F">here</a> is so good to learn to hear to your tests.</p>

<p>To hear what they&rsquo;re trying to tell you, the authors (<a href="https://twitter.com/sf105">Steve Freeman</a> and <a href="https://twitter.com/natpryce">Nat Pryce</a>) explain this to you:</p>

<ul>
<li>I Need to Mock an Object I Can’t Replace</li>
<li>Logging Is a Feature</li>
<li>Mocking Concrete Classes</li>
<li>Don’t Mock Values</li>
<li>Bloated Constructor</li>
<li>Confused Object</li>
<li>Too Many Dependencies</li>
<li>Too Many Expectations</li>
</ul>


<p>To close, a quote:</p>

<blockquote><p>[&hellip;] We’ve found that the qualities that make an object easy to test also make our code responsive to change</p>

<p><a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a>, chapter 20, page 229</p></blockquote>
]]></content>
  </entry>
  
</feed>
