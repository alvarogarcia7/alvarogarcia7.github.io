<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2015 | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/2015/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-07-04T14:50:23+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Self-study in July 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/"/>
    <updated>2015-07-01T01:08:10+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve grouped all small posts related to the self-study from July 2015 into a single post</p>

<h2>Clojure made simple</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=VSdnJDO-xdg">this talk</a> by Rich Hickey at the Java One. It references the talk <a href="http://www.infoq.com/presentations/Simple-Made-Easy">Easy made simple</a></p>

<ul>
<li>polymorphism without inheritance; single dispatch on the first parameter</li>
</ul>


<h2>Productive pair programming</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/07/productive-pair-programming/">this article</a> about pair programming, using the driver &amp; copilot technique, written by Carlos Blé</p>

<h2>Building Automated REST APIs with Python</h2>

<p>Investigating QA automation for REST APIs, I&rsquo;ve read <a href="http://www.slideshare.net/jeffknupp/building-automated-rest-apis-with-python">these slides</a> about it</p>

<h2>Backwards Compatibility Testing For Your Clojure Project</h2>

<p>I&rsquo;ve read <a href="http://blog.jenkster.com/2014/02/backwards-compatibility-testing-your-clojure-project.html">this article</a> on making leiningen test the application on several clojure versions. Written by Kris Jenkins.</p>

<h2>Succeeding with Automated Integration Tests</h2>

<p>I&rsquo;ve read <a href="http://jeremydmiller.com/2015/06/25/succeeding_with_integration_testing/">this article</a> by Jeremy Miller on integration testing and how to succeed with it. Some notes:</p>

<ul>
<li>Choose the Quickest, Useful Feedback Mechanism, even if that means testing the backend and frontend separately</li>
<li>Prefer white-box than black-box testing</li>
<li>Use quick tests, that can be run locally in an easy fashion</li>
<li>Do not share databases, as they introduce risks of flaky tests</li>
</ul>


<h2>Applied DDD in a Java EE 7 and Open Source World</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=9D_-7E7Mrzw">this video</a> by Edson Yanaga in the Java One, about DDD using Java EE 7, JSFs and lambdas on top of glassfish</p>

<h2>Integrated tests are a scam</h2>

<p>I&rsquo;ve read, again, <a href="http://blog.thecodewhisperer.com/2010/10/16/integrated-tests-are-a-scam/">this article</a> by J. B. Rainsberger on integrated tests and why not to use them. From a numerical / combinatorics point of view.</p>

<h2>Functional Programming should be your #1 priority for 2015</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@jugoncalves/functional-programming-should-be-your-1-priority-for-2015-47dd4641d6b9">this introduction</a> to functional programming by Ju Gonçalves. Explains some functional concepts, such as:</p>

<ul>
<li>First-Class Functions</li>
<li>High-Order Functions</li>
<li>Pure Functions</li>
<li>Closures</li>
<li>Immutable State</li>
</ul>


<p>Also recommends a few books on the subject (e.g., SICP, HTDP).</p>

<h2>A Tutorial Introduction to the Lambda Calculus</h2>

<p>I&rsquo;ve read <a href="http://www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf">this paper</a>, an introduction to the lambda calculus. Haven&rsquo;t done the exercises. Written by Raúl Rojas</p>

<h2>20 common mistakes when doing Test-Driven Development</h2>

<p>I had thought of converting all of <a href="https://twitter.com/search?q=svpino%20%23tdd%20mistake&amp;src=typd">his tweets</a> into a blog post, but he has already done this for us: I&rsquo;ve read a <a href="https://blog.svpino.com/2015/05/29/20-common-mistakes-when-doing-test-driven-development">list of common mistakes</a> when doing TDD by <a href="https://twitter.com/svpino">Santiago Pino</a></p>

<h2>Reducing coupling</h2>

<p>I&rsquo;ve read the article by Martin Fowler <a href="http://martinfowler.com/ieeeSoftware/coupling.pdf">Reducing Coupling</a> in the IEEE SOFTWARE July/August 2001</p>

<h2>Comparing Java Mock Frameworks – Part 2: Creating Mock Objects</h2>

<p><a href="https://softwareinabottle.wordpress.com/2010/10/06/comparing-java-mock-frameworks-part-2-creating-mock-objects/">List of mock frameworks for java</a>. Have only read the jMock, mockito and jMockit part.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-study in June 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/"/>
    <updated>2015-06-03T13:13:10+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015</id>
    <content type="html"><![CDATA[<p>Update: I&rsquo;ve grouped all small posts related to the self-study from June 2015
into a single post</p>

<h2>Le monitoring de flux par l’exemple</h2>

<p>I&rsquo;ve read <a href="http://blog.octo.com/le-monitoring-de-flux-par-lexemple/">this article</a> about monitoring, in the way of &ldquo;by example&rdquo;, by Cédrick Lunven and Julien Kirch (French)</p>

<h2>The First Micro-service Architecture</h2>

<p>I&rsquo;ve read <a href="http://blog.cleancoder.com/uncle-bob/2015/05/28/TheFirstMicroserviceArchitecture.html">this article</a> about microservices and how they were implemented many years ago by Robert C. Martin</p>

<h2>How I Learned to Balance My Life With Remote Work</h2>

<p>I&rsquo;ve read <a href="https://open.bufferapp.com/remote-work/?utm_content=bufferaa5a2&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">this article</a> about balancing life and work, either physical or remote by Michael Erasmus</p>

<h2>Demystified CQRS</h2>

<p>I&rsquo;ve read <a href="https://blog.codecentric.de/en/2015/05/demystified-cqrs/?utm_content=buffer35b18&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">this article</a> about CQRS by Nino Martincevic</p>

<h2>The perils of programmer education in the bazaar</h2>

<p>I&rsquo;ve read <a href="http://blog.practicingruby.com/2015/06/04/the-perils-of-programmer-education-in-the-bazaar/">this article</a> by Gregory Brown</p>

<h2>6 useful and lesser-known git commands</h2>

<p>I&rsquo;ve read <a href="http://blog.joncairns.com/2015/05/6-useful-and-lesser-known-git-commands/">this article</a> about git commands (log, checkout, stash, cherry-pick, annotate) by Jon Cairns</p>

<h2>Is Your Scrum Standup Slowing You Down?</h2>

<p>I&rsquo;ve read <a href="http://www.sitepoint.com/scrum-standup-slowing-down/">this article</a> by M. David Green</p>

<h2>Me duele Indra</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;id=67ce79e01b">this Bonillista</a> (Spanish) by David Bonilla</p>

<h2>TDD, BDD, [add every other method that promises software quality here] and the tea tasting lady</h2>

<p>I&rsquo;ve read <a href="https://blinkingcaret.wordpress.com/2012/10/02/tdd-bdd-add-every-other-method-that-promises-software-quality-here-and-the-tea-tasting-lady/">this article</a> by Rui Figueiredo about the scientific method, TDD / BDD and how to scientifically detect if the &lsquo;how&rsquo; affects the result. In this case, exemplified by how to prepare your tea</p>

<h2>The Art of Metaprogramming in Java</h2>

<p>I&rsquo;ve read <a href="http://www.slideshare.net/PolymathicCoder/the-art-of-metaprogramming-in-java">these slides</a> by Abdelmonaim Remani</p>

<h2>When TDD does not work</h2>

<p>I&rsquo;ve read <a href="https://blog.8thlight.com/uncle-bob/2014/04/30/When-tdd-does-not-work.html">this article</a> by Uncle Bob on situations where TDD might not be appropiate, especially around the borders</p>

<h2>Mi primera semana como aprendiz</h2>

<p>I&rsquo;ve read <a href="http://ronnyancorini.es/blog/index.php/2015/06/08/mi-primera-semana-como-aprendiz/">Ronny Ancorini&rsquo;s experiences</a> in his first week as apprentince with Carlos Blé &amp; Associates (Spanish)</p>

<h2>Refactoring without good tests</h2>

<p>I&rsquo;ve read <a href="http://blog.codeclimate.com/blog/2013/12/05/refactoring-without-good-tests/">this article</a> by Peter Bell on how to deal with a legacy codebase, what are the effects of not having tests and how to deal with. How to add tests to a codebase that is not ready for it.</p>

<h2>Big Ball of Mud</h2>

<p>I&rsquo;ve read <a href="http://www.laputan.org/mud/">this paper</a>, containing a collection of patterns and antipatterns (disguised as notes) by Brian Foote and Joseph Yoder</p>

<h2>Comparision of different concurrency models: Actors, CSP, Disruptor and Threads [sic]</h2>

<p>I&rsquo;ve read <a href="http://java-is-the-new-c.blogspot.com.es/2014/01/comparision-of-different-concurrency.html">this comparison of concurrency models</a> by Rüdiger Möller</p>

<h2>5 Whys</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/5_Whys">this wikipedia</a> article on the technique called &ldquo;5 Whys&rdquo;</p>

<h2>Expectations, Outcomes, and Challenges of Modern Code Review</h2>

<p>I&rsquo;ve read <a href="http://research.microsoft.com/apps/pubs/default.aspx?id=180283">this paper</a>, <a href="http://research.microsoft.com/pubs/180283/ICSE%202013-codereview.pdf">direct link</a>, by Alberto Bacchelli and Christian Bird on code review at Microsoft.</p>

<p>They explain how they do it, the exact methodology they are using and why they do it.</p>

<p>The main reasons to code review are:</p>

<ul>
<li>finding defects</li>
<li>code improvement</li>
<li>alternative solutions</li>
<li>knowledge transfer</li>
<li>team awareness and transparency</li>
<li>also:

<ul>
<li>improve development process</li>
<li>avoid build breaks</li>
<li>share code ownership</li>
<li>track rationale</li>
<li>team assessment</li>
</ul>
</li>
</ul>


<h2>The quality wheel</h2>

<p>I&rsquo;ve read <a href="http://blog.jessitron.com/2015/04/the-quality-wheel.html">this article</a> by Jessica Kerr about the qualities of beautiful code</p>

<h2>5 Minute Physics</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=n6FKT-KafRk">this video</a> on interactions with the mobile devices and related to physics by David DeSandro</p>

<h2>Rise of the Transpilers</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=DspYurD75Ns">this video</a> on the rise of the transpilers and coffeescript by Jeremy Ashkenas</p>

<h2>Drawing Lines with Bresenham&rsquo;s Line Algorithm</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=zytBpLlSHms">this video</a> about how to apply the Bresenham&rsquo;s algorithm to draw lines (implemented in pseudo-code and javascript) by Jenn Schiffer</p>

<h2>Working with Minified JavaScript</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=SuFNR7-XjKI">this video</a> by John Crepezzi on how to mix javascript files (clients and yours), how to decompile javascript in chrome, dev &amp; debug tools</p>

<h2>How we ran our Legacy Code Retreat</h2>

<p>I&rsquo;ve read <a href="https://pboop.wordpress.com/2012/02/19/how-we-ran-our-legacy-code-retreat/">this article</a> by Andreas Leidig, looking for inspiration on running a legacy code retreat / brown-bag session. The experience report <a href="../../../../2015/06/23/brown-bag-session-refactoring-legacy-code/">is here</a></p>

<h2>Shift Left: Testing Earlier in Development</h2>

<p>I&rsquo;ve read <a href="http://wirfs-brock.com/blog/2015/06/18/shift-left">this article</a> by Rebecca Wirfs-Brock</p>

<h2>Polymorphic Equality</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/06/polymorphic-equality/">this article</a> on implementing polymorphic equality on C#, by Carlos Blé</p>

<h2>Commit messages are not titles</h2>

<p>I&rsquo;ve read <a href="http://antirez.com/news/90">this article</a> on git commit messages and how to use them, by antirez</p>

<h2>Oracle Considers G1 Garbage Collector for Java 9</h2>

<p>I&rsquo;ve read this <a href="https://adtmag.com/articles/2015/06/22/oracle-java-9.aspx">press article</a> on the G1 and CMS collector, by John K. Waters</p>

<h2>What Tech Newbies Need</h2>

<p>I&rsquo;ve read <a href="https://storify.com/jesslynnrose/what-tech-newbies-need">this set of tweets</a>, grouped by Jessica Rose about the most helpful things beginners can do to improve their programming skills.</p>

<h2>JavaScript For Cats</h2>

<p>I&rsquo;ve read <a href="http://jsforcats.com/">this introductory guide</a> to javascript by <a href="https://twitter.com/maxogden">Max Ogden</a></p>

<h2>Why Doesn&rsquo;t Python Have Switch/Case?</h2>

<p>I&rsquo;ve read <a href="http://www.pydanny.com/why-doesnt-python-have-switch-case.html">this article</a> on the switch case in the python language by Daniel Roy Greenfeld</p>

<h2>[Joseph Moniz&rsquo;s] Notes on Clojure</h2>

<p>I&rsquo;ve read Joseph Moniz&rsquo;s <a href="http://blog.plasmaconduit.com/notes-on-clojure/">Notes on Clojure</a>.</p>

<h2>Chemical Computing with Clojure</h2>

<p>I&rsquo;ve read <a href="http://gigasquidsoftware.com/chemical-computing/index.html">an article</a> on performing abstract computations with chemicals, written in Clojure by Carin Meier</p>

<h2>Lenses</h2>

<p>I&rsquo;ve read <a href="http://www.haskellforall.com/2012/01/haskell-for-mainstream-programmers_28.html">this tutorial</a> on writing lenses for haskell, a way of importing imperative getters / setters to a Data. Written by Gabriel Gonzalez.</p>

<p>On another note, the first part, about writing getters and setters in the naive way, is also explained in Learn you a Haskell > Chapter 8 Making Our Own Types and Typeclasses > Record syntax</p>

<h2>Microservices in Haskell</h2>

<p>I&rsquo;ve read <a href="https://github.com/AlexanderAA/haskell-microservices/blob/gh-pages/haskell-microservices.md">these notes</a> on implementing a microservice in haskell, by <a href="https://github.com/AlexanderAA">AlexanderAA</a></p>

<h2>Overcoming Resistance to Change - Isn&rsquo;t It Obvious?</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=hcz1aZ60k7w">this video</a> in the channel of The World with Theory of Constraints</p>

<h2>Bacon is bad for you</h2>

<p>I&rsquo;ve read <a href="https://speakerdeck.com/garann/bacon-is-bad-for-you">these slides</a>
 on professionalism and the programmer culture, by Garann Means</p>

<h2>Code is a job</h2>

<p>I&rsquo;ve read <a href="https://speakerdeck.com/garann/code-is-a-job">these slides</a>, that are the continuation of &ldquo;Bacon is bad for you&rdquo;, by the same author, Garann Means</p>

<h2>The Great Newline Schism</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/the-great-newline-schism/">this article</a> by Jeff Atwood on the difference in newline character(s)</p>

<h2>Top ten reasons why I won’t use your open source project</h2>

<p>I&rsquo;ve read <a href="https://changelog.com/top-ten-reasons-why-i-wont-use-your-open-source-project/">this article</a> on what&rsquo;s necessary for an open-source project to be usable by others. Written by Adam Stacoviak</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video: Nothing Is Something]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/04/video-nothing-is-something/"/>
    <updated>2015-05-04T07:43:14+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/04/video-nothing-is-something</id>
    <content type="html"><![CDATA[<p>I have seen this video: <a href="https://www.youtube.com/watch?feature=player_detailpage&amp;v=9lv2lBq6x4A">Nothing is something</a> by <a href="https://twitter.com/@sandimetz">Sandi Metz</a>, as I saw it recommended <a href="http://garajeando.blogspot.com.es/2015/04/interesting-talk-nothing-is-something.html">here</a></p>

<p>In the video, she talks programming in this fashion: (it is a stack, not an unordered list)</p>

<ul>
<li>Abstraction seeking</li>
<li>Message centric</li>
<li>Condition Averse</li>
<li>Smalltalk Infected</li>
</ul>


<blockquote><p>Not here to change the language but change you</p></blockquote>

<p>This is a pattern I&rsquo;ve also heard from <a href="https://twitter.com/@old_sound">Alvaro Videla</a>, where he said that other, more powerful languages can change your mind and help you bring some of those concepts to your own language. He was talking about Haskell, she, about Smalltalk.</p>

<p>She shows how to smell the <code>null object pattern</code> (that she independently discovered herself too - can be improved studying the classics<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>), also called <code>active nothing</code>. Decorates the <code>Animal</code> with a wrapper, to call it <code>GuaranteedAnimal</code></p>

<p>Later on, shows how to code an example on a &lsquo;tail&rsquo;, extending behaviour with inheritance and how to get rid of it: prefer composition versus inheritance. The importance of roles.</p>

<blockquote><p>Inheritance is for specialization, not for sharing code</p></blockquote>

<p>Steps to convert inheritance into composition:</p>

<ol>
<li> Isolate the difference</li>
<li> Name the concept</li>
<li> Define the role</li>
<li> Inject the players</li>
</ol>


<p>This is a trick I discovered here: when you don&rsquo;t know what name put here, create a spreadsheet and ask yourself what name the row should have. There is an example <a href="https://www.youtube.com/watch?feature=player_detailpage&amp;v=9lv2lBq6x4A#t=1959">at this minute</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>a reference to a pattern by the same name at <a href="http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382">Apprenticeship Patterns</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whose Fault Is This?]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/25/whose-fault-is-this/"/>
    <updated>2015-04-25T14:10:31+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/25/whose-fault-is-this</id>
    <content type="html"><![CDATA[<p>In the prologue of the book, while thanking everyone that has made the book possible:</p>

<blockquote><p>[&hellip;], none of the people mentioned here would be responsible for any inaccuracy that might exist in the book, as this responsibility is exclusively mine</p>

<p>Mihaly Csikszentmihalyi (translated)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, prologue of &ldquo;<a href="http://www.amazon.com/Flow-The-Psychology-Optimal-Experience/dp/0061339202">Flow</a>&rdquo;</p></blockquote>

<p></p>

<p>This connects with what <a href="http://twitter.com/@tastapod">Dan North</a> said in the Craft Conf about this idea of the &ldquo;I&rsquo;m the only one in the company producing good quality work, the rest are not doing the same&rdquo;. Of course, he was quoting greedy, selfish people who think this instead of attributing the success to the whole team.</p>

<p>Regarding the whole team, if I recall correctly, it was <a href="http://twitter.com/@svenpet">Sven Peters</a> who explained that &ldquo;[&hellip;] either the team wins or looses. There are no individual wins [&hellip;]&rdquo; <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>In this sense, Csikszentmihalyi assumes all responsibility when quoting and reflecting on other&rsquo;s works. It was his idea to develop on top of others, so any imperfection is his.</p>

<p>This is similar as when approving a pull request: you make sure that the code works and you stand by it. It is no longer the original owner&rsquo;s cause, but yours too, as you have signed this request. On the pull request, though, the code ownership is already distributed among the whole team, but approvals ensures the presence of the <a href="/blog/categories/guardian-of-the-source">guardian of the source</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I had to translate the quote, because I did not borrow the book in English<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>When the talks are available, we will be able the ensure the correct attribution of this idea.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talks I Have Attended at the Craft Conf 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/25/talks-i-have-attended-at-the-craft-conf-2015/"/>
    <updated>2015-04-25T12:25:09+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/25/talks-i-have-attended-at-the-craft-conf-2015</id>
    <content type="html"><![CDATA[<p>These are the talks I&rsquo;ve attended at the Craft Conf 2015:</p>

<h2>Thursday 23th</h2>

<ul>
<li>Opening keynote by <a href="http://twitter.com/@tastapod">Dan North</a> and <a href="http://twitter.com/@jessitron">Jessica Kerr</a></li>
<li>Writing testable code - A functional programming point of view, by <a href="http://twitter.com/@old_sound">Alvaro Videla</a></li>
<li>Coding Culture, by <a href="http://twitter.com/@svenpet">Sven Peters</a></li>
<li>OnConnectionLost: the life of an offline web application, by <a href="http://twitter.com/@sgrewenig">Stefanie Grewenig</a> and <a href="http://twitter.com/@jthoenes">Johannes Thönes</a></li>
<li>Concurrency: It&rsquo;s harder (and easier) than you think, by <a href="http://twitter.com/@paulrabutcher">Paul Butcher</a></li>
<li>Testing and Integration (the remix), by <a href="http://twitter.com/@randommood">Inés Sombra</a></li>
<li>Beyond Features: Rethinking agile planning and tracking, by <a href="http://twitter.com/@tastapod">Dan North</a></li>
<li>Closing keynote by <a href="http://twitter.com/@alfrehn">Alf Rehn</a></li>
</ul>


<h2>Friday 24th</h2>

<ul>
<li>Opening keynote: The New New Software development game: Containers, Microservices and Contract tests, by <a href="http://twitter.com/@mpoppendieck">Mary Poppendieck</a></li>
<li>Apprenticeship patterns, revisited, by <a href="http://twitter.com/@davehoover">Dave Hoover</a></li>
<li>Interaction Driven Design, by <a href="http://twitter.com/@sandromancuso">Sandro Mancuso</a></li>
<li>The hidden dimension of refactoring, by <a href="http://twitter.com/@mfeathers">Michael Feathers</a></li>
<li>Why is an API like a puppy, by <a href="http://twitter.com/@ade_oshineye">Adewale Oshineye</a></li>
<li>Microservice antipatterns, by <a href="http://twitter.com/@tsaleh">Tammer Saleh</a></li>
</ul>


<p>I couldn&rsquo;t attend the last talk nor the keynote as I had to get to the airport</p>
]]></content>
  </entry>
  
</feed>
