<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Haskell | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/haskell/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-10-12T17:26:13+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Self-Study in September 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015/"/>
    <updated>2015-09-01T15:25:19+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015</id>
    <content type="html"><![CDATA[<h2>The 30 second habit with a lifelong impact</h2>

<p>I&rsquo;ve read <a href="https://blog.growth.supply/the-30-second-habit-with-a-lifelong-impact-2c3f948ead98">this article</a> list of patterns, by Robyn Scott, in which it is explained why to compress information in a few ideas, investing 30 seconds to condense the article.</p>

<p>Tags: 30-second, habit, robyn-scott</p>

<h2>The Strengths and Weaknesses of Extreme Programming</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=LkhLZ7_KZ5w">this video</a> explaining the strengths and weaknesses of extreme programming. By William Matheson</p>

<p>Tags: extreme-programming, xp, william-matheson, video, strength, weakness</p>

<h2>Poster de Extreme Programming</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=4nN6Gh79Yg8">this video</a> introducing eXtreme Programming. By Martín Salías</p>

<p>Tags: martin-salias, kleer, extreme-programming, xp</p>

<h2>Good Tech Lead, Bad Tech Lead</h2>

<p>I&rsquo;ve read <a href="https://blog.growth.supply/good-tech-lead-bad-tech-lead-948b2b806d86">this comparison</a> of good and bad traits in tech leads. By Jason Liszka.</p>

<p>Explains the differences between good and bad tech leads, even though many of these qualities are shared by plain team members</p>

<p>Tags: jason-liszka, tech-lead, comparison</p>

<h2>Why Procrastinators Procrastinate</h2>

<p>I&rsquo;ve read <a href="http://waitbutwhy.com/2013/10/why-procrastinators-procrastinate.html">this article</a> by Tim Urban on procrastination: this article compares the procrastinator and the non-procrastinator brain with pictures, introducing the Rational part, the Instant Gratification Monkey and the Panic Monster. Shows some reasons why.</p>

<p>There is more on part 2: <a href="http://waitbutwhy.com/2013/11/how-to-beat-procrastination.html">How to beat procrastination</a></p>

<p>Tags: tim-urban, procrastination, rational-part, instant-gratification-monkey, panic-monster, brain, comparison</p>

<h2>Algebraic data type</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Algebraic_data_type">this wikipedia page</a>, that explains what this is, a few examples and the theory behind it.</p>

<p>Tags: wikipedia, data-type, algebraic-data-type</p>

<h2>Recursion</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)">this wikipedia page</a>, that explains the recursion basic concepts, such as:</p>

<ul>
<li>induction, coinduction</li>
<li>recursion, corecursion</li>
<li>implementation details in iterative vs recursive programs:

<ul>
<li>shortcutting recursion (i.e., arm-length&rsquo;s recursion)</li>
<li>wrapper function</li>
<li>tail-call optimization, related to tail-recursive functions</li>
</ul>
</li>
<li>recursion and its relation to data structures</li>
<li>base case / recursive case and removing the need of the base one in corecursion or in non-strict languages</li>
<li>types of recursion:

<ul>
<li>direct, indirect, mutual</li>
<li>generative, structural</li>
</ul>
</li>
</ul>


<p>Tags: recursion, corecursion, induction, coinduction, tail-call-optimization, tail-recursion, direct-recursion, indirect-recursion, mutual-recursion, generative-recursion, structural-recursion, arm-length-recursion, iterative-function, recursive-function, base-case, recursive-case, wikipedia, data-structure</p>

<h2>Anonymous function</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Anonymous_function">this wikipedia page</a>, that describes what is a lambda expression or an anonymous function. How it can be used (e.g., currying, higher-order function, closures) and gives examples in many languages.</p>

<p>Cites its invention (Church, 1936, lambda-calculus) and its first implementation (Lisp, 1958)</p>

<p>Tags: alonzo-church, anonymous-function, lambda-expression, closure, lambda-calculus, lisp, currying, higher-order-function, wikipedia</p>

<h2>Closure</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)">this wikipedia page</a>, that explains the concept of closures and the usual confusion between closure and lambda. Also some applications.</p>

<p>Discusses closures as a way of deferring execution and implementing object-oriented (OO) systems</p>

<p>Tags: wikipedia, closure, object-orientation, lambda-expression</p>

<h2>Zen Story: The Master Archer</h2>

<p>I&rsquo;ve read <a href="http://www.thedailyzen.org/2015/06/23/zen-story-the-master-archer/">this story</a> by Charlie Ambler about perfectionism and deep study, exemplified by the general that retires to study archery and the child who draws targets around the arrows.</p>

<p>Tags: charlie-amber, master, student, zen, story</p>

<h2>Loosely Coupled</h2>

<p>I&rsquo;ve read <a href="http://blog.bwhaley.com/loosely-coupled">this article</a> by Ben Whaley about how to loosely couple services introducing a queue and the difference in patterns between push and pull communication.</p>

<p>Tags: ben-whaley, push, pull, coupling, loose-coupling, service, queue, aws</p>

<h2>Being good at programming competitions correlates negatively with being good on the job</h2>

<p>I&rsquo;ve watched the small video and the discussion about programmers&#8217; talent at <a href="http://www.catonmat.net/blog/programming-competitions-work-performance/">this page</a>. By Peteris Krumins.</p>

<p>The original video explains that being good at a programming contest correlates negatively with skill at a programming job, even if the company hires them.</p>

<p>The discussion explains the analogy with height and the NBA and concludes that this parameter should be preponderated with less importance than others.</p>

<p>Tags: google, peter-norvig, nba, analogy, programming-contest, programming-skill, peteris-krumins</p>

<h2>On Functors</h2>

<p>I&rsquo;ve read <a href="http://www.catonmat.net/blog/on-functors/">this comparison</a> by Peteris Krumins of what the functors are in different languages:</p>

<ul>
<li>C++: function objects</li>
<li>Standard ML: generic implementation of interfaces. They allow to compose structures</li>
<li>Haskell: structure containing zero or more objects that can be converted to another structure containing the other objects. It&rsquo;s an homomorphism between two categories.</li>
<li>Prolog: built-in predicate for self-inspection and the atom at the start of the structure</li>
</ul>


<p>Tags: peteris-krumins, comparison, haskell, c-plus-plus, standard-ml, prolog, functor</p>

<h2>Recursive Regular Expressions</h2>

<p>I&rsquo;ve read <a href="http://www.catonmat.net/blog/recursive-regular-expressions/">this article</a> on recursive regular expressions by Peteris Krumins.</p>

<p>In it, he lightly describes how a regular expression relates to a <a href="https://en.wikipedia.org/wiki/Context-free_grammar">Context-Free Grammar</a> and the language support for Perl to include recursive regular expressions. Based on the examples (e.g., <code>0^n1^n</code>), it really clicked to me that this could be expressed as a recursive function, with its base case and the recursive one. Also that it &ldquo;depends on solutions to smaller instances of the same problem&rdquo; (<a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)">wikipedia</a>)</p>

<p>Tags: peteris-krumins, regular-expression, recursion, recursive-regular-expression, perl, context-free-grammar, formal-language-theory</p>

<h2>In Functional Programming, what is a functor?</h2>

<p>I&rsquo;ve read <a href="http://stackoverflow.com/questions/2030863/in-functional-programming-what-is-a-functor/2031421#2031421">this answer</a>, by Norman Ramsey, on what is a functor.</p>

<p>He explains in simple words what the concept is and how a type can belong to the class functor. Examples in haskell.</p>

<p>Tags: norman-ramsey, functor, stack-overflow, haskell, type-class, class, map, fmap</p>

<h2>Functors</h2>

<p>I&rsquo;ve read <a href="http://www.clojure.net/2013/01/19/Functors/">this article</a> by Jim Duey explaining functors in Clojure. He introduces a couple of notes of Haskell but all of the examples are in Clojure. Explains functors, a subset of it called applicatives, and the two libraries he has created.</p>

<p>Tags: jim-duey, functor, clojure, haskell</p>

<h2>10 Tips for Proper Application Logging</h2>

<p>I&rsquo;ve read <a href="http://www.javacodegeeks.com/2011/01/10-tips-proper-application-logging.html">this article</a> by Tomasz Nurkiewicz about tips on logging:</p>

<ul>
<li>reduce side effects</li>
<li>use categories and levels</li>
<li>connection with external systems</li>
<li>handling exceptions</li>
<li>automatically / manually reading logging files</li>
</ul>


<p>Tags: tomasz-nurkiewicz, logging, sl4j, log4j, tip</p>

<h2>What is &ldquo;duck typing&rdquo;?</h2>

<p>I&rsquo;ve read <a href="http://ericlippert.com/2014/01/02/what-is-duck-typing/">this article</a> by Eric Lippert about duck typing</p>

<p>Tags: duck-typing, eric-lippert, type-system, c-sharp</p>

<h2>Yagni</h2>

<p>I&rsquo;ve reread <a href="http://martinfowler.com/bliki/Yagni.html">this article</a> by Martin Fowler on the cost of developing features that are not needed</p>

<p>Tags: martin-fowler, yagni, article, misunderstanding</p>

<h2>Learn Haskell</h2>

<p>I&rsquo;ve seen <a href="https://www.youtube.com/watch?v=JJlI5FPTbgE">this video</a> by Jordan Medlock on learning haskell, explaining the basics and how to use the REPL</p>

<p>Tags: haskell, repl, jordan-medlock, beginner, video</p>

<h2>Learn Haskell</h2>

<p>I&rsquo;ve seen <a href="https://www.youtube.com/watch?v=JJlI5FPTbgE">this video</a> by Jordan Medlock on learning haskell, explaining the basics and how to use the REPL</p>

<p>Tags: haskell, repl, jordan-medlock, beginner, video</p>

<h2>TMUX - The Terminal Multiplexer</h2>

<p>I&rsquo;ve read these two parts: (<a href="http://blog.hawkhost.com/2010/06/28/tmux-the-terminal-multiplexer/">one</a>, <a href="http://blog.hawkhost.com/2010/07/02/tmux-%E2%80%93-the-terminal-multiplexer-part-2">two</a>) of an introduction guide to <code>tmux</code> (the unix terminal multiplexer) by Cody from Hawk Host.</p>

<p>In it, he explains the basics of tmux and the main differences with <code>screen</code></p>

<p>Tags: cody, hawk-host, tmux, how-to</p>

<h2>Thermodynamics and Garbage Collection</h2>

<p>I&rsquo;ve read <a href="http://www.pipeline.com/~hbaker1/ThermoGC.html">this paper</a> by Henry G. Baker that explains the analogy of the garbage collection (&ldquo;a freezer&rdquo;) and thermodynamics, where the state mutator (th program, also an oven) modifies the garbage heap and introduces / extracts entropy into the system.</p>

<p>Comparison between entropy and lack of information, using the theories from Shannon, Maxwell-Boltzmann. There&rsquo;s a reference to the knapsack problem and to simulated annealing.</p>

<p>There&rsquo;s also a gentle introduction to thermodynamics in layman terms: heat, temperature, microstates, macrostates, reversability, etc.</p>

<p>In this paper it is also reflected (in macro vs micro states) that the sum all parts is simpler than the single ones (i.e., Information Hiding)</p>

<p>Tags: henry-baker, thermodynamics, microstate, macrostate, analogy, simulated-annealing, garbage-collection, shannon, information, maxwell-boltzmann, freezer, oven, entropy</p>

<h2>How we ended up with microservices</h2>

<p>I&rsquo;ve read <a href="http://philcalcado.com/2015/09/08/how_we_ended_up_with_microservices.html">this article</a>, by Phil Calçado, where he talks about his stay at SoundCloud:</p>

<ul>
<li>the value stream map: from X days to Y</li>
<li>reorganizing teams into service teams</li>
<li>conway&rsquo;s law and teams being responsible for support. Also, being given full authority</li>
</ul>


<p>  Tags: phil-calcado, soundcloud, microservice, team-split, value-stream-mapping, conversion, reorganization</p>

<h2>Lisp is still a secret weapon</h2>

<p>I&rsquo;ve read <a href="http://kep.io/is-lisp-still-a-secret-weapon/">this article</a> by Judd Keppel where he explains it is a good idea that Clojure / ClojureScript continues to be a secret, not known among developers. Cites the article &lsquo;Beating the averages&rsquo; by Paul Graham and the amount of available packages in npm, maven central, etc</p>

<p>Tags: paul-graham, judd-keppel, clojure, clojurescript, weapon, developer</p>

<h2>Perceptron</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Perceptron">this wikipedia</a> article that explains the single-layer and multi-layer perceptron. First designed to be a machine (hardware), but later an algorithm for supervised machine learning. Worked by Minsky &amp; Papert and invented by Frank Rosenblatt in 1958.</p>

<p>Tags: peceptron, artificial-intelligence, machine-learning, frank-rosenblatt, 1958, mavin-minsky, seymour-papert</p>

<h2>Is C# a strongly typed or a weakly typed language?</h2>

<p>I&rsquo;ve read <a href="http://ericlippert.com/2012/10/15/is-c-a-strongly-typed-or-a-weakly-typed-language/">this article</a>, in the form of a dialogue between Eric Lippert and himself about the C# language and its type system.</p>

<p>Tags: type-system, c-sharp, eric-lippert, dialogue, strongly-typed, weakly-typed, language</p>

<h2>Diseño por contratos: construyendo software confiable</h2>

<p>I&rsquo;ve read <a href="http://www.revista.unam.mx/vol.4/num5/art11/sep_art11.pdf">this paper</a> that explains design by contract, based on the Hoare triplet, pre-post condition, method and class invariant. With examples in Eiffel, Java about a package sender company. Also explains pre/post with inheritance. By Gerardo Rossel and Andrea Manna. In Spanish.</p>

<p>Tags: gerardo-rossel, andrea-manna, design-by-contract, unam-mx, eiffel, java, precondition, postcondition, trust, quality, hoare-triplet, method-invariant, class-invariant</p>

<h2>The Inevitable Return of COBOL</h2>

<p>I&rsquo;ve read <a href="http://blog.hackerrank.com/the-inevitable-return-of-cobol/">this article</a> that explains the current state of COBOL in programming and systems. Written by Ritika Trikha</p>

<p>Tags: ritika-trikha, cobol, programming-language, retirement, median-age</p>

<h2>The Risky Eclipse of Statisticians</h2>

<p>I&rsquo;ve read <a href="http://blog.hackerrank.com/the-risky-eclipse-of-statisticians/">this article</a> where Ritika Trikha explains the current situation regarding Big Data and the statiscian jobs. How Big Data is in demand but the latter are not and what effects this might have.</p>

<p>Tags: ritika-trikha, bootcamp, programming, hiring, big-data, analysis, statistics</p>

<h2>Give it five minutes</h2>

<p>I&rsquo;ve read <a href="https://signalvnoise.com/posts/3124-give-it-five-minutes">this article</a> by Jason Fried where he explains why we should give ideas time to sink in and marinate, before dismissing them. Ideas are so fragile that it is better to let them live for a while before dismissing them. This also applies for thoughts (other people&rsquo;s or your own).</p>

<p>Tags: jason-fried, idea, think, startup, blue-hat, thinking-hat,  six-thinking-hats, red-hat</p>

<h2>Reading Clojure Stacktraces</h2>

<p>I&rsquo;ve read <a href="http://blog.jayfields.com/2012/06/reading-clojure-stacktraces.html">this article</a> by Jay Fields on reading clojure stacktraces. Very similar to &ldquo;Clojure Stack Traces for the Uninitiated&rdquo;</p>

<p>Tags: jay-fields, clojure, stacktrace</p>

<h2>Clojure Stack Traces for the Uninitiated</h2>

<p>I&rsquo;ve read <a href="https://blog.8thlight.com/connor-mendenhall/2014/09/12/clojure-stacktraces.html">this article</a> on how to interpret clojure stacktraces. Written by Connor Mendenhall</p>

<p>Tags: connor-mendenhall, clojure, stacktrace</p>

<h2>JavaScript type inference</h2>

<p>I&rsquo;ve found (and played) with <a href="http://www.ccs.neu.edu/home/dimvar/jstypes.html">this JavaScript type inference engine</a>. Written in Javascript (and available online). Written by Dimitrios Vardoulakis.</p>

<p>Tags: javascript-type-inference, type-inference, type-inference-algorithm, dimitrios-vardoulakis, cfa2</p>

<h2>Alternatives to boolean parameters</h2>

<p>I&rsquo;ve read <a href="https://blog.8thlight.com/dariusz-pasciak/2015/05/28/alternatives-to-boolean-parameters.html">this article</a> explaining alternatives to sending a boolean parameter to decide on the contents of the function. Written by Dariusz Pasciak</p>

<p>As I heard some time ago, if a function receives a boolean to decide on what to do, it will for sure have more than one responsibility: one for the false value and one for the true value.</p>

<p>Tags: dariusz-pasciak, boolean, srp, boolean-parameter</p>

<h2>Why Are Web Uploads So Painful?</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/why-are-web-uploads-so-painful/">this article</a> on web uploads being painful. By Jeff Atwood. The screenshots feel old (2007) and some of the problems have already been solved.</p>

<p>Tags: jeff-atwood, article, upload, browser</p>

<h2>Can Your Team Pass The Elevator Test?</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/can-your-team-pass-the-elevator-test/">this article</a> on the elevator test by Jeff Atwood.</p>

<p>Tags: jeff-atwood, article, elevator-test, assumption, microsoft-bob, vision, product, feature</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Language Was Prepared for That]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/08/10/the-language-was-prepared-for-that/"/>
    <updated>2015-08-10T00:58:33+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/08/10/the-language-was-prepared-for-that</id>
    <content type="html"><![CDATA[<p>Many times I&rsquo;ve written this function:</p>

<pre><code class="java">public boolean between(int lowerBound, int n, int upperBound){
    return lowerBound &lt;= n &amp;&amp;
        n &lt;= upperBound;
}
</code></pre>

<p>It may depend on the case, whether it is <code>[]</code>, <code>[)</code>, <code>(]</code> or <code>()</code>, to use mathematical terms.</p>

<p>When the two comparisons are the same (<code>[]</code> and <code>()</code>), there is duplication in the comparisons.</p>

<p>Investigating a little bit on this in clojure, I&rsquo;ve found this function:</p>

<pre><code class="lisp">&lt;=
</code></pre>

<p>And its <a href="https://clojuredocs.org/clojure.core/%3C=">clojuredocs</a>: Returns non-nil if nums are in monotonically non-decreasing order,
otherwise false.</p>

<p>A sample usage:</p>

<pre><code class="lisp">(&lt;= 1 2)
; true

(&lt;= 1 2 1)
; false
</code></pre>

<p>The last part is the most interesting one. As this function is prepared to receive more than two parameters, it is very easy for the programmer to use it. We could say that the language was prepared for that.</p>

<p>The <a href="https://github.com/clojure/clojure/blob/clojure-1.7.0/src/clj/clojure/core.clj#L1020">implementation</a>:</p>

<pre><code class="lisp">(defn &lt;=
  ([x] true)
  ([x y] (. clojure.lang.Numbers (lte x y)))
  ([x y &amp; more]
   (if (&lt;= x y)
     (if (next more)
       (recur y (first more) (next more))
       (&lt;= y (first more)))
     false)))
</code></pre>

<p>Inspired by this, I&rsquo;ve implemented the same function in haskell (for the repl):</p>

<pre><code class="haskell">let isBigger acc ele = (snd acc) &amp;&amp; (fst acc) &lt; ele in
   foldl (\acc ele -&gt; (ele, isBigger acc ele)) (1, True) [1,2,1,3] 
</code></pre>

<p>and a simpler solution I&rsquo;ve found on <a href="http://codereview.stackexchange.com/questions/46606/is-a-list-sorted/46608#46608">Stack Overflow</a>:</p>

<pre><code class="haskell">isSorted :: (Ord a) =&gt; [a] -&gt; Bool
isSorted xs = all (\(x, y) -&gt; x &lt;= y) $ zip xs (tail xs)
</code></pre>

<p>or</p>

<pre><code class="haskell">isSorted :: (Ord a) =&gt; [a] -&gt; Bool
isSorted xs = and $ zipWith (&lt;=) xs (tail xs)
</code></pre>

<h2>Conclusion</h2>

<p>Unless a more elegant, language-provided solution exists in haskell, the clojure one is way simpler. This is one of the benefits of prefix notation, that operators (e.g., <code>+</code>, <code>-</code>, <code>*</code>, <code>&lt;=</code>) are overloaded to take more arguments than before.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Study in August 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/"/>
    <updated>2015-08-02T21:45:19+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015</id>
    <content type="html"><![CDATA[<h2>Humble Object</h2>

<p>I&rsquo;ve read the <a href="http://xunitpatterns.com/Humble%20Object.html">Humble Object</a> list of patterns, by Gerard Meszaros, including:</p>

<ul>
<li>humble dialog</li>
<li>humble executable</li>
<li>humble transaction controller</li>
<li>humble container adapter</li>
</ul>


<p>Tags: pattern, gerard-meszaros</p>

<h2>How you know</h2>

<p>I&rsquo;ve reread <a href="http://www.paulgraham.com/know.html">this small essay</a> by Paul Graham on storing information in our heads, based on the context. On the importance of rereading, to add more contexts to the initial one.</p>

<p>Tags: paul-graham, reread, read</p>

<h2>Protected Variation: The Importance of Being Closed</h2>

<p>I&rsquo;ve read <a href="http://www.martinfowler.com/ieeeSoftware/protectedVariation.pdf">this article</a> by Craig Larman in the magazine IEEE Software > Design.</p>

<p>Discusses Information Hiding, Protected Variation and the Open-Closed Principle.</p>

<p>Tags: craig-larman, ocp, open-closed principle, design, information-hiding, ih, protected-variation, pv,</p>

<h2>Lambda, Javascript Micro-Services on AWS</h2>

<p>I&rsquo;ve read <a href="http://www.jayway.com/2014/12/18/lambda-javascript-micro-services-aws/">this post</a> explaining how to deploy a microservice on AWS on top of Lambda. Written by Anders Janmyr</p>

<p>The cool thing is that you get billed by milliseconds!</p>

<p>Tags: anders-janmyr, devops, microservice, lambda, aws</p>

<h2>Migrating To Clojure. So Much Fn</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=Hv4slaRydRM">this talk</a> by Jan Stępień where he talks about his experience on migrating part of an application to clojure from ruby on rails</p>

<p>Tags: jan-stepien, clojure, migration, ruby-on-rails, talk, wrocloverb</p>

<h2>Te recomiendo escribir en un blog</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/07/te-recomiendo-escribir-en-un-blog/">this article</a> from Carlos Blé in which he recommends writing a blog, on things we discover along the way. (Spanish)</p>

<p>Tags: carlos-ble, meta, blog, long-way</p>

<h2>We need enough technical debt</h2>

<p>I&rsquo;ve read <a href="https://blog.svpino.com/2015/08/05/we-need-enough-technical-debt">this article</a> on why we need to accumulate a bit of technical debt, as a way of being less perfectionist and deliver more features / value to our stakeholders. Written by Santiago L. Valdarrama.</p>

<p>Tags: santiago-valdarrama, technical-debt, perfectionism</p>

<h2>Escribe mejores tests en Javascript</h2>

<p>I&rsquo;ve read <a href="http://carlosvillu.com/escribe-mejores-tests-en-javascript/">this list</a> of tips to write better javascript tests (Spanish). By Carlos Villuendas</p>

<p>Tags: carlos-villuendas, javascript, test</p>

<h2>Down the Rabbit Hole</h2>

<p>I&rsquo;ve read <a href="https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole">this wiki</a> page on how to tune some aspects of the server hotspot JVM, by Brett Wooldridge</p>

<p>Tags: performance, jvm, hotspot, inline, bytecode, brett-wooldridge</p>

<h2>XP Manchester Lightning Talks 2015 Live broadcast</h2>

<p>I have watched the first two <a href="https://www.youtube.com/watch?v=VD4UEW2i7hU">lightning talks</a> from XP Manchester, edition number 61.</p>

<p>Tags: lightning-talk, broadcast, simplicity, manchester, 2015</p>

<h2>Counting hash collisions with the birthday paradox</h2>

<p>I&rsquo;ve read <a href="http://matt.might.net/articles/counting-hash-collisions/">this article</a> on the birthday paradox, or the percentage of chance of people sharing the same birthday. This could be applied to hash function, as the title says, but is not included in the article. Written by Matt Might</p>

<h2>Why I&rsquo;m The Best Programmer In The World*</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/why-im-the-best-programmer-in-the-world/">this ironically-titled article</a> by Jeff Atwood on humility and how to improve as a programmer.</p>

<p>Tags: jeff-atwood</p>

<h2>The Key to Giving and Receiving Negative Feedback</h2>

<p>I&rsquo;ve read <a href="https://hbr.org/2015/08/the-key-to-giving-and-receiving-negative-feedback?">this article</a> by Joseph Grenny about how to give and receive negative feedback. It is exemplified by the plant manager who was expecting another kind of feedback from his subordinates and was surprised by their negative feedback.</p>

<p>Tags: joseph-grenny, negative-feedback, feedback, by-example</p>

<h2>Testing Clojure web applications with Kerodon</h2>

<p>I&rsquo;ve read <a href="https://semaphoreci.com/community/tutorials/testing-clojure-web-applications-with-kerodon">this guide</a> on how to test compojure-based applications with kerodon. Written by Nebojša Stričević</p>

<p>Tags: nebojsa-stricevic, compojure, kerodon, clojure, testing, guide</p>

<h2>Using The Option Type Effectively</h2>

<p>I&rsquo;ve read <a href="https://blog.8thlight.com/uku-taht/2015/04/29/using-the-option-type-effectively.html">this article</a> on how to use the <code>Option</code> type (in rust), similar to <code>Optional</code> in java or <code>Maybe</code> in haskell. Written by Uku Taht.</p>

<p>Tags: uku-taht, option, maybe, optional, rust</p>

<h2>When Should You Think?</h2>

<p>I&rsquo;ve read <a href="https://blog.8thlight.com/uncle-bob/2014/03/11/when-to-think.html">this post</a> by Robert C Martin on when to think and the hypothesis that TDD does not allow you to think before coding.</p>

<p>Tags: tdd, robert-c-martin, design, hypothesis</p>

<h2>Orthogonal latin squares: an application of experiment design to compiler testing</h2>

<p>I&rsquo;ve read <a href="http://barbie.uta.edu/~mehra/20_an%20application%20of%20experiment%20design%20to%20compiler%20testing.pdf">this paper</a> by Robert Mandl on techniques that can be applied to reduce the burden of exhaustive testing to compilers. Preferring &ldquo;surely all relevant distinct combinations&rdquo; we can reduce the amount of testing. This paper tries to formalize the concept of &ldquo;near-exhaustive testing&rdquo;</p>

<p>Tags: latin-square, robert-mandl, compiler, testing, near-exhaustive-testing, optimization, exhaustive-testing</p>

<h2>  Practical Type System Benefits</h2>

<p>I&rsquo;ve read <a href="https://themonadreader.files.wordpress.com/2014/04/nccb.pdf">this article</a> by Neil Brown on benefits of the type system, with examples in haskell. He goes on to explore the benefits of involving the type-checker at compile time to remove type errors and ease the programming effort:</p>

<blockquote><p>I find that several problems in Haskell can be solved by involving the type system
further: The trick is to involve the type system in ways that provide a big benefit
for the cost, but not going so far that the type system gets in the way of code
that you know &ndash;but can’t easily prove to the compiler&ndash; is safe</p></blockquote>

<p>I&rsquo;ve also learned the concept of the quasi-quoter: similar to a preprocessor, executed at compile time and type-checked</p>

<p>Tags: neil-brown, quote, quasi-quoter, preprocessor, haskell, monad-reader</p>

<h2>ClojureScript and the Blub Paradox</h2>

<p>I&rsquo;ve read this article comparing javascript and clojurescript using the fizzbuzz kata. There is a nice example of the pattern matching for the cases (i.e. &ldquo;switch&rdquo;) of the fizz, buzz. Written by Nate Wildermuth</p>

<p>Tags: clojurescript, javascript, fizzbuzz, kata, nate-wildermuth</p>

<h2>No malinterpretes tu carrera</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2011/02/no-malinterpretes-tu-carrera/">this article</a> on (not) changing careers from programmer to designer, analyst, team manager. About the programmer&rsquo;s passion and why not to misinterpret your career. Written by Carlos Blé. In Spanish.</p>

<p>Tags: carlos-ble, career, programming, management, career-change</p>

<h2>Just Haskell or Nothing</h2>

<p>I&rsquo;ve read <a href="https://cheecheeo.github.io/just_haskell_or_nothing.html">these slides</a> on packaging values in (Just a) or Nothing for possibly failed computations in haskell. Written by John Chee</p>

<p>Tags: john-chee, haskell, just, nothing, maybe, functor</p>

<h2>Tracking Joy at Work</h2>

<p>I&rsquo;ve read <a href="http://begriffs.com/posts/2015-03-15-tracking-joy-at-work.html">this article</a> about quantifying happiness at the office (or at work). Joe Nelson, the author of the article, uses the quantifying method described int the book <a href="http://www.amazon.com/Experience-Sampling-Method-Measuring-Everyday/dp/1412925576/">Experience Sampling Method</a> (<a href="https://en.wikipedia.org/wiki/Experience_sampling_method">wikipedia page</a>) by Hektner, Schmidt, Csikszentmihalyi.</p>

<p>The last one, not coincidentally is the author of <a href="http://www.amazon.com/Flow-The-Psychology-Optimal-Experience/dp/0061339202">Flow: The Psychology of Optimal Experience</a>.</p>

<p>Tags: mihaly-csikszentmihalyi, flow, quantification, data, experience-sampling, article, joe-nelson</p>

<h2>Going &ldquo;Write-Only&rdquo;</h2>

<p>I&rsquo;ve read <a href="http://begriffs.com/posts/2015-04-20-going-write-only.html">this article</a> by Joe Nelson on going &ldquo;write-only&rdquo; on social media, blogs, news, etc, as opposed to read-only (only consuming media) or read-write (consuming and producing). He cites another programmer, <a href="http://joey.hess.usesthis.com/">Joey Hess</a> and about the quality and durability of your work.</p>

<p>Tags: article, joe-nelson, write-only, social-media, reading, philosophy, thoreau, nietzsche, joey-hess</p>

<h2>Create a static site with Hakyll, Github and Travis CI</h2>

<p>I&rsquo;ve read <a href="http://begriffs.com/posts/2014-08-12-create-static-site-with-hakyll-github.html">this article</a> on how to create your blog with hakyll and travis ci. Written by Joe Nelson</p>

<p>Travis ci is used to do continuous integration and automatically deploy each commit to production (github pages).</p>

<p>Tags: hakyll, haskell, joe-nelson, meta, blog, continuous-deployment, github, github-pages, travis-ci</p>

<h2>Falling in Love with Computer Science</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=haxusGuUyt4">this video</a> by Kathy Pham, an American that discovered her passion, her love to computer science a few years ago. She tells the events around computer science from the beginning of college to the current moment.</p>

<p>Tags: kathy-pham, passion, love, computer-science, autobiography, time-lapse, google-developers</p>

<h2>Duck Typing</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=h0rTF__RNo4">this video</a> by Dan Grossman, part of the <a href="https://www.coursera.org/course/proglang">&ldquo;Programming Languages&rdquo; MOOC</a>, in which he explains what is a Duck Type and how to use (and abuse) them in ruby.</p>

<p>Tags: ruby, dan-grossman, mooc, mooc-programming-languages</p>

<h2>Not-So-Private Clojure Functions</h2>

<p>I&rsquo;ve read <a href="http://christophermaier.name/blog/2011/04/30/not-so-private-clojure-functions">this article</a> explaining how to bypass private functions in clojure: either create a lambda or create a different namespace. Written by Christopher Maier</p>

<p>Tags: private-variable, clojure, testing, joy-of-clojure, christopher-maier, private-function, namespace</p>

<h2>Frege (and Clojure)</h2>

<p>I&rsquo;ve read <a href="http://seancorfield.github.io/blog/2015/02/13/frege-and-clojure/">this article</a> that tells the Pragmatic Programmer&rsquo;s advice to learn a new language every year and the author (Sean Corfield) explains his trajectory learning them. He also cites the Lein plugin he&rsquo;s built: <code>lein-fregec</code> and how to connect clojure and frege (a.k.a JVM&rsquo;s haskell).</p>

<p>Tags: haskell, frege, jvm, clojure, ffi, pragmatic-programmer, advice, lein-fregec,  sean-corfield, comparison</p>

<h2>Two months early. 300k under budget</h2>

<p>I&rsquo;ve read <a href="https://thoughtworks.github.io/p2/issue09/two-months-early/">the tale</a> of a Thoughtworks Project Manager who convinced his client to start using clojure to deliver a custom-made CMS. Written by Dave Elliman.</p>

<p>Tags: dave-elliman, thoughtworks, project-manager, clojure, cms, microservice</p>

<h2>Convince your boss to use Clojure</h2>

<p>I&rsquo;ve read <a href="http://www.lispcast.com/convince-your-boss-to-use-clojure">this guide</a> by Eric Normand on how to convince your boss or your company to start using clojure.</p>

<p>Tags: company, clojure, eric-normand, how-to, guide</p>

<h2>A brief introduction to Prolog</h2>

<p>I&rsquo;ve read <a href="https://docs.google.com/presentation/d/1NAUo8nWLfNvvW3Wb7HJMunljjDJbzu7mo-5twKeGDvc/edit#slide=id.g63daf4745_0_56">these slides</a> about a brief introduction to prolog and how to do web development in it. By Jaelle Scheuerman</p>

<p>Tags: jaelle-scheuerman, prolog, web-development, rest, slide</p>

<h2>Arrayzing - The JavaScript array cheatsheet</h2>

<p>I&rsquo;ve read <a href="https://gist.github.com/ourmaninamsterdam/1be9a5590c9cf4a0ab42">this cheatsheet</a> for javascript arrays. Written by Justin Perry</p>

<p>Tags: cheatsheet, array, javascript, gist, justin-perry</p>

<h2>Some words on lazy evaluation and sharing</h2>

<p>I&rsquo;ve read <a href="http://pseudo.fixme.fi/~opqdonut/blog/Some_words_on_lazy_evaluation_and_sharing.html">this article</a> comparing the <code>fix</code> definition with a hand-made one and its &ldquo;sharing&rdquo; problems. Written by Joel E. Kaasinen</p>

<p>Tags: joel-kaasinen, haskell, fix, sharing, non-strictness, lazy-evaluation</p>

<h2>Hammock Driven Development</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=f84n5oFoZBc">this video</a> by Rich Hickey. A few notes:</p>

<p>A: identifying a problem that we&rsquo;re trying to solve</p>

<p>D: assessing if the proposed solution solves the problem</p>

<p>the union of the features is not the purpose of the product / is not the product</p>

<p>proramming is not completing features</p>

<p>avoiding problems /= solving problems</p>

<p>book: how to solve it - G. Polya. Practices &amp; techniques for solving mathematic problems</p>

<p>How to solve the problem</p>

<ul>
<li>state the problem</li>
<li>understand the problem:

<ul>
<li>what do you know: facts, context, constraints.</li>
<li>what do you don&rsquo;t know</li>
<li>are there related problems? solutions to related problems. find an analogy: starting from scratch vs incremental step</li>
</ul>
</li>
<li>be discerning</li>
<li>more input, better output:

<ul>
<li>read about your domain problem, research papers (maybe ACM)</li>
</ul>
</li>
<li>tradeoffs:

<ul>
<li>find at least two options (ups and downs) to compare before taking a decision</li>
</ul>
</li>
</ul>


<p>Focus time for programmers like alone time for kids. Hammock time is important mind&rsquo;s eye time</p>

<p>Waking mind:</p>

<ul>
<li>critical thinking</li>
<li>analysis</li>
<li>tactics</li>
<li>prone to local maxima</li>
<li>feed work to background mind</li>
<li>analyze its products</li>
</ul>


<p>Background mind:</p>

<ul>
<li>making connections</li>
<li>synthesis</li>
<li>strategy</li>
<li>abstracts, analogies</li>
<li>solves most non-trivial problems</li>
</ul>


<p>loading it: work it hard in the waking mind to be included in the background mind</p>

<p>abstraction = software strategy</p>

<p>tip: small answer is better than big answer (occam&rsquo;s razor?)​</p>

<p>Tags: rich-hickey, hammock-driven-development, background-mind, waking-mind, solve-problem, george-polya, book, analysis, design, talk</p>

<h2>Parallelism /= Concurrency</h2>

<p>I&rsquo;ve read <a href="https://ghcmutterings.wordpress.com/2009/10/06/parallelism-concurrency/">this article</a> on the differences between parallelism and concurrency, with examples in the haskell compiler GHC. Written by <a href="https://ghcmutterings.wordpress.com/author/simonmar/">simonmar</a></p>

<p>Tags: haskell, concurrency, parallelism, ghc, simonmar, comparison</p>

<h2>Parallelism vs. Concurrency</h2>

<p>I&rsquo;ve read <a href="https://wiki.haskell.org/Parallelism_vs._Concurrency">this page</a> from the haskell wiki.</p>

<p>Tags: haskell, concurrency, parallelism, ghc, comparison</p>

<h2>Writing code that writes code — with Hack Codegen</h2>

<p>I&rsquo;ve read <a href="https://code.facebook.com/posts/1624644147776541/writing-code-that-writes-code-with-hack-codegen/">this article</a> about metaprogramming (code that generates code) in PHP. Written by Alejandro Marcu.</p>

<p>I&rsquo;ve arrived to this from this tweet:</p>

<blockquote class="twitter-tweet" data-cards="hidden" lang="en"><p lang="en" dir="ltr">This is what happens when your programming language doesn&#39;t have macros <a href="https://t.co/ZfsEe2EJIj">https://t.co/ZfsEe2EJIj</a>. Yuck.</p>&mdash; David Nolen (@swannodette) <a href="https://twitter.com/swannodette/status/634495099607613440">August 20, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Tags: alejandro-marcu, metaprogramming, php, macro, lisp, clojure</p>

<h2>How katas can help you learn</h2>

<p>I&rsquo;ve read <a href="http://codurance.com/2015/08/18/How-katas-can-help-you-learn/">this article</a> on learning from katas, with the example of the Roman Numerals kata in Objective-C. Written by Sandro Mancuso.</p>

<p>Tags: sandro-mancuso, kata, learning, roman-numeral, objective-c</p>

<h2>Java 8: Definitive guide to CompletableFuture</h2>

<p>I&rsquo;ve read <a href="http://www.nurkiewicz.com/2013/05/java-8-definitive-guide-to.html">this article</a> about Java 8&rsquo;s feature, the <code>CompletableFeature</code>. Written by Tomasz Nurkiewicz</p>

<p>Tags: tomasz-nurkiewicz, java-8, completable-future, future, non-blocking, reactive-programming</p>

<h2>Are You Making These 10 DDD Mistakes?</h2>

<p>I&rsquo;ve read <a href="http://danielwhittaker.me/2015/07/05/are-you-making-these-10-ddd-mistakes/#">this infographic</a> on 10 DDD common mistakes, by Daniel Whittaker.</p>

<p>Tags: ddd, daniel-whittaker, bounded-context, ubiquitous-language, infographic</p>

<h2>Haste: Full-Stack Haskell for Non-PhD Candidates</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=3v03NFcyvzc">this talk</a> at the Strange Loop Conference 2014 about Haste language, a haskell version that compiles to javascript, therefore letting you write haskell in the browser. By Erin Swenson-Healey and James Cooper</p>

<p>In this talk they recommend the <a href="http://www.seas.upenn.edu/~cis194/lectures.html">CIS194 course</a></p>

<p>Tags: haste, haskell, james-cooper, erin-swenson-healey, strange-loop, 2014, talk</p>

<h2>A Year of Haskell</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=wZ0RQG3mFPw">this talk</a> about experiences using haskell professionally, by the American Justin Leitgeb in a Equatorian company in Quito, Stack Builders. He goes on to explain the haskell language in comparison to ruby on rails, what he mostly used with his clients.</p>

<p>Also explains what sells and doesn&rsquo;t (mostly productivity, not security) and gives pointer for applying it to a company</p>

<p>Tags: justin-leitgeb, ecuador, haskell, stack-builders, lambda-days, 2015, client, professional, consulting, consultancy</p>

<h2>A Taste of Haskell</h2>

<p>I&rsquo;ve watched a lesson by Simon Peyton-Jones, that introduces haskell to experienced programmers, not in the language but in programming in general. At the conference OSCON 2007</p>

<p>Links: <a href="https://www.youtube.com/watch?v=jLj1QV11o9g">part 1</a>, <a href="https://www.youtube.com/watch?v=IqXTUbdLig0">part 2</a>, <a href="http://www.slideshare.net/oscon2007/os-peytonjones">slides</a></p>

<p>Tags: oscon, 2007, haskell, introduction, lesson, simon-peyton-jones</p>

<h2>Programming - Why Haskell is Great</h2>

<p>I&rsquo;ve seen <a href="https://www.youtube.com/watch?v=RqvCNb7fKsg">this video</a> introducing some features of haskell. The most basic features, the REPL,  function composition. By FrungyKing</p>

<p>Tags: haskell, introduction, video, screencast, repl, frungyking</p>

<h2>History of Haskell: being lazy with class</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=3bjXGrycMhQ">this video</a> by Simon Peyton-Jones at the &ldquo;History of Programming Languages Conference III&rdquo; which explains how the language was designed and written, a language timeline, what options they took, how they decided about monadic IO, etc.</p>

<p>Tags: simon-peyton-jones, 2007, history-of-programming-languages-conference, haskell, talk</p>

<h2>The Humble Programmer</h2>

<p>​I&rsquo;ve read [this EWD][ewd-340]​ about the necessary humbleness for being a programmer and the slow expansion of the trade, as compared to hardware engineers.</p>

<p>He cites six reasons for preferring to be a humble programmer:</p>

<ul>
<li>the programmer only needs to manage simple programs</li>
<li>simple programs imply reducing the search space</li>
<li>construct a program from a mathematical proof instead of test its properties after building the software. see quote below</li>
<li>a good abstraction can hide much complexity and difficulty</li>
<li>the importance of the used tool in the final product</li>
<li>&ldquo;the only problems we can satisfactory solve are the ones that admit a factored solution&rdquo;</li>
</ul>


<p>In this essay I&rsquo;ve found the idea of</p>

<blockquote><p>Testing shows the presence, not the absence of bugs</p></blockquote>

<p>That <a href="https://en.wikiquote.org/wiki/Edsger_W._Dijkstra">Wikiquote</a> attributes to an earlier paper (in 1969). In this paper, the verbatim quote is:</p>

<blockquote><p>program testing can be a very effective way to show the presence of bugs, but is hopelessly inadequate for showing their absence.</p></blockquote>

<p>This idea also connects to the &ldquo;lower bounds&rdquo; and &ldquo;upper bounds&rdquo; of program correctness expressed in the article <a href="https://cdsmith.wordpress.com/2011/01/09/an-old-article-i-wrote/">An Old Article I Wrote</a> which is about static types, by Cdsmith. Admittedly, much later, in 2008, so this idea could be inspired by the Dijkstra&rsquo;s article.</p>

<p>Tags: edsger-dijkstra, ewd, dijkstra, humble-programmer, essay, comparison, absence-of-bugs, quote</p>

<h2>Building a Link Shortener with Snaplets</h2>

<p>I&rsquo;ve seen <a href="https://vimeo.com/59109358">this video</a> of how to build a link shortener webapp in haskell with the framework snap. By Ryan Trinkle. Found it in the <a href="http://snapframework.com/docs">snap docs</a> page.</p>

<p>Tags: snap, haskell, link-shortener, talk, webapp, framework, ryan-trinkle</p>

<h2>Comparing Haskell Web Frameworks</h2>

<p>I&rsquo;ve read <a href="http://www.edofic.com/posts/2014-02-23-haskell-web.html">this comparison</a> of haskell web frameworks, by Andraz Bajt (a.k.a, edofic)</p>

<p>Tags: andraz-bajt, edofic, haskell, web-framework, framework, comparison</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-study in June 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/"/>
    <updated>2015-06-03T13:13:10+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015</id>
    <content type="html"><![CDATA[<p>Update: I&rsquo;ve grouped all small posts related to the self-study from June 2015
into a single post</p>

<h2>Le monitoring de flux par l’exemple</h2>

<p>I&rsquo;ve read <a href="http://blog.octo.com/le-monitoring-de-flux-par-lexemple/">this article</a> about monitoring, in the way of &ldquo;by example&rdquo;, by Cédrick Lunven and Julien Kirch (French)</p>

<h2>The First Micro-service Architecture</h2>

<p>I&rsquo;ve read <a href="http://blog.cleancoder.com/uncle-bob/2015/05/28/TheFirstMicroserviceArchitecture.html">this article</a> about microservices and how they were implemented many years ago by Robert C. Martin</p>

<h2>How I Learned to Balance My Life With Remote Work</h2>

<p>I&rsquo;ve read <a href="https://open.bufferapp.com/remote-work/?utm_content=bufferaa5a2&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">this article</a> about balancing life and work, either physical or remote by Michael Erasmus</p>

<h2>Demystified CQRS</h2>

<p>I&rsquo;ve read <a href="https://blog.codecentric.de/en/2015/05/demystified-cqrs/?utm_content=buffer35b18&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">this article</a> about CQRS by Nino Martincevic</p>

<h2>The perils of programmer education in the bazaar</h2>

<p>I&rsquo;ve read <a href="http://blog.practicingruby.com/2015/06/04/the-perils-of-programmer-education-in-the-bazaar/">this article</a> by Gregory Brown</p>

<h2>6 useful and lesser-known git commands</h2>

<p>I&rsquo;ve read <a href="http://blog.joncairns.com/2015/05/6-useful-and-lesser-known-git-commands/">this article</a> about git commands (log, checkout, stash, cherry-pick, annotate) by Jon Cairns</p>

<h2>Is Your Scrum Standup Slowing You Down?</h2>

<p>I&rsquo;ve read <a href="http://www.sitepoint.com/scrum-standup-slowing-down/">this article</a> by M. David Green</p>

<h2>Me duele Indra</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;id=67ce79e01b">this Bonillista</a> (Spanish) by David Bonilla</p>

<h2>TDD, BDD, [add every other method that promises software quality here] and the tea tasting lady</h2>

<p>I&rsquo;ve read <a href="https://blinkingcaret.wordpress.com/2012/10/02/tdd-bdd-add-every-other-method-that-promises-software-quality-here-and-the-tea-tasting-lady/">this article</a> by Rui Figueiredo about the scientific method, TDD / BDD and how to scientifically detect if the &lsquo;how&rsquo; affects the result. In this case, exemplified by how to prepare your tea</p>

<h2>The Art of Metaprogramming in Java</h2>

<p>I&rsquo;ve read <a href="http://www.slideshare.net/PolymathicCoder/the-art-of-metaprogramming-in-java">these slides</a> by Abdelmonaim Remani</p>

<h2>When TDD does not work</h2>

<p>I&rsquo;ve read <a href="https://blog.8thlight.com/uncle-bob/2014/04/30/When-tdd-does-not-work.html">this article</a> by Uncle Bob on situations where TDD might not be appropiate, especially around the borders</p>

<h2>Mi primera semana como aprendiz</h2>

<p>I&rsquo;ve read <a href="http://ronnyancorini.es/blog/index.php/2015/06/08/mi-primera-semana-como-aprendiz/">Ronny Ancorini&rsquo;s experiences</a> in his first week as apprentince with Carlos Blé &amp; Associates (Spanish)</p>

<h2>Refactoring without good tests</h2>

<p>I&rsquo;ve read <a href="http://blog.codeclimate.com/blog/2013/12/05/refactoring-without-good-tests/">this article</a> by Peter Bell on how to deal with a legacy codebase, what are the effects of not having tests and how to deal with. How to add tests to a codebase that is not ready for it.</p>

<h2>Big Ball of Mud</h2>

<p>I&rsquo;ve read <a href="http://www.laputan.org/mud/">this paper</a>, containing a collection of patterns and antipatterns (disguised as notes) by Brian Foote and Joseph Yoder</p>

<h2>Comparision of different concurrency models: Actors, CSP, Disruptor and Threads [sic]</h2>

<p>I&rsquo;ve read <a href="http://java-is-the-new-c.blogspot.com.es/2014/01/comparision-of-different-concurrency.html">this comparison of concurrency models</a> by Rüdiger Möller</p>

<h2>5 Whys</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/5_Whys">this wikipedia</a> article on the technique called &ldquo;5 Whys&rdquo;</p>

<h2>Expectations, Outcomes, and Challenges of Modern Code Review</h2>

<p>I&rsquo;ve read <a href="http://research.microsoft.com/apps/pubs/default.aspx?id=180283">this paper</a>, <a href="http://research.microsoft.com/pubs/180283/ICSE%202013-codereview.pdf">direct link</a>, by Alberto Bacchelli and Christian Bird on code review at Microsoft.</p>

<p>They explain how they do it, the exact methodology they are using and why they do it.</p>

<p>The main reasons to code review are:</p>

<ul>
<li>finding defects</li>
<li>code improvement</li>
<li>alternative solutions</li>
<li>knowledge transfer</li>
<li>team awareness and transparency</li>
<li>also:

<ul>
<li>improve development process</li>
<li>avoid build breaks</li>
<li>share code ownership</li>
<li>track rationale</li>
<li>team assessment</li>
</ul>
</li>
</ul>


<h2>The quality wheel</h2>

<p>I&rsquo;ve read <a href="http://blog.jessitron.com/2015/04/the-quality-wheel.html">this article</a> by Jessica Kerr about the qualities of beautiful code</p>

<h2>5 Minute Physics</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=n6FKT-KafRk">this video</a> on interactions with the mobile devices and related to physics by David DeSandro</p>

<h2>Rise of the Transpilers</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=DspYurD75Ns">this video</a> on the rise of the transpilers and coffeescript by Jeremy Ashkenas</p>

<h2>Drawing Lines with Bresenham&rsquo;s Line Algorithm</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=zytBpLlSHms">this video</a> about how to apply the Bresenham&rsquo;s algorithm to draw lines (implemented in pseudo-code and javascript) by Jenn Schiffer</p>

<h2>Working with Minified JavaScript</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=SuFNR7-XjKI">this video</a> by John Crepezzi on how to mix javascript files (clients and yours), how to decompile javascript in chrome, dev &amp; debug tools</p>

<h2>How we ran our Legacy Code Retreat</h2>

<p>I&rsquo;ve read <a href="https://pboop.wordpress.com/2012/02/19/how-we-ran-our-legacy-code-retreat/">this article</a> by Andreas Leidig, looking for inspiration on running a legacy code retreat / brown-bag session. The experience report <a href="../../../../2015/06/23/brown-bag-session-refactoring-legacy-code/">is here</a></p>

<h2>Shift Left: Testing Earlier in Development</h2>

<p>I&rsquo;ve read <a href="http://wirfs-brock.com/blog/2015/06/18/shift-left">this article</a> by Rebecca Wirfs-Brock</p>

<h2>Polymorphic Equality</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/06/polymorphic-equality/">this article</a> on implementing polymorphic equality on C#, by Carlos Blé</p>

<h2>Commit messages are not titles</h2>

<p>I&rsquo;ve read <a href="http://antirez.com/news/90">this article</a> on git commit messages and how to use them, by antirez</p>

<h2>Oracle Considers G1 Garbage Collector for Java 9</h2>

<p>I&rsquo;ve read this <a href="https://adtmag.com/articles/2015/06/22/oracle-java-9.aspx">press article</a> on the G1 and CMS collector, by John K. Waters</p>

<h2>What Tech Newbies Need</h2>

<p>I&rsquo;ve read <a href="https://storify.com/jesslynnrose/what-tech-newbies-need">this set of tweets</a>, grouped by Jessica Rose about the most helpful things beginners can do to improve their programming skills.</p>

<h2>JavaScript For Cats</h2>

<p>I&rsquo;ve read <a href="http://jsforcats.com/">this introductory guide</a> to javascript by <a href="https://twitter.com/maxogden">Max Ogden</a></p>

<h2>Why Doesn&rsquo;t Python Have Switch/Case?</h2>

<p>I&rsquo;ve read <a href="http://www.pydanny.com/why-doesnt-python-have-switch-case.html">this article</a> on the switch case in the python language by Daniel Roy Greenfeld</p>

<h2>[Joseph Moniz&rsquo;s] Notes on Clojure</h2>

<p>I&rsquo;ve read Joseph Moniz&rsquo;s <a href="http://blog.plasmaconduit.com/notes-on-clojure/">Notes on Clojure</a>.</p>

<h2>Chemical Computing with Clojure</h2>

<p>I&rsquo;ve read <a href="http://gigasquidsoftware.com/chemical-computing/index.html">an article</a> on performing abstract computations with chemicals, written in Clojure by Carin Meier</p>

<h2>Lenses</h2>

<p>I&rsquo;ve read <a href="http://www.haskellforall.com/2012/01/haskell-for-mainstream-programmers_28.html">this tutorial</a> on writing lenses for haskell, a way of importing imperative getters / setters to a Data. Written by Gabriel Gonzalez.</p>

<p>On another note, the first part, about writing getters and setters in the naive way, is also explained in Learn you a Haskell > Chapter 8 Making Our Own Types and Typeclasses > Record syntax</p>

<h2>Microservices in Haskell</h2>

<p>I&rsquo;ve read <a href="https://github.com/AlexanderAA/haskell-microservices/blob/gh-pages/haskell-microservices.md">these notes</a> on implementing a microservice in haskell, by <a href="https://github.com/AlexanderAA">AlexanderAA</a></p>

<h2>Overcoming Resistance to Change - Isn&rsquo;t It Obvious?</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=hcz1aZ60k7w">this video</a> in the channel of The World with Theory of Constraints</p>

<h2>Bacon is bad for you</h2>

<p>I&rsquo;ve read <a href="https://speakerdeck.com/garann/bacon-is-bad-for-you">these slides</a>
 on professionalism and the programmer culture, by Garann Means</p>

<h2>Code is a job</h2>

<p>I&rsquo;ve read <a href="https://speakerdeck.com/garann/code-is-a-job">these slides</a>, that are the continuation of &ldquo;Bacon is bad for you&rdquo;, by the same author, Garann Means</p>

<h2>The Great Newline Schism</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/the-great-newline-schism/">this article</a> by Jeff Atwood on the difference in newline character(s)</p>

<h2>Top ten reasons why I won’t use your open source project</h2>

<p>I&rsquo;ve read <a href="https://changelog.com/top-ten-reasons-why-i-wont-use-your-open-source-project/">this article</a> on what&rsquo;s necessary for an open-source project to be usable by others. Written by Adam Stacoviak</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-study in May 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/"/>
    <updated>2015-05-09T16:41:10+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015</id>
    <content type="html"><![CDATA[<p>Update: I&rsquo;ve grouped all small posts related to the self-study from May 2015
into a single post</p>

<h2>Programmer passion considered harmful</h2>

<p>I&rsquo;ve read <a href="https://medium.com/on-coding/programmer-passion-considered-harmful-5c5d4e3a9b28">this article</a> on why programmer passion could be negative. The title is similar to a paper by Dijkstra.</p>

<h2>Software Craftsmanship: Are Bootcamps Enough?</h2>

<p>I&rsquo;ve read <a href="https://www.coursereport.com/blog/software-craftsmanship-are-bootcamps-enough">this article</a> on software craftsmanship, development bootcamps and passion by <a href="https://twitter.com/kauerrolemodel">Ken Auer</a></p>

<h2>Improve your development environments with virtualization</h2>

<p>I have seen this video: <a href="https://www.youtube.com/watch?v=Dg_vPMnC7_k&amp;feature=youtu.be">Improve your development environments with virtualization</a> by Luke Sneeringer.</p>

<p>My notes:</p>

<ul>
<li>development should be exactly like production.</li>
<li>except where it is too painful. there it should be different</li>
</ul>


<h2>Buffer&rsquo;s take on values</h2>

<p>I have found these <a href="http://www.slideshare.net/Bufferapp/buffer-culture-04">values</a>, written by Buffer, very interesting.</p>

<h2>Public static void</h2>

<p>I&rsquo;ve watched this video: <a href="https://www.youtube.com/watch?v=5kj5ApnhPAE">&ldquo;Public, static void&rdquo;</a> by Rob Pike. The slides can be found <a href="http://www.oscon.com/oscon2010/public/schedule/detail/13423">here</a></p>

<h3>My notes</h3>

<ul>
<li>too much bureaucracy</li>
<li>fighting the compiler</li>
<li>dynamic vs static typing</li>
<li>language too verbose</li>
<li><p>do not mix the two of them</p></li>
<li><p>a language niche:</p>

<ul>
<li>comprehensible</li>
<li>statically typed</li>
<li>light on the page</li>
<li>fast to work in</li>
<li>scales well</li>
<li>doesn&rsquo;t require tools but supports them well</li>
<li>good at networking and multiprocessing</li>
</ul>


<p>(minute 10:09)​</p></li>
<li><p><a href="http://golang.org">Go</a> was born to fill this niche</p></li>
</ul>


<h2>Nothing is something</h2>

<p>This video has been extracted to a <a href="../../../../2015/05/04/video-nothing-is-something/">post</a> of its own.</p>

<h2>Software is eating the world</h2>

<p>This video has been extracted to a <a href="../../../../2015/05/10/talk-software-is-eating-the-world/">post</a> of its own.</p>

<h2>The Cost of Test Driven Development</h2>

<p>I&rsquo;ve read <a href="http://blog.typemock.com/2009/03/the-cost-of-test-driven-development.html">this article</a>, on the cost of doing TDD, which refers to <a href="http://www.msr-waypoint.net/en-us/groups/ese/nagappan_tdd.pdf">this paper</a>: Realizing quality improvement through test driven development: results and experiences of four industrial teams (below)</p>

<h2>Realizing quality improvement through test driven development: results and experiences of four industrial teams</h2>

<p>This paper has been extracted to a <a href="../../../../2015/05/12/paper-tdd-in-industrial-teams/">post</a> of its own.</p>

<h2>Learn You Some Lisp for Great Good</h2>

<p>I&rsquo;ve watched the video <a href="https://www.youtube.com/watch?v=3T00X_sNg4Q">Learn You Some Lisp for Great Good</a>, by Howard Abrams.</p>

<p>I guess this is a reference to the popular <a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good!</a>.</p>

<p>He suggests many interesting resources for learning Lisp dialects. The live coding is in Clojure:</p>

<ul>
<li><a href="http://landoflisp.com/">The land of Lisp</a></li>
<li><a href="https://mitpress.mit.edu/sicp/">Structure and Interpretation of Computer Programs</a>. See also <a href="https://twitter.com/SICPQuotes">SICPQuotes</a></li>
<li><a href="http://mitpress.mit.edu/books/little-schemer">The Little Schemer</a></li>
<li><a href="https://www.gnu.org/software/emacs/manual/pdf/eintr.pdf">An Introduction to Programming in Emacs Lisp</a></li>
<li><a href="https://www.4clojure.com/">4clojure Questions</a></li>
<li><a href="http://clojurekoans.com/">Clojure Koans</a></li>
</ul>


<p>On another topic, in the <a href="http://www.meetup.com/ClojureBCN/events/222418104/">Bank accounts exercise from Exercism</a> meetup, we discussed the book <a href="https://pragprog.com/book/shcloj2/programming-clojure">Programming Clojure (2nd edition)</a> by Stuart Halloway</p>

<h2>Professor Frisby&rsquo;s Mostly Adequate Guide to Functional Programming</h2>

<p>I&rsquo;ve read <a href="https://github.com/DrBoolean/mostly-adequate-guide">this guide</a> to functional programming. It is still work in progress (WIP) but still interesting. Written in javascript, so you can REPL in the browser.</p>

<h2>Learning Code Good</h2>

<p>I&rsquo;ve watched this video, by Saron Yitbarek: <a href="https://www.youtube.com/watch?v=-nsnAYRqYLA">Learn Code Good</a>.</p>

<h2>Why You Don&rsquo;t Get Mock Objects</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=R9FOchgTtLM">Why You Don&rsquo;t Get Mock Objects</a>, by Gregory Moeck.</p>

<p>In it, they point to the <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> book (<a href="/blog/categories/goos">category here</a>), the paper <a href="www.jmock.org/oopsla2004.pdf">Mock Roles, not Objects</a> (also present in the GOOS book).</p>

<h2>Technical Debt: A Repayment Plan</h2>

<p>I&rsquo;ve read <a href="http://www.infoq.com/articles/tech-debt-repayment">this article</a> by <a href="https://twitter.com/@jeremyjarrell">Jeremy Jarrell</a> on technical debt how to repay it: schedule, taxes, default, etc</p>

<p>This has made me think of the <a href="http://scbcn.ideascale.com/a/dtd/Deuda-t%C3%A9cnica-origen-y-consecuencias/69782-25568">&ldquo;Deuda técnica, origen y consecuencias&rdquo; talk</a> (Technical debt: origin and consequences) (Spanish), that was delivered by <a href="https://twitter.com/@jgomezz">Javier Gómez</a> at the Software Craftsmanship 2014.</p>

<h2>Revisiting XP: be a thoughtful programmer by exercising more collective ownership</h2>

<p>I&rsquo;ve read <a href="http://www.infoq.com/articles/revisit-p-collective">this article</a> by <a href="https://twitter.com/tiagooo_romero">Tiago Garcia</a> on the collective code ownership, as stated by Xtreme Programming (XP), with some example and guidelines.</p>

<h2>Where&rsquo;s the Real Bottleneck in Scientific Computing?</h2>

<p>I&rsquo;ve read <a href="http://www.americanscientist.org/issues/pub/wheres-the-real-bottleneck-in-scientific-computing/99999">this article</a> by Greg Wilson on the tools and procedures investigators use to produce software.</p>

<h2>Testing inside the Sprint</h2>

<p>I&rsquo;ve read <a href="http://ronjeffries.com/articles/2015-03-01-testing-in-sprints/">this article</a> by Ron Jeffries.</p>

<p>Discusses the need for testing and why this hasn&rsquo;t been communicated enough, as there still are people who have not understood it.</p>

<p>Also about why people equal something failing when using scrum with scrum failing.</p>

<h2>DTO vs Domain Models</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/05/dto-vs-domain-models/">this article</a> by Carlos Blé</p>

<h2>Homoiconicity isn’t the point</h2>

<p>I&rsquo;ve read <a href="http://calculist.org/blog/2012/04/17/homoiconicity-isnt-the-point/">this article</a> by David Herman about homoiconicity, comparing Lisp dialects (have it) to others that don&rsquo;t. The main point is at the end, where it says:</p>

<blockquote><p>[&hellip;] homoiconicity isn’t the point, read is</p></blockquote>

<h2>So You Don&rsquo;t Want to be a Programmer After All</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/so-you-dont-want-to-be-a-programmer-after-all/">this article</a> by Jeff Atwood. Cites the golden handcuffs (also known as golden shackles), reasons to be and not to be a programmer, and how to be an average and outstanding programmer</p>

<h2>The Nature of Lisp</h2>

<p>I&rsquo;ve read <a href="http://www.defmacro.org/ramblings/lisp.html">this article / introduction</a> to Lisp by Slava Akhmechet</p>

<h2>[David Pollak&rsquo;s] My Thoughts on Go</h2>

<p>I&rsquo;ve read <a href="http://blog.goodstuff.im/golang">these comments</a> on Go Lang from David Pollak</p>

<h2>The Well-Rounded Technologist</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/04/02/the-well-rounded-technologist.html">this article</a> by Michael Bernstein</p>

<h2>Should I read papers?</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/10/21/should-i-read-papers.html">this article</a> by Michael Bernstein</p>

<h2>Lisp-1 vs Lisp-2</h2>

<p>I&rsquo;ve read <a href="https://hornbeck.wordpress.com/2009/07/05/lisp-1-vs-lisp-2/">this article</a> by <a href="https://twitter.com/hornbeck">@Hornbeck</a> about the lisp 1 and lisp 2.</p>

<h2>Science Corps</h2>

<p>I&rsquo;ve watched this <a href="https://www.youtube.com/watch?v=dkQkafxFoIQ">TEDx talk</a> by Aza Raskin, featuring Data Banks and Science corps</p>

<h2>Healthy Codebase and Preparatory Refactoring</h2>

<p> I&rsquo;ve read <a href="http://brewhouse.io/blog/2014/11/10/healthy-codebase-and-preparatory-refactoring.html">this article</a> by Philippe Creux about preparatory refactoring</p>

<h2>You Are Learning Haskell Right Now (Or Anything You Want Really)</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/12/11/you-are-learning-haskell-right-now.html">this article</a> by Michael Bernstein</p>

<h2>Lisp is Abstract Syntax</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/04/16/lisp-is-abstract-syntax.html">this article</a> by Michael Bernstein</p>

<h2>Two Things Types Have Taught Me</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/10/30/two-things-types-have-taught-me.html">this article</a> by Michael Bernstein</p>

<h2>Don&rsquo;t Bet Against Yourself</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html">this article</a> by Michael Bernstein</p>

<h2>Learning Math: A Blank Is A Blank With A Blank</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html">this article</a> by Michael Bernstein</p>

<h2>The False Economy Of Metaprogramming</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2015/03/06/the-false-economy-of-generated-methods.html">this article</a> by Michael Bernstein</p>

<h2>Management and Engineering, overlapping</h2>

<p>I&rsquo;ve read <a href="http://www.quora.com/Does-Adam-DAngelo-feel-comfortable-with-the-transition-from-an-engineer-to-a-management-position?srid=3OC&amp;share=1">this Quora answer</a> by Adam D&#8217;Angelo. The original title is: Does Adam D&#8217;Angelo feel comfortable with the transition from an engineer to a management position?</p>

<h2>Evolution of The Twitter Stack</h2>

<p>I&rsquo;ve read <a href="https://www.slideshare.net/slideshow/embed_code/key/ly83zQkBjCxnIX">these slides</a> about changing the technology stack in Twitter: from Rails to JVM-based</p>
]]></content>
  </entry>
  
</feed>
