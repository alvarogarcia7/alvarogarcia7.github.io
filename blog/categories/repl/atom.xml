<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Repl | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/repl/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2016-01-06T00:37:30+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Validating CSV Data in Clojure]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/12/15/validating-data-clojure/"/>
    <updated>2015-12-15T10:52:28+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/12/15/validating-data-clojure</id>
    <content type="html"><![CDATA[<p>At a client, we have CSVs of data that can be simplified to this <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:</p>

<pre><code class="lisp">(def data [
           ["total" 6 8 13]
           ["0"     1 2 3]
           ["0"     2 0 4]
           ["0"     3 0 6]
          ])
</code></pre>

<p>In this case, some of the row named <code>total</code> is the sum of the rest of the rows, but only for some columns (second and fourth). We do not want to get rid of the columns, as they need to be printed at the end.</p>

<p>This is what we need to validate:</p>

<p><code>sum (rest [1]) = total [1]</code></p>

<p><code>sum (rest [3]) = total [3]</code></p>

<p>this could be written as a one-off program but a better alternative for us was to write a program and let users decide what columns to validate. In the future, power users will write their own validations <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, thus creating an environment where users are no longer dependent on programmers as coupling business users to programmers does not scale.</p>

<p></p>

<h2>Implementation</h2>

<p>The full <a href="https://github.com/alvarogarcia7/clojure-simple-sessions/blob/master/test/simple/check-data-with-hofs.clj">source code is here</a></p>

<pre><code class="lisp">(defn sum-eq-total [selector dataset]
  (letfn [(total-and-rest [coll]
             [(first coll) (rest coll)])]
  (let [[total rest-dataset] (total-and-rest dataset)
        selected-total (selector total)
        selected-column (map selector rest-dataset)
        sum-of-column (reduce + selected-column)]
        (= selected-total sum-of-column))))

(defn validate-columns [indices data]
  (let [generate-selector #(fn [dataset] (nth dataset %))
         selectors (map generate-selector indices)
         check-selector #(sum-eq-total % data)]
         (map check-selector selectors)))
</code></pre>

<p>We define the domain concept of <code>selector</code> for pointing to a dataset column</p>

<pre><code class="lisp">generate-selector #(fn [dataset] (nth dataset %))
</code></pre>

<p>This expression creates selectors based on a given index. It is a lambda that returns a function, thus being a HOF</p>

<p>Users can use the application in this fashion:</p>

<pre><code class="lisp">simple.core=&gt; (validate-columns [1 3] data)
(true true)
</code></pre>

<p>The full <a href="https://github.com/alvarogarcia7/clojure-simple-sessions/blob/master/test/simple/check-data-with-hofs.clj">source code is here</a></p>

<h2>Conclusion</h2>

<p>Working on the REPL for this problem has been a very good idea, but working in a spreadsheet software has been even better. Even faster feedback cycle <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<p>The inclusion of the HOF for validating the data has paid its cost (good RoI)</p>

<p>Do not limit what your users can do, let them decide but do not complicate things unnecessarily. Know when to stop adding features and limit work to prevent YAGNI.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>for more information and a spike on reading CSV data in clojure, <a href="https://github.com/alvarogarcia7/clojure-simple-sessions/blob/master/src/simple/check-media-csv.clj">this spike</a> may be useful<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>for the time being, there are no power users and no need to enable these custom validators. Doing it now would be YAGNI<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>in the case here, the data and business rules are so simple that there is no need for this software.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure and the Macro And]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/12/08/clojure-and-the-macro-and/"/>
    <updated>2015-12-08T15:37:28+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/12/08/clojure-and-the-macro-and</id>
    <content type="html"><![CDATA[<p>While on the REPL, I tried this:</p>

<pre><code class="lisp">simple.core=&gt; (reduce and true [true])
CompilerException java.lang.RuntimeException: Can't take value of a macro: #'clojure.core/and, compiling:(form-init7116694665186998245.clj:1:1)
</code></pre>

<p>Reading the <a href="https://clojuredocs.org/clojure.core/and">clojuredocs for <code>and</code></a>, you can find this:</p>

<blockquote><p>Note add is a macro, so you cannot apply it. For example, there is a vector of some Boolean values [true true false true], which you want to test to see if they are all true. The code below will not work:</p>

<p>(apply add [true true false true]) ;won&rsquo;t work</p>

<p>Instead, use this:</p>

<p>(every? identity [true  true false true])</p></blockquote>

<p>I tried it with success. Digging a bit deeper:</p>

<pre><code class="lisp">simple.core=&gt; (defn all-truthy? [&amp; elements] (every? identity elements))
#'simple.core/all-truthy?
simple.core=&gt; (all-truthy? nil false)
false
simple.core=&gt; (all-truthy? nil 0)
false
simple.core=&gt; (all-truthy? nil 1)
false
simple.core=&gt; (all-truthy? 2 1)
true
simple.core=&gt; (all-truthy? [nil false])
true
</code></pre>

<p>Was also tempted to try this:</p>

<pre><code class="lisp">simple.core=&gt; (reduce (fn [acc element] (and acc element)) true [true true false true])
false
simple.core=&gt; (reduce (fn [acc element] (and acc element)) true [true true true true])
true
</code></pre>

<p>Encapsulate it into a function:</p>

<pre><code class="lisp">simple.core=&gt; (defn all-true [&amp; elements] (reduce (fn [acc element] (and acc element)) true elements))
#'simple.core/all-true
simple.core=&gt; (all-true true)
true
simple.core=&gt; (all-true true false)
false
simple.core=&gt; (all-true true false true)
false
</code></pre>

<p>What happens with the non-boolean values?</p>

<pre><code class="lisp">simple.core=&gt; (all-true 1 2 3)
3
simple.core=&gt; (all-true 1 2 3 76)
76
simple.core=&gt; (all-true 1 2 3 64)
64
simple.core=&gt; (all-true 1 2 3 64)
64
</code></pre>

<p>This is because:</p>

<pre><code class="lisp">simple.core=&gt; (and 64 3)
3
simple.core=&gt; (and 3 64)
64
</code></pre>

<h2>Conclusion</h2>

<p><code>all-truthy?</code> exploits the falsy values in clojure (<code>nil</code>, <code>false</code>), while <code>all-true</code> uses the true boolean values, although the function does not work properly with non-boolean values (i.e. its domain is the booleans)</p>

<h2>Appendix A: Source code</h2>

<p><code>and</code>:</p>

<pre><code class="lisp">simple.core=&gt; (source and)
(defmacro and
  "Evaluates exprs one at a time, from left to right. If a form
  returns logical false (nil or false), and returns that value and
  doesn't evaluate any of the other expressions, otherwise it returns
  the value of the last expr. (and) returns true."
  {:added "1.0"}
  ([] true)
  ([x] x)
  ([x &amp; next]
   `(let [and# ~x]
      (if and# (and ~@next) and#))))
</code></pre>

<p><code>identity</code>:</p>

<pre><code class="lisp">simple.core=&gt; (source identity)
(defn identity
  "Returns its argument."
  {:added "1.0"
   :static true}
  [x] x)
</code></pre>

<p><code>every</code>:</p>

<pre><code class="lisp">simple.core=&gt; (source every?)
(defn every?
  "Returns true if (pred x) is logical true for every x in coll, else
  false."
  {:tag Boolean
   :added "1.0"
   :static true}
  [pred coll]
  (cond
   (nil? (seq coll)) true
   (pred (first coll)) (recur pred (next coll))
   :else false))
</code></pre>

<p><code>-&gt;</code>:</p>

<pre><code class="lisp">simple.core=&gt; (source -&gt;)
(defmacro -&gt;
  "Threads the expr through the forms. Inserts x as the
  second item in the first form, making a list of it if it is not a
  list already. If there are more forms, inserts the first form as the
  second item in second form, etc."
  {:added "1.0"}
  [x &amp; forms]
  (loop [x x, forms forms]
    (if forms
      (let [form (first forms)
            threaded (if (seq? form)
                       (with-meta `(~(first form) ~x ~@(next form)) (meta form))
                       (list form x))]
        (recur threaded (next forms)))
      x)))
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Study in September 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015/"/>
    <updated>2015-09-01T13:25:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015</id>
    <content type="html"><![CDATA[<h2>The 30 second habit with a lifelong impact</h2>

<p>I&rsquo;ve read <a href="https://blog.growth.supply/the-30-second-habit-with-a-lifelong-impact-2c3f948ead98">this article</a> list of patterns, by Robyn Scott, in which it is explained why to compress information in a few ideas, investing 30 seconds to condense the article.</p>

<p>Tags: 30-second, habit, robyn-scott</p>

<h2>The Strengths and Weaknesses of Extreme Programming</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=LkhLZ7_KZ5w">this video</a> explaining the strengths and weaknesses of extreme programming. By William Matheson</p>

<p>Tags: extreme-programming, xp, william-matheson, video, strength, weakness</p>

<h2>Poster de Extreme Programming</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=4nN6Gh79Yg8">this video</a> introducing eXtreme Programming. By Martín Salías</p>

<p>Tags: martin-salias, kleer, extreme-programming, xp</p>

<h2>Good Tech Lead, Bad Tech Lead</h2>

<p>I&rsquo;ve read <a href="https://blog.growth.supply/good-tech-lead-bad-tech-lead-948b2b806d86">this comparison</a> of good and bad traits in tech leads. By Jason Liszka.</p>

<p>Explains the differences between good and bad tech leads, even though many of these qualities are shared by plain team members</p>

<p>Tags: jason-liszka, tech-lead, comparison</p>

<h2>Why Procrastinators Procrastinate</h2>

<p>I&rsquo;ve read <a href="http://waitbutwhy.com/2013/10/why-procrastinators-procrastinate.html">this article</a> by Tim Urban on procrastination: this article compares the procrastinator and the non-procrastinator brain with pictures, introducing the Rational part, the Instant Gratification Monkey and the Panic Monster. Shows some reasons why.</p>

<p>There is more on part 2: <a href="http://waitbutwhy.com/2013/11/how-to-beat-procrastination.html">How to beat procrastination</a></p>

<p>Tags: tim-urban, procrastination, rational-part, instant-gratification-monkey, panic-monster, brain, comparison</p>

<h2>Algebraic data type</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Algebraic_data_type">this wikipedia page</a>, that explains what this is, a few examples and the theory behind it.</p>

<p>Tags: wikipedia, data-type, algebraic-data-type</p>

<h2>Recursion</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)">this wikipedia page</a>, that explains the recursion basic concepts, such as:</p>

<ul>
<li>induction, coinduction</li>
<li>recursion, corecursion</li>
<li>implementation details in iterative vs recursive programs:

<ul>
<li>shortcutting recursion (i.e., arm-length&rsquo;s recursion)</li>
<li>wrapper function</li>
<li>tail-call optimization, related to tail-recursive functions</li>
</ul>
</li>
<li>recursion and its relation to data structures</li>
<li>base case / recursive case and removing the need of the base one in corecursion or in non-strict languages</li>
<li>types of recursion:

<ul>
<li>direct, indirect, mutual</li>
<li>generative, structural</li>
</ul>
</li>
</ul>


<p>Tags: recursion, corecursion, induction, coinduction, tail-call-optimization, tail-recursion, direct-recursion, indirect-recursion, mutual-recursion, generative-recursion, structural-recursion, arm-length-recursion, iterative-function, recursive-function, base-case, recursive-case, wikipedia, data-structure</p>

<h2>Anonymous function</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Anonymous_function">this wikipedia page</a>, that describes what is a lambda expression or an anonymous function. How it can be used (e.g., currying, higher-order function, closures) and gives examples in many languages.</p>

<p>Cites its invention (Church, 1936, lambda-calculus) and its first implementation (Lisp, 1958)</p>

<p>Tags: alonzo-church, anonymous-function, lambda-expression, closure, lambda-calculus, lisp, currying, higher-order-function, wikipedia</p>

<h2>Closure</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)">this wikipedia page</a>, that explains the concept of closures and the usual confusion between closure and lambda. Also some applications.</p>

<p>Discusses closures as a way of deferring execution and implementing object-oriented (OO) systems</p>

<p>Tags: wikipedia, closure, object-orientation, lambda-expression</p>

<h2>Zen Story: The Master Archer</h2>

<p>I&rsquo;ve read <a href="http://www.thedailyzen.org/2015/06/23/zen-story-the-master-archer/">this story</a> by Charlie Ambler about perfectionism and deep study, exemplified by the general that retires to study archery and the child who draws targets around the arrows.</p>

<p>Tags: charlie-amber, master, student, zen, story</p>

<h2>Loosely Coupled</h2>

<p>I&rsquo;ve read <a href="http://blog.bwhaley.com/loosely-coupled">this article</a> by Ben Whaley about how to loosely couple services introducing a queue and the difference in patterns between push and pull communication.</p>

<p>Tags: ben-whaley, push, pull, coupling, loose-coupling, service, queue, aws</p>

<h2>Being good at programming competitions correlates negatively with being good on the job</h2>

<p>I&rsquo;ve watched the small video and the discussion about programmers' talent at <a href="http://www.catonmat.net/blog/programming-competitions-work-performance/">this page</a>. By Peteris Krumins.</p>

<p>The original video explains that being good at a programming contest correlates negatively with skill at a programming job, even if the company hires them.</p>

<p>The discussion explains the analogy with height and the NBA and concludes that this parameter should be preponderated with less importance than others.</p>

<p>Tags: google, peter-norvig, nba, analogy, programming-contest, programming-skill, peteris-krumins</p>

<h2>On Functors</h2>

<p>I&rsquo;ve read <a href="http://www.catonmat.net/blog/on-functors/">this comparison</a> by Peteris Krumins of what the functors are in different languages:</p>

<ul>
<li>C++: function objects</li>
<li>Standard ML: generic implementation of interfaces. They allow to compose structures</li>
<li>Haskell: structure containing zero or more objects that can be converted to another structure containing the other objects. It&rsquo;s an homomorphism between two categories.</li>
<li>Prolog: built-in predicate for self-inspection and the atom at the start of the structure</li>
</ul>


<p>Tags: peteris-krumins, comparison, haskell, c-plus-plus, standard-ml, prolog, functor</p>

<h2>Recursive Regular Expressions</h2>

<p>I&rsquo;ve read <a href="http://www.catonmat.net/blog/recursive-regular-expressions/">this article</a> on recursive regular expressions by Peteris Krumins.</p>

<p>In it, he lightly describes how a regular expression relates to a <a href="https://en.wikipedia.org/wiki/Context-free_grammar">Context-Free Grammar</a> and the language support for Perl to include recursive regular expressions. Based on the examples (e.g., <code>0^n1^n</code>), it really clicked to me that this could be expressed as a recursive function, with its base case and the recursive one. Also that it &ldquo;depends on solutions to smaller instances of the same problem&rdquo; (<a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)">wikipedia</a>)</p>

<p>Tags: peteris-krumins, regular-expression, recursion, recursive-regular-expression, perl, context-free-grammar, formal-language-theory</p>

<h2>In Functional Programming, what is a functor?</h2>

<p>I&rsquo;ve read <a href="http://stackoverflow.com/questions/2030863/in-functional-programming-what-is-a-functor/2031421#2031421">this answer</a>, by Norman Ramsey, on what is a functor.</p>

<p>He explains in simple words what the concept is and how a type can belong to the class functor. Examples in haskell.</p>

<p>Tags: norman-ramsey, functor, stack-overflow, haskell, type-class, class, map, fmap</p>

<h2>Functors</h2>

<p>I&rsquo;ve read <a href="http://www.clojure.net/2013/01/19/Functors/">this article</a> by Jim Duey explaining functors in Clojure. He introduces a couple of notes of Haskell but all of the examples are in Clojure. Explains functors, a subset of it called applicatives, and the two libraries he has created.</p>

<p>Tags: jim-duey, functor, clojure, haskell</p>

<h2>10 Tips for Proper Application Logging</h2>

<p>I&rsquo;ve read <a href="http://www.javacodegeeks.com/2011/01/10-tips-proper-application-logging.html">this article</a> by Tomasz Nurkiewicz about tips on logging:</p>

<ul>
<li>reduce side effects</li>
<li>use categories and levels</li>
<li>connection with external systems</li>
<li>handling exceptions</li>
<li>automatically / manually reading logging files</li>
</ul>


<p>Tags: tomasz-nurkiewicz, logging, sl4j, log4j, tip</p>

<h2>What is &ldquo;duck typing&rdquo;?</h2>

<p>I&rsquo;ve read <a href="http://ericlippert.com/2014/01/02/what-is-duck-typing/">this article</a> by Eric Lippert about duck typing</p>

<p>Tags: duck-typing, eric-lippert, type-system, c-sharp</p>

<h2>Yagni</h2>

<p>I&rsquo;ve reread <a href="http://martinfowler.com/bliki/Yagni.html">this article</a> by Martin Fowler on the cost of developing features that are not needed</p>

<p>Tags: martin-fowler, yagni, article, misunderstanding</p>

<h2>Learn Haskell</h2>

<p>I&rsquo;ve seen <a href="https://www.youtube.com/watch?v=JJlI5FPTbgE">this video</a> by Jordan Medlock on learning haskell, explaining the basics and how to use the REPL</p>

<p>Tags: haskell, repl, jordan-medlock, beginner, video</p>

<h2>Learn Haskell</h2>

<p>I&rsquo;ve seen <a href="https://www.youtube.com/watch?v=JJlI5FPTbgE">this video</a> by Jordan Medlock on learning haskell, explaining the basics and how to use the REPL</p>

<p>Tags: haskell, repl, jordan-medlock, beginner, video</p>

<h2>TMUX - The Terminal Multiplexer</h2>

<p>I&rsquo;ve read these two parts: (<a href="http://blog.hawkhost.com/2010/06/28/tmux-the-terminal-multiplexer/">one</a>, <a href="http://blog.hawkhost.com/2010/07/02/tmux-%E2%80%93-the-terminal-multiplexer-part-2">two</a>) of an introduction guide to <code>tmux</code> (the unix terminal multiplexer) by Cody from Hawk Host.</p>

<p>In it, he explains the basics of tmux and the main differences with <code>screen</code></p>

<p>Tags: cody, hawk-host, tmux, how-to</p>

<h2>Thermodynamics and Garbage Collection</h2>

<p>I&rsquo;ve read <a href="http://www.pipeline.com/~hbaker1/ThermoGC.html">this paper</a> by Henry G. Baker that explains the analogy of the garbage collection (&ldquo;a freezer&rdquo;) and thermodynamics, where the state mutator (th program, also an oven) modifies the garbage heap and introduces / extracts entropy into the system.</p>

<p>Comparison between entropy and lack of information, using the theories from Shannon, Maxwell-Boltzmann. There&rsquo;s a reference to the knapsack problem and to simulated annealing.</p>

<p>There&rsquo;s also a gentle introduction to thermodynamics in layman terms: heat, temperature, microstates, macrostates, reversability, etc.</p>

<p>In this paper it is also reflected (in macro vs micro states) that the sum all parts is simpler than the single ones (i.e., Information Hiding)</p>

<p>Tags: henry-baker, thermodynamics, microstate, macrostate, analogy, simulated-annealing, garbage-collection, shannon, information, maxwell-boltzmann, freezer, oven, entropy</p>

<h2>How we ended up with microservices</h2>

<p>I&rsquo;ve read <a href="http://philcalcado.com/2015/09/08/how_we_ended_up_with_microservices.html">this article</a>, by Phil Calçado, where he talks about his stay at SoundCloud:</p>

<ul>
<li>the value stream map: from X days to Y</li>
<li>reorganizing teams into service teams</li>
<li>conway&rsquo;s law and teams being responsible for support. Also, being given full authority</li>
</ul>


<p>  Tags: phil-calcado, soundcloud, microservice, team-split, value-stream-mapping, conversion, reorganization</p>

<h2>Lisp is still a secret weapon</h2>

<p>I&rsquo;ve read <a href="http://kep.io/is-lisp-still-a-secret-weapon/">this article</a> by Judd Keppel where he explains it is a good idea that Clojure / ClojureScript continues to be a secret, not known among developers. Cites the article &lsquo;Beating the averages&rsquo; by Paul Graham and the amount of available packages in npm, maven central, etc</p>

<p>Tags: paul-graham, judd-keppel, clojure, clojurescript, weapon, developer</p>

<h2>Perceptron</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Perceptron">this wikipedia</a> article that explains the single-layer and multi-layer perceptron. First designed to be a machine (hardware), but later an algorithm for supervised machine learning. Worked by Minsky &amp; Papert and invented by Frank Rosenblatt in 1958.</p>

<p>Tags: peceptron, artificial-intelligence, machine-learning, frank-rosenblatt, 1958, marvin-minsky, seymour-papert</p>

<h2>Is C# a strongly typed or a weakly typed language?</h2>

<p>I&rsquo;ve read <a href="http://ericlippert.com/2012/10/15/is-c-a-strongly-typed-or-a-weakly-typed-language/">this article</a>, in the form of a dialogue between Eric Lippert and himself about the C# language and its type system.</p>

<p>Tags: type-system, c-sharp, eric-lippert, dialogue, strongly-typed, weakly-typed, language</p>

<h2>Diseño por contratos: construyendo software confiable</h2>

<p>I&rsquo;ve read <a href="http://www.revista.unam.mx/vol.4/num5/art11/sep_art11.pdf">this paper</a> that explains design by contract, based on the Hoare triplet, pre-post condition, method and class invariant. With examples in Eiffel, Java about a package sender company. Also explains pre/post with inheritance. By Gerardo Rossel and Andrea Manna. In Spanish.</p>

<p>Tags: gerardo-rossel, andrea-manna, design-by-contract, unam-mx, eiffel, java, precondition, postcondition, trust, quality, hoare-triplet, method-invariant, class-invariant</p>

<h2>The Inevitable Return of COBOL</h2>

<p>I&rsquo;ve read <a href="http://blog.hackerrank.com/the-inevitable-return-of-cobol/">this article</a> that explains the current state of COBOL in programming and systems. Written by Ritika Trikha</p>

<p>Tags: ritika-trikha, cobol, programming-language, retirement, median-age</p>

<h2>The Risky Eclipse of Statisticians</h2>

<p>I&rsquo;ve read <a href="http://blog.hackerrank.com/the-risky-eclipse-of-statisticians/">this article</a> where Ritika Trikha explains the current situation regarding Big Data and the statiscian jobs. How Big Data is in demand but the latter are not and what effects this might have.</p>

<p>Tags: ritika-trikha, bootcamp, programming, hiring, big-data, analysis, statistics</p>

<h2>Give it five minutes</h2>

<p>I&rsquo;ve read <a href="https://signalvnoise.com/posts/3124-give-it-five-minutes">this article</a> by Jason Fried where he explains why we should give ideas time to sink in and marinate, before dismissing them. Ideas are so fragile that it is better to let them live for a while before dismissing them. This also applies for thoughts (other people&rsquo;s or your own).</p>

<p>Tags: jason-fried, idea, think, startup, blue-hat, thinking-hat,  six-thinking-hats, red-hat</p>

<h2>Reading Clojure Stacktraces</h2>

<p>I&rsquo;ve read <a href="http://blog.jayfields.com/2012/06/reading-clojure-stacktraces.html">this article</a> by Jay Fields on reading clojure stacktraces. Very similar to &ldquo;Clojure Stack Traces for the Uninitiated&rdquo;</p>

<p>Tags: jay-fields, clojure, stacktrace</p>

<h2>Clojure Stack Traces for the Uninitiated</h2>

<p>I&rsquo;ve read <a href="https://blog.8thlight.com/connor-mendenhall/2014/09/12/clojure-stacktraces.html">this article</a> on how to interpret clojure stacktraces. Written by Connor Mendenhall</p>

<p>Tags: connor-mendenhall, clojure, stacktrace</p>

<h2>JavaScript type inference</h2>

<p>I&rsquo;ve found (and played) with <a href="http://www.ccs.neu.edu/home/dimvar/jstypes.html">this JavaScript type inference engine</a>. Written in Javascript (and available online). Written by Dimitrios Vardoulakis.</p>

<p>Tags: javascript-type-inference, type-inference, type-inference-algorithm, dimitrios-vardoulakis, cfa2</p>

<h2>Alternatives to boolean parameters</h2>

<p>I&rsquo;ve read <a href="https://blog.8thlight.com/dariusz-pasciak/2015/05/28/alternatives-to-boolean-parameters.html">this article</a> explaining alternatives to sending a boolean parameter to decide on the contents of the function. Written by Dariusz Pasciak</p>

<p>As I heard some time ago, if a function receives a boolean to decide on what to do, it will for sure have more than one responsibility: one for the false value and one for the true value.</p>

<p>Tags: dariusz-pasciak, boolean, srp, boolean-parameter</p>

<h2>Why Are Web Uploads So Painful?</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/why-are-web-uploads-so-painful/">this article</a> on web uploads being painful. By Jeff Atwood. The screenshots feel old (2007) and some of the problems have already been solved.</p>

<p>Tags: jeff-atwood, article, upload, browser</p>

<h2>Can Your Team Pass The Elevator Test?</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/can-your-team-pass-the-elevator-test/">this article</a> on the elevator test by Jeff Atwood.</p>

<p>Tags: jeff-atwood, article, elevator-test, assumption, microsoft-bob, vision, product, feature</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brown-bag Session and Dojo: Beginning Clojure]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/08/04/brown-bag-session-and-dojo-beginning-clojure/"/>
    <updated>2015-08-04T23:14:14+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/08/04/brown-bag-session-and-dojo-beginning-clojure</id>
    <content type="html"><![CDATA[<p>At a client, today I&rsquo;ve facilitated a brown-bag session introducing the Clojure language to a group of java programmers.</p>

<p>I&rsquo;ve started hands-on, live coding on a REPL. To make things easier, I&rsquo;ve created a maven project that imports the clojure jar and lets you obtain dependencies from clojars. The repo is <a href="https://github.com/alvarogarcia7/clojure-for-java-devs">here</a>. This repo wouldn&rsquo;t have been possible without the <a href="https://github.com/talios/clojure-maven-plugin">clojure maven plugin</a>, written by Mark Derricutt.</p>

<p>I&rsquo;ve more or less followed <a href="https://github.com/alvarogarcia7/clojure-for-java-devs/blob/master/guide.md">this guide</a></p>

<p>We&rsquo;ve also practiced, using a dojo in clojure, the fizzbuzz kata.</p>

<p>There is a sample implementation in the same repo, <a href="https://github.com/alvarogarcia7/clojure-for-java-devs/tree/sample-implementation/src">this folder</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resources for Java 9 (Beta)]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/08/02/resources-for-java-9-beta/"/>
    <updated>2015-08-02T23:49:30+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/08/02/resources-for-java-9-beta</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve found this list of links for Java 9, while in beta, useful:</p>

<ul>
<li><a href="https://wiki.openjdk.java.net/display/Adoption/JDK+9+Outreach">Contents of the new version</a></li>
<li><a href="http://www.meetup.com/Londonjavacommunity/events/221570203/">Java REPL workshop</a>, with useful commands and questions &amp; answers for installing the REPL</li>
<li><a href="https://java.net/downloads/adoptopenjdk/REPL_Tutorial.pdf">REPL tutorial PDF</a></li>
<li>Another <a href="http://www.jclarity.com/2015/04/15/java-9-repl-getting-started-guide/">getting started guide</a>, by JClarity</li>
<li>Yet another <a href="http://blog.arungupta.me/jdk9-repl-getting-started/">getting started guide</a>, by Arun Gupta</li>
<li><a href="http://www.infoq.com/news/2014/09/repl-for-java">Information on the REPL project</a>, (codenamed Kulla)</li>
</ul>

]]></content>
  </entry>
  
</feed>
