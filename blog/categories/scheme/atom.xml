<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scheme | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/scheme/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2016-05-23T09:45:11+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Self-Study in March 2016]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/"/>
    <updated>2016-03-02T10:58:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016</id>
    <content type="html"><![CDATA[<h2>Learning Programming Isn’t That Hard, Deep Work Is Hard</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@benedictfritz/learning-programming-isn-t-that-hard-deep-work-is-hard-40a4cf3104f4">this article</a> by Benedict Fritz on two types of work (i.e., deep and shallow) and how programming is of the deep type. He links the difficulty of learning to program to the difficulty of practicing deep work.</p>

<p>Tags: analogy, benedict-fritz, deep-work, shallow-work, learn-to-program, psychology</p>

<h2>BeCodeWeek by Yeray Darias</h2>

<p>I&rsquo;ve read <a href="http://developerscookbook.blogspot.com.es/search/label/desk-surfing">this category of posts</a> by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.</p>

<p>Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc</p>

<p>Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis</p>

<h2>BeCodeWeek by Yeray Darias</h2>

<p>I&rsquo;ve read <a href="http://developerscookbook.blogspot.com.es/search/label/desk-surfing">this category of posts</a> by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.</p>

<p>Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc</p>

<p>Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis</p>

<h2>Tracer Bullets</h2>

<p>I&rsquo;ve read <a href="http://c2.com/cgi/wiki?TracerBullets">this page</a> about tracer bullets, an analogy from the military warfare to a software project.</p>

<p>Serves the purpose of adjusting the aim of the cannon to better reach the target.</p>

<p>Tags: analogy, metaphor, warfare, management</p>

<h2>Cohesion - the cornerstone of software design</h2>

<p>I&rsquo;ve read <a href="http://codurance.com/2016/03/03/cohesion-cornerstone-software-design/">this article</a> by Sandro Mancuso on the topic of cohesion. Describes the 7 types of cohesion, as described in Structured Design<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, from worst to best:</p>

<ul>
<li>Coincidental cohesion</li>
<li>Logical cohesion</li>
<li>Temporal cohesion</li>
<li>Procedural cohesion</li>
<li>Communicational/informational cohesion</li>
<li>Sequential cohesion</li>
<li>Functional cohesion</li>
</ul>


<p>and about Design-Level Cohesion:</p>

<ul>
<li>Coincidental relation (R1)</li>
<li>Conditional relation (R2)</li>
<li>Iterative relation (R3)</li>
<li>Communication relation (R4)</li>
<li>Sequential relation (R5)</li>
<li>Functional (R6)</li>
</ul>


<p>Tags: cohesion, codurance, edward-yourdon, larry-constantine, list, sandro-mancuso, software-design, design-level-cohesion, smc-cohesion, dlc-cohesion</p>

<h2>Etsy CTO Q&amp;A: We Need Software Engineers, Not Developers</h2>

<p>I&rsquo;ve read <a href="http://thenewstack.io/etsy-cto-qa-need-software-engineers-not-developers/">this interview</a> with John Allspaw, where they explain the onboarding experience for new hires at Etsy, the DevOps philosophy and the need for engineering skills, more than developer skills. This can be exemplified in the need to know more, defining the boundaries of your job and finding the right tool for the job.</p>

<p>Tags: devops, interview, q-and-a, john-allspaw, etsy, onboarding, hire, team-management, deploy</p>

<h2>Frequency Reduces Difficulty</h2>

<p>I&rsquo;ve read <a href="http://martinfowler.com/bliki/FrequencyReducesDifficulty.html">this article</a> by Martin Fowler on why we should repeat things that are difficult for us:</p>

<ul>
<li>Perfectioning the technique</li>
<li>Internalizing the details</li>
<li>Easing its automation</li>
</ul>


<p>Tags: martin-fowler, automation, process, perfection, internalizing, technique, detail, process-theory, agile</p>

<h2>Lambdas are confusing</h2>

<p>I&rsquo;ve watched this video where Coman Hamilton from JAXenter interviews Dr. Heinz Kabutz about Java&rsquo;s lambda syntax. Cites the problem with exceptions, generics, method overloading.</p>

<p>Tags: java, lambda, coman-hamilton, jaxenter, heinz-kabutz, problem</p>

<p><a href="https://www.youtube.com/watch?v=WcHom1eVhi4&amp;feature=youtu.be">https://www.youtube.com/watch?v=WcHom1eVhi4&amp;feature=youtu.be</a></p>

<h2>El full-stack developer en 2016</h2>

<p>I&rsquo;ve read <a href="http://www.developerdepueblo.com/development/full-stack-developer-2016/">this article</a> by Jose Ignacio Andrés about the job descriptions of 2016.</p>

<blockquote><p>El principal valor de un full-stack es poder simplificar el trabajo a los demás miembros del equipo.</p></blockquote>

<p>My translation:</p>

<blockquote><p>The main value of a full-stack developer is to be able to simplify other teammates' work</p></blockquote>

<p>Tags: teamwork, teammate, fullstack, simplification, work, team-management, jose andres</p>

<h2>I am a software craftsman</h2>

<p>I&rsquo;ve read <a href="http://www.dirv.me/i-am-a-software-craftsman/index.html">this article</a> by Daniel Irvine about calling yourself a craftsman or not. He says that if you adhere to their values, you should.</p>

<p>Tags: craftsmanship, label, daniel-irvine, craftsman, group-belonging</p>

<h2>Teaching Programming Languages in a Post-Linnaean Age</h2>

<p>I&rsquo;ve read <a href="http://cs.brown.edu/~sk/Publications/Papers/Published/sk-teach-pl-post-linnaean/paper.pdf">this paper</a> by Shriram Krishnamurthi where he explains the need for books like <a href="http://www.plai.org/">PLAI</a>:</p>

<ul>
<li>lack of paradigms in new languages, and its separation (or lack of)</li>
<li>design of languages cheaper and cheaper these days</li>
<li>rigor level in publications</li>
<li>inductive and deductive learning</li>
</ul>


<h2>Notes</h2>

<p><code>post-Linnaean</code> refers to the <a href="https://en.wikipedia.org/wiki/Carl_Linnaeus">Carl Linnaeus</a>:</p>

<blockquote><p>He is known as the father of modern taxonomy</p></blockquote>

<p>Tags: inductive-learning, deductive-learning, dsl, domain-specific-language, type-soundness, continuation-style, garbage-collection, reactive-programming, scheme, plai, teaching, programming-language, shriram-krishnamurthi</p>

<h2>Lazy Ruby</h2>

<p>I&rsquo;ve read <a href="http://sonnym.github.io/2014/04/05/lazy-ruby/">this article</a> by sonnym about using ruby&rsquo;s lazy (non-strict) features, detailing an example with Fibonacci&rsquo;s sequence.</p>

<p>Tags: laziness, strictness, non-strictness, ruby, fibonacci, comparison</p>

<h2>Jessica Livingston</h2>

<p>I&rsquo;ve read <a href="http://paulgraham.com/jessica.html">this essay</a> by Paul Graham about his co-founder at the Y-combinator: Jessica Livingston. She was considered the Social Radar at YC</p>

<p>The essay also talks about the non-existent separation between working hours and not and about her implication and personality.</p>

<p>Tags: jessica-livingston, paul-graham, y-combinator, feminism, yc, essay</p>

<h2>Four Laws Of Software Economics (Part 1)</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@RichMironov/four-laws-of-software-economics-part-1-e162aa0ea9e5">this article</a> by Rich Mironov on why the development team will never be big enough (because of economics, because there are more things to be done than time to do them, so we have to prioritize them) and about the communication problems between the dev team and the client(s).</p>

<p>Also talks about the general personality of clients and devs and task prioritization</p>

<p>Tags: exclusive-or, magical-thinking, tnstaafl, management, agile, team, capacity, death-march, estj, intp, software-economics, product-strategy, law-of-ruthless-prioritization, law, rich-mironov, slack, myers-briggs-type</p>

<h2>You Should Take A Codecation</h2>

<p>I&rsquo;ve read <a href="https://robots.thoughtbot.com/you-should-take-a-codecation">this article</a> by Ben Orenstein explaining what is a codecation and what he&rsquo;s done in the two codecations he&rsquo;s taken.</p>

<p>Tags: codecation, ben-orenstein, vacation, holiday, coding, shipping, in-company</p>

<h2>Giving Up on TDD</h2>

<p>I&rsquo;ve read <a href="http://iansommerville.com/systems-software-and-technology/giving-up-on-test-first-development/">this article</a> by Ian Sommerville about the problems he&rsquo;s found while doing TDD, mainly about design, but also about being conservative in the amount of tests you allow yourself to break while refactoring.</p>

<p>Tags: tdd, ian-sommerville, refactoring, problem, design-problem, design, giving-up-tdd</p>

<h2>Giving Up on TDD - answer</h2>

<p>I&rsquo;ve read <a href="http://blog.cleancoder.com/uncle-bob/2016/03/19/GivingUpOnTDD.html">this article</a> by Robert C. Martin on the common issues for people adopting TDD:</p>

<ul>
<li>The Fragile Test Problem</li>
<li>The Design Problem</li>
<li>The Testable Design Problem</li>
<li>The Magic Bullet Problem</li>
</ul>


<p>This article is an answer to another by Ian Sommerville.</p>

<p>Tags: tdd, uncle-bob, robert-martin, adoption, ian-sommerville, fragile-test-problem, giving-up-tdd, design-problem, testable-design-problem, magic-bullet-problem</p>

<h2>Seek out jobs with fast learning cycles</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@sarahtavel/seek-out-jobs-with-fast-learning-cycles-f923c8d8a4be#.7bxx65a4x">this article</a> by Sarah Tavel on learning on the job and how fast these learning cycles can happen at companies at different stages of maturity.</p>

<blockquote><p>So if you’re thinking of changing jobs, or taking your first, my advice: find a place with a fast learning cycle, and a steep learning curve.</p></blockquote>

<p>Tags: learning, job, hypothesis, sarah-tavel, learning-cycle, maturity-level, learning-process, product-management</p>

<h2>Clean Code Vs. Implementation Patterns</h2>

<p>I&rsquo;ve read <a href="http://blog.xebia.com/clean-code-vs-implementation-patterns/">this comparison</a> of Clean Code vs Implementation Pattern books, by Vincent Partington.</p>

<p>In it, the author explains the differences in style in both books, and how they compare to others.</p>

<p>Tags: clean-code, implementation-patterns, comparison, book-review, book-comparison, vincent-partington</p>

<h2>Stuck in Traffic vlog #103 - New Spammer Techniques</h2>

<p>I&rsquo;ve seen <a href="https://www.peerlyst.com/posts/stuck-in-traffic-vlog-103-new-spammer-techniques-j-wolfgang-goerlich">this vlog entry</a> on machines fighting machines (exemplified with the spam producing and filtering) and how some spammers are trying more direct techniques focusing on higher-value targets, sometimes even handcrafting messages and modifying them every few units.</p>

<p>Tags: wolfgang-goerlich, spam, vlog, spammer, machine-learning</p>

<h2>Becoming A Finisher</h2>

<p>I&rsquo;ve read <a href="http://christopherdbui.com/becoming-a-finisher/">this article</a> by Christopher Bui where he explains that projects that are too ambitious stall your productivity and make you lose your focus.</p>

<p>Tags: christopher-bui, pomodoro, time-management, productivity, motivation, ambition, paul-graham, quote</p>

<h2>Hanging around with red-black tree implementations: the beginnings</h2>

<p>I&rsquo;ve read <a href="http://blog.fraixed.es/post/hanging-around-red-black-trees-implementations/">this article</a> by Ivan Fraixedes where he details the progress of implementing a red-black tree, and also his motivation for doing it.</p>

<p>Tags: ivan-fraixedes, red-black-tree, abstract-data-structure, adt, deliberate-practice, pet-project</p>

<h2>Some Tools for Faster Blogging in Octopress</h2>

<p>I&rsquo;ve read <a href="http://dgmstuart.github.io/blog/2015/03/27/some-tools-for-faster-blogging-in-octopress/">this article</a> for tips and tricks on how to blog faster with octopress. Written by Duncan Stuart.</p>

<p>Tags: duncan-stuart, blog, improvement, meta, octopress, tip-and-trick</p>

<h2>The veil of ignorance</h2>

<p>I&rsquo;ve read <a href="http://mrmrs.io/writing/2016/03/23/the-veil-of-ignorance/">this article</a> by Adam Morse on how not being on the top of the skills performance can affect your design and your user experience. Also, references the concept of &ldquo;The Veil of Ignorance&rdquo;, a concept by John Rawls.</p>

<p>Tags: john-rawls, veil-of-ignorance, user-experience, design</p>

<h2>To Smile Again &ndash; Recovering from the paralysis of burnout</h2>

<p>I&rsquo;ve read <a href="https://m.signalvnoise.com/to-smile-again-ae0ba9f2198c">this article</a> by Jamis Buck on his story of burnout, what symptoms had on him and how he got out of it.</p>

<p>Tags: burnout, jamis-buck, psychology, productivity, personal, story, analogy</p>

<h2>Beyond email: could startup Slack change the way you work?</h2>

<p>I&rsquo;ve read <a href="http://www.theguardian.com/technology/2016/mar/25/slack-butterfield-emoji-chat-nasa-harvard-silicon-valley">this article</a> on Slack&rsquo;s office culture, with their diversity, policies and values after a high people growth in a short period of time. By Jemima Kiss</p>

<p>Tags: culture, office-culture, slack, jemima-kiss</p>

<h2>Slack: Work This Way</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@iaintait/slack-work-this-way-9221284472dd">this article</a>, a response to my above read, about the office culture at Slack.</p>

<p>Tags: iain-tait, response, slack, office-culture</p>

<h2>BEM 101</h2>

<p>I&rsquo;ve read <a href="https://css-tricks.com/bem-101/">this introduction</a> to a CSS style called Block, Element, Modifier methodology (BEM).</p>

<p>In it,</p>

<blockquote><ul>
<li>a block is a top-level abstraction of a new component</li>
<li>Child items, or elements, can be placed inside and these are denoted by two underscores following the name of the block [&hellip;].
modifiers can manipulate the block so that we can theme or style that particular component without inflicting changes on a completely unrelated module. This is done by appending two hyphens to the name of the block [&hellip;].</li>
</ul>
</blockquote>

<p>By Joe Richardson, Robin Rendle et al.</p>

<p>Tags: joe-richardson, robin-rendle, bem, css, css-methodology, introduction, css-architecture, sass</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Structured Design: Fundamentals of a Discipline of Computer Program and Systems Design by Yourdon and Constantine.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Study in November 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/"/>
    <updated>2015-11-02T13:25:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015</id>
    <content type="html"><![CDATA[<h2>Call me maybe: RabbitMQ</h2>

<p>I&rsquo;ve read <a href="https://aphyr.com/posts/315-call-me-maybe-rabbitmq">this article</a> by Kyle Kingsbury on using RabbitMQ as a lock service. It investigates and gives a counterexample of using it for this purpose.</p>

<p>Uses Knossos to do the testing and surfaces a problem with it. Explains specific problems on locking: at-most-once and at-least-once message delivery</p>

<p>Note: References Jepsen (I guess an inside joke to the song &ldquo;Call me maybe&rdquo; by Carly Rae Jepsen) for at-most-once and at-least-once message delivery.</p>

<p>Tags: rabbitmq, kyle-kingsbury, lock, cap-theorem, distributed-system, jepsen, knossos, at-most-once-delivery, at-least-once-delivery, counterexample, mutex</p>

<h2>Everyone is potentially a teacher</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/09/everyone-is-potentially-a-teacher">this article</a> by Carlos Blé where he explains that everyone can have ideas worth spreading and that the knowledge not only comes from others but also from the relationships that tie you to other people.</p>

<p>Tags: carlos-ble, teaching, pedagogy, idea, teacher, relationship</p>

<h2>Ragel State Machine Compiler</h2>

<p>I&rsquo;ve read <a href="http://www.colm.net/open-source/ragel/">this article</a> explaining what the Ragel project is about: a code generator from regex to code in languages such as C#, Java, etc. It is limited to finite state machines (FSM), with determinism. It can also handle some indeterminism. Written by Adrian D. Thurston</p>

<p>Tags: adrian-thurston, fsm, state-machine, finite-state-machine, code-generation, ragel</p>

<h2>HTTP is obsolete. It&rsquo;s time for the distributed, permanent web</h2>

<p>I&rsquo;ve read <a href="https://ipfs.io/ipfs/QmNhFJjGcMPqpuYfxL62VVB9528NXqDNMFXiqN5bgFYiZ1/its-time-for-the-permanent-web.html">this article</a> by Kyle Drake explaining the need for a permanent, distributed web archive.</p>

<p>Using a distributed file system (IPFS) and software similar to Bitcoin, they can host parts of the web locally, making it immutable and distributed</p>

<p>Tags: kyle-drake, web-archive, centralization, decentralization, distribution, permanent-web, ipfs, federation,</p>

<h2>Recovering From the Integrated Tests Scam</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive1.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=42e61e203e&amp;e=4a925444f9">this article</a> from J. B. Rainsberger on the integrated test scam and how to solve it: refactoring.</p>

<p>Tags: jbrains, tdd, integrated-test, integration-test, j-rainsberger</p>

<h2>Broken windows theory</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Broken_windows_theory">this wikipedia article</a> that talks about the broken windows theory, that states that controlling and monitoring public spaces leads to lowering the serious crimes.</p>

<p>Cites three causes for this:</p>

<ul>
<li>Social norms and conformity</li>
<li>Lack of routing monitoring</li>
<li>Social signaling and signal crime</li>
</ul>


<p>Also discusses examples in the US and in the Netherlands, as well as criticisms.</p>

<p>I&rsquo;ve read it to better understand how to apply this theory to software development, on a day-to-day basis.</p>

<p>Tags: wikipedia, theory, broken-window</p>

<h2>Scsh</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Scsh">the wikipedia page</a> for Scsh, the Scheme shell.</p>

<h2>Why is Scala&rsquo;s type inference not as powerful as Haskell&rsquo;s?</h2>

<p>I&rsquo;ve read the reasoning why Haskell supports other type inferences that are not present in Scala, in <a href="http://stackoverflow.com/questions/7234095/why-is-scalas-type-inference-not-as-powerful-as-haskells">this StackOverflow question</a></p>

<p>Tags: scala, haskell, type-inference, hindley-milner, type-inference-algorithm</p>

<h2>The Future of the LispM</h2>

<p>I&rsquo;ve read <a href="http://arrdem.com/2014/11/28/the_future_of_the_lispm/">this article</a> explaining the past and current situation in the Lisp world: from Lisp, to LispM, to the MIT and Symbolics Inc., to Clojure and Scheme.</p>

<p>Also talks about integration with the operating system and its execution in the microprocessor. Written by Reid McKenzie</p>

<p>Tags: reid-mckenzie, lisp, lispm, clojure, scheme, symbolics</p>

<h2>The Lisp Curse</h2>

<p>I&rsquo;ve read <a href="http://www.winestockwebdesign.com/Essays/Lisp_Curse.html">this essay</a> by Rudolf Winestock, where he explains the low barrier (or low cost) for people in powerful languages (such as Lisp) to not accept the status quo in their project and fork / start their own.</p>

<p>It also compares languages and the people attracted to them. Cites Mark Tarver&rsquo;s essays several times, including the Brilliant Bipolar Mind (BBM) in <a href="https://web.archive.org/web/20150308085419/http://www.lambdassociates.org/blog/bipolar.htm">this other</a> essay (from WebArchive). Compares the BBM and the normal worker in usefulness to companies.</p>

<p>Cites the Pareto principle (80-20 rule): a single hacker will port 80% the library from another language, leaving it buggy, undocumented and only understandable by the original author (assuming this is only 20% of the work). The rest (e.g., documentation, bugfixing, maintenance) are dropped and never taken care of.</p>

<p>Cites that this could be somewhat based on the facility of creating new features for the language. A small effort implies small implementation time, leaving no margin for thinking it through and seeing other corner cases. Also, a single person working on the project means no code review. The style might be coherent (always the same one), but might not be idiomatic, understandable by others, maintainable, etc.</p>

<p>Closes the essay with this quote:</p>

<blockquote><p>The expressive power of Lisp has drawbacks. There is no such thing as a free lunch.</p></blockquote>

<p>Tags: rudolf-winestock, essay, pareto-principle, hacking, one-man-band, lisp, no-free-lunch, quote</p>

<h2>The Bipolar Lisp Programmer</h2>

<p>I&rsquo;ve read <a href="https://web.archive.org/web/20150308085419/http://www.lambdassociates.org/blog/bipolar.htm">this essay</a> by Mark Tarver on the Bipolar Lisp programmmer or the koan of Lisp.</p>

<p>It explains the history of the Brilliant Bipolar Mind (BBM) when they attend high school and college. The freedom they&rsquo;re given, exactly the same as in Lisp, as you don&rsquo;t need to mix and socialize with others to create a good-enough solution.</p>

<p>In this fashion, he says, most of the projects are 80% finished, not documented, not maintained. The same problems that worry enterprises.</p>

<p>Cites the article &ldquo;Lisp: Good News, Bad News, How to Win Big&rdquo;</p>

<p>Tags: essay, mark-tarver, bipolar-lisp-programmer, lisp-programmer, programmer, brillian-bipolar-mind, blp, bbm, koan</p>

<p>Note: this article was no longer present on its original site. Fetched it from the Web Archive (WayBack Machine).</p>

<h2>Writing readable Clojure code</h2>

<p>I&rsquo;ve read <a href="http://www.slideshare.net/jiriknesl/writing-readable-clojure-code">these slides</a> by Jiří Knesl, that explains how to write better clojure code:</p>

<ul>
<li>Macros</li>
<li>HOFs</li>
<li>left-to-right vs right-to-left code</li>
</ul>


<p>Tags: clojure, jiri-knesl, macro, hof, thread, slide</p>

<h2>How can I get a reference to a method?</h2>

<p>I&rsquo;ve read <a href="http://stackoverflow.com/questions/485151/how-can-i-get-a-reference-to-a-method">this question</a>, <a href="http://stackoverflow.com/questions/4294485/how-do-i-reference-a-function-in-ruby">another question</a> from StackOverflow</p>

<p>Tags: stackoverflow, question, ruby, functional-programming, method-reference</p>

<h2>Implicit and Explicit Blocks</h2>

<p>I&rsquo;ve read <a href="https://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/18-blocks/lessons/55-new-lesson">this lesson from rubyMonk</a></p>

<p>Tags: rubymonk, lesson, block, ruby</p>

<h2>What&rsquo;s Point-free Programing?</h2>

<p>I&rsquo;ve read <a href="http://xahlee.info/comp/point-free_programing.html">this article</a> by Xah Lee explaining point-free programming, which requires a glance at function decomposition (currying)</p>

<blockquote><p>[&hellip;] “point-free programing” is:</p>

<ul>
<li>It is about a particular <strong>syntax</strong> for <strong>function definition</strong>.</li>
<li>When <strong>defining a function</strong>, no symbol is used for function parameter.</li>
</ul>
</blockquote>

<h2>Oracle’s “planned obsolescence” for Java</h2>

<p>I&rsquo;ve read <a href="https://jaxenter.com/oracle-and-javas-planned-obsolescence-121144.html">this article</a> by Coman Hamilton on the possible Java&rsquo;s planned obsolescence by Oracle.</p>

<p>Discusses features pushed to future releases, comparing it to other legacy languages.</p>

<p>Tags: obsolescence, legacy-language, planned-obsolescence, java, java-ee, oracle, fortran, cobol, coman-hamilton</p>

<h2>Your first Ruby native extension: C</h2>

<p>I&rsquo;ve read <a href="https://blog.jcoglan.com/2012/07/29/your-first-ruby-native-extension-c/">this article</a> about writing a native extension for ruby. Written by James Coglan</p>

<p>Tags: james-coglan, ruby, c, native-extension</p>

<h2>What&rsquo;s the difference between equal?, eql?, ===, and ==?</h2>

<p>I&rsquo;ve read <a href="http://stackoverflow.com/questions/7156955/whats-the-difference-between-equal-eql-and">this stackoverflow</a> question regarding Ruby operators: equal?, eql?, ===, ==:</p>

<ul>
<li>==: generic equality</li>
<li>===: case equality (for case - when)</li>
<li>eql?: hash equality</li>
<li>equal?: identity comparison (pointer comparison)</li>
</ul>


<p>Tags: comparison, stackoverflow, ruby, equal, eq, ==, ===, question, answer, jtbandes</p>

<h2>Kanban</h2>

<p>I&rsquo;ve read <a href="https://es.wikipedia.org/wiki/Kanban">the wikipedia page</a> for Kanban (Spanish)</p>

<p>Tags: wikipedia, kanban, agile-methodology, management</p>

<h2>Is your Scrum team Agile?</h2>

<p>I&rsquo;ve read <a href="https://blog.thesoftwarecraft.com/2014/04/is-your-scrum-team-agile.html">this article</a> by  Bart Bakker where he discusses some common patterns in Agile implementations (in software companies)</p>

<p>Tags: scrum, team, agile, scrum-implementation, bart-bakker</p>

<h2>Mejora tu trabajo en equipo con el método Kanban</h2>

<p>I&rsquo;ve read <a href="http://hipertextual.com/archivo/2013/11/que-es-kanban/">this article</a> that explains then kanban management framework, with its principles and its values. Written by Jose López (in Spanish)</p>

<p>Tags: kanban, management, agile-methodology, management-framework, principle, value, jose-lopez</p>

<h2>¿Qué es el método Kanban para la gestión de proyectos?</h2>

<p>I&rsquo;ve read <a href="http://www.javiergarzas.com/2011/11/kanban.html">this article</a> (Spanish) written by Javier Garzás where it is explained the kanban methodology and three of its main rules:</p>

<ul>
<li>visualize workflow</li>
<li>limit WIP</li>
<li>measure {lead, cycle} time</li>
</ul>


<p>Tags: kanban, management, agile-methodology, management-framework, principle, value, javier-garzas</p>

<h2>describe vs. context in rspec</h2>

<p>I&rsquo;ve read <a href="http://lmws.net/describe-vs-context-in-rspec">this article</a> that explains the (lack of) functional difference between RSpec&rsquo;s <code>describe</code> and <code>context</code> methods. The difference is contextual (i.e., the amount of information they convey). Written by LM</p>

<p>Tags: rspec, ruby, describe, context, difference</p>
]]></content>
  </entry>
  
</feed>
