<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Kata | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/kata/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-02-18T23:37:41+01:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bank Kata in Java]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/22/bank-kata-in-java/"/>
    <updated>2015-01-22T22:52:01+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/22/bank-kata-in-java</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/trikitrok">Manuel Rivero</a> and I did a subset of the <a href="https://github.com/sandromancuso/Bank-kata">bank kata</a>, proposed by <a href="https://twitter.com/sandromancuso">Sandro Mancuso</a>.</p>

<p>We&rsquo;ve used java (mockito, hamcrest, junit), outside-in TDD. The code is spread among several sessions. We have not committed after each step, only at the end of the session.</p>

<p>The source code is on <a href="https://github.com/alvarogarcia7/bank-kata">github</a></p>

<p>You can read Manuel&rsquo;s take on the kata on <a href="http://garajeando.blogspot.com.es/2015/01/kata-bank-account-in-java.html">his blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GMaur Code Jam 2015: 01 - Mini-Power Swapper]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/12/gmaur-code-jam/"/>
    <updated>2015-01-12T04:25:22+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/12/gmaur-code-jam</id>
    <content type="html"><![CDATA[<p>Last year we started the program 12 months, 12 katas (as inspired by this <a href="https://github.com/12meses12katas">repository</a>). This year we want to propose something different: an asynchronous code jam</p>

<h2>New problem: Mini-Power Swapper</h2>

<p>This post belongs to a series: <a href="/blog/categories/code-jam">code-jam</a></p>

<p>Each month (or so) we at GMaur will publish a new problem (and announce it on <a href="https://twitter.com/gmaurcom">twitter</a>) and post a solution to the last problem.</p>

<p>This month, the <a href="https://github.com/GMaur/code-jam-2015/tree/master/problem-01">Mini-Power Swapper</a></p>

<p>You can fork the repo, commit there and send a pull request. We&rsquo;ll review the code (if you want) and merge the solution to a branch in &ldquo;solutions/&rdquo;.</p>

<p>Happy katas and happy code jamming!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kata: Reverse Polish Notation in Java]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/12/kata-reverse-polish-notation-in-java/"/>
    <updated>2015-01-12T03:56:58+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/12/kata-reverse-polish-notation-in-java</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve written a <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation">RPN</a> string calculator in java, using TDD with these: mockito, hamcrest, junit</p>

<p>It&rsquo;s close to the <a href="http://osherove.com/tdd-kata-1/">String Calculator kata</a>, by <a href="https://twitter.com/RoyOsherove">Roy Osherove</a>. This RPN is using mocks (so more difficult than the String calculator)</p>

<p>I&rsquo;ve tried to practice <a href="http://us2.campaign-archive1.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=42f9a0b66f&amp;e=6ca6702beb">&ldquo;Your tests are dragging you down&rdquo;</a> by <a href="https://twitter.com/jbrains">J.B Rainsberger</a> (mainly, to use something to write on). This behavior is also explained in the book <a href="http://www.carlosble.com/libro-tdd/">Dirigido por tests</a> (Spanish) by <a href="https://twitter.com/carlosble">Carlos Bl√©</a>.</p>

<p>My solution is <a href="https://github.com/alvarogarcia7/kata-rpn-calculator-java">here</a>. Every step (red, green, refactor) has been saved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kata: Prime Factors]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/06/kata-prime-factors/"/>
    <updated>2015-01-06T21:47:04+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/06/kata-prime-factors</id>
    <content type="html"><![CDATA[<p>I just did the prime factors kata, in java using TDD. Results: <a href="https://github.com/alvarogarcia7/primeFactors">https://github.com/alvarogarcia7/primeFactors</a></p>

<p>Code review, comments, pull requests are more than welcome</p>

<p>Source: <a href="http://craftsmanship.sv.cmu.edu/katas/prime-factors-kata">http://craftsmanship.sv.cmu.edu/katas/prime-factors-kata</a></p>

<p>Source: <a href="http://butunclebob.com/ArticleS.UncleBob.ThePrimeFactorsKata">http://butunclebob.com/ArticleS.UncleBob.ThePrimeFactorsKata</a></p>
]]></content>
  </entry>
  
</feed>
