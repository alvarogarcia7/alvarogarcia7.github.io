<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tip | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/tip/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2016-06-06T19:33:44+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Self-Study in April 2016]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2016/04/01/self-study/"/>
    <updated>2016-04-01T00:08:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2016/04/01/self-study</id>
    <content type="html"><![CDATA[<h2>Deliberate Practice: What It Is and Why You Need It</h2>

<p>I&rsquo;ve read this article by Corbett Barr on what is deliberate practice and why it is needed to become an expert in a given domain field.</p>

<p>The four essential components:</p>

<ul>
<li>Motivation</li>
<li>Tailored (practice)</li>
<li>Feedback</li>
<li>Repetion</li>
</ul>


<p>Tags: corbett-barr, deliberate-practice, expert, practice, anders-ericsson, talent, professional-development, career</p>

<h2>10 Features I Wish Java Would Steal From the Kotlin Language</h2>

<p>I&rsquo;ve read <a href="http://blog.jooq.org/2016/03/31/10-features-i-wish-java-would-steal-from-the-kotlin-language/">this list of features</a> that the Kotlin Language has that would be an improvement for the Java language. By Lukas Eder</p>

<p>Tags: list, lukas-eder, kotlin, java, comparison, language, jooq</p>

<h2>How we built Uber engineering&rsquo;s highest query per second service using Go</h2>

<p>I&rsquo;ve read <a href="https://eng.uber.com/go-geofence/">this post</a> by Kai Wei on a microservice they&rsquo;ve built using Go.</p>

<p>Explains the reasons for choosing that algorithm for geofencing, the performance they&rsquo;re achieving, and the architecture.</p>

<p>Tags: uber, go, microservice, performance, geofence, geofencing, rps, go-memory-model, kai-wei</p>

<h2>Unwinding Uber&rsquo;s Most Efficient Service</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@buckhx/unwinding-uber-s-most-efficient-service-406413c5871d">this article</a> by Buck Heroux commenting on the decisions of Uber for building the geofencing microservice (above read).</p>

<p>Explains the different alternatives for algorithms in this problem space and has implemented them in go. Provides a benchmark for comparing those, including a profiling session.</p>

<p>Tags: s2, quadtree, rtree, brute-force, geofence, geofencing, uber, comment, buck-heroux, go, read-on-read, meta-read</p>

<h2>Lawful Hacking and Continuing Vulnerabilities</h2>

<p>I&rsquo;ve read <a href="https://www.schneier.com/blog/archives/2016/03/lawful_hacking_.html">this article</a> by Bruce Schneier on the stance the FBI is taking in regards to vulnerabilities discovered in Apple&rsquo;s devices.</p>

<p>Tags: bruce-schneier, apple, security, fbi, vulnerability, exploit, law, hacking</p>

<h2>A Side Project Helped Jumpstart My Career — Life Learning</h2>

<p>I&rsquo;ve read <a href="https://medium.com/life-learning/a-side-project-helped-jumpstart-my-career-7cd6f8e9b07f">this article</a> by Dave Gerhardt on how making a side project happen affected his life and his skills.</p>

<p>Some of the reasons for doing it include:</p>

<ul>
<li>It forces you to figure stuff out</li>
<li>The only way to learn is by doing</li>
<li>It gets your brain working on something other than your job</li>
<li>You have to create your own network</li>
<li>You are the CEO</li>
</ul>


<p>Tags: long-life-learning, continuous-learning, side-project, dave-gerhardt, drift, professional-development, personal-development, business, career</p>

<h2>Fun Jekyll Tricks</h2>

<p>I&rsquo;ve read <a href="http://www.madebymarket.com/blog/dev/fun-jekyll-tricks.html">this article</a> by Brian Knapp where he explains some tips and tricks of jekyll (in which octopress is based on): speed, deployment, subcategories inside the blog, <em>data, </em>includes.</p>

<p>Tags: brian-knapp, jekyll, octopress, tip-and-trick, improvement, subcategory, meta, automation, deployment</p>

<h2>La ola que llega</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;id=f8a8ee92cc">this bonilista</a> by David Bonilla, where he explains (in Spanish) the &lsquo;contractor&rsquo; phenomenon arriving to Spain, 2-3 years after being in other countries and the effects that this could have both for workers and companies.</p>

<p>Tags: bonilista, david-bonilla, contractor</p>

<h2>10 razones por las que este sábado deberías ir a un code retreat</h2>

<p>I&rsquo;ve read <a href="http://francho.org/2015/11/10/10-razones-para-ir-a-un-coderetreat/">this list</a> of reasons for attending a code retreat, by Francho Joven, who I met in the Global Day Of Code Retreat (GDCR) &lsquo;15 in Zaragoza</p>

<p>Tags: francho-joven, list, zaragoza, code-retreat, gdcr</p>

<h2>Meaningful Work through Passion, not Genius</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=pIYUMwxKFzo">this talk</a> on the importance of hard work and how it can be mistaken as genious. By Malcolm Gladwell</p>

<p>Tags: malcolm-gladwell, passion, genius, work, time-management, productivity, career, mastery-autonomy-purpose</p>

<h2>How to ask your wife for permission to spend $250,000 on a domain name</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@Stockphoto.com/how-to-ask-your-wife-for-permission-to-spend-250-000-on-a-domain-name-c27a3c2852e1">this article</a> by Jon Yau on how they started StockPhoto.com, buying a $250,000 domain name.</p>

<p>Tags: startup, domain, stockphoto, jon-yau</p>

<h2>Sorry, developer bootcamps: I was wrong</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@dillonforrest/sorry-developer-bootcamps-i-was-wrong-ea37fcc5572c">this article</a> by Dillon Forrest on the topic of developer bootcamps. Explains why developers should not be threatened by recent graduates of these programs and describes how people pursuing these programs usually are:</p>

<ul>
<li>Intelligence</li>
<li>Risk appetite</li>
<li>Resilience</li>
<li>Self-investment</li>
<li>Entrepreneurship</li>
<li>Growth trajectory</li>
</ul>


<p>Tags: bootcamp, developer-bootcamp, dev-bootcamp, dillon-forrest, intelligence, risk-appetite, resilience, self-investment, entrepreneurship, growth-trajectory</p>

<h2>The JVM and Java Garbage Collection</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=DoJr5QQYsl8">this webcast</a> about how the JVM garbage collection works. By Michael W Williams</p>

<p>Tags: michael-williams, oracle, webcast, jvm, garbage-collection, gc,</p>

<h2>Files Are Hard</h2>

<p>I&rsquo;ve read <a href="http://danluu.com/file-consistency/">this article</a> on why software that writes on files is difficult, based on the different filesystems that are below, and the operating system. Written by Dan Luu.</p>

<p>Uses software product to find bugs in filesystems</p>

<p>Tags: filesystem, file, dan-luu, analysis</p>

<h2>Contrata a un fracasado con ilusión inquebrantable</h2>

<p>I&rsquo;ve read <a href="http://www.contunegocio.es/tecnologia/contrata-a-un-fracasado-con-ilusion-inquebrantable/">this article</a> by Alberto Mena (in Spanish) on what are the qualities that define a good programmer:</p>

<ul>
<li>humility</li>
<li>failure</li>
<li>illusion</li>
<li>hard work</li>
</ul>


<p>Tags: alberto-mena, spanish, team-management, success, developer, quality, developer-quality</p>

<h2>Don&rsquo;t react</h2>

<p>I&rsquo;ve read <a href="http://journal.avdi.org/2016/04/14/dont-react/">this article</a> by Avdi Grimm on how the action vs reaction attitude. Why to prefer the former.</p>

<p>Tags: action, reaction, social-media, avdi-grimm, productivity</p>

<h2>FTP is so 90&rsquo;s. Let&rsquo;s deploy via Git instead!</h2>

<p>I&rsquo;ve read <a href="https://coderwall.com/p/xczkaq/ftp-is-so-90-s-let-s-deploy-via-git-instead">this guide</a> on how to deploy using git. By Kerrick Long</p>

<p>Tags: kerrick-long, git, deployment, webapp, application, devops</p>

<h2>Job vs Career: 10 Key Differences You Need To Understand</h2>

<p>I&rsquo;ve read <a href="https://www.officevibe.com/blog/job-vs-career">the infographic and the article</a> by Jacob Shriar on what differentiates a job from a career</p>

<p>Tags: jacob-shriar, infographic, job-vs-career, comparison, job, career</p>

<h2>The Secret To Employee Motivation</h2>

<p>I&rsquo;ve read <a href="https://www.officevibe.com/blog/secret-employee-motivation-infographic">the infographic and the article</a> by Jacob Shriar on what motivates employess: mastery, autonomy and purpose. A direct reference to Dan Pink&rsquo;s &ldquo;The puzzle of motivation&rdquo; TED talk.</p>

<p>Tags: jacob-shriar, motivation, employee, infographic, mastery, autonomy, purpose</p>

<h2>The puzzle of motivation</h2>

<p>I&rsquo;ve watched <a href="https://www.ted.com/talks/dan_pink_on_motivation">this TED talk</a> by Dan Pink on what motivates us: intrinsic vs extrinsic motivation.</p>

<p>Also about the gap that exists between what science knows and what businesses propose.</p>

<p>Tags: ted, ted-talk, video, dan-pink, mastery, autonomy, purpose</p>

<h2>Applying a ceiling to the bug count</h2>

<p>I&rsquo;ve read <a href="https://techblog.king.com/applying-a-ceiling-to-the-bug-count/">this interview</a>, written by Susanna Berg, on how King has reduced the amount of bugs in their backlog using an agile technique, measuring and setting a limit.</p>

<p>Tags: susanna-berg, king, agile, bug, bug-count, defect, defect-count, per-malmen</p>

<h2>Coming up in 2016: Spring Framework 4.3 &amp; 5.0</h2>

<p>I&rsquo;ve read <a href="https://spring.io/blog/2015/08/03/coming-up-in-2016-spring-framework-4-3-5-0">this announcement</a> of Spring&rsquo;s new release, 5.0, which will require java 8 and will turn most of the features into the reactive programming paradigm. By Juergen Hoeller.</p>

<p>Tags: juergen-hoeller, spring, reactive-programming, release, announcement</p>

<h2>Why offices are where work goes to die</h2>

<p>I&rsquo;ve read <a href="http://swizec.com/blog/why-offices-are-where-work-goes-to-die/swizec/6695">this article</a> by Swizec Teller explaining the downsides of working in an office as compared to working remotely.</p>

<p>Tags: swizec-teller, remote, home-office, office, comparison, time-management</p>

<h2>The Myth of the Passionate Developer</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@bm2yogi/the-myth-of-the-passionate-developer-76a41d457304">this article</a> by Michael Ibarra on what are the implications of being a passionate developer, how it affects your tasks and what are the factors to a job.</p>

<p>Tags: michael-ibarra, passion, development, job, motivation, myth</p>

<h2>Mossack Fonseca Breach – WordPress Revolution Slider Plugin Possible Cause</h2>

<p>I&rsquo;ve read <a href="https://www.wordfence.com/blog/2016/04/mossack-fonseca-breach-vulnerable-slider-revolution/">this article</a> by Mark Maunder, which describes an hypothesis on how the Mossack Fonseca breach could have happened. Also describes and shows how to breach a Wordpress installation with a vulnerable Revolution Slider plugin.</p>

<p>Tags: mark-maunder, security, breach, mossack-fonseca-breach, mossack-fonseca, hypothesis, attack, plugin, revolution-slider, wordpress</p>

<h2>Tim Urban: Inside the mind of a master procrastinator</h2>

<p>I&rsquo;ve watched <a href="https://www.ted.com/talks/tim_urban_inside_the_mind_of_a_master_procrastinator">this TED talk</a> from Tim Urban on how the procrastinator&rsquo;s mind works, exemplified by his own career.</p>

<p>Tags: procrastinator, procrastination, mind, time-management, tim-urban</p>

<h2>PEP 20 &ndash; The Zen of Python</h2>

<p>I&rsquo;ve read <a href="https://www.python.org/dev/peps/pep-0020/">the PEP20</a>, the zen of python, with special attention to this:</p>

<blockquote><p>Explicit is better than implicit.</p></blockquote>

<h2>Why I switched from Octopress 2 to Hugo</h2>

<p>I&rsquo;ve read <a href="http://conscientiousprogrammer.com/blog/2015/05/31/why-i-switched-from-octopress-2-to-hugo/">this article</a> by Franklin Chen on the change he made on the static site generator (SSG) he used. He considered hakyll, octopress, jekyll, hugo. Was decided between hakyll and hugo for their speed but, finally, decided to use hugo for their bigger community.</p>

<p>Tags: franklin-chen, comparison, ssg, static-site-generator, hakyll, octopress, jekyll, hugo, change, speed, statically-typed, dynamically-typed, golang, performance</p>

<h2>Why incremental regeneration in Jekyll 3.0 is such a big deal</h2>

<p>I&rsquo;ve read <a href="http://idratherbewriting.com/2015/11/04/jekyll-30-released-incremental-regeneration-rocks/">this article</a> by Tom Johnson on one of the new features that jekyll 3.0 brings: incremental generation. How this can speed up the generation</p>

<p>Tags: tom-johnson, incremental-generation, speed, performance, octopress-2, octopress-3, jekyll-3</p>

<h2>Hugo, S3, Travis CI, oh boy!</h2>

<p>I&rsquo;ve read <a href="http://continuousfailure.com/post/s3_blog/">this guide</a> by Alan Scherger on how to set up a specific stack for developing and deploying a static site blog.</p>

<p>Tags: alan-scherger, static-site-generator, ssg, travis, hugo, s3</p>

<h2>Deploy your blog to github pages automatically using Hugo and Travis</h2>

<p>I&rsquo;ve read <a href="http://rcoedo.com/post/hugo-static-site-generator/">this article</a> by Roman Coedo on how to deploy a hugo blog to github pages, using travis.</p>

<p>Tags: roman-coedo, travis, hugo, github, github-pages, ssg, static-site-generator</p>

<h2>Improve Octopress with Advanced Tweaks &amp; Tips</h2>

<p>I&rsquo;ve read <a href="https://www.narga.net/improve-octopress-advanced-tweaks-tips/">this list</a> of tips on how to improve the octopress (2) installation. By Nguyễn Đình Quân.</p>

<p>Tags: nguyen-dinh-quan, octopress-2, tip, tweak</p>

<h2>Laboratorios</h2>

<p>I&rsquo;ve read <a href="http://www.presionblogosferica.com/2014/11/12/laboratorios/">this article</a> by Ángel Medinilla, about laboratories to use a percentage of company time to investigate, innovate, learn and improve.</p>

<p>Tags: angel-medinilla, team-management, time-management, innovation, strategy, improvement, kaizen, laboratory, craftsmanship, spanish</p>

<h2>What Refactoring is, and what it isn’t</h2>

<p>I&rsquo;ve read <a href="http://swreflections.blogspot.com/2012/04/what-refactoring-is-and-what-it-isnt.html">this article</a> by Jim Bird, where he splits some practices into refactoring and not refactoring. Draws the line between these two different activities.</p>

<p>Also cites scratch refactoring.</p>

<p>Tags: jim-bird, scratch-refactoring, refactoring, martin-fowler, kent-beck, definition, quote, design</p>

<h2>Pitfalls of Unlimited Vacations</h2>

<p>I&rsquo;ve read <a href="http://haacked.com/archive/2016/02/18/unlimited-vaction-pitfalls/">this article</a> by Phil Haack on the github, travis and netflix policies about unlimited vacations and the effects they have on the employees.</p>

<p>Also about minimum vacation periods, (paternity) paid leave.</p>

<p>Tags: phil-haack, unlimited-vacation, holiday, vacation, team-management, burnout, github, travis, netflix, policy</p>

<h2>Cultura Corporativa</h2>

<p>I&rsquo;ve read <a href="http://www.presionblogosferica.com/2011/02/06/cultura-corporativa/">this article</a> by Ángel Medinilla about the corporate culture, and how &ldquo;hanging a highly interchangeable sentence on a wall&rdquo; does not represent it.</p>

<p>Tags: angel-medinilla, corporate culture, spanish</p>

<h2>What It’s Really Like to Learn to Code</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@sandjar/what-it-s-really-like-to-learn-to-code-53f6d9156a32">this article</a> that explains firsthand how it is to learn programming for a novice student,even with a strong financial background and having completed a university degree. By Sandjar Kozubaev</p>

<p>Tags: sandjar-kozubaev, learning, programming, student, firsthand, coding, story</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Using Tortoise Credentials in Git CLI]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2016/03/02/using-tortoise-credentials-from-cli/"/>
    <updated>2016-03-02T11:41:28+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2016/03/02/using-tortoise-credentials-from-cli</id>
    <content type="html"><![CDATA[<h2>TortoiseGit part</h2>

<ul>
<li>Go to a repo</li>
<li>right button, Settings</li>
<li>Git -> Credential</li>
<li>Add a creadential</li>
<li>Config type: global</li>
<li>Helper: wincred</li>
</ul>


<p>Sync once using your HTTPS password</p>

<h2>CLI part</h2>

<p>Open the <code>$REPO/.git/config</code> and add</p>

<pre><code>[credential]
    helper = wincred
</code></pre>

<p>Remote git operations should not ask for credentials anymore</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Persons Involved in a Git Commit, in Github]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2016/02/14/two-persons-involved-in-a-git-commit/"/>
    <updated>2016-02-14T16:12:28+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2016/02/14/two-persons-involved-in-a-git-commit</id>
    <content type="html"><![CDATA[<h2>On git</h2>

<p>You can have multiple persons involved in a single git commit: an author and a committer.</p>

<p>The difference is explained by <a href="https://groups.google.com/forum/#!topic/repo-discuss/6aH9rH8nUdo">Manuel Doninger</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:</p>

<blockquote><p>The author is the one who did the code change.
The committer is the person who committed that change to a repository.</p></blockquote>

<p>an example, by the same author:</p>

<blockquote><p>Example: I&rsquo;m not a committer in the EGit project, so i have no rights
to push directly to the EGit repository at Eclipse. But i contribute
to EGit, so my changes have the author set to my name and email. If my
change gets reviewed by the EGit team, and submitted, the committer
field contains the name and email of the person who submitted the
change</p></blockquote>

<h2>On github</h2>

<p>This is represented in github with this format:</p>

<p><img src="/blog/categories/../uploads/commit-with-two-persons.png" alt="two persons involved" /></p>

<p>One of them is &ldquo;sharplet&rdquo; and the other one is &ldquo;gfontenot&rdquo;. Both are github users that match a github-registered mail.</p>

<p>On a shallow inspection, the commit does not reveal anything special:</p>

<pre><code class="bash">$ g log 17a96dba38479de78cdb3b3aae1c802f4d54f485 -n1 --full-diff
commit 17a96dba38479de78cdb3b3aae1c802f4d54f485
Author: XXXX &lt;xxxx@example.com&gt;
Date:   Wed Dec 2 14:44:52 2015 +1100

    Clarify specs by defining • as the composition operator
</code></pre>

<p>but looking a bit closer<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>,</p>

<pre><code class="bash">$ g log 17a96dba38479de78cdb3b3aae1c802f4d54f485 -n1 --dense --full-diff --format="%H, %h, %T, %t, %P, %p, %an, %aN, %ae, %aE, %ad, %aD, %ar, %at, %ai, %cn, %cN, %ce, %cE, %cd, %cD, %cr, %ct, %ci, %cI, %d, %D, %e, %s, %f, %b, %B" | less
17a96dba38479de78cdb3b3aae1c802f4d54f485, 17a96db, 6bc2a33e3a069b78b9fd36124f5ed039a125303e, 6bc2a33, 29488bc0be27c5c03b6af7d115c7d45645382a7a, 29488bc, XXXX, XXXX, xxxx@example.com, xxxx@example.com, Wed Dec 2 14:44:52 2015 +1100, Wed, 2 Dec 2015 14:44:52 +1100, 3 months ago, 1449027892, 2015-12-02 14:44:52 +1100, YYYY, YYYY, yyyy@example.com, yyyy@example.com, Tue Dec 15 09:30:28 2015 -0800, Tue, 15 Dec 2015 09:30:28 -0800, 9 weeks ago, 1450200628, 2015-12-15 09:30:28 -0800, %cI, , %D, , Clarify specs by defining • as the composition operator, Clarify-specs-by-defining-as-the-composition-operator, , Clarify specs by defining • as the composition operator
</code></pre>

<p>or, just the emails:</p>

<pre><code class="bash">$ g log 17a96dba38479de78cdb3b3aae1c802f4d54f485 -n1 --dense --full-diff --format='%ae %ce'
xxxx@example.com yyyy@example.com
</code></pre>

<h2>Usage</h2>

<p>For a single commit:</p>

<pre><code class="bash">$ GIT_COMMITTER_NAME='John Doe' GIT_COMMITTER_EMAIL='john@example.com' git commit -m "..."
</code></pre>

<p>For a session:
<code>
export GIT_COMMITTER_NAME='John Doe'
export GIT_COMMITTER_EMAIL='john@example.com'
</code></p>

<p>Taken from <a href="http://stackoverflow.com/a/23108169/1181094">this StackOverflow answer</a></p>

<p>This can be useful for a pairing session or for some kinds of git history rewrite.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>also explained in <a href="http://stackoverflow.com/questions/6755824/what-is-the-difference-between-author-and-committer-in-git">this StackOverflow post</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>this list has been generated from the available arguments at the <a href="https://git-scm.com/docs/git-log">&ldquo;pretty formats&rdquo; at the git-log page</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Study in February 2016]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/"/>
    <updated>2016-02-01T00:55:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016</id>
    <content type="html"><![CDATA[<h2>Software and all that comes with it</h2>

<p>I&rsquo;ve read <a href="http://lanyrd.com/2011/fromthefront/sgfgw/">these slides</a> about creating software and asking questions to deliver value, by Alberto Brandolini</p>

<p>Tags: alberto-brandolini, software, slide, team-management, agile</p>

<h2>Driving your DBA crazy in 3 easy steps</h2>

<p>I&rsquo;ve read <a href="http://lanyrd.com/2011/ddd-day-it/shzym">these slides</a> about dealing with the knowledge that is present in the database, not expressed in ubiquitous language and cause of the low bus factor, by Alberto Brandolini</p>

<p>Analogy between the movie The Shining and a model / entities / aggregates.</p>

<p>Tags: ddd, model, entity, aggregate, team-management, dba, agile, ubiquitous-language, alberto-brandolini, bus-factor, slide</p>

<h2>Shorter Feedback is not Always Bett</h2>

<p>I&rsquo;ve read <a href="https://facebook.com/notes/kent-beck/shorter-feedback-is-not-always-bett/1097086386990891">this note</a> from Kent Beck on why shorter feedback loops might not always be better. I.e., why some processes take time to set in and results are not observable until that time.</p>

<p>Tags:  kent-beck, feedback-loops, open-question, analogy</p>

<h2>La Regla del Triple Check para ir a eventos</h2>

<p>I&rsquo;ve read <a href="http://www.bonillaware.com/regla-triple-check-para-ir-a-eventos">this article</a> by David Bonilla about a rule to help you decide attendance to events, in Spanish</p>

<p>Tags: rule, time-management, david-bonilla, event, spanish, triple-check</p>

<h2>An interview with Charles Wetherell</h2>

<p>I&rsquo;ve read <a href="http://demin.ws/blog/english/2012/08/25/interview-with-charles-wetherell/">this interview</a> by Alexander Demin about the interviewee&rsquo;s book &ldquo;Etudes for Programmers&rdquo;. In it, they talk about the origin of the études, the author&rsquo;s research interests and activities. Also about the book (written in 1978) and how computer science has changed since then.</p>

<p>When asked about three things a programmer should know:</p>

<blockquote><p>Some ability to do formal mathematics. The level necessary to understand Hopcroft and Ullman combined with a little graph theory is enough. Discrete mathematics is essential; calculus is only necessary for folks working in special application areas.</p>

<p>Some ability to write clearly in their native language. Dijkstra said that if a person couldn’t write their own language, they couldn’t write a correct program. (Well, that’s what I hope Dijkstra said!). Writing programs is essentially the same as writing a non-fiction essay. If you can’t make the step-by-step connections clearly in your own language, why would we think you could in C, for example?</p>

<p>Remember that a program is primarily for communication with humans, not computers. When you write a program, the computer will do whatever you say. You must convince the humans who read the program that what you have asked the computer to do is the correct thing to do. Remember, the computer doesn’t care about correctness.</p>

<p> The answer to the last question means that programs should always have the form of paragraphs of comments that describe the intention of the program followed by paragraphs of code that implement that intention. All of the formatting should be designed to make readers as able as possible to read the code easily; the compiler doesn’t care. In particular, follow conventions of mathematics and your native language, not those you found in some random language manual. Write the comments first and then write the code, not the other way around. If you don’t know what you want to achieve and why, any code you write is, by definition, incorrect.</p></blockquote>

<p>Tags: charles-wetherell, alexander-demin, interview, book, etude, etudes-for-programmers, practice, ability, skill, list</p>

<h2>How to fix Javascript… maybe</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@wob/how-to-fix-javascript-maybe-8857819bfa16">this article</a> by Drew Hamlett about the lack of style guide for javascript and how this affects the adoption of the language and the sprout of similar libraries.</p>

<p>Suggests the creation of a standard style guide for javascript.</p>

<p>Tags: drew-hamlett, javascript, style-guide, analysis</p>

<h2>Isomorphic JavaScript: #DevBeat Master Class</h2>

<p>I&rsquo;ve read <a href="http://www.slideshare.net/spikebrehm/a-28174727">these slides</a> by Spike Brehm on Isomorphic JavaScript and why it&rsquo;s important: initial pageload and speed, reducing effort and duplication, SEO (crawlability).</p>

<p>Tags: isomorphic-javascript, isomorphism, javascript, seo, crawler, frontend, app, application, fat-client, fat-server, thin-client, thin-server, ria-spike-brehm, slide</p>

<h2>Open-sourcing our docker images</h2>

<p>I&rsquo;ve read <a href="http://blog.modulus.io/open-sourcing-our-docker-images">this article</a> by Brandon Cannaday about the Docker images that they have.</p>

<p>Tags: docker, brandon-annaday, open-ource, image, container, modulus</p>

<h2>growing up in an open source world</h2>

<p>I&rsquo;ve read <a href="http://fiveisprime.me/2015/02/18/growing-up-in-open-source/">this article</a> by Matt Hernandez where he explains that fixing the style guide can limit your creativity and how the software is written in enterprise and open-source environments.</p>

<p>Also about how developers grow when exposed to different style guides.</p>

<p>Tags: style-guide, matt-hernandez, creativity, dreyfus-model, enterprise, open-source, programming</p>

<h2>Hanlon&rsquo;s Razor and working with young engineers</h2>

<p>I&rsquo;ve read <a href="http://fiveisprime.me/2013/07/27/young-engineers/">this article</a> by Matt Hernandez on the importance of understanding (and empathising) towards others' positions and worries.</p>

<p>Cites the Hanlon Razor:</p>

<blockquote><p>Never attribute to malice that which is adequately explained by ignorance.</p></blockquote>

<p> Tags:  hanlon-razor, empathy, team-management, ignorance, malice, matt-hernandez</p>

<h2>Intro to sails.js</h2>

<p>I&rsquo;ve watched <a href="https://youtu.be/GK-tFvpIR7c">this video</a>, an introduction to the sails.js framework: a realtime nodejs server for creating REST APIs, inspired by Ruby on Rails.</p>

<p>Tags: sailsjs, ruby-on-rails, ror, framework, video, introduction, mvc, rest-api, realtime, nodejs,</p>

<h2>Node.js and hapi - creating a rest api</h2>

<p>I&rsquo;ve read <a href="http://blog.modulus.io/nodejs-and-hapi-create-rest-api">this article</a> about creating a REST API using <a href="http://hapijs.com/">Hapi</a>, a nodejs framework. Written by Matt Hernandez</p>

<p>Tags: matt-hernandez, rest-api, nodejs, hapi, framework</p>

<h2>Introducing Pokedex.org: a progressive webapp for Pokémon fans</h2>

<p>I&rsquo;ve read <a href="http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org">this article</a> by Nolan Lawson about the challenge of having a 60 fps application on a mobile device, making it offline.</p>

<p>Uses Angular 2, javascript 7, PouchDB as well as LocalForage for storage. All processing on WebWorkers, except for DOM manipulation.</p>

<p>Tags: angular-2, javascript-7, angular, javascript, pouchdb, localforage, cloudant, 60fps, mobile, app, offline-first, offline, pokemon, api, nolan-lawson, web-worker, flip-technique, css, progressive, pokedex, svgomg, frontend</p>

<h2>LambdaConf 2015 - How to Learn Haskell in Less Than 5 Years Chris Allen</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=Bg9ccYzMbxc">this video</a> by Chris Allen on how to learn haskell, what are some common pitfalls while learning it and how learning and teaching (it) are different.</p>

<p>Talks about his (with a coauthor) book, focused on not reducing the readers that make it to the end and, finally, increasing the amount of haskell users.</p>

<p>References <a href="https://yow.eventer.com/yow-2014-1222/stop-treading-water-learning-to-learn-by-edward-kmett-1750">this talk</a> by Kmett.</p>

<p>Tags: chris-allen, haskell, learning-to-learn, meta-learning, lambda-conf, talk</p>

<h2>Extreme Continuous Delivery - at Unruly</h2>

<p>I&rsquo;ve read <a href="http://www.xpdays.de/2014/downloads/002-extreme-continuous-delivery-at-unruly/cd_javaone.pdf">these slides</a> about how the company Unruly does continuous delivery (CD), maximizing business value, minimizing time to market (TTM). Also describes how they do deployments and how to organize teams.</p>

<p>References: Extreme Programming Explained (Beck), Continuous Delivery (Humble &amp; Farley)</p>

<p>Tags: silo, team-management, culture, continuous-delivery, tdd, nagdd, shared-infrastructure, acceptance-testing, module-testing, conway-law, cross-pollination, continuous-investment, slide</p>

<h2>Building chat applications and robots for Skype</h2>

<p>I&rsquo;ve read <a href="https://opensourcehacker.com/2013/03/28/building-chat-applications-and-robots-for-skype/">this article</a> on building robots for skype. By Mikko Ohtamaa</p>

<p>Tags: skype, robot, bot, mikko-ohtamaa, slack, integration, api</p>

<h2>Why I never wrote down our company values</h2>

<p>I&rsquo;ve read <a href="https://medium.com/swlh/why-i-never-wrote-down-our-company-values-8143520497e8">this article</a> by Mikael Cho on the subject of having company values, preaching or writing them down. Also, what happens when hard times come, regarding your values.</p>

<p>Tags: mikael-cho, value, company-value, analogy</p>

<h2>Interview with Jesper Louis Andersen about Erlang, Haskell, OCaml, Go, Idris, the JVM, software and protocol design </h2>

<p>I&rsquo;ve read this interview (<a href="https://medium.com/this-is-not-a-monad-tutorial/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-b0de06440fbd">part 1</a>, <a href="https://medium.com/this-is-not-a-monad-tutorial/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-5628fe591295">part 2</a>) to Jesper Louis Andersen, interviewed by Federico Carrone.</p>

<p>The first part is about a comparison of languages, what/why he uses them, and protocol design. The second is more about the Erlang language, the BEAM VM, and some experiences.</p>

<p>Tags: federico-carrone, erlang, interview, jesper-andersen, jesper-louis-andersen, haskell, ocaml, go, idris, the-jvm, protocol-design, software-design, language, functional-programming, protocol, land-of-lisp, northern-war</p>

<h2>Migrating to Hugo From Octopress</h2>

<p>I&rsquo;ve read <a href="http://nathanleclaire.com/blog/2014/12/22/migrating-to-hugo-from-octopress/">this guide</a> by Nathan LeClaire on migrating the blog from Octopress to Hugo</p>

<p>Tags: static-site-generator, hugo, go, octopress, ruby, jekyll, nathan-leclaire, migration, blog, meta</p>

<h2>Dynamic Static Site Generators strategies</h2>

<p>I&rsquo;ve read <a href="https://timnash.co.uk/dynamic-static-site-generators-strategies/">this article</a> explaining what are static site generators, and an example with Jekyll. By Tim Nash</p>

<p>Tags: tim-nash, static-site-generator, jekyll, strategy, explanation, comparison</p>

<h2>Blog like a confused hacker</h2>

<p>I&rsquo;ve read <a href="https://timnash.co.uk/using-wordpress-static-site-generator/">this article</a> by Tim Nash on what tools he recomends for static site generation.</p>

<p>Tags: tim-nash, static-site-generator, jekyll, hide, strategy, explanation, comparison, sublime, wordpress, amazon-s3, cdn</p>

<h2>Resolving the Frontend/Backend API Design Conflict</h2>

<p>I&rsquo;ve read <a href="http://launchany.com/resolving-the-frontendbackend-api-design-conflict/">this article</a> that explains the &ldquo;Backend for Frontend&rdquo; (BFF) pattern, for solving the different needs of data depending on each device / client. By James Higginbotham</p>

<p>Tags: james-higginbotham, bff, pattern, backend-for-frontend, api, soa, microservice, frontend, backend, architecture</p>

<h2>What If We Forget To Write The Tests?</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=f70f14b644&amp;e=4a925444f9">this article</a> by J. B. Rainsberger on the trust issues related to starting to use a new methodology (TDD in this case) and how to see what impacts it might have in your day to day.</p>

<p>Tags: j-b-rainsberger, j-brains, rainsberger, tdd, motivation, team-management</p>

<h2>API microservices, the Unix philosophy, and the Richardson Maturity Model - a practical perspective</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@chrstphrhrt/microservices-the-unix-philosophy-and-the-richardson-maturity-model-425abed44826">this article</a> by Chris Hart on why startups and companies alike should be careful when choosing th latest technology and how this applies to microservices.</p>

<p>Tags: microservice, chris-hart, startup, analysis, company, technical-debt, bounded-context, ddd, rest-api</p>

<h2>Effective programming</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@sebas5384/effective-programming-d7e5bb2f3b80">this article</a> by Sebastian Ferrari on the importance of clean code, systems thinking and functional programming.</p>

<p>Specifies the important difference between effectiveness and efficiency.</p>

<p>Links to this talk by <a href="https://youtu.be/OqEeIG8aPPk">Russ Ackoff</a>. States the difference between &ldquo;the right thing&rdquo; and &ldquo;the thing right&rdquo;, by Drucker.</p>

<p>Tags: drucker, thing-right, right-thing, sebastian-ferrari, system-thinking, russ-ackoff, video, ted, difference, clean-code, functional-programming</p>

<h2>Learning how to learn</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@thejameskyle/learning-how-to-learn-7f04d6f42c1e">this article</a> by James Kyle about the &ldquo;how to learn&rdquo; as one important skill for programmers and how having the solution at a few keystrokes limits / handicaps this ability.</p>

<p>Tags: programmer, learn-to-learn, james-kyle, stack-overflow, skill</p>

<h2>Why do some functional programmers criticize design patterns in OOP languages as a sign of language deficiency, while Monad is also a design pattern?</h2>

<p>I&rsquo;ve read <a href="https://www.quora.com/Why-do-some-functional-programmers-criticize-design-patterns-in-OOP-languages-as-a-sign-of-language-deficiency-while-Monad-is-also-a-design-pattern/answer/Edward-Kmett?srid=hVnO&amp;share=12410d1e">this answer</a> by Edward Kmett comparing the design patterns in OOP to the design patterns in functional languages.</p>

<p>Tags: functional-language, object-oriented-language, edward-kmett, oop, pattern, monad, interface, quora, answer</p>

<h2>Should We Even Debate Refactoring With Stakeholders?</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=215f7f649b&amp;e=4a925444f9">this article</a> by J. B. Rainsberger on the power balance between stakeholders and programmers and how it can be inclined to a &lsquo;more trust&rsquo; / &lsquo;less trust&rsquo; by following some actions. The analogy is to a trade you cannot understand, therefore you have to hope that the taken decisions are in your best interest.</p>

<p>Tags: j-b-rainsberger, j-brains, rainsberger, refactor, business-need, communication, stakeholder</p>

<h2>The Eternal Struggle Between Business and Programmers</h2>

<p>I&rsquo;ve read <a href="http://blog.thecodewhisperer.com/permalink/the-eternal-struggle-between-business-and-programmers">this article</a> by J. B. Rainsberger on the discussion between business (&lsquo;we want more features, now&rsquo;) and the programmers (&lsquo;we want more refactoring, now&rsquo;). Concludes that both players need each other, in a symbiotic fashion, to keep their jobs at the company.</p>

<p>He suggests that Scrum cannot work without the XP practices and that we need to refactor aggressively after having finished our initial design, to keep the costs down. In fact, agreeing with both parts in this discussion.</p>

<p>References one of his own videos, at Oredev'13, &ldquo;Fundamental Theorem of Agile Software Development&rdquo;, where he describes the relationship between accidental / essential complexity in the cost of a feature, attributing most of it to accidental (&lsquo;we&rsquo;re not good at our jobs&rsquo;) and describing the need for more design / refactor after the initial design.</p>

<p>Tags: j-b-rainsberger, j-brains, rainsberger, refactor, business-need, design, oredev, talk, agile, xp, scrum, software-development, accidental-complexity, essential-complexity, mythical-man-month</p>

<h2>Turning code to cash — How to make money as a Web Developer and live to tell the tale.</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@kurtrohlandt/turning-code-to-cash-how-to-make-money-as-a-web-developer-and-live-to-tell-the-tale-f5eedc557b3e">this article</a> by Kurt Rohlandt with a list of items to check while dealing with clients as a freelancer:</p>

<ul>
<li>Nothing is simple</li>
<li>Know your skill set — and let your client know it</li>
<li>Be clear about what they are buying</li>
<li>Learn to use the best tool for the job</li>
<li>To your client you’re more than just a developer</li>
<li>Sign off your jobs</li>
</ul>


<p>Tags: freelancer, kurt-rohlandt, list, tip, client</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Study in January 2016]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/"/>
    <updated>2016-01-01T14:55:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016</id>
    <content type="html"><![CDATA[<h2>Test cases in inner classes with JUnit</h2>

<p>I&rsquo;ve read <a href="http://stackoverflow.com/questions/8758294/test-cases-in-inner-classes-with-junit">this answer</a> in stackoverflow about nested test runners in JUnit</p>

<p>Tags: junit, stackoverflow, answer, nested-runner</p>

<h2>Recording a Great Coding Screencast</h2>

<p>I&rsquo;ve read <a href="https://egghead.io/articles/recording-a-great-coding-screencast">this article</a> by John Lindquist where he explains how he sets up the recording environment for egghead.</p>

<p>Tags: john-lindquist, record, screencast, egghead, code-screencast, record-video, video</p>

<h2>React Testing Course</h2>

<p>I&rsquo;ve watched <a href="https://egghead.io/lessons/react-testing-jsx-error-diffs">the full course</a> by Trevor D. Miller on how to test react components and the libraries to make it possible.</p>

<p>Tags: trevor-miller, online-course, screencast, mooc, react, flux, egghead</p>

<h2>What Is Functional Programming?</h2>

<p>I&rsquo;ve read <a href="http://blog.jenkster.com/2015/12/what-is-functional-programming.html">this article</a> by Kris Jenkins where the author describes functional programming from an input &amp; output point of view.</p>

<p>Describes state of the system (maybe global or local) is input &amp; output of the function</p>

<p>Produced state changes are called side effects. the author calls the state inputs as &ldquo;side causes&rdquo;.</p>

<p>Side effects and causes are called complexity iceberg, as they are not visible under the water level (surface)</p>

<p>Also what a pure function is: one with no side causes or side effects; e.g., all its inputs are declared inputs (i.e., parameters) and all outputs are declared outputs (i.e., return value).</p>

<p>notes on jobbing programmer:</p>

<ul>
<li><a href="https://www.safaribooksonline.com/library/view/becoming-a-better/9781491905562/ch32.html">at Becoming a Better Programmer</a>, by Pete Goodliffe</li>
<li><a href="https://books.google.es/books?id=P-09CgAAQBAJ&amp;pg=PA67&amp;lpg=PA67&amp;dq=%22jobbing+programmer%22&amp;source=bl&amp;ots=U6Gvi9OSda&amp;sig=J4qWDUtnk768SMjAK3yuEeWUv5Y&amp;hl=es&amp;sa=X&amp;ved=0ahUKEwjz58K615DKAhUFVRQKHfyhAZAQ6AEIOTAE#v=onepage&amp;q=%22jobbing%20programmer%22&amp;f=false">at Mastering Julia</a>, by Malcolm Sherrington</li>
<li><a href="http://joshsymonds.com/blog/2013/11/03/what-makes-a-good-programmer-good/">at What Makes a Good Programmer Good?</a> by Josh Symonds</li>
</ul>


<p>Tags: kris-jenkins, functional-programming, input, output, function, complexity-iceberg, pure-function, impure-function, side-effect, side-cause</p>

<h2>Which Programming Languages Are Functional?</h2>

<p>I&rsquo;ve read <a href="http://blog.jenkster.com/2015/12/which-programming-languages-are-functional.html">this article</a> by Kris Jenkins where the author analyses languages, determining whether they are functional or not.</p>

<p>Describes how functional languages deal with side effects and side causes, and to identify them (was also explained in part one<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>).</p>

<p></p>

<p>Tags: kris-jenkins, functional-programming, side-effect, side-cause, comparison, haskell, clojure, python, perl, javascript, java, map, reduce, hof, scala, moc</p>

<h2>Argument from the &ldquo;Real World&rdquo;</h2>

<p>I&rsquo;ve read <a href="http://ronjeffries.com/xprog/articles/argument-from-the-real-world/">this article</a> by Ron Jeffries that dismantles the &ldquo;real world&rdquo;, as an excuse to use good practices: as in &ldquo;we could use that, but we live in the real world&rdquo;.</p>

<blockquote><p> [&hellip;] our job is to create the “real world” and not to imagine that our present situation is the only situation there is</p></blockquote>

<p>This is exactly our day to day task, to imagine a real world solution to present problems, maybe involving software in between.</p>

<p>Can&rsquo;t we do this for product and team management?</p>

<p>Tags: ron-jeffries, agile, scrum, tdd, bdd, incremental-iterative-development, product-management, team-management</p>

<h2>Self-Contained Systems</h2>

<p>I&rsquo;ve read <a href="https://speakerdeck.com/rstrangh/self-contained-systems-1">these slides</a> about a self-contained system (SCS), an architecture choice to split monolithic systems in parts. It includes the use of microservices in the business logic to solve domain specific problems. Written by Roman Stranghöner</p>

<blockquote><p>development, operation and maintenance [&hellip;] by a single team</p></blockquote>

<p>Tags: big-bang-release, roman-stranghoner, self-contained-system, scs, microservice, monolith, monolithic-system, architecture</p>

<h2>What Makes a Good Programmer Good?</h2>

<p>I&rsquo;ve read <a href="http://joshsymonds.com/blog/2013/11/03/what-makes-a-good-programmer-good/">this article</a> by Josh Symonds on the characteristics that differentiate a good programmer from the jobbing programmers, the list of skills to be a good programmer.</p>

<p>Explains what factors are related and not related to being a good one<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>:</p>

<ul>
<li>knowing that most programming problems have already been solved. You have to know where to look for the solution</li>
<li>not to be afraid to dig deep into problems: detect a problem and be eager to solve it; figure out what is wrong</li>
<li>go to the source: use the source as a fact, as analysis needs to be based on facts, not beliefs</li>
<li>just do it: to be driven to act</li>
<li>instinctively tackle problems head-on, grabbing the bull by the horns instead of waiting for it to be solved automagically; start solving the problem</li>
<li>excited about grabbing problems, about facing the cutting edge</li>
<li>taking the time to reflect and understand it before moving one to the next one</li>
<li>communicate well: succintly and eloquently expressing your thoughts. The author thinks this might be the most important aspect of all.</li>
<li>to be truly caring about what you do: not just a job, but a hobby, an interest, even a fascination; great programmers are always programming</li>
<li>thinking of programming of a way to shape the world, not just a money-making activity</li>
</ul>


<p>Tags: jobbing-programmer, good-programmer, career, career-management, skill, josh-symonds, quote</p>

<h2>The Best Programming Language (or How to Stop Worrying and Love the Code)</h2>

<p>I&rsquo;ve read <a href="http://blog.fourthbit.com/2014/03/01/the-best-programming-language-or-how-to-stop-worrying-and-love-the-code">this article</a> by Álvaro Castro-Castilla analysing different programming languages and what to choose each of them.</p>

<p>Tags: alvaro-castro-castilla, programming-language, language, analysis, comparison</p>

<h2>Tomates en el campo</h2>

<p>I&rsquo;ve read <a href="http://www.presionblogosferica.com/2011/02/20/tomates-en-el-campo/">this article</a> by Ángel Medinilla, about how to cultivate teams, instead of creating or building them. Talks about the mandatory conditions, necessary factors and how to enable it, not guaranteeing success.</p>

<p>Tags: angel-medinilla, team-management, spanish, team, analogy</p>

<h2>Default constructors in Java</h2>

<p>I&rsquo;ve read <a href="http://stackoverflow.com/questions/17068389/default-constructors-in-java">this answer</a> in stackoverflow about extending a java class that has a private constructor.</p>

<p>Tags: stackoverflow, answer, java, constructor, syntax</p>

<h2>What&rsquo;s So Great About Reducers?</h2>

<p>I&rsquo;ve read <a href="http://blog.guillermowinkler.com/blog/2013/12/01/whats-so-great-about-reducers/">this article</a> by Guillermo Winkler explaining reducers, a type of divide and conquer strategy clojure.</p>

<p>Tags: guillermo-winkler, reducer, clojure, parallelism, concurrency</p>

<h2>Don’t use Slack?</h2>

<p>I&rsquo;ve read <a href="https://medium.com/hacker-daily/don-t-use-slack-8e70452f3eed">this article</a> by Christian Heilmann about the relation between open / closed software and accessibility.</p>

<p>Tags: slack, christian-heilmann, accessibility, open-source, propietary-software, closed-source</p>

<h2>Towards an understanding of technical debt</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@kellan/towards-an-understanding-of-technical-debt-ae0f97cc0553">this article</a> by Kellan Elliott-McCrea about some definitions of technical debt and why taking care of it matters for the future.</p>

<p>Talks about the way of inheriting projects by other teams and the paradox of &ldquo;investing more time to fix the problem than originally invested in coding it.&rdquo; Also about judgement.</p>

<p>I find it related to the &ldquo;theory building&rdquo; by Naur.</p>

<blockquote><p>There are at least 5 distinct things we mean we say “technical debt”.</p>

<ol>
<li>Maintenance work: buying breathing room</li>
<li>Features of the codebase that resist change</li>
<li>Operability choices that resist change</li>
<li>Code choices that suck the will to live</li>
<li>Dependencies that resist upgrading</li>
</ol>
</blockquote>

<p>Tags: kellan-elliott-mccrea, kellan, technical-debt, list, definition, quote</p>

<h2>Lifetimes of cryptographic hash functions</h2>

<p>I&rsquo;ve read <a href="http://valerieaurora.org/hash.html">this article</a> by Valerie Aurora where she explains the lifetimes of cryptographic hash functions up to 2012.</p>

<p>Tags: hash-function, valerie-aurora</p>

<h2>Collisions for Hash Functions - MD4, MD5, HAVAL-128 and RIPEMD</h2>

<p>I&rsquo;ve read <a href="https://eprint.iacr.org/2004/199.pdf">this paper</a> that explains some collisions found for MD4, MD5, HAVAL-128 and RIPEMD. By Xiaoyun Wang, Dengguo Feng, Xuejia Lai, Hongbo Yu.</p>

<p>Tags: collision, hash-function, xiaoyun-wang, dengguo-feng, xuejia-lai, hongbo-yu, paper</p>

<h2>The future is parallel: What&rsquo;s a programmer to do?</h2>

<p>I&rsquo;ve read <a href="http://groups.csail.mit.edu/mac/users/gjs/6.945/readings/MITApril2009Steele.pdf">these slides</a> by Guy Steele about the differences in linear vs parallel computing and about the old habits that we still have.</p>

<p>Some quotes:</p>

<h3>Motivation</h3>

<blockquote><ul>
<li>Good sequential code minimizes total number of operations.

<ul>
<li>Clever tricks to reuse previously computed results.</li>
<li>Good parallel code often performs redundant operations to reduce communication.</li>
</ul>
</li>
<li>Good sequential algorithms minimize space usage.

<ul>
<li>Clever tricks to reuse storage.</li>
<li>Good parallel code often requires extra space to permit temporal decoupling.</li>
</ul>
</li>
<li>Sequential idioms stress linear problem decomposition.

<ul>
<li>Process one thing at a time and accumulate results.</li>
<li>Good parallel code usually requires multiway problem decomposition and multiway aggregation of results.</li>
</ul>
</li>
</ul>
</blockquote>

<h3>A New Mindset</h3>

<blockquote><ul>
<li>DO loops are so 1950s! (Literally: Fortran is now 50 years old.)</li>
<li>So are linear linked lists! (Literally: Lisp is now 50 years old.)</li>
<li>Java-style iterators are so last millennium!</li>
<li>Even arrays are suspect!</li>
<li>As soon as you say <code>first, SUM = 0</code> you are hosed. Accumulators are BAD.</li>
<li>If you say, “process subproblems in order,” you lose.</li>
<li>The great tricks of the sequential past DON’T WORK.</li>
<li>The programming idioms that have become second nature to us as everyday tools DON’T WORK.</li>
</ul>
</blockquote>

<h3>The Parallel Future</h3>

<blockquote><ul>
<li>We need new strategies for problem decomposition.</li>
<li>Data structure design/object relationships</li>
<li>Algorithmic organization</li>
<li>Don’t split a problem into “the first” and “the rest.”</li>
<li>Do split a problem into roughly equal pieces. Then figure out how to combine general subsolutions.</li>
<li>Often this makes combining the results a bit harder.</li>
<li>We need programming languages and runtime implementations that support parallel strategies and hybrid sequential/parallel strategies.</li>
<li>We must learn to manage new space-time tradeoffs</li>
</ul>
</blockquote>

<h3>Conclusion</h3>

<blockquote><ul>
<li>A program organized according to linear problem decomposition principles can be really hard to parallelize.</li>
<li>A program organized according to parallel problem decomposition principles is easily run either in parallel or sequentially, according to available resources.</li>
<li>The new strategy has costs and overheads. They will be reduced over time but will not disappear.</li>
<li>In a world of parallel computers of wildly varying sizes, this is our only hope for program portability in the future.</li>
<li>Better language design can encourage better parallel programming.</li>
</ul>
</blockquote>

<p>Tags: representation, computation, catamorphism, list, associativity
commutativity, idempotency, abstract-data-type, slide, operator, mapreduce, mindset, comparison, parallel, guy-steele,  linear-computing, parallel-computing</p>

<h2>Surviving being senior (tech) management.</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@kellan/surviving-being-senior-tech-management-aa6654efd027">this article</a> by Kellan Elliott-McCrea about the basic things to do as management to retain the best performance:</p>

<ul>
<li>exercise</li>
<li>someone to talk to</li>
<li>discuss with peers, in petit commité</li>
<li>personal mastery project</li>
</ul>


<p>Tags: kellan-elliott-mccrea, kellan, list, management, tip, exercise, pet-project</p>

<h2>You Don’t Need More Free Time</h2>

<p>I&rsquo;ve read <a href="http://www.nytimes.com/2016/01/10/opinion/sunday/you-dont-need-more-free-time.html">this article</a> about the quality of life, work-life balance by Cristobal Young on why the time where we have more fun is spent together, in company.</p>

<p>Tags: cristobal-young, time-management, work-life-balance</p>

<h2>Taking Longer to Reach the Top Has Its Benefits</h2>

<p>​I&rsquo;ve read <a href="https://hbr.org/2015/12/taking-longer-to-reach-the-top-has-its-benefits">this article</a> that explains how having work life balance and preventing burn out syndrome, aided by a patient career, can help with reaching a higher destination on your career. By Karen Firestone</p>

<p>Tags: career-management, patience, burnout, burn-out, ceo, karen-firestone, professional-career, improvement</p>

<h2>All bugs lead to Rome</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@nickbaum/all-bugs-lead-to-rome-505a1205bb9">this article</a> that explains how the author tracks down a bug present in mail communication, just for a handful of client. By Nick Baum</p>

<p>Tags: track-down, bug, defect, mailgun, rot13, nick-baum</p>

<h2>Design Patterns — Coming Full Circle</h2>

<p>I&rsquo;ve read <a href="https://medium.com/swlh/design-patterns-coming-full-circle-d8292e261dc6">this article</a> that explains what a design pattern is, where does it come from, the figure of Christopher Alexander and the architecture design patterns. By Jen Carlile</p>

<p>Tags: design-pattern, christopher-alexander, jen-carlile, comparison, example, proxy, command, observer</p>

<h2>React + Performance = ?</h2>

<p>I&rsquo;ve read <a href="https://aerotwist.com/blog/react-plus-performance-equals-what/">this article</a> by Paul Lewis comparing the performance and developer experience of react.js and vanilla js.</p>

<p>Conclusion: under his measurements, react is too slow once the amount of elements is big on mobile devices</p>

<p>Tags: paul-lewis, comparison, javascript, react, mobile, perfomance, jsperf, js-perf, vanilla-javascript</p>

<h2>Full speed, then stop, gracefully</h2>

<p>I&rsquo;ve read <a href="http://sethgodin.typepad.com/seths_blog/2015/12/full-speed-then-stop.html">this article</a> about how to end professional relationships with an employer or a team.</p>

<p>Makes an analogy to the hockey sport attitude: &ldquo;full speed, then stop&rdquo;</p>

<p>Tags: seth-godin, professional, employer, team-management, team, analogy</p>

<h2>Por qué tendrás que facturar 55.000€ para cobrar una nómina de 26.000€</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive1.com/?u=374c664073e1a1fa3deca53b4&amp;id=7e79a27689">this bonilista</a> by David Bonilla on why freelancers need to bill more to clients to achieve the same (economic) results as being hired by a company.</p>

<p>Tags: david-bonilla, bonilista, freelancer, contractor, employee</p>

<h2>Principles Of Microservices</h2>

<p>I&rsquo;ve watched <a href="https://vimeo.com/131632250">this talk</a> by Sam Newman on microservices at the NDC 2015 at Oslo</p>

<p>Describes a microservice as a small, autonomous services that work together, modelled around a business domain</p>

<p>Microservices can mix technology, persistence stack, idioms, options</p>

<p>reference to the twelve factors (by heroku).</p>

<p>At a client:</p>

<blockquote><p>Design and delivery practices:</p>

<ul>
<li>standard http/rest</li>
<li>encapsulate legacy</li>
<li>eliminate integration databases</li>
<li>consolidate and cleanse data</li>
<li>published integration model</li>
<li>small independent devices</li>
<li>continous deployment</li>
<li>minimal customization of COTS/SAAS</li>
</ul>


<p>Architectural principles:</p>

<ul>
<li>reduce inertia</li>
<li>eliminate accidential complexity</li>
<li>consistent interfaces and data flows</li>
<li>no silver bullets</li>
</ul>


<p>Strategic goals:</p>

<ul>
<li>enable scalable businesses</li>
<li>support entry into new markets</li>
<li>support innovation in existing markets</li>
</ul>
</blockquote>

<p>Principles of microservices:</p>

<ul>
<li>modelled around a business domain</li>
<li>culture of automation</li>
<li>hide implementation details</li>
<li>decentralise all the things</li>
<li>deploy independently</li>
<li>consumer first</li>
<li>isolate failure</li>
<li>highly observable</li>
</ul>


<h3>Notes</h3>

<p>the business domain changes more slowly. find these boundaries (reference to IDDD)</p>

<p>bounded contexts is about concepts which are shared and others who are hidden</p>

<p>consumer driven contracts as a way to express to consumer expectations, written as tests. this is a high-trust pattern (requires it). reduces end to end testing, considerably. Using tools as <a href="http://github.com/realestate">pact</a></p>

<p>parallel change for endpoints (or APIs) for avoiding lock step release (expand contract pattern). high cost to change an API: apply upfront thought to it.</p>

<p>explains about a case writing a strangler application:</p>

<ul>
<li>circuit breakers</li>
<li>one thread pool per application</li>
<li>bulkhead downstream connections</li>
</ul>


<p>references:</p>

<ul>
<li>the book &ldquo;Release It!&rdquo;</li>
<li>the book &ldquo;Implementing Domain-Driven Design (IDDD)&rdquo;</li>
</ul>


<h3>Other</h3>

<p>correlation ids, parent and child ids
extracting information from logs (e.g., kibana, splunk, new relic)
see how services connect to each other based on logs instead of based on documentation</p>

<p>Tags: lock-step-release, autonomy, sam-newman, consumer-driven-contract, team, zookeper, etcd, consul, service-discovery, distributed-consensus, talk, ndc, humane-registry, bulkhead-pattern, circuit-breaker</p>

<h2>The Website Obesity Crisis</h2>

<p>I&rsquo;ve read <a href="http://idlewords.com/talks/website_obesity.htm">this transcription</a> of <a href="http://www.webdirections.org/blog/the-website-obesity-crisis/">this presentation</a> about the increase of weight of websites and how this connects with new needs for automation and other services. How the solution is to keep the pages lightweight and open for everybody to use and learn; without invading our privacy. By Maciej Ceglowski</p>

<p>Tags: obesity, fat-page, slide, transcription, slide-transcription, maciej-ceglowski, simplicity, speed</p>

<h2>Command-line tools can be 235x faster than your Hadoop cluster</h2>

<p>I&rsquo;ve read <a href="http://aadrake.com/command-line-tools-can-be-235x-faster-than-your-hadoop-cluster.html">this article</a> on how using command-line based (<code>find</code>, <code>grep</code>, <code>awk</code>) can have a better performance as compared to Hadoop for a specific case, which is analyzing 2 million chess games. By Adam Drake</p>

<p>Tags: adam-drake, chess, comparison, performance, cli-commands, unix, nix, hadoop, awk</p>

<h2>The Serializable Isolation Level</h2>

<p>I&rsquo;ve read <a href="http://sqlperformance.com/2014/04/t-sql-queries/the-serializable-isolation-level">this article</a> by Paul White about the serializable isolation level and how it is implemented in some databases.</p>

<p>Tags: serializable, isolation level, paul-white, oracle, mssql, database, sql</p>

<h2>Academic Writing With Markdown, Pandoc and Emacs</h2>

<p>I&rsquo;ve read <a href="http://milinda.svbtle.com/academic-writing-with-markdown-pandoc-and-emacs">this article</a> by Milinda Pathirage that explains an alternative way of writing LaTeX in a user-friendly manner, writing markdown then converting it to the output format (he provides <a href="https://gist.github.com/milinda/d9272e67711d324f18ba">such a script</a>).</p>

<p>Tags: latex, milinda-pathirage, academia, research, paper, markdown, script</p>

<h2>Rest, DDD, layers, JSF, microservices sizing a Umejug conversation</h2>

<p>I&rsquo;ve watched <a href="http://www.adam-bien.com/roller/abien/entry/rest_ddd_layers_jsf_a">this talk</a> by Adam Bien on topics related to microservices and architecture. Discusses:</p>

<ul>
<li>What do you think a typical web application should look like? How should it be built?</li>
<li>When using REST, which level of REST is appropriate when, is HATEOAS something to strive for, how to implement it?</li>
<li>Which patterns do you recommend, hexagonal architecture, layers, &hellip;?</li>
<li>What do you think of the DDD strategic and tactical patterns?</li>
<li>Microservices vs right-sized services, is transactions over several services always a bad idea?</li>
<li>When use JSF? Is it still useful?</li>
<li>Entity-Control-Boundary Pattern (ECB) (around <a href="https://youtu.be/VkcLpRs0i0g?t=995">16:37</a>). <a href="http://www.cs.sjsu.edu/~pearce/modules/patterns/enterprise/ecb/ecb.htm">More info</a> on the pattern</li>
</ul>


<p>Tags: hateoas, rest, microservice, pattern, architecture, umejug, hexagonal-architecture, ddd, adam-bien, ecb-pattern, mvc-pattern</p>

<h2>How To Go Remote</h2>

<p>I&rsquo;ve read <a href="http://workdifferent.com/how-to-remote/">this article</a> by Sebastian Kade that explains how to go remote: where the possibility of working anywhere is a luxury, even if it is in an office.</p>

<p>Explains the case of Automattic, some examples of communication, culture. Suggests using some tools to accomplish this cultural change.</p>

<p>Tags: remote-work, sebastian-kade, remote, work, asynchronous-communication, communication, automattic, tool, culture, team-management</p>

<h2>Why Your Company Should Have a Creed</h2>

<p>I&rsquo;ve read <a href="http://ma.tt/2011/09/automattic-creed/">this essay</a> by Matt Mullenweg about the importance of having a company creed (a belief system, ethos), which ideally would be shared by the colleagues. These should be the values that help deciding, when in doubt, so everyone is aligned.</p>

<p>At Automattic, this is theirs (as of September 19th, 2011):</p>

<blockquote><p>I will never stop learning. I won’t just work on things that are assigned to me. I know there’s no such thing as a status quo. I will build our business sustainably through passionate and loyal customers. I will never pass up an opportunity to help out a colleague, and I’ll remember the days before I knew everything. I am more motivated by impact than money, and I know that Open Source is one of the most powerful ideas of our generation. I will communicate as much as possible, because it’s the oxygen of a distributed company. I am in a marathon, not a sprint, and no matter how far away the goal is, the only way to get there is by putting one foot in front of another every day. Given time, there is no problem that’s insurmountable.</p></blockquote>

<p>Tags: quote, matt-mullenweg, automattic, creed, ethos, learning, team-management, startup, communication, essay</p>

<h2>Mob Programming: The Unruly Experience</h2>

<p>I&rsquo;ve read <a href="http://wirfs-brock.com/blog/2015/06/05/mob-programming/">this article</a> by Rebecca Wirfs-Brock on mob programming and the experience report (+ <a href="http://www.xp2015.org/wp-content/uploads/2015/06/TH2.3_Wilson.pdf">slides</a>) at the company called Unruly.</p>

<p>She explains what works for them and what does not.</p>

<p>Also, she makes a difference on complex vs complicated work:</p>

<blockquote><p>complex work (where there is the potential for errors) over complicated work (where the solution is known, but is merely time consuming)</p></blockquote>

<p>Explains some characteristics of learning organizations:</p>

<blockquote><p>Teams in learning organizations perform ongoing experiments. While they settle on a core set of practices, they also try to build upon them. They keep innovating, improving, and reflecting. And how they work continues to evolve.</p></blockquote>

<p>Tags: learning, learning-organization, xp, rebecca-wirfs-brock, mob-programming, pair-programming, complex-work, complicated-work, experience-report, unruly, team-management, team-building, team-dysfunction, comparison</p>

<h2>What You’re Hiding from When You Constantly Check Your Phone</h2>

<p>I&rsquo;ve read <a href="https://hbr.org/2016/01/what-youre-hiding-from-when-you-constantly-check-your-phone">this article</a> by Charlotte Lieberman where she explains the technology-stress paradox and the fact of replacing one addiction with another, as some addictions are more socially than others.</p>

<p>Explains that the constant connection to social media allow us to avoid ourselves, and the connection to mindfulness.</p>

<p>On the paradox:</p>

<blockquote><p>technology-stress paradox: we share the desire for greater freedom from our devices, and yet that very freedom itself causes anxiety</p></blockquote>

<p>On the work-life balance:</p>

<blockquote><p> work-life balance [is]  [&hellip;] about noticing those moments in which you really don&rsquo;t want to deal with yourself</p></blockquote>

<p>Tags: charlotte-lieberman, paradox, quote, social-media, mindfulness, technology-stress-paradox, stress, addiction, time-management</p>

<h2>Testing myth #1: Writing tests slows you down</h2>

<p>I&rsquo;ve read <a href="http://arhohuttunen.fi/testing/testing-myth-1-writing-tests-slows-you-down/">this article</a> by Arho Huttunen on an excuse to not test: there is no time.</p>

<p>In the article, he explains the false assumptions based on that reason and the gains (short term and long term) from doing it.</p>

<p>Tags: arho-huttunen, test, excuse</p>

<h2>BeCodeWeek by José Manuel Beas</h2>

<p>I&rsquo;ve read <a href="http://blog.jmbeas.es/category/becodeweek/">this category of posts</a> by José Manuel Beas about his BeCodeWeek, a desk-surfing experience at BeCode.</p>

<p>Analyses facts and publishes one entry per day detailing his activities.</p>

<p>Tags: becodeweek, jmbeas, jose-manuel-beas, desk-surfing, experience, experience-report, analysis</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><code>What Is Functional Programming?</code><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>many of these fragments are quotes or paraphrased quotes<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
