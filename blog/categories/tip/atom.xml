<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tip | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/tip/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-08-10T01:18:11+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multiple Return Values in a Mockito Stub]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/08/07/multiple-values-in-a-mockito-stub/"/>
    <updated>2015-08-07T11:31:19+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/08/07/multiple-values-in-a-mockito-stub</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been asked today how to return multiple return values from a Mockito Spy, effectively using the spy as a Stub, as well.</p>

<pre><code class="java">package com.example.spike;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

import org.junit.Test;
import org.mockito.Spy;

public class DifferentReturnValues {

    @Spy
    private Spike1 spike1 = new Spike1();


    @Test
    public void spike1() {
        spike1 = spy(spike1);
        when(spike1.getBool()).thenReturn(false, true);

        assertThat(spike1.getBool(), is(false));
        assertThat(spike1.getBool(), is(true));

        assertThat(spike1.getBool(), is(true));
        assertThat(spike1.getBool(), is(true));
    }


    private class Spike1 {
        public boolean getBool() {
            return true;
        }
    }
}
</code></pre>

<p>The key line is:</p>

<pre><code class="java">when(spike1.getBool()).thenReturn(false, true);
</code></pre>

<p>this makes the stubbed function to return multiple values:</p>

<pre><code class="java">assertThat(spike1.getBool(), is(false));
assertThat(spike1.getBool(), is(true));
</code></pre>

<p>The last value is repeated after the last defined value:</p>

<pre><code class="java">@Test
public void spike1() {
    spike1 = spy(spike1);
    when(spike1.getBool()).thenReturn(false, true);

    assertThat(spike1.getBool(), is(false));
    assertThat(spike1.getBool(), is(true));

    assertThat(spike1.getBool(), is(true));
    assertThat(spike1.getBool(), is(true));
}
</code></pre>

<p>If you want to loop over the values, you can implement it with the <code>doAnswer</code> method:</p>

<pre><code class="java">@Test
public void spike1() {
    spike1 = spy(spike1);
    when(spike1.getBool()).thenReturn(false, true);

    final boolean[] value = {true};

    doAnswer(invocation -&gt; {
        value[0] = !value[0];
        return value[0];
    }).when(spike1).getBool();

    assertThat(spike1.getBool(), is(false));
    assertThat(spike1.getBool(), is(true));

    assertThat(spike1.getBool(), is(false));
    assertThat(spike1.getBool(), is(true));
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Massively Reverting Local Changes]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/07/08/tip-massively-reverting-local-changes/"/>
    <updated>2015-07-08T02:40:24+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/07/08/tip-massively-reverting-local-changes</id>
    <content type="html"><![CDATA[<p>I was changing a massive amount of files (>1000) for a repeated code. The search and replace query was not too exact and it broke many tests in the system. For that, I preferred reverting those tests.</p>

<p>Here&rsquo;s how to do it automatically:</p>

<p>Copy all the failing tests to a text editor:</p>

<p>Input:</p>

<pre><code>testSearchXMLDocument(io.company.controller.dms.DocumentControllerTest)
testCreateXMLDocument(io.company.controller.dms.DocumentControllerTest)
testUpdateXFPageMetadata(io.company.controller.dms.DocumentControllerTest)
testCreateDocumentCrop(io.company.controller.dms.DocumentControllerTest)
testUpdateCropMetadata(io.company.controller.dms.DocumentControllerTest)
testDeleteDocument(io.company.controller.dms.DocumentControllerTest)
testUpdateXmlDocumentMetadata(io.company.controller.dms.DocumentControllerTest)
testUpdateXML(io.company.controller.dms.DocumentControllerTest)
testSearchXFPage(io.company.controller.dms.DocumentControllerTest)
testCreateXFPage(io.company.controller.dms.DocumentControllerTest)
testUpdatePage(io.company.controller.dms.DocumentControllerTest)
testSearchCrop(io.company.controller.dms.DocumentControllerTest)
testUpdateCrop(io.company.controller.dms.DocumentControllerTest)
testMoveDocument(io.company.controller.dms.DocumentControllerTest)
testGetDocument(io.company.controller.dms.DocumentControllerTest)
</code></pre>

<p>regex:</p>

<p>(tested in Sublime 3, build 3083, Windows 64)</p>

<p>find what: <code>^[^(]+\([a-Z.]*\.(.*)\)</code></p>

<p>replace with: <code>$1</code></p>

<p>Regex explanation for <code>^[^(]+\([a-Z.]*\.(.*)\)</code>:</p>

<ul>
<li><code>^</code>: beginning of line</li>
<li><code>[^(]+</code>: every character except parenthesis, one or more times</li>
<li><code>\([a-Z.]*</code>: start with one parenthesis, any number of a-z, A-Z</li>
<li>`.&#8220;: a dot, as I&rsquo;m using regex replacement</li>
<li><code>(.*)</code>: any character, zero or more times, captured in group <code>$1</code></li>
<li><code>\)</code>: closing parenthesis</li>
</ul>


<p>Output:</p>

<pre><code>DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
</code></pre>

<p>copy that to file <code>a.txt</code></p>

<p>Revert all the changes in these files:</p>

<pre><code class="bash">for i in $(cat a.txt | uniq); do
  git checkout -- *$i*
done
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Committing to the Repo File by File]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/07/08/tip-committing-to-the-repo-file-by-file/"/>
    <updated>2015-07-08T02:37:08+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/07/08/tip-committing-to-the-repo-file-by-file</id>
    <content type="html"><![CDATA[<p>I was prefer committing to the repo with commits that are as small as possible as long as it makes sense. It makes it much easier to rever the changes.</p>

<p>This is why I have some scripts to commit all the changes, even with the same message. This is one of them:</p>

<pre><code class="bash">for f in $(git status -s |grep "^M"|awk '{print $2}'); do
  git add $f
  git commit -m "generic commit for all files"
done
</code></pre>
]]></content>
  </entry>
  
</feed>
