<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2016-05-06T14:18:49+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Faster Site Generation With a Native Octopress 2]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2016/04/17/faster-site-generation-native-octopress/"/>
    <updated>2016-04-17T21:39:23+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2016/04/17/faster-site-generation-native-octopress</id>
    <content type="html"><![CDATA[<p>Note: this article is an answer to <a href="../../../../2015/07/13/faster-site-generation-for-octopress-2/">a previous one</a>, about the same topic: a tool for a faster site generation while developing / writing articles, using octopress 2.</p>

<h2>Introduction</h2>

<p>Octopress 2 packs, out of the box, some tasks to speed up the site generation while you&rsquo;re writing articles:</p>

<p>Isolate a post:</p>

<pre><code class="ruby"># usage rake isolate[my-post]
desc "Move all other posts than the one currently being worked on to a temporary stash location (stash) so regenerating the site happens much more quickly."
task :isolate, :filename do |t, args|
  stash_dir = "#{source_dir}/#{stash_dir}"
  FileUtils.mkdir(stash_dir) unless File.exist?(stash_dir)
  Dir.glob("#{source_dir}/#{posts_dir}/*.*") do |post|
    system "git update-index --assume-unchanged #{post}" unless post.include?(args.filename)
    FileUtils.mv post, stash_dir unless post.include?(args.filename)
  end
end
</code></pre>

<p>Integrate with the rest of the posts:</p>

<pre><code class="ruby">desc "Move all stashed posts back into the posts directory, ready for site generation."
task :integrate do
  posts_dir = "#{source_dir}/#{posts_dir}/"
  Dir.glob("#{source_dir}/#{stash_dir}/*.*") do |post|
    FileUtils.mv post, posts_dir
    full_path = "#{posts_dir}/#{post.split("/").reverse.first}"
    system "git update-index --no-assume-unchanged #{full_path}"
  end
end
</code></pre>

<h2>Usage</h2>

<p>(at the folder where the Rakefile is located)</p>

<ul>
<li>isolate the selected file. Specify the pattern to keep.</li>
</ul>


<pre><code class="bash">rake isolate["draft"]
</code></pre>

<ul>
<li>write the new content</li>
<li>commit to git</li>
<li>integrate with the rest of the files</li>
</ul>


<pre><code class="bash">rake integrate
</code></pre>

<ul>
<li>git push</li>
</ul>


<h2>Conclusion</h2>

<p>When I needed this tool, to speed up my feedback cycle, I didn&rsquo;t find any that did this job, so I created <a href="../../../../2015/07/13/faster-site-generation-for-octopress-2/">a small tool for this same purpose</a>. Unfortunately, there was one, so close to my nose that I could not find it. I was reinventing the wheel.</p>

<p>It is better to switch to a tool that has been tested by more users, that has received the community&rsquo;s approval than a custom-made tool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Study in April 2016]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2016/04/01/self-study/"/>
    <updated>2016-04-01T00:08:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2016/04/01/self-study</id>
    <content type="html"><![CDATA[<h2>Deliberate Practice: What It Is and Why You Need It</h2>

<p>I&rsquo;ve read this article by Corbett Barr on what is deliberate practice and why it is needed to become an expert in a given domain field.</p>

<p>The four essential components:</p>

<ul>
<li>Motivation</li>
<li>Tailored (practice)</li>
<li>Feedback</li>
<li>Repetion</li>
</ul>


<p>Tags: corbett-barr, deliberate-practice, expert, practice, anders-ericsson, talent, professional-development, career</p>

<h2>10 Features I Wish Java Would Steal From the Kotlin Language</h2>

<p>I&rsquo;ve read <a href="http://blog.jooq.org/2016/03/31/10-features-i-wish-java-would-steal-from-the-kotlin-language/">this list of features</a> that the Kotlin Language has that would be an improvement for the Java language. By Lukas Eder</p>

<p>Tags: list, lukas-eder, kotlin, java, comparison, language, jooq</p>

<h2>How we built Uber engineering&rsquo;s highest query per second service using Go</h2>

<p>I&rsquo;ve read <a href="https://eng.uber.com/go-geofence/">this post</a> by Kai Wei on a microservice they&rsquo;ve built using Go.</p>

<p>Explains the reasons for choosing that algorithm for geofencing, the performance they&rsquo;re achieving, and the architecture.</p>

<p>Tags: uber, go, microservice, performance, geofence, geofencing, rps, go-memory-model, kai-wei</p>

<h2>Unwinding Uber&rsquo;s Most Efficient Service</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@buckhx/unwinding-uber-s-most-efficient-service-406413c5871d">this article</a> by Buck Heroux commenting on the decisions of Uber for building the geofencing microservice (above read).</p>

<p>Explains the different alternatives for algorithms in this problem space and has implemented them in go. Provides a benchmark for comparing those, including a profiling session.</p>

<p>Tags: s2, quadtree, rtree, brute-force, geofence, geofencing, uber, comment, buck-heroux, go, read-on-read, meta-read</p>

<h2>Lawful Hacking and Continuing Vulnerabilities</h2>

<p>I&rsquo;ve read <a href="https://www.schneier.com/blog/archives/2016/03/lawful_hacking_.html">this article</a> by Bruce Schneier on the stance the FBI is taking in regards to vulnerabilities discovered in Apple&rsquo;s devices.</p>

<p>Tags: bruce-schneier, apple, security, fbi, vulnerability, exploit, law, hacking</p>

<h2>A Side Project Helped Jumpstart My Career — Life Learning</h2>

<p>I&rsquo;ve read <a href="https://medium.com/life-learning/a-side-project-helped-jumpstart-my-career-7cd6f8e9b07f">this article</a> by Dave Gerhardt on how making a side project happen affected his life and his skills.</p>

<p>Some of the reasons for doing it include:</p>

<ul>
<li>It forces you to figure stuff out</li>
<li>The only way to learn is by doing</li>
<li>It gets your brain working on something other than your job</li>
<li>You have to create your own network</li>
<li>You are the CEO</li>
</ul>


<p>Tags: long-life-learning, continuous-learning, side-project, dave-gerhardt, drift, professional-development, personal-development, business, career</p>

<h2>Fun Jekyll Tricks</h2>

<p>I&rsquo;ve read <a href="http://www.madebymarket.com/blog/dev/fun-jekyll-tricks.html">this article</a> by Brian Knapp where he explains some tips and tricks of jekyll (in which octopress is based on): speed, deployment, subcategories inside the blog, <em>data, </em>includes.</p>

<p>Tags: brian-knapp, jekyll, octopress, tip-and-trick, improvement, subcategory, meta, automation, deployment</p>

<h2>La ola que llega</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;id=f8a8ee92cc">this bonilista</a> by David Bonilla, where he explains (in Spanish) the &lsquo;contractor&rsquo; phenomenon arriving to Spain, 2-3 years after being in other countries and the effects that this could have both for workers and companies.</p>

<p>Tags: bonilista, david-bonilla, contractor</p>

<h2>10 razones por las que este sábado deberías ir a un code retreat</h2>

<p>I&rsquo;ve read <a href="http://francho.org/2015/11/10/10-razones-para-ir-a-un-coderetreat/">this list</a> of reasons for attending a code retreat, by Francho Joven, who I met in the Global Day Of Code Retreat (GDCR) &lsquo;15 in Zaragoza</p>

<p>Tags: francho-joven, list, zaragoza, code-retreat, gdcr</p>

<h2>Meaningful Work through Passion, not Genius</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=pIYUMwxKFzo">this talk</a> on the importance of hard work and how it can be mistaken as genious. By Malcolm Gladwell</p>

<p>Tags: malcolm-gladwell, passion, genius, work, time-management, productivity, career, mastery-autonomy-purpose</p>

<h2>How to ask your wife for permission to spend $250,000 on a domain name</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@Stockphoto.com/how-to-ask-your-wife-for-permission-to-spend-250-000-on-a-domain-name-c27a3c2852e1">this article</a> by Jon Yau on how they started StockPhoto.com, buying a $250,000 domain name.</p>

<p>Tags: startup, domain, stockphoto, jon-yau</p>

<h2>Sorry, developer bootcamps: I was wrong</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@dillonforrest/sorry-developer-bootcamps-i-was-wrong-ea37fcc5572c">this article</a> by Dillon Forrest on the topic of developer bootcamps. Explains why developers should not be threatened by recent graduates of these programs and describes how people pursuing these programs usually are:</p>

<ul>
<li>Intelligence</li>
<li>Risk appetite</li>
<li>Resilience</li>
<li>Self-investment</li>
<li>Entrepreneurship</li>
<li>Growth trajectory</li>
</ul>


<p>Tags: bootcamp, developer-bootcamp, dev-bootcamp, dillon-forrest, intelligence, risk-appetite, resilience, self-investment, entrepreneurship, growth-trajectory</p>

<h2>The JVM and Java Garbage Collection</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=DoJr5QQYsl8">this webcast</a> about how the JVM garbage collection works. By Michael W Williams</p>

<p>Tags: michael-williams, oracle, webcast, jvm, garbage-collection, gc,</p>

<h2>Files Are Hard</h2>

<p>I&rsquo;ve read <a href="http://danluu.com/file-consistency/">this article</a> on why software that writes on files is difficult, based on the different filesystems that are below, and the operating system. Written by Dan Luu.</p>

<p>Uses software product to find bugs in filesystems</p>

<p>Tags: filesystem, file, dan-luu, analysis</p>

<h2>Applying a ceiling to the bug count</h2>

<p>I&rsquo;ve read <a href="https://techblog.king.com/applying-a-ceiling-to-the-bug-count/">this interview</a>, written by Susanna Berg, on how King has reduced the amount of bugs in their backlog using an agile technique, measuring and setting a limit.</p>

<p>Tags: susanna-berg, king, agile, bug, bug-count, defect, defect-count, per-malmen</p>

<h2>Coming up in 2016: Spring Framework 4.3 &amp; 5.0</h2>

<p>I&rsquo;ve read <a href="https://spring.io/blog/2015/08/03/coming-up-in-2016-spring-framework-4-3-5-0">this announcement</a> of Spring&rsquo;s new release, 5.0, which will require java 8 and will turn most of the features into the reactive programming paradigm. By Juergen Hoeller.</p>

<p>Tags: juergen-hoeller, spring, reactive-programming, release, announcement</p>

<h2>Why offices are where work goes to die</h2>

<p>I&rsquo;ve read <a href="http://swizec.com/blog/why-offices-are-where-work-goes-to-die/swizec/6695">this article</a> by Swizec Teller explaining the downsides of working in an office as compared to working remotely.</p>

<p>Tags: swizec-teller, remote, home-office, office, comparison, time-management</p>

<h2>The Myth of the Passionate Developer</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@bm2yogi/the-myth-of-the-passionate-developer-76a41d457304">this article</a> by Michael Ibarra on what are the implications of being a passionate developer, how it affects your tasks and what are the factors to a job.</p>

<p>Tags: michael-ibarra, passion, development, job, motivation, myth</p>

<h2>Mossack Fonseca Breach – WordPress Revolution Slider Plugin Possible Cause</h2>

<p>I&rsquo;ve read <a href="https://www.wordfence.com/blog/2016/04/mossack-fonseca-breach-vulnerable-slider-revolution/">this article</a> by Mark Maunder, which describes an hypothesis on how the Mossack Fonseca breach could have happened. Also describes and shows how to breach a Wordpress installation with a vulnerable Revolution Slider plugin.</p>

<p>Tags: mark-maunder, security, breach, mossack-fonseca-breach, mossack-fonseca, hypothesis, attack, plugin, revolution-slider, wordpress</p>

<h2>Tim Urban: Inside the mind of a master procrastinator</h2>

<p>I&rsquo;ve watched <a href="https://www.ted.com/talks/tim_urban_inside_the_mind_of_a_master_procrastinator">this TED talk</a> from Tim Urban on how the procrastinator&rsquo;s mind works, exemplified by his own career.</p>

<p>Tags: procrastinator, procrastination, mind, time-management, tim-urban</p>

<h2>PEP 20 &ndash; The Zen of Python</h2>

<p>I&rsquo;ve read <a href="https://www.python.org/dev/peps/pep-0020/">the PEP20</a>, the zen of python, with special attention to this:</p>

<blockquote><p>Explicit is better than implicit.</p></blockquote>

<h2>Why I switched from Octopress 2 to Hugo</h2>

<p>I&rsquo;ve read <a href="http://conscientiousprogrammer.com/blog/2015/05/31/why-i-switched-from-octopress-2-to-hugo/">this article</a> by Franklin Chen on the change he made on the static site generator (SSG) he used. He considered hakyll, octopress, jekyll, hugo. Was decided between hakyll and hugo for their speed but, finally, decided to use hugo for their bigger community.</p>

<p>Tags: franklin-chen, comparison, ssg, static-site-generator, hakyll, octopress, jekyll, hugo, change, speed, statically-typed, dynamically-typed, golang, performance</p>

<h2>Why incremental regeneration in Jekyll 3.0 is such a big deal</h2>

<p>I&rsquo;ve read <a href="http://idratherbewriting.com/2015/11/04/jekyll-30-released-incremental-regeneration-rocks/">this article</a> by Tom Johnson on one of the new features that jekyll 3.0 brings: incremental generation. How this can speed up the generation</p>

<p>Tags: tom-johnson, incremental-generation, speed, performance, octopress-2, octopress-3, jekyll-3</p>

<h2>Hugo, S3, Travis CI, oh boy!</h2>

<p>I&rsquo;ve read <a href="http://continuousfailure.com/post/s3_blog/">this guide</a> by Alan Scherger on how to set up a specific stack for developing and deploying a static site blog.</p>

<p>Tags: alan-scherger, static-site-generator, ssg, travis, hugo, s3</p>

<h2>Deploy your blog to github pages automatically using Hugo and Travis</h2>

<p>I&rsquo;ve read <a href="http://rcoedo.com/post/hugo-static-site-generator/">this article</a> by Roman Coedo on how to deploy a hugo blog to github pages, using travis.</p>

<p>Tags: roman-coedo, travis, hugo, github, github-pages, ssg, static-site-generator</p>

<h2>Improve Octopress with Advanced Tweaks &amp; Tips</h2>

<p>I&rsquo;ve read <a href="https://www.narga.net/improve-octopress-advanced-tweaks-tips/">this list</a> of tips on how to improve the octopress (2) installation. By Nguyễn Đình Quân.</p>

<p>Tags: nguyen-dinh-quan, octopress-2, tip, tweak</p>

<h2>Laboratorios</h2>

<p>I&rsquo;ve read <a href="http://www.presionblogosferica.com/2014/11/12/laboratorios/">this article</a> by Ángel Medinilla, about laboratories to use a percentage of company time to investigate, innovate, learn and improve.</p>

<p>Tags: angel-medinilla, team-management, time-management, innovation, strategy, improvement, kaizen, laboratory, craftsmanship, spanish</p>

<h2>What Refactoring is, and what it isn’t</h2>

<p>I&rsquo;ve read <a href="http://swreflections.blogspot.com/2012/04/what-refactoring-is-and-what-it-isnt.html">this article</a> by Jim Bird, where he splits some practices into refactoring and not refactoring. Draws the line between these two different activities.</p>

<p>Also cites scratch refactoring.</p>

<p>Tags: jim-bird, scratch-refactoring, refactoring, martin-fowler, kent-beck, definition, quote, design</p>

<h2>Pitfalls of Unlimited Vacations</h2>

<p>I&rsquo;ve read <a href="http://haacked.com/archive/2016/02/18/unlimited-vaction-pitfalls/">this article</a> by Phil Haack on the github, travis and netflix policies about unlimited vacations and the effects they have on the employees.</p>

<p>Also about minimum vacation periods, (paternity) paid leave.</p>

<p>Tags: phil-haack, unlimited-vacation, holiday, vacation, team-management, burnout, github, travis, netflix, policy</p>

<h2>Cultura Corporativa</h2>

<p>I&rsquo;ve read <a href="http://www.presionblogosferica.com/2011/02/06/cultura-corporativa/">this article</a> by Ángel Medinilla about the corporate culture, and how &ldquo;hanging a highly interchangeable sentence on a wall&rdquo; does not represent it.</p>

<p>Tags: angel-medinilla, corporate culture, spanish</p>

<h2>What It’s Really Like to Learn to Code</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@sandjar/what-it-s-really-like-to-learn-to-code-53f6d9156a32">this article</a> that explains firsthand how it is to learn programming for a novice student,even with a strong financial background and having completed a university degree. By Sandjar Kozubaev</p>

<p>Tags: sandjar-kozubaev, learning, programming, student, firsthand, coding, story</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Study in March 2016]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/"/>
    <updated>2016-03-02T10:58:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016</id>
    <content type="html"><![CDATA[<h2>Learning Programming Isn’t That Hard, Deep Work Is Hard</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@benedictfritz/learning-programming-isn-t-that-hard-deep-work-is-hard-40a4cf3104f4">this article</a> by Benedict Fritz on two types of work (i.e., deep and shallow) and how programming is of the deep type. He links the difficulty of learning to program to the difficulty of practicing deep work.</p>

<p>Tags: analogy, benedict-fritz, deep-work, shallow-work, learn-to-program, psychology</p>

<h2>BeCodeWeek by Yeray Darias</h2>

<p>I&rsquo;ve read <a href="http://developerscookbook.blogspot.com.es/search/label/desk-surfing">this category of posts</a> by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.</p>

<p>Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc</p>

<p>Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis</p>

<h2>BeCodeWeek by Yeray Darias</h2>

<p>I&rsquo;ve read <a href="http://developerscookbook.blogspot.com.es/search/label/desk-surfing">this category of posts</a> by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.</p>

<p>Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc</p>

<p>Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis</p>

<h2>Tracer Bullets</h2>

<p>I&rsquo;ve read <a href="http://c2.com/cgi/wiki?TracerBullets">this page</a> about tracer bullets, an analogy from the military warfare to a software project.</p>

<p>Serves the purpose of adjusting the aim of the cannon to better reach the target.</p>

<p>Tags: analogy, metaphor, warfare, management</p>

<h2>Cohesion - the cornerstone of software design</h2>

<p>I&rsquo;ve read <a href="http://codurance.com/2016/03/03/cohesion-cornerstone-software-design/">this article</a> by Sandro Mancuso on the topic of cohesion. Describes the 7 types of cohesion, as described in Structured Design<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, from worst to best:</p>

<ul>
<li>Coincidental cohesion</li>
<li>Logical cohesion</li>
<li>Temporal cohesion</li>
<li>Procedural cohesion</li>
<li>Communicational/informational cohesion</li>
<li>Sequential cohesion</li>
<li>Functional cohesion</li>
</ul>


<p>and about Design-Level Cohesion:</p>

<ul>
<li>Coincidental relation (R1)</li>
<li>Conditional relation (R2)</li>
<li>Iterative relation (R3)</li>
<li>Communication relation (R4)</li>
<li>Sequential relation (R5)</li>
<li>Functional (R6)</li>
</ul>


<p>Tags: cohesion, codurance, edward-yourdon, larry-constantine, list, sandro-mancuso, software-design, design-level-cohesion, smc-cohesion, dlc-cohesion</p>

<h2>Etsy CTO Q&amp;A: We Need Software Engineers, Not Developers</h2>

<p>I&rsquo;ve read <a href="http://thenewstack.io/etsy-cto-qa-need-software-engineers-not-developers/">this interview</a> with John Allspaw, where they explain the onboarding experience for new hires at Etsy, the DevOps philosophy and the need for engineering skills, more than developer skills. This can be exemplified in the need to know more, defining the boundaries of your job and finding the right tool for the job.</p>

<p>Tags: devops, interview, q-and-a, john-allspaw, etsy, onboarding, hire, team-management, deploy</p>

<h2>Frequency Reduces Difficulty</h2>

<p>I&rsquo;ve read <a href="http://martinfowler.com/bliki/FrequencyReducesDifficulty.html">this article</a> by Martin Fowler on why we should repeat things that are difficult for us:</p>

<ul>
<li>Perfectioning the technique</li>
<li>Internalizing the details</li>
<li>Easing its automation</li>
</ul>


<p>Tags: martin-fowler, automation, process, perfection, internalizing, technique, detail, process-theory, agile</p>

<h2>Lambdas are confusing</h2>

<p>I&rsquo;ve watched this video where Coman Hamilton from JAXenter interviews Dr. Heinz Kabutz about Java&rsquo;s lambda syntax. Cites the problem with exceptions, generics, method overloading.</p>

<p>Tags: java, lambda, coman-hamilton, jaxenter, heinz-kabutz, problem</p>

<p><a href="https://www.youtube.com/watch?v=WcHom1eVhi4&amp;feature=youtu.be">https://www.youtube.com/watch?v=WcHom1eVhi4&amp;feature=youtu.be</a></p>

<h2>El full-stack developer en 2016</h2>

<p>I&rsquo;ve read <a href="http://www.developerdepueblo.com/development/full-stack-developer-2016/">this article</a> by Jose Ignacio Andrés about the job descriptions of 2016.</p>

<blockquote><p>El principal valor de un full-stack es poder simplificar el trabajo a los demás miembros del equipo.</p></blockquote>

<p>My translation:</p>

<blockquote><p>The main value of a full-stack developer is to be able to simplify other teammates' work</p></blockquote>

<p>Tags: teamwork, teammate, fullstack, simplification, work, team-management, jose andres</p>

<h2>I am a software craftsman</h2>

<p>I&rsquo;ve read <a href="http://www.dirv.me/i-am-a-software-craftsman/index.html">this article</a> by Daniel Irvine about calling yourself a craftsman or not. He says that if you adhere to their values, you should.</p>

<p>Tags: craftsmanship, label, daniel-irvine, craftsman, group-belonging</p>

<h2>Teaching Programming Languages in a Post-Linnaean Age</h2>

<p>I&rsquo;ve read <a href="http://cs.brown.edu/~sk/Publications/Papers/Published/sk-teach-pl-post-linnaean/paper.pdf">this paper</a> by Shriram Krishnamurthi where he explains the need for books like <a href="http://www.plai.org/">PLAI</a>:</p>

<ul>
<li>lack of paradigms in new languages, and its separation (or lack of)</li>
<li>design of languages cheaper and cheaper these days</li>
<li>rigor level in publications</li>
<li>inductive and deductive learning</li>
</ul>


<h2>Notes</h2>

<p><code>post-Linnaean</code> refers to the <a href="https://en.wikipedia.org/wiki/Carl_Linnaeus">Carl Linnaeus</a>:</p>

<blockquote><p>He is known as the father of modern taxonomy</p></blockquote>

<p>Tags: inductive-learning, deductive-learning, dsl, domain-specific-language, type-soundness, continuation-style, garbage-collection, reactive-programming, scheme, plai, teaching, programming-language, shriram-krishnamurthi</p>

<h2>Lazy Ruby</h2>

<p>I&rsquo;ve read <a href="http://sonnym.github.io/2014/04/05/lazy-ruby/">this article</a> by sonnym about using ruby&rsquo;s lazy (non-strict) features, detailing an example with Fibonacci&rsquo;s sequence.</p>

<p>Tags: laziness, strictness, non-strictness, ruby, fibonacci, comparison</p>

<h2>Jessica Livingston</h2>

<p>I&rsquo;ve read <a href="http://paulgraham.com/jessica.html">this essay</a> by Paul Graham about his co-founder at the Y-combinator: Jessica Livingston. She was considered the Social Radar at YC</p>

<p>The essay also talks about the non-existent separation between working hours and not and about her implication and personality.</p>

<p>Tags: jessica-livingston, paul-graham, y-combinator, feminism, yc, essay</p>

<h2>Four Laws Of Software Economics (Part 1)</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@RichMironov/four-laws-of-software-economics-part-1-e162aa0ea9e5">this article</a> by Rich Mironov on why the development team will never be big enough (because of economics, because there are more things to be done than time to do them, so we have to prioritize them) and about the communication problems between the dev team and the client(s).</p>

<p>Also talks about the general personality of clients and devs and task prioritization</p>

<p>Tags: exclusive-or, magical-thinking, tnstaafl, management, agile, team, capacity, death-march, estj, intp, software-economics, product-strategy, law-of-ruthless-prioritization, law, rich-mironov, slack, myers-briggs-type</p>

<h2>You Should Take A Codecation</h2>

<p>I&rsquo;ve read <a href="https://robots.thoughtbot.com/you-should-take-a-codecation">this article</a> by Ben Orenstein explaining what is a codecation and what he&rsquo;s done in the two codecations he&rsquo;s taken.</p>

<p>Tags: codecation, ben-orenstein, vacation, holiday, coding, shipping, in-company</p>

<h2>Giving Up on TDD</h2>

<p>I&rsquo;ve read <a href="http://iansommerville.com/systems-software-and-technology/giving-up-on-test-first-development/">this article</a> by Ian Sommerville about the problems he&rsquo;s found while doing TDD, mainly about design, but also about being conservative in the amount of tests you allow yourself to break while refactoring.</p>

<p>Tags: tdd, ian-sommerville, refactoring, problem, design-problem, design, giving-up-tdd</p>

<h2>Giving Up on TDD - answer</h2>

<p>I&rsquo;ve read <a href="http://blog.cleancoder.com/uncle-bob/2016/03/19/GivingUpOnTDD.html">this article</a> by Robert C. Martin on the common issues for people adopting TDD:</p>

<ul>
<li>The Fragile Test Problem</li>
<li>The Design Problem</li>
<li>The Testable Design Problem</li>
<li>The Magic Bullet Problem</li>
</ul>


<p>This article is an answer to another by Ian Sommerville.</p>

<p>Tags: tdd, uncle-bob, robert-martin, adoption, ian-sommerville, fragile-test-problem, giving-up-tdd, design-problem, testable-design-problem, magic-bullet-problem</p>

<h2>Seek out jobs with fast learning cycles</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@sarahtavel/seek-out-jobs-with-fast-learning-cycles-f923c8d8a4be#.7bxx65a4x">this article</a> by Sarah Tavel on learning on the job and how fast these learning cycles can happen at companies at different stages of maturity.</p>

<blockquote><p>So if you’re thinking of changing jobs, or taking your first, my advice: find a place with a fast learning cycle, and a steep learning curve.</p></blockquote>

<p>Tags: learning, job, hypothesis, sarah-tavel, learning-cycle, maturity-level, learning-process, product-management</p>

<h2>Clean Code Vs. Implementation Patterns</h2>

<p>I&rsquo;ve read <a href="http://blog.xebia.com/clean-code-vs-implementation-patterns/">this comparison</a> of Clean Code vs Implementation Pattern books, by Vincent Partington.</p>

<p>In it, the author explains the differences in style in both books, and how they compare to others.</p>

<p>Tags: clean-code, implementation-patterns, comparison, book-review, book-comparison, vincent-partington</p>

<h2>Stuck in Traffic vlog #103 - New Spammer Techniques</h2>

<p>I&rsquo;ve seen <a href="https://www.peerlyst.com/posts/stuck-in-traffic-vlog-103-new-spammer-techniques-j-wolfgang-goerlich">this vlog entry</a> on machines fighting machines (exemplified with the spam producing and filtering) and how some spammers are trying more direct techniques focusing on higher-value targets, sometimes even handcrafting messages and modifying them every few units.</p>

<p>Tags: wolfgang-goerlich, spam, vlog, spammer, machine-learning</p>

<h2>Becoming A Finisher</h2>

<p>I&rsquo;ve read <a href="http://christopherdbui.com/becoming-a-finisher/">this article</a> by Christopher Bui where he explains that projects that are too ambitious stall your productivity and make you lose your focus.</p>

<p>Tags: christopher-bui, pomodoro, time-management, productivity, motivation, ambition, paul-graham, quote</p>

<h2>Hanging around with red-black tree implementations: the beginnings</h2>

<p>I&rsquo;ve read <a href="http://blog.fraixed.es/post/hanging-around-red-black-trees-implementations/">this article</a> by Ivan Fraixedes where he details the progress of implementing a red-black tree, and also his motivation for doing it.</p>

<p>Tags: ivan-fraixedes, red-black-tree, abstract-data-structure, adt, deliberate-practice, pet-project</p>

<h2>Some Tools for Faster Blogging in Octopress</h2>

<p>I&rsquo;ve read <a href="http://dgmstuart.github.io/blog/2015/03/27/some-tools-for-faster-blogging-in-octopress/">this article</a> for tips and tricks on how to blog faster with octopress. Written by Duncan Stuart.</p>

<p>Tags: duncan-stuart, blog, improvement, meta, octopress, tip-and-trick</p>

<h2>The veil of ignorance</h2>

<p>I&rsquo;ve read <a href="http://mrmrs.io/writing/2016/03/23/the-veil-of-ignorance/">this article</a> by Adam Morse on how not being on the top of the skills performance can affect your design and your user experience. Also, references the concept of &ldquo;The Veil of Ignorance&rdquo;, a concept by John Rawls.</p>

<p>Tags: john-rawls, veil-of-ignorance, user-experience, design</p>

<h2>To Smile Again &ndash; Recovering from the paralysis of burnout</h2>

<p>I&rsquo;ve read <a href="https://m.signalvnoise.com/to-smile-again-ae0ba9f2198c">this article</a> by Jamis Buck on his story of burnout, what symptoms had on him and how he got out of it.</p>

<p>Tags: burnout, jamis-buck, psychology, productivity, personal, story, analogy</p>

<h2>Beyond email: could startup Slack change the way you work?</h2>

<p>I&rsquo;ve read <a href="http://www.theguardian.com/technology/2016/mar/25/slack-butterfield-emoji-chat-nasa-harvard-silicon-valley">this article</a> on Slack&rsquo;s office culture, with their diversity, policies and values after a high people growth in a short period of time. By Jemima Kiss</p>

<p>Tags: culture, office-culture, slack, jemima-kiss</p>

<h2>Slack: Work This Way</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@iaintait/slack-work-this-way-9221284472dd">this article</a>, a response to my above read, about the office culture at Slack.</p>

<p>Tags: iain-tait, response, slack, office-culture</p>

<h2>BEM 101</h2>

<p>I&rsquo;ve read <a href="https://css-tricks.com/bem-101/">this introduction</a> to a CSS style called Block, Element, Modifier methodology (BEM).</p>

<p>In it,</p>

<blockquote><ul>
<li>a block is a top-level abstraction of a new component</li>
<li>Child items, or elements, can be placed inside and these are denoted by two underscores following the name of the block [&hellip;].
modifiers can manipulate the block so that we can theme or style that particular component without inflicting changes on a completely unrelated module. This is done by appending two hyphens to the name of the block [&hellip;].</li>
</ul>
</blockquote>

<p>By Joe Richardson, Robin Rendle et al.</p>

<p>Tags: joe-richardson, robin-rendle, bem, css, css-methodology, introduction, css-architecture, sass</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Structured Design: Fundamentals of a Discipline of Computer Program and Systems Design by Yourdon and Constantine.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Study in February 2016]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/"/>
    <updated>2016-02-01T00:55:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016</id>
    <content type="html"><![CDATA[<h2>Software and all that comes with it</h2>

<p>I&rsquo;ve read <a href="http://lanyrd.com/2011/fromthefront/sgfgw/">these slides</a> about creating software and asking questions to deliver value, by Alberto Brandolini</p>

<p>Tags: alberto-brandolini, software, slide, team-management, agile</p>

<h2>Driving your DBA crazy in 3 easy steps</h2>

<p>I&rsquo;ve read <a href="http://lanyrd.com/2011/ddd-day-it/shzym">these slides</a> about dealing with the knowledge that is present in the database, not expressed in ubiquitous language and cause of the low bus factor, by Alberto Brandolini</p>

<p>Analogy between the movie The Shining and a model / entities / aggregates.</p>

<p>Tags: ddd, model, entity, aggregate, team-management, dba, agile, ubiquitous-language, alberto-brandolini, bus-factor, slide</p>

<h2>Shorter Feedback is not Always Bett</h2>

<p>I&rsquo;ve read <a href="https://facebook.com/notes/kent-beck/shorter-feedback-is-not-always-bett/1097086386990891">this note</a> from Kent Beck on why shorter feedback loops might not always be better. I.e., why some processes take time to set in and results are not observable until that time.</p>

<p>Tags:  kent-beck, feedback-loops, open-question, analogy</p>

<h2>La Regla del Triple Check para ir a eventos</h2>

<p>I&rsquo;ve read <a href="http://www.bonillaware.com/regla-triple-check-para-ir-a-eventos">this article</a> by David Bonilla about a rule to help you decide attendance to events, in Spanish</p>

<p>Tags: rule, time-management, david-bonilla, event, spanish, triple-check</p>

<h2>An interview with Charles Wetherell</h2>

<p>I&rsquo;ve read <a href="http://demin.ws/blog/english/2012/08/25/interview-with-charles-wetherell/">this interview</a> by Alexander Demin about the interviewee&rsquo;s book &ldquo;Etudes for Programmers&rdquo;. In it, they talk about the origin of the études, the author&rsquo;s research interests and activities. Also about the book (written in 1978) and how computer science has changed since then.</p>

<p>When asked about three things a programmer should know:</p>

<blockquote><p>Some ability to do formal mathematics. The level necessary to understand Hopcroft and Ullman combined with a little graph theory is enough. Discrete mathematics is essential; calculus is only necessary for folks working in special application areas.</p>

<p>Some ability to write clearly in their native language. Dijkstra said that if a person couldn’t write their own language, they couldn’t write a correct program. (Well, that’s what I hope Dijkstra said!). Writing programs is essentially the same as writing a non-fiction essay. If you can’t make the step-by-step connections clearly in your own language, why would we think you could in C, for example?</p>

<p>Remember that a program is primarily for communication with humans, not computers. When you write a program, the computer will do whatever you say. You must convince the humans who read the program that what you have asked the computer to do is the correct thing to do. Remember, the computer doesn’t care about correctness.</p>

<p> The answer to the last question means that programs should always have the form of paragraphs of comments that describe the intention of the program followed by paragraphs of code that implement that intention. All of the formatting should be designed to make readers as able as possible to read the code easily; the compiler doesn’t care. In particular, follow conventions of mathematics and your native language, not those you found in some random language manual. Write the comments first and then write the code, not the other way around. If you don’t know what you want to achieve and why, any code you write is, by definition, incorrect.</p></blockquote>

<p>Tags: charles-wetherell, alexander-demin, interview, book, etude, etudes-for-programmers, practice, ability, skill, list</p>

<h2>How to fix Javascript… maybe</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@wob/how-to-fix-javascript-maybe-8857819bfa16">this article</a> by Drew Hamlett about the lack of style guide for javascript and how this affects the adoption of the language and the sprout of similar libraries.</p>

<p>Suggests the creation of a standard style guide for javascript.</p>

<p>Tags: drew-hamlett, javascript, style-guide, analysis</p>

<h2>Isomorphic JavaScript: #DevBeat Master Class</h2>

<p>I&rsquo;ve read <a href="http://www.slideshare.net/spikebrehm/a-28174727">these slides</a> by Spike Brehm on Isomorphic JavaScript and why it&rsquo;s important: initial pageload and speed, reducing effort and duplication, SEO (crawlability).</p>

<p>Tags: isomorphic-javascript, isomorphism, javascript, seo, crawler, frontend, app, application, fat-client, fat-server, thin-client, thin-server, ria-spike-brehm, slide</p>

<h2>Open-sourcing our docker images</h2>

<p>I&rsquo;ve read <a href="http://blog.modulus.io/open-sourcing-our-docker-images">this article</a> by Brandon Cannaday about the Docker images that they have.</p>

<p>Tags: docker, brandon-annaday, open-ource, image, container, modulus</p>

<h2>growing up in an open source world</h2>

<p>I&rsquo;ve read <a href="http://fiveisprime.me/2015/02/18/growing-up-in-open-source/">this article</a> by Matt Hernandez where he explains that fixing the style guide can limit your creativity and how the software is written in enterprise and open-source environments.</p>

<p>Also about how developers grow when exposed to different style guides.</p>

<p>Tags: style-guide, matt-hernandez, creativity, dreyfus-model, enterprise, open-source, programming</p>

<h2>Hanlon&rsquo;s Razor and working with young engineers</h2>

<p>I&rsquo;ve read <a href="http://fiveisprime.me/2013/07/27/young-engineers/">this article</a> by Matt Hernandez on the importance of understanding (and empathising) towards others' positions and worries.</p>

<p>Cites the Hanlon Razor:</p>

<blockquote><p>Never attribute to malice that which is adequately explained by ignorance.</p></blockquote>

<p> Tags:  hanlon-razor, empathy, team-management, ignorance, malice, matt-hernandez</p>

<h2>Intro to sails.js</h2>

<p>I&rsquo;ve watched <a href="https://youtu.be/GK-tFvpIR7c">this video</a>, an introduction to the sails.js framework: a realtime nodejs server for creating REST APIs, inspired by Ruby on Rails.</p>

<p>Tags: sailsjs, ruby-on-rails, ror, framework, video, introduction, mvc, rest-api, realtime, nodejs,</p>

<h2>Node.js and hapi - creating a rest api</h2>

<p>I&rsquo;ve read <a href="http://blog.modulus.io/nodejs-and-hapi-create-rest-api">this article</a> about creating a REST API using <a href="http://hapijs.com/">Hapi</a>, a nodejs framework. Written by Matt Hernandez</p>

<p>Tags: matt-hernandez, rest-api, nodejs, hapi, framework</p>

<h2>Introducing Pokedex.org: a progressive webapp for Pokémon fans</h2>

<p>I&rsquo;ve read <a href="http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org">this article</a> by Nolan Lawson about the challenge of having a 60 fps application on a mobile device, making it offline.</p>

<p>Uses Angular 2, javascript 7, PouchDB as well as LocalForage for storage. All processing on WebWorkers, except for DOM manipulation.</p>

<p>Tags: angular-2, javascript-7, angular, javascript, pouchdb, localforage, cloudant, 60fps, mobile, app, offline-first, offline, pokemon, api, nolan-lawson, web-worker, flip-technique, css, progressive, pokedex, svgomg, frontend</p>

<h2>LambdaConf 2015 - How to Learn Haskell in Less Than 5 Years Chris Allen</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=Bg9ccYzMbxc">this video</a> by Chris Allen on how to learn haskell, what are some common pitfalls while learning it and how learning and teaching (it) are different.</p>

<p>Talks about his (with a coauthor) book, focused on not reducing the readers that make it to the end and, finally, increasing the amount of haskell users.</p>

<p>References <a href="https://yow.eventer.com/yow-2014-1222/stop-treading-water-learning-to-learn-by-edward-kmett-1750">this talk</a> by Kmett.</p>

<p>Tags: chris-allen, haskell, learning-to-learn, meta-learning, lambda-conf, talk</p>

<h2>Extreme Continuous Delivery - at Unruly</h2>

<p>I&rsquo;ve read <a href="http://www.xpdays.de/2014/downloads/002-extreme-continuous-delivery-at-unruly/cd_javaone.pdf">these slides</a> about how the company Unruly does continuous delivery (CD), maximizing business value, minimizing time to market (TTM). Also describes how they do deployments and how to organize teams.</p>

<p>References: Extreme Programming Explained (Beck), Continuous Delivery (Humble &amp; Farley)</p>

<p>Tags: silo, team-management, culture, continuous-delivery, tdd, nagdd, shared-infrastructure, acceptance-testing, module-testing, conway-law, cross-pollination, continuous-investment, slide</p>

<h2>Building chat applications and robots for Skype</h2>

<p>I&rsquo;ve read <a href="https://opensourcehacker.com/2013/03/28/building-chat-applications-and-robots-for-skype/">this article</a> on building robots for skype. By Mikko Ohtamaa</p>

<p>Tags: skype, robot, bot, mikko-ohtamaa, slack, integration, api</p>

<h2>Why I never wrote down our company values</h2>

<p>I&rsquo;ve read <a href="https://medium.com/swlh/why-i-never-wrote-down-our-company-values-8143520497e8">this article</a> by Mikael Cho on the subject of having company values, preaching or writing them down. Also, what happens when hard times come, regarding your values.</p>

<p>Tags: mikael-cho, value, company-value, analogy</p>

<h2>Interview with Jesper Louis Andersen about Erlang, Haskell, OCaml, Go, Idris, the JVM, software and protocol design </h2>

<p>I&rsquo;ve read this interview (<a href="https://medium.com/this-is-not-a-monad-tutorial/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-b0de06440fbd">part 1</a>, <a href="https://medium.com/this-is-not-a-monad-tutorial/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-5628fe591295">part 2</a>) to Jesper Louis Andersen, interviewed by Federico Carrone.</p>

<p>The first part is about a comparison of languages, what/why he uses them, and protocol design. The second is more about the Erlang language, the BEAM VM, and some experiences.</p>

<p>Tags: federico-carrone, erlang, interview, jesper-andersen, jesper-louis-andersen, haskell, ocaml, go, idris, the-jvm, protocol-design, software-design, language, functional-programming, protocol, land-of-lisp, northern-war</p>

<h2>Migrating to Hugo From Octopress</h2>

<p>I&rsquo;ve read <a href="http://nathanleclaire.com/blog/2014/12/22/migrating-to-hugo-from-octopress/">this guide</a> by Nathan LeClaire on migrating the blog from Octopress to Hugo</p>

<p>Tags: static-site-generator, hugo, go, octopress, ruby, jekyll, nathan-leclaire, migration, blog, meta</p>

<h2>Dynamic Static Site Generators strategies</h2>

<p>I&rsquo;ve read <a href="https://timnash.co.uk/dynamic-static-site-generators-strategies/">this article</a> explaining what are static site generators, and an example with Jekyll. By Tim Nash</p>

<p>Tags: tim-nash, static-site-generator, jekyll, strategy, explanation, comparison</p>

<h2>Blog like a confused hacker</h2>

<p>I&rsquo;ve read <a href="https://timnash.co.uk/using-wordpress-static-site-generator/">this article</a> by Tim Nash on what tools he recomends for static site generation.</p>

<p>Tags: tim-nash, static-site-generator, jekyll, hide, strategy, explanation, comparison, sublime, wordpress, amazon-s3, cdn</p>

<h2>Resolving the Frontend/Backend API Design Conflict</h2>

<p>I&rsquo;ve read <a href="http://launchany.com/resolving-the-frontendbackend-api-design-conflict/">this article</a> that explains the &ldquo;Backend for Frontend&rdquo; (BFF) pattern, for solving the different needs of data depending on each device / client. By James Higginbotham</p>

<p>Tags: james-higginbotham, bff, pattern, backend-for-frontend, api, soa, microservice, frontend, backend, architecture</p>

<h2>What If We Forget To Write The Tests?</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=f70f14b644&amp;e=4a925444f9">this article</a> by J. B. Rainsberger on the trust issues related to starting to use a new methodology (TDD in this case) and how to see what impacts it might have in your day to day.</p>

<p>Tags: j-b-rainsberger, j-brains, rainsberger, tdd, motivation, team-management</p>

<h2>API microservices, the Unix philosophy, and the Richardson Maturity Model - a practical perspective</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@chrstphrhrt/microservices-the-unix-philosophy-and-the-richardson-maturity-model-425abed44826">this article</a> by Chris Hart on why startups and companies alike should be careful when choosing th latest technology and how this applies to microservices.</p>

<p>Tags: microservice, chris-hart, startup, analysis, company, technical-debt, bounded-context, ddd, rest-api</p>

<h2>Effective programming</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@sebas5384/effective-programming-d7e5bb2f3b80">this article</a> by Sebastian Ferrari on the importance of clean code, systems thinking and functional programming.</p>

<p>Specifies the important difference between effectiveness and efficiency.</p>

<p>Links to this talk by <a href="https://youtu.be/OqEeIG8aPPk">Russ Ackoff</a>. States the difference between &ldquo;the right thing&rdquo; and &ldquo;the thing right&rdquo;, by Drucker.</p>

<p>Tags: drucker, thing-right, right-thing, sebastian-ferrari, system-thinking, russ-ackoff, video, ted, difference, clean-code, functional-programming</p>

<h2>Learning how to learn</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@thejameskyle/learning-how-to-learn-7f04d6f42c1e">this article</a> by James Kyle about the &ldquo;how to learn&rdquo; as one important skill for programmers and how having the solution at a few keystrokes limits / handicaps this ability.</p>

<p>Tags: programmer, learn-to-learn, james-kyle, stack-overflow, skill</p>

<h2>Why do some functional programmers criticize design patterns in OOP languages as a sign of language deficiency, while Monad is also a design pattern?</h2>

<p>I&rsquo;ve read <a href="https://www.quora.com/Why-do-some-functional-programmers-criticize-design-patterns-in-OOP-languages-as-a-sign-of-language-deficiency-while-Monad-is-also-a-design-pattern/answer/Edward-Kmett?srid=hVnO&amp;share=12410d1e">this answer</a> by Edward Kmett comparing the design patterns in OOP to the design patterns in functional languages.</p>

<p>Tags: functional-language, object-oriented-language, edward-kmett, oop, pattern, monad, interface, quora, answer</p>

<h2>Should We Even Debate Refactoring With Stakeholders?</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=215f7f649b&amp;e=4a925444f9">this article</a> by J. B. Rainsberger on the power balance between stakeholders and programmers and how it can be inclined to a &lsquo;more trust&rsquo; / &lsquo;less trust&rsquo; by following some actions. The analogy is to a trade you cannot understand, therefore you have to hope that the taken decisions are in your best interest.</p>

<p>Tags: j-b-rainsberger, j-brains, rainsberger, refactor, business-need, communication, stakeholder</p>

<h2>The Eternal Struggle Between Business and Programmers</h2>

<p>I&rsquo;ve read <a href="http://blog.thecodewhisperer.com/permalink/the-eternal-struggle-between-business-and-programmers">this article</a> by J. B. Rainsberger on the discussion between business (&lsquo;we want more features, now&rsquo;) and the programmers (&lsquo;we want more refactoring, now&rsquo;). Concludes that both players need each other, in a symbiotic fashion, to keep their jobs at the company.</p>

<p>He suggests that Scrum cannot work without the XP practices and that we need to refactor aggressively after having finished our initial design, to keep the costs down. In fact, agreeing with both parts in this discussion.</p>

<p>References one of his own videos, at Oredev'13, &ldquo;Fundamental Theorem of Agile Software Development&rdquo;, where he describes the relationship between accidental / essential complexity in the cost of a feature, attributing most of it to accidental (&lsquo;we&rsquo;re not good at our jobs&rsquo;) and describing the need for more design / refactor after the initial design.</p>

<p>Tags: j-b-rainsberger, j-brains, rainsberger, refactor, business-need, design, oredev, talk, agile, xp, scrum, software-development, accidental-complexity, essential-complexity, mythical-man-month</p>

<h2>Turning code to cash — How to make money as a Web Developer and live to tell the tale.</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@kurtrohlandt/turning-code-to-cash-how-to-make-money-as-a-web-developer-and-live-to-tell-the-tale-f5eedc557b3e">this article</a> by Kurt Rohlandt with a list of items to check while dealing with clients as a freelancer:</p>

<ul>
<li>Nothing is simple</li>
<li>Know your skill set — and let your client know it</li>
<li>Be clear about what they are buying</li>
<li>Learn to use the best tool for the job</li>
<li>To your client you’re more than just a developer</li>
<li>Sign off your jobs</li>
</ul>


<p>Tags: freelancer, kurt-rohlandt, list, tip, client</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Automate the Blog Publishing]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/12/02/tip-automate-the-blog-publishing/"/>
    <updated>2015-12-02T18:10:40+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/12/02/tip-automate-the-blog-publishing</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve automated the generation of the blog using <a href="https://travis-ci.org/">Travis CI</a>. Using this new way, each commit generates a new version of the pages.</p>

<p>These resources have been very useful:</p>

<ul>
<li><a href="http://darvin.github.io/2013/01/13/Prose_Octopress_TravisIO">Prose.io + Octopress + Travis-CI + GitHub Pages = ♥</a>. First post (in this set) that explains how this automation is possible</li>
<li><a href="https://harimenon.com/blog/2013/01/27/auto-deploying-to-my-octopress-blog/">Auto-deploying to My Octopress Blog With Travis-CI</a>. Explains how to generate your key, encript it with travis</li>
<li><a href="http://blog.yasuoza.com/2014/01/13/octopress-plus-github-pages-plus-travis/">Octopress + GitHub Pages + Travis</a>: The most useful page, explains step by step what to do for mac and linux.</li>
<li><a href="https://disqus.com/home/discussion/codez/octopressprosegithubtravis_ci_coders_blog_human_not_octopus/">Octopress+Prose+Github+Travis CI = coders' blog - Human, not octopus</a>.Altough the page is not available anymore, this discussion explains why it is safe to store your private key in the file <code>.travis.yml</code>.</li>
</ul>


<p><a href="https://github.com/floydpink?tab=repositories">An example</a> of the resulting repository, by <a href="https://github.com/floydpink">Hari Menon</a>.</p>

<h2>My own modifications</h2>

<p>The full diff for making this change is <a href="https://github.com/alvarogarcia7/blog_source/compare/8414267a1e8e1f0ef588602121f32da3f6eb9f9e...9f60c76d6d9faca8cff8bce2f0a00bf8f2eafb30">here</a>. Disregard the changes in:</p>

<ul>
<li><code>partial/1444939871_diff.txt</code></li>
<li><code>partial/1444939871_msg.txt</code></li>
<li><code>source/_posts/2015-12-02-self-study-in-december-2015.markdown</code></li>
</ul>

]]></content>
  </entry>
  
</feed>
