<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-12-30T16:51:50+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tip: Automate the Blog Publishing]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/12/02/tip-automate-the-blog-publishing/"/>
    <updated>2015-12-02T18:10:40+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/12/02/tip-automate-the-blog-publishing</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve automated the generation of the blog using <a href="https://travis-ci.org/">Travis CI</a>. Using this new way, each commit generates a new version of the pages.</p>

<p>These resources have been very useful:</p>

<ul>
<li><a href="http://darvin.github.io/2013/01/13/Prose_Octopress_TravisIO">Prose.io + Octopress + Travis-CI + GitHub Pages = â™¥</a>. First post (in this set) that explains how this automation is possible</li>
<li><a href="https://harimenon.com/blog/2013/01/27/auto-deploying-to-my-octopress-blog/">Auto-deploying to My Octopress Blog With Travis-CI</a>. Explains how to generate your key, encript it with travis</li>
<li><a href="http://blog.yasuoza.com/2014/01/13/octopress-plus-github-pages-plus-travis/">Octopress + GitHub Pages + Travis</a>: The most useful page, explains step by step what to do for mac and linux.</li>
<li><a href="https://disqus.com/home/discussion/codez/octopressprosegithubtravis_ci_coders_blog_human_not_octopus/">Octopress+Prose+Github+Travis CI = coders' blog - Human, not octopus</a>.Altough the page is not available anymore, this discussion explains why it is safe to store your private key in the file <code>.travis.yml</code>.</li>
</ul>


<p><a href="https://github.com/floydpink?tab=repositories">An example</a> of the resulting repository, by <a href="https://github.com/floydpink">Hari Menon</a>.</p>

<h2>My own modifications</h2>

<p>The full diff for making this change is <a href="https://github.com/alvarogarcia7/blog_source/compare/8414267a1e8e1f0ef588602121f32da3f6eb9f9e...9f60c76d6d9faca8cff8bce2f0a00bf8f2eafb30">here</a>. Disregard the changes in:</p>

<ul>
<li><code>partial/1444939871_diff.txt</code></li>
<li><code>partial/1444939871_msg.txt</code></li>
<li><code>source/_posts/2015-12-02-self-study-in-december-2015.markdown</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faster Site Generation for Octopress 2]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/07/13/faster-site-generation-for-octopress-2/"/>
    <updated>2015-07-13T05:49:23+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/07/13/faster-site-generation-for-octopress-2</id>
    <content type="html"><![CDATA[<p>After a while, the generation of the static site using <a href="http://octopress.org/2011/07/23/octopress-20-surfaces/">Octopress 2</a> was starting to be slow (around 2 minutes for 85 posts) for the kind of fast feedback cycle I was expecting.</p>

<p>Inspired by their new features in <a href="http://octopress.org/2015/01/15/octopress-3.0-is-coming/">Octopress 3</a>, one of them being faster site generation, I decided to retrofit my installation with the same feature.</p>

<p>Octopress 3 now has a different structure of posts and drafts. You can specify you only want to publish to your local preview your current draft instead of all of them, therefore being it faster. When you finish editing, all the posts are recovered and publishing to production uploads all of them</p>

<p>For Octopress 2, you can do something similar in a manual way. Create a copy of your working environment:</p>

<pre><code class="bash">cp -R blog_source blog_post_factory
</code></pre>

<p>Git ignore all existing markdown files in the folder <code>source/_posts</code></p>

<pre><code class="bash">cd blog_post_factory/source/_posts
git update-index --assume-unchanged $(ls *markdown)
</code></pre>

<p>Delete all existing markdown files</p>

<pre><code class="bash">rm *markdown
</code></pre>

<p>Check that git doesn&rsquo;t realize about the difference:</p>

<pre><code class="bash">git status

# On branch source
nothing to commit (working directory clean)
</code></pre>

<p>Create a new post:</p>

<pre><code class="bash">rake new_post["Faster site generation for Octopress 2"]
</code></pre>

<pre><code class="bash"># On branch source
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#   2015-07-13-faster-site-generation-for-octopress-2.markdown
nothing added to commit but untracked files present (use "git add" to track)
</code></pre>

<p>Edit as much as needed, reviewing changes in local. Push to the remote repository.</p>

<p>In the original (<code>blog_source</code>) folder, pull, then generate:</p>

<pre><code class="bash">rake generate &amp;&amp; rake deploy
</code></pre>

<p>[Optional: change the remote URL for the cloned repository, so the git push is faster.]</p>

<p>After each new post, you have to ignore old files again. I&rsquo;ve created a new task in the <code>Rakefile</code> for this purpose:</p>

<pre><code class="ruby">desc "Cleans all *.markdown files for a faster site generation"
task :ignore do
  cd "#{source_dir}/#{posts_dir}"
  system "git update-index --assume-unchanged $(ls *.markdown)"
  system "rm $(ls *.markdown)"
end
</code></pre>

<h2>Conclusion</h2>

<p>I&rsquo;ve reduced the amount of time to generate files from 2 minutes for 85 files to ~0.62 seconds for 1 file.</p>

<pre><code>Regenerating: 1 file(s) changed at 2015-07-13 08:03:29 ...done in 0.617269045 seconds.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inserting Clojure Code in Octopress]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/14/inserting-clojure-code-in-octopress/"/>
    <updated>2015-04-14T21:48:27+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/14/inserting-clojure-code-in-octopress</id>
    <content type="html"><![CDATA[<p>Inserting this code in the blog:</p>

<pre><code>```clojure
(defn all-access[k]
    (let [{:keys [a b] :as k}]
        (do a)
        (do (:b k))))
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;the octopress processor throws the error:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;Error: Pygments can't parse unknown language: clojure
</span><span class='line'>Error: Run jekyll build --trace for more information.
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;A solution would be to include it as lisp code:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;```lisp
</span><span class='line'>(defn all-access[k]
</span><span class='line'>    (let [{:keys [a b] :as k}]
</span><span class='line'>        (do a)
</span><span class='line'>        (do (:b k))))</span></code></pre></td></tr></table></div></figure>
</code></pre>

<p>this is an example:</p>

<pre><code class="lisp">(defn all-access[k]
    (let [{:keys [a b] :as k}]
        (do a)
        (do (:b k))))
</code></pre>
]]></content>
  </entry>
  
</feed>
