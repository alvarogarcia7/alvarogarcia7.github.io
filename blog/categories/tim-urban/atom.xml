<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tim-urban | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/tim-urban/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2016-04-30T19:04:38+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Self-Study in April 2016]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2016/04/01/self-study/"/>
    <updated>2016-04-01T00:08:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2016/04/01/self-study</id>
    <content type="html"><![CDATA[<h2>Deliberate Practice: What It Is and Why You Need It</h2>

<p>I&rsquo;ve read this article by Corbett Barr on what is deliberate practice and why it is needed to become an expert in a given domain field.</p>

<p>The four essential components:</p>

<ul>
<li>Motivation</li>
<li>Tailored (practice)</li>
<li>Feedback</li>
<li>Repetion</li>
</ul>


<p>Tags: corbett-barr, deliberate-practice, expert, practice, anders-ericsson, talent, professional-development, career</p>

<h2>10 Features I Wish Java Would Steal From the Kotlin Language</h2>

<p>I&rsquo;ve read <a href="http://blog.jooq.org/2016/03/31/10-features-i-wish-java-would-steal-from-the-kotlin-language/">this list of features</a> that the Kotlin Language has that would be an improvement for the Java language. By Lukas Eder</p>

<p>Tags: list, lukas-eder, kotlin, java, comparison, language, jooq</p>

<h2>How we built Uber engineering&rsquo;s highest query per second service using Go</h2>

<p>I&rsquo;ve read <a href="https://eng.uber.com/go-geofence/">this post</a> by Kai Wei on a microservice they&rsquo;ve built using Go.</p>

<p>Explains the reasons for choosing that algorithm for geofencing, the performance they&rsquo;re achieving, and the architecture.</p>

<p>Tags: uber, go, microservice, performance, geofence, geofencing, rps, go-memory-model, kai-wei</p>

<h2>Unwinding Uber&rsquo;s Most Efficient Service</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@buckhx/unwinding-uber-s-most-efficient-service-406413c5871d">this article</a> by Buck Heroux commenting on the decisions of Uber for building the geofencing microservice (above read).</p>

<p>Explains the different alternatives for algorithms in this problem space and has implemented them in go. Provides a benchmark for comparing those, including a profiling session.</p>

<p>Tags: s2, quadtree, rtree, brute-force, geofence, geofencing, uber, comment, buck-heroux, go, read-on-read, meta-read</p>

<h2>Lawful Hacking and Continuing Vulnerabilities</h2>

<p>I&rsquo;ve read <a href="https://www.schneier.com/blog/archives/2016/03/lawful_hacking_.html">this article</a> by Bruce Schneier on the stance the FBI is taking in regards to vulnerabilities discovered in Apple&rsquo;s devices.</p>

<p>Tags: bruce-schneier, apple, security, fbi, vulnerability, exploit, law, hacking</p>

<h2>A Side Project Helped Jumpstart My Career — Life Learning</h2>

<p>I&rsquo;ve read <a href="https://medium.com/life-learning/a-side-project-helped-jumpstart-my-career-7cd6f8e9b07f">this article</a> by Dave Gerhardt on how making a side project happen affected his life and his skills.</p>

<p>Some of the reasons for doing it include:</p>

<ul>
<li>It forces you to figure stuff out</li>
<li>The only way to learn is by doing</li>
<li>It gets your brain working on something other than your job</li>
<li>You have to create your own network</li>
<li>You are the CEO</li>
</ul>


<p>Tags: long-life-learning, continuous-learning, side-project, dave-gerhardt, drift, professional-development, personal-development, business, career</p>

<h2>Fun Jekyll Tricks</h2>

<p>I&rsquo;ve read <a href="http://www.madebymarket.com/blog/dev/fun-jekyll-tricks.html">this article</a> by Brian Knapp where he explains some tips and tricks of jekyll (in which octopress is based on): speed, deployment, subcategories inside the blog, <em>data, </em>includes.</p>

<p>Tags: brian-knapp, jekyll, octopress, tip-and-trick, improvement, subcategory, meta, automation, deployment</p>

<h2>La ola que llega</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;id=f8a8ee92cc">this bonilista</a> by David Bonilla, where he explains (in Spanish) the &lsquo;contractor&rsquo; phenomenon arriving to Spain, 2-3 years after being in other countries and the effects that this could have both for workers and companies.</p>

<p>Tags: bonilista, david-bonilla, contractor</p>

<h2>10 razones por las que este sábado deberías ir a un code retreat</h2>

<p>I&rsquo;ve read <a href="http://francho.org/2015/11/10/10-razones-para-ir-a-un-coderetreat/">this list</a> of reasons for attending a code retreat, by Francho Joven, who I met in the Global Day Of Code Retreat (GDCR) &lsquo;15 in Zaragoza</p>

<p>Tags: francho-joven, list, zaragoza, code-retreat, gdcr</p>

<h2>Meaningful Work through Passion, not Genius</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=pIYUMwxKFzo">this talk</a> on the importance of hard work and how it can be mistaken as genious. By Malcolm Gladwell</p>

<p>Tags: malcolm-gladwell, passion, genius, work, time-management, productivity, career, mastery-autonomy-purpose</p>

<h2>How to ask your wife for permission to spend $250,000 on a domain name</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@Stockphoto.com/how-to-ask-your-wife-for-permission-to-spend-250-000-on-a-domain-name-c27a3c2852e1">this article</a> by Jon Yau on how they started StockPhoto.com, buying a $250,000 domain name.</p>

<p>Tags: startup, domain, stockphoto, jon-yau</p>

<h2>Sorry, developer bootcamps: I was wrong</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@dillonforrest/sorry-developer-bootcamps-i-was-wrong-ea37fcc5572c">this article</a> by Dillon Forrest on the topic of developer bootcamps. Explains why developers should not be threatened by recent graduates of these programs and describes how people pursuing these programs usually are:</p>

<ul>
<li>Intelligence</li>
<li>Risk appetite</li>
<li>Resilience</li>
<li>Self-investment</li>
<li>Entrepreneurship</li>
<li>Growth trajectory</li>
</ul>


<p>Tags: bootcamp, developer-bootcamp, dev-bootcamp, dillon-forrest, intelligence, risk-appetite, resilience, self-investment, entrepreneurship, growth-trajectory</p>

<h2>The JVM and Java Garbage Collection</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=DoJr5QQYsl8">this webcast</a> about how the JVM garbage collection works. By Michael W Williams</p>

<p>Tags: michael-williams, oracle, webcast, jvm, garbage-collection, gc,</p>

<h2>Files Are Hard</h2>

<p>I&rsquo;ve read <a href="http://danluu.com/file-consistency/">this article</a> on why software that writes on files is difficult, based on the different filesystems that are below, and the operating system. Written by Dan Luu.</p>

<p>Uses software product to find bugs in filesystems</p>

<p>Tags: filesystem, file, dan-luu, analysis</p>

<h2>Applying a ceiling to the bug count</h2>

<p>I&rsquo;ve read <a href="https://techblog.king.com/applying-a-ceiling-to-the-bug-count/">this interview</a>, written by Susanna Berg, on how King has reduced the amount of bugs in their backlog using an agile technique, measuring and setting a limit.</p>

<p>Tags: susanna-berg, king, agile, bug, bug-count, defect, defect-count, per-malmen</p>

<h2>Coming up in 2016: Spring Framework 4.3 &amp; 5.0</h2>

<p>I&rsquo;ve read <a href="https://spring.io/blog/2015/08/03/coming-up-in-2016-spring-framework-4-3-5-0">this announcement</a> of Spring&rsquo;s new release, 5.0, which will require java 8 and will turn most of the features into the reactive programming paradigm. By Juergen Hoeller.</p>

<p>Tags: juergen-hoeller, spring, reactive-programming, release, announcement</p>

<h2>Why offices are where work goes to die</h2>

<p>I&rsquo;ve read <a href="http://swizec.com/blog/why-offices-are-where-work-goes-to-die/swizec/6695">this article</a> by Swizec Teller explaining the downsides of working in an office as compared to working remotely.</p>

<p>Tags: swizec-teller, remote, home-office, office, comparison, time-management</p>

<h2>The Myth of the Passionate Developer</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@bm2yogi/the-myth-of-the-passionate-developer-76a41d457304">this article</a> by Michael Ibarra on what are the implications of being a passionate developer, how it affects your tasks and what are the factors to a job.</p>

<p>Tags: michael-ibarra, passion, development, job, motivation, myth</p>

<h2>Mossack Fonseca Breach – WordPress Revolution Slider Plugin Possible Cause</h2>

<p>I&rsquo;ve read <a href="https://www.wordfence.com/blog/2016/04/mossack-fonseca-breach-vulnerable-slider-revolution/">this article</a> by Mark Maunder, which describes an hypothesis on how the Mossack Fonseca breach could have happened. Also describes and shows how to breach a Wordpress installation with a vulnerable Revolution Slider plugin.</p>

<p>Tags: mark-maunder, security, breach, mossack-fonseca-breach, mossack-fonseca, hypothesis, attack, plugin, revolution-slider, wordpress</p>

<h2>Tim Urban: Inside the mind of a master procrastinator</h2>

<p>I&rsquo;ve watched <a href="https://www.ted.com/talks/tim_urban_inside_the_mind_of_a_master_procrastinator">this TED talk</a> from Tim Urban on how the procrastinator&rsquo;s mind works, exemplified by his own career.</p>

<p>Tags: procrastinator, procrastination, mind, time-management, tim-urban</p>

<h2>PEP 20 &ndash; The Zen of Python</h2>

<p>I&rsquo;ve read <a href="https://www.python.org/dev/peps/pep-0020/">the PEP20</a>, the zen of python, with special attention to this:</p>

<blockquote><p>Explicit is better than implicit.</p></blockquote>

<h2>Why I switched from Octopress 2 to Hugo</h2>

<p>I&rsquo;ve read <a href="http://conscientiousprogrammer.com/blog/2015/05/31/why-i-switched-from-octopress-2-to-hugo/">this article</a> by Franklin Chen on the change he made on the static site generator (SSG) he used. He considered hakyll, octopress, jekyll, hugo. Was decided between hakyll and hugo for their speed but, finally, decided to use hugo for their bigger community.</p>

<p>Tags: franklin-chen, comparison, ssg, static-site-generator, hakyll, octopress, jekyll, hugo, change, speed, statically-typed, dynamically-typed, golang, performance</p>

<h2>Why incremental regeneration in Jekyll 3.0 is such a big deal</h2>

<p>I&rsquo;ve read <a href="http://idratherbewriting.com/2015/11/04/jekyll-30-released-incremental-regeneration-rocks/">this article</a> by Tom Johnson on one of the new features that jekyll 3.0 brings: incremental generation. How this can speed up the generation</p>

<p>Tags: tom-johnson, incremental-generation, speed, performance, octopress-2, octopress-3, jekyll-3</p>

<h2>Hugo, S3, Travis CI, oh boy!</h2>

<p>I&rsquo;ve read <a href="http://continuousfailure.com/post/s3_blog/">this guide</a> by Alan Scherger on how to set up a specific stack for developing and deploying a static site blog.</p>

<p>Tags: alan-scherger, static-site-generator, ssg, travis, hugo, s3</p>

<h2>Deploy your blog to github pages automatically using Hugo and Travis</h2>

<p>I&rsquo;ve read <a href="http://rcoedo.com/post/hugo-static-site-generator/">this article</a> by Roman Coedo on how to deploy a hugo blog to github pages, using travis.</p>

<p>Tags: roman-coedo, travis, hugo, github, github-pages, ssg, static-site-generator</p>

<h2>Improve Octopress with Advanced Tweaks &amp; Tips</h2>

<p>I&rsquo;ve read <a href="https://www.narga.net/improve-octopress-advanced-tweaks-tips/">this list</a> of tips on how to improve the octopress (2) installation. By Nguyễn Đình Quân.</p>

<p>Tags: nguyen-dinh-quan, octopress-2, tip, tweak</p>

<h2>Laboratorios</h2>

<p>I&rsquo;ve read <a href="http://www.presionblogosferica.com/2014/11/12/laboratorios/">this article</a> by Ángel Medinilla, about laboratories to use a percentage of company time to investigate, innovate, learn and improve.</p>

<p>Tags: angel-medinilla, team-management, time-management, innovation, strategy, improvement, kaizen, laboratory, craftsmanship, spanish</p>

<h2>What Refactoring is, and what it isn’t</h2>

<p>I&rsquo;ve read <a href="http://swreflections.blogspot.com/2012/04/what-refactoring-is-and-what-it-isnt.html">this article</a> by Jim Bird, where he splits some practices into refactoring and not refactoring. Draws the line between these two different activities.</p>

<p>Also cites scratch refactoring.</p>

<p>Tags: jim-bird, scratch-refactoring, refactoring, martin-fowler, kent-beck, definition, quote, design</p>

<h2>Pitfalls of Unlimited Vacations</h2>

<p>I&rsquo;ve read <a href="http://haacked.com/archive/2016/02/18/unlimited-vaction-pitfalls/">this article</a> by Phil Haack on the github, travis and netflix policies about unlimited vacations and the effects they have on the employees.</p>

<p>Also about minimum vacation periods, (paternity) paid leave.</p>

<p>Tags: phil-haack, unlimited-vacation, holiday, vacation, team-management, burnout, github, travis, netflix, policy</p>

<h2>Cultura Corporativa</h2>

<p>I&rsquo;ve read <a href="http://www.presionblogosferica.com/2011/02/06/cultura-corporativa/">this article</a> by Ángel Medinilla about the corporate culture, and how &ldquo;hanging a highly interchangeable sentence on a wall&rdquo; does not represent it.</p>

<p>Tags: angel-medinilla, corporate culture, spanish</p>

<h2>What It’s Really Like to Learn to Code</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@sandjar/what-it-s-really-like-to-learn-to-code-53f6d9156a32">this article</a> that explains firsthand how it is to learn programming for a novice student,even with a strong financial background and having completed a university degree. By Sandjar Kozubaev</p>

<p>Tags: sandjar-kozubaev, learning, programming, student, firsthand, coding, story</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Study in September 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015/"/>
    <updated>2015-09-01T13:25:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015</id>
    <content type="html"><![CDATA[<h2>The 30 second habit with a lifelong impact</h2>

<p>I&rsquo;ve read <a href="https://blog.growth.supply/the-30-second-habit-with-a-lifelong-impact-2c3f948ead98">this article</a> list of patterns, by Robyn Scott, in which it is explained why to compress information in a few ideas, investing 30 seconds to condense the article.</p>

<p>Tags: 30-second, habit, robyn-scott</p>

<h2>The Strengths and Weaknesses of Extreme Programming</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=LkhLZ7_KZ5w">this video</a> explaining the strengths and weaknesses of extreme programming. By William Matheson</p>

<p>Tags: extreme-programming, xp, william-matheson, video, strength, weakness</p>

<h2>Poster de Extreme Programming</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=4nN6Gh79Yg8">this video</a> introducing eXtreme Programming. By Martín Salías</p>

<p>Tags: martin-salias, kleer, extreme-programming, xp</p>

<h2>Good Tech Lead, Bad Tech Lead</h2>

<p>I&rsquo;ve read <a href="https://blog.growth.supply/good-tech-lead-bad-tech-lead-948b2b806d86">this comparison</a> of good and bad traits in tech leads. By Jason Liszka.</p>

<p>Explains the differences between good and bad tech leads, even though many of these qualities are shared by plain team members</p>

<p>Tags: jason-liszka, tech-lead, comparison</p>

<h2>Why Procrastinators Procrastinate</h2>

<p>I&rsquo;ve read <a href="http://waitbutwhy.com/2013/10/why-procrastinators-procrastinate.html">this article</a> by Tim Urban on procrastination: this article compares the procrastinator and the non-procrastinator brain with pictures, introducing the Rational part, the Instant Gratification Monkey and the Panic Monster. Shows some reasons why.</p>

<p>There is more on part 2: <a href="http://waitbutwhy.com/2013/11/how-to-beat-procrastination.html">How to beat procrastination</a></p>

<p>Tags: tim-urban, procrastination, rational-part, instant-gratification-monkey, panic-monster, brain, comparison</p>

<h2>Algebraic data type</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Algebraic_data_type">this wikipedia page</a>, that explains what this is, a few examples and the theory behind it.</p>

<p>Tags: wikipedia, data-type, algebraic-data-type</p>

<h2>Recursion</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)">this wikipedia page</a>, that explains the recursion basic concepts, such as:</p>

<ul>
<li>induction, coinduction</li>
<li>recursion, corecursion</li>
<li>implementation details in iterative vs recursive programs:

<ul>
<li>shortcutting recursion (i.e., arm-length&rsquo;s recursion)</li>
<li>wrapper function</li>
<li>tail-call optimization, related to tail-recursive functions</li>
</ul>
</li>
<li>recursion and its relation to data structures</li>
<li>base case / recursive case and removing the need of the base one in corecursion or in non-strict languages</li>
<li>types of recursion:

<ul>
<li>direct, indirect, mutual</li>
<li>generative, structural</li>
</ul>
</li>
</ul>


<p>Tags: recursion, corecursion, induction, coinduction, tail-call-optimization, tail-recursion, direct-recursion, indirect-recursion, mutual-recursion, generative-recursion, structural-recursion, arm-length-recursion, iterative-function, recursive-function, base-case, recursive-case, wikipedia, data-structure</p>

<h2>Anonymous function</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Anonymous_function">this wikipedia page</a>, that describes what is a lambda expression or an anonymous function. How it can be used (e.g., currying, higher-order function, closures) and gives examples in many languages.</p>

<p>Cites its invention (Church, 1936, lambda-calculus) and its first implementation (Lisp, 1958)</p>

<p>Tags: alonzo-church, anonymous-function, lambda-expression, closure, lambda-calculus, lisp, currying, higher-order-function, wikipedia</p>

<h2>Closure</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)">this wikipedia page</a>, that explains the concept of closures and the usual confusion between closure and lambda. Also some applications.</p>

<p>Discusses closures as a way of deferring execution and implementing object-oriented (OO) systems</p>

<p>Tags: wikipedia, closure, object-orientation, lambda-expression</p>

<h2>Zen Story: The Master Archer</h2>

<p>I&rsquo;ve read <a href="http://www.thedailyzen.org/2015/06/23/zen-story-the-master-archer/">this story</a> by Charlie Ambler about perfectionism and deep study, exemplified by the general that retires to study archery and the child who draws targets around the arrows.</p>

<p>Tags: charlie-amber, master, student, zen, story</p>

<h2>Loosely Coupled</h2>

<p>I&rsquo;ve read <a href="http://blog.bwhaley.com/loosely-coupled">this article</a> by Ben Whaley about how to loosely couple services introducing a queue and the difference in patterns between push and pull communication.</p>

<p>Tags: ben-whaley, push, pull, coupling, loose-coupling, service, queue, aws</p>

<h2>Being good at programming competitions correlates negatively with being good on the job</h2>

<p>I&rsquo;ve watched the small video and the discussion about programmers' talent at <a href="http://www.catonmat.net/blog/programming-competitions-work-performance/">this page</a>. By Peteris Krumins.</p>

<p>The original video explains that being good at a programming contest correlates negatively with skill at a programming job, even if the company hires them.</p>

<p>The discussion explains the analogy with height and the NBA and concludes that this parameter should be preponderated with less importance than others.</p>

<p>Tags: google, peter-norvig, nba, analogy, programming-contest, programming-skill, peteris-krumins</p>

<h2>On Functors</h2>

<p>I&rsquo;ve read <a href="http://www.catonmat.net/blog/on-functors/">this comparison</a> by Peteris Krumins of what the functors are in different languages:</p>

<ul>
<li>C++: function objects</li>
<li>Standard ML: generic implementation of interfaces. They allow to compose structures</li>
<li>Haskell: structure containing zero or more objects that can be converted to another structure containing the other objects. It&rsquo;s an homomorphism between two categories.</li>
<li>Prolog: built-in predicate for self-inspection and the atom at the start of the structure</li>
</ul>


<p>Tags: peteris-krumins, comparison, haskell, c-plus-plus, standard-ml, prolog, functor</p>

<h2>Recursive Regular Expressions</h2>

<p>I&rsquo;ve read <a href="http://www.catonmat.net/blog/recursive-regular-expressions/">this article</a> on recursive regular expressions by Peteris Krumins.</p>

<p>In it, he lightly describes how a regular expression relates to a <a href="https://en.wikipedia.org/wiki/Context-free_grammar">Context-Free Grammar</a> and the language support for Perl to include recursive regular expressions. Based on the examples (e.g., <code>0^n1^n</code>), it really clicked to me that this could be expressed as a recursive function, with its base case and the recursive one. Also that it &ldquo;depends on solutions to smaller instances of the same problem&rdquo; (<a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)">wikipedia</a>)</p>

<p>Tags: peteris-krumins, regular-expression, recursion, recursive-regular-expression, perl, context-free-grammar, formal-language-theory</p>

<h2>In Functional Programming, what is a functor?</h2>

<p>I&rsquo;ve read <a href="http://stackoverflow.com/questions/2030863/in-functional-programming-what-is-a-functor/2031421#2031421">this answer</a>, by Norman Ramsey, on what is a functor.</p>

<p>He explains in simple words what the concept is and how a type can belong to the class functor. Examples in haskell.</p>

<p>Tags: norman-ramsey, functor, stack-overflow, haskell, type-class, class, map, fmap</p>

<h2>Functors</h2>

<p>I&rsquo;ve read <a href="http://www.clojure.net/2013/01/19/Functors/">this article</a> by Jim Duey explaining functors in Clojure. He introduces a couple of notes of Haskell but all of the examples are in Clojure. Explains functors, a subset of it called applicatives, and the two libraries he has created.</p>

<p>Tags: jim-duey, functor, clojure, haskell</p>

<h2>10 Tips for Proper Application Logging</h2>

<p>I&rsquo;ve read <a href="http://www.javacodegeeks.com/2011/01/10-tips-proper-application-logging.html">this article</a> by Tomasz Nurkiewicz about tips on logging:</p>

<ul>
<li>reduce side effects</li>
<li>use categories and levels</li>
<li>connection with external systems</li>
<li>handling exceptions</li>
<li>automatically / manually reading logging files</li>
</ul>


<p>Tags: tomasz-nurkiewicz, logging, sl4j, log4j, tip</p>

<h2>What is &ldquo;duck typing&rdquo;?</h2>

<p>I&rsquo;ve read <a href="http://ericlippert.com/2014/01/02/what-is-duck-typing/">this article</a> by Eric Lippert about duck typing</p>

<p>Tags: duck-typing, eric-lippert, type-system, c-sharp</p>

<h2>Yagni</h2>

<p>I&rsquo;ve reread <a href="http://martinfowler.com/bliki/Yagni.html">this article</a> by Martin Fowler on the cost of developing features that are not needed</p>

<p>Tags: martin-fowler, yagni, article, misunderstanding</p>

<h2>Learn Haskell</h2>

<p>I&rsquo;ve seen <a href="https://www.youtube.com/watch?v=JJlI5FPTbgE">this video</a> by Jordan Medlock on learning haskell, explaining the basics and how to use the REPL</p>

<p>Tags: haskell, repl, jordan-medlock, beginner, video</p>

<h2>Learn Haskell</h2>

<p>I&rsquo;ve seen <a href="https://www.youtube.com/watch?v=JJlI5FPTbgE">this video</a> by Jordan Medlock on learning haskell, explaining the basics and how to use the REPL</p>

<p>Tags: haskell, repl, jordan-medlock, beginner, video</p>

<h2>TMUX - The Terminal Multiplexer</h2>

<p>I&rsquo;ve read these two parts: (<a href="http://blog.hawkhost.com/2010/06/28/tmux-the-terminal-multiplexer/">one</a>, <a href="http://blog.hawkhost.com/2010/07/02/tmux-%E2%80%93-the-terminal-multiplexer-part-2">two</a>) of an introduction guide to <code>tmux</code> (the unix terminal multiplexer) by Cody from Hawk Host.</p>

<p>In it, he explains the basics of tmux and the main differences with <code>screen</code></p>

<p>Tags: cody, hawk-host, tmux, how-to</p>

<h2>Thermodynamics and Garbage Collection</h2>

<p>I&rsquo;ve read <a href="http://www.pipeline.com/~hbaker1/ThermoGC.html">this paper</a> by Henry G. Baker that explains the analogy of the garbage collection (&ldquo;a freezer&rdquo;) and thermodynamics, where the state mutator (th program, also an oven) modifies the garbage heap and introduces / extracts entropy into the system.</p>

<p>Comparison between entropy and lack of information, using the theories from Shannon, Maxwell-Boltzmann. There&rsquo;s a reference to the knapsack problem and to simulated annealing.</p>

<p>There&rsquo;s also a gentle introduction to thermodynamics in layman terms: heat, temperature, microstates, macrostates, reversability, etc.</p>

<p>In this paper it is also reflected (in macro vs micro states) that the sum all parts is simpler than the single ones (i.e., Information Hiding)</p>

<p>Tags: henry-baker, thermodynamics, microstate, macrostate, analogy, simulated-annealing, garbage-collection, shannon, information, maxwell-boltzmann, freezer, oven, entropy</p>

<h2>How we ended up with microservices</h2>

<p>I&rsquo;ve read <a href="http://philcalcado.com/2015/09/08/how_we_ended_up_with_microservices.html">this article</a>, by Phil Calçado, where he talks about his stay at SoundCloud:</p>

<ul>
<li>the value stream map: from X days to Y</li>
<li>reorganizing teams into service teams</li>
<li>conway&rsquo;s law and teams being responsible for support. Also, being given full authority</li>
</ul>


<p>  Tags: phil-calcado, soundcloud, microservice, team-split, value-stream-mapping, conversion, reorganization</p>

<h2>Lisp is still a secret weapon</h2>

<p>I&rsquo;ve read <a href="http://kep.io/is-lisp-still-a-secret-weapon/">this article</a> by Judd Keppel where he explains it is a good idea that Clojure / ClojureScript continues to be a secret, not known among developers. Cites the article &lsquo;Beating the averages&rsquo; by Paul Graham and the amount of available packages in npm, maven central, etc</p>

<p>Tags: paul-graham, judd-keppel, clojure, clojurescript, weapon, developer</p>

<h2>Perceptron</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Perceptron">this wikipedia</a> article that explains the single-layer and multi-layer perceptron. First designed to be a machine (hardware), but later an algorithm for supervised machine learning. Worked by Minsky &amp; Papert and invented by Frank Rosenblatt in 1958.</p>

<p>Tags: peceptron, artificial-intelligence, machine-learning, frank-rosenblatt, 1958, marvin-minsky, seymour-papert</p>

<h2>Is C# a strongly typed or a weakly typed language?</h2>

<p>I&rsquo;ve read <a href="http://ericlippert.com/2012/10/15/is-c-a-strongly-typed-or-a-weakly-typed-language/">this article</a>, in the form of a dialogue between Eric Lippert and himself about the C# language and its type system.</p>

<p>Tags: type-system, c-sharp, eric-lippert, dialogue, strongly-typed, weakly-typed, language</p>

<h2>Diseño por contratos: construyendo software confiable</h2>

<p>I&rsquo;ve read <a href="http://www.revista.unam.mx/vol.4/num5/art11/sep_art11.pdf">this paper</a> that explains design by contract, based on the Hoare triplet, pre-post condition, method and class invariant. With examples in Eiffel, Java about a package sender company. Also explains pre/post with inheritance. By Gerardo Rossel and Andrea Manna. In Spanish.</p>

<p>Tags: gerardo-rossel, andrea-manna, design-by-contract, unam-mx, eiffel, java, precondition, postcondition, trust, quality, hoare-triplet, method-invariant, class-invariant</p>

<h2>The Inevitable Return of COBOL</h2>

<p>I&rsquo;ve read <a href="http://blog.hackerrank.com/the-inevitable-return-of-cobol/">this article</a> that explains the current state of COBOL in programming and systems. Written by Ritika Trikha</p>

<p>Tags: ritika-trikha, cobol, programming-language, retirement, median-age</p>

<h2>The Risky Eclipse of Statisticians</h2>

<p>I&rsquo;ve read <a href="http://blog.hackerrank.com/the-risky-eclipse-of-statisticians/">this article</a> where Ritika Trikha explains the current situation regarding Big Data and the statiscian jobs. How Big Data is in demand but the latter are not and what effects this might have.</p>

<p>Tags: ritika-trikha, bootcamp, programming, hiring, big-data, analysis, statistics</p>

<h2>Give it five minutes</h2>

<p>I&rsquo;ve read <a href="https://signalvnoise.com/posts/3124-give-it-five-minutes">this article</a> by Jason Fried where he explains why we should give ideas time to sink in and marinate, before dismissing them. Ideas are so fragile that it is better to let them live for a while before dismissing them. This also applies for thoughts (other people&rsquo;s or your own).</p>

<p>Tags: jason-fried, idea, think, startup, blue-hat, thinking-hat,  six-thinking-hats, red-hat</p>

<h2>Reading Clojure Stacktraces</h2>

<p>I&rsquo;ve read <a href="http://blog.jayfields.com/2012/06/reading-clojure-stacktraces.html">this article</a> by Jay Fields on reading clojure stacktraces. Very similar to &ldquo;Clojure Stack Traces for the Uninitiated&rdquo;</p>

<p>Tags: jay-fields, clojure, stacktrace</p>

<h2>Clojure Stack Traces for the Uninitiated</h2>

<p>I&rsquo;ve read <a href="https://blog.8thlight.com/connor-mendenhall/2014/09/12/clojure-stacktraces.html">this article</a> on how to interpret clojure stacktraces. Written by Connor Mendenhall</p>

<p>Tags: connor-mendenhall, clojure, stacktrace</p>

<h2>JavaScript type inference</h2>

<p>I&rsquo;ve found (and played) with <a href="http://www.ccs.neu.edu/home/dimvar/jstypes.html">this JavaScript type inference engine</a>. Written in Javascript (and available online). Written by Dimitrios Vardoulakis.</p>

<p>Tags: javascript-type-inference, type-inference, type-inference-algorithm, dimitrios-vardoulakis, cfa2</p>

<h2>Alternatives to boolean parameters</h2>

<p>I&rsquo;ve read <a href="https://blog.8thlight.com/dariusz-pasciak/2015/05/28/alternatives-to-boolean-parameters.html">this article</a> explaining alternatives to sending a boolean parameter to decide on the contents of the function. Written by Dariusz Pasciak</p>

<p>As I heard some time ago, if a function receives a boolean to decide on what to do, it will for sure have more than one responsibility: one for the false value and one for the true value.</p>

<p>Tags: dariusz-pasciak, boolean, srp, boolean-parameter</p>

<h2>Why Are Web Uploads So Painful?</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/why-are-web-uploads-so-painful/">this article</a> on web uploads being painful. By Jeff Atwood. The screenshots feel old (2007) and some of the problems have already been solved.</p>

<p>Tags: jeff-atwood, article, upload, browser</p>

<h2>Can Your Team Pass The Elevator Test?</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/can-your-team-pass-the-elevator-test/">this article</a> on the elevator test by Jeff Atwood.</p>

<p>Tags: jeff-atwood, article, elevator-test, assumption, microsoft-bob, vision, product, feature</p>
]]></content>
  </entry>
  
</feed>
