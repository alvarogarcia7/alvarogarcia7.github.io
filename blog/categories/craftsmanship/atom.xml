<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Craftsmanship | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/craftsmanship/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-03-16T23:33:38+01:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Open Space: Code Reviews]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews/"/>
    <updated>2015-03-16T22:44:42+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ve discussed about code reviews on <a href="http://www.meetup.com/Barcelona-Software-Craftsmanship/events/220293683/">this open space</a></p>

<h2>Notes</h2>

<p>These are my notes, in no particular order:</p>

<ul>
<li>reduce information silos all around the company, as everyone [technical] can participate in these events</li>
<li>raise the &ldquo;just arrived&rdquo; people&rsquo;s knowledge [Difficult to hit the ground up and running, but these code review sessions can help]</li>
<li>invest one person as &lsquo;sheriff&rsquo; for the sprint: they will take care of static analysis tools (such as sonar) and continuous integration (CI; such as jenkins). They will make sure others follow the working agreements</li>
<li>In the academic environment, some teams do share their patches via mailing lists and this makes it much slower to adapt and review changes [As compared to an on-line sharing system - like web-based interfaces to distributed version control systems] As this team doesn&rsquo;t have a CI tool, they must test it / try it manually before reviewing the code.</li>
<li>Pair programming does not remove the need for code review [This has been surfaced twice]</li>
<li>Your work is not more important than your team members&#8217; one. [Related to not having time to code review]</li>
<li>Do code reviews include architecture? [We&rsquo;ve agreed that the architecture to some degree should be discussed before code reviews]</li>
<li>&ldquo;Troll review&rdquo;</li>
<li>Anyone can veto pull requests [By opening a question; do not allow for pull requests to be closed with open questions]</li>
<li>A 15-minute time slot everyday to code review [As code hygiene; Done right after lunch,  breakfast or just before leaving, when you&rsquo;re tired]</li>
<li>Code review tasks have higher priority than other tasks [Do not take other tasks if there are code reviews to do]</li>
<li>Code reviews put a lot of pressure so people learn and the knowledge level equalizes across the team</li>
</ul>


<h2>Conclusions</h2>

<p> My conclusions, even though some of them were not shared by everyone:</p>

<ul>
<li>Most of the people approve of code review practices: either they are doing them or are trying to apply them at their clients. (Warning: this was a code review meetup, so there&rsquo;s a bias: people not interested in them won&rsquo;t come). No one was against doing them.</li>
<li>Code reviews have a cost, although it is beneficial to do them</li>
<li>Should your teammates not want to participate in the code review after agreeing on doing them, appeal to their professionalism / accountability, then to their time (stated before), then troll them: after a few (healthy) trolling code review sessions, people will feel more comfortable reviewing and being reviewed. Special mention to Miguel who coined (?)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> the term: troll review.</li>
<li>Great way of equalizing the (technical) knowledge level within the team</li>
<li>Great way of reduce information silos across the whole company</li>
<li>They can be fun if you do them properly</li>
<li>The need for code reviews do not disappear when pair programming: as long as you have a personal attachment to the code, you might not see its defects.</li>
</ul>


<h2>Your own</h2>

<p>Should you have any conclusions to share, please add a pull request to this <a href="https://github.com/alvarogarcia7/blog_source">repository</a> or do it as a comment.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>after searching some ten minutes on the internet, there are only a couple of questions on meta.codereview stackoverflow, but not related to this. <strong>Update</strong>: In <a href="https://twitter.com/mallyvai/status/314260072798752768">here</a>, Vaibhav Mallya talks about a #trollReview, related to code. So, unfortunately, Miguel, you&rsquo;re not the first one. But there are fewer than 10 results on twitter.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polishing Your Tools]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/22/polishing-your-tools/"/>
    <updated>2015-02-22T09:30:20+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/22/polishing-your-tools</id>
    <content type="html"><![CDATA[<h2>The toolsmith</h2>

<p><a href="http://en.wikipedia.org/wiki/Fred_Brooks">Frederick P Brooks, Jr</a> quoted / explained a theory explained by Mills and Baker<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> around 1971-72:</p>

<blockquote><p>Chapter 3: The Surgical Team</p>

<p>[&hellip;] but the team be organized like a surgical team rather than a hog-butchering team. That is, instead of each member cutting away on the problem, one does the cutting and the others give him[her] every support that will enhance his[her] effectiveness and productivity.</p>

<p>[&hellip;]</p>

<p><quote> Brooks, F. - The Mythical Man-Month, chapter 3: The Surgical Team </quote></p></blockquote>

<p>(Text between square brackets is mine)</p>

<p>The author goes on to explain the job descriptions for the surgeon, copilot, administrator, editor, secretaries, program clerk, toolsmith, tester and the language lawyer.</p>

<p>The one that will be covered in this post is the toolsmith:</p>

<blockquote><p><strong>The toolsmith</strong>. File-editing, text-editing, and interactive debugging services are now readily available, so that a team will rarely need its own machine and machine-operating crew. But these services must be available with unquestionably satisfactory response and reliability; and the surgeon must be sole judge of the adequacy of the service available to him. He needs a toolsmith, responsible for ensuring this adequacy of the basic service and for constructing, maintaining, and upgrading special tools &ndash;mostly interactive computer services&ndash; needed by his team. Each team will need its own toolsmith, regardless of the excellence and reliability of any centrally provided service, for his job is to see to the tools needed or wanted by his surgeon, without regard to any other team&rsquo;s needs. The tool-builder will often construct specialized utilities, cataloged procedures, macro libraries.</p>

<p><quote> Brooks, F. - The Mythical Man-Month, chapter 3: The Surgical Team </quote></p></blockquote>

<p>Even though the chapter reads a bit outdated, especially with the part about genders and methodologies (i.e., waterfall), the part about roles is interesting. The surgical team, as the author presents will be composed by 9 &frac12; (nine and a half) as the language lawyer can be shared among two or three teams.</p>

<h2>Day to day practices</h2>

<p>So, one full-time job is to build tools to service the surgeon and the copilot (1:8,5 ratio), or approximately 12% of a full-time position.</p>

<p>These tools can make the surgeon and the copilot more effective, ranging from a single digit percentage to orders of magnitude in other tasks.</p>

<p>As agile teams no longer have a toolsmith and the scrum master is not necessarily a technical expert who can build tools for the whole team, the tasks of creating tools must be taken care by everyone. No one better than yourself can know your needs and tailor solutions for them.</p>

<p>The only downside is you have to invest ~5h (for a full time position) per week into creating and polishing tools for your work: it is a need for achieving more productivity when working.</p>

<p>Nowadays that IDEs are configurable, this time might be invested on learning more advanced features as other shortcuts, refactoring techniques, other design patterns, etc. I like having my own live templates (see <a href="https://www.jetbrains.com/idea/help/creating-and-editing-live-templates.html#d1333587e219">description</a>), especially for tests, as I saw on the <a href="https://skillsmatter.com/courses/503-sandro-mancuso-s-crafting-code-course#programme">Crafting Code workshop</a> by <a href="https://twitter.com/sandromancuso">Sandro Mancuso</a></p>

<p></p>

<p>It may also include other activities as setting up your bash alias, cleaning your desk, trying a new UML diagram modeler, etc. Anything that improves the productivity of your main task.</p>

<p>If we consider our experience and knowledge part of our tools (as we are knowledge workers), training could be considered part of polishing our tools. Short, daily or weekly training sessions (even internal) can make a great impact on breadth (not depth) of knowledge among your teammates. This shallow knowledge can open doors for more knowledge to be gained outside of company time, or used to practice and test other methods.</p>

<p>This training is so useful for everyone (&ldquo;when one teaches, two learn&rdquo;) that I recommend my clients to do it. This has helped them cope with changing technologies, knowledge transfer and even some team building.</p>

<h2>Company provided or not?</h2>

<p>Should the company provide for this time to improve? Although I don&rsquo;t know the answer, it would greatly affect the programmers&#8217; productivity to do so. I would say, provide this time as long as what is produced is useful. How do you measure useful? This is a subjective opinion, so it depends on each one.</p>

<p>Some companies acknowledge that this is so important as to invest part of their resources (0-2 hours per week) into training.</p>

<p>Either way, should your company provide it for your or not, you are the one in charge of your career (from Mancuso, <a href="https://leanpub.com/socra">Software Craftsmanship</a> - now called <a href="http://www.amazon.co.uk/Software-Craftsman-Professionalism-Pragmatism-Robert/dp/0134052501/ref=sr_1_1?ie=UTF8&amp;qid=1416521895&amp;sr=8-1&amp;keywords=the+software+craftsman">The Software Craftsman</a>). If you are not allowed to invest company time for your own benefit, you could use some of your personal time to do so. It is not required, but you will soon enjoy its profits.</p>

<hr />

<p>Mills, H., &ldquo;Chief programmer teams, principles, and procedures,&rdquo; IBM Federal Systems Division Report FSC 715108, Gaithersburg, Md., 1971.</p>

<p>Baker, F. T., &ldquo;Chief programmer team management of production programming,&rdquo; IBM Sys. J., 11, 1 (1972).</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Original references in &ldquo;The Mythical Man-Month&rdquo; (Notes and References, page 294) point to these:<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
