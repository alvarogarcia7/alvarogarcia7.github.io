<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-09-02T22:59:07+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Coding Dojo: Palindromes]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/08/19/coding-dojo-palindromes/"/>
    <updated>2015-08-19T11:37:16+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/08/19/coding-dojo-palindromes</id>
    <content type="html"><![CDATA[<p>At a client, today I&rsquo;ve facilitated a coding dojo on palindrome searching.</p>

<p>I&rsquo;ve prepared a <a href="https://github.com/alvarogarcia7/palindromes-searcher-kata-java">github repository</a> for the java solutions. In this repository, the tag <a href="https://github.com/alvarogarcia7/palindromes-searcher-kata-java/tree/start-here"><code>start-here</code></a> has the prepared pom with dependencies.</p>

<p>We have paired to work on the kata but none of my teammate&rsquo;s solutions are available (at the moment), but mine is at the <code>master</code> branch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding Dojo: Goldbach Conjecture]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/08/17/coding-dojo-goldbach-conjecture/"/>
    <updated>2015-08-17T23:37:16+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/08/17/coding-dojo-goldbach-conjecture</id>
    <content type="html"><![CDATA[<p>At the <a href="http://www.meetup.com/Barcelona-Software-Craftsmanship/">Barcelona Software Craftsmanship meetup</a>, today I&rsquo;ve facilitated a coding dojo on the <a href="https://en.wikipedia.org/wiki/Goldbach%27s_conjecture">Goldbach Conjecture</a>. The problem was prepared by <a href="https://twitter.com/trikitrok">Manuel Rivero</a>.</p>

<p>The meetup event is <a href="http://www.meetup.com/es/Barcelona-Software-Craftsmanship/events/224169573/">here</a> and there are plenty of solutions prepared by the pairs:
  * <a href="https://github.com/Duber/GoldbachConjectureKataInJava">Java</a>
  * <a href="https://github.com/raullorca/GoldbachConjectureKata">C#</a>
  * <a href="https://github.com/alvarogarcia7/goldbach-conjecture-kata-haskell">Haskell</a>
  * <a href="https://github.com/celtric/goldbach-conjecture-kata-php">PHP</a>
  * <a href="https://github.com/celtric/goldbach-conjecture-kata-java">Java</a>
  * <a href="https://github.com/juanangosto/GoldbachsConjecture">PHP</a>
  * <a href="https://github.com/rojoangel/12moths-12katas/tree/master/7-goldbach-conjecture-kata">Haskell</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Language Was Prepared for That]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/08/10/the-language-was-prepared-for-that/"/>
    <updated>2015-08-10T00:58:33+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/08/10/the-language-was-prepared-for-that</id>
    <content type="html"><![CDATA[<p>Many times I&rsquo;ve written this function:</p>

<pre><code class="java">public boolean between(int lowerBound, int n, int upperBound){
    return lowerBound &lt;= n &amp;&amp;
        n &lt;= upperBound;
}
</code></pre>

<p>It may depend on the case, whether it is <code>[]</code>, <code>[)</code>, <code>(]</code> or <code>()</code>, to use mathematical terms.</p>

<p>When the two comparisons are the same (<code>[]</code> and <code>()</code>), there is duplication in the comparisons.</p>

<p>Investigating a little bit on this in clojure, I&rsquo;ve found this function:</p>

<pre><code class="lisp">&lt;=
</code></pre>

<p>And its <a href="https://clojuredocs.org/clojure.core/%3C=">clojuredocs</a>: Returns non-nil if nums are in monotonically non-decreasing order,
otherwise false.</p>

<p>A sample usage:</p>

<pre><code class="lisp">(&lt;= 1 2)
; true

(&lt;= 1 2 1)
; false
</code></pre>

<p>The last part is the most interesting one. As this function is prepared to receive more than two parameters, it is very easy for the programmer to use it. We could say that the language was prepared for that.</p>

<p>The <a href="https://github.com/clojure/clojure/blob/clojure-1.7.0/src/clj/clojure/core.clj#L1020">implementation</a>:</p>

<pre><code class="lisp">(defn &lt;=
  ([x] true)
  ([x y] (. clojure.lang.Numbers (lte x y)))
  ([x y &amp; more]
   (if (&lt;= x y)
     (if (next more)
       (recur y (first more) (next more))
       (&lt;= y (first more)))
     false)))
</code></pre>

<p>Inspired by this, I&rsquo;ve implemented the same function in haskell (for the repl):</p>

<pre><code class="haskell">let isBigger acc ele = (snd acc) &amp;&amp; (fst acc) &lt; ele in
   foldl (\acc ele -&gt; (ele, isBigger acc ele)) (1, True) [1,2,1,3] 
</code></pre>

<p>and a simpler solution I&rsquo;ve found on <a href="http://codereview.stackexchange.com/questions/46606/is-a-list-sorted/46608#46608">Stack Overflow</a>:</p>

<pre><code class="haskell">isSorted :: (Ord a) =&gt; [a] -&gt; Bool
isSorted xs = all (\(x, y) -&gt; x &lt;= y) $ zip xs (tail xs)
</code></pre>

<p>or</p>

<pre><code class="haskell">isSorted :: (Ord a) =&gt; [a] -&gt; Bool
isSorted xs = and $ zipWith (&lt;=) xs (tail xs)
</code></pre>

<h2>Conclusion</h2>

<p>Unless a more elegant, language-provided solution exists in haskell, the clojure one is way simpler. This is one of the benefits of prefix notation, that operators (e.g., <code>+</code>, <code>-</code>, <code>*</code>, <code>&lt;=</code>) are overloaded to take more arguments than before.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Return Values in a Mockito Stub]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/08/07/multiple-values-in-a-mockito-stub/"/>
    <updated>2015-08-07T11:31:19+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/08/07/multiple-values-in-a-mockito-stub</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been asked today how to return multiple return values from a Mockito Spy, effectively using the spy as a Stub, as well.</p>

<pre><code class="java">package com.example.spike;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

import org.junit.Test;
import org.mockito.Spy;

public class DifferentReturnValues {

    @Spy
    private Spike1 spike1 = new Spike1();


    @Test
    public void spike1() {
        spike1 = spy(spike1);
        when(spike1.getBool()).thenReturn(false, true);

        assertThat(spike1.getBool(), is(false));
        assertThat(spike1.getBool(), is(true));

        assertThat(spike1.getBool(), is(true));
        assertThat(spike1.getBool(), is(true));
    }


    private class Spike1 {
        public boolean getBool() {
            return true;
        }
    }
}
</code></pre>

<p>The key line is:</p>

<pre><code class="java">when(spike1.getBool()).thenReturn(false, true);
</code></pre>

<p>this makes the stubbed function to return multiple values:</p>

<pre><code class="java">assertThat(spike1.getBool(), is(false));
assertThat(spike1.getBool(), is(true));
</code></pre>

<p>The last value is repeated after the last defined value:</p>

<pre><code class="java">@Test
public void spike1() {
    spike1 = spy(spike1);
    when(spike1.getBool()).thenReturn(false, true);

    assertThat(spike1.getBool(), is(false));
    assertThat(spike1.getBool(), is(true));

    assertThat(spike1.getBool(), is(true));
    assertThat(spike1.getBool(), is(true));
}
</code></pre>

<p>If you want to loop over the values, you can implement it with the <code>doAnswer</code> method:</p>

<pre><code class="java">@Test
public void spike1() {
    spike1 = spy(spike1);
    when(spike1.getBool()).thenReturn(false, true);

    final boolean[] value = {true};

    doAnswer(invocation -&gt; {
        value[0] = !value[0];
        return value[0];
    }).when(spike1).getBool();

    assertThat(spike1.getBool(), is(false));
    assertThat(spike1.getBool(), is(true));

    assertThat(spike1.getBool(), is(false));
    assertThat(spike1.getBool(), is(true));
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tool to Find Duplicate Values in Constants]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/07/30/tool-to-find-duplicate-values-in-constants/"/>
    <updated>2015-07-30T13:42:44+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/07/30/tool-to-find-duplicate-values-in-constants</id>
    <content type="html"><![CDATA[<p>Imagine having this java class:</p>

<pre><code class="java">private static class RepeatedConstants {
    public static final String A = "A";
    public static final String A_1 = A;
    public static final String A_2 = "A";

    public static final Integer _3 = 3;
    public static final Integer THREE = 3;
}
</code></pre>

<p>I wanted to remove the repeated values in the constants, in an automatic way, because the file was big (> 4000 constants). A way of doing this is basing the differences on the values, directly. To do this, remove all text that is not a value:</p>

<p>find what, regex mode: <code>^.*=\s*(.*);</code>
replace with: $1</p>

<p>Explanation:</p>

<ul>
<li><code>^.*=\s*</code>: any character before the equal sign. Any whitespace right after it.</li>
<li><code>(.*);</code>: capture everything that is before the semicolon (;)</li>
</ul>


<p>You end up with this:</p>

<pre><code>"A"
A
"A"

3
3
</code></pre>

<p>Copy it to <code>a.txt</code>, <code>sort</code> it and <code>uniq</code> it (to remove duplication):</p>

<pre><code class="bash">cat a.txt | sort | uniq &gt; uniq.txt
</code></pre>

<p>then sort the non-uniq version:</p>

<pre><code class="bash">cat a.txt | sort &gt; sorted.txt
</code></pre>

<p>and diff among them, to find the repeated values:</p>

<pre><code class="bash">diff sorted.txt uniq.txt

3,4d2
&lt; "A"
&lt; 3
</code></pre>

<p>These are the repeated values. The variable <code>   public static final String A_1 = A;</code> was not caught by this as it only has the same value in execution, not staticly.</p>

<p>For this, at Gmaur, we have developed a small <a href="https://github.com/GMaur/java-duplicates-detector">module to detect duplicates</a>. The main code is this:</p>

<pre><code class="java">public class RepeatedFinder {

  private final Class aClass;

  public RepeatedFinder(Class aClass) {
    this.aClass = aClass;
  }

  public MultiMap findDuplicates() throws IllegalAccessException {
    return generateMapFromValueToVariables(aClass).valuesWithMoreThanOneVariable();
  }

  private ValueToNameRepository generateMapFromValueToVariables(Class&lt;?&gt; clazz) throws IllegalAccessException {
    ValueToNameRepository valueToNames = new ValueToNameRepository();
    Field[] fields = clazz.getDeclaredFields();
    Object object = new Object();
    for (Field field : fields) {
      Object value = field.get(object);
      valueToNames.add(value, field.getName());
    }
    return valueToNames;
  }
</code></pre>

<p>The tests and the source code can be found here: <a href="https://github.com/GMaur/java-duplicates-detector">https://github.com/GMaur/java-duplicates-detector</a></p>

<p>Hope you enjoy it, as much as we have enjoyed writing it!</p>

<p>Any feedback is welcome.</p>
]]></content>
  </entry>
  
</feed>
