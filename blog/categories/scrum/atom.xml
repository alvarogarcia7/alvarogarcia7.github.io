<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scrum | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/scrum/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2016-01-13T10:19:51+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Self-Study in December 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/"/>
    <updated>2015-12-02T07:50:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015</id>
    <content type="html"><![CDATA[<h2>Ruby Equality And Object Comparison</h2>

<p>I&rsquo;ve read <a href="http://www.skorks.com/2009/09/ruby-equality-and-object-comparison/">this article</a>, written by Alan Skorkin, that explains equality comparisons in ruby:</p>

<ul>
<li>equal? is reference equality</li>
<li>== is value equality</li>
<li>eql? is value and type equality</li>
</ul>


<p>Tags: ruby, comparison, equality, object, reference, alan-skorkin</p>

<h2>Software Folklore</h2>

<p>I&rsquo;ve watched <a href="https://www.thoughtworks.com/insights/blog/software-folklore">this PechaKucha</a> by Chris Ford on what are laws and how they relate to creating software. Also talks on what could be an analogy to software creation (says not science, not engineering)</p>

<p>Tags: folklore, chris-ford, analogy, computer-science, pechakucha, software-engineering, software-creation, law</p>

<h2>3 Things Java Programmers Can Steal from Clojure</h2>

<p>I&rsquo;ve read <a href="http://www.lispcast.com/3-things-java-can-steal-from-clojure">this article</a> by Eric Normand, where he explains 3 clojure things that can be applied to your day to day java:</p>

<ol>
<li>Persistent Data Structures</li>
<li>Software Transactional Memory</li>
<li>Extensible Data Notation</li>
</ol>


<p>Tags: clojure, java, eric-normand, stm, edn</p>

<h2>2 Features of Clojure Editors Professionals Won&rsquo;t Do Without</h2>

<p>I&rsquo;ve read <a href="http://www.lispcast.com/clojure-editors">this article</a> by Eric Normand, where he explains the most necessary features for a clojure editor:</p>

<ol>
<li>REPL Integration</li>
<li>Structural Editing</li>
</ol>


<p>Tags: clojure, java, eric-normand, stm, edn</p>

<h2>How to read more books</h2>

<p>I&rsquo;ve read <a href="http://verraes.net/2012/12/how-to-read-more-books/">this article</a> by Mathias Verraes on tips to read more books:</p>

<ul>
<li>Negative things to stop doing</li>
<li>Positive things to start doing</li>
<li>Habits to form</li>
</ul>


<p>Tags: mathias-verraes, reading, book</p>

<h2>Effective Learning Strategies for Programmers</h2>

<p>I&rsquo;ve read <a href="http://akaptur.com/blog/2015/10/10/effective-learning-strategies-for-programmers/">this article</a> by Allison Kaptur on fixed vs growth mindset and the need for having the latter for being a programmer.</p>

<p>Especially interesting is the provided example of the confusion in the documentation, that can hinder productivity</p>

<p>(Note: this entry is also present in this same month)</p>

<p>Tags: allison-kaptur, fixed-mindset, growth-mindset, research, learning-strategy, recurse-center, carol-dweck, mindset</p>

<h2>Code a fully-functional web app in 14 days… - Challenge Accepted</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@OggimusPrime/code-a-fully-functional-web-app-in-14-days-e247f536772d">this experience report</a> on how Ryan Haase and Benjamin Hoffman built an MVP in 14 days. They describe their stack choices, gotchas and key points.</p>

<p>Tags: ryan-haase, benjamin-hoffman, mvp, angular, firebase, challenge</p>

<h2>Writing-Clear-Code, Not-Clever-Code</h2>

<p>I&rsquo;ve-read <a href="https://medium.com/@mikesherov/writing-clear-code-not-clever-code-d6b90353a3c5">this-article</a> by-Mike-Sherov-where-he-explains-the-reflection-he-did-since-his-team-members-were-asking-too-much-about-his-code. His-conclusion-was-to-stop-reducing-the-size-of-the-code-to-improve-readability.</p>

<p>Tags: mike-sherov, clean-code,clear-code, clever-code, reflection, team, code</p>

<h2>En vez de “un Scrum por proyecto” mejor un “Scrum por equipo”</h2>

<p>I&rsquo;ve read <a href="http://www.javiergarzas.com/2015/12/alejate-del-concepto-proyecto-si-quieres-usar-bien-scrum-22-adaptar-scrum-segun-cada-proyecto.html">this article</a> where Javier Garzás explains scrum by teams or by projects and why the former should be preferred (in Spanish).</p>

<p>Tags:  javier-garzas, scrum, project-management, team, agile</p>

<h2>Application gateways: an example in Clojure</h2>

<p>I&rsquo;ve read <a href="http://blog.obliquo.eu/post/134421923177/application-gateways-an-example-in-clojure">this example</a> that Cristobal Garcia prepared for me after asking for it at the local Barcelona Software Craftsmanship community (Many thanks!).</p>

<p>He describes what an application gateway is, giving an example in clojure. In this case, the application gateway is used to cache and forward/deny requests to another webservice.</p>

<p>Tags: cristobal-garcia, application-gateway, clojure, example, level-7-firewall, barcelona-software-craftsmanship, scbcn, gift</p>

<h2>Habits For Effective Refactoring</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=THw8t7ePlsc">this video</a> by Jason Gorman about techniques for effective and sustainable refactoring. Among them:</p>

<ul>
<li>check the tests, the coverage to make sure that the refactored code has a good safety net</li>
<li>set a refactoring goal: decide what you want to refactor at this time and when you&rsquo;ll be done</li>
<li>know your code smells</li>
<li>only refactor on green</li>
<li>use automated refactoring steps whenever possible: for the benefits of transactionability and undo are huge and the risk of messing it up decreases</li>
<li>commit after achieving the refactoring goal: allows to create a checkpoint to revert to</li>
<li>bottle the code smells for faster/better learning (in the commit message, he uses a hashtag for searching)</li>
</ul>


<p>Tags: jason-gorman, refactoring, video, technique, refactor, tutorial, code-smell</p>

<h2>Key to &ldquo;OEIS.org&rdquo; Poster, n. 15</h2>

<p>I&rsquo;ve read <a href="http://oeisf.org/Poster15a_key.pdf">the 15th &ldquo;poster and its key&rdquo;</a> by the OEIS, published by N. J. A. Sloane.</p>

<p>Tags: sloane, oeis, poster-and-key, neil-sloane</p>

<h2>The Clojure Style Guide</h2>

<p>I&rsquo;ve read <a href="https://github.com/bbatsov/clojure-style-guide">this style guide</a> to clojure, by Bozhidar Batsov</p>

<p>Tags: bozhidar-batsov, clojure, style-guide</p>

<h2>Marick&rsquo;s Midje information</h2>

<ul>
<li><a href="https://github.com/marick/Midje/wiki/Writing-your-own-checkers">Custom checkers</a></li>
<li><a href="https://github.com/marick/Midje/wiki/Two-words-you-need-to-know">Domain concepts</a></li>
<li><a href="https://github.com/marick/Midje/wiki/Top-down-testing">Top-down testing</a></li>
<li><a href="https://github.com/marick/Midje/wiki/Nested-checkers">Nested checkers</a></li>
</ul>


<h2>Clusterware 11gR2 – Setting up an Active/Passive failover configuration</h2>

<p>I&rsquo;ve read <a href="https://blogs.oracle.com/xpsoluxdb/entry/clusterware_11gr2_setting_up_an_activepassive_failover_configuration">this how-to guide</a> by Gilles Haro on how to create an Active/Passive failover configuration for Oracle.</p>

<p>Tags: failover, high-availability, oracle, gilles-haro, active-passive, database</p>

<h2>Old stuff that rocks</h2>

<p>I&rsquo;ve read <a href="https://wincent.com/blog/old-stuff-that-rocks">this list</a> of old technologies that still rock, according to Greg Hurrell.</p>

<p>Tags: list, old-stuff, greg-hurrell</p>

<h2>Do not underestimate credentials leaks</h2>

<p>I&rsquo;ve read <a href="https://github.com/ChALkeR/notes/blob/master/Do-not-underestimate-credentials-leaks.md">this article</a> that describes how credentials are usually accidentally leaked and a guide on what to do about it. By Сковорода Никита Андреевич.</p>

<p>Tags: credential, leak, guide, how-to</p>

<h2>Clojure for the brave and true: chapter 8 - Writing Macros</h2>

<p>I&rsquo;ve read <a href="http://www.braveclojure.com/writing-macros">this chapter</a> from Daniel Higginbotham about macros in clojure. In it, he explains common gotchas (e.g., double execution, variable capture), splicing, quoting and unquoting.</p>

<p>Tags: daniel-higginbotham, clojure, macro, chapter, quoting, unquoting, splicing</p>

<h2>The Telescoping Constructor (Anti)Pattern</h2>

<p>I&rsquo;ve read <a href="http://www.captaindebug.com/2011/05/telescoping-constructor-antipattern.html#.ViF57eztmkp">this article</a> by Roger Hughes on the telescoping constructor, with the example in java. The discussion is whether to apply this or not and whether this is a pattern or an anti-pattern</p>

<p>Tags: roger-hughes, telescoping-constructor, java, pattern, antipattern</p>

<h2>Ruby for Newbies: Testing with Rspec</h2>

<p>I&rsquo;ve read <a href="http://code.tutsplus.com/tutorials/ruby-for-newbies-testing-with-rspec--net-21297">this tutorial</a> on how to make write tests with RSpec in Ruby. Written by Andrew Burgess</p>

<p>Tags: andrew-burgess, ruby, rspec, test, tutorial</p>

<h2>Ruby dynamic method calling</h2>

<p>I&rsquo;ve read <a href="http://blog.khd.me/ruby/ruby-dynamic-method-calling/">this article</a> about dynamically calling methods and a benchmark on three ways of doing it in Ruby:</p>

<ul>
<li>call</li>
<li>send</li>
<li>eval</li>
</ul>


<p>Tags: khell, metaprogramming, comparison, benchmark, ruby, evaluation, dynamic</p>

<h2>Becoming a CTO</h2>

<p>I&rsquo;ve read this article <a href="https://medium.com/@juokaz/becoming-a-cto-337dc1a9c6ae"></a> by Juozas Kaziukėnas about the profile and the abilities of a CTO. Talks about the limiting factors for being one (e.g., stop programming, attend many meetings) and the type of work you are supposed to do (e.g., face business people, communicate the strategy, make yourself respectable).</p>

<p>Tags: juozas-kaziukenas, cto, career-change, technology, career, programmer, title, job</p>

<h2>4 Stages of Team Development</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?feature=player_embedded&amp;v=7NouiH2ZT8w">this video</a> by the Glenn Smith &ldquo;Growth Coach Houston&rdquo; about the four stages of team development: forming, norming, storming, performing and how to get through them.</p>

<p>Tags: tuckman, forming, norming, storming, performing, glenn-smith, video, team-management, team</p>

<h2>Time Hacking for College Students</h2>

<p>I&rsquo;ve read <a href="https://goel.io/time-hacking/">this article</a> by Karan Goel about techniques for finding time for important things:</p>

<ul>
<li>prioritizing</li>
<li>waking up early</li>
<li>automate</li>
<li>keep learning</li>
</ul>


<p>Tags: karan-goel, time-management, important-vs-urgent, prioritization</p>

<h2>Clojure at a Real Estate Portal</h2>

<p>I&rsquo;ve read <a href="http://www.pitheringabout.com/?p=1069">this article</a> by Jon Pither, where he does a post-mortem analysis of a real-estate project with a fixed deadline (TV ads) with around ten months of development time. They brought in an external company, JUXT, who with 6 seasoned developers were able to finish the project on time and on budget.</p>

<p>Their stack was:  Ring, Compojure, Bidi, and http-kit for our Clojure web-apps, mixing in Friend and Liberator.</p>

<p>Tags: ring, compojure, bidi, http-kit, clojure, fixed-deadline, project, success-story, post-mortem, jon-pither</p>

<h2>Musing on TDD, Impulsive Developers and Aesthetics</h2>

<p>I&rsquo;ve read this article by Jon Pither on why TDD can be harmful sometimes:</p>

<ul>
<li>limits the amount of lateral thinking</li>
<li>forces a technology</li>
<li>limits the solution space given a fixed problem space</li>
<li>limits creativity and freedom when performing large / aggressive refactorings</li>
<li>sterile place</li>
</ul>


<p>while he agrees that can be useful sometimes:</p>

<ul>
<li>mostly in OOP</li>
<li>to keep you on the rails and focused</li>
</ul>


<p>Tags: tdd, jon-pither, senior-developer, junior-developer, aesthetics, lateral-thinking</p>

<h2>Fred George On Programmer Anarchy</h2>

<p>I&rsquo;ve read <a href="http://www.infoq.com/news/2012/02/programmer-anarchy">this article</a> by Roopesh Shenoy on a talk by Fred George: &ldquo;Programmer Anarchy&rdquo;, where programmers make business decisions based on business metrics set by clients, among other things.</p>

<p>Tags: roopesh-shenoy, fred-george, programmer-anarchy, analogy, anarchy, business-metric, client, agile, methodology</p>

<h2>Programmer Anarchy</h2>

<p>I&rsquo;ve read <a href="http://www.slideshare.net/fredgeorge/programmer-anarchy-chinese">these slides</a> by Fred George about programmer&rsquo;s anarchy. Commented in the article above</p>

<p>Tags: slide, fred-george, programmer-anarchy, analogy, anarchy, business-metric, client, agile, methodology</p>

<h2>What is Programmer Anarchy and does it have a future?</h2>

<p>I&rsquo;ve read <a href="http://martinjeeblog.com/2012/11/20/what-is-programmer-anarchy-and-does-it-have-a-future/">this article</a> by Martin Jee explaining what is programmer anarchy and how it compares to an agile team. Compares the division of labor structure in anarchist and agile teams, using Marxist terms.</p>

<p>He finishes saying that what is a powerful idea in this methodology is the taking of personal responsibilities by the programmers.</p>

<p>Tags: fred-george, programmer-anarchy, analogy, anarchy, martin-jee, agile, methodology</p>

<h2>Agile is the New Black</h2>

<p>I&rsquo;ve read <a href="http://www.slideshare.net/fredgeorge/agile-is-thenewblack">these slides</a> by Fred George where compares xp/agile development in 1999, 2006 and 2011.</p>

<p>Tags: fred-george, agile, methodology, comparison, slide</p>

<h2>Show How, Don&rsquo;t Tell What - A Management Style</h2>

<p>I&rsquo;ve read <a href="http://2ndscale.com/rtomayko/2012/management-style">this article</a> by Ryan Tomayko about the management style they apply at github:</p>

<blockquote><p>instead of telling them what to do, show people how to plan, build, and ship product together.</p>

<p>I’ve never actually told anyone what to do here. In fact, I vehemently refuse to tell people what to do. Here are just a couple reasons why:</p>

<p>I don’t scale. If I tell someone what to do and they do it, then what? Do I have to tell them another thing to do? What happens when I have to decide what to do for 20 people?</p>

<p>Telling people what to do is lazy. Instead, try to convince them with argument. This is how humans interact when there’s no artificial authority structure and it works great. If you can’t convince people through argument then maybe you shouldn’t be doing it.</p></blockquote>

<p>about managers:</p>

<blockquote><p>It’s often cited that GitHub doesn’t have managers. In my opinion, a better way to describe the phenomenon would be to say that everyone at GitHub is a manager</p></blockquote>

<p>Tags: ryan-tomayko, management, management-style, team-management, github</p>

<h2>Clojure for the brave and true: chapter 7 - Clojure Alchemy: Reading, Evaluation, and Macros</h2>

<p>I&rsquo;ve read <a href="http://www.braveclojure.com/read-and-eval/">this chapter</a> from Daniel Higginbotham about the essential concepts for macros: the reader, the evaluator, their relative order and independence. How to use clojure to extend itself and an example: the thread (<code>-&gt;</code>) macro</p>

<p>Tags: daniel-higginbotham, clojure, macro, chapter, reader, evaluator</p>

<h2>Team Bus Factors: How to Reduce Them and How to Prevent Them</h2>

<p>I&rsquo;ve read <a href="http://5whys.com/blog/team-bus-factors-how-to-reduce-them-and-how-to-prevent-them.html">this article</a> by Roy Osherove on the bus factor:</p>

<ul>
<li>what is it</li>
<li>how to reduce them</li>
<li>how to prevent them</li>
</ul>


<p>Also talks about examples of bus-factor people</p>

<p>Tags: bus-factor, roy-osherove, team-management, prevention, reduction, definition</p>

<h2>Hambre de programar</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@xav1uzz/hambre-de-programar-166aeae3b525">this article</a> (in Spanish) by Xavi Gost where he analyses the Barcelona Software Craftsmanship 2015: the events, the relationships and the passion that it has injected to attendees</p>

<p>Tags: xavi-gost, barcelona-software-craftsmanship, 2015, experience-report, scbcn15</p>

<h2>Software Craftsmanship Barcelona 2015</h2>

<p>I&rsquo;ve read <a href="http://www.idealista.com/labs/blog/idealista/software-craftsmanship-barcelona-2015/">this analysis</a> of the Barcelona Software Craftsmanship 2015 by the Idealista R&amp;D team.</p>

<p>Tags: jaime-perera, barcelona-software-craftsmanship, 2015, idealista, experience-report, scbcn15</p>

<h2>JVMLS 2015 - Compilers are Databases</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=48js0H6ooBY">this video</a> by Martin Odersky on why compilers resemble databases and explains how a functional compiler works on the inside.</p>

<p>Explains the notion of a Type, Reference, Symbol, Denotation (and Multi-Denotation) living in the Abstract Syntax Tree (AST)</p>

<p>Also explains the need for a reading compiler (e.g., for quick validation in the IDE), single-pass and multi-pass compiler.</p>

<p>They have built phases to transform the source code into bytecode, but to better use the cache locality, they programmatically mix phases using Java Reflection (metaprogramming) to traverse the tree (AST) once for these selected phases.</p>

<p>Tags: type, reference, symbol, denotation, abstract-syntax-tree, ast, compiler, functional-compiler, scalac, dotty, martin-odersky, analogy, database</p>

<h2>In Functional Programming, what is a functor?</h2>

<p>I&rsquo;ve read <a href="http://stackoverflow.com/questions/2030863/in-functional-programming-what-is-a-functor/2031421#2031421">this answer</a> of what is a functor</p>

<p>Tags: stack-overflow, functor, answer, functional-programming</p>

<h2>Ten Habits of a Good Programmer</h2>

<p>I&rsquo;ve read <a href="http://hintjens.com/blog:98">this list</a> of good habits of good programmers by Pieter Hintjens:</p>

<ol>
<li>If it works and is still useful, don&rsquo;t throw it out.</li>
<li>Never solve the same problem twice in parallel.</li>
<li>Solve the same problem often in serial.</li>
<li>Write code, and repeat, until you are fluent in your language.</li>
<li>Learn to use code generators.</li>
<li>Work with others.</li>
<li>Technology is a tool, not a tribal affiliation.</li>
<li>Aim for this cycle: learn, play, work, teach.</li>
<li>Get your edit-compile-run-fail cycles down to seconds.</li>
<li>If you need debuggers, you&rsquo;re doing it wrong.</li>
</ol>


<p>Tags: pieter-hintjens, list, habit, good-programmer</p>

<h2>Beginning Clojure: Cursive</h2>

<p>I&rsquo;ve read <a href="http://potetm.github.io/2015/10/04/beginning-clojure-cursive.html">this tutorial</a> on installing Cursive, IntelliJ Idea&rsquo;s plugin for working with Clojure. Written by Tim Pote</p>

<p>Tags: cursive, clojure, intellij-idea, plugin, tutorial, tim-pote</p>

<h2>#NodeJS : A quick optimization advice</h2>

<p>I&rsquo;ve read <a href="https://top.fse.guru/nodejs-a-quick-optimization-advice-7353b820c92e">this article</a> on the limit for inlining for the NodeJS optimizing compiler (Crankshaft), that includes both source code and comments. Written Julien Crouzet</p>

<p>Tags: nodejs, comment, julien-crouzet, crankshaft, optimizer, inline, function-inline</p>

<h2>Specification Pattern</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Specification_pattern">this wikipedia</a> page on the specification pattern</p>

<p>Tags: eric-evans, martin-fowler, specification-pattern, pattern, design-pattern, dsl, domain-specific-language</p>

<h2>El recruiting está ROTO #Bonilista</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;id=539364dde4">this bonilista</a> where David Bonilla explains why the recruitment sector for technical people in Spain is broken. Article is in Spanish.</p>

<p>Tags: david-bonilla, bonilista, recruitment, job, career</p>

<h2>BDDon’t: The practice and the tools</h2>

<p>​I&rsquo;ve  read <a href="https://www.thoughtworks.com/p2magazine/issue12/bdd-dont/">this article</a> by Kevin Dishman that explains what is BDD and how it I  usually used. Also the common downsides and what to do about it</p>

<p>Suggests using a faster tool, lower on the test pyramid that can bring the same business value at a lower cost</p>

<p>Tags: kevin-dishman, downside, test-pyramid, bdd, test, unit-test, functional-test, acceptance-test</p>

<h2>Cómo usan #Git en GitHub – #scbcn</h2>

<p>I&rsquo;ve watched <a href="http://codely.tv/screencasts/como-usan-git-en-github/">this screencast</a> on the talk we organized yesterday about github.</p>

<p>Tags: javier-ferrer, codely-tv, codely, event, scbcn, alain-helaili, screencast</p>

<h2>Trying to speed up Binary Search</h2>

<p>I have read <a href="http://databasearchitects.blogspot.com.es/2015/09/trying-to-speed-up-binary-search.html">this article</a> on how the binary search is implemented and what other algorithms are possible to speed up the search in large datasets, especially common in databases.</p>

<p>Tags: optimization, branch-misprediction, clang, o3, gpp, c, database, binary-search, thomas-neumann</p>

<h2>Scrum 3.0 and Organization 4.0 - impressions from a great evening with Boris Gloger at ImmobilienScout24</h2>

<p>I have read <a href="http://www.ontheagilepath.net/2015/12/scrum-30-and-organization-40.html">this article</a> by  Sebastian Radics that compares the different ways of doing scrum: 1 2 3, most comments on other strategies or management methodologies like no estimates.</p>

<p>Compares the importance of focusing on the process or on the final product, the role of the scrum master, the role of the product owner, and the team itself.</p>

<p>Tags: management, agile, scrum, team-management, sebastian-radics, scrum30</p>

<h2>Trucos para trabajar con equipos remotos</h2>

<p>I have read <a href="http://thinkingwithyou.com/2015/11/trucos-para-trabajar-con-equipos-remotos/">this article</a> by Israel Alcázar (Spanish). Explains how this company organized their product development process. explains tools for working with a remote team.</p>

<p>give three pieces of advice for improving it, and further resources to read</p>

<p>Tags: remote, remote-first, isra-alcazar, israel-alcazar, team-management, advice</p>

<h2>Introducing new open-source tools for the Elixir community</h2>

<p>I&rsquo;ve read <a href="https://engineering.pinterest.com/blog/introducing-new-open-source-tools-elixir-community">this article</a> by Steve Cohen that explains what the actor model is and what is the spirit of the elixir language: user friendlier syntax for erlang</p>

<p>They also explain that they have implemented and ad server and access control using elixir. For this matter, they rely on two tools that are now open source</p>

<p>Tags: elixir, microsecond, latency, erlang, actor-model, language-syntax, open-source, steve-cohen</p>

<h2>¿Cuánto pagas por tus herramientas de trabajo?</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;id=12ed2d6eb0">this bonilista</a> about how much programmers invest in buying their tools (and honing them). By David Bonilla, in Spanish</p>

<p>Tags: david-bonilla, bonilista, tool, investment</p>

<h2>Clojure at a Bank – Freeing the Rules</h2>

<p>I&rsquo;ve read <a href="http://www.pitheringabout.com/?p=830">this article</a> by Jon Pither about converting OO business rules into Clojure and using the homoiconicity for increasing the power: when code is data, the rules themselves become searchable (using a search engine), visualizable and analyzable. This wasn&rsquo;t possible before when code was not data.</p>

<p>They have also build further tools to analyze rules with larger sets of data, rather than unit tests, to see if they conflict among each other.</p>

<p>Tags: jon-pither, clojure, homoiconicity, code=data, data=code, rule, rule-engine, bank, business-rule, code-analysis</p>

<h2>Five reasons to learn Clojure and Emacs together</h2>

<p>I&rsquo;ve read <a href="http://www.pitheringabout.com/?p=849">this article</a> by Jon Pither advocating the learning of Clojure and Emacs at the same time. The main reasons are: liberation, change, support, simplicity, mass adoption.</p>

<p>Cites that being hard to learn a new editor is a good idea to separate those who are willing to invest the time in learning (both an editor and a new language) from those who don&rsquo;t.</p>

<p>Tags: clojure, emacs, jon-pither, learning, liberation, change, support, simplicity, mass-adoption</p>

<h2>Pull Requests Maintainers Won&rsquo;t Hate</h2>

<p>I&rsquo;ve read this <a href="https://www.booleanknot.com/blog/2013/09/07/pull-requests.html">list of tips</a> by James Reeves on improving the pull requests
Tags: pull-request, james-reeves, tip, list</p>

<h2>How to get rich in tech, guaranteed.</h2>

<p>I&rsquo;ve read <a href="http://startupljackson.com/post/135800367395/how-to-get-rich-in-tech-guaranteed">this article</a> that describes what is a way to make good money and retire rich why working for a company.</p>

<p>It also explains about entering the startup market, what questions should be asked, what&rsquo;s your real value, what are the benefits of doing it, known limitations and other questions</p>

<p>Tags: startup, career, career-management, work, professional-career, value, money</p>

<h2>Modern Perl 4th edition, a review</h2>

<p>I have read <a href="http://perltricks.com/article/205/2015/12/21/Modern-Perl-4th-edition--a-review">this article</a> that explains how this new book covers the syntax, idioms and the rest of the Perl language.</p>

<p>In this 4th edition, parts of  the text have completely been rewritten, a New formatting applied to ease and improve the reading comprehension</p>

<p>Tags: book-review, review, david-farrell, perl, reedition, modern-perl</p>

<h2>8 Characteristics of Agile Software Developers</h2>

<p>​I&rsquo;ve read <a href="https://medium.com/@pm_loop/8-characteristics-of-successful-agile-software-developers-ab2c43abb959">this article</a> that describes what characteristics are common in companies practicing an agile methodology, as revealed by a study (that even though it&rsquo;s not cited, can be tracked back to <a href="http://productdevelopmentsuccess.com/study">here</a>)</p>

<p>Suggests ideas for teams that change in a changing environment and what to do about it.</p>

<p>Written by Keela Robison.</p>

<p>Tags: keela-robison, agile, team-management</p>

<h2>This is why you never end up hiring good developers</h2>

<p>I&rsquo;ve read <a href="http://qz.com/258066/this-is-why-you-dont-hire-good-developers/">this article</a> that explains what to look for in a strong, stronger, strongest (software) developer</p>

<p>The main idea is to find a good person that fits the job, without inflicting pain in the team morale and can learn to perform the specific tasks in the future, as (paraprasing) the pool of people that know what you need is much smaller than the people who can learn it.</p>

<p>The article specifies what to look and not look for in a candidate.</p>

<p>Some quotes:</p>

<blockquote><p>grasp of complex topics and the ability to clearly communicate about them, which are the two jobs of the working engineer.</p>

<p>track record of learning new skills and applying them successfully</p>

<p>TL;DR:</p>

<ol>
<li><p>Many interview techniques test skills that are at best irrelevant to real working life;</p></li>
<li><p>you want somebody who knows enough to do the job right now;</p></li>
<li><p>or somebody smart and motivated enough that they can learn the job quickly;</p></li>
<li><p>you want somebody who keeps getting better at what they do;</p></li>
<li><p>your interview should be a collaborative conversations, not a combative interrogation;</p></li>
<li><p>you also want somebody who you will enjoy working with;</p></li>
<li><p>it’s important to separate “enjoy working with” from “enjoy hanging out with;”</p></li>
<li><p>don’t hire assholes, no matter how good they are;</p></li>
<li><p>if your team isn’t diverse, your team is worse than it needed to be;</p></li>
<li><p>accept that hiring takes a really long time and is really, really hard.</p></li>
</ol>
</blockquote>

<h2>Effective Learning Strategies for Programmers</h2>

<p>I&rsquo;ve (re-)read <a href="http://akaptur.com/blog/2015/10/10/effective-learning-strategies-for-programmers/">this article</a> by Allison Kaptur on fixed vs growth mindset and the need for having the latter for being a programmer.</p>

<p>The fixed mindset is present in the 10x-engineer, and the worshipping of heroes.</p>

<p>It also includes a recipe for changing from a fixed-mindset to a growth-mindset.</p>

<p>(Note: this entry is also present in this same month)</p>

<p>Tags: allison-kaptur, fixed-mindset, growth-mindset, research, learning-strategy, recurse-center, carol-dweck, mindset, 10x-engineer, impostor-syndrome</p>

<h2>Doctor! Please fix my agile!</h2>

<p>I&rsquo;ve read <a href="https://dl.dropboxusercontent.com/u/59614769/Presentations/Doctor%20please%20fix%20my%20Agile.pdf">these slides</a> by Ville Törmälä on what is agile, organizational problems and the distinction between efficiency and effectiveness. Also talks about the distribution of time and the organization of the environment (what calls)</p>

<p>Tags: slide, agile, efficiency, effectiveness, tip, organization, ville-tormala, project-thinking, team-thinking</p>

<h2>“Wolf” narrative considered harmful (also biologically unlikely)</h2>

<p>I&rsquo;ve read <a href="http://laughingmeme.org/2014/09/02/wolf-narrative-considered-harmful-also-biologically-unlikely/">this article</a> that explains what the &ldquo;lone wolf&rdquo; archetype is, among programmers, and possible outcomings for those profiles. Written by Kellan Elliott-McCrea.</p>

<p>Describes some craftsmanship ideas for these roles, based on their proficiency with their tools, that will generate tools for the rest of the team and make the rest more effective. Also discusses the non-management advancement career.</p>

<p>Tags: analogy, wolf, lone-wolf, archetype, programmer, programmer-analogy, profile, team-management, kellan-elliott-mccrea</p>

<h2>The Wolf - dictating their own terms</h2>

<p>I&rsquo;ve read <a href="http://randsinrepose.com/archives/the-wolf/">this article</a> by Michael Lopp about the <code>wolf</code> position as a person or in a team. He describes their characteristics and his own experiences working with them.</p>

<p>Tags: management, wolf, team-management, analogy, michael-lopp</p>

<h2>Volkswagen and Cheating Software</h2>

<p>I&rsquo;ve read <a href="https://www.schneier.com/crypto-gram/archives/2015/1015.html#1">this essay</a> by Bruce Schneier on cheating software, using as an example the Volkswagen case, but especially centered on software that is made do cheat in an undetectable fashion. Or that could be attributed to a programming mistake. The later, says the author, is so common that there could be already intentional or unintentional errors hiding cheating.</p>

<p>The author cites the Internet of Things of new opportunities for companies to use / produce cheating software and about a possible solution: transparency and oversight of the software that more and more reigns our lives.</p>

<p>Other (opinion) articles I&rsquo;ve read on the issue are:</p>

<ul>
<li><a href="http://www.nytimes.com/2015/09/24/opinion/volkswagen-and-the-era-of-cheating-software.html">Volkswagen and the Era of Cheating Software</a> by Zeynep Tufekci</li>
<li><a href="http://fusion.net/story/202867/volkswagen-software-deception-ai/">Volkswagen isn’t the first company to use software to break the law and it won’t be the last</a> by Daniela Hernandez</li>
<li><a href="http://www.slate.com/articles/technology/future_tense/2015/09/volkswagen_s_cheating_emissions_software_and_the_threat_of_black_boxes.html">Harry Potter and the Mysterious Defeat Device</a> by James Grimmelmann</li>
</ul>


<p>Tags: cryptogram, bruce Schneier, volkswagen, mistake, quality, transparency, oversight, iot, essay, cheating, cheating software</p>

<h2>Please, Java. Do Finally Support Multiline String Literals</h2>

<p>I&rsquo;ve read <a href="http://blog.jooq.org/2015/12/29/please-java-do-finally-support-multiline-strings/">this article</a> explaining the need for multi-line string literal in java.</p>

<p>Tags: java, syntax, string, feature, multi-line string</p>

<h2>The Silver Bullet Syndrome</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=3wyd6J3yjcs">this talk</a> by Hadi Hariri about chasing the next silver bullet.</p>

<p>He explains this with javascript and nodejs, but it could be exemplified with other technologies / promises as well.</p>

<p>Note: ABC stands for:</p>

<ul>
<li>A = address</li>
<li>B = binding</li>
<li>C = contract</li>
</ul>


<p> Tags: hadi-hariri, silver-bullet, talk, devoxx</p>

<h2>Writing Clean Tests – Small Is Beautiful</h2>

<p>I&rsquo;ve read <a href="http://www.petrikainulainen.net/programming/testing/writing-clean-tests-small-is-beautiful/">this article</a> by Petri Kainulainen on writing BDD style tests with JUnit in java.</p>

<p>There is <a href="https://github.com/NitorCreations/CoreComponents/tree/master/junit-runners">a tool</a>, created by Nitor Creations that allows you to write nested classes in JUnit, allowing for test specialization.</p>

<p>Tags: junit, runner, bdd, test, nitor-creations, petri-kainulainen, tdd</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Study in November 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/"/>
    <updated>2015-11-02T13:25:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015</id>
    <content type="html"><![CDATA[<h2>Call me maybe: RabbitMQ</h2>

<p>I&rsquo;ve read <a href="https://aphyr.com/posts/315-call-me-maybe-rabbitmq">this article</a> by Kyle Kingsbury on using RabbitMQ as a lock service. It investigates and gives a counterexample of using it for this purpose.</p>

<p>Uses Knossos to do the testing and surfaces a problem with it. Explains specific problems on locking: at-most-once and at-least-once message delivery</p>

<p>Note: References Jepsen (I guess an inside joke to the song &ldquo;Call me maybe&rdquo; by Carly Rae Jepsen) for at-most-once and at-least-once message delivery.</p>

<p>Tags: rabbitmq, kyle-kingsbury, lock, cap-theorem, distributed-system, jepsen, knossos, at-most-once-delivery, at-least-once-delivery, counterexample, mutex</p>

<h2>Everyone is potentially a teacher</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/09/everyone-is-potentially-a-teacher">this article</a> by Carlos Blé where he explains that everyone can have ideas worth spreading and that the knowledge not only comes from others but also from the relationships that tie you to other people.</p>

<p>Tags: carlos-ble, teaching, pedagogy, idea, teacher, relationship</p>

<h2>Ragel State Machine Compiler</h2>

<p>I&rsquo;ve read <a href="http://www.colm.net/open-source/ragel/">this article</a> explaining what the Ragel project is about: a code generator from regex to code in languages such as C#, Java, etc. It is limited to finite state machines (FSM), with determinism. It can also handle some indeterminism. Written by Adrian D. Thurston</p>

<p>Tags: adrian-thurston, fsm, state-machine, finite-state-machine, code-generation, ragel</p>

<h2>HTTP is obsolete. It&rsquo;s time for the distributed, permanent web</h2>

<p>I&rsquo;ve read <a href="https://ipfs.io/ipfs/QmNhFJjGcMPqpuYfxL62VVB9528NXqDNMFXiqN5bgFYiZ1/its-time-for-the-permanent-web.html">this article</a> by Kyle Drake explaining the need for a permanent, distributed web archive.</p>

<p>Using a distributed file system (IPFS) and software similar to Bitcoin, they can host parts of the web locally, making it immutable and distributed</p>

<p>Tags: kyle-drake, web-archive, centralization, decentralization, distribution, permanent-web, ipfs, federation,</p>

<h2>Recovering From the Integrated Tests Scam</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive1.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=42e61e203e&amp;e=4a925444f9">this article</a> from J. B. Rainsberger on the integrated test scam and how to solve it: refactoring.</p>

<p>Tags: jbrains, tdd, integrated-test, integration-test, j-rainsberger</p>

<h2>Broken windows theory</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Broken_windows_theory">this wikipedia article</a> that talks about the broken windows theory, that states that controlling and monitoring public spaces leads to lowering the serious crimes.</p>

<p>Cites three causes for this:</p>

<ul>
<li>Social norms and conformity</li>
<li>Lack of routing monitoring</li>
<li>Social signaling and signal crime</li>
</ul>


<p>Also discusses examples in the US and in the Netherlands, as well as criticisms.</p>

<p>I&rsquo;ve read it to better understand how to apply this theory to software development, on a day-to-day basis.</p>

<p>Tags: wikipedia, theory, broken-window</p>

<h2>Scsh</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Scsh">the wikipedia page</a> for Scsh, the Scheme shell.</p>

<h2>Why is Scala&rsquo;s type inference not as powerful as Haskell&rsquo;s?</h2>

<p>I&rsquo;ve read the reasoning why Haskell supports other type inferences that are not present in Scala, in <a href="http://stackoverflow.com/questions/7234095/why-is-scalas-type-inference-not-as-powerful-as-haskells">this StackOverflow question</a></p>

<p>Tags: scala, haskell, type-inference, hindley-milner, type-inference-algorithm</p>

<h2>The Future of the LispM</h2>

<p>I&rsquo;ve read <a href="http://arrdem.com/2014/11/28/the_future_of_the_lispm/">this article</a> explaining the past and current situation in the Lisp world: from Lisp, to LispM, to the MIT and Symbolics Inc., to Clojure and Scheme.</p>

<p>Also talks about integration with the operating system and its execution in the microprocessor. Written by Reid McKenzie</p>

<p>Tags: reid-mckenzie, lisp, lispm, clojure, scheme, symbolics</p>

<h2>The Lisp Curse</h2>

<p>I&rsquo;ve read <a href="http://www.winestockwebdesign.com/Essays/Lisp_Curse.html">this essay</a> by Rudolf Winestock, where he explains the low barrier (or low cost) for people in powerful languages (such as Lisp) to not accept the status quo in their project and fork / start their own.</p>

<p>It also compares languages and the people attracted to them. Cites Mark Tarver&rsquo;s essays several times, including the Brilliant Bipolar Mind (BBM) in <a href="https://web.archive.org/web/20150308085419/http://www.lambdassociates.org/blog/bipolar.htm">this other</a> essay (from WebArchive). Compares the BBM and the normal worker in usefulness to companies.</p>

<p>Cites the Pareto principle (80-20 rule): a single hacker will port 80% the library from another language, leaving it buggy, undocumented and only understandable by the original author (assuming this is only 20% of the work). The rest (e.g., documentation, bugfixing, maintenance) are dropped and never taken care of.</p>

<p>Cites that this could be somewhat based on the facility of creating new features for the language. A small effort implies small implementation time, leaving no margin for thinking it through and seeing other corner cases. Also, a single person working on the project means no code review. The style might be coherent (always the same one), but might not be idiomatic, understandable by others, maintainable, etc.</p>

<p>Closes the essay with this quote:</p>

<blockquote><p>The expressive power of Lisp has drawbacks. There is no such thing as a free lunch.</p></blockquote>

<p>Tags: rudolf-winestock, essay, pareto-principle, hacking, one-man-band, lisp, no-free-lunch, quote</p>

<h2>The Bipolar Lisp Programmer</h2>

<p>I&rsquo;ve read <a href="https://web.archive.org/web/20150308085419/http://www.lambdassociates.org/blog/bipolar.htm">this essay</a> by Mark Tarver on the Bipolar Lisp programmmer or the koan of Lisp.</p>

<p>It explains the history of the Brilliant Bipolar Mind (BBM) when they attend high school and college. The freedom they&rsquo;re given, exactly the same as in Lisp, as you don&rsquo;t need to mix and socialize with others to create a good-enough solution.</p>

<p>In this fashion, he says, most of the projects are 80% finished, not documented, not maintained. The same problems that worry enterprises.</p>

<p>Cites the article &ldquo;Lisp: Good News, Bad News, How to Win Big&rdquo;</p>

<p>Tags: essay, mark-tarver, bipolar-lisp-programmer, lisp-programmer, programmer, brillian-bipolar-mind, blp, bbm, koan</p>

<p>Note: this article was no longer present on its original site. Fetched it from the Web Archive (WayBack Machine).</p>

<h2>Writing readable Clojure code</h2>

<p>I&rsquo;ve read <a href="http://www.slideshare.net/jiriknesl/writing-readable-clojure-code">these slides</a> by Jiří Knesl, that explains how to write better clojure code:</p>

<ul>
<li>Macros</li>
<li>HOFs</li>
<li>left-to-right vs right-to-left code</li>
</ul>


<p>Tags: clojure, jiri-knesl, macro, hof, thread, slide</p>

<h2>How can I get a reference to a method?</h2>

<p>I&rsquo;ve read <a href="http://stackoverflow.com/questions/485151/how-can-i-get-a-reference-to-a-method">this question</a>, <a href="http://stackoverflow.com/questions/4294485/how-do-i-reference-a-function-in-ruby">another question</a> from StackOverflow</p>

<p>Tags: stackoverflow, question, ruby, functional-programming, method-reference</p>

<h2>Implicit and Explicit Blocks</h2>

<p>I&rsquo;ve read <a href="https://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/18-blocks/lessons/55-new-lesson">this lesson from rubyMonk</a></p>

<p>Tags: rubymonk, lesson, block, ruby</p>

<h2>What&rsquo;s Point-free Programing?</h2>

<p>I&rsquo;ve read <a href="http://xahlee.info/comp/point-free_programing.html">this article</a> by Xah Lee explaining point-free programming, which requires a glance at function decomposition (currying)</p>

<blockquote><p>[&hellip;] “point-free programing” is:</p>

<ul>
<li>It is about a particular <strong>syntax</strong> for <strong>function definition</strong>.</li>
<li>When <strong>defining a function</strong>, no symbol is used for function parameter.</li>
</ul>
</blockquote>

<h2>Oracle’s “planned obsolescence” for Java</h2>

<p>I&rsquo;ve read <a href="https://jaxenter.com/oracle-and-javas-planned-obsolescence-121144.html">this article</a> by Coman Hamilton on the possible Java&rsquo;s planned obsolescence by Oracle.</p>

<p>Discusses features pushed to future releases, comparing it to other legacy languages.</p>

<p>Tags: obsolescence, legacy-language, planned-obsolescence, java, java-ee, oracle, fortran, cobol, coman-hamilton</p>

<h2>Your first Ruby native extension: C</h2>

<p>I&rsquo;ve read <a href="https://blog.jcoglan.com/2012/07/29/your-first-ruby-native-extension-c/">this article</a> about writing a native extension for ruby. Written by James Coglan</p>

<p>Tags: james-coglan, ruby, c, native-extension</p>

<h2>What&rsquo;s the difference between equal?, eql?, ===, and ==?</h2>

<p>I&rsquo;ve read <a href="http://stackoverflow.com/questions/7156955/whats-the-difference-between-equal-eql-and">this stackoverflow</a> question regarding Ruby operators: equal?, eql?, ===, ==:</p>

<ul>
<li>==: generic equality</li>
<li>===: case equality (for case - when)</li>
<li>eql?: hash equality</li>
<li>equal?: identity comparison (pointer comparison)</li>
</ul>


<p>Tags: comparison, stackoverflow, ruby, equal, eq, ==, ===, question, answer, jtbandes</p>

<h2>Kanban</h2>

<p>I&rsquo;ve read <a href="https://es.wikipedia.org/wiki/Kanban">the wikipedia page</a> for Kanban (Spanish)</p>

<p>Tags: wikipedia, kanban, agile-methodology, management</p>

<h2>Is your Scrum team Agile?</h2>

<p>I&rsquo;ve read <a href="https://blog.thesoftwarecraft.com/2014/04/is-your-scrum-team-agile.html">this article</a> by  Bart Bakker where he discusses some common patterns in Agile implementations (in software companies)</p>

<p>Tags: scrum, team, agile, scrum-implementation, bart-bakker</p>

<h2>Mejora tu trabajo en equipo con el método Kanban</h2>

<p>I&rsquo;ve read <a href="http://hipertextual.com/archivo/2013/11/que-es-kanban/">this article</a> that explains then kanban management framework, with its principles and its values. Written by Jose López (in Spanish)</p>

<p>Tags: kanban, management, agile-methodology, management-framework, principle, value, jose-lopez</p>

<h2>¿Qué es el método Kanban para la gestión de proyectos?</h2>

<p>I&rsquo;ve read <a href="http://www.javiergarzas.com/2011/11/kanban.html">this article</a> (Spanish) written by Javier Garzás where it is explained the kanban methodology and three of its main rules:</p>

<ul>
<li>visualize workflow</li>
<li>limit WIP</li>
<li>measure {lead, cycle} time</li>
</ul>


<p>Tags: kanban, management, agile-methodology, management-framework, principle, value, javier-garzas</p>

<h2>describe vs. context in rspec</h2>

<p>I&rsquo;ve read <a href="http://lmws.net/describe-vs-context-in-rspec">this article</a> that explains the (lack of) functional difference between RSpec&rsquo;s <code>describe</code> and <code>context</code> methods. The difference is contextual (i.e., the amount of information they convey). Written by LM</p>

<p>Tags: rspec, ruby, describe, context, difference</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-Study in October 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/"/>
    <updated>2015-10-01T13:25:19+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015</id>
    <content type="html"><![CDATA[<h2>Blazing Fast HTML: Virtual DOM in Elm</h2>

<p>I&rsquo;ve read <a href="http://elm-lang.org/blog/blazing-fast-html">this article</a> explaining how Elm works in relation to the virtual DOM. By Evan Czaplicki.</p>

<p>Tags: elm, dom, virtual-dom, comparison, speed, haskell, evan-czaplicki</p>

<h2>Why you should never, ever, ever use MongoDB</h2>

<p>I&rsquo;ve read <a href="http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/">this article</a> stating the downsides of using MongoDB. Written by Sven Slootweg</p>

<p>Tags: mongodb, downside, sven-slootweg, json, document-store, postgresql, acid</p>

<h2>Do you really get classloaders?</h2>

<p>I&rsquo;ve watched <a href="http://zeroturnaround.com/rebellabs/rebel-labs-tutorial-do-you-really-get-classloaders/">this video</a> by Jevgeny Kabanov on classloaders: what they are, how they work nad some tips to solve common issues.</p>

<p>My notes:</p>

<ul>
<li>the classloading is lazy: the resources are not loaded until they are mentioned</li>
<li>every classloader has a parent</li>
<li>every class has a classloader associated with it</li>
<li>every object has a class associated with it</li>
<li>classloading delegation: the parent is consulted before loading a class. if it has it, it will load it. If not, I will delegate it</li>
</ul>


<p>There is also <a href="http://www.javaworld.com/article/2074396/core-java/javaone-2011--do-you-really-get-classloaders-.html">this article</a> on the same video</p>

<p>Tags: jevgeny-kabanov, classloader, java,</p>

<h2>Truth table</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Truth_table">the wikipedia article</a> about the truth table and the 16 possible binary boolean operators:</p>

<ul>
<li>Contradiction</li>
<li>NOR</li>
<li>Converse nonimplication</li>
<li>Negation (of p)</li>
<li>Material nonimplication</li>
<li>Negation (of q)</li>
<li>XOR (exclusive disjunction)</li>
<li>NAND</li>
<li>AND (conjunction)</li>
<li>XNOR (biconditional)</li>
<li>Projection (of p)</li>
<li>Implication</li>
<li>Projection (of q)</li>
<li>Converse implication</li>
<li>OR (disjunction)</li>
<li>Tautology</li>
</ul>


<h2>7 lines of code, 3 minutes: Implement a programming language from scratch</h2>

<p>I&rsquo;ve read <a href="http://matt.might.net/articles/implementing-a-programming-language/">this article</a> by Matt Might about the benefits of implementing a language (from scratch but on top of another existing language used as framework). Chooses lambda calculus as the desired DSL</p>

<p>Tags: matt-might, lambda-calculus, racket, domain-specific-language</p>

<h2>Turing completeness</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/Turing_completeness">this wikipedia article</a> (both main and discussion) about this subject.</p>

<p>It has sounded strange to me the reference to S-expressions:</p>

<blockquote><p>Data languages
The notion of Turing-completeness does not apply to languages such as XML, HTML, JSON, YAML and S-expressions because they are typically used to represent structured data, not describe computation [&hellip;]</p></blockquote>

<p>If data (S-expression) is represented as the same format as code (e.g., Lisp&rsquo;s S-expression) and the latter is used to represent a computation, shouldn&rsquo;t be &ldquo;data languages that also are used as computation languages&rdquo; excluded from that list?</p>

<p>As a side note, Lisp is Turing Complete (see <a href="https://en.wikipedia.org/wiki/Turing_completeness#Examples">Turing Complete#Examples</a>)</p>

<h2>The Prize Is Won; The Simplest Universal Turing Machine Is Proved</h2>

<p>I&rsquo;ve read <a href="http://blog.wolfram.com/2007/10/24/the-prize-is-won-the-simplest-universal-turing-machine-is-proved/?year=2007&amp;monthnum=10">this article</a> by Stephen Wolfram about the proof of a Turing Machine 2,3 being universal by Alex Smith.</p>

<p>Tags: stephen-wolfram, turing-machine, universal-turing-machine, proof, paper, alex-smith</p>

<h2>Making a successful commitment in each Sprint</h2>

<p>I&rsquo;ve read <a href="http://succeeding-with-agile.blogspot.com/2015/07/making-successful-commitment-in-each.html">this article</a> by Nikolaos Raptis on committing to work in each sprint.</p>

<p>Tags: nikolaos-raptis, sprint, agile, commitment</p>

<h2>No increment operator (++) in Ruby?</h2>

<p>I&rsquo;ve read <a href="http://stackoverflow.com/questions/3717519/no-increment-operator-in-ruby">this stackoverflow</a> question about the lack of post-increment operator (i++) in Ruby:</p>

<blockquote><p>++ and &ndash; are NOT reserved operator in Ruby.</p>

<p>Mailing list from <a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/2710">Yukihiro Matsumoto aka matz</a></p></blockquote>

<h2>Code is Data, Data is Code</h2>

<p>I&rsquo;ve read <a href="http://blogs.mulesoft.com/dev/news-dev/code-is-data-data-is-code/">this article</a> by James Donelan on the equivalence of code and data in homoiconic languages, including Clojure.</p>

<p>The article talks about homoiconicity, manually creating Abstract Syntax Trees (AST) out of data and the macro environment. Also, compares the difference between macros and functions.</p>

<p>Tags: code=data, data=code, james-donelan, clojure, homoiconicity, abstract-syntax-tree, ast, macro, function</p>

<h2>Agile in Practice: Test Driven Development</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=uGaNkTahrIw">this video</a> introducing TDD by the Agile Academy. Explains its motivations and the basic cyclical fashion.</p>

<p>Tags: agile-academy, video, tdd, introduction</p>

<h2>Agile in Practice: Pair Programming</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=ET3Q6zNK3Io">this video</a> by Agile Academy on practicing pair programming. Explains the destination and how to get there.</p>

<p>Tags: agile-academy, pair-programming, video, introduction</p>

<h2>A low cost approach to working on side projects</h2>

<p>I&rsquo;ve read <a href="https://practicingruby.com/articles/low-cost-approach-to-side-projects">this article</a> by Gregory Brown on how to apply the MVP and Lean Startup principles to side projects (a.k.a. pet projects). Try to start with a brainstorming session of all the features you want your product to have, then prioritise, picking the most important ones.</p>

<p>Most projects' needs can be solved with a minimal version, in the form of a script that took half an hour to develop.</p>

<p>Tags: gregory-brown, mvp, lean-startup, script, proof-of-concept, priority, backlog, side-project, pet-project, low-cost, cost-reduction</p>

<h2>Extreme Programming</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=kFM2Vcu-BRo">this video</a> by STAR Videos on the basic principles behind Extreme Programming and how to use it to improve software quality</p>

<p>Tags: star-videos, extreme-programming, xp, software-quality</p>

<h2>Disruptor: High performance alternative to bounded queues for exchanging data between concurrent threads</h2>

<p>I&rsquo;ve read <a href="http://lmax-exchange.github.io/disruptor/files/Disruptor-1.0.pdf">this white paper</a> describing the disruptor framework: a way of exchanging data between concurrent threads.</p>

<p>It uses a ring buffer and other techniques to eliminate write contention, reduce read contention and produces good results. It was developed for a financial exchange environment but it&rsquo;s general purpose.</p>

<p>Tags: martin-thompson, dave-farley, michael-barker, patricia-gee, andrew-stewart, trisha-gee, disruptor, contention, framework, concurrency, parallelism, white-paper, comparison, arrayblockingqueue, concurrentlinkedqueue, doug-lea, benchmark, lmax, low-level-optimization, optimization</p>

<h2>Dissecting the Disruptor: What&rsquo;s so special about a ring buffer?</h2>

<p>I&rsquo;ve read <a href="http://mechanitis.blogspot.com.es/2011/06/dissecting-disruptor-whats-so-special.html">this article</a> about the ring buffer data structure. A FIFO data structure where elements get overwritten to reduce pressure on the garbage collector. Every message gets sent to every consumer.</p>

<p>Tags: patricia-gee, trisha-gee, disruptor, ring-buffer, data-structure</p>

<h2>The Dependency Inversion Principle</h2>

<p>I&rsquo;ve read <a href="http://www.objectmentor.com/resources/articles/dip.pdf">this paper</a> about the Dependency Inversion Principle (DIP) written Robert C. Martin.</p>

<p>It explains the theory, philosophy behind it. Also, creates an example with a copy buffer and different output locations</p>

<p>Tags: robert-martin, dependency-inversion-principle, dip, example, comparison, object-oriented, principle, solid, design-principle</p>

<h2>DIP in the Wild</h2>

<p>I&rsquo;ve read <a href="http://martinfowler.com/articles/dipInTheWild.html">this article</a> about the Dependency Inversion Principle (DIP) written by Brett L. Schuchert.</p>

<p>It is explained non-canonical representations of this principle, how in other cases he has solved it and conclusions of using it day to day.</p>

<p>Tags: brett-l.-schuchert, dependency-inversion-principle, dip, example, object-oriented, solid, design-principle</p>

<h2>The New New Product Development Game</h2>

<p>I&rsquo;ve read <a href="https://hbr.org/1986/01/the-new-new-product-development-game">this paper</a> about the holistic approach to product development, considered seminal for Scrum and other Agile methodologies. Written by Hirotaka Takeuchi and Ikujiro Nonaka</p>

<p>In it, they describe how teams are distributed, the responsibilities for each one, and the degrees of freedom.</p>

<p>Cites the six basic characteristics:</p>

<ul>
<li>built-in instability</li>
<li>self-organizing project teams</li>
<li>overlapping development phases</li>
<li>multilearning</li>
<li>subtle control</li>
<li>organizational transfer of learning</li>
</ul>


<p>Tags: hirotaka-takeuchi, ikujiro-nonaka, scrum, agile, product-development, management, 1986</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-study in May 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/"/>
    <updated>2015-05-09T14:41:10+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015</id>
    <content type="html"><![CDATA[<p>Update: I&rsquo;ve grouped all small posts related to the self-study from May 2015
into a single post</p>

<h2>Programmer passion considered harmful</h2>

<p>I&rsquo;ve read <a href="https://medium.com/on-coding/programmer-passion-considered-harmful-5c5d4e3a9b28">this article</a> on why programmer passion could be negative. The title is similar to a paper by Dijkstra.</p>

<h2>Software Craftsmanship: Are Bootcamps Enough?</h2>

<p>I&rsquo;ve read <a href="https://www.coursereport.com/blog/software-craftsmanship-are-bootcamps-enough">this article</a> on software craftsmanship, development bootcamps and passion by <a href="https://twitter.com/kauerrolemodel">Ken Auer</a></p>

<h2>Improve your development environments with virtualization</h2>

<p>I have seen this video: <a href="https://www.youtube.com/watch?v=Dg_vPMnC7_k&amp;feature=youtu.be">Improve your development environments with virtualization</a> by Luke Sneeringer.</p>

<p>My notes:</p>

<ul>
<li>development should be exactly like production.</li>
<li>except where it is too painful. there it should be different</li>
</ul>


<h2>Buffer&rsquo;s take on values</h2>

<p>I have found these <a href="http://www.slideshare.net/Bufferapp/buffer-culture-04">values</a>, written by Buffer, very interesting.</p>

<h2>Public static void</h2>

<p>I&rsquo;ve watched this video: <a href="https://www.youtube.com/watch?v=5kj5ApnhPAE">&ldquo;Public, static void&rdquo;</a> by Rob Pike. The slides can be found <a href="http://www.oscon.com/oscon2010/public/schedule/detail/13423">here</a></p>

<h3>My notes</h3>

<ul>
<li>too much bureaucracy</li>
<li>fighting the compiler</li>
<li>dynamic vs static typing</li>
<li>language too verbose</li>
<li><p>do not mix the two of them</p></li>
<li><p>a language niche:</p>

<ul>
<li>comprehensible</li>
<li>statically typed</li>
<li>light on the page</li>
<li>fast to work in</li>
<li>scales well</li>
<li>doesn&rsquo;t require tools but supports them well</li>
<li>good at networking and multiprocessing</li>
</ul>


<p>(minute 10:09)​</p></li>
<li><p><a href="http://golang.org">Go</a> was born to fill this niche</p></li>
</ul>


<h2>Nothing is something</h2>

<p>This video has been extracted to a <a href="../../../../2015/05/04/video-nothing-is-something/">post</a> of its own.</p>

<h2>Software is eating the world</h2>

<p>This video has been extracted to a <a href="../../../../2015/05/10/talk-software-is-eating-the-world/">post</a> of its own.</p>

<h2>The Cost of Test Driven Development</h2>

<p>I&rsquo;ve read <a href="http://blog.typemock.com/2009/03/the-cost-of-test-driven-development.html">this article</a>, on the cost of doing TDD, which refers to <a href="http://www.msr-waypoint.net/en-us/groups/ese/nagappan_tdd.pdf">this paper</a>: Realizing quality improvement through test driven development: results and experiences of four industrial teams (below)</p>

<h2>Realizing quality improvement through test driven development: results and experiences of four industrial teams</h2>

<p>This paper has been extracted to a <a href="../../../../2015/05/12/paper-tdd-in-industrial-teams/">post</a> of its own.</p>

<h2>Learn You Some Lisp for Great Good</h2>

<p>I&rsquo;ve watched the video <a href="https://www.youtube.com/watch?v=3T00X_sNg4Q">Learn You Some Lisp for Great Good</a>, by Howard Abrams.</p>

<p>I guess this is a reference to the popular <a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good!</a>.</p>

<p>He suggests many interesting resources for learning Lisp dialects. The live coding is in Clojure:</p>

<ul>
<li><a href="http://landoflisp.com/">The land of Lisp</a></li>
<li><a href="https://mitpress.mit.edu/sicp/">Structure and Interpretation of Computer Programs</a>. See also <a href="https://twitter.com/SICPQuotes">SICPQuotes</a></li>
<li><a href="http://mitpress.mit.edu/books/little-schemer">The Little Schemer</a></li>
<li><a href="https://www.gnu.org/software/emacs/manual/pdf/eintr.pdf">An Introduction to Programming in Emacs Lisp</a></li>
<li><a href="https://www.4clojure.com/">4clojure Questions</a></li>
<li><a href="http://clojurekoans.com/">Clojure Koans</a></li>
</ul>


<p>On another topic, in the <a href="http://www.meetup.com/ClojureBCN/events/222418104/">Bank accounts exercise from Exercism</a> meetup, we discussed the book <a href="https://pragprog.com/book/shcloj2/programming-clojure">Programming Clojure (2nd edition)</a> by Stuart Halloway</p>

<h2>Professor Frisby&rsquo;s Mostly Adequate Guide to Functional Programming</h2>

<p>I&rsquo;ve read <a href="https://github.com/DrBoolean/mostly-adequate-guide">this guide</a> to functional programming. It is still work in progress (WIP) but still interesting. Written in javascript, so you can REPL in the browser.</p>

<h2>Learning Code Good</h2>

<p>I&rsquo;ve watched this video, by Saron Yitbarek: <a href="https://www.youtube.com/watch?v=-nsnAYRqYLA">Learn Code Good</a>.</p>

<h2>Why You Don&rsquo;t Get Mock Objects</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=R9FOchgTtLM">Why You Don&rsquo;t Get Mock Objects</a>, by Gregory Moeck.</p>

<p>In it, they point to the <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> book (<a href="/blog/categories/goos">category here</a>), the paper <a href="www.jmock.org/oopsla2004.pdf">Mock Roles, not Objects</a> (also present in the GOOS book).</p>

<h2>Technical Debt: A Repayment Plan</h2>

<p>I&rsquo;ve read <a href="http://www.infoq.com/articles/tech-debt-repayment">this article</a> by <a href="https://twitter.com/@jeremyjarrell">Jeremy Jarrell</a> on technical debt how to repay it: schedule, taxes, default, etc</p>

<p>This has made me think of the <a href="http://scbcn.ideascale.com/a/dtd/Deuda-t%C3%A9cnica-origen-y-consecuencias/69782-25568">&ldquo;Deuda técnica, origen y consecuencias&rdquo; talk</a> (Technical debt: origin and consequences) (Spanish), that was delivered by <a href="https://twitter.com/@jgomezz">Javier Gómez</a> at the Software Craftsmanship 2014.</p>

<h2>Revisiting XP: be a thoughtful programmer by exercising more collective ownership</h2>

<p>I&rsquo;ve read <a href="http://www.infoq.com/articles/revisit-p-collective">this article</a> by <a href="https://twitter.com/tiagooo_romero">Tiago Garcia</a> on the collective code ownership, as stated by Xtreme Programming (XP), with some example and guidelines.</p>

<h2>Where&rsquo;s the Real Bottleneck in Scientific Computing?</h2>

<p>I&rsquo;ve read <a href="http://www.americanscientist.org/issues/pub/wheres-the-real-bottleneck-in-scientific-computing/99999">this article</a> by Greg Wilson on the tools and procedures investigators use to produce software.</p>

<h2>Testing inside the Sprint</h2>

<p>I&rsquo;ve read <a href="http://ronjeffries.com/articles/2015-03-01-testing-in-sprints/">this article</a> by Ron Jeffries.</p>

<p>Discusses the need for testing and why this hasn&rsquo;t been communicated enough, as there still are people who have not understood it.</p>

<p>Also about why people equal something failing when using scrum with scrum failing.</p>

<h2>DTO vs Domain Models</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/05/dto-vs-domain-models/">this article</a> by Carlos Blé</p>

<h2>Homoiconicity isn’t the point</h2>

<p>I&rsquo;ve read <a href="http://calculist.org/blog/2012/04/17/homoiconicity-isnt-the-point/">this article</a> by David Herman about homoiconicity, comparing Lisp dialects (have it) to others that don&rsquo;t. The main point is at the end, where it says:</p>

<blockquote><p>[&hellip;] homoiconicity isn’t the point, read is</p></blockquote>

<h2>So You Don&rsquo;t Want to be a Programmer After All</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/so-you-dont-want-to-be-a-programmer-after-all/">this article</a> by Jeff Atwood. Cites the golden handcuffs (also known as golden shackles), reasons to be and not to be a programmer, and how to be an average and outstanding programmer</p>

<h2>The Nature of Lisp</h2>

<p>I&rsquo;ve read <a href="http://www.defmacro.org/ramblings/lisp.html">this article / introduction</a> to Lisp by Slava Akhmechet</p>

<h2>[David Pollak&rsquo;s] My Thoughts on Go</h2>

<p>I&rsquo;ve read <a href="http://blog.goodstuff.im/golang">these comments</a> on Go Lang from David Pollak</p>

<h2>The Well-Rounded Technologist</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/04/02/the-well-rounded-technologist.html">this article</a> by Michael Bernstein</p>

<h2>Should I read papers?</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/10/21/should-i-read-papers.html">this article</a> by Michael Bernstein</p>

<h2>Lisp-1 vs Lisp-2</h2>

<p>I&rsquo;ve read <a href="https://hornbeck.wordpress.com/2009/07/05/lisp-1-vs-lisp-2/">this article</a> by <a href="https://twitter.com/hornbeck">@Hornbeck</a> about the lisp 1 and lisp 2.</p>

<h2>Science Corps</h2>

<p>I&rsquo;ve watched this <a href="https://www.youtube.com/watch?v=dkQkafxFoIQ">TEDx talk</a> by Aza Raskin, featuring Data Banks and Science corps</p>

<h2>Healthy Codebase and Preparatory Refactoring</h2>

<p> I&rsquo;ve read <a href="http://brewhouse.io/blog/2014/11/10/healthy-codebase-and-preparatory-refactoring.html">this article</a> by Philippe Creux about preparatory refactoring</p>

<h2>You Are Learning Haskell Right Now (Or Anything You Want Really)</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/12/11/you-are-learning-haskell-right-now.html">this article</a> by Michael Bernstein</p>

<h2>Lisp is Abstract Syntax</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/04/16/lisp-is-abstract-syntax.html">this article</a> by Michael Bernstein</p>

<h2>Two Things Types Have Taught Me</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/10/30/two-things-types-have-taught-me.html">this article</a> by Michael Bernstein</p>

<h2>Don&rsquo;t Bet Against Yourself</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html">this article</a> by Michael Bernstein</p>

<h2>Learning Math: A Blank Is A Blank With A Blank</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html">this article</a> by Michael Bernstein</p>

<h2>The False Economy Of Metaprogramming</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2015/03/06/the-false-economy-of-generated-methods.html">this article</a> by Michael Bernstein</p>

<h2>Management and Engineering, overlapping</h2>

<p>I&rsquo;ve read <a href="http://www.quora.com/Does-Adam-DAngelo-feel-comfortable-with-the-transition-from-an-engineer-to-a-management-position?srid=3OC&amp;share=1">this Quora answer</a> by Adam D'Angelo. The original title is: Does Adam D'Angelo feel comfortable with the transition from an engineer to a management position?</p>

<h2>Evolution of The Twitter Stack</h2>

<p>I&rsquo;ve read <a href="https://www.slideshare.net/slideshow/embed_code/key/ly83zQkBjCxnIX">these slides</a> about changing the technology stack in Twitter: from Rails to JVM-based</p>
]]></content>
  </entry>
  
</feed>
