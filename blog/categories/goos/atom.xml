<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Goos | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/goos/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-05-17T12:47:08+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Self-study in May 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/"/>
    <updated>2015-05-09T16:41:10+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015</id>
    <content type="html"><![CDATA[<p>Update: I&rsquo;ve grouped all small posts related to the self-study from May 2015
into a single post</p>

<h2>Programmer passion considered harmful</h2>

<p>I&rsquo;ve read <a href="https://medium.com/on-coding/programmer-passion-considered-harmful-5c5d4e3a9b28">this article</a> on why programmer passion could be negative. The title is similar to a paper by Dijkstra.</p>

<h2>Software Craftsmanship: Are Bootcamps Enough?</h2>

<p>I&rsquo;ve read <a href="https://www.coursereport.com/blog/software-craftsmanship-are-bootcamps-enough">this article</a> on software craftsmanship, development bootcamps and passion by <a href="https://twitter.com/kauerrolemodel">Ken Auer</a></p>

<h2>Improve your development environments with virtualization</h2>

<p>I have seen this video: <a href="https://www.youtube.com/watch?v=Dg_vPMnC7_k&amp;feature=youtu.be">Improve your development environments with virtualization</a> by Luke Sneeringer.</p>

<p>My notes:</p>

<ul>
<li>development should be exactly like production.</li>
<li>except where it is too painful. there it should be different</li>
</ul>


<h2>Buffer&rsquo;s take on values</h2>

<p>I have found these <a href="http://www.slideshare.net/Bufferapp/buffer-culture-04">values</a>, written by Buffer, very interesting.</p>

<h2>Public static void</h2>

<p>I&rsquo;ve watched this video: <a href="https://www.youtube.com/watch?v=5kj5ApnhPAE">&ldquo;Public, static void&rdquo;</a> by Rob Pike. The slides can be found <a href="http://www.oscon.com/oscon2010/public/schedule/detail/13423">here</a></p>

<h3>My notes</h3>

<ul>
<li>too much bureaucracy</li>
<li>fighting the compiler</li>
<li>dynamic vs static typing</li>
<li>language too verbose</li>
<li><p>do not mix the two of them</p></li>
<li><p>a language niche:</p>

<ul>
<li>comprehensible</li>
<li>statically typed</li>
<li>light on the page</li>
<li>fast to work in</li>
<li>scales well</li>
<li>doesn&rsquo;t require tools but supports them well</li>
<li>good at networking and multiprocessing</li>
</ul>


<p>(minute 10:09)​</p></li>
<li><p><a href="http://golang.org">Go</a> was born to fill this niche</p></li>
</ul>


<h2>Nothing is something</h2>

<p>This video has been extracted to a <a href="../../../../2015/05/04/video-nothing-is-something/">post</a> of its own.</p>

<h2>Software is eating the world</h2>

<p>This video has been extracted to a <a href="../../../../2015/05/10/talk-software-is-eating-the-world/">post</a> of its own.</p>

<h2>The Cost of Test Driven Development</h2>

<p>I&rsquo;ve read <a href="http://blog.typemock.com/2009/03/the-cost-of-test-driven-development.html">this article</a>, on the cost of doing TDD, which refers to <a href="http://www.msr-waypoint.net/en-us/groups/ese/nagappan_tdd.pdf">this paper</a>: Realizing quality improvement through test driven development: results and experiences of four industrial teams (below)</p>

<h2>Realizing quality improvement through test driven development: results and experiences of four industrial teams</h2>

<p>This paper has been extracted to a <a href="../../../../2015/05/12/paper-tdd-in-industrial-teams/">post</a> of its own.</p>

<h2>Learn You Some Lisp for Great Good</h2>

<p>I&rsquo;ve watched the video <a href="https://www.youtube.com/watch?v=3T00X_sNg4Q">Learn You Some Lisp for Great Good</a>, by Howard Abrams.</p>

<p>I guess this is a reference to the popular <a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good!</a>.</p>

<p>He suggests many interesting resources for learning Lisp dialects. The live coding is in Clojure:</p>

<ul>
<li><a href="http://landoflisp.com/">The land of Lisp</a></li>
<li><a href="https://mitpress.mit.edu/sicp/">Structure and Interpretation of Computer Programs</a>. See also <a href="https://twitter.com/SICPQuotes">SICPQuotes</a></li>
<li><a href="http://mitpress.mit.edu/books/little-schemer">The Little Schemer</a></li>
<li><a href="https://www.gnu.org/software/emacs/manual/pdf/eintr.pdf">An Introduction to Programming in Emacs Lisp</a></li>
<li><a href="https://www.4clojure.com/">4clojure Questions</a></li>
<li><a href="http://clojurekoans.com/">Clojure Koans</a></li>
</ul>


<p>On another topic, in the <a href="http://www.meetup.com/ClojureBCN/events/222418104/">Bank accounts exercise from Exercism</a> meetup, we discussed the book <a href="https://pragprog.com/book/shcloj2/programming-clojure">Programming Clojure (2nd edition)</a> by Stuart Halloway</p>

<h2>Professor Frisby&rsquo;s Mostly Adequate Guide to Functional Programming</h2>

<p>I&rsquo;ve read <a href="https://github.com/DrBoolean/mostly-adequate-guide">this guide</a> to functional programming. It is still work in progress (WIP) but still interesting. Written in javascript, so you can REPL in the browser.</p>

<h2>Learning Code Good</h2>

<p>I&rsquo;ve watched this video, by Saron Yitbarek: <a href="https://www.youtube.com/watch?v=-nsnAYRqYLA">Learn Code Good</a>.</p>

<h2>Why You Don&rsquo;t Get Mock Objects</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=R9FOchgTtLM">Why You Don&rsquo;t Get Mock Objects</a>, by Gregory Moeck.</p>

<p>In it, they point to the <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> book (<a href="/{{site.category_dir}}/goos">category here</a>), the paper <a href="www.jmock.org/oopsla2004.pdf">Mock Roles, not Objects</a> (also present in the GOOS book).</p>

<h2>Technical Debt: A Repayment Plan</h2>

<p>I&rsquo;ve read <a href="http://www.infoq.com/articles/tech-debt-repayment">this article</a> by <a href="https://twitter.com/@jeremyjarrell">Jeremy Jarrell</a> on technical debt how to repay it: schedule, taxes, default, etc</p>

<p>This has made me think of the <a href="http://scbcn.ideascale.com/a/dtd/Deuda-t%C3%A9cnica-origen-y-consecuencias/69782-25568">&ldquo;Deuda técnica, origen y consecuencias&rdquo; talk</a> (Technical debt: origin and consequences) (Spanish), that was delivered by <a href="https://twitter.com/@jgomezz">Javier Gómez</a> at the Software Craftsmanship 2014.</p>

<h2>Revisiting XP: be a thoughtful programmer by exercising more collective ownership</h2>

<p>I&rsquo;ve read <a href="http://www.infoq.com/articles/revisit-p-collective">this article</a> by <a href="https://twitter.com/tiagooo_romero">Tiago Garcia</a> on the collective code ownership, as stated by Xtreme Programming (XP), with some example and guidelines.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Versus How]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/06/what-versus-how/"/>
    <updated>2015-05-06T07:15:08+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/06/what-versus-how</id>
    <content type="html"><![CDATA[<p>After reading the GOOS<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, the more and more I get this feeling of what vs how:</p>

<ul>
<li>Information hiding</li>
<li>The total simpler than the sum of the parts</li>
<li>Extracting a concept so you can think about this. Makes you find better names:

<ul>
<li>test name</li>
<li>variable name</li>
<li>method name</li>
<li>interface / protocol name</li>
</ul>
</li>
</ul>


<p>I also got this feeling when reading Clean Code. But with this other book the smell is much harder, stronger. This same concept is repeated all over the book. In our discussions about the book, this concept appears again and again. I&rsquo;m thinking of adding a sub-title to the book:</p>

<pre><code>Growing Object-Oriented Software, Guided by Tests
What and not How
</code></pre>

<h2>Applying this in your team</h2>

<p>Now, there might be a problem if your team has a split opinion on &lsquo;what vs how&rsquo; (i.e., part of the team prefers what and another prefers how)</p>

<p>Reasons I&rsquo;ve heard to defend how:</p>

<ul>
<li>The ones cited above</li>
<li>Concision / shortness</li>
<li>Code reusability</li>
<li>Easier to test, extracting to collaborators<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
</ul>


<p>Reasons I&rsquo;ve heard to defend what:</p>

<ul>
<li>Knowing exactly what the code is doing: i.e., do not have to think what the name means and to what this corresponds</li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Altough I believe you shouldn&rsquo;t do anything <em>just</em> for the purpose of tests. If it also improves your design, OK, but only for the tests, no.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trimming Your Plants]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/31/trimming-your-plants/"/>
    <updated>2015-03-31T23:13:45+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/31/trimming-your-plants</id>
    <content type="html"><![CDATA[<p>This post belongs to the <a href="/{{site.category_dir}}/growing-software">growing-software series</a></p>

<p>Imagine this situation: the code works. You are at <a href="https://github.com/alvarogarcia7/refactoring_a-first-example/commit/1ff7df4d45ee1ac5bc483b90da7ed1b68f27aef9">this stage</a></p>

<p>Disregarding the tests, the production code is complete. Could be better, but it is ready if you are in a hurry.</p>

<p>Now, picture your test as a plant in a plant pot: it might be healthy on the outside (external quality) but how are their roots (internal quality)?</p>

<p>Do you imagine them in an ordered fashion or in a jungle of roots? Everything on the outside is connected to one or several roots? In case it is several, what / how much do they share?</p>

<h2>Trimming the roots</h2>

<p>Now, let&rsquo;s imagine you want to put the plant in a different plant pot. You don&rsquo;t want the plant to be altered in any way: keep producing fruits as it was before, as green and shiny, etc. Just alter the container for business reasons.</p>

<p>The more tidy and organized the roots are related to the outside plant itself, the easier it is to reshape (or refactor) it.</p>

<p>So this is exactly what refactoring is about: &ldquo;keeping the same external behaviour, modifying the internal structure&rdquo;. I like to explain as &ldquo;modify how it is done but not what it does&rdquo;.</p>

<p>When you trim the roots but leave unaltered the top, you are making it cheaper to modify the internal shape without affecting the rest. The plant will continue to grow, requiring more and more nutrients from the ground. Small increases that do not warrant a bigger plant pot, as the current one can withstand the new requirements.</p>

<p>This is where the analogy is no longer useful: when writing software, you&rsquo;re also making it easier to reuse, modify and maintain.</p>

<h3>Conclusion</h3>

<p>The more tidied up you have your plants, the cheaper to maintain and modify.</p>

<p>Software implementation details are like roots: they expand to find any small hole where to expand. Even to scaffold expected behaviour</p>

<p>Trim your plants early and often, always with the help of a test suite</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Growing Software According to the Season]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/29/growing-software-according-to-the-season/"/>
    <updated>2015-03-29T18:13:45+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/29/growing-software-according-to-the-season</id>
    <content type="html"><![CDATA[<p>This is the first post is of the <a href="/{{site.category_dir}}/growing-software">growing-software series</a></p>

<p>A few weeks ago, while reading the book <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> by <a href="https://twitter.com/@natpryce">Nat Pryce</a> and <a href="https://twitter.com/@sf105">Steve Freeman</a>, I finally understood why the software needs to be grown and not built:</p>

<blockquote class="twitter-tweet" lang="en"><p>.<a href="https://twitter.com/natpryce">@natpryce</a> <a href="https://twitter.com/sf105">@sf105</a> With the <a href="https://twitter.com/hashtag/goos?src=hash">#goos</a> book I finally grasped the importance of growing, not building software. Thanks for writing it</p>&mdash; Alvaro Garcia (@alvarobiz) <a href="https://twitter.com/alvarobiz/status/570835142136049664">February 26, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>A few days ago, I was thinking about new inspiration sources and this came to my mind:</p>

<blockquote class="twitter-tweet" lang="en"><p>If we want to grow software instead of building it, should we start looking at gardening and agriculture for new inspiration? <a href="https://twitter.com/hashtag/goos?src=hash">#goos</a></p>&mdash; Alvaro Garcia (@alvarobiz) <a href="https://twitter.com/alvarobiz/status/581005906667687938">March 26, 2015</a></blockquote>


<p>In agriculture, at least in this latitude, there are different seasons. Different plants have different temporal schedules: you need to plant, wait for it to bloom, produce fruits then collect. Maybe remove the plant and wait for the next time slot to appear.</p>

<p>When growing software, things are different (or we think so):</p>

<ul>
<li>Do we need to plant? Yes, seed the project with resources</li>
<li>Wait for it to bloom? Yes, from an outside actor perspective, there is no result for a while, even if it is one sprint</li>
<li>Wait to produce fruits? Yes, usually some sprints past the minimum viable product (MVP) until the minimum lovable product (MLP)</li>
<li>Do we need to collect it? Yes, usually the final tests (e.g., regression) and ship it to production to be used.</li>
</ul>


<p>After all, we might say that the process is not so different in both activities. Nothing to do related to tools or materials, etc.</p>

<p>As in agriculture, seasons vary in productivity for a certain activity or crop: during the cold months, not many plants are able to produce fruits. Meanwhile, during the hot months, harvest is much higher. (This only applies to outdoors gardening.)</p>

<p>When producing software, there might be seasons too:</p>

<ul>
<li>Seasons where productivity (harvest) varies

<ul>
<li>Lowers when a new team member joins (see the Mythical Man-Month), the pressure is too high, salaries are low, &hellip;</li>
<li>Increases when there are no information silos, the bus factor is high, the team is not affected by external distractions, &hellip;</li>
</ul>
</li>
<li>Seasons where different harvests can be planted, but a subset of them will be the most effective

<ul>
<li>A front-end developer can do back-end, but it won&rsquo;t be as productive. In this area, one can learn other disciplines and get as effective as other professionals.</li>
<li>There are many tasks to be done but the prioritized ones are more effective</li>
</ul>
</li>
<li>Some harvests are more intense on the fields than others. After that, there is a required rest so the next season is as productive as the previous one

<ul>
<li>Some projects produce burn-out so some slack time is more productive than getting to work again.</li>
</ul>
</li>
</ul>


<p>But there might be differences too:</p>

<ul>
<li>Geographical distribution: some crops cannot grow in certain conditions. I believe any geographic area (e.g., country) can produce any type of work (e.g., back-end, front-end, quality assurance, project management, etc)</li>
<li>Quality distribution: same as before, many crops do not grow in Iceland (due to the harsh environment) or do it with lower quality as nearer to the Equator.</li>
</ul>


<p><a href="https://twitter.com/@XaV1uzz">Xavi Gost</a> responded to my tweet:</p>

<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p><a href="https://twitter.com/alvarobiz">@alvarobiz</a> Conceptos como darle a las cosas su tiempo de crecer y madurar nos vendrian bien en la industria</p>&mdash; Xaviuzz (@XaV1uzz) <a href="https://twitter.com/XaV1uzz/status/581063149203394560">March 26, 2015</a></blockquote>


<p>[Roughly translated: Concepts like allowing some time for things to grow and ripe would benefit the industry]</p>

<p>Get the tools out of the tool-shed and start buying seeds for this spring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Listening to the Tests]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/06/listening-to-the-tests/"/>
    <updated>2015-01-06T22:05:55+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/06/listening-to-the-tests</id>
    <content type="html"><![CDATA[<p>Specifically the chapter no. 20 (&ldquo;Listening to the tests&rdquo;) from <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> available <a href="http://www.amazon.com/dp/0321503627/ref=as_sl_pd_tf_lc?tag=httpwwwm3pcou-20&amp;camp=213381&amp;creative=390973&amp;linkCode=as4&amp;creativeASIN=0321503627&amp;adid=12B4KPA3REF515ASAZN8&amp;&amp;ref-refURL=http%3A%2F%2Fwww.growing-object-oriented-software.com%2F">here</a> is so good to learn to hear to your tests.</p>

<p>To hear what they&rsquo;re trying to tell you, the authors (<a href="https://twitter.com/sf105">Steve Freeman</a> and <a href="https://twitter.com/natpryce">Nat Pryce</a>) explain this to you:</p>

<ul>
<li>I Need to Mock an Object I Can’t Replace</li>
<li>Logging Is a Feature</li>
<li>Mocking Concrete Classes</li>
<li>Don’t Mock Values</li>
<li>Bloated Constructor</li>
<li>Confused Object</li>
<li>Too Many Dependencies</li>
<li>Too Many Expectations</li>
</ul>


<p>To close, a quote:</p>

<blockquote><p>[&hellip;] We’ve found that the qualities that make an object easy to test also make our code responsive to change</p>

<p><a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a>, chapter 20, page 229</p></blockquote>
]]></content>
  </entry>
  
</feed>
