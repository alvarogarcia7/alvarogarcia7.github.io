<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Goos | The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/blog/categories/goos/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2016-04-08T15:02:22+00:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Defines a Dependency]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/07/13/what-defines-a-dependency/"/>
    <updated>2015-07-13T05:48:28+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/07/13/what-defines-a-dependency</id>
    <content type="html"><![CDATA[<p>A friend and I were arguing about this code (<a href="https://github.com/alvarogarcia7/cos/blob/7bf866bdfb9006d73a0124e00152e55c520d98a4/src/main/java/users/Registry.java">fragment</a>):</p>

<pre><code class="java">public void register (final String userName)  {
    try {
        registeredUsers.add(new User(userName));
    } catch (AlreadyRegisteredUserException e) {
        resultListener.alreadyRegistered(userName);
    }
}
</code></pre>

<p>I would have said that <code>resultListener</code> is a dependency as, first, it was injected by the constructor, second, it is necessary for the execution (negative case).</p>

<p>He suggested that:</p>

<ul>
<li>being injected through  the constructor is usually what happens with dependencies, but does not make it one (i.e., something can be injected by the constructor and not be a dependency)</li>
<li>what defines a dependency is related to the business: if this behavior is mandatory for the business, then it is a dependency.</li>
</ul>


<p>As a conclusion, <code>resultListener</code> would be a notification, as business does not require it.</p>

<p>On a later commit, we decided to inject it to <code>registeredUsers</code> (<a href="https://github.com/alvarogarcia7/cos/blob/c89bec1a2de388165676f095c2218afeb1321374/src/main/java/users/InMemoryRegisteredUsers.java">fragment</a>)</p>

<pre><code class="java">public void add (User user, final RegistryResultListener resultListener) {
    if(contains(user)) {
        resultListener.alreadyRegistered(user.name());
        return;
    }

    users.add(user);
    resultListener.successfullyRegistered(user.name());
}
</code></pre>

<p>Note: for cases when no one needs to be informed about the users being registered or not, a null-object pattern will suffice, as there is no check for null reference in the parameter <code>resultListener</code>.</p>

<p>Note: more information on object stereotypes can be found <a href="../../../../2015/07/13/object-peer-stereotypes/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Peer Stereotypes]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/07/13/object-peer-stereotypes/"/>
    <updated>2015-07-13T05:36:14+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/07/13/object-peer-stereotypes</id>
    <content type="html"><![CDATA[<blockquote><p>We categorize an object&rsquo;s peers (loosely) into three types of relationship. An object might have:</p>

<ul>
<li>Dependencies: Services that the object requires from its peers so it can perform its responsibilities. The object cannot function without these services. It should not be possible to create the object without them. For example, a graphics package will need something like a screen or canvas to draw on&ndash;it doesn&rsquo;t make sense without one.</li>
<li>Notifications: Peers that need to be kept up to date with the object&rsquo;s activity. The object will notify interested peers whenever it changes state or performs a significant action. Notifications are &ldquo;fire and forget&rdquo;; the object neither knows nor cares which peers are listening. Notifications are so useful because they decouple objects from each other. For example, in a user interface system, a button component promises to notify any registered listeners when it&rsquo;s clicked, but does not know what those listeners will do. Similarly, the listeners expect to be called but know nothing of the way the user interface dispatches its events.</li>
<li>Adjustments: Peers that adjust the object&rsquo;s behavior to the wider needs of the system. This includes policy objects that make decisions on the object&rsquo;s behalf (the Strategy pattern in [Gamma94]) and component parts of the object if it&rsquo;s a composite. For example, a Swing JTable will ask a TableCellRenderer to draw a cell&rsquo;s value, perhaps as RGB (Red, Green, Blue) values for a color. If we change the renderer, the table will change its presentation, now displaying the HSB (Hue, Saturation, Brightness) values.</li>
</ul>
</blockquote>

<p>Source is Growing Object-Oriented Software, Guided by Tests > Chapter 6, Object-Oriented Style > Object Peer Stereotypes, page 52</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-study in May 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/"/>
    <updated>2015-05-09T14:41:10+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015</id>
    <content type="html"><![CDATA[<p>Update: I&rsquo;ve grouped all small posts related to the self-study from May 2015
into a single post</p>

<h2>Programmer passion considered harmful</h2>

<p>I&rsquo;ve read <a href="https://medium.com/on-coding/programmer-passion-considered-harmful-5c5d4e3a9b28">this article</a> on why programmer passion could be negative. The title is similar to a paper by Dijkstra.</p>

<h2>Software Craftsmanship: Are Bootcamps Enough?</h2>

<p>I&rsquo;ve read <a href="https://www.coursereport.com/blog/software-craftsmanship-are-bootcamps-enough">this article</a> on software craftsmanship, development bootcamps and passion by <a href="https://twitter.com/kauerrolemodel">Ken Auer</a></p>

<h2>Improve your development environments with virtualization</h2>

<p>I have seen this video: <a href="https://www.youtube.com/watch?v=Dg_vPMnC7_k&amp;feature=youtu.be">Improve your development environments with virtualization</a> by Luke Sneeringer.</p>

<p>My notes:</p>

<ul>
<li>development should be exactly like production.</li>
<li>except where it is too painful. there it should be different</li>
</ul>


<h2>Buffer&rsquo;s take on values</h2>

<p>I have found these <a href="http://www.slideshare.net/Bufferapp/buffer-culture-04">values</a>, written by Buffer, very interesting.</p>

<h2>Public static void</h2>

<p>I&rsquo;ve watched this video: <a href="https://www.youtube.com/watch?v=5kj5ApnhPAE">&ldquo;Public, static void&rdquo;</a> by Rob Pike. The slides can be found <a href="http://www.oscon.com/oscon2010/public/schedule/detail/13423">here</a></p>

<h3>My notes</h3>

<ul>
<li>too much bureaucracy</li>
<li>fighting the compiler</li>
<li>dynamic vs static typing</li>
<li>language too verbose</li>
<li><p>do not mix the two of them</p></li>
<li><p>a language niche:</p>

<ul>
<li>comprehensible</li>
<li>statically typed</li>
<li>light on the page</li>
<li>fast to work in</li>
<li>scales well</li>
<li>doesn&rsquo;t require tools but supports them well</li>
<li>good at networking and multiprocessing</li>
</ul>


<p>(minute 10:09)â€‹</p></li>
<li><p><a href="http://golang.org">Go</a> was born to fill this niche</p></li>
</ul>


<h2>Nothing is something</h2>

<p>This video has been extracted to a <a href="../../../../2015/05/04/video-nothing-is-something/">post</a> of its own.</p>

<h2>Software is eating the world</h2>

<p>This video has been extracted to a <a href="../../../../2015/05/10/talk-software-is-eating-the-world/">post</a> of its own.</p>

<h2>The Cost of Test Driven Development</h2>

<p>I&rsquo;ve read <a href="http://blog.typemock.com/2009/03/the-cost-of-test-driven-development.html">this article</a>, on the cost of doing TDD, which refers to <a href="http://www.msr-waypoint.net/en-us/groups/ese/nagappan_tdd.pdf">this paper</a>: Realizing quality improvement through test driven development: results and experiences of four industrial teams (below)</p>

<h2>Realizing quality improvement through test driven development: results and experiences of four industrial teams</h2>

<p>This paper has been extracted to a <a href="../../../../2015/05/12/paper-tdd-in-industrial-teams/">post</a> of its own.</p>

<h2>Learn You Some Lisp for Great Good</h2>

<p>I&rsquo;ve watched the video <a href="https://www.youtube.com/watch?v=3T00X_sNg4Q">Learn You Some Lisp for Great Good</a>, by Howard Abrams.</p>

<p>I guess this is a reference to the popular <a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good!</a>.</p>

<p>He suggests many interesting resources for learning Lisp dialects. The live coding is in Clojure:</p>

<ul>
<li><a href="http://landoflisp.com/">The land of Lisp</a></li>
<li><a href="https://mitpress.mit.edu/sicp/">Structure and Interpretation of Computer Programs</a>. See also <a href="https://twitter.com/SICPQuotes">SICPQuotes</a></li>
<li><a href="http://mitpress.mit.edu/books/little-schemer">The Little Schemer</a></li>
<li><a href="https://www.gnu.org/software/emacs/manual/pdf/eintr.pdf">An Introduction to Programming in Emacs Lisp</a></li>
<li><a href="https://www.4clojure.com/">4clojure Questions</a></li>
<li><a href="http://clojurekoans.com/">Clojure Koans</a></li>
</ul>


<p>On another topic, in the <a href="http://www.meetup.com/ClojureBCN/events/222418104/">Bank accounts exercise from Exercism</a> meetup, we discussed the book <a href="https://pragprog.com/book/shcloj2/programming-clojure">Programming Clojure (2nd edition)</a> by Stuart Halloway</p>

<h2>Professor Frisby&rsquo;s Mostly Adequate Guide to Functional Programming</h2>

<p>I&rsquo;ve read <a href="https://github.com/DrBoolean/mostly-adequate-guide">this guide</a> to functional programming. It is still work in progress (WIP) but still interesting. Written in javascript, so you can REPL in the browser.</p>

<h2>Learning Code Good</h2>

<p>I&rsquo;ve watched this video, by Saron Yitbarek: <a href="https://www.youtube.com/watch?v=-nsnAYRqYLA">Learn Code Good</a>.</p>

<h2>Why You Don&rsquo;t Get Mock Objects</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=R9FOchgTtLM">Why You Don&rsquo;t Get Mock Objects</a>, by Gregory Moeck.</p>

<p>In it, they point to the <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> book (<a href="/blog/categories/goos">category here</a>), the paper <a href="www.jmock.org/oopsla2004.pdf">Mock Roles, not Objects</a> (also present in the GOOS book).</p>

<h2>Technical Debt: A Repayment Plan</h2>

<p>I&rsquo;ve read <a href="http://www.infoq.com/articles/tech-debt-repayment">this article</a> by <a href="https://twitter.com/@jeremyjarrell">Jeremy Jarrell</a> on technical debt how to repay it: schedule, taxes, default, etc</p>

<p>This has made me think of the <a href="http://scbcn.ideascale.com/a/dtd/Deuda-t%C3%A9cnica-origen-y-consecuencias/69782-25568">&ldquo;Deuda tÃ©cnica, origen y consecuencias&rdquo; talk</a> (Technical debt: origin and consequences) (Spanish), that was delivered by <a href="https://twitter.com/@jgomezz">Javier GÃ³mez</a> at the Software Craftsmanship 2014.</p>

<h2>Revisiting XP: be a thoughtful programmer by exercising more collective ownership</h2>

<p>I&rsquo;ve read <a href="http://www.infoq.com/articles/revisit-p-collective">this article</a> by <a href="https://twitter.com/tiagooo_romero">Tiago Garcia</a> on the collective code ownership, as stated by Xtreme Programming (XP), with some example and guidelines.</p>

<h2>Where&rsquo;s the Real Bottleneck in Scientific Computing?</h2>

<p>I&rsquo;ve read <a href="http://www.americanscientist.org/issues/pub/wheres-the-real-bottleneck-in-scientific-computing/99999">this article</a> by Greg Wilson on the tools and procedures investigators use to produce software.</p>

<h2>Testing inside the Sprint</h2>

<p>I&rsquo;ve read <a href="http://ronjeffries.com/articles/2015-03-01-testing-in-sprints/">this article</a> by Ron Jeffries.</p>

<p>Discusses the need for testing and why this hasn&rsquo;t been communicated enough, as there still are people who have not understood it.</p>

<p>Also about why people equal something failing when using scrum with scrum failing.</p>

<h2>DTO vs Domain Models</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/05/dto-vs-domain-models/">this article</a> by Carlos BlÃ©</p>

<h2>Homoiconicity isnâ€™t the point</h2>

<p>I&rsquo;ve read <a href="http://calculist.org/blog/2012/04/17/homoiconicity-isnt-the-point/">this article</a> by David Herman about homoiconicity, comparing Lisp dialects (have it) to others that don&rsquo;t. The main point is at the end, where it says:</p>

<blockquote><p>[&hellip;] homoiconicity isnâ€™t the point, read is</p></blockquote>

<h2>So You Don&rsquo;t Want to be a Programmer After All</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/so-you-dont-want-to-be-a-programmer-after-all/">this article</a> by Jeff Atwood. Cites the golden handcuffs (also known as golden shackles), reasons to be and not to be a programmer, and how to be an average and outstanding programmer</p>

<h2>The Nature of Lisp</h2>

<p>I&rsquo;ve read <a href="http://www.defmacro.org/ramblings/lisp.html">this article / introduction</a> to Lisp by Slava Akhmechet</p>

<h2>[David Pollak&rsquo;s] My Thoughts on Go</h2>

<p>I&rsquo;ve read <a href="http://blog.goodstuff.im/golang">these comments</a> on Go Lang from David Pollak</p>

<h2>The Well-Rounded Technologist</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/04/02/the-well-rounded-technologist.html">this article</a> by Michael Bernstein</p>

<h2>Should I read papers?</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/10/21/should-i-read-papers.html">this article</a> by Michael Bernstein</p>

<h2>Lisp-1 vs Lisp-2</h2>

<p>I&rsquo;ve read <a href="https://hornbeck.wordpress.com/2009/07/05/lisp-1-vs-lisp-2/">this article</a> by <a href="https://twitter.com/hornbeck">@Hornbeck</a> about the lisp 1 and lisp 2.</p>

<h2>Science Corps</h2>

<p>I&rsquo;ve watched this <a href="https://www.youtube.com/watch?v=dkQkafxFoIQ">TEDx talk</a> by Aza Raskin, featuring Data Banks and Science corps</p>

<h2>Healthy Codebase and Preparatory Refactoring</h2>

<p> I&rsquo;ve read <a href="http://brewhouse.io/blog/2014/11/10/healthy-codebase-and-preparatory-refactoring.html">this article</a> by Philippe Creux about preparatory refactoring</p>

<h2>You Are Learning Haskell Right Now (Or Anything You Want Really)</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/12/11/you-are-learning-haskell-right-now.html">this article</a> by Michael Bernstein</p>

<h2>Lisp is Abstract Syntax</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/04/16/lisp-is-abstract-syntax.html">this article</a> by Michael Bernstein</p>

<h2>Two Things Types Have Taught Me</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/10/30/two-things-types-have-taught-me.html">this article</a> by Michael Bernstein</p>

<h2>Don&rsquo;t Bet Against Yourself</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html">this article</a> by Michael Bernstein</p>

<h2>Learning Math: A Blank Is A Blank With A Blank</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html">this article</a> by Michael Bernstein</p>

<h2>The False Economy Of Metaprogramming</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2015/03/06/the-false-economy-of-generated-methods.html">this article</a> by Michael Bernstein</p>

<h2>Management and Engineering, overlapping</h2>

<p>I&rsquo;ve read <a href="http://www.quora.com/Does-Adam-DAngelo-feel-comfortable-with-the-transition-from-an-engineer-to-a-management-position?srid=3OC&amp;share=1">this Quora answer</a> by Adam D'Angelo. The original title is: Does Adam D'Angelo feel comfortable with the transition from an engineer to a management position?</p>

<h2>Evolution of The Twitter Stack</h2>

<p>I&rsquo;ve read <a href="https://www.slideshare.net/slideshow/embed_code/key/ly83zQkBjCxnIX">these slides</a> about changing the technology stack in Twitter: from Rails to JVM-based</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Versus How]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/06/what-versus-how/"/>
    <updated>2015-05-06T05:15:08+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/06/what-versus-how</id>
    <content type="html"><![CDATA[<p>After reading the GOOS<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, the more and more I get this feeling of what vs how:</p>

<ul>
<li>Information hiding</li>
<li>The total simpler than the sum of the parts</li>
<li>Extracting a concept so you can think about this. Makes you find better names:

<ul>
<li>test name</li>
<li>variable name</li>
<li>method name</li>
<li>interface / protocol name</li>
</ul>
</li>
</ul>


<p>I also got this feeling when reading Clean Code. But with this other book the smell is much harder, stronger. This same concept is repeated all over the book. In our discussions about the book, this concept appears again and again. I&rsquo;m thinking of adding a sub-title to the book:</p>

<pre><code>Growing Object-Oriented Software, Guided by Tests
What and not How
</code></pre>

<h2>Applying this in your team</h2>

<p>Now, there might be a problem if your team has a split opinion on &lsquo;what vs how&rsquo; (i.e., part of the team prefers what and another prefers how)</p>

<p>Reasons I&rsquo;ve heard to defend how:</p>

<ul>
<li>The ones cited above</li>
<li>Concision / shortness</li>
<li>Code reusability</li>
<li>Easier to test, extracting to collaborators<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
</ul>


<p>Reasons I&rsquo;ve heard to defend what:</p>

<ul>
<li>Knowing exactly what the code is doing: i.e., do not have to think what the name means and to what this corresponds</li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Altough I believe you shouldn&rsquo;t do anything <em>just</em> for the purpose of tests. If it also improves your design, OK, but only for the tests, no.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trimming Your Plants]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/31/trimming-your-plants/"/>
    <updated>2015-03-31T21:13:45+00:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/31/trimming-your-plants</id>
    <content type="html"><![CDATA[<p>This post belongs to the <a href="/blog/categories/growing-software">growing-software series</a></p>

<p>Imagine this situation: the code works. You are at <a href="https://github.com/alvarogarcia7/refactoring_a-first-example/commit/1ff7df4d45ee1ac5bc483b90da7ed1b68f27aef9">this stage</a></p>

<p>Disregarding the tests, the production code is complete. Could be better, but it is ready if you are in a hurry.</p>

<p>Now, picture your test as a plant in a plant pot: it might be healthy on the outside (external quality) but how are their roots (internal quality)?</p>

<p>Do you imagine them in an ordered fashion or in a jungle of roots? Everything on the outside is connected to one or several roots? In case it is several, what / how much do they share?</p>

<h2>Trimming the roots</h2>

<p>Now, let&rsquo;s imagine you want to put the plant in a different plant pot. You don&rsquo;t want the plant to be altered in any way: keep producing fruits as it was before, as green and shiny, etc. Just alter the container for business reasons.</p>

<p>The more tidy and organized the roots are related to the outside plant itself, the easier it is to reshape (or refactor) it.</p>

<p>So this is exactly what refactoring is about: &ldquo;keeping the same external behaviour, modifying the internal structure&rdquo;. I like to explain as &ldquo;modify how it is done but not what it does&rdquo;.</p>

<p>When you trim the roots but leave unaltered the top, you are making it cheaper to modify the internal shape without affecting the rest. The plant will continue to grow, requiring more and more nutrients from the ground. Small increases that do not warrant a bigger plant pot, as the current one can withstand the new requirements.</p>

<p>This is where the analogy is no longer useful: when writing software, you&rsquo;re also making it easier to reuse, modify and maintain.</p>

<h3>Conclusion</h3>

<p>The more tidied up you have your plants, the cheaper to maintain and modify.</p>

<p>Software implementation details are like roots: they expand to find any small hole where to expand. Even to scaffold expected behaviour</p>

<p>Trim your plants early and often, always with the help of a test suite</p>
]]></content>
  </entry>
  
</feed>
