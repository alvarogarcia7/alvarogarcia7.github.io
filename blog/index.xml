<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/blog/</link>
    <description>Recent content in Blogs on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Apr 2021 09:50:52 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Live test from the MMA</title>
      <link>https://alvarogarcia7.github.io/blog/2021/04/10/live-article-mma-2021/</link>
      <pubDate>Sat, 10 Apr 2021 09:50:52 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2021/04/10/live-article-mma-2021/</guid>
      <description>This is an article written, live, from the MMA in 2021.</description>
    </item>
    
    <item>
      <title>Self-Study in January 2021</title>
      <link>https://alvarogarcia7.github.io/blog/2021/01/01/self-study-january-2021/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0400</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2021/01/01/self-study-january-2021/</guid>
      <description>Perfect Media Server Hacker News discussion on a media server, half open source (?).
Tags: hacker-news, media-server, perfect, tool, software
Id: c37b0f2a-4dc5-11eb-8048-0242ac110002 Read: Sun, 03 Jan 2021 13:15:34 +0000
How your startup can survive technical debt Mentions the paradox of success: you need debt to start quickly, yet too quickly leaves no time to pay debt. Hence your prototype turns into an MVP, and that is your first piecce of technical debt.</description>
    </item>
    
    <item>
      <title>Books read in 2020Q4</title>
      <link>https://alvarogarcia7.github.io/blog/2020/12/30/books-read-2020q4/</link>
      <pubDate>Wed, 30 Dec 2020 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2020/12/30/books-read-2020q4/</guid>
      <description>Read this quarter:
 12 rules for life; Peterson; own-it, non-technical, philosophy  12 rules for life The book contains some rules, some principles to remove doubt and uncertainty from life.
There are plenty of mentions to the Bible, although I consider the book to the secular in its contents.
There are few personal stories on the book (e.g., about his daughter Mikhaila Peterson), which makes it readable and enjoyable. The philosophy behind it is sometimes not-politically-correct.</description>
    </item>
    
    <item>
      <title>Books read in 2020Q3</title>
      <link>https://alvarogarcia7.github.io/blog/2020/09/30/books-read-2020q3/</link>
      <pubDate>Wed, 30 Sep 2020 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2020/09/30/books-read-2020q3/</guid>
      <description>Read this quarter:
 Bushido, the soul of Japan; Nitobe; own-it, non-technical, philosophy  </description>
    </item>
    
    <item>
      <title>Books read in 2020Q2</title>
      <link>https://alvarogarcia7.github.io/blog/2020/06/30/books-read-2020q2/</link>
      <pubDate>Tue, 30 Jun 2020 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2020/06/30/books-read-2020q2/</guid>
      <description>Read this quarter:
 Skunk Works; Rich; own-it, non-technical  Skunk Works This book describes Ben R. Rich&amp;rsquo;s adventure of creating the F-117A, the stealth plane with a triangular shape.
Describes how he won a bet against legendary plane designer Clarence &amp;lsquo;Kelly&amp;rsquo; Johnson. How he got the 25 cents from his old mentor and friend.
Later, the book reviews Kelly&amp;rsquo;s history as the manager of Skunk Works, how it works, the principles (Kelly&amp;rsquo;s 14 rules), etc.</description>
    </item>
    
    <item>
      <title>Live test from the MMA</title>
      <link>https://alvarogarcia7.github.io/blog/2020/04/04/live-article-mma-2020/</link>
      <pubDate>Sat, 04 Apr 2020 10:27:52 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2020/04/04/live-article-mma-2020/</guid>
      <description>This is an article written, live, from the MMA in 2020.</description>
    </item>
    
    <item>
      <title>Books read in 2020Q1</title>
      <link>https://alvarogarcia7.github.io/blog/2020/03/31/books-read-2020q1/</link>
      <pubDate>Tue, 31 Mar 2020 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2020/03/31/books-read-2020q1/</guid>
      <description>Read this quarter:
 Tao of Séneca (vol 3); edited by Ferriss; own-it, non-technical, philoshopy Confidence Hacks: 99 small actions to massively boost your confidence; Davenport; own-it, non-technical Tots estimem l&amp;rsquo;Emma; Burgas; non-technical  Confidence Hacks This is a self help book to boost your confidence.
It covers several areas of your life, that could erode your confidence:
 Relationships Social Life Career Appearance Self-Improvement Body Language Thinking Fun and Adventure Finances  How to read and apply it:</description>
    </item>
    
    <item>
      <title>Self-Study in February 2020</title>
      <link>https://alvarogarcia7.github.io/blog/2020/02/01/self-study-february-2020/</link>
      <pubDate>Sat, 01 Feb 2020 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2020/02/01/self-study-february-2020/</guid>
      <description>localdots — HTTPS domains for localhost localdots combines Caddy and smallstep/certificates with automated configuration and hot reload.
Generates SSL/TLS certificates automatically Reloads Caddy automatically with every change
Tags: https, tls, ssl, caddy, certificate, ssl-certificate, development, dev, environment, local, localhost
Id: 851bde02-2e14-11ea-9ec6-0242ac11000d Read: Fri, 03 Jan 2020 10:33:45 +0000
Write Your Own Compiler Link to create a new compiler, for the T3X language.
 less than 150 pages of comprehensible code and straight-forward prose</description>
    </item>
    
    <item>
      <title>Books read in 2019Q4</title>
      <link>https://alvarogarcia7.github.io/blog/2019/12/30/books-read-2019q4/</link>
      <pubDate>Mon, 30 Dec 2019 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/12/30/books-read-2019q4/</guid>
      <description>Read this quarter:
 Tao of Séneca (vol 2); edited by Ferriss; own-it, non-technical, philoshopy  </description>
    </item>
    
    <item>
      <title>Books read in 2019Q3</title>
      <link>https://alvarogarcia7.github.io/blog/2019/09/30/books-read-2019q3/</link>
      <pubDate>Mon, 30 Sep 2019 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/09/30/books-read-2019q3/</guid>
      <description>Read this quarter:
 Tao of Séneca (vol 1); edited by Ferriss; own-it, non-technical, philoshopy My Story, Al Maktoum; non-technical  My Story, Al Maktoum  This important collection of anecdotes and reminiscences from Sheikh Mohammed bin Rashid Al Maktoum is published to mark the occasion of his fifty years in public service, which began with his appointment as Dubai’s Minister of Defence in 1968.
These stories tell of the vision behind Dubai’s meteoric growth from a small and bustling trading port to an international metropolis at the heart of global business.</description>
    </item>
    
    <item>
      <title>Self-Study in September 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/09/01/self-study-september-2019/</link>
      <pubDate>Sun, 01 Sep 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/09/01/self-study-september-2019/</guid>
      <description>Profiling Memory Allocations In iOS With Instruments Describes a technique for profiling memory allocations
Tags: memory-management, memory-allocation, tool, technique, ios, matt-eaton
Id: 237dd71a-dc50-11e9-b201-0242ac110003 Read: Sat, 21 Sep 2019 09:13:56 +0000
Programming as translation  Converting the real world into digital abstractions requires distillation. And, like literary translators, developers must understand their biases.
 Tags: alvaro-videla, old_sound, analogy, metaphor, quote, umberto-eco
Id: a2c0f458-dc50-11e9-95d7-0242ac110003 Read: Sat, 21 Sep 2019 09:17:29 +0000</description>
    </item>
    
    <item>
      <title>Self-Study in August 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/08/01/self-study-august-2019/</link>
      <pubDate>Thu, 01 Aug 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/08/01/self-study-august-2019/</guid>
      <description>List the local NPM link packages npm ls -g &amp;ndash;depth=0 &amp;ndash;link=true
Tags: npm, npm-link, node, link, global-dependency
Id: c01a0efa-b832-11e9-87be-0242ac110003 Read: Tue, 06 Aug 2019 10:12:52 +0000
Mutation testing tool for java / jvm This is a mutation testing tool for the JVM / java
Tags: pitest, pit, mutation-testing, testing, test, tool, jvm, java, mutation
Id: 02d29d3e-b833-11e9-b785-0242ac110003 Read: Tue, 06 Aug 2019 10:14:44 +0000
Ugly trivia kata, using mutation testing This is a kata I&amp;rsquo;ve practiced, then shown at the Software Crafters meetup (at Softonic).</description>
    </item>
    
    <item>
      <title>Self-Study in July 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/07/01/self-study-july-2019/</link>
      <pubDate>Mon, 01 Jul 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/07/01/self-study-july-2019/</guid>
      <description>How I use reveal.js This author explains how they use reveal.js.
The online editor (slides.com).
The author uses plain html for storing the slides.
Tags: slide, slideshare, reveal-js, reveal, presentation, slide-deck, michael-mccune
Id: 41e287b4-ae15-11e9-9e8a-0242ac110003 Read: Wed, 24 Jul 2019 07:16:33 +0000
All your digital life on a single timeline, stored locally Keep your digital life under your control
Tags: backup, local-data, encryption, control
Id: 4d115f64-ae17-11e9-bf0e-0242ac110003 Read: Wed, 24 Jul 2019 13:31:11 +0000</description>
    </item>
    
    <item>
      <title>Books read in 2019Q2</title>
      <link>https://alvarogarcia7.github.io/blog/2019/06/30/books-read-2019q2/</link>
      <pubDate>Sun, 30 Jun 2019 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/06/30/books-read-2019q2/</guid>
      <description>Read this quarter:
 4 pillars of investment, the; Bernstein; own-it, finance, non-technical Candide; Voltaire; own-it, non-technical, philosophy Simple path to wealth, the; Collins; own-it, non-technical, finance Lagom; Brantmark; own-it, non-technical, philosophy Comment revivre par le jeune; Lützner; own-it, non-technical Educación financiera avanzada desde cero; Hernández; own-it, non-technical, finance Pensiones públicas, la esclavitud de nuestra época; Hernández; non-technical, own-it, finance On the shortness of life; Séneca; own-it, non-technical, philosophy Código del dinero, el; Samsó; own-it, non-technical, finance Más cosas sobre la bolsa; Hernández; own-it, non-technical, finance  4 pillars of investment, the; Bernstein Candide; Voltaire Came across this book as the source for the term &amp;lsquo;Panglossian&amp;rsquo; or extreme optimist.</description>
    </item>
    
    <item>
      <title>Self-Study in June 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/06/01/self-study-june-2019/</link>
      <pubDate>Sat, 01 Jun 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/06/01/self-study-june-2019/</guid>
      <description>(h0p3&amp;rsquo;s Wiki) This is a highly customized tiddlyWiki, from h0p3.
Tags: wiki, personal-knowledge-base, h0p3
Id: b8b3d973-9611-4180-854a-0242ac110003 Read: Fri, 7 Jun 2019 13:20:26 +0000
Debug bash scripts This article explains how to debug bash scripts using the DEBUG trap.
Declares several log levels for the commands
Tags: debug, bash, trap, help, script
Id: 39f76af4-99ce-48b6-adc1-0242ac110003 Read: Fri, 7 Jun 2019 13:20:26 +0000
Understanding Rust Lifetimes Describes rust lifetimes, lifetime parameters.
Compares them to C++ pointers (in the sense they are difficult to learn, but make things explicit).</description>
    </item>
    
    <item>
      <title>In Defense of Tooling</title>
      <link>https://alvarogarcia7.github.io/blog/2019/05/30/defense-tooling/</link>
      <pubDate>Thu, 30 May 2019 00:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/05/30/defense-tooling/</guid>
      <description>A quote (on a curriculum vitae) that I&amp;rsquo;ve enjoyed:
 I am a firm believer in the value of tools, and often spend significant time at the beginning of a project developing tools specific to the needs of the project. This always pays off in the long run. I use tools to:
 Perform tasks not otherwise achievable Automate tedious/repetative processes Simplify steps in the build/debug cycle Eliminate &amp;ldquo;human error&amp;rdquo; in scanning, translation etc.</description>
    </item>
    
    <item>
      <title>Self-Study in May 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/05/01/self-study-may-2019/</link>
      <pubDate>Wed, 01 May 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/05/01/self-study-may-2019/</guid>
      <description>The Problem of Thinking Too Much An example of what happens when you think too much. The paralysis that comes from it
Tags: persi-diaconis, stanford, stated-meeting-report, barry-mazur, spin-a-penny, decision-making, decision
Id: e14aba08-7add-11e9-9e23-0242ac110003 Read: Mon, 20 May 2019 09:01:39 +0000
Personal web archives; a report Creating a personal web archive, based on the tools they created.
a browser extension for storing web pages, a web archive server hosting such snapshots, a(nother) browser extension to query such archives.</description>
    </item>
    
    <item>
      <title>Self-Study in April 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/04/01/self-study-april-2019/</link>
      <pubDate>Mon, 01 Apr 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/04/01/self-study-april-2019/</guid>
      <description>How to validate password with regular expression Explains the &amp;lsquo;?=&amp;rsquo; character in a regex, to validate conditions. Make it &amp;lsquo;.*&amp;rsquo; to &amp;lsquo;contain&amp;rsquo;, rather than &amp;lsquo;startWith&amp;rsquo;
Tags: password, validation, look-ahead, regex, regular-expression
Id: 2ed5999a-555f-11e9-8bf8-0242ac110005 Read: Tue, 02 Apr 2019 15:51:30 +0000
Unlock honest feedback from your employees with this one word I&amp;rsquo;ve read this article about asking for advice instead of asking for feedback and how that helped.
Tags: comparison, advice, feedback</description>
    </item>
    
    <item>
      <title>Books read in 2019Q1</title>
      <link>https://alvarogarcia7.github.io/blog/2019/03/31/books-read-2019q1/</link>
      <pubDate>Sun, 31 Mar 2019 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/03/31/books-read-2019q1/</guid>
      <description>This quarter I&amp;rsquo;ve focused my efforts on a mix of everything:
 business books: Traction, The Goal philosophy: Stoicism and personal philosophy some finance: classic: Malkiel, personal finance: Robin some classic psychology: Frankl a classic novel: The Metamorphosis (Kafka)  Read this quarter:
 Hombre en busca del sentido, el; Frankl; own-it, non-technical Metamorfosis; Kafka; own-it, non-technical Your money or your life; Dominguez, Robin; non-technical, finance, own-it Traction; Wickman; own-it, non-technical How to Be a Stoic: Using Ancient Philosophy to Live a Modern Life; Pigliucci; own-it, non-technical Guide to the Good Life, The Ancient Art of Stoic Joy, a; Irvine; non-technical, own-it Goal, the; Goldratt (+); own-it Random walk down wall street a; Malkiel [Parts I, II, III]; own-it  Note: re+read means I&amp;rsquo;m re-reading this book.</description>
    </item>
    
    <item>
      <title>Self-Study in March 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/03/01/self-study-march-2019/</link>
      <pubDate>Fri, 01 Mar 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/03/01/self-study-march-2019/</guid>
      <description>NodeJS logging made right Explains logging and tracing in nodejs.
Usage of thread-local storage, trace id, continuation local storage.
Tags: nodejs, logging, tracing, thread-local, thread-local-storage, trace-id, continuation-local-storage, cls, tls, proxy, hook
Id: 5bed4596-3f5b-11e9-83e1-0242ac110005 Read: Tue, 05 Mar 2019 15:28:42 +0000
Web Design 3.0: When Your Web Design Really Matters In Chapter 1, we will find out how Web Design is changing. Also, you will learn about the birth of the new generation of web designers, who are designing web pages in Web Design 3.</description>
    </item>
    
    <item>
      <title>Refactoring: split loop &#43; loop/map equivalence</title>
      <link>https://alvarogarcia7.github.io/blog/2019/02/06/refactoring-split-loop-map-equivalence/</link>
      <pubDate>Wed, 06 Feb 2019 20:44:59 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/02/06/refactoring-split-loop-map-equivalence/</guid>
      <description>We can combine the &amp;ldquo;Split loop&amp;rdquo; refactoring technique plus the &amp;ldquo;Loop / Map equivalence&amp;rdquo; when refactoring.
Given that it does not matter in which order we apply these operations, we can say that they have the associative property
Chart of the operations Take the case of a loop doing two things. From there:
 we can replace the loop for a map (including the two actions into a single map body) we can split the loop into two loops  Take the case of two loops, doing one thing each.</description>
    </item>
    
    <item>
      <title>Self-Study in February 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/02/01/self-study-february-2019/</link>
      <pubDate>Fri, 01 Feb 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/02/01/self-study-february-2019/</guid>
      <description>Amazon DynamoDB Transactions: How it Works Explains how transactions work in DynamoDB
Tags: dynamodb, aws, help, transaction, serializable
Id: 7fb09cd4-2639-11e9-9377-0242ac110002 Read: Fri, 01 Feb 2019 15:53:20 +0000
Jepsen: Aerospike I&amp;rsquo;ve read this analysis of Aerospike, that explains what kind of database it is, what CAP properties satisfies
Tags: cap, cap-theorem, jepsen, aphyr, aerospike, database, acid, ap, cp, consistency, availability, partitioning, paxos
Id: bd7151c6-2639-11e9-a38e-0242ac110002 Read: Fri, 01 Feb 2019 15:55:04 +0000</description>
    </item>
    
    <item>
      <title>Self-Study in January 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/01/01/self-study-january-2019/</link>
      <pubDate>Tue, 01 Jan 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/01/01/self-study-january-2019/</guid>
      <description>Work cycles I&amp;rsquo;ve read this Work Cycle framework to be more productive with your daily routine.
Suggests an alternative to Pomodoro technique, in which you are to write down the contents of the goal, then split in small chunks (periods) of time to complete the individual tasks, then debrief at the end of the period and at the end of the cycle.
An analogy could be a double-loop Pomodoro technique for tasks.</description>
    </item>
    
    <item>
      <title>Books read in 2018Q4</title>
      <link>https://alvarogarcia7.github.io/blog/2018/12/31/books-read-2018q4/</link>
      <pubDate>Mon, 31 Dec 2018 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/12/31/books-read-2018q4/</guid>
      <description>Read this quarter:
Note: re+read means I&amp;rsquo;m re-reading this book. The (+) stands for one-or-more times, as in the regexes.
 Como ganar amigos e influir sobre las personas; Carnegie (+) Oliver Twist; Dickens Building evolutionary architecture; Ford, Parsons Selfie: How We Became So Self-Obsessed and What It’s Doing To Us; Storr. Just chapter 1: The dying self Sota la cistella; Gasol  Como ganar amigos e influir sobre las personas; Carnegie (+) I&amp;rsquo;ve re-read this classic book (How to win friends and influence people), by Carnegie.</description>
    </item>
    
    <item>
      <title>Self-Study in December 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/12/01/self-study-december-2018/</link>
      <pubDate>Sat, 01 Dec 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/12/01/self-study-december-2018/</guid>
      <description>One year nomad - a review Tags: nomad, felix-krause, digital-nomad, remote, life
Id: 7784a1da-fc82-11e8-a2cc-0242ac110002 Read: Mon, 10 Dec 2018 13:49:51 +0000
The Reason Many Ultrarich People Aren’t Satisfied With Their Wealth How the rich are motivated to earn more money
 really rich people are often motivated to acquire more money by the thrill that comes with multiplying one’s fortune by making investments, buying up businesses
  Those two ways of putting money to use—as a way of covering expenses or as a way of building a bigger fortune—</description>
    </item>
    
    <item>
      <title>Books read in 2018Q3</title>
      <link>https://alvarogarcia7.github.io/blog/2018/09/30/books-read-2018q3/</link>
      <pubDate>Sun, 30 Sep 2018 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/09/30/books-read-2018q3/</guid>
      <description>Read this quarter:
Note: re+read means I&amp;rsquo;m re-reading this book. The (+) stands for one-or-more times, as in the regexes.
 Ética a Nicómaco; Aristóteles Book of Transformation; Dalai Lama  Ética a Nicómaco; Aristóteles I&amp;rsquo;ve read this book on philosophy and ethics. This book contains an analysis of the relationship between the personality, intelligence and happiness.
Tries to describe what &amp;lsquo;virtues&amp;rsquo; are, that they belong in a continuum of acts, aand the good term is always in the middle.</description>
    </item>
    
    <item>
      <title>Self-Study in July 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/07/01/self-study-july-2018/</link>
      <pubDate>Sun, 01 Jul 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/07/01/self-study-july-2018/</guid>
      <description>The Haskell Pyramid I&amp;rsquo;ve read this article on how the productivity for Haskell is achieved: not using the topics discussed on social networks (monads, functors, laws, lenses, etc) but using more basic tools
Tags: haskell, productivity, lucas-di-cioccio, learning, development, tool, monad, hype, pyramid, productive-haskell-bar, bar
Id: 454f53fc-7dd6-11e8-8208-0242ac110003 Read: Mon, 02 Jul 2018 08:59:47 +0000
El verde más verde I&amp;rsquo;ve read this article on how to structure creative projects (e.g., UX, programming) by professionals, as told by David Bonilla.</description>
    </item>
    
    <item>
      <title>Books read in 2018Q2</title>
      <link>https://alvarogarcia7.github.io/blog/2018/06/30/books-read-2018q2/</link>
      <pubDate>Sat, 30 Jun 2018 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/06/30/books-read-2018q2/</guid>
      <description>Read this quarter:
Note: re+read means I&amp;rsquo;m re-reading this book. The (+) stands for one-or-more times, as in the regexes.
 Quien se ha llevado mi queso; Johnson; own-it, guillem One minute manager, the; Blanchard; own-it, non-technical, guillem En defensa de los ociosos; Stevenson; non-technical, own-it Ladybird Book of Mindfulness, the (Ladybirds for Grown-Ups); Hazeley, Morris; non-technical Art of the start, the; Kawasaki; own-it, non-technical, guillem Getting started with NoFap; non-technical Emotional intelligence; Goleman; non-technical  Quien se ha llevado mi queso I&amp;rsquo;ve read this fable explaining the little story of two mice and two lilliputians that end up without any cheese.</description>
    </item>
    
    <item>
      <title>Testing a component that includes randomness</title>
      <link>https://alvarogarcia7.github.io/blog/2018/06/15/testing-component-randomness/</link>
      <pubDate>Fri, 15 Jun 2018 09:03:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/06/15/testing-component-randomness/</guid>
      <description>Context We have been tasked with designing a component to generate secrets for two-factor authentication (2FA), to ensure that the you also own that other &amp;lsquo;channel&amp;rsquo;.
It has to be secure enough to pass to verify a user, meaning no other user should be able to impersonating another one by guessing the secret.
Solution A first solution that he have implemented is to provide a 6-digit pin code.
The solution (in java) is straightforward: get a Random to generate ints for you.</description>
    </item>
    
    <item>
      <title>Self-Study in June 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/06/01/self-study-june-2018/</link>
      <pubDate>Fri, 01 Jun 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/06/01/self-study-june-2018/</guid>
      <description>Don&amp;rsquo;t look, don&amp;rsquo;t tell I&amp;rsquo;ve read this bonilista by David Bonilla on what strategies companies use to deal with security and defects.
Explains full disclosure, responsible disclosure and bug bounties.
Tags: david-bonilla, bonilista, security, full-disclosure, responsible-disclosure, bug-bounty, reporting, hacker, cracker
Id: a1a6925a-7958-11e8-a87f-0242ac110002 Read: Tue, 26 Jun 2018 15:50:21 +0000
La vida de las ideas I&amp;rsquo;ve read this bonilista by David Bonilla about the value of the ideas and what differentiates a good idea from a good execution from a good outcome</description>
    </item>
    
    <item>
      <title>Self-Study in May 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/05/01/self-study-may-2018/</link>
      <pubDate>Tue, 01 May 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/05/01/self-study-may-2018/</guid>
      <description>Research Shows a Simple Way to Increase Your Engagement at Work
I&amp;rsquo;ve read this article By Michael Parke, Justin Weinhardt:
 We found that increasing your engagement and productivity at work could be as simple as making a plan for the day
 They talk about two types of planning: time management and contingent planning. The latter is about considering possible disruptions or interruptions they may face and a plan to tackle them (if they happen).</description>
    </item>
    
    <item>
      <title>Self-Study in April 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/04/01/self-study-april-2018/</link>
      <pubDate>Sun, 01 Apr 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/04/01/self-study-april-2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Books read in 2018Q1</title>
      <link>https://alvarogarcia7.github.io/blog/2018/03/31/books-read-2018q1/</link>
      <pubDate>Sat, 31 Mar 2018 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/03/31/books-read-2018q1/</guid>
      <description>Read this quarter:
Note: re+read means I&amp;rsquo;m re-reading this book. The (+) stands for one-or-more times, as in the regexes.
Note: the tag &amp;ldquo;guillem&amp;rdquo; is for books suggested by Guillem Fernandez
 Odessa; Forsyth; non-technical, own-it Bogle on mutual funds: new perspectives for the intelligent investor; Bogle; own-it, non-technical, finance Perros de la guerra, los; Forsyth; own-it, non-technical avaro y el oro, el; Esopo; non-technical Aulularia; Plauto; own-it, non-technical Tus zonas erróneas; Dyer; non-technical, own-it Alternativa del Diablo, la; Forsyth; own-it, non-technical Guía, el; Forsyth; own-it, non-technical Pied piper; Forsyth; own-it, non-technical Hunt for the Red October, the; Clancy; own-it, non-technical Peopleware; DeMarco, Lister (+); own-it Time to kill, a; Grisham; own-it, non-technical Ética promiscua; Easton, Hardy; own-it, non-technical Checklist manifesto, the; Gawande; own-it, non-technical, guillem.</description>
    </item>
    
    <item>
      <title>Self-Study in March 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/03/01/self-study-march-2018/</link>
      <pubDate>Thu, 01 Mar 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/03/01/self-study-march-2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Self-Study in February 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/02/01/self-study-february-2018/</link>
      <pubDate>Thu, 01 Feb 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/02/01/self-study-february-2018/</guid>
      <description>Contract test I&amp;rsquo;ve read this bliki article by Martin Fowler on how to test the integration with external service providers. On how it should be integrated into the building pipeline, but maybe not fail exactly as the rest.
Tags: bliki, martin-fowler, contract-test, microservices, pact, integration-test, pipeline, continuous-integration</description>
    </item>
    
    <item>
      <title>Self-Study in January 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/01/01/self-study-january-2018/</link>
      <pubDate>Mon, 01 Jan 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/01/01/self-study-january-2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Books read in 2017Q4</title>
      <link>https://alvarogarcia7.github.io/blog/2017/12/31/books-read-2017q4/</link>
      <pubDate>Sun, 31 Dec 2017 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/12/31/books-read-2017q4/</guid>
      <description>Read this quarter:
Note: re+read means I&amp;rsquo;m re-reading this book. The (+) stands for one-or-more times, as in the regexes.
 Lazarillo de Tormes, el; anónimo; non-technical Tom Clancy&amp;rsquo;s power plays - Politika; Preisler; own-it, non-technical Moon is a harsh mistress, the; Heinlein; own-it, non-technical Old man&amp;rsquo;s war; Scalzi; non-technical, own-it Nightfall; Asimov, Silverberg; own-it, non-technical Interface; Stephenson, George; non-technical, own-it Man who sold the moon, the; Heinlein; own-it, non-technical Agents of innocence; Ignatius; own-it, non-technical Fist of god, the; Forsyth; own-it, non-technical: Synopsis: in a mixture of truth and novel, the author explains the invasion of Kuwait by Iraqi dictator Sadam Hussein.</description>
    </item>
    
    <item>
      <title>Self-Study in December 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/12/01/self-study-december-2017/</link>
      <pubDate>Fri, 01 Dec 2017 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/12/01/self-study-december-2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Self-Study in November 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/11/01/self-study-november-2017/</link>
      <pubDate>Wed, 01 Nov 2017 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/11/01/self-study-november-2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Self-Study in October 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/10/01/self-study-october-2017/</link>
      <pubDate>Sun, 01 Oct 2017 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/10/01/self-study-october-2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Books read in 2017Q3</title>
      <link>https://alvarogarcia7.github.io/blog/2017/09/30/books-read-2017q3/</link>
      <pubDate>Sat, 30 Sep 2017 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/09/30/books-read-2017q3/</guid>
      <description>Read this quarter:
 the senior software developer; Copeland, with the aprendices reading club Scandal in Bohemia, a; Doyle: a short novel by Sir Arthur Conan Doyle, mentioning Irene Adler and the king of Bohemia Getting things done, &amp;hellip;; Allen (+): A book on productivity, where Allen explains his method of GTD and how to apply it. Explains what has worked and not worked for him in his many years of consulting and coaching clients.</description>
    </item>
    
    <item>
      <title>Self-Study in September 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/09/01/self-study-september-2017/</link>
      <pubDate>Fri, 01 Sep 2017 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/09/01/self-study-september-2017/</guid>
      <description>How the Clipboard Works, Part 1 I&amp;rsquo;ve read this article, by Matt Burrough, on how the clipboard works on windows.
Explains how the API works and how the different formats and priorities are organized so the new application can decide which format to accept.
Tags: windows, clipboard, matt-burrough, format, copy-paste
Top developers can have a life outside coding I&amp;rsquo;ve read this article by Belen Albeza on how top coders don&amp;rsquo;t need to spend all their time programming or with activities related to programming.</description>
    </item>
    
    <item>
      <title>Finding all pending work in progress (WIP) in your workspace</title>
      <link>https://alvarogarcia7.github.io/blog/2017/08/07/find-all-pending-work/</link>
      <pubDate>Mon, 07 Aug 2017 06:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/08/07/find-all-pending-work/</guid>
      <description>It is a good practice to push your local work at the end of the day. Be it for increasing the bus factor (more people have the code), be it for reducing the lifespan of the branches (less time without integrating) or just enabling visibility (your teammates to see what has been developed). If you&amp;rsquo;re using Continuous Integration (CI) or Continuous Delivery (CD), this is even more often
You can even do it more often: for example before going to lunch, before a meeting, before a demo, etc.</description>
    </item>
    
    <item>
      <title>Self-Study in August 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/08/01/self-study-august-2017/</link>
      <pubDate>Tue, 01 Aug 2017 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/08/01/self-study-august-2017/</guid>
      <description>How I ended up paying $150 for a single 60GB download from Amazon Glacier I&amp;rsquo;ve read this article by Marko Karppinen that explains how a mistake in understanding the pricing model of AWS Glacier cost 150$ instead of the expected 0.86$
 When cloud providers use uncommon and/or unpredictable pricing models, even your informed hunch about the cost can be off by several orders of magnitude, like the price differential between an iPad and a Ferrari.</description>
    </item>
    
    <item>
      <title>The Nature of Software Development: Part I</title>
      <link>https://alvarogarcia7.github.io/blog/2017/07/09/nature-software-development-part-1/</link>
      <pubDate>Sun, 09 Jul 2017 13:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/07/09/nature-software-development-part-1/</guid>
      <description>The Nature of Software development: reading breadcrumbs, quotes, thoughts Preface  The Natural Way serves end users well because it delivers value to them sooner.
serves the business [&amp;hellip;] because it provides important information quickly, and because it provides the ability to adjust direction as needed.
serves management [&amp;hellip;] see what’s really going on inside the project so that when action is needed, there will be time to act. And it reduces management’s problems by making information visible [&amp;hellip;]</description>
    </item>
    
    <item>
      <title>The Search for Value (a quote)</title>
      <link>https://alvarogarcia7.github.io/blog/2017/07/09/search-for-value-quote-chapter-1/</link>
      <pubDate>Sun, 09 Jul 2017 13:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/07/09/search-for-value-quote-chapter-1/</guid>
      <description>A quote from the book The Nature of Software Development by Ron Jeffries, talking about value (in software) and the building blocks to achieve it:
 Value. Value, we’ll see, is “what you want.” [&amp;hellip;]
We’ll tell the story by building up from the bottom of the pyramid, describing how to guide, organize, plan, and build our product, in small slices, with a focus on quality. The value we produce is based on these.</description>
    </item>
    
    <item>
      <title>Self-Study in July 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/07/01/self-study-july-2017/</link>
      <pubDate>Sat, 01 Jul 2017 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/07/01/self-study-july-2017/</guid>
      <description>A Brief History of the UUID I&amp;rsquo;ve read this article by Rick Branson on the history of UUID. Describes the history of uid, uuid, early computing (both networked and not networked) and their own implementation of a uuid library
Tags: uuid, uid, flake, snowflake, ksuid, go, golang, rick-branson, library, implementation-history
More data, more data I&amp;rsquo;ve read this article about how cloudflare manages its logs. By Hunter Blanks
Tags: log, cloudflare, comparison, what-worked, what-did-not-work, kafka, citusdb, sre, site-reliability-engineering, analytics, hunter-blanks</description>
    </item>
    
    <item>
      <title>Books read in 2017Q2</title>
      <link>https://alvarogarcia7.github.io/blog/2017/06/30/books-read-2017q2/</link>
      <pubDate>Fri, 30 Jun 2017 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/06/30/books-read-2017q2/</guid>
      <description>(I&amp;rsquo;ve changed how I organize my books. More, here (TODO))
Finished:
 Russell en 90 minutos, Strathern; non-technical. A quick introduction to Bertrand Russell, his life and his way of thinking and seeing the world. Homenaje a Cataluña, Orwell; non-technical. A first-person view of the events during the Spanish Civil War (1936-1939), seen from the perspective of a British citizen that went there voluntarily. Explains the internal fracture of the left political parties and the fracture of the Spanish society.</description>
    </item>
    
    <item>
      <title>Self-Study in June 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/06/01/self-study-june-2017/</link>
      <pubDate>Thu, 01 Jun 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/06/01/self-study-june-2017/</guid>
      <description>So Hey You Should Stop Using Texts for Two-Factor Authentication I&amp;rsquo;ve read this article explaining why messages over SMS should not be used for the &amp;lsquo;what you own&amp;rsquo; in 2FA.
Tags: andy-greenberg, 2fa, sms, security, warning
Why I&amp;rsquo;d never work for Google, Twitter, or Facebook I&amp;rsquo;ve read this article by David Bryant Copeland on why he would never work for these three companies: he doesn&amp;rsquo;t share the principles and values from these companies.</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 9</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-9/</link>
      <pubDate>Sun, 28 May 2017 17:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-9/</guid>
      <description>Chapter 9: Learn to Write Analogy of TDD to writing.
Explains how to write good email. Then, good documentation, then good API documentation</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 8</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</link>
      <pubDate>Sun, 28 May 2017 16:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</guid>
      <description>Chapter 8: Bootstrap a Greenfield System  Working on a brand new application can be a lot of fun. There’s no &amp;ldquo;baggage&amp;rdquo; from legacy code, no technical debt, and there’s a wonderful feeling of freshness when starting an app from scratch.
(p. 101)
  The decisions you make [&amp;hellip;] can have a lasting impact
(p. 101)
 8.1 Overview  When given a greenfield project [&amp;hellip;] you have two main goals:</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 7</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/24/senior-software-engineer-chapter-7/</link>
      <pubDate>Wed, 24 May 2017 11:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/24/senior-software-engineer-chapter-7/</guid>
      <description>Chapter 7: Make Technical Decisions  Opinions like this are often indicators of hidden facts that you have yet to identify
(p. 90)
 </description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 6</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-6/</link>
      <pubDate>Tue, 23 May 2017 07:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-6/</guid>
      <description>Chapter 6: Play Well With Others  challenges you’ll face as a programmer is to explain what you do, or how you’ve done it, to someone who is not a programmer
Translating your work to non-technical people is a skill that can be more valuable than any specific technical knowledge you have. It’s what makes a senior developer in the eyes of others.
(p 77)
 6.1 Empathize With Your Audience  these &amp;ldquo;interested parties&amp;rdquo; understand the problem more deeply than you, but lack the technical knowledge, skill, or time to solve it directly.</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 5</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-5/</link>
      <pubDate>Tue, 23 May 2017 07:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-5/</guid>
      <description>Chapter 5: Deal With Technical Debt and Slop  Seeing legacy as tech debt that has been acquired Slop as source for sloppy code Chapter about understanding the difference between slop and technical debt.   Many developers, if they are feeling pressured to complete their work, would call this an acceptable compromise, promise to fix it later, and ship it
(p. 70)
  Technical Debt is [&amp;hellip;] used to explain compromises in implementation that save cost now, at a larger future cost (just like real debt).</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 3</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/13/senior-software-engineer-chapter-3/</link>
      <pubDate>Sat, 13 May 2017 13:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/13/senior-software-engineer-chapter-3/</guid>
      <description>Chapter 3: Fix bugs efficiently and cleanly In the beginning, you will be given tasks that require no in-depth domain knowledge
Process  A process allows you to focus on the right thing at th right time (p. 14)
It will make your productivity and quality more predictable, which, in turn, will help you estimate and keep more of your promises about your work (paraphrased from p. 14)
 TDD Explains some benefits about TDD:</description>
    </item>
    
    <item>
      <title>Notes from the Agile Barcelona Open Space</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/07/notes-agile-open-space-barcelona/</link>
      <pubDate>Sun, 07 May 2017 18:17:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/07/notes-agile-open-space-barcelona/</guid>
      <description>Yesterday I attended an Agile Barcelona open space at Netmind
Format On arrival, attendees where welcomed by an Agile Coffee.
At 10:00, the introduction started: a warm welcome to everyone, including first-time attendees to an open space, explaining what it is, the few rules and laws and making sure everyone had fun. Some time later, the marketplace happened and everyone presented their sessions. A curious thing to see was the effect of a session that everyone wanted to attend (dubbed a &amp;lsquo;black hole&amp;rsquo;).</description>
    </item>
    
    <item>
      <title>Self-Study in May 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/01/self-study-in-may-2017/</link>
      <pubDate>Mon, 01 May 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/01/self-study-in-may-2017/</guid>
      <description>The real reason why the Spotify model is broken I&amp;rsquo;ve read this article by Sharky Laguana, comparing several royalty models for spotify
Tags: sharky-laguana, spotify, comparison, royalty
[Day 3 of 7] &amp;ldquo;Badass&amp;rdquo; developer gets a RUDE awakening I&amp;rsquo;ve read this email that John Sonmez sends, about being a programmer vs a language programmer. Some quotes:
 Someone who could tear apart complex, confusing puzzles and engineer elegant, reliable solutions&amp;hellip; whether those challenges were software, hardware or &amp;ldquo;wetware.</description>
    </item>
    
    <item>
      <title>Self-Study in April 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/04/01/self-study-in-april-2017/</link>
      <pubDate>Sat, 01 Apr 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/04/01/self-study-in-april-2017/</guid>
      <description>10 Myths About Docker That Stop Developers Cold I&amp;rsquo;ve read this listicle of docker myths. By Derick Bailey
Tags: derick-bailey, docker, myth
Bored People Quit I&amp;rsquo;ve read this article by Michael Lopp on what are some mechanisms why bored people quit.
Some interesting quotes:
 My gig is the care and feeding of engineers, and their productivity is my productivity. If they all leave, I have exactly no job.
  My job isn’t just building product; I also build people.</description>
    </item>
    
    <item>
      <title>Books read in 2017Q1</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/31/books-read-in-2017q1/</link>
      <pubDate>Fri, 31 Mar 2017 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/31/books-read-in-2017q1/</guid>
      <description>Books I&amp;rsquo;ve read this quarter1:
Books started, not yet finished (WIP):
Books I want to finish. Usually come from another quarter:
 Functional Programming in Scala, by Chiusano and Bjarnason. Doing the exercises with the codurance team Gödel, Escher, Bach: An Eternal Golden Braid, Hofstadter  Books that have entered the queue:
Non-technical that have entered the queue:
  The ending date of the quarter is the same as the publication date &amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>On the Make, Buy or Rent decision: Stateful vs Stateless components</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/16/on-the-make-buy-or-rent-decision-stateful-vs-stateless-components/</link>
      <pubDate>Thu, 16 Mar 2017 07:39:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/16/on-the-make-buy-or-rent-decision-stateful-vs-stateless-components/</guid>
      <description>From the Make, Buy or Rent article:
 [&amp;hellip;] [T]he three main system options for organizations seeking to upgrade their systems [are :]
  Make Buy Rent  IT managers have different criteria for deciding which components to assign in each category.
Another criteria for deciding At a client, they have taken the decision to split their core IT systems in to the three options: make, buy, rent.
 The business logic to handle the core business is &amp;lsquo;make&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Modifying titles in a Trello Board</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/16/modifying-titles-in-a-trello-board/</link>
      <pubDate>Thu, 16 Mar 2017 00:36:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/16/modifying-titles-in-a-trello-board/</guid>
      <description>A teammate and I have created a small tool to modify the titles of the trello card in a trello board.
Technical description It works by applying a function to the existing title (because we wanted to remove a prefix from the existing title).
The modification is done, not through the API, but simulating user interaction:
 Click to edit the card Input the new title Save  The full code is available here</description>
    </item>
    
    <item>
      <title>Convert a project from npm to yarn</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/03/convert-a-project-from-npm-to-yarn/</link>
      <pubDate>Fri, 03 Mar 2017 11:09:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/03/convert-a-project-from-npm-to-yarn/</guid>
      <description>At a client, we&amp;rsquo;re converting all projects (i.e., sites, services, libraries) from npm to yarn. Mostly for the speed (as it uses the internal cache).
Step by step guide  Install yarn in your local environment * https://yarnpkg.com/lang/en/docs/install/ Run yarn install * This will create a yarn.lock file * Add that file to the repo: git add yarn.lock Modify Dockerfile * Install yarn (in the Dockerfile). Idea: shortcut this execution with yarn --version in case it is installed * Configure the PATH variable (ENV PATH &amp;hellip;) * ADD yarn.</description>
    </item>
    
    <item>
      <title>Self-Study in March 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/01/self-study-in-march-2017/</link>
      <pubDate>Wed, 01 Mar 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/01/self-study-in-march-2017/</guid>
      <description>¿Volver? I&amp;rsquo;ve read this article by Raul Avila comparing the options between working in the UK and in Spain (where he&amp;rsquo;s originally from). Inspired by other professionals (e.g., David Bonilla, Jerónimo Palacios).
Tags: spanish, jeronimo-palacios, david-bonilla, expat, comparison, raul-avila, united-kingdom, spain
Donkey code I&amp;rsquo;ve read this article by Einar W. Høst in which he introduces the concept of a &amp;lsquo;missing domain term&amp;rsquo; with the example of a donkey being &amp;lsquo;closely related to a horse, though not exactly the same&amp;rsquo;</description>
    </item>
    
    <item>
      <title>Comparing options for parametrized testing in javascript</title>
      <link>https://alvarogarcia7.github.io/blog/2017/02/26/comparing-options-for-parametrized-testing-in-javascript/</link>
      <pubDate>Sun, 26 Feb 2017 15:42:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/02/26/comparing-options-for-parametrized-testing-in-javascript/</guid>
      <description>We explore how to use parametrized tests (example in java, example in c#)
The tests are written using mocha syntax: describe, it. Using chai for expectations: assert.
Note: the example used below (adding to an array) is simple enough to be understood by everybody, without having to explain the domain. The real tests can have a more complicated environment or domain. This is just an example.
Using a custom syntax This is just an example of some possible syntax, not using any (currently) existing framework.</description>
    </item>
    
    <item>
      <title>Self-Study in February 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/02/01/self-study-in-february-2017/</link>
      <pubDate>Wed, 01 Feb 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/02/01/self-study-in-february-2017/</guid>
      <description>WhatsApp Security Vulnerability I&amp;rsquo;ve read this article by Bruce Schneier on a security defect in whatsapp, where an &amp;lsquo;unconfirmed&amp;rsquo; message can be re-encrypted (with a new key) and resent. This is a vector for some attacks.
Tags: bruce-schneier, security, whatsapp, encryption, attack-vector
Encrypted email service once used by Edward Snowden relaunches I&amp;rsquo;ve read this article, by Kim Zetter, on Lavabit restablishing its service. Explains the company&amp;rsquo;s past and the new services they are offering</description>
    </item>
    
    <item>
      <title>Self-Study in January 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/01/01/self-study-in-january-2017/</link>
      <pubDate>Sun, 01 Jan 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/01/01/self-study-in-january-2017/</guid>
      <description>Translation from Haskell to JavaScript of selected portions of the best introduction to monads I’ve ever read I&amp;rsquo;ve read this article by James Coglan, introducing monads.
About composability:
 The symmetry of the argument and return types is what makes these functions composable
 or
 symmetric input and output types
 Guide to basic monadic functions:
 lift, which converts a &amp;lsquo;simple’ function into a debuggable function bind, which converts a debuggable function into a composable form unit, which converts a simple value into the format required for debugging, by placing it in a container</description>
    </item>
    
    <item>
      <title>Books read in 2016Q4</title>
      <link>https://alvarogarcia7.github.io/blog/2016/12/31/books-read-in-2016q4/</link>
      <pubDate>Sat, 31 Dec 2016 12:49:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/12/31/books-read-in-2016q4/</guid>
      <description>Books I&amp;rsquo;ve read this quarter1:
Books started, not yet finished (WIP):
 Functional Programming in Scala, by Chiusano and Bjarnason. Doing the exercises with the codurance team Gödel, Escher, Bach: An Eternal Golden Braid, Hofstadter  Books I want to finish. Usually come from another quarter:
Books that have entered the queue:
Non-technical that have entered the queue:
 La psicología del dinero, Hammond Invirtiendo a largo plazo, García Paramés Quién domina el mundo, Chomsky Homenaje a Cataluña, Orwell El camino al 18J, Payne Cartas desde la revolución bolchevique, Sadoul Shogun: The Life of Tokugawa Ieyasu, Sadler Els jueus i Catalunya, Villatoro Russell en 90 minutos, Strathern El problema de los tres cuerpos, Liu    The ending date of the quarter is the same as the publication date &amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>A common misunderstanding about `reduce`</title>
      <link>https://alvarogarcia7.github.io/blog/2016/12/14/a-common-misunderstanding-about-reduce/</link>
      <pubDate>Wed, 14 Dec 2016 18:48:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/12/14/a-common-misunderstanding-about-reduce/</guid>
      <description>Misconception I&amp;rsquo;ve read in several places that reduce reduces an array1 of values to a single one. The main characteristic of this function is not to reduce to a &amp;lsquo;smaller element&amp;rsquo; / &amp;lsquo;single element&amp;rsquo;, but to have access to the accumulated results and the elements, one by one. Quoting Mozilla Developer Network&amp;rsquo;s (MDN) Javascript reference:
 The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.</description>
    </item>
    
    <item>
      <title>Self-Study in December 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/12/01/self-study-in-december-2016/</link>
      <pubDate>Thu, 01 Dec 2016 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/12/01/self-study-in-december-2016/</guid>
      <description>A Docker Fork: Talk of a Split Is Now on the Table I&amp;rsquo;ve read this article by Alex Williams and Joab Jackson about the possible split in the Docker environment following Docker&amp;rsquo;s and other providers&#39; product roadmaps. Each own has their policies and priorities and they collide in this case
Tags: docker, alex-williams, joab-jackson, container, oci, kubernetes, devops, tool
An Ode to Boring: Creating Open and Stable Container World I&amp;rsquo;ve read this article by Bob Wise, in which he describes the state of the Docker tool and the Docker Engine.</description>
    </item>
    
    <item>
      <title>Self-Study in November 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/11/01/self-study-in-november-2016/</link>
      <pubDate>Tue, 01 Nov 2016 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/11/01/self-study-in-november-2016/</guid>
      <description>Advice for white men I&amp;rsquo;ve read this article by Cate Huston about how advice affects different people.
 But here are some things to consider:
 Advice on failure is different for people who are judged on performance rather than potential. Advice on saying no is different for people who aren’t appreciated for doing work for the collective… but who are punished if they don’t. Advice on negotiation is different for people who are perceived negatively when they do negotiate.</description>
    </item>
    
    <item>
      <title>Self-Study in October 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/10/01/self-study-in-october-2016/</link>
      <pubDate>Sat, 01 Oct 2016 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/10/01/self-study-in-october-2016/</guid>
      <description>Should Engineers Design? I&amp;rsquo;ve read this article by Cap Watkins where he explains the relationship between designers and programmers and how to get the latter involved in the design / UX / UI process.
Tags: cap-watkins, design, ux, ui, exchange, cross-functional
The Sliding Scale of Giving a Fuck I&amp;rsquo;ve read this article by Cap Watkins where he explains that different topics have a different importance to each one of us: this topic might be very important for someone else, ergo, it makes mores sense to evaluate their option more carefully.</description>
    </item>
    
    <item>
      <title>Books read in 2016Q3</title>
      <link>https://alvarogarcia7.github.io/blog/2016/09/30/books-read-in-2016q3/</link>
      <pubDate>Fri, 30 Sep 2016 12:49:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/09/30/books-read-in-2016q3/</guid>
      <description>Books I&amp;rsquo;ve read this quarter1:
 Extreme Programming Pocket Guide by Chromatic Notes to a Software Team Leader (1st Edition), by Roy Osherove  Non-technical:
 The Zero Marginal Cost Society: The Internet of Things, the Collaborative Commons, and the Eclipse of Capitalism, by Jeremy Rifkin Snow Crash, by Neal Stephenson La guerra no tiene rostro de mujer, by Svetlana Aleksiévich  Books started, not yet finished (WIP):
 Talking with Tech Leads: From Novices to Practitioners by Patrick Kua  Books I want to finish.</description>
    </item>
    
    <item>
      <title>Self-Study in September 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/09/01/self-study-in-september-2016/</link>
      <pubDate>Thu, 01 Sep 2016 11:31:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/09/01/self-study-in-september-2016/</guid>
      <description>There&amp;rsquo;s nothing here.</description>
    </item>
    
    <item>
      <title>Self-Study in August 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/08/01/self-study-in-august-2016/</link>
      <pubDate>Mon, 01 Aug 2016 19:56:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/08/01/self-study-in-august-2016/</guid>
      <description>Lessons in Agile: Six Months at Pivotal I&amp;rsquo;ve read this article by Maryam Labib where she explains what she has learned in the last 6 months at Pivotal: how to pair program, how to TDD and some good practices to be a better developer.
Tags: maryam-labib, pivotal, career, professional-career, tdd, pair-programming, team, lessons-learned, experience
Hacking verbal communication systems I&amp;rsquo;ve watched this talk by Ryan Alexander on what kind of systems humans use to communicate and how to improve them.</description>
    </item>
    
    <item>
      <title>AWS Kinesis Zombieland</title>
      <link>https://alvarogarcia7.github.io/blog/2016/07/28/aws-kinesis-zombieland/</link>
      <pubDate>Thu, 28 Jul 2016 19:28:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/07/28/aws-kinesis-zombieland/</guid>
      <description>I attended a workshop on AWS Kinesis, called AWS Kinesis Zombieland by Javi Moreno at capside.
Notes AWS Kinesis Zombieland
 muy importante escoger bien la clave de particionado (id de shard) KPL librería de kinesis que te permite hacer batching, timeout, &amp;hellip;  la otra se llama KCL. KCL permite mantener estado   cuando te pidan una app de big data, pregunta para qué lo quieren, lo mismo que con cualquier proyecto de software latitud = Y, longitud = x el canal se llama stream, la capacidad se llama shard  el shard sólo permite 5 lecturas por segundo, 2MB/s   usar el shard como buffer usar la clave de particionado como algoritmo de agregación cada vez que tienes una tabla en dynamodb, tienes que poner una alerta de throughput nota: lo que no puedes hacer es guardarlos todos y luego procesarlo.</description>
    </item>
    
    <item>
      <title>Self-Study in July 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/07/04/self-study-in-july-2016/</link>
      <pubDate>Mon, 04 Jul 2016 10:47:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/07/04/self-study-in-july-2016/</guid>
      <description>Until the End of the Internet I&amp;rsquo;ve read this article by Jason Zimdars explaining the &amp;ldquo;end of the internet&amp;rdquo; policy at Basecamp: they will make everything possible to keep the services running for existing customer until the end or until the last customer uses it.
Tags: policy, end-of-the-internet, jason-zimdars, basecamp, product
How Agile Principles Can Fund Your Start-Up I&amp;rsquo;ve read this article by Jurgen Appelo explaining how the agile values can help you negotiate funding for your startup: instead of negotiating with each investor, agree on a formula and invest in many small rounds, instead of a big one.</description>
    </item>
    
    <item>
      <title>Books read in 2016Q2</title>
      <link>https://alvarogarcia7.github.io/blog/2016/06/30/books-read-in-2016q2/</link>
      <pubDate>Thu, 30 Jun 2016 12:49:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/06/30/books-read-in-2016q2/</guid>
      <description>Books I&amp;rsquo;ve read this quarter1:
 Extreme Programming Explained: Embrace Change, 2nd Edition by Kent Beck and Cynthia Andres, again. Building Microservices, Designing Fine-Grained Systems, by Sam Newman, with the &amp;lsquo;@deAprendices&amp;rsquo;s reading club&amp;rsquo;. Blog posts under the tag building-microservices Reinventing Organizations by Frederic Laloux. Blog posts under the tag reinventing-organizations  Non-technical:
 L&amp;rsquo;acabadora, by Michela Murgia Disrupted: My Misadventure in the Start-Up Bubble by Dan Lyons  Books started, not yet finished (WIP):</description>
    </item>
    
    <item>
      <title>Stability terms from &#34;Release it!&#34;, a quote</title>
      <link>https://alvarogarcia7.github.io/blog/2016/06/26/stability-terms-from-release-it-a-quote/</link>
      <pubDate>Sun, 26 Jun 2016 22:19:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/06/26/stability-terms-from-release-it-a-quote/</guid>
      <description>In Release It!, terms related to stability:
 transaction: is an abstract unit of work processed by the system mixed workload: is a combination of different transaction types processed by a system. system: the complete, interdependent set of hardware, applications, and services required to process transactions for users stability: resilient system keeps processing transactions, even when there are transient impulses, persistent stresses, or component failures disrupting normal processing stress (to the system): is a force applied to the system over an extended period.</description>
    </item>
    
    <item>
      <title>The role of a software consultant</title>
      <link>https://alvarogarcia7.github.io/blog/2016/06/10/role-software-consultant/</link>
      <pubDate>Fri, 10 Jun 2016 10:50:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/06/10/role-software-consultant/</guid>
      <description>A quote from Reinventing Organizations, about roles, job descriptions and job titles in Chapter 2.2: Self-management (structures), page 90:
 [In] Teal Organizations [&amp;hellip;] people are not made to fit pre-defined jobs; their job emerge from a multitude of roles and responsibilities they pick up based on their interests, talents, and the needs of the organization.
 Frederic Laloux, Reinventing Organizations   In my opinion, this is the role of the software consultant when working with a client: even if the customer has asked for help in some parts of their activity, a senior-enough consultant can discover other areas where they can add value, even if that new work doesn&amp;rsquo;t have much in common with the initial request (this change should be approved by the people that will be affected).</description>
    </item>
    
    <item>
      <title>Unwritten principles for coaching, a quote</title>
      <link>https://alvarogarcia7.github.io/blog/2016/06/10/unwritten-principles-coaching/</link>
      <pubDate>Fri, 10 Jun 2016 10:49:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/06/10/unwritten-principles-coaching/</guid>
      <description>A quote from Reinventing Organizations, about a few unwritten principles for coaching, in Chapter 2.2: Self-management (structures), page 70:
  It’s okay for teams to struggle. From struggle comes learning. And teams that have gone through difficult moments build resilience and a deep sense of community. The coach’s role therefore is not to prevent foreseeable problems, but to support teams in solving them (and later help them reflect on how they’ve grown in the process).</description>
    </item>
    
    <item>
      <title>Self-Study in June 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/06/01/self-study/</link>
      <pubDate>Wed, 01 Jun 2016 21:47:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/06/01/self-study/</guid>
      <description>DiversityMediocrityIllusion I&amp;rsquo;ve read this article by Martin Fowler (on his bliki) about the diversity in conferences and the profession. How it is our job to incentive a positive feedback cycle that brings more diverse people into the workforce.
Explains how they do it in ThoughtWorks and how they have changed in the last decade.
Tags: martin-fowler, diversity, gender, workforce, conference, profession, bliki
What do cryptic Github comments mean? I&amp;rsquo;ve read this article by Alex Beregszaszi on the abbreviations used in Github comments and pull requests.</description>
    </item>
    
    <item>
      <title>Self-Study in May 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/05/01/self-study/</link>
      <pubDate>Sun, 01 May 2016 00:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/05/01/self-study/</guid>
      <description>Being A Developer After 40 I&amp;rsquo;ve read this article by Adrian Kosmaczewski on the required topics to be a developer at age 40 and keep enjoying it:
 Forget The Hype Choose Your Galaxy Wisely Learn About Software History Keep on Learning Teach Workplaces Suck Know Your Worth Send The Elevator Down LLVM  He references galaxy, the big stack you are positioned (JVM, .net, PHP, etc). He makes a special mention of the LLVM</description>
    </item>
    
    <item>
      <title>Quote: Characterization tests</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/18/quote-characterization-tests/</link>
      <pubDate>Mon, 18 Apr 2016 00:56:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/18/quote-characterization-tests/</guid>
      <description>In Working effectively with legacy code, Michael Feathers talks a type of tests to define or characterize the current behavior of the legacy system:
 In nearly every legacy system, what the system does is more important than what it is supposed to do.
A characterization test is a test that characterizes the actual behavior of a piece of code. [&amp;hellip;] The test document the actual current behavior of the system.</description>
    </item>
    
    <item>
      <title>Brownish Greenfield Gilded Rose Kata</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/18/brownish-greenfield-gilded-rose-kata-formulation/</link>
      <pubDate>Mon, 18 Apr 2016 00:44:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/18/brownish-greenfield-gilded-rose-kata-formulation/</guid>
      <description>(This formulation has been copied and adapted from Bobby Johnson and Terry Hughes&amp;rsquo;s repository)
Formulation Hi and welcome to team Gilded Rose. As you know, we are a small inn with a prime location in a prominent city ran by a friendly innkeeper named Allison. We also buy and sell only the finest goods.
Unfortunately, our goods are constantly degrading in quality as they approach their sell by date. We have a system in place that updates our inventory for us.</description>
    </item>
    
    <item>
      <title>Faster site generation with a native Octopress 2</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/17/faster-site-generation-native-octopress/</link>
      <pubDate>Sun, 17 Apr 2016 23:39:23 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/17/faster-site-generation-native-octopress/</guid>
      <description>Note: this article is an answer to a previous one, about the same topic: a tool for a faster site generation while developing / writing articles, using octopress 2.
Introduction Octopress 2 packs, out of the box, some tasks to speed up the site generation while you&amp;rsquo;re writing articles:
Isolate a post:
# usage rake isolate[my-post] desc &amp;#34;Move all other posts than the one currently being worked on to a temporary stash location (stash) so regenerating the site happens much more quickly.</description>
    </item>
    
    <item>
      <title>Self-Study in April 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/01/self-study/</link>
      <pubDate>Fri, 01 Apr 2016 00:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/01/self-study/</guid>
      <description>Deliberate Practice: What It Is and Why You Need It I&amp;rsquo;ve read this article by Corbett Barr on what is deliberate practice and why it is needed to become an expert in a given domain field.
The four essential components:
 Motivation Tailored (practice) Feedback Repetion  Tags: corbett-barr, deliberate-practice, expert, practice, anders-ericsson, talent, professional-development, career
10 Features I Wish Java Would Steal From the Kotlin Language I&amp;rsquo;ve read this list of features that the Kotlin Language has that would be an improvement for the Java language.</description>
    </item>
    
    <item>
      <title>Books read in 2016Q1</title>
      <link>https://alvarogarcia7.github.io/blog/2016/03/31/books-read-in-2016q1/</link>
      <pubDate>Thu, 31 Mar 2016 12:49:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/03/31/books-read-in-2016q1/</guid>
      <description>Books I&amp;rsquo;ve read this quarter1:
 101 cosas que ya sabes, pero siempre olvidas by Ernie J. Zelinski; in Spanish Structure and Interpretation of Computer Programs by Abelson, Sussman, and Sussman, with the &amp;lsquo;@deAprendices&amp;rsquo;s reading club&amp;rsquo;. Blog posts under the tag sicp. Only chapters 1 and 2.  Books started, not yet finished (WIP):
 Building microservices, by Sam Newman, with the &amp;lsquo;@deAprendices&amp;rsquo;s reading club&amp;rsquo;. Blog posts under the tag building-microservices Why programmers work at night by Swizec Teller Readings in Database Systems, 5th Edition by Peter Bailis, Joseph M.</description>
    </item>
    
    <item>
      <title>Self-Study in March 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</link>
      <pubDate>Wed, 02 Mar 2016 12:58:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</guid>
      <description>Learning Programming Isn’t That Hard, Deep Work Is Hard I&amp;rsquo;ve read this article by Benedict Fritz on two types of work (i.e., deep and shallow) and how programming is of the deep type. He links the difficulty of learning to program to the difficulty of practicing deep work.
Tags: analogy, benedict-fritz, deep-work, shallow-work, learn-to-program, psychology
BeCodeWeek by Yeray Darias I&amp;rsquo;ve read this category of posts by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.</description>
    </item>
    
    <item>
      <title>Tip: using tortoise credentials in git CLI</title>
      <link>https://alvarogarcia7.github.io/blog/2016/03/02/using-tortoise-credentials-from-cli/</link>
      <pubDate>Wed, 02 Mar 2016 12:41:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/03/02/using-tortoise-credentials-from-cli/</guid>
      <description>TortoiseGit part  Go to a repo right button, Settings Git -&amp;gt; Credential Add a creadential Config type: global Helper: wincred  Sync once using your HTTPS password
CLI part Open the $REPO/.git/config and add
[credential] helper = wincred Remote git operations should not ask for credentials anymore</description>
    </item>
    
    <item>
      <title>Kata formulation: Find the comments</title>
      <link>https://alvarogarcia7.github.io/blog/2016/03/01/kata-formulation-find-comments/</link>
      <pubDate>Tue, 01 Mar 2016 08:57:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/03/01/kata-formulation-find-comments/</guid>
      <description>Little Johnny is inspecting a PHP source code that contains comments. These comments contains words that he doesn&amp;rsquo;t understand, as it written in another language.
Rules and constraints The source code in the PHP files does not need to be correct.
A comment (a subset of PHP comments) is defined as:
 A line containing C-style comment delimiter, except when it is within a string  // hello C-style is a valid comment echo &amp;quot;//&amp;quot;; is not a comment echo &#39;//&#39;; is not a comment   A line containing Perl-style comment delimiter, except when it is within a string  # hello Perl-style is a valid comment echo &amp;quot;#&amp;quot;; is not a comment echo &#39;#&#39;; is not a comment   There are no multi-line comments  /* .</description>
    </item>
    
    <item>
      <title>Two persons involved in a git commit, in github</title>
      <link>https://alvarogarcia7.github.io/blog/2016/02/14/two-persons-involved-in-a-git-commit/</link>
      <pubDate>Sun, 14 Feb 2016 17:12:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/02/14/two-persons-involved-in-a-git-commit/</guid>
      <description>On git You can have multiple persons involved in a single git commit: an author and a committer.
The difference is explained by Manuel Doninger 1:
 The author is the one who did the code change. The committer is the person who committed that change to a repository.
 an example, by the same author:
 Example: I&amp;rsquo;m not a committer in the EGit project, so i have no rights to push directly to the EGit repository at Eclipse.</description>
    </item>
    
    <item>
      <title>Self-Study in February 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</link>
      <pubDate>Mon, 01 Feb 2016 02:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</guid>
      <description>Software and all that comes with it I&amp;rsquo;ve read these slides about creating software and asking questions to deliver value, by Alberto Brandolini
Tags: alberto-brandolini, software, slide, team-management, agile
Driving your DBA crazy in 3 easy steps I&amp;rsquo;ve read these slides about dealing with the knowledge that is present in the database, not expressed in ubiquitous language and cause of the low bus factor, by Alberto Brandolini
Analogy between the movie The Shining and a model / entities / aggregates.</description>
    </item>
    
    <item>
      <title>Self-Study in January 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</link>
      <pubDate>Fri, 01 Jan 2016 16:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</guid>
      <description>Test cases in inner classes with JUnit I&amp;rsquo;ve read this answer in stackoverflow about nested test runners in JUnit
Tags: junit, stackoverflow, answer, nested-runner
Recording a Great Coding Screencast I&amp;rsquo;ve read this article by John Lindquist where he explains how he sets up the recording environment for egghead.
Tags: john-lindquist, record, screencast, egghead, code-screencast, record-video, video
React Testing Course I&amp;rsquo;ve watched the full course by Trevor D. Miller on how to test react components and the libraries to make it possible.</description>
    </item>
    
    <item>
      <title>Books read in 2015Q4</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/31/books-read-in-2015q4/</link>
      <pubDate>Thu, 31 Dec 2015 12:49:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/31/books-read-in-2015q4/</guid>
      <description>Books I&amp;rsquo;ve read this quarter1:
 Practical Object-Oriented Design in Ruby, An Agile Primer (POODR) by Sandi Metz, with the &amp;lsquo;@deAprendices&amp;rsquo;s reading club&amp;rsquo;. Blog posts under the tag poodr.  Books started, not yet finished (WIP):
 Haskell Programming, By Chris Allen and Julie Moronuki. This book is still in progress and I&amp;rsquo;m reviewing it Pragmatic Thinking and Learning: Refactor Your Wetware by Andy Hunt Structure and Interpretation of Computer Programs by Abelson, Sussman, and Sussman, with the &amp;lsquo;@deAprendices&amp;rsquo;s reading club&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Validating CSV data in clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/15/validating-data-clojure/</link>
      <pubDate>Tue, 15 Dec 2015 11:52:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/15/validating-data-clojure/</guid>
      <description>At a client, we have CSVs of data that can be simplified to this 1:
(def data [ [&amp;#34;total&amp;#34; 6 8 13] [&amp;#34;0&amp;#34; 1 2 3] [&amp;#34;0&amp;#34; 2 0 4] [&amp;#34;0&amp;#34; 3 0 6] ]) In this case, some of the row named total is the sum of the rest of the rows, but only for some columns (second and fourth). We do not want to get rid of the columns, as they need to be printed at the end.</description>
    </item>
    
    <item>
      <title>Clojure and the macro and</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/08/clojure-and-the-macro-and/</link>
      <pubDate>Tue, 08 Dec 2015 17:37:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/08/clojure-and-the-macro-and/</guid>
      <description>While on the REPL, I tried this:
simple.core=&amp;gt; (reduce and true [true]) CompilerException java.lang.RuntimeException: Can&amp;#39;t take value of a macro: #&amp;#39;clojure.core/and, compiling:(form-init7116694665186998245.clj:1:1) Reading the clojuredocs for and, you can find this:
 Note add is a macro, so you cannot apply it. For example, there is a vector of some Boolean values [true true false true], which you want to test to see if they are all true. The code below will not work:</description>
    </item>
    
    <item>
      <title>Tip: automate the blog publishing</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/02/tip-automate-the-blog-publishing/</link>
      <pubDate>Wed, 02 Dec 2015 19:10:40 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/02/tip-automate-the-blog-publishing/</guid>
      <description>I&amp;rsquo;ve automated the generation of the blog using Travis CI. Using this new way, each commit generates a new version of the pages.
These resources have been very useful:
 Prose.io + Octopress + Travis-CI + GitHub Pages = ♥. First post (in this set) that explains how this automation is possible Auto-deploying to My Octopress Blog With Travis-CI. Explains how to generate your key, encript it with travis Octopress + GitHub Pages + Travis: The most useful page, explains step by step what to do for mac and linux.</description>
    </item>
    
    <item>
      <title>Self-Study in December 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</link>
      <pubDate>Wed, 02 Dec 2015 09:50:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</guid>
      <description>Ruby Equality And Object Comparison I&amp;rsquo;ve read this article, written by Alan Skorkin, that explains equality comparisons in ruby:
 equal? is reference equality == is value equality eql? is value and type equality  Tags: ruby, comparison, equality, object, reference, alan-skorkin
Software Folklore I&amp;rsquo;ve watched this PechaKucha by Chris Ford on what are laws and how they relate to creating software. Also talks on what could be an analogy to software creation (says not science, not engineering)</description>
    </item>
    
    <item>
      <title>Functional Implementation Patterns</title>
      <link>https://alvarogarcia7.github.io/blog/2015/11/02/functional-implementation-patterns/</link>
      <pubDate>Mon, 02 Nov 2015 21:26:13 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/11/02/functional-implementation-patterns/</guid>
      <description>Collection of HOFs Select Attribute class Array def select_attribute attr self.map { |unit| unit[attr] } end end usage:
[71] pry(main)&amp;gt; [ {:element =&amp;gt; 1, :even? =&amp;gt; false}, {:element =&amp;gt; 2, :even? =&amp;gt; true}, {:element =&amp;gt; 3, :even? =&amp;gt; false}] .select_attribute :even? =&amp;gt; [false, true, false] Collection of patterns Decorating a collection Introduction You want to materialize properties from a collection
Alternative names  Intermediary Functional decorator Collection Annotation (from Wallingford&amp;rsquo;s Roundabout, especially Interface procedure)  Example [62] pry(main)&amp;gt; [1,2,3] .</description>
    </item>
    
    <item>
      <title>Self-Study in November 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</link>
      <pubDate>Mon, 02 Nov 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</guid>
      <description>Call me maybe: RabbitMQ I&amp;rsquo;ve read this article by Kyle Kingsbury on using RabbitMQ as a lock service. It investigates and gives a counterexample of using it for this purpose.
Uses Knossos to do the testing and surfaces a problem with it. Explains specific problems on locking: at-most-once and at-least-once message delivery
Note: References Jepsen (I guess an inside joke to the song &amp;ldquo;Call me maybe&amp;rdquo; by Carly Rae Jepsen) for at-most-once and at-least-once message delivery.</description>
    </item>
    
    <item>
      <title>Tip: calling all methods in an Object in Ruby</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/12/calling-all-methods-in-a-ruby-object/</link>
      <pubDate>Mon, 12 Oct 2015 11:55:17 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/12/calling-all-methods-in-a-ruby-object/</guid>
      <description>In Ruby, you can query the methods an object accepts:
pry(main)&amp;gt; 1.methods =&amp;gt; [:to_s, :-@, :+, :-, :*, :/, :div, :%, :modulo, :divmod, :fdiv, ... In case you want to call all methods, this can be useful (plus its tests):
def call_all_methods(object, *args) # remove methods that modify the PRY environment or are too verbose success = {} error = {} exclusions = [:pry, :methods, :private_methods, :public_methods, :gem].map { |x| x.</description>
    </item>
    
    <item>
      <title>Tool: Building a local pipeline</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/10/tool_building_local_pipeline/</link>
      <pubDate>Sat, 10 Oct 2015 11:06:58 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/10/tool_building_local_pipeline/</guid>
      <description>Motivation At a client, one of the projects has a long building process and the tests are mostly slow, so I use a local building pipeline, an example of the Pipes and Filters pattern.
This allows for executing manually only the fast unit tests, then automatically (no user intervention, no time spent) executing the rest of them before pushing. In case the latter fails, it is possible to do git push -f to the pipeline without corrupting the central repository (origin) history, possibly disturbing others.</description>
    </item>
    
    <item>
      <title>Java Tips &amp; Gotchas</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/07/java-tips-gotchas/</link>
      <pubDate>Wed, 07 Oct 2015 11:06:58 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/07/java-tips-gotchas/</guid>
      <description>JVM default encoding as UTF-8 Make the JVM use UTF-8 character encoding by default
Set up the system property JAVA_TOOL_OPTIONS to -Dfile.encoding=UTF8</description>
    </item>
    
    <item>
      <title>Tip: Differences in maven test execution</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/05/tip-differences-in-maven-test-execution/</link>
      <pubDate>Mon, 05 Oct 2015 17:18:55 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/05/tip-differences-in-maven-test-execution/</guid>
      <description>There are times when you only want to have the production code:
 downstream job after a successful build compiling in local after checkout from DVCS spiking (possibly the tests are broken) speeding up the process  For that, maven allows to skip the tests, selectively:
 -DskipTests compiles the tests, but skips running them -Dmaven.test.skip skips compiling the tests and does not run them. This can also be written as -Dmaven.</description>
    </item>
    
    <item>
      <title>Tip: Propagate the failure in bash</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/02/tip-propagate-the-failure-in-bash/</link>
      <pubDate>Fri, 02 Oct 2015 08:53:29 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/02/tip-propagate-the-failure-in-bash/</guid>
      <description>In bash, the usual behavior is to return the last status code:
bash-3.1$ tr tr: two strings must be given when translating bash-3.1$ echo $? 1 But this also applies to pipes:
bash-3.1$ tr|tee 1.txt tr: two strings must be given when translating bash-3.1$ echo $? 0 Should you want to pass the non-zero (error) status code to the next operation, use this feature toggle: set -o pipefail
bash-3.1$ set -o pipefail bash-3.</description>
    </item>
    
    <item>
      <title>Self-Study in October 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</link>
      <pubDate>Thu, 01 Oct 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</guid>
      <description>Blazing Fast HTML: Virtual DOM in Elm I&amp;rsquo;ve read this article explaining how Elm works in relation to the virtual DOM. By Evan Czaplicki.
Tags: elm, dom, virtual-dom, comparison, speed, haskell, evan-czaplicki
Why you should never, ever, ever use MongoDB I&amp;rsquo;ve read this article stating the downsides of using MongoDB. Written by Sven Slootweg
Tags: mongodb, downside, sven-slootweg, json, document-store, postgresql, acid
Do you really get classloaders? I&amp;rsquo;ve watched this video by Jevgeny Kabanov on classloaders: what they are, how they work nad some tips to solve common issues.</description>
    </item>
    
    <item>
      <title>Books read in 2015Q3</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/30/books-read-in-2015q3/</link>
      <pubDate>Wed, 30 Sep 2015 12:49:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/30/books-read-in-2015q3/</guid>
      <description>Books I&amp;rsquo;ve read this quarter1:
 The Craftsman by Richard Sennett. Posts under the tag the-craftsman Software Craftsmanship: The New Imperative by Pete McBreen. Posts under the tag software-craftsmanship-book Lisp Hackers by Vsevolod Dyomkin The Passionate Programmer: Creating a Remarkable Career in Software Development by Chad Fowler.  Books started, not yet finished (WIP):
 Haskell Programming, By Chris Allen and Julie Moronuki. This book is still in progress and I&amp;rsquo;m reviewing it Functional Programming Patterns in Scala and Clojure by Michael Bevilacqua-Linn Pragmatic Thinking and Learning: Refactor Your Wetware by Andy Hunt  Books I want to finish:</description>
    </item>
    
    <item>
      <title>Brown Bag Session: Clojure&#39;s Data and Code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/23/brown-bag-session-clojures-data-and-code/</link>
      <pubDate>Wed, 23 Sep 2015 21:24:58 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/23/brown-bag-session-clojures-data-and-code/</guid>
      <description>Today, at a client, I&amp;rsquo;ve facilitated the brown-bag session on Clojure, introducing Lisp&amp;rsquo;s homoiconicity.
Session Structure The session was designed as a kata, first introducing participants in the problem, letting some time to read the initial version and to think about possible solutions.
Then, I structured the rest of the time as a prepared kata, where I was explaining in the beamer our current problems (day-to-day tasks) and possible solutions in Clojure.</description>
    </item>
    
    <item>
      <title>Navigating the GitHub repositories</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/08/navigating-the-github-repositories/</link>
      <pubDate>Tue, 08 Sep 2015 07:54:15 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/08/navigating-the-github-repositories/</guid>
      <description>I&amp;rsquo;ve reorganized my github repositories, especially the katas and the simple sessions.
Katas All of them can be found in this search
Separated by language:
 Java Clojure Javascript Haskell Ruby  To the best of my knowledge, all repositories follow a similar pattern:
 Contain the keyword &amp;lsquo;kata&amp;rsquo; Contain the language Contain a description of the exercise  An example: palindromes-searcher-kata-haskell
Simple sessions A simple session is a lapse of time working with the language to solve a problem, but not big enough to deserve a repository of its own.</description>
    </item>
    
    <item>
      <title>A basic working environment</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/08/a-basic-working-environment/</link>
      <pubDate>Tue, 08 Sep 2015 07:46:56 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/08/a-basic-working-environment/</guid>
      <description>Sometimes, when working out of somebody&amp;rsquo;s else computer, I won&amp;rsquo;t have my preferred IDE installed.
In this case, what I usually do &amp;ndash;as long as the programming session is more than 5 TDD cycles&amp;ndash;, is to configure my own environment. It includes:
 text editor: $EDITOR is enough test runner. A simple bash script executing the tests will suffice git terminal: to commit, see differences, revert, etc [optional] REPL if the language has it  If the system already has it, I will use screen to cycle around the sessions.</description>
    </item>
    
    <item>
      <title>Brown-bag session: eXtreme Programming</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/02/brownbag-session-xtreme-programming/</link>
      <pubDate>Wed, 02 Sep 2015 10:41:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/02/brownbag-session-xtreme-programming/</guid>
      <description>At a client, today I&amp;rsquo;ve introduced the eXtreme Programmig methodology, with its values, principles, practices in a brown-bag session.
It has been an informal session, without slides, but we have used this video by the Kleer guys (in Spanish).
The video gives a high-level overview of what XP is. We also needed to cover the daily practices (e.g., TDD, pair programming, whole team)
After that, we&amp;rsquo;ve done a questions&amp;amp;answers round to solve the teammates&#39; doubts</description>
    </item>
    
    <item>
      <title>Self-Study in September 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015/</link>
      <pubDate>Tue, 01 Sep 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015/</guid>
      <description>The 30 second habit with a lifelong impact I&amp;rsquo;ve read this article list of patterns, by Robyn Scott, in which it is explained why to compress information in a few ideas, investing 30 seconds to condense the article.
Tags: 30-second, habit, robyn-scott
The Strengths and Weaknesses of Extreme Programming I&amp;rsquo;ve watched this video explaining the strengths and weaknesses of extreme programming. By William Matheson
Tags: extreme-programming, xp, william-matheson, video, strength, weakness</description>
    </item>
    
    <item>
      <title>Coding dojo: Palindromes</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/19/coding-dojo-palindromes/</link>
      <pubDate>Wed, 19 Aug 2015 11:37:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/19/coding-dojo-palindromes/</guid>
      <description>At a client, today I&amp;rsquo;ve facilitated a coding dojo on palindrome searching.
I&amp;rsquo;ve prepared a github repository for the java solutions. In this repository, the tag start-here has the prepared pom with dependencies.
We have paired to work on the kata but none of my teammate&amp;rsquo;s solutions are available (at the moment), but mine is at the master branch.</description>
    </item>
    
    <item>
      <title>Coding dojo: Goldbach Conjecture</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/17/coding-dojo-goldbach-conjecture/</link>
      <pubDate>Mon, 17 Aug 2015 23:37:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/17/coding-dojo-goldbach-conjecture/</guid>
      <description>At the Barcelona Software Craftsmanship meetup, today I&amp;rsquo;ve facilitated a coding dojo on the Goldbach Conjecture. The problem was prepared by Manuel Rivero.
The meetup event is here and there are plenty of solutions prepared by the pairs:
 Java C# Haskell PHP Java PHP Haskell  </description>
    </item>
    
    <item>
      <title>Searching on a suite of failing tests</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/13/searching-on-a-suite-of-failing-tests/</link>
      <pubDate>Thu, 13 Aug 2015 16:45:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/13/searching-on-a-suite-of-failing-tests/</guid>
      <description>Motivation Today, at a client, in the green phase, we had a test suite which was failing: the whole suite fails but the test cases, individually, succeed.
So my first impression was that something was being shared between tests. Also confirmed because the failing class was an EndToEnd test, in which we load the whole spring context
A quick glance was not revealing anything interesting, so I decided to find which is the minimum suite (as opposed as to the whole suite) that makes the new testcase fail, expecting to narrow the search for possible causes.</description>
    </item>
    
    <item>
      <title>Brown-bag session: Spring Boot</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/12/brownbag-session-spring-boot/</link>
      <pubDate>Wed, 12 Aug 2015 10:44:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/12/brownbag-session-spring-boot/</guid>
      <description>At a client, today we&amp;rsquo;ve done a brown-bag session on Spring Boot: we&amp;rsquo;ve gone through the basics with a sample maven project and its pom file.
We&amp;rsquo;ve seen the Spring Initializr and a live demo, using curl for REST client.</description>
    </item>
    
    <item>
      <title>The Animal Laborans and the Homo Faber</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/10/the-animal-laborans-and-the-homo-faber/</link>
      <pubDate>Mon, 10 Aug 2015 01:19:58 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/10/the-animal-laborans-and-the-homo-faber/</guid>
      <description>I&amp;rsquo;ve found this quote very interesting from the book &amp;ldquo;The Craftsman&amp;rdquo;, by Richard Sennett:
 Animal laborans is, as the name implies, the human being akin to a beast of burden, a drudge condemned to routine. Arendt enriched this image by imagining him or her absorbed in a task that shuts out the world, a state well exemplified by Oppenheimer&amp;rsquo;s feeling that the atomic bomb was a &amp;ldquo;sweet&amp;rdquo; problem, or Eichmann&amp;rsquo;s obsession with making the gas chambers efficient.</description>
    </item>
    
    <item>
      <title>The language was prepared for that</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/10/the-language-was-prepared-for-that/</link>
      <pubDate>Mon, 10 Aug 2015 00:58:33 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/10/the-language-was-prepared-for-that/</guid>
      <description>Many times I&amp;rsquo;ve written this function:
public boolean between(int lowerBound, int n, int upperBound){ return lowerBound &amp;lt;= n &amp;amp;&amp;amp; n &amp;lt;= upperBound; } It may depend on the case, whether it is [], [), (] or (), to use mathematical terms.
When the two comparisons are the same ([] and ()), there is duplication in the comparisons.
Investigating a little bit on this in clojure, I&amp;rsquo;ve found this function:
&amp;lt;= And its clojuredocs: Returns non-nil if nums are in monotonically non-decreasing order, otherwise false.</description>
    </item>
    
    <item>
      <title>Recognizing dependencies</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/08/recognizing-dependencies/</link>
      <pubDate>Sat, 08 Aug 2015 14:11:29 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/08/recognizing-dependencies/</guid>
      <description>From the Chapter 3, Managing Dependencies, from the book Practical Object-Oriented Design in Ruby, by Sandi Metz:
 An object has a dependency when it knows:
 The name of another class. [&amp;hellip;] The name of a message that it intends to send to someone other than self. [&amp;hellip;] The arguments that a message requires. [&amp;hellip;] The order of those arguments. [&amp;hellip;]   If an object knows any of these facts about another object, it has dependencies to the other.</description>
    </item>
    
    <item>
      <title>Multiple return values in a Mockito Stub</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/07/multiple-values-in-a-mockito-stub/</link>
      <pubDate>Fri, 07 Aug 2015 11:31:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/07/multiple-values-in-a-mockito-stub/</guid>
      <description>I&amp;rsquo;ve been asked today how to return multiple return values from a Mockito Spy, effectively using the spy as a Stub, as well.
package com.example.spike; import static org.hamcrest.MatcherAssert.assertThat; import static org.hamcrest.Matchers.is; import static org.mockito.Mockito.spy; import static org.mockito.Mockito.when; import org.junit.Test; import org.mockito.Spy; public class DifferentReturnValues { @Spy private Spike1 spike1 = new Spike1(); @Test public void spike1() { spike1 = spy(spike1); when(spike1.getBool()).thenReturn(false, true); assertThat(spike1.getBool(), is(false)); assertThat(spike1.getBool(), is(true)); assertThat(spike1.getBool(), is(true)); assertThat(spike1.getBool(), is(true)); } private class Spike1 { public boolean getBool() { return true; } } } The key line is:</description>
    </item>
    
    <item>
      <title>Brown-bag session and Dojo: Beginning Clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/05/brown-bag-session-and-dojo-beginning-clojure/</link>
      <pubDate>Wed, 05 Aug 2015 01:14:14 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/05/brown-bag-session-and-dojo-beginning-clojure/</guid>
      <description>At a client, today I&amp;rsquo;ve facilitated a brown-bag session introducing the Clojure language to a group of java programmers.
I&amp;rsquo;ve started hands-on, live coding on a REPL. To make things easier, I&amp;rsquo;ve created a maven project that imports the clojure jar and lets you obtain dependencies from clojars. The repo is here. This repo wouldn&amp;rsquo;t have been possible without the clojure maven plugin, written by Mark Derricutt.
I&amp;rsquo;ve more or less followed this guide</description>
    </item>
    
    <item>
      <title>Resources for Java 9 (beta)</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/03/resources-for-java-9-beta/</link>
      <pubDate>Mon, 03 Aug 2015 01:49:30 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/03/resources-for-java-9-beta/</guid>
      <description>I&amp;rsquo;ve found this list of links for Java 9, while in beta, useful:
 Contents of the new version Java REPL workshop, with useful commands and questions &amp;amp; answers for installing the REPL REPL tutorial PDF Another getting started guide, by JClarity Yet another getting started guide, by Arun Gupta Information on the REPL project, (codenamed Kulla)  </description>
    </item>
    
    <item>
      <title>Self-Study in August 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</link>
      <pubDate>Sun, 02 Aug 2015 21:45:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</guid>
      <description>Humble Object I&amp;rsquo;ve read the Humble Object list of patterns, by Gerard Meszaros, including:
 humble dialog humble executable humble transaction controller humble container adapter  Tags: pattern, gerard-meszaros
How you know I&amp;rsquo;ve reread this small essay by Paul Graham on storing information in our heads, based on the context. On the importance of rereading, to add more contexts to the initial one.
Tags: paul-graham, reread, read
Protected Variation: The Importance of Being Closed I&amp;rsquo;ve read this article by Craig Larman in the magazine IEEE Software &amp;gt; Design.</description>
    </item>
    
    <item>
      <title>Packing your own maven dependencies</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/30/packing-your-own-maven-dependencies/</link>
      <pubDate>Thu, 30 Jul 2015 23:21:18 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/30/packing-your-own-maven-dependencies/</guid>
      <description>Lately, I&amp;rsquo;ve found myself repeating always the same dependencies for my pet projects and katas. Usually, I prefer maven to hold my java dependencies, organized in a java project.
This is how most of them look like:
&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.gmaur.legacycode&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;legacyutils&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hamcrest&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hamcrest-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.3&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.11&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mockito&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mockito-all&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;version&amp;gt;2.0.2-beta&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.</description>
    </item>
    
    <item>
      <title>Tool to Find Duplicate values in Constants</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/30/tool-to-find-duplicate-values-in-constants/</link>
      <pubDate>Thu, 30 Jul 2015 13:42:44 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/30/tool-to-find-duplicate-values-in-constants/</guid>
      <description>Imagine having this java class:
private static class RepeatedConstants { public static final String A = &amp;#34;A&amp;#34;; public static final String A_1 = A; public static final String A_2 = &amp;#34;A&amp;#34;; public static final Integer _3 = 3; public static final Integer THREE = 3; } I wanted to remove the repeated values in the constants, in an automatic way, because the file was big (&amp;gt; 4000 constants). A way of doing this is basing the differences on the values, directly.</description>
    </item>
    
    <item>
      <title>Tip: Use the same Import Order in IntelliJ IDEA as Eclipse&#39;s</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/30/tip-use-the-same-import-order-in-intellij-idea-as-eclipses/</link>
      <pubDate>Thu, 30 Jul 2015 13:22:44 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/30/tip-use-the-same-import-order-in-intellij-idea-as-eclipses/</guid>
      <description>Organize IntelliJ IDEA&amp;rsquo;s import as Eclipse ones:
While working at a client, where everyone is using eclipse, while I&amp;rsquo;m using IntelliJ IDEA, there are subtle formatting differences. One of them is in the order of the imports.
To solve it, see this link</description>
    </item>
    
    <item>
      <title>Exploring Testing with Java 8 Lambdas</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/30/exploring-testing-with-java-8-lambdas/</link>
      <pubDate>Thu, 30 Jul 2015 13:04:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/30/exploring-testing-with-java-8-lambdas/</guid>
      <description>At a client, we were testing a simple feature, but the resulting tests had much subtle repetition:
(source code is here)
@Test public void log_when_sending_greeting_letters() { sut.send(mock(GreetingLetter.class)); verify(logger).sentGreetingLetter(); } @Test public void log_when_sending_love_letters() { sut.send(mock(LoveLetter.class)); verify(logger).sentLoveLetter(); } and the production code:
public class MailSender { private final EventLogger eventLogger; public MailSender (final EventLogger eventLogger) { this.eventLogger = eventLogger; } public void send (final GreetingLetter letter) { // more business logic 	eventLogger.</description>
    </item>
    
    <item>
      <title>Craftsmanship analogy</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/27/craftsmanship-analogy/</link>
      <pubDate>Mon, 27 Jul 2015 00:41:26 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/27/craftsmanship-analogy/</guid>
      <description>I&amp;rsquo;ve found this set of tweets about the craftsmanship analogy by Sarah Mei:</description>
    </item>
    
    <item>
      <title>Practical Object-Oriented Design in Ruby: Chapter 4</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/26/practical-object-oriented-design-in-ruby-chapter-4/</link>
      <pubDate>Sun, 26 Jul 2015 22:40:29 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/26/practical-object-oriented-design-in-ruby-chapter-4/</guid>
      <description>We&amp;rsquo;ve read the fourth chapter from the Practical Object-Oriented Design in Ruby, by Sandi Metz.
These are the concepts and links brought up during the discussion:
 The craftsmanship analogy, as exposed in these tweets Difference between function and method What vs How (also present in the GOOS)  </description>
    </item>
    
    <item>
      <title>Faster site generation for Octopress 2</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/13/faster-site-generation-for-octopress-2/</link>
      <pubDate>Mon, 13 Jul 2015 07:49:23 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/13/faster-site-generation-for-octopress-2/</guid>
      <description>2016-04 update: I&amp;rsquo;ve discovered that the original Rakefile does a similar job. See here
After a while, the generation of the static site using Octopress 2 was starting to be slow (around 2 minutes for 85 posts) for the kind of fast feedback cycle I was expecting.
Inspired by their new features in Octopress 3, one of them being faster site generation, I decided to retrofit my installation with the same feature.</description>
    </item>
    
    <item>
      <title>What defines a dependency</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/13/what-defines-a-dependency/</link>
      <pubDate>Mon, 13 Jul 2015 07:48:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/13/what-defines-a-dependency/</guid>
      <description>A friend and I were arguing about this code (fragment):
public void register (final String userName) { try { registeredUsers.add(new User(userName)); } catch (AlreadyRegisteredUserException e) { resultListener.alreadyRegistered(userName); } } I would have said that resultListener is a dependency as, first, it was injected by the constructor, second, it is necessary for the execution (negative case).
He suggested that:
 being injected through the constructor is usually what happens with dependencies, but does not make it one (i.</description>
    </item>
    
    <item>
      <title>Object Peer Stereotypes</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/13/object-peer-stereotypes/</link>
      <pubDate>Mon, 13 Jul 2015 07:36:14 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/13/object-peer-stereotypes/</guid>
      <description>We categorize an object&amp;rsquo;s peers (loosely) into three types of relationship. An object might have:
 Dependencies: Services that the object requires from its peers so it can perform its responsibilities. The object cannot function without these services. It should not be possible to create the object without them. For example, a graphics package will need something like a screen or canvas to draw on&amp;ndash;it doesn&amp;rsquo;t make sense without one.</description>
    </item>
    
    <item>
      <title>Practical Object-Oriented Design in Ruby: Chapter 2</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/12/practical-object-oriented-design-in-ruby-chapter-2/</link>
      <pubDate>Sun, 12 Jul 2015 00:07:29 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/12/practical-object-oriented-design-in-ruby-chapter-2/</guid>
      <description>We&amp;rsquo;ve read the second chapter from the Practical Object-Oriented Design in Ruby, by Sandi Metz.
These are the concepts and links brought up during the discussion:
 Data Clump at the bliki Refactoring with Loops and Collection Pipelines, indirect link to the article by Martin Fowler When Worse Is Better: Incrementally Escaping Local Maxima, indirect link to the article by Kent Beck Getting It Right by Betting on Wrong, indirect link to an article by Sandi Metz  </description>
    </item>
    
    <item>
      <title>Quote: Organizing Code to Allow for Easy Changes</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/08/quote-organizing-code-to-allow-for-easy-changes/</link>
      <pubDate>Wed, 08 Jul 2015 02:41:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/08/quote-organizing-code-to-allow-for-easy-changes/</guid>
      <description>Organizing Code to Allow for Easy Changes  Asserting that code should be easy to change is akin to stating that children should be polite; the statement is impossible to disagree with yet it in no way helps a parent raise an agreeable child. The idea of easy is too broad; you need concrete definitions of easiness and specific criteria by which to judge code. If you define easy to change as</description>
    </item>
    
    <item>
      <title>Tip: massively reverting local changes</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/08/tip-massively-reverting-local-changes/</link>
      <pubDate>Wed, 08 Jul 2015 02:40:24 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/08/tip-massively-reverting-local-changes/</guid>
      <description>I was changing a massive amount of files (&amp;gt;1000) for a repeated code. The search and replace query was not too exact and it broke many tests in the system. For that, I preferred reverting those tests.
Here&amp;rsquo;s how to do it automatically:
Copy all the failing tests to a text editor:
Input:
testSearchXMLDocument(io.company.controller.dms.DocumentControllerTest) testCreateXMLDocument(io.company.controller.dms.DocumentControllerTest) testUpdateXFPageMetadata(io.company.controller.dms.DocumentControllerTest) testCreateDocumentCrop(io.company.controller.dms.DocumentControllerTest) testUpdateCropMetadata(io.company.controller.dms.DocumentControllerTest) testDeleteDocument(io.company.controller.dms.DocumentControllerTest) testUpdateXmlDocumentMetadata(io.company.controller.dms.DocumentControllerTest) testUpdateXML(io.company.controller.dms.DocumentControllerTest) testSearchXFPage(io.company.controller.dms.DocumentControllerTest) testCreateXFPage(io.company.controller.dms.DocumentControllerTest) testUpdatePage(io.company.controller.dms.DocumentControllerTest) testSearchCrop(io.company.controller.dms.DocumentControllerTest) testUpdateCrop(io.company.controller.dms.DocumentControllerTest) testMoveDocument(io.company.controller.dms.DocumentControllerTest) testGetDocument(io.company.controller.dms.DocumentControllerTest) regex:
(tested in Sublime 3, build 3083, Windows 64)</description>
    </item>
    
    <item>
      <title>Tip: committing to the repo file by file</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/08/tip-committing-to-the-repo-file-by-file/</link>
      <pubDate>Wed, 08 Jul 2015 02:37:08 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/08/tip-committing-to-the-repo-file-by-file/</guid>
      <description>I was prefer committing to the repo with commits that are as small as possible as long as it makes sense. It makes it much easier to rever the changes.
This is why I have some scripts to commit all the changes, even with the same message. This is one of them:
for f in $(git status -s |grep &amp;#34;^M&amp;#34;|awk &amp;#39;{print $2}&amp;#39;); do git add $f git commit -m &amp;#34;generic commit for all files&amp;#34; done </description>
    </item>
    
    <item>
      <title>Paper: Fundamental concepts on programming languages</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/06/paper-fundamental-concepts-on-programming-languages/</link>
      <pubDate>Mon, 06 Jul 2015 07:48:35 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/06/paper-fundamental-concepts-on-programming-languages/</guid>
      <description>Note: all quotes on this post come from this paper: Strachey, C. Fundamental Concepts in Programming Languages. Published in Higher-Order and Symbolic Computation, 13, 11–49, 2000.
Contents This paper starts slow, from the mathematical and philosophical point of view, until it gets to the basic concepts on the fundamental concepts:
 Assignment command L-Value and R-Value Definitions Names Numerals Conceptual models: an explanation about the relationship between the code, the memory store and the abstract concepts  Later, it gets more in depth to the conceptual constructs, where most of the content is explained and contains:</description>
    </item>
    
    <item>
      <title>Iterate with index in clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/04/iterate-with-index-in-clojure/</link>
      <pubDate>Sat, 04 Jul 2015 14:34:37 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/04/iterate-with-index-in-clojure/</guid>
      <description>Scenario: iterate a sequence (seq) with its index
The lines have an implicit line number (starting by 1, in most editors):
[1] line1 [2] line2 [3] hello When you read it from file to a variable, it is converted to:
(&amp;#34;line1&amp;#34; &amp;#34;line2&amp;#34; &amp;#34;hello&amp;#34;) This implicit line number value is not present, therefore you need to assign them one.
In ruby, you have this construct:
array = [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;] array.each_with_index {|val, index| puts &amp;#34;#{val}=&amp;gt; #{index}&amp;#34; } Source</description>
    </item>
    
    <item>
      <title>Brown-bag session: refactoring legacy code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/01/brownbag-session-refactoring-legacy-code/</link>
      <pubDate>Wed, 01 Jul 2015 13:18:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/01/brownbag-session-refactoring-legacy-code/</guid>
      <description>Today I have done a brown bag session about refactoring legacy code. It includes:
 legacy code definition. There is no agreement about this in the team. the legacy code change algorithm (source is Feathers, Working effectively with legacy code). Plus an example about it. working with legacy code experience with it.  The slides are available here (PDF format)
We also did a practical session, whose experience report is here</description>
    </item>
    
    <item>
      <title>Self-study in July 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/</link>
      <pubDate>Wed, 01 Jul 2015 01:08:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/</guid>
      <description>I&amp;rsquo;ve grouped all small posts related to the self-study from July 2015 into a single post
Clojure made simple I&amp;rsquo;ve watched this talk by Rich Hickey at the Java One. It references the talk Easy made simple
 polymorphism without inheritance; single dispatch on the first parameter  Productive pair programming I&amp;rsquo;ve read this article about pair programming, using the driver &amp;amp; copilot technique, written by Carlos Blé
Building Automated REST APIs with Python Investigating QA automation for REST APIs, I&amp;rsquo;ve read these slides about it</description>
    </item>
    
    <item>
      <title>Books read in 2015Q2</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/30/books-read-in-2015q2/</link>
      <pubDate>Tue, 30 Jun 2015 12:49:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/30/books-read-in-2015q2/</guid>
      <description>Books I&amp;rsquo;ve read this quarter Q2 on 2015:
 Flow by Mihaly Csikszentmihalyi. Blog posts under the tag flow Growing Object-Oriented Software Guided by Tests by Steve Freeman and Nat Pryce. Blog posts under the tag goos. Read in the &amp;lsquo;@deAprendices&amp;rsquo;s reading club&amp;rsquo;. TDD in Java, by Viktor Farcic and Alex García. I&amp;rsquo;ve reviewed this book.  Books started, not yet finished (WIP):
 The Well-Grounded Java Developer by Benjamin J.</description>
    </item>
    
    <item>
      <title>Practical Object-Oriented Design in Ruby: Chapter 1</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/29/practical-object-oriented-design-in-ruby-chapter-1/</link>
      <pubDate>Mon, 29 Jun 2015 00:07:29 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/29/practical-object-oriented-design-in-ruby-chapter-1/</guid>
      <description>We&amp;rsquo;ve read the first chapter from the Practical Object-Oriented Design in Ruby, by Sandi Metz.
These are the concepts and links brought up during the discussion:
 Walking on water and developing software from a specification are easy if both are frozen.
Edward V Berard, source is Wikiquote
 Two cited papers on metrics for design:
 A metrics suite for object oriented design by Chidamber and Kemerer A validation of object-oriented design metrics as quality indicators by Basili, Briand and Melo  The video for the &amp;lsquo;churn&amp;rsquo; as a measure:</description>
    </item>
    
    <item>
      <title>Brown-bag session: Refactoring legacy code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</link>
      <pubDate>Tue, 23 Jun 2015 19:19:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</guid>
      <description>Today I have facilitated a brown bag session about refactoring legacy code applications, as this is the case with one of the applications we maintain and add new features to.
The contents of the session:
 Briefly exposing the problem to the team, me taking the role of the Product Owner (PO) Ask the dev team to add an easy feature Do it without tests, as it was so simple that they thought they could do it (using mob programming) Ask if they were satisfied by the patch / fix.</description>
    </item>
    
    <item>
      <title>Brown-bag session: docker</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/16/brown-bag-session-docker/</link>
      <pubDate>Tue, 16 Jun 2015 18:52:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/16/brown-bag-session-docker/</guid>
      <description>Today we have done a brown bag session about Docker. One of the team members explained to us the latest news, topics and how tos, including:
 the difference between a container and an image diffing image contents AUFS (Another Union FS) persistent vs non-persistent (volatile) filesystems running CMD and other commands on the instance problems of running with permission = root (or its group) downsides of it how to compare it with a virtual machine  </description>
    </item>
    
    <item>
      <title>Types of defects</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/14/types-of-defects/</link>
      <pubDate>Sun, 14 Jun 2015 16:16:51 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/14/types-of-defects/</guid>
      <description>Some time ago, while researching types of defects and the cost of fixing them1, I stumbled upon this:
 Years ago I worked with a bunch of economists in the US Federal Government - they categorized &amp;lsquo;bugs&amp;rsquo; in their memos into three types:
  Typos: Simple misspellings of words. Infrequent, easy to detect, easy to fix.
  Writos: Incoherent sentences. More frequent, hard to detect, harder to fix.</description>
    </item>
    
    <item>
      <title>Brown-bag session: Refactoring</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/11/brownbag-session-refactoring/</link>
      <pubDate>Thu, 11 Jun 2015 20:22:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/11/brownbag-session-refactoring/</guid>
      <description>At a client, today we&amp;rsquo;ve done a brown-bag session on refactoring: we&amp;rsquo;ve gone through and a live demo, including refactoring a core piece of our code.
We&amp;rsquo;ve done some mob programming to help identify some smells and how to fix them.</description>
    </item>
    
    <item>
      <title>Self-study in June 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/</link>
      <pubDate>Wed, 03 Jun 2015 13:13:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/</guid>
      <description>Update: I&amp;rsquo;ve grouped all small posts related to the self-study from June 2015 into a single post
Le monitoring de flux par l’exemple I&amp;rsquo;ve read this article about monitoring, in the way of &amp;ldquo;by example&amp;rdquo;, by Cédrick Lunven and Julien Kirch (French)
The First Micro-service Architecture I&amp;rsquo;ve read this article about microservices and how they were implemented many years ago by Robert C. Martin
How I Learned to Balance My Life With Remote Work I&amp;rsquo;ve read this article about balancing life and work, either physical or remote by Michael Erasmus</description>
    </item>
    
    <item>
      <title>Internal training: BPM: Process and tools for developers</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/02/internal-training-bpm-tool-and-process/</link>
      <pubDate>Tue, 02 Jun 2015 22:20:09 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/02/internal-training-bpm-tool-and-process/</guid>
      <description>At a client, I&amp;rsquo;ve presented today an internal training on &amp;ldquo;BPM: Process and tools for developers&amp;rdquo;
In it, we have introduced the BPM concept and the main ideas in Activiti BPM.
Also techniques for hotswapping processes, tips and how-tos.</description>
    </item>
    
    <item>
      <title>Category: Poodr</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/01/category-poodr/</link>
      <pubDate>Mon, 01 Jun 2015 07:09:43 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/01/category-poodr/</guid>
      <description>This category is mainly dedicated to anything related or included in the book &amp;lsquo;Practical Object-Oriented Design in Ruby&amp;rsquo;, by Sandi Metz
Note: This has been created a posteriori with a previous date</description>
    </item>
    
    <item>
      <title>Internal training: QA &amp;amp; how to test</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/18/internal-training-qa-and-how-to-test/</link>
      <pubDate>Mon, 18 May 2015 22:20:09 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/18/internal-training-qa-and-how-to-test/</guid>
      <description>At a client, we&amp;rsquo;ve done today an internal training on &amp;ldquo;QA &amp;amp; how to test&amp;rdquo;. In it, the most skilled person with the QA role in the dev team has explained to us some techniques and concepts for testing
My notes Verification vs validation: building the product right vs building the right product.
Principles Extracted from ISTQB:
 testing shows presence of defects exhaustive testing is impossible early testing is better than later testing defect clustering: areas with bigger defect ratio or more critical, etc should be tested more thoroughly pesticide paradox testing is context-dependent absence of errors fallacy: the absence of defects does not imply perfect software.</description>
    </item>
    
    <item>
      <title>Software gardening manifesto</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/17/software-gardening-manifesto/</link>
      <pubDate>Sun, 17 May 2015 12:41:18 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/17/software-gardening-manifesto/</guid>
      <description>A friend sent this Software Gardening Manifesto to me.
This is related to the idea of growing software vs building it, greatly exemplified by the Growing Object-Oriented Software Guided by Tests book (category here).</description>
    </item>
    
    <item>
      <title>Paper: TDD in industrial teams</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams/</link>
      <pubDate>Tue, 12 May 2015 00:02:44 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams/</guid>
      <description>I&amp;rsquo;ve read this paper by Nagappan, Maximilien, Bhat and Williams on the cost, advantages, pitfalls of doing TDD in industrial teams (private companies who create software).
My notes Abstract:
 little empirical evidence supports or refutes the utility of this practice in an industrial context
  they seem to be talking about inside-out tdd as in chapter 2 (page 291), they talk about small units and then integrating them in a bigger context  Benefits taken from chapter 2 (page 292)</description>
    </item>
    
    <item>
      <title>Talk: Software is eating the world</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/10/talk-software-is-eating-the-world/</link>
      <pubDate>Sun, 10 May 2015 21:00:52 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/10/talk-software-is-eating-the-world/</guid>
      <description>I&amp;rsquo;ve watched this talk by Erik Meijer
My notes   Agile!: The Good, the Hype and the Ugly
  The hacker way
 code always wins vs manager always wins source: http://www.wired.com/2012/02/zuck-letter/    we&amp;rsquo;re doing maths =&amp;gt; we&amp;rsquo;re building a proof
  reinforcement learning
 agent is the company    related to &amp;ldquo;build, measure, learn&amp;rdquo; by Eric Ries (the lean startup)
  Feedback systems  Open (no) feedback system, such as timed sprinklers Closed feedback system Output only system  Why everything is software  Examples of everything is software Software is eating the world Even hardware is modeled as software  Modeling as a Finite State Machine (FSM)  There&amp;rsquo;s memory in the feedback loop.</description>
    </item>
    
    <item>
      <title>Self-study in May 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/</link>
      <pubDate>Sat, 09 May 2015 16:41:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/</guid>
      <description>Update: I&amp;rsquo;ve grouped all small posts related to the self-study from May 2015 into a single post
Programmer passion considered harmful I&amp;rsquo;ve read this article on why programmer passion could be negative. The title is similar to a paper by Dijkstra.
Software Craftsmanship: Are Bootcamps Enough? I&amp;rsquo;ve read this article on software craftsmanship, development bootcamps and passion by Ken Auer
Improve your development environments with virtualization I have seen this video: Improve your development environments with virtualization by Luke Sneeringer.</description>
    </item>
    
    <item>
      <title>What versus How</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/06/what-versus-how/</link>
      <pubDate>Wed, 06 May 2015 07:15:08 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/06/what-versus-how/</guid>
      <description>After reading the GOOS1, the more and more I get this feeling of what vs how:
 Information hiding The total simpler than the sum of the parts Extracting a concept so you can think about this. Makes you find better names:  test name variable name method name interface / protocol name    I also got this feeling when reading Clean Code. But with this other book the smell is much harder, stronger.</description>
    </item>
    
    <item>
      <title>Internal training: Testing is hard - just do it</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it/</link>
      <pubDate>Tue, 05 May 2015 23:00:17 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it/</guid>
      <description>At a client, last week I&amp;rsquo;ve organized an internal training, in the form of a discussion about this article: Testing is hard - just do it
Our thoughts  When a bug is found, prove it exists with a test
 This immediately reduces defect rate: the same regression cannot be introduced again
 fix a bug a second time
 If fixing a bug (having defects in your code) was &amp;lsquo;waste&amp;rsquo;, as defined by lean methodologies, it also is wast fixing it for the following times</description>
    </item>
    
    <item>
      <title>Video: Nothing is something</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/04/video-nothing-is-something/</link>
      <pubDate>Mon, 04 May 2015 07:43:14 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/04/video-nothing-is-something/</guid>
      <description>I have seen this video: [Nothing is something][video] by [Sandi Metz][sandimetz], as I saw it recommended [here][recommendation]
In the video, she talks programming in this fashion: (it is a stack, not an unordered list)
 Abstraction seeking Message centric Condition Averse Smalltalk Infected   Not here to change the language but change you
 This is a pattern I&amp;rsquo;ve also heard from [Alvaro Videla][old_sound], where he said that other, more powerful languages can change your mind and help you bring some of those concepts to your own language.</description>
    </item>
    
    <item>
      <title>Internal training: Introduction to AngularJs</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/30/internal-training-introduction-to-angularjs/</link>
      <pubDate>Thu, 30 Apr 2015 20:22:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/30/internal-training-introduction-to-angularjs/</guid>
      <description>At a client, today I&amp;rsquo;ve done an internal training on angular js: we&amp;rsquo;ve prepared some slides and a live demo.
The repository with all the information can be found here.
Apparently, the training has been a success, given that most of the talent in the team is backend focused (as opposed to full-stack) and changing from java to javascript is not straight-forward.
Note: this post has been created a posteriori, dated with the correct training timestamp.</description>
    </item>
    
    <item>
      <title>Whose fault is this?</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/25/whose-fault-is-this/</link>
      <pubDate>Sat, 25 Apr 2015 14:10:31 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/25/whose-fault-is-this/</guid>
      <description>In the prologue of the book, while thanking everyone that has made the book possible:
 [&amp;hellip;], none of the people mentioned here would be responsible for any inaccuracy that might exist in the book, as this responsibility is exclusively mine
Mihaly Csikszentmihalyi (translated)1, prologue of &amp;ldquo;Flow&amp;rdquo;
 (More posts on this same book, here)
This connects with what Dan North said in the Craft Conf about this idea of the &amp;ldquo;I&amp;rsquo;m the only one in the company producing good quality work, the rest are not doing the same&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>How I read Apprenticeship Patterns</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/25/how-i-read-apprenticeship-patterns/</link>
      <pubDate>Sat, 25 Apr 2015 13:49:01 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/25/how-i-read-apprenticeship-patterns/</guid>
      <description>At the Craft Conf 2015 I saw someone with the book Apprenticeship Patterns by Dave Hoover and Adewale Oshineye and asked them about the book. After praising the contents, they asked me how to approach the book.
I recalled reading it non-sequentially, and explained it to them:
 Read the introduction, preface, etc first When you get to the patterns, pick one at random 10: Read it and navigate through the see also.</description>
    </item>
    
    <item>
      <title>Demand for TDD and Refactor</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/25/demand-for-tdd-and-refactor/</link>
      <pubDate>Sat, 25 Apr 2015 13:28:20 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/25/demand-for-tdd-and-refactor/</guid>
      <description>When I went to the Jason Gorman&amp;rsquo;s TDD workshop (experience report here), he said something interesting regarding refactor and TDD:
 In job offers / advertisements, TDD is much more in demand than refactor. But the latter is included in the former as an integral part.
Jason Gorman
 I agree with the second thought: you cannot properly do TDD without refactoring, as it is an integral part; also the third phase.</description>
    </item>
    
    <item>
      <title>Talks I have attended at the Craft Conf 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/25/talks-i-have-attended-at-the-craft-conf-2015/</link>
      <pubDate>Sat, 25 Apr 2015 12:25:09 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/25/talks-i-have-attended-at-the-craft-conf-2015/</guid>
      <description>These are the talks I&amp;rsquo;ve attended at the Craft Conf 2015:
Thursday 23th  Opening keynote by Dan North and Jessica Kerr Writing testable code - A functional programming point of view, by Alvaro Videla Coding Culture, by Sven Peters OnConnectionLost: the life of an offline web application, by Stefanie Grewenig and Johannes Thönes Concurrency: It&amp;rsquo;s harder (and easier) than you think, by Paul Butcher Testing and Integration (the remix), by Inés Sombra Beyond Features: Rethinking agile planning and tracking, by Dan North Closing keynote by Alf Rehn  Friday 24th  Opening keynote: The New New Software development game: Containers, Microservices and Contract tests, by Mary Poppendieck Apprenticeship patterns, revisited, by Dave Hoover Interaction Driven Design, by Sandro Mancuso The hidden dimension of refactoring, by Michael Feathers Why is an API like a puppy, by Adewale Oshineye Microservice antipatterns, by Tammer Saleh  I couldn&amp;rsquo;t attend the last talk nor the keynote as I had to get to the airport</description>
    </item>
    
    <item>
      <title>What legacy code is about</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/21/what-legacy-code-is-about/</link>
      <pubDate>Tue, 21 Apr 2015 22:09:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/21/what-legacy-code-is-about/</guid>
      <description>In his book Working effectively with legacy code, Michael Feathers describes:
 [&amp;hellip;] legacy code as code without tests. It is a good working definition, and it points to a solution [&amp;hellip;]
M Feathers, in the preface of Working effectively with legacy code
 I really like this definition. It is objective and measurable. But this is also a downside. Let&amp;rsquo;s take any concurrent code, for example: you can achieve 100% coverage on a single thread and the program could have defects when executed in parallel.</description>
    </item>
    
    <item>
      <title>Annotations and Aspects in Java</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/21/annotations-and-aspects-in-java/</link>
      <pubDate>Tue, 21 Apr 2015 07:23:23 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/21/annotations-and-aspects-in-java/</guid>
      <description>I&amp;rsquo;ve written a sample project with an annotation and an aspect to intercept it and decorate it.
The code provides a way of doing try|catch, specifying an exception to be caught.
The source code is available here
In the process This has taken me approximately one hour to prepare the spike and half more to refactor and massage a bit.
If you want to see the raw details, the refactor has been committed step by step (the spike hasn&amp;rsquo;t).</description>
    </item>
    
    <item>
      <title>Logging is a feature</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/19/logging-is-a-feature/</link>
      <pubDate>Sun, 19 Apr 2015 23:43:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/19/logging-is-a-feature/</guid>
      <description>At a client, we&amp;rsquo;re facing this challenge: we cannot access production logs, as we don&amp;rsquo;t have access to production environments. The solution we&amp;rsquo;ve chose is to implement the logging component as a layer on top of Splunk.
This formatter layer &amp;ndash;per component&amp;ndash; accesses a generic layer &amp;ndash;for the whole company&amp;ndash; that accesses splunk. In this manner, it is very easy to reuse the splunk connection and configuration and inject mocks. Also helps with the local environment: you always log to console (even if in production you don&amp;rsquo;t have access to it) and can disable this in local, not needing a local splunk installation.</description>
    </item>
    
    <item>
      <title>Talk: Simplicity matters</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/18/talk-simplicity-matters/</link>
      <pubDate>Sat, 18 Apr 2015 14:44:06 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/18/talk-simplicity-matters/</guid>
      <description>I&amp;rsquo;ve seen this video by Rich Hickey: &amp;ldquo;Simplicity matters&amp;rdquo;, taken from Manuel Rivero&amp;rsquo;s google plus&#39; site
here are my notes:
 the software is the elephant do more, do it differently, do it better complexity of the elephant is going to dominate what you can do your ability to reason about your program is critical design is about pulling things apart become familiar by learning, trying &amp;ldquo;We can be creating the exact same programs out of significantly simpler components&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>The Guardian of the Source</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/17/the-guardian-of-the-source/</link>
      <pubDate>Fri, 17 Apr 2015 22:01:48 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/17/the-guardian-of-the-source/</guid>
      <description>Overheard today at the office, while they were discussing the approval of a pull request:
 [Pull request reviewer] - I&amp;rsquo;m sorry, can&amp;rsquo;t approve this: I don&amp;rsquo;t really agree with this design. Isn&amp;rsquo;t there an alternative for this?
[Pull request author] - [redacted], of course you don&amp;rsquo;t, you&amp;rsquo;re the guardian of the source
[PR reviewer] - Well, sometimes I&amp;rsquo;m a bit picky about introducing bad code into our codebase.
 This has made me think about Gandalf blocking the path of Balrog Demon, shouting &amp;ldquo;[you shall not pass][you-shall-not-pass-meme]&amp;rdquo; while on top of the bridge.</description>
    </item>
    
    <item>
      <title>Inserting clojure code in octopress</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/14/inserting-clojure-code-in-octopress/</link>
      <pubDate>Tue, 14 Apr 2015 23:48:27 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/14/inserting-clojure-code-in-octopress/</guid>
      <description>Inserting this code in the blog:
```clojure (defn all-access[k] (let [{:keys [a b] :as k}] (do a) (do (:b k)))) ```  the octopress processor throws the error:
Error: Pygments can&#39;t parse unknown language: clojure Error: Run jekyll build --trace for more information.  A solution would be to include it as lisp code:
```lisp (defn all-access[k] (let [{:keys [a b] :as k}] (do a) (do (:b k)))) ```  this is an example:</description>
    </item>
    
    <item>
      <title>Destructuring as a refactor in Clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure/</link>
      <pubDate>Tue, 14 Apr 2015 23:36:23 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure/</guid>
      <description>Manuel has taught us today about the default value while destructuring:
 The following example illustrates the use of an :as directive to bind a local with the entire map.
 user=&amp;gt; (def point {:x 5 :y 7}) #&#39;user/point (let [{:keys [x y] :as the-point} point] (println &amp;quot;x:&amp;quot; x &amp;quot;y:&amp;quot; y &amp;quot;point:&amp;quot; the-point)) x: 5 y: 7 point: {:x 5, :y 7}  We&amp;rsquo;ve now seen the :as directive used for both vectors and maps.</description>
    </item>
    
    <item>
      <title>Redesign as a new TDD phase</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/13/redesign-as-a-new-tdd-phase/</link>
      <pubDate>Mon, 13 Apr 2015 22:00:45 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/13/redesign-as-a-new-tdd-phase/</guid>
      <description>In the last TDD workshop (experience report here), a conversation with Gary McLean Hall introduced to me this new concept of &amp;ldquo;Redesign&amp;rdquo; as a TDD phase.
Concept As Gary introduced it to me1, it is a phase that might appear after refactor.
It is about changing the outside design without changing the expected behavior. I thought this was also included in the refactor phase.
How I do redesign I usually do this &amp;ldquo;changing of the outside design&amp;rdquo; by applying a series of refactors 2 to the production code but not changing the test code; using a bridge / adapter to get to the new API from the old one.</description>
    </item>
    
    <item>
      <title>Experience report: Test-driven development intensive, by Jason Gorman</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/12/jason-gorman-tdd-intensive-workshop/</link>
      <pubDate>Sun, 12 Apr 2015 20:13:45 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/12/jason-gorman-tdd-intensive-workshop/</guid>
      <description>This is an experience report on Jason Gorman&amp;rsquo;s &amp;ldquo;Test-driven development intensive workshop&amp;rdquo; on the April 11th, 2015
I attended this training in the Greenfell housing &amp;amp; training in South Wimbledon, London SW19 1JZ. The training spanned from 10:00 to 17:00 with a half an hour for lunch plus three or four 10-15 minute pauses. (7 - ,5 - 4 * 12/60 = ~5.7hours = 5 hours 45 minutes)
Introduction There were 23 of us, including me.</description>
    </item>
    
    <item>
      <title>Trimming your plants</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/02/trimming-your-plants/</link>
      <pubDate>Thu, 02 Apr 2015 23:13:45 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/02/trimming-your-plants/</guid>
      <description>This post belongs to the growing-software series
Imagine this situation: the code works. You are at this stage
Disregarding the tests, the production code is complete. Could be better, but it is ready if you are in a hurry.
Now, picture your test as a plant in a plant pot: it might be healthy on the outside (external quality) but how are their roots (internal quality)?
Do you imagine them in an ordered fashion or in a jungle of roots?</description>
    </item>
    
    <item>
      <title>Category: Flow</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/01/category-flow/</link>
      <pubDate>Wed, 01 Apr 2015 07:09:43 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/01/category-flow/</guid>
      <description>This category is mainly dedicated to anything related or included in the book &amp;lsquo;Flow: The Psychology of Optimal Experience&amp;rsquo;, written by Mihaly Csikszentmihalyi
Note: This has been created a posteriori with a previous date</description>
    </item>
    
    <item>
      <title>TDD microexercise: Tire pressure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/31/tdd-microexercise-tire-pressure/</link>
      <pubDate>Tue, 31 Mar 2015 23:13:45 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/31/tdd-microexercise-tire-pressure/</guid>
      <description>Yesterday, Manuel Rivero and I facilitated a workshop using the tire pressure TDD microexercise. (More microexercises can be found in this category, also here)
We scheduled the session as follows:
 10 minutes introduction to the exercise 10 minutes to download the code and take a first look 10 minutes explanation about the exercise, what the problem is, etc 30 minutes for the attendees to explore the solution (on their own) 10 minutes for commenting the explored solutions, comments about it 40 minutes of prepared kata format 10 minutes of final explanations, questions and answers (Q&amp;amp;A)  Total: 120 minutes or two hours, approximately</description>
    </item>
    
    <item>
      <title>Books read in 2015Q1</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/31/books-read-in-2015q1/</link>
      <pubDate>Tue, 31 Mar 2015 12:49:49 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/31/books-read-in-2015q1/</guid>
      <description>Books I&amp;rsquo;ve read this quarter Q1 on 2015, as inspired by Manuel, on this post:
 Fifty Quick Ideas to Improve your User Stories, by Gojko Adzic and David Evans Fun retrospectives by Taina Caetano and Paulo Caroli Implementation patterns by Kent Beck Clean code by Robert C. Martin; again  Books started, not yet finished (WIP):
 The Well-Grounded Java Developer, by Benjamin J. Evans and Martijn Verburg Refactoring, by Martin Fowler, (with Kent Beck, John Brant, William Opdyke, and Don Roberts) Growing Object-Oriented Software Guided by Tests, by Steve Freeman and Nat Pryce Flow, by Mihaly Csikszentmihalyi  (Note: I&amp;rsquo;ve written this list a posteriori, in May 2015)</description>
    </item>
    
    <item>
      <title>Growing software according to the season</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/29/growing-software-according-to-the-season/</link>
      <pubDate>Sun, 29 Mar 2015 18:13:45 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/29/growing-software-according-to-the-season/</guid>
      <description>This is the first post is of the growing-software series
A few weeks ago, while reading the book Growing Object-Oriented Software Guided by Tests by Nat Pryce and Steve Freeman, I finally understood why the software needs to be grown and not built:
A few days ago, I was thinking about new inspiration sources and this came to my mind:
In agriculture, at least in this latitude, there are different seasons.</description>
    </item>
    
    <item>
      <title>Meetup cross-pollination</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/25/meetup-cross-pollination/</link>
      <pubDate>Wed, 25 Mar 2015 23:50:23 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/25/meetup-cross-pollination/</guid>
      <description>Adrian Bolboaca has written a very interesting post on being a community bumble-bee. (Source can be found here)
He goes on to explain how he has visited many meetups all over Europe and the big chunk of information and experience he has learned from them.
He tells us about a selfish approach to organizing meetups:
 When one teaches two learn
(apparently attributed to) Robert Heinlein, source
 I share this feeling of learning while teaching, as long as you reflect and analyze (e.</description>
    </item>
    
    <item>
      <title>Open Space: Code reviews</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews/</link>
      <pubDate>Mon, 16 Mar 2015 22:44:42 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews/</guid>
      <description>Today we&amp;rsquo;ve discussed about code reviews on this open space
Notes These are my notes, in no particular order:
 reduce information silos all around the company, as everyone [technical] can participate in these events raise the &amp;ldquo;just arrived&amp;rdquo; people&amp;rsquo;s knowledge [Difficult to hit the ground up and running, but these code review sessions can help] invest one person as &amp;lsquo;sheriff&amp;rsquo; for the sprint: they will take care of static analysis tools (such as sonar) and continuous integration (CI; such as jenkins).</description>
    </item>
    
    <item>
      <title>TDD Meetup Retrospective</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/16/tdd-meetup-retrospective/</link>
      <pubDate>Mon, 16 Mar 2015 05:42:44 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/16/tdd-meetup-retrospective/</guid>
      <description>Yesterday we organized a TDD meetup at the FIB - Barcelona School of Informatics UPC, within Barcelona Software Craftsmanship sponsored by the Junior Empresa d&amp;rsquo;Informàtica. The meetup started at 9:00 until 18:00, with a one-hour pause in the middle.
Where  Please make sure the meetup space (e.g., classroom, meeting room) is available and ready to be used at least 15 minutes before the meetup starts The organizer and the event host should be there in advance to prepare the physical environment (chairs, wifi, beamer, etc) as well as mentally: getting comfortable with the space, loading the presentation, prepare the speaker notes, etc.</description>
    </item>
    
    <item>
      <title>Maven module Base for cucumber in java</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/10/maven-module-base-for-cucumber-in-java/</link>
      <pubDate>Tue, 10 Mar 2015 07:24:38 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/10/maven-module-base-for-cucumber-in-java/</guid>
      <description>I&amp;rsquo;ve built a small maven module, to be used directly with cucumber. You can fork the repository here
This is the setup I&amp;rsquo;ve proposed for the meetup &amp;ldquo;BDD Cucumber kata (gherkin + code)&amp;quot;. Will see if this code is successfully used by the ~40 participants in a couple of weeks
(Quote from the README.md):
This maven project has been possible due to Thomas Sundberg and this post
Should you want to, there&amp;rsquo;s a tweet to thank him the effort: [tweet intent here](https://twitter.</description>
    </item>
    
    <item>
      <title>Brown-bag session: maven</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/06/brown-bag-session-maven/</link>
      <pubDate>Fri, 06 Mar 2015 22:18:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/06/brown-bag-session-maven/</guid>
      <description>Yesterday we did a training about the maven tool. One of the team members explained to us some topics including:
 lifecycles profiles and how to create one  slowTests for integration tests (this client only) downloadJavadoc downloadSources   convention over configuration scopes of the dependencies (test, runtime, compile, provided) tricks about the tool:  order of the dependencies (especially junit, hamcrest)   plugins and how to build one destination folders  target, classes, test-classes, etc    Note: this post was created a posteriori, with the original date</description>
    </item>
    
    <item>
      <title>Kata: Mars Rover in Clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/05/kata-mars-rover-in-clojure/</link>
      <pubDate>Thu, 05 Mar 2015 00:33:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/05/kata-mars-rover-in-clojure/</guid>
      <description>Yesterday at the clojure meetup we1 did the mars rover in clojure and today I&amp;rsquo;ve tried my hand at it again. Original, from the three of us here and my results here
  Jorge Ávila, Jesús Díez and I &amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>Mob programming String calculator kata</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/03/mob-programming-string-calculator-kata/</link>
      <pubDate>Tue, 03 Mar 2015 04:46:48 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/03/mob-programming-string-calculator-kata/</guid>
      <description>Last Friday we did a kata1 using a projector the string calculator 2 using pair programming, TDD and some mob-programming for the last refactoring.
We used a projector (beamer) so everyone could see it. I tried to take really small baby steps but the adding part was done in ~6 cycles3
We&amp;rsquo;ve all learnt about shotcuts, live user templates for the IDE 4, TDD methodology, other ways of tackling the problem, how to refactor as a group, clean code, etc</description>
    </item>
    
    <item>
      <title>The purple wire</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/24/the-purple-wire/</link>
      <pubDate>Tue, 24 Feb 2015 20:57:43 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/24/the-purple-wire/</guid>
      <description>A quote from the Mythical Man-Month:
 Chapter 13: The Whole and the Parts
[&amp;hellip;] In System/360 engineering models, one saw occasional strands of purple wire among the routine yellow wires. When a bug was found, two things were done. A quick fix was devised and installed on the system, so testing could proceed. This change was put on in purple wire, so it stuck out like a sore thumb. It was entered in the log.</description>
    </item>
    
    <item>
      <title>kata: persistent linked list</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/23/kata-persistent-linked-list/</link>
      <pubDate>Mon, 23 Feb 2015 23:19:57 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/23/kata-persistent-linked-list/</guid>
      <description>I&amp;rsquo;ve just written a new kata, about a persistent linked list.
It is using the same project as for the linked list kata.
For now, only the add, contains and size methods are implemented.
If you have any comments or code review, please let me know</description>
    </item>
    
    <item>
      <title>Polishing your tools</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/22/polishing-your-tools/</link>
      <pubDate>Sun, 22 Feb 2015 09:30:20 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/22/polishing-your-tools/</guid>
      <description>The toolsmith Frederick P Brooks, Jr quoted / explained a theory explained by Mills and Baker1 around 1971-72:
 Chapter 3: The Surgical Team
[&amp;hellip;] but the team be organized like a surgical team rather than a hog-butchering team. That is, instead of each member cutting away on the problem, one does the cutting and the others give him[her] every support that will enhance his[her] effectiveness and productivity.
[&amp;hellip;]
Brooks, F.</description>
    </item>
    
    <item>
      <title>A legacy code introduction</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/21/a-legacy-code-introduction/</link>
      <pubDate>Sat, 21 Feb 2015 20:05:46 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/21/a-legacy-code-introduction/</guid>
      <description>This is one of the best legacy code introductions I&amp;rsquo;ve seen:
 The Grand Redesign in the Sky
Eventually the team rebels. They inform management that they cannot continue to develop in this odious code base. They demand a redesign. Management does not want to expend the resources on a whole new redesign of the project, but they cannot deny that productivity is terrible. Eventually they bend to the demands of the developers and authorize the grand redesign in the sky.</description>
    </item>
    
    <item>
      <title>The use of power tools</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/18/the-use-of-power-tools/</link>
      <pubDate>Wed, 18 Feb 2015 23:25:25 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/18/the-use-of-power-tools/</guid>
      <description>I&amp;rsquo;m currently reading the Apprenticeship patterns book, out of order (explained here: TODO).
I&amp;rsquo;m writing down the read chapters in a text file, to measure progress and also be able to backtrack if necessary. This also makes reading the book a &amp;ldquo;choose your own adventure&amp;rdquo;
After reading approximately half the chapters, the navigation wasn&amp;rsquo;t so easy using only the &amp;ldquo;see also&amp;rdquo; part. So I decided to break free from that constraint and start reading other chapters.</description>
    </item>
    
    <item>
      <title>Open discussion: Behaviour-Driven Development</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/15/open-discussion-behaviour-driven-development/</link>
      <pubDate>Sun, 15 Feb 2015 02:30:38 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/15/open-discussion-behaviour-driven-development/</guid>
      <description>This week we had a great discussion about Behavior Driven Development (BDD). We have explained it as a way of developing software based on requirements, via automatically tested specifications. For more information, see the wikipedia&amp;rsquo;s article on the subject
I forgot to mention that this is the perfect start to TDD, as this is usually called the double-loop TDD. See a post on it on coding is like cooking
In this double-loop TDD, the first thing is to create a BDD scenario, run it (red-1), create a unit test that reflects this red (red-2), pass it, refactor; go to red-1 as many times as you need, doing TDD cycles.</description>
    </item>
    
    <item>
      <title>Implementing BDD at a client</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/09/implementing-bdd-at-a-client/</link>
      <pubDate>Mon, 09 Feb 2015 22:23:44 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/09/implementing-bdd-at-a-client/</guid>
      <description>This was a low-hanging fruit as a team member who specialises in QA complained about testing in the last moment during the last sprint&amp;rsquo;s retrospective.
Did the grunt job of connecting the dots and configuring the maven project (using jbehave). Also, got the inspiration from a tutorial.
Announced it only as it was in place and QA approved of it
This grunt job clicked with Sweep the floor
Let&amp;rsquo;s see how the sprint goes and what are the pain points during this sprint</description>
    </item>
    
    <item>
      <title>Open discussion: On code reviews</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/07/open-discussion-on-code-reviews/</link>
      <pubDate>Sat, 07 Feb 2015 18:54:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/07/open-discussion-on-code-reviews/</guid>
      <description>At a client, I organized an open discussion on code reviews. We had a great conversation.
The main idea was to discuss about it and share the ideas each one had. I didn&amp;rsquo;t want it to turn into a masterclass (see the white belt)
Benefits These are the main benefits we saw in it:
 Increased trust Learning from others, other approaches Less defects, more quality Increased bus factor, decreased information silos Also:  Getting out of your comfort zone Communicating more often (code style, edge cases, complaining, etc)    Pair programming Then we discussed about the topic of code reviews and pair programming:</description>
    </item>
    
    <item>
      <title>Pairing with junior developers</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/03/pairing-with-junior-developers/</link>
      <pubDate>Tue, 03 Feb 2015 23:40:21 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/03/pairing-with-junior-developers/</guid>
      <description>After reading this blog post, here are my thoughts:
WARNING: the post was about how to do it, these reflections are on a more philosophical level
This is a controversial topic, as:
 You cannot discern how much or little the other person knows more than you. I cannot find the reference anymore, but it was a to the tune of &amp;ldquo;once the other person&amp;rsquo;s level is higher than yours, you cannot know how much&amp;rdquo; There are different knowledge areas.</description>
    </item>
    
    <item>
      <title>Book: Diseño Ágil con TDD (Spanish)</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/02/book-diseno-agil-con-tdd-spanish/</link>
      <pubDate>Mon, 02 Feb 2015 21:32:21 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/02/book-diseno-agil-con-tdd-spanish/</guid>
      <description>I&amp;rsquo;ve read this book Diseño Ágil con TDD (Spanish) by Carlos Blé from cover to cover, when previously I had only read the theoretical parts (Part I and Chapter 12 in Part II).
It&amp;rsquo;s worth noting that this is the first TDD book in Spanish (I haven&amp;rsquo;t found any book in Spanish predating this one - also backed by the author; published in January 2010) and, as such, there are some translations that could be improved.</description>
    </item>
    
    <item>
      <title>Your First Language</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/02/your-first-language/</link>
      <pubDate>Mon, 02 Feb 2015 21:25:37 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/02/your-first-language/</guid>
      <description>After reading (in a specific order - below) part of the patterns in Apprenticeship Patterns, I stumbled upon the &amp;ldquo;Your First Language&amp;rdquo;
First of all, the illustration with the baby reading a Java book is priceless.
Having said that, I came to the realization that you might not know a paradigm but just an implementation (e.g., you don&amp;rsquo;t know about Object-Oriented programming but just about Java), in the same fashion as you could not know about LISPs but only about an implementation, such as clojure.</description>
    </item>
    
    <item>
      <title>Podcast: Basta ya de picar (Spanish)</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/24/podcast-basta-ya-de-picar-spanish/</link>
      <pubDate>Sat, 24 Jan 2015 21:03:03 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/24/podcast-basta-ya-de-picar-spanish/</guid>
      <description>Some weeks ago I listened to some podcasts from BastaYaDePicar (episodes 1 to 8) and now I&amp;rsquo;m listening more (9 to 10). I really recommend these to you, and I imagine that the newer episodes (also new format) will be interesting too.
They&amp;rsquo;re in Spanish and narrated by Sebastian Hermida</description>
    </item>
    
    <item>
      <title>Code Snippets Stash</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/24/code-snippets-stash/</link>
      <pubDate>Sat, 24 Jan 2015 20:49:55 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/24/code-snippets-stash/</guid>
      <description>Following a team member&amp;rsquo;s recommendation, I recently started a repository to save all my useful snippets.
I&amp;rsquo;ve decided that the examples should be designed guided by tests or at least to have a working example exercised by tests. Also, that I should not reinvent the wheel and use as many open source libraries as possible, reducing the amount of code I have to write myself.
Ideally, every snippet should be a maven project (where applicable) and be imported as a small library, therefore being able to reuse the functionality incrementally across projects.</description>
    </item>
    
    <item>
      <title>Bank kata in java</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/22/bank-kata-in-java/</link>
      <pubDate>Thu, 22 Jan 2015 22:52:01 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/22/bank-kata-in-java/</guid>
      <description>Manuel Rivero and I did a subset of the bank kata, proposed by Sandro Mancuso.
We&amp;rsquo;ve used java (mockito, hamcrest, junit), outside-in TDD. The code is spread among several sessions. We have not committed after each step, only at the end of the session.
The source code is on github
You can read Manuel&amp;rsquo;s take on the kata on his blog</description>
    </item>
    
    <item>
      <title>GMaur code jam 2015: 01 - Mini-Power Swapper</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/12/gmaur-code-jam/</link>
      <pubDate>Mon, 12 Jan 2015 04:25:22 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/12/gmaur-code-jam/</guid>
      <description>Last year we started the program 12 months, 12 katas (as inspired by this repository). This year we want to propose something different: an asynchronous code jam
##New problem: Mini-Power Swapper
This post belongs to a series: code-jam
Each month (or so) we at GMaur will publish a new problem (and announce it on twitter) and post a solution to the last problem.
This month, the Mini-Power Swapper
You can fork the repo, commit there and send a pull request.</description>
    </item>
    
    <item>
      <title>Kata: Reverse Polish Notation in java</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/12/kata-reverse-polish-notation-in-java/</link>
      <pubDate>Mon, 12 Jan 2015 03:56:58 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/12/kata-reverse-polish-notation-in-java/</guid>
      <description>I&amp;rsquo;ve written a RPN string calculator in java, using TDD with these: mockito, hamcrest, junit
It&amp;rsquo;s close to the String Calculator kata, by Roy Osherove. This RPN is using mocks (so more difficult than the String calculator)
I&amp;rsquo;ve tried to practice &amp;ldquo;Your tests are dragging you down&amp;rdquo; by J.B Rainsberger (mainly, to use something to write on). This behavior is also explained in the book Dirigido por tests (Spanish) by Carlos Blé.</description>
    </item>
    
    <item>
      <title>Listening to the tests</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/06/listening-to-the-tests/</link>
      <pubDate>Tue, 06 Jan 2015 22:05:55 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/06/listening-to-the-tests/</guid>
      <description>Specifically the chapter no. 20 (&amp;ldquo;Listening to the tests&amp;rdquo;) from Growing Object-Oriented Software Guided by Tests available here is so good to learn to hear to your tests.
To hear what they&amp;rsquo;re trying to tell you, the authors (Steve Freeman and Nat Pryce) explain this to you:
 I Need to Mock an Object I Can’t Replace Logging Is a Feature Mocking Concrete Classes Don’t Mock Values Bloated Constructor Confused Object Too Many Dependencies Too Many Expectations  To close, a quote:</description>
    </item>
    
    <item>
      <title>Kata: prime factors</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/06/kata-prime-factors/</link>
      <pubDate>Tue, 06 Jan 2015 21:47:04 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/06/kata-prime-factors/</guid>
      <description>I just did the prime factors kata, in java using TDD. Results: https://github.com/alvarogarcia7/primeFactors
Code review, comments, pull requests are more than welcome
Source: http://craftsmanship.sv.cmu.edu/katas/prime-factors-kata
Source: http://butunclebob.com/ArticleS.UncleBob.ThePrimeFactorsKata</description>
    </item>
    
    <item>
      <title>Talk: &#39;Is TDD Dead? Of course not! But what´s all the fuzz about then?&#39; by Emily Bache</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-by-emily-bache/</link>
      <pubDate>Tue, 06 Jan 2015 15:47:47 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-by-emily-bache/</guid>
      <description>I&amp;rsquo;ve just seen this talk: Is TDD dead? Of course not! But what´s all the fuzz about then? by Emily Bache
###My notes
  deliberate vs accidental learning (around minute 19)
  do not be an evangelist for tdd but rather &amp;ldquo;come learn tdd, come at a dojo with us!&amp;rdquo;
  points to Dan North&amp;rsquo;s talk (at the same foo café)
  points to her book - The Coding Dojo Handbook</description>
    </item>
    
    <item>
      <title>Category: Goos</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/01/category-goos/</link>
      <pubDate>Thu, 01 Jan 2015 07:09:43 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/01/category-goos/</guid>
      <description>This category is mainly dedicated to anything related or included in the book &amp;lsquo;Growing Object-Oriented Software Guided by Tests&amp;rsquo;, by Nat Pryce and Steve Freeman
Note: This has been created a posteriori with a previous date</description>
    </item>
    
    <item>
      <title>Books read in 2014Q4</title>
      <link>https://alvarogarcia7.github.io/blog/2014/12/31/books-read-in-2014q4/</link>
      <pubDate>Wed, 31 Dec 2014 12:49:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2014/12/31/books-read-in-2014q4/</guid>
      <description>Books I&amp;rsquo;ve read this quarter Q4 on 2014, as inspired by Manuel, on this post:
 ATDD by Example: A Practical Guide to Acceptance Test-Driven Development by Markus Gärtner Head First Design Patterns by Eric Freeman, Elisabeth Robson, Bert Bates, Kathy Sierra Apprenticeship Patterns, Guidance for the Aspiring Software Craftsman by Dave Hoover, Adewale Oshineye Diseño ágil con TDD, by Carlos Blé Jurado; again The Mythical Man-Month, Anniversary Edition: Essays On Software Engineering by Frederick P.</description>
    </item>
    
    <item>
      <title>Should we start the TDD cycle on refactor?</title>
      <link>https://alvarogarcia7.github.io/blog/2014/12/29/should-we-start-the-tdd-cycle-on-refactor/</link>
      <pubDate>Mon, 29 Dec 2014 20:30:01 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2014/12/29/should-we-start-the-tdd-cycle-on-refactor/</guid>
      <description>In this lexical scope, TDD by example is referring to this book1, available on Amazon
###The TDD cycle
Altough Kent Beck in his book Test-Driven Development by example explains in &amp;ldquo;Part I: the money example&amp;rdquo;2 that one should
 quickly add a test;
  run all the tests and see the new one fail [&amp;hellip;]
  Kent Beck  Implying that the TDD cycle starts with the red. Later on he explains that the cycle continues with green and refactor and back to red.</description>
    </item>
    
    <item>
      <title>Global Day of Code Retreat 2014</title>
      <link>https://alvarogarcia7.github.io/blog/2014/12/18/global-day-of-code-retreat/</link>
      <pubDate>Thu, 18 Dec 2014 07:33:59 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2014/12/18/global-day-of-code-retreat/</guid>
      <description>One month ago (on November 15th) I facilitated my first Global Day of Code Retreat at eBay Enterprise International and had such a blast. Link to the event (Spanish)
Some thoughts After a month of thinking about it, here are some thoughts:
  This year&amp;rsquo;s GDCR was quite different that last one&amp;rsquo;s:
It&amp;rsquo;s OK: do not strive for repeating the same each year
  Heat map (in several dimensions): TDD x language</description>
    </item>
    
    <item>
      <title>The Joys of the Craft</title>
      <link>https://alvarogarcia7.github.io/blog/2014/12/15/the-joys-of-the-craft/</link>
      <pubDate>Mon, 15 Dec 2014 22:46:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2014/12/15/the-joys-of-the-craft/</guid>
      <description>Quoting the book,
 Why is programming fun? What delights may its practitioner expect as his reward?
First is the sheer joy of making things. As the child delights in his mud pie, so the adult enjoys building things, especially things of his own design [&amp;hellip;]
Second is the pleasure of making things that are useful to other people. Deep within, we want other to use our work and to find it helpful.</description>
    </item>
    
    <item>
      <title>&#39;Pocket&#39; application</title>
      <link>https://alvarogarcia7.github.io/blog/2014/12/08/pocket-application/</link>
      <pubDate>Mon, 08 Dec 2014 23:40:13 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2014/12/08/pocket-application/</guid>
      <description>This is a free application I use quite often: pocket
They promote it as &amp;ldquo;When you find something you want to view later, put it in Pocket.&amp;rdquo;
I really use for that. Once you install it in your phone, some handy shortcuts appear both on Chrome for saving the page and on twitter when you hit the &amp;ldquo;share&amp;rdquo; button.
It is especially useful when you&amp;rsquo;re on the tube and have no connection, as pocket saves an offline version of the page (warning: this doesn&amp;rsquo;t work for video sites like youtube)</description>
    </item>
    
    <item>
      <title>CAS2014 Wrap up</title>
      <link>https://alvarogarcia7.github.io/blog/2014/12/08/cas2014-wrap-up/</link>
      <pubDate>Mon, 08 Dec 2014 19:18:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2014/12/08/cas2014-wrap-up/</guid>
      <description>This year&amp;rsquo;s edition of the CAS 2014 has been awesome. There were several tracks:
 Enterprise Agile Collaboration, Culture and Teams Delighting Products Agile+ Development Practices and Craftsmanship  The last one is where I spent most of the time.
The schedule The first day:
 Sandro Mancuso: talking about Software Craftsmanship Jose Manuel Armesto: talking about Unit Testing sucks (and it&amp;rsquo;s our fault) Rubén Martín Pozo: talking about Specification by example - Historia de un equipo que no odia documentar Xavi Gost: talking about La economía del refactoring.</description>
    </item>
    
    <item>
      <title>Hello World!</title>
      <link>https://alvarogarcia7.github.io/blog/2014/12/08/hello-world/</link>
      <pubDate>Mon, 08 Dec 2014 17:20:59 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2014/12/08/hello-world/</guid>
      <description>This is the obligatory &amp;ldquo;Hello World!&amp;rdquo; post
To get here and create your own blog using octopress, follow the instructions below:
 Install ruby, as explained on the guide here I&amp;rsquo;ve used Ruby 2.1.5p273 (2014-11-13 revision 48405) [x64-mingw32] (ruby --version) Configure your blog. See here Install octopress: rake install Start the server with rake preview. You should see a basic template (CSS) with your blog name, the author, etcetera Create your first post.</description>
    </item>
    
  </channel>
</rss>
