<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jul 2018 07:03:19 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Questioning the existing choices</title>
      <link>https://alvarogarcia7.github.io/blog/2018/07/04/questioning-existing-choices/</link>
      <pubDate>Wed, 04 Jul 2018 07:03:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/07/04/questioning-existing-choices/</guid>
      <description>

&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;

&lt;p&gt;For a client, we have worked on a service that works with files (containing sensitive data) that get corrupted very often.&lt;/p&gt;

&lt;p&gt;The use case is generally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two/Three file opens per day&lt;/li&gt;
&lt;li&gt;One modification per 10 file opens&lt;/li&gt;
&lt;li&gt;One corruption per 100 file opens&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;initial-solution&#34;&gt;Initial solution&lt;/h2&gt;

&lt;p&gt;The initial solution was just to copy the file (&lt;code&gt;file.txt&lt;/code&gt;) before opening, after closing. This results in two files (&lt;code&gt;YYY-MM-DDTHH-mm-ss_before_file.txt&lt;/code&gt;, &lt;code&gt;YYY-MM-DDTHH-mm-ss_after_file.txt&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;As this solution quickly became unmaintainable, the client developed a solution to hash the contents of the file and to remove the duplicated files.&lt;/p&gt;

&lt;p&gt;The original cost for developing this was high, as in-house software was needed for comparing the hashes of the files, for comparing the files (remember this is sensitive data). Even if this was just a script, the possibility of deleting correct data is just too much risk.&lt;/p&gt;

&lt;p&gt;Even if this was a pragmatic choice back then (as they did not realize about the cheaper solution), the danger of deleting data is still present as long as the old script is used. Maintainability wise, that script is simple enough but a defect could be potentially dangerous. (This is why the script for deleting the duplicated files does not actually delete files but generates a bash script for deleting them, which you can review before applying.)&lt;/p&gt;

&lt;h2 id=&#34;another-solution&#34;&gt;Another solution&lt;/h2&gt;

&lt;p&gt;When asked about this solution, the client mentioned that this was working well enough. Which is true.&lt;/p&gt;

&lt;p&gt;Another solution could be to store this file in a git repository and only commit the changes when there actually are changes to commit.&lt;/p&gt;

&lt;p&gt;The git repository solves both:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the problem of not having to delete data (as no duplicated data is generated)&lt;/li&gt;
&lt;li&gt;the cost of writing in-house software, as a single script to commit files is enough&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This client was using &lt;a href=&#34;https://en.wiktionary.org/wiki/if_it_ain%27t_broke,_don%27t_fix_it&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;if ain&amp;rsquo;t broke, don&amp;rsquo;t fix it&amp;rdquo;&lt;/a&gt;, with a good-enough solution.&lt;/p&gt;

&lt;p&gt;Not questioning the existing choice is expensive, putting you in a worse place that you could be. Questioning all the existing choices is expensive, and time-consuming (might lead to &lt;a href=&#34;https://en.wikipedia.org/wiki/Analysis_paralysis&#34; target=&#34;_blank&#34;&gt;analysis paralysis&lt;/a&gt;). Finding the sweet spot (whether to question or not), depends heavily on the context.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing a component that includes randomness</title>
      <link>https://alvarogarcia7.github.io/blog/2018/06/15/testing-component-randomness/</link>
      <pubDate>Fri, 15 Jun 2018 09:03:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/06/15/testing-component-randomness/</guid>
      <description>

&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;

&lt;p&gt;We have been tasked with designing a component to generate secrets for two-factor authentication (2FA), to ensure that the you also own that other &amp;lsquo;channel&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;It has to be secure enough to pass to verify a user, meaning no other user should be able to impersonating another one by guessing the secret.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;A first solution that he have implemented is to provide a 6-digit pin code.&lt;/p&gt;

&lt;p&gt;The solution (in java) is straightforward: get a &lt;code&gt;Random&lt;/code&gt; to generate &lt;code&gt;int&lt;/code&gt;s for you.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PinCodeFactory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secureRandom&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aNewPinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;secureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1_000_000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: this is not the final solution; it does not include package, imports; might not even compile. Take it as pseudo-code.&lt;/p&gt;

&lt;p&gt;Now that we this &amp;ldquo;&lt;a href=&#34;https://rubyplus.com/articles/521-TDD-Basics-Obvious-Implementation&#34; target=&#34;_blank&#34;&gt;obvious implementation&lt;/a&gt;&amp;rdquo; in mind, how can we test drive it?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with the requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the numbers are always six digits&lt;/li&gt;
&lt;li&gt;they should be pseudo-random&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can test the first by taking one of them and verifying that it has six digits.&lt;/p&gt;

&lt;h3 id=&#34;first-requirement-type-of-pin-code&#34;&gt;First requirement: type of pin code&lt;/h3&gt;

&lt;p&gt;The problem with that is that the SecureRandom gives random data. Now, the test will be passing, but later in the future, the build will break as this implementation has (some) defects. If you keep generating pin codes, you will get one as &amp;ldquo;123&amp;rdquo;, as per the definition of the &lt;code&gt;nextInt&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Easy. You add a base amount to always make it in the six digits. But, are you affecting the distribution of the pseudo-random generator? At this time, I&amp;rsquo;m not even sure. &lt;a href=&#34;https://www.amazon.com/Dont-Make-Think-Revisited-Usability/dp/0321965515&#34; target=&#34;_blank&#34;&gt;Don&amp;rsquo;t make me think&lt;/a&gt; too much. To make it easier, let&amp;rsquo;s pad the numbers with zeros on the left:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;the_numbers_are_left_padded_with_zeros&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;verifyEachOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;the_numbers_do_not_contain_spaces&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;verifyEachOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that these tests are failing, I can focus on finding a simple implementation that satisfies them.&lt;/p&gt;

&lt;p&gt;A passing solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example.Pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.net.URI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.security.SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PinCodeFactory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secureRandom&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aNewPinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;%06d&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1_000_000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But, if you execute these tests long enough, they will fail. Because of the underlaying randomness of the code. We don&amp;rsquo;t want to modify the design of this class, as we started with &amp;ldquo;wishful programming&amp;rdquo; (&lt;a href=&#34;http://blog.adrianbolboaca.ro/2016/04/programming-by-wishful-thinking/&#34; target=&#34;_blank&#34;&gt;reference&lt;/a&gt;, &lt;a href=&#34;https://dsoguy.blogspot.com/2007/01/programming-by-wishful-thinking.html&#34; target=&#34;_blank&#34;&gt;reference&lt;/a&gt;), specifying the desired public API, to later fill the implementation details.&lt;/p&gt;

&lt;p&gt;A possible solution to this randomness is to consider the random a &amp;lsquo;setting&amp;rsquo; &lt;a href=&#34;http://www.mockobjects.com/2006/10/different-kinds-of-collaborators.html&#34; target=&#34;_blank&#34;&gt;aka policy&lt;/a&gt; that I can later override. But only for the test. We don&amp;rsquo;t want to make the API more complicated, so we will offer a &lt;code&gt;protected&lt;/code&gt; method for &amp;lsquo;friends&amp;rsquo; to use, but not for everyone:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example.Pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.net.URI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.security.SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PinCodeFactory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PinCodeFactory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aNewPinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;%06d&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1_000_000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setGenerator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;generator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;generator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Note: this is the final version)&lt;/p&gt;

&lt;p&gt;(Note: in java, the &lt;code&gt;SecureRandom&lt;/code&gt; implements the same API as &lt;code&gt;Random&lt;/code&gt; &amp;ndash;in fact it is a child class&amp;ndash; so we prefer accepting the parent class.)&lt;/p&gt;

&lt;p&gt;In this way, the test can always set the random seed to a fixed value. Therefore, the numbers will be stable and the behavior is no longer random, but controlled.&lt;/p&gt;

&lt;p&gt;This is just one way how you can test components that have randomness: eliminating it without affecting the public API.&lt;/p&gt;

&lt;h3 id=&#34;second-requirement-the-pin-codes-don-t-repeat&#34;&gt;Second requirement: the pin codes don&amp;rsquo;t repeat&lt;/h3&gt;

&lt;p&gt;Even if this requirement cannot be met with enough requests (because with enough requests, you will repeat a six-digit code), finding no repeated codes in 100 consecutive pin codes is enough. The user has to input the exact code they received, so the chance of repetition is quite low.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;there_are_no_repeated_with_the_given_seed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;verifyAll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This test is passing from the beginning with the fixed seed &lt;code&gt;1L&lt;/code&gt;. But, if you enlarge the &lt;code&gt;desiredProofSize&lt;/code&gt; to 1000, it does not pass anymore.&lt;/p&gt;

&lt;h3 id=&#34;a-note-about-process&#34;&gt;A note about process&lt;/h3&gt;

&lt;p&gt;We did not get much value of test-driving (TDD) this code, as the knew the desired API from the beginning, we had a clear implementation in mind and only a few cases left to iron out. Just test-first was enough in this case.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;One way how you can test components that have randomness: eliminating it.&lt;/p&gt;

&lt;p&gt;Do not use TDD (or any other tool) as an end in itself. Use it as a tool.&lt;/p&gt;

&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;

&lt;p&gt;All code can be found &lt;a href=&#34;https://gist.github.com/alvarogarcia7/46917d8d160d46b145de8262e3965670&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a local copy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//File PinCode.java&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;equals&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hashCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;toString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StringBuffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StringBuffer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;PinCode{&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;value=&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//File PinCodeFactory.java&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example.Pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.net.URI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.security.SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PinCodeFactory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PinCodeFactory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aNewPinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;%06d&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1_000_000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setGenerator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;generator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;generator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//File PinCodeFactoryTest.java&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.Before&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Collection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.HashSet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.function.Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import static&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.hamcrest.core.Is.is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import static&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.Assert.assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PinCodeFactoryTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCodeFactory&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCodeFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Before&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setUp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pinCodeFactory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCodeFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pinCodeFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setGenerator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1L&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;there_are_no_repeated_with_the_given_seed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;verifyAll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;the_numbers_are_left_padded_with_zeros&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;verifyEachOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;the_numbers_do_not_contain_spaces&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;verifyEachOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;verifyEachOf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Collection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;assertion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;verifyAll&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Collection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;assertion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pincodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;


    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pinCodes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCodeFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;aNewPinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toSet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in May 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/05/01/self-study-may-2018/</link>
      <pubDate>Tue, 01 May 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/05/01/self-study-may-2018/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://hbr.org/2018/04/research-shows-a-simple-way-to-increase-your-engagement-at-work&#34; target=&#34;_blank&#34;&gt;Research Shows a Simple Way to Increase Your Engagement at Work&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve read this article By Michael Parke, Justin Weinhardt:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We found that increasing your engagement and productivity at work could be as simple as making a plan for the day&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They talk about two types of planning: time management and contingent planning. The latter is about considering possible disruptions or interruptions they may face and a plan to tackle them (if they happen).&lt;/p&gt;

&lt;p&gt;They argue that the latter is less frustrating than the former based on the non-accomplished tasks in the former. That the former is less effective when facing a high level of interruptions, as compared to the latter, equally effective no matter how many interruptions.&lt;/p&gt;

&lt;p&gt;They suggest contingent planning for the days with high expected interruptions, time planning for the rest. But always use planning, for higher output, happiness at work&lt;/p&gt;

&lt;p&gt;Tags: engagement, work, productivity, michael-parke, justin-weinhardt&lt;/p&gt;

&lt;h2 id=&#34;you-may-hate-planning-but-you-should-do-it-anyway-https-hbr-org-2016-09-you-may-hate-planning-but-you-should-do-it-anyway&#34;&gt;&lt;a href=&#34;https://hbr.org/2016/09/you-may-hate-planning-but-you-should-do-it-anyway&#34; target=&#34;_blank&#34;&gt;You May Hate Planning, But You Should Do It Anyway&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Elizabeth Grace Saunders. In it, she points that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Planning will trigger pain — at least initially&lt;/li&gt;
&lt;li&gt;Things tend to go better when you plan&lt;/li&gt;
&lt;li&gt;Planning becomes the canary&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;She suggests that planning can help you become more productive, even considering the sunk cost of planning itself.&lt;/p&gt;

&lt;p&gt;Tags: elizabeth-saunders, planning, hbr, management, time-management, plan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in April 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/04/01/self-study-april-2018/</link>
      <pubDate>Sun, 01 Apr 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/04/01/self-study-april-2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Books read in 2018Q1</title>
      <link>https://alvarogarcia7.github.io/blog/2018/03/31/books-read-2018q1/</link>
      <pubDate>Sat, 31 Mar 2018 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/03/31/books-read-2018q1/</guid>
      <description>&lt;p&gt;Read this quarter:&lt;/p&gt;

&lt;p&gt;Note: re+read means I&amp;rsquo;m re-reading this book. The (+) stands for one-or-more times, as in the regexes.&lt;/p&gt;

&lt;p&gt;Note: the tag &amp;ldquo;guillem&amp;rdquo; is for books suggested by &lt;a href=&#34;https://twitter.com/guillemfg&#34; target=&#34;_blank&#34;&gt;Guillem Fernandez&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Odessa; Forsyth; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Bogle on mutual funds: new perspectives for the intelligent investor; Bogle; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Perros de la guerra, los; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;avaro y el oro, el; Esopo; non-technical&lt;/li&gt;
&lt;li&gt;Aulularia; Plauto; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Tus zonas erróneas; Dyer; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Alternativa del Diablo, la; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Guía, el; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Pied piper; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Hunt for the Red October, the; Clancy; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Peopleware; DeMarco, Lister (+); own-it&lt;/li&gt;
&lt;li&gt;Time to kill, a; Grisham; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Ética promiscua; Easton, Hardy; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Checklist manifesto, the; Gawande; own-it, non-technical, guillem. How complexity can be managed by the lowest-rung workers by using a simple process: a checklist.  The checklist is not a how-to list, but a list of well-known terms in the user jargon to remind them about actions to be performed.  These recipes are a source of knowledge, therefore can be shared among users&lt;/li&gt;
&lt;li&gt;Team geek (+); guillem, own-it&lt;/li&gt;
&lt;li&gt;Kata de la voluntad; guillem, non-technical&lt;/li&gt;
&lt;li&gt;Phoenix project, the ; Kim, Behr, Spafford; own-it&lt;/li&gt;
&lt;li&gt;Obstacle is the way, the; guillem, non-technical&lt;/li&gt;
&lt;li&gt;Guide to stoicism, a; Stock; own-it, non-technical. A quick guide into the Stoic philosophy. Interest in the authors, the way they structure knowledge.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- copy-paste the books.md here --&gt;

&lt;p&gt;backlog (partially sorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unsorted V&lt;/li&gt;
&lt;li&gt;The Machine That Changed the World: The Story of Lean Production&lt;/li&gt;
&lt;li&gt;Haskell Programming&lt;/li&gt;
&lt;li&gt;Software Architecture in Practice&lt;/li&gt;
&lt;li&gt;The five disfunctions of a team: a leadership fable; Lencioni&lt;/li&gt;
&lt;li&gt;lucha por la desigualdad, la; Pontón; non-technical&lt;/li&gt;
&lt;li&gt;psicología del dinero, la; Hammond; non-technical&lt;/li&gt;
&lt;li&gt;Invirtiendo a largo plazo; García Paramés; non-technical&lt;/li&gt;
&lt;li&gt;Well-Grounded Java Developer, the; own-it&lt;/li&gt;
&lt;li&gt;Learn You a Haskell for Great Good!; own-it&lt;/li&gt;
&lt;li&gt;camino al 18J, el; Payne; non-technical&lt;/li&gt;
&lt;li&gt;Cartas desde la revolución bolchevique; Sadoul; non-technical&lt;/li&gt;
&lt;li&gt;Java Performance: The Definitive Guide&lt;/li&gt;
&lt;li&gt;Why programmers work at night&lt;/li&gt;
&lt;li&gt;Shogun: The Life of Tokugawa Ieyasu; Sadler; non-technical&lt;/li&gt;
&lt;li&gt;Scrum and XP from the trenches, 2nd edition;&lt;/li&gt;
&lt;li&gt;Els jueus i Catalunya; Villatoro; non-technical&lt;/li&gt;
&lt;li&gt;El problema de los tres cuerpos; Liu; non-technical&lt;/li&gt;
&lt;li&gt;Amazon Web Services in Action; own-it&lt;/li&gt;
&lt;li&gt;Clojure Programming - Practical Lisp for the Java World&lt;/li&gt;
&lt;li&gt;Mature optimization&lt;/li&gt;
&lt;li&gt;XUnit Test Patterns&lt;/li&gt;
&lt;li&gt;Let Over Lambda&lt;/li&gt;
&lt;li&gt;The Haskell Road to Logic, Math and Programming&lt;/li&gt;
&lt;li&gt;Types and Programming Languages&lt;/li&gt;
&lt;li&gt;Fundamentals of Object-oriented Design in UML&lt;/li&gt;
&lt;li&gt;Clojure for the brave and true&lt;/li&gt;
&lt;li&gt;How to Solve It: A New Aspect of Mathematical Method&lt;/li&gt;
&lt;li&gt;Conceptual Mathematics: A First Introduction to Categories&lt;/li&gt;
&lt;li&gt;Understanding Computation: From Simple Machines to Impossible Programs&lt;/li&gt;
&lt;li&gt;Programming in Haskell&lt;/li&gt;
&lt;li&gt;Programming Languages: Application and Interpretation&lt;/li&gt;
&lt;li&gt;Doing Math with Python&lt;/li&gt;
&lt;li&gt;Perfect Software: And Other Illusions about Testing&lt;/li&gt;
&lt;li&gt;Computability and Complexity - From a Programming Perspective&lt;/li&gt;
&lt;li&gt;Thinking Forth: a language and philosophy for solving problems&lt;/li&gt;
&lt;li&gt;Concepts, Techniques, and Models of Computer Programming&lt;/li&gt;
&lt;li&gt;Bridging the Communication Gap; Adzic&lt;/li&gt;
&lt;li&gt;Specification by Example; Adzic&lt;/li&gt;
&lt;li&gt;Cucumber book, the; Adzic&lt;/li&gt;
&lt;li&gt;Software Architecture for Developers; Brown&lt;/li&gt;
&lt;li&gt;Object Design: Roles, Responsibilities, and Collaborations&lt;/li&gt;
&lt;li&gt;RESTful Web APIs&lt;/li&gt;
&lt;li&gt;RESTful Web Services Cookbook&lt;/li&gt;
&lt;li&gt;Building Maintainable Software&lt;/li&gt;
&lt;li&gt;Serverless - Patterns of Modern Application Design Using Microservices (Amazon Web Services Edition)&lt;/li&gt;
&lt;li&gt;A Pattern Language; Alexander&lt;/li&gt;
&lt;li&gt;Types and Programming Languages, TAPL; Pierce; own-it&lt;/li&gt;
&lt;li&gt;Speed Reading Book: Read More, Learn More, Achieve More, the; Buzan&lt;/li&gt;
&lt;li&gt;Cómo crear mapas mentales (Crecimiento personal); Buzan&lt;/li&gt;
&lt;li&gt;First things first; Covey&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s best next; Perman&lt;/li&gt;
&lt;li&gt;problems of philosophy, the; Russell&lt;/li&gt;
&lt;li&gt;Requiem for the American dream; Chomsky&lt;/li&gt;
&lt;li&gt;sun also rises, the; Hemingway&lt;/li&gt;
&lt;li&gt;travels, the; Polo; non-technical&lt;/li&gt;
&lt;li&gt;Homo Deus: A Brief History of Tomorrow; Harari; non-technical&lt;/li&gt;
&lt;li&gt;Books by Aristotle; non-technical&lt;/li&gt;
&lt;li&gt;Books by Plato&lt;/li&gt;
&lt;li&gt;Books by Descartes&lt;/li&gt;
&lt;li&gt;The idea of culture; Eagleton&lt;/li&gt;
&lt;li&gt;Hereditary Intelligence; Galton; non-technical&lt;/li&gt;
&lt;li&gt;Lean Software Development: An Agile Toolkit; Poppendieck&lt;/li&gt;
&lt;li&gt;Chaos Monkeys: Obscene Fortune and Random Failure; Garcia Martinez&lt;/li&gt;
&lt;li&gt;Implementing Lean Software Development: From Concept to Cash; Poppendieck&lt;/li&gt;
&lt;li&gt;Joel on Software; Spolsky&lt;/li&gt;
&lt;li&gt;Death March; Yourdon&lt;/li&gt;
&lt;li&gt;Psychology of Computer Programming, The; Weinberg&lt;/li&gt;
&lt;li&gt;Introduction to General Systems Thinking; Weinberg&lt;/li&gt;
&lt;li&gt;En defensa de los ociosos; Stevenson; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Lao Tzu : Tao Te Ching : A Book About the Way and the Power of the Way; Tzu, Le Guin; non-technical&lt;/li&gt;
&lt;li&gt;Gay Science, the; Nietzsche; non-technical&lt;/li&gt;
&lt;li&gt;Being Geek; Lopp&lt;/li&gt;
&lt;li&gt;Finance for Freelancers; Retallick&lt;/li&gt;
&lt;li&gt;Object-oriented software engineering: a use case driven approach; Jacobson&lt;/li&gt;
&lt;li&gt;Patterns of Enterprise Application Architecture; Fowler; own-it&lt;/li&gt;
&lt;li&gt;Thinking fast and slow; Kahneman; non-technical&lt;/li&gt;
&lt;li&gt;Emotional intelligence; Goleman; non-technical&lt;/li&gt;
&lt;li&gt;Ética a Nicómaco; Aristotle; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Romeo y Julieta; Shakespeare; non-technical&lt;/li&gt;
&lt;li&gt;Computer Systems: A Programmer’s Perspective; Bryant, O&amp;rsquo;Hallaron&lt;/li&gt;
&lt;li&gt;My Journey to Lhasa: The Classic Story of the Only Western Woman Who Succeeded in Entering the Forbidden City; David-Néel; non-technical&lt;/li&gt;
&lt;li&gt;Cathedral and the bazaar, the ; Raymond&lt;/li&gt;
&lt;li&gt;Coding dojo handbook, the; Bache; own-it&lt;/li&gt;
&lt;li&gt;Making software; Oram and Wilson; own-it&lt;/li&gt;
&lt;li&gt;Code complete; McConnell; own-it&lt;/li&gt;
&lt;li&gt;Soft skills; Sonmez; own-it&lt;/li&gt;
&lt;li&gt;DSLs in action; Ghosh; own-it&lt;/li&gt;
&lt;li&gt;Purely functional data structures; Okasaki; own-it&lt;/li&gt;
&lt;li&gt;Working effectively with unit tests; Fields (+); own-it&lt;/li&gt;
&lt;li&gt;First Nazi, the; Ludendorff; non-technical&lt;/li&gt;
&lt;li&gt;Greatest story ever told &amp;hellip; so far; Krauss; non-technical&lt;/li&gt;
&lt;li&gt;Master algorithm, the; Domingos; non-technical&lt;/li&gt;
&lt;li&gt;Invention of Science, the; Wootton; non-technical&lt;/li&gt;
&lt;li&gt;Tesla: Inventor of the electrical age; Bernard Carlson; non-technical&lt;/li&gt;
&lt;li&gt;Psychology in minutes; Weeks; non-technical&lt;/li&gt;
&lt;li&gt;Alan Turing: The Enigma; Hodges; non-technical&lt;/li&gt;
&lt;li&gt;How to think more about sex; de Botton; non-technical&lt;/li&gt;
&lt;li&gt;Piccolo manuale di persuasione; Taylor; non-technical&lt;/li&gt;
&lt;li&gt;arte de la guerra, el; Sun Tzu; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Piccolo manuale di leadership Confuciana; Adair; non-technical&lt;/li&gt;
&lt;li&gt;How to Stop Worrying and Start Living; Carnegie; non-technical&lt;/li&gt;
&lt;li&gt;Uomo - Guida allo stile; Roetzel; non-technical&lt;/li&gt;
&lt;li&gt;Unwritten Laws of Engineering: Revised and Updated Edition; King&lt;/li&gt;
&lt;li&gt;Test-Driven JavaScript Development (Developer&amp;rsquo;s Library); Johansen&lt;/li&gt;
&lt;li&gt;Test Driven Development: By Example; Beck&lt;/li&gt;
&lt;li&gt;Arquitectura Java JPA Domain Driven Design; Alvárez, Peláez&lt;/li&gt;
&lt;li&gt;End of loyalty, the; Wartzman; non-technical&lt;/li&gt;
&lt;li&gt;Basic Economics; Sowell; non-technical&lt;/li&gt;
&lt;li&gt;Introduction to Economic Analysis; McAfee; non-technical&lt;/li&gt;
&lt;li&gt;Patterns of Software; Gabriel&lt;/li&gt;
&lt;li&gt;Coders at work; Seibel&lt;/li&gt;
&lt;li&gt;Clean architecture; Martin&lt;/li&gt;
&lt;li&gt;How to Be a Stoic: Using Ancient Philosophy to Live a Modern Life; Pigliucci; non-technical&lt;/li&gt;
&lt;li&gt;Introduction to Object-Oriented Programming, an; Budd&lt;/li&gt;
&lt;li&gt;Gafas de la felicidad, las; Santandreu; non-technical&lt;/li&gt;
&lt;li&gt;Ser feliz en Alaska; Santandreu; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Mochila para el universo, una; Punset; non-technical&lt;/li&gt;
&lt;li&gt;Gods themselves, the; Asimov; non-technical&lt;/li&gt;
&lt;li&gt;Panamá papers, the; Obermayer, Obermaier; non-technical&lt;/li&gt;
&lt;li&gt;Originals; Grant; non-technical&lt;/li&gt;
&lt;li&gt;Optimism over despair; Chomsky; non-technical&lt;/li&gt;
&lt;li&gt;SCIENCE OF BREATH: A Practical Guide; Ballentine, Hymes; non-technical&lt;/li&gt;
&lt;li&gt;Yoga Explained: A New Step-by-step Approach to Understanding and Practising Yoga; Mehta,‎ Arjunwadkar; non-technical&lt;/li&gt;
&lt;li&gt;Wanderlust: A Modern Yogi&amp;rsquo;s Guide to Discovering Your Best Self; Krasno; non-technical&lt;/li&gt;
&lt;li&gt;How to Think About Money; Clements; non-technical, finance&lt;/li&gt;
&lt;li&gt;By Way of Deception; Ostrovsky; non-technical&lt;/li&gt;
&lt;li&gt;Printemps des sayanim, le; Cohen; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Deep work; Newport; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Hooked: How to Build Habit-Forming Products; Eyal, Hoover; non-technical&lt;/li&gt;
&lt;li&gt;Irresistible: The Rise of Addictive Technology and the Business of Keeping Us Hooked; Alter; non-technical&lt;/li&gt;
&lt;li&gt;The Attention Merchants: The Epic Scramble to Get Inside Our Heads; Wu; non-technical&lt;/li&gt;
&lt;li&gt;Willpower: Why Self-Control is The Secret to Success; Baumeister, Tierney; non-technical&lt;/li&gt;
&lt;li&gt;Principles of Psychology, the; James; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Our mutual friend; Dickens; non-technical&lt;/li&gt;
&lt;li&gt;Crucial Conversations: Tools for Talking When Stakes Are High, Second Edition; Patterson, Grenny, McMillan, Switzler; non-technical&lt;/li&gt;
&lt;li&gt;Amusing Ourselves to Death - Public Discourse in the Age of Show Business; Postman; non-technical&lt;/li&gt;
&lt;li&gt;Mastery; Greene; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Silence in the age of noise; Kagge; non-technical&lt;/li&gt;
&lt;li&gt;Functional programming simplified; Alexander; own-it&lt;/li&gt;
&lt;li&gt;Your money or your life; Dominguez, Robin; non-technical, finance&lt;/li&gt;
&lt;li&gt;Batalla del Ebro, la; Reverte; non-technical&lt;/li&gt;
&lt;li&gt;Historia de la guerra civil española; Rojo; non-technical&lt;/li&gt;
&lt;li&gt;Lucha por el poder, la; Evans; non-technical&lt;/li&gt;
&lt;li&gt;Revolución rusa, la; Pipes; non-technical&lt;/li&gt;
&lt;li&gt;Holocausto, el; Rees; non-technical&lt;/li&gt;
&lt;li&gt;Martín Lutero, renegado y Profeta; Roper; non-technical&lt;/li&gt;
&lt;li&gt;Siglo de la revolución, el ; Fontana; non-technical&lt;/li&gt;
&lt;li&gt;Història de la revolución rusa; Trotsky; non-technical&lt;/li&gt;
&lt;li&gt;Dispossessed, the; Le Guin; non-technical&lt;/li&gt;
&lt;li&gt;Left hand of darkness; Le Guin; non-technical&lt;/li&gt;
&lt;li&gt;Lathe of heaven; Le Guin; non-technical&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Schopenhauer-Cure-Novel-Irvin-Yalom/dp/0060938102/&#34; target=&#34;_blank&#34;&gt;https://www.amazon.com/Schopenhauer-Cure-Novel-Irvin-Yalom/dp/0060938102/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/How-Schopenhauer-Through-Mid-Life-Crisis-ebook/dp/B00QXNB5PC/&#34; target=&#34;_blank&#34;&gt;https://www.amazon.com/How-Schopenhauer-Through-Mid-Life-Crisis-ebook/dp/B00QXNB5PC/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Books in general &amp;ndash; Epstein&lt;/li&gt;
&lt;li&gt;Affluent society, the; Galbraith; non-technical, finance&lt;/li&gt;
&lt;li&gt;Philosophy of the Buddha; Bahm; non-technical&lt;/li&gt;
&lt;li&gt;Tribe of mentors; guillem, non-technical, own-it&lt;/li&gt;
&lt;li&gt;5 dysfunctions of a team; non-technical&lt;/li&gt;
&lt;li&gt;Ziglar&amp;rsquo;s Top Performance; non-technical&lt;/li&gt;
&lt;li&gt;Pragmatic Programmer (+)&lt;/li&gt;
&lt;li&gt;High Output Management; Grove; non-technical&lt;/li&gt;
&lt;li&gt;First Break All the Rules; non-technical&lt;/li&gt;
&lt;li&gt;Managing for happiness; Appelo; non-technical&lt;/li&gt;
&lt;li&gt;How to be a stoic - Pugliucci; non-technical&lt;/li&gt;
&lt;li&gt;Why budism is true; Wright; non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;unfinished (unsorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Effective Java; Bloch; own-it&lt;/li&gt;
&lt;li&gt;Functional Programming Patterns in Scala and Clojure; own-it&lt;/li&gt;
&lt;li&gt;Release It! - Design and Deploy Production-Ready Software; own-it&lt;/li&gt;
&lt;li&gt;Refactoring (+); Fowler; own-it&lt;/li&gt;
&lt;li&gt;Leprechauns of Software Engineering (+), the; Bossavit; own-it&lt;/li&gt;
&lt;li&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software; Vernon (+); own-it&lt;/li&gt;
&lt;li&gt;Pragmatic Thinking and Learning: Refactor Your Wetware; own-it&lt;/li&gt;
&lt;li&gt;Readings in Database Systems, 5th Edition; own-it&lt;/li&gt;
&lt;li&gt;Structure and Interpretation of Computer Programs (SICP); Abelson, Sussmann, Sussmann; own-it&lt;/li&gt;
&lt;li&gt;La Sociedad De Coste Marginal Cero (Estado y Sociedad); Rifkin; non-technical&lt;/li&gt;
&lt;li&gt;Odisea; Homero; non-technical&lt;/li&gt;
&lt;li&gt;Switch: How to Change Things When Change Is Hard; Heath, Heath; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Como leer un libro; Adler, van Doren; non-technical, own-it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;next (2):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Who rules the world?; Chomsky; non-technical&lt;/li&gt;
&lt;li&gt;Working Effectively with Legacy Code (+); Feathers; own-it&lt;/li&gt;
&lt;li&gt;Nonviolent communication (+); Rosenberg; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Introduction to Buddhism: Teachings, History and Practices, an; Harvey; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Meditations; Marcus Aurelius; non-technical, own-it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;wip (2):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Continuous Delivery; Humble, Farley; own-it&lt;/li&gt;
&lt;li&gt;Prince, the; Macchiavello; non-technical, own-it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Senior software developer, the; Copeland; own-it&lt;/li&gt;
&lt;li&gt;Scandal in Bohemia, a; Doyle; own-it&lt;/li&gt;
&lt;li&gt;Getting things done, &amp;hellip;; Allen (+); own-it, non-technical&lt;/li&gt;
&lt;li&gt;Nature of Software Development, the; Jeffries; own-it&lt;/li&gt;
&lt;li&gt;Team Geek; Fitzpatrick, Collins-Sussman; own-it&lt;/li&gt;
&lt;li&gt;Aprendo Yoga; Van Lysebeth; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Clean Coder: A Code of Conduct for Professional Programmers, the; Martin; own-it&lt;/li&gt;
&lt;li&gt;ML for the working programmer, 2nd edition [5th chapter only]; Paulson; own-it&lt;/li&gt;
&lt;li&gt;Lazarillo de Tormes, el; anónimo; non-technical&lt;/li&gt;
&lt;li&gt;Tom Clancy&amp;rsquo;s power plays - Politika; Preisler; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Moon is a harsh mistress, the; Heinlein; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Old man&amp;rsquo;s war; Scalzi; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Nightfall; Asimov, Silverberg; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Interface; Stephenson, George; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Man who sold the moon, the; Heinlein; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Agents of innocence; Ignatius; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Fist of god, the; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Avaro, el; Molière; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Bogleheads’ Guide to Investing, the; Larimore, Lindauer, LeBoeuf; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Lazyperson&amp;rsquo;s guide to investment; Farrell; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Millionaire next door, the; Stanley, Danko; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Little Book of Common Sense Investing; Bogle; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Monje que vendió su Ferrari, el; Sharma; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Siddhartha; Hesse; non-technical, own-it&lt;/li&gt;
&lt;li&gt;If you can: how millenials can get rich slowly; Bernstein; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Odessa; Forsyth; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Bogle on mutual funds: new perspectives for the intelligent investor; Bogle; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Perros de la guerra, los; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;avaro y el oro, el; Esopo; non-technical&lt;/li&gt;
&lt;li&gt;Aulularia; Plauto; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Tus zonas erróneas; Dyer; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Alternativa del Diablo, la; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Guía, el; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Pied piper; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Hunt for the Red October, the; Clancy; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Peopleware; DeMarco, Lister (+); own-it&lt;/li&gt;
&lt;li&gt;Time to kill, a; Grisham; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Ética promiscua; Easton, Hardy; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Checklist manifesto, the; Gawande; own-it, non-technical, guillem&lt;/li&gt;
&lt;li&gt;Team geek (+); guillem, own-it&lt;/li&gt;
&lt;li&gt;Kata de la voluntad; guillem, non-technical&lt;/li&gt;
&lt;li&gt;Phoenix project, the ; Kim, Behr, Spafford; own-it&lt;/li&gt;
&lt;li&gt;Obstacle is the way, the; guillem, non-technical&lt;/li&gt;
&lt;li&gt;Guide to stoicism, a; Stock; own-it, non-technical. A&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;rejected:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stanger in a strange land; Heinlein; own-it, non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;lists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/review/list/246177-rob?shelf=non-fiction-for-humans&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/review/list/246177-rob?shelf=non-fiction-for-humans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/451.Best_Philosophy_Book&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/451.Best_Philosophy_Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/8379.Software_Craftsmanship&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/8379.Software_Craftsmanship&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.ycombinator.com/ycs-2017-summer-reading-list/&#34; target=&#34;_blank&#34;&gt;https://blog.ycombinator.com/ycs-2017-summer-reading-list/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/107321.TI2011_Course&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/107321.TI2011_Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/12287.Fog_Creek_Software_Management_Training_Program&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/12287.Fog_Creek_Software_Management_Training_Program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/12351.Books_on_Stoic_Philosophy&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/12351.Books_on_Stoic_Philosophy&lt;/a&gt;; non-technical&lt;/li&gt;
&lt;li&gt;Tom clancy&amp;rsquo;s power plays&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.thriveglobal.com/stories/17969-11-top-positive-psychology-books-that-will-improve-your-work-and-life&#34; target=&#34;_blank&#34;&gt;https://www.thriveglobal.com/stories/17969-11-top-positive-psychology-books-that-will-improve-your-work-and-life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Investing: &lt;a href=&#34;http://efficientfrontier.com/reading.htm&#34; target=&#34;_blank&#34;&gt;http://efficientfrontier.com/reading.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Investing, personal finance: &lt;a href=&#34;https://www.goodreads.com/review/list/5876938-tyler?shelf=personal-finance&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/review/list/5876938-tyler?shelf=personal-finance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Investing: &lt;a href=&#34;http://lemkingroup.com/ListOfPersonalFinanceBooks.html#SelectedWebSites&#34; target=&#34;_blank&#34;&gt;http://lemkingroup.com/ListOfPersonalFinanceBooks.html#SelectedWebSites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;High performance organizations: &lt;a href=&#34;https://github.com/pdfernhout/High-Performance-Organizations-Reading-List&#34; target=&#34;_blank&#34;&gt;https://github.com/pdfernhout/High-Performance-Organizations-Reading-List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For becoming a manager / team management: &lt;a href=&#34;https://news.ycombinator.com/item?id=16151067&#34; target=&#34;_blank&#34;&gt;https://news.ycombinator.com/item?id=16151067&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in March 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/03/01/self-study-march-2018/</link>
      <pubDate>Thu, 01 Mar 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/03/01/self-study-march-2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Self-Study in February 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/02/01/self-study-february-2018/</link>
      <pubDate>Thu, 01 Feb 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/02/01/self-study-february-2018/</guid>
      <description>

&lt;h2 id=&#34;contract-test-https-martinfowler-com-bliki-contracttest-html&#34;&gt;&lt;a href=&#34;https://martinfowler.com/bliki/ContractTest.html&#34; target=&#34;_blank&#34;&gt;Contract test&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this bliki article by Martin Fowler on how to test the integration with external service providers. On how it should be integrated into the building pipeline, but maybe not fail exactly as the rest.&lt;/p&gt;

&lt;p&gt;Tags: bliki, martin-fowler, contract-test, microservices, pact, integration-test, pipeline, continuous-integration&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in January 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/01/01/self-study-january-2018/</link>
      <pubDate>Mon, 01 Jan 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/01/01/self-study-january-2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Books read in 2017Q4</title>
      <link>https://alvarogarcia7.github.io/blog/2017/12/31/books-read-2017q4/</link>
      <pubDate>Sun, 31 Dec 2017 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/12/31/books-read-2017q4/</guid>
      <description>&lt;p&gt;Read this quarter:&lt;/p&gt;

&lt;p&gt;Note: re+read means I&amp;rsquo;m re-reading this book. The (+) stands for one-or-more times, as in the regexes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lazarillo de Tormes, el; anónimo; non-technical&lt;/li&gt;
&lt;li&gt;Tom Clancy&amp;rsquo;s power plays - Politika; Preisler; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Moon is a harsh mistress, the; Heinlein; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Old man&amp;rsquo;s war; Scalzi; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Nightfall; Asimov, Silverberg; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Interface; Stephenson, George; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Man who sold the moon, the; Heinlein; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Agents of innocence; Ignatius; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Fist of god, the; Forsyth; own-it, non-technical: Synopsis: in a mixture of truth and novel, the author explains the invasion of Kuwait by Iraqi dictator Sadam Hussein. During that war, the development and destruction of some atomic bomb (&amp;lsquo;the fist of god&amp;rsquo;), the spy games played by the Americans and Brits to infiltrate the government at the highest levels.  Explains in laymen&amp;rsquo;s terms how the Israeli Mossad (&amp;lsquo;the institute&amp;rsquo;) works, how the katsa (case officers) work, the sayan(im) (dormant agents) work. How deception is used to extract information from third parties and how that information is sometimes passed, hidden, retransmitted and share among governments, agencies, armies and to the general public.  It is interesting to read this mixture of truth and reality, never knowing which is which but letting the imagination roam freely.&lt;/li&gt;
&lt;li&gt;Avaro, el; Molière; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Bogleheads’ Guide to Investing, the; Larimore, Lindauer, LeBoeuf; own-it, non-technical, finance. Synopsis: this book explains, with plenty of supporting studies and investigation, why index investing is cheaper and more beneficial in the long term for the unsophisticated investor. The authors explain why being a passive investor (i.e., lazy portfolio) is more effective than active investing (i.e., actively managed portfolio), beating 80% of the money managers.  How, for the average investor, the act of investing resembles the game of horseshoes (similar to petanque) more than darts. How it is good enough to approximate the market rather than trying to beat the market.&lt;/li&gt;
&lt;li&gt;Lazyperson&amp;rsquo;s guide to investment; Farrell; own-it, non-technical, finance. Synopsis: this book explains in laymen&amp;rsquo;s terms what lazy portfolios are and how, in average, beat the returns by actively-managed portfolios.  Details a few lazy portfolios, along with their respective past performances.&lt;/li&gt;
&lt;li&gt;Millionaire next door, the; Stanley, Danko; own-it, non-technical, finance. Synopsis: a 1996 study of Accumulators of wealth (under, average, prodigious), detailing how American millionaires behave.  The main conclusion is that PAWs are frugal, have a budget and know exactly how much it is spent in each category and live well below their means.  There is plenty of categories where the authors explain how they behave. There is an important distinction between PAWs and affluent people. The latter acquire &amp;ldquo;signs of wealth&amp;rdquo; (e.g., expensive items) before being rich, the former do it after.  The formula for expected accumulation of wealth is &lt;code&gt;age * total yearly income / 10&lt;/code&gt;.  example: age 45, income 25.000 -&amp;gt; expected wealth = &lt;code&gt;45 * 25000/10&lt;/code&gt; = 112500&lt;/li&gt;
&lt;li&gt;Little Book of Common Sense Investing; Bogle; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Monje que vendió su Ferrari, el; Sharma; own-it, non-technical. Synopsis: explains the transformation of a successful lawyer, that goes to India to learn from the Sivana monks.  Seven techniques, each with a corresponding symbol to represent it, to improve the everyday life&lt;/li&gt;
&lt;li&gt;Siddhartha; Hesse; non-technical, own-it: Synopsis: explains the life of a contemporary of Buddha, altough the story is not really related to Gautama himself, but to the main character, Siddharta.  From a well-off family, abandons his possessions to join a group of ascetics and becomes a samana (or sramana - &lt;a href=&#34;https://en.wikipedia.org/wiki/%C5%9Arama%E1%B9%87a&#34; target=&#34;_blank&#34;&gt;https://en.wikipedia.org/wiki/%C5%9Arama%E1%B9%87a&lt;/a&gt;). After that, both the Siddharta and Govinda (his friend) leave the ascetics, Govinda to join Gautama and Siddharta to go on his path. The latter goes and finds a ferryman (Vasudeva) along the way, with whom creates a friendship. Goes to the city, where he pursues riches (with a merchant, Kamaswami) and pleasure (with a courtesan, Kamala). Still thirsty with an unquenchable thirst, he abandons his current life. On the way back, he finds the ferryman, who teaches him to listen to the river. They live together for a long time until Siddhartha&amp;rsquo;s son &amp;ndash;a son he had with Kamala&amp;ndash; makes an appearance. The son tests Siddhartha&amp;rsquo;s personality.&lt;/li&gt;
&lt;li&gt;If you can: how millenials can get rich slowly; Bernstein; own-it, non-technical, finance
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- copy-paste the books.md here --&gt;

&lt;p&gt;backlog (partially sorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unsorted V&lt;/li&gt;
&lt;li&gt;The Machine That Changed the World: The Story of Lean Production&lt;/li&gt;
&lt;li&gt;Haskell Programming&lt;/li&gt;
&lt;li&gt;Software Architecture in Practice&lt;/li&gt;
&lt;li&gt;The five disfunctions of a team: a leadership fable; Lencioni&lt;/li&gt;
&lt;li&gt;Phoenix project, the ; Kim, Behr, Spafford&lt;/li&gt;
&lt;li&gt;lucha por la desigualdad, la; Pontón; non-technical&lt;/li&gt;
&lt;li&gt;psicología del dinero, la; Hammond; non-technical&lt;/li&gt;
&lt;li&gt;Invirtiendo a largo plazo; García Paramés; non-technical&lt;/li&gt;
&lt;li&gt;Well-Grounded Java Developer, the; own-it&lt;/li&gt;
&lt;li&gt;Quién domina el mundo; Chomsky; non-technical&lt;/li&gt;
&lt;li&gt;Learn You a Haskell for Great Good!; own-it&lt;/li&gt;
&lt;li&gt;camino al 18J, el; Payne; non-technical&lt;/li&gt;
&lt;li&gt;Cartas desde la revolución bolchevique; Sadoul; non-technical&lt;/li&gt;
&lt;li&gt;Java Performance: The Definitive Guide&lt;/li&gt;
&lt;li&gt;Why programmers work at night&lt;/li&gt;
&lt;li&gt;Shogun: The Life of Tokugawa Ieyasu; Sadler; non-technical&lt;/li&gt;
&lt;li&gt;Scrum and XP from the trenches, 2nd edition;&lt;/li&gt;
&lt;li&gt;Els jueus i Catalunya; Villatoro; non-technical&lt;/li&gt;
&lt;li&gt;El problema de los tres cuerpos; Liu; non-technical&lt;/li&gt;
&lt;li&gt;Amazon Web Services in Action; own-it&lt;/li&gt;
&lt;li&gt;Clojure Programming - Practical Lisp for the Java World&lt;/li&gt;
&lt;li&gt;Mature optimization&lt;/li&gt;
&lt;li&gt;XUnit Test Patterns&lt;/li&gt;
&lt;li&gt;Let Over Lambda&lt;/li&gt;
&lt;li&gt;The Haskell Road to Logic, Math and Programming&lt;/li&gt;
&lt;li&gt;Types and Programming Languages&lt;/li&gt;
&lt;li&gt;Fundamentals of Object-oriented Design in UML&lt;/li&gt;
&lt;li&gt;Clojure for the brave and true&lt;/li&gt;
&lt;li&gt;How to Solve It: A New Aspect of Mathematical Method&lt;/li&gt;
&lt;li&gt;Conceptual Mathematics: A First Introduction to Categories&lt;/li&gt;
&lt;li&gt;Understanding Computation: From Simple Machines to Impossible Programs&lt;/li&gt;
&lt;li&gt;Programming in Haskell&lt;/li&gt;
&lt;li&gt;Programming Languages: Application and Interpretation&lt;/li&gt;
&lt;li&gt;Doing Math with Python&lt;/li&gt;
&lt;li&gt;Perfect Software: And Other Illusions about Testing&lt;/li&gt;
&lt;li&gt;Computability and Complexity - From a Programming Perspective&lt;/li&gt;
&lt;li&gt;Thinking Forth: a language and philosophy for solving problems&lt;/li&gt;
&lt;li&gt;Concepts, Techniques, and Models of Computer Programming&lt;/li&gt;
&lt;li&gt;Bridging the Communication Gap; Adzic&lt;/li&gt;
&lt;li&gt;Specification by Example; Adzic&lt;/li&gt;
&lt;li&gt;Cucumber book, the; Adzic&lt;/li&gt;
&lt;li&gt;Software Architecture for Developers; Brown&lt;/li&gt;
&lt;li&gt;Object Design: Roles, Responsibilities, and Collaborations&lt;/li&gt;
&lt;li&gt;RESTful Web APIs&lt;/li&gt;
&lt;li&gt;RESTful Web Services Cookbook&lt;/li&gt;
&lt;li&gt;Building Maintainable Software&lt;/li&gt;
&lt;li&gt;Serverless - Patterns of Modern Application Design Using Microservices (Amazon Web Services Edition)&lt;/li&gt;
&lt;li&gt;A Pattern Language; Alexander&lt;/li&gt;
&lt;li&gt;Types and Programming Languages, TAPL; Pierce; own-it&lt;/li&gt;
&lt;li&gt;Speed Reading Book: Read More, Learn More, Achieve More, the; Buzan&lt;/li&gt;
&lt;li&gt;Cómo crear mapas mentales (Crecimiento personal); Buzan&lt;/li&gt;
&lt;li&gt;First things first; Covey&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s best next; Perman&lt;/li&gt;
&lt;li&gt;problems of philosophy, the; Russell&lt;/li&gt;
&lt;li&gt;Requiem for the American dream; Chomsky&lt;/li&gt;
&lt;li&gt;sun also rises, the; Hemingway&lt;/li&gt;
&lt;li&gt;travels, the; Polo; non-technical&lt;/li&gt;
&lt;li&gt;Homo Deus: A Brief History of Tomorrow; Harari; non-technical&lt;/li&gt;
&lt;li&gt;Books by Aristotle; non-technical&lt;/li&gt;
&lt;li&gt;Books by Plato&lt;/li&gt;
&lt;li&gt;Books by Descartes&lt;/li&gt;
&lt;li&gt;The idea of culture; Eagleton&lt;/li&gt;
&lt;li&gt;Hereditary Intelligence; Galton; non-technical&lt;/li&gt;
&lt;li&gt;Lean Software Development: An Agile Toolkit; Poppendieck&lt;/li&gt;
&lt;li&gt;Peopleware*; De Marco&lt;/li&gt;
&lt;li&gt;Chaos Monkeys: Obscene Fortune and Random Failure; Garcia Martinez&lt;/li&gt;
&lt;li&gt;Implementing Lean Software Development: From Concept to Cash; Poppendieck&lt;/li&gt;
&lt;li&gt;Joel on Software; Spolsky&lt;/li&gt;
&lt;li&gt;Death March; Yourdon&lt;/li&gt;
&lt;li&gt;Psychology of Computer Programming, The; Weinberg&lt;/li&gt;
&lt;li&gt;Introduction to General Systems Thinking; Weinberg&lt;/li&gt;
&lt;li&gt;Lao Tzu : Tao Te Ching : A Book About the Way and the Power of the Way; Tzu, Le Guin; non-technical&lt;/li&gt;
&lt;li&gt;Gay Science, the; Nietzsche; non-technical&lt;/li&gt;
&lt;li&gt;Being Geek; Lopp&lt;/li&gt;
&lt;li&gt;Finance for Freelancers; Retallick&lt;/li&gt;
&lt;li&gt;Object-oriented software engineering: a use case driven approach; Jacobson&lt;/li&gt;
&lt;li&gt;Patterns of Enterprise Application Architecture; Fowler; own-it&lt;/li&gt;
&lt;li&gt;Thinking fast and slow; Kahneman&lt;/li&gt;
&lt;li&gt;Emotional intelligence; Goleman&lt;/li&gt;
&lt;li&gt;Ética a Nicómaco; Aristotle; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Romeo y Julieta; Shakespeare; non-technical&lt;/li&gt;
&lt;li&gt;Computer Systems: A Programmer’s Perspective; Bryant, O&amp;rsquo;Hallaron&lt;/li&gt;
&lt;li&gt;My Journey to Lhasa: The Classic Story of the Only Western Woman Who Succeeded in Entering the Forbidden City; David-Néel; non-technical&lt;/li&gt;
&lt;li&gt;Cathedral and the bazaar, the ; Raymond&lt;/li&gt;
&lt;li&gt;Coding dojo handbook, the; Bache; own-it&lt;/li&gt;
&lt;li&gt;Making software; Oram and Wilson; own-it&lt;/li&gt;
&lt;li&gt;Code complete; McConnell&lt;/li&gt;
&lt;li&gt;Soft skills; Sonmez; own-it&lt;/li&gt;
&lt;li&gt;DSLs in action; Ghosh; own-it&lt;/li&gt;
&lt;li&gt;purely functional data structures; Okasaki; own-it&lt;/li&gt;
&lt;li&gt;Working effectively with unit tests; Fields (+); own-it&lt;/li&gt;
&lt;li&gt;First Nazi, the; Ludendorff&lt;/li&gt;
&lt;li&gt;Greatest story ever told &amp;hellip; so far; Krauss; non-technical&lt;/li&gt;
&lt;li&gt;Master algorithm, the; Domingos; non-technical&lt;/li&gt;
&lt;li&gt;Invention of Science, the; Wootton; non-technical&lt;/li&gt;
&lt;li&gt;Tesla: Inventor of the electrical age; Bernard Carlson; non-technical&lt;/li&gt;
&lt;li&gt;Psychology in minutes; Weeks; non-technical&lt;/li&gt;
&lt;li&gt;Alan Turing: The Enigma; Hodges; non-technical&lt;/li&gt;
&lt;li&gt;How to think more about sex; de Botton; non-technical&lt;/li&gt;
&lt;li&gt;Piccolo manuale di persuasione; Taylor; non-technical&lt;/li&gt;
&lt;li&gt;arte de la guerra, el; Sun Tzu; non-technical&lt;/li&gt;
&lt;li&gt;Piccolo manuale di leadership Confuciana; Adair; non-technical&lt;/li&gt;
&lt;li&gt;How to Stop Worrying and Start Living; Carnegie; non-technical&lt;/li&gt;
&lt;li&gt;Uomo - Guida allo stile; Roetzel; non-technical&lt;/li&gt;
&lt;li&gt;Unwritten Laws of Engineering: Revised and Updated Edition; King&lt;/li&gt;
&lt;li&gt;Test-Driven JavaScript Development (Developer&amp;rsquo;s Library); Johansen&lt;/li&gt;
&lt;li&gt;Test Driven Development: By Example; Beck&lt;/li&gt;
&lt;li&gt;Arquitectura Java JPA Domain Driven Design; Alvárez, Peláez&lt;/li&gt;
&lt;li&gt;End of loyalty, the; Wartzman; non-technical&lt;/li&gt;
&lt;li&gt;Basic Economics; Sowell; non-technical&lt;/li&gt;
&lt;li&gt;Introduction to Economic Analysis; McAfee; non-technical&lt;/li&gt;
&lt;li&gt;Patterns of Software; Gabriel&lt;/li&gt;
&lt;li&gt;Coders at work; Seibel&lt;/li&gt;
&lt;li&gt;Clean architecture; Martin&lt;/li&gt;
&lt;li&gt;How to Be a Stoic: Using Ancient Philosophy to Live a Modern Life; Pigliucci; non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;unfinished (unsorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Release It! - Design and Deploy Production-Ready Software; own-it&lt;/li&gt;
&lt;li&gt;Refactoring (+); Fowler; own-it&lt;/li&gt;
&lt;li&gt;The Leprechauns of Software Engineering; Bossavit (+); own-it&lt;/li&gt;
&lt;li&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software; Vernon (+); own-it&lt;/li&gt;
&lt;li&gt;Pragmatic Thinking and Learning: Refactor Your Wetware; own-it&lt;/li&gt;
&lt;li&gt;Functional Programming Patterns in Scala and Clojure; own-it&lt;/li&gt;
&lt;li&gt;Readings in Database Systems, 5th Edition; own-it&lt;/li&gt;
&lt;li&gt;Structure and Interpretation of Computer Programs (SICP); Abelson, Sussmann, Sussmann; own-it&lt;/li&gt;
&lt;li&gt;La Sociedad De Coste Marginal Cero (Estado y Sociedad); Rifkin; non-technical&lt;/li&gt;
&lt;li&gt;Odisea; Homero; non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;wip (3):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Working Effectively with Legacy Code (+); Feathers; own-it&lt;/li&gt;
&lt;li&gt;Effective Java; Bloch; own-it&lt;/li&gt;
&lt;li&gt;Nonviolent communication; Rosenberg; own-it, non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Senior software developer, the; Copeland; own-it&lt;/li&gt;
&lt;li&gt;Scandal in Bohemia, a; Doyle; own-it&lt;/li&gt;
&lt;li&gt;Getting things done, &amp;hellip;; Allen (+); own-it&lt;/li&gt;
&lt;li&gt;Nature of Software Development, the; Jeffries; own-it&lt;/li&gt;
&lt;li&gt;Team Geek; Fitzpatrick, Collins-Sussman; own-it&lt;/li&gt;
&lt;li&gt;Aprendo Yoga; Van Lysebeth; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Clean Coder: A Code of Conduct for Professional Programmers, the; Martin; own-it&lt;/li&gt;
&lt;li&gt;ML for the working programmer, 2nd edition [5th chapter only]; Paulson; own-it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;lists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/review/list/246177-rob?shelf=non-fiction-for-humans&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/review/list/246177-rob?shelf=non-fiction-for-humans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/451.Best_Philosophy_Book&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/451.Best_Philosophy_Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/8379.Software_Craftsmanship&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/8379.Software_Craftsmanship&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.ycombinator.com/ycs-2017-summer-reading-list/&#34; target=&#34;_blank&#34;&gt;https://blog.ycombinator.com/ycs-2017-summer-reading-list/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/107321.TI2011_Course&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/107321.TI2011_Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/12287.Fog_Creek_Software_Management_Training_Program&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/12287.Fog_Creek_Software_Management_Training_Program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in December 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/12/01/self-study-december-2017/</link>
      <pubDate>Fri, 01 Dec 2017 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/12/01/self-study-december-2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Self-Study in November 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/11/01/self-study-november-2017/</link>
      <pubDate>Wed, 01 Nov 2017 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/11/01/self-study-november-2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Self-Study in October 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/10/01/self-study-october-2017/</link>
      <pubDate>Sun, 01 Oct 2017 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/10/01/self-study-october-2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Books read in 2017Q3</title>
      <link>https://alvarogarcia7.github.io/blog/2017/09/30/books-read-2017q3/</link>
      <pubDate>Sat, 30 Sep 2017 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/09/30/books-read-2017q3/</guid>
      <description>&lt;p&gt;Read this quarter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the senior software developer; Copeland, with the &lt;a href=&#34;https://twitter.com/@deaprendices&#34; target=&#34;_blank&#34;&gt;aprendices reading club&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scandal in Bohemia, a; Doyle: a short novel by Sir Arthur Conan Doyle, mentioning Irene Adler and the king of Bohemia&lt;/li&gt;
&lt;li&gt;Getting things done, &amp;hellip;; Allen (+): A book on productivity, where Allen explains his method of GTD and how to apply it. Explains what has worked and not worked for him in his many years of consulting and coaching clients.&lt;/li&gt;
&lt;li&gt;Nature of Software Development, the; Jeffries: Jefrries explains what he sees as &amp;lsquo;the Natural way&amp;rsquo; of software development: agile-based, good technical practices-based, to produce software in an iterative incremental way, with a sustainable pace and not much technical debt.&lt;/li&gt;
&lt;li&gt;Clean Coder: A Code of Conduct for Professional Programmers, the; Martin: a set of principles, values, and practices for the professional programmer (as compared to the 9-5 amateur programmer).&lt;/li&gt;
&lt;li&gt;Team Geek; Fitzpatrick, Collins-Sussman; own-it&lt;/li&gt;
&lt;li&gt;Aprendo Yoga; Van Lysebeth; non-technical, own-it&lt;/li&gt;
&lt;li&gt;ML for the working programmer, 2nd edition [5th chapter only]; Paulson; own-it
Note: re+read means I&amp;rsquo;m re-reading this book. The (+) stands for one-or-more times, as in the regexes.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- copy-paste the books.md here --&gt;

&lt;p&gt;backlog (partially sorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unsorted V&lt;/li&gt;
&lt;li&gt;The Machine That Changed the World: The Story of Lean Production&lt;/li&gt;
&lt;li&gt;Haskell Programming&lt;/li&gt;
&lt;li&gt;Software Architecture in Practice&lt;/li&gt;
&lt;li&gt;The five disfunctions of a team: a leadership fable; Lencioni&lt;/li&gt;
&lt;li&gt;Phoenix project, the ; Kim, Behr, Spafford&lt;/li&gt;
&lt;li&gt;lucha por la desigualdad, la; Pontón; non-technical&lt;/li&gt;
&lt;li&gt;psicología del dinero, la; Hammond; non-technical&lt;/li&gt;
&lt;li&gt;Invirtiendo a largo plazo; García Paramés; non-technical&lt;/li&gt;
&lt;li&gt;Well-Grounded Java Developer, the; own-it&lt;/li&gt;
&lt;li&gt;Quién domina el mundo; Chomsky; non-technical&lt;/li&gt;
&lt;li&gt;Learn You a Haskell for Great Good!; own-it&lt;/li&gt;
&lt;li&gt;camino al 18J, el; Payne; non-technical&lt;/li&gt;
&lt;li&gt;Cartas desde la revolución bolchevique; Sadoul; non-technical&lt;/li&gt;
&lt;li&gt;Java Performance: The Definitive Guide&lt;/li&gt;
&lt;li&gt;Why programmers work at night&lt;/li&gt;
&lt;li&gt;Shogun: The Life of Tokugawa Ieyasu; Sadler; non-technical&lt;/li&gt;
&lt;li&gt;Scrum and XP from the trenches, 2nd edition;&lt;/li&gt;
&lt;li&gt;Els jueus i Catalunya; Villatoro; non-technical&lt;/li&gt;
&lt;li&gt;El problema de los tres cuerpos; Liu; non-technical&lt;/li&gt;
&lt;li&gt;Amazon Web Services in Action; own-it&lt;/li&gt;
&lt;li&gt;Clojure Programming - Practical Lisp for the Java World&lt;/li&gt;
&lt;li&gt;Mature optimization&lt;/li&gt;
&lt;li&gt;XUnit Test Patterns&lt;/li&gt;
&lt;li&gt;Let Over Lambda&lt;/li&gt;
&lt;li&gt;The Haskell Road to Logic, Math and Programming&lt;/li&gt;
&lt;li&gt;Types and Programming Languages&lt;/li&gt;
&lt;li&gt;Fundamentals of Object-oriented Design in UML&lt;/li&gt;
&lt;li&gt;Clojure for the brave and true&lt;/li&gt;
&lt;li&gt;How to Solve It: A New Aspect of Mathematical Method&lt;/li&gt;
&lt;li&gt;Conceptual Mathematics: A First Introduction to Categories&lt;/li&gt;
&lt;li&gt;Understanding Computation: From Simple Machines to Impossible Programs&lt;/li&gt;
&lt;li&gt;Programming in Haskell&lt;/li&gt;
&lt;li&gt;Programming Languages: Application and Interpretation&lt;/li&gt;
&lt;li&gt;Doing Math with Python&lt;/li&gt;
&lt;li&gt;Perfect Software: And Other Illusions about Testing&lt;/li&gt;
&lt;li&gt;Computability and Complexity - From a Programming Perspective&lt;/li&gt;
&lt;li&gt;Thinking Forth: a language and philosophy for solving problems&lt;/li&gt;
&lt;li&gt;Concepts, Techniques, and Models of Computer Programming&lt;/li&gt;
&lt;li&gt;Bridging the Communication Gap; Adzic&lt;/li&gt;
&lt;li&gt;Specification by Example; Adzic&lt;/li&gt;
&lt;li&gt;Cucumber book, the; Adzic&lt;/li&gt;
&lt;li&gt;Software Architecture for Developers; Brown&lt;/li&gt;
&lt;li&gt;Object Design: Roles, Responsibilities, and Collaborations&lt;/li&gt;
&lt;li&gt;RESTful Web APIs&lt;/li&gt;
&lt;li&gt;RESTful Web Services Cookbook&lt;/li&gt;
&lt;li&gt;Building Maintainable Software&lt;/li&gt;
&lt;li&gt;Serverless - Patterns of Modern Application Design Using Microservices (Amazon Web Services Edition)&lt;/li&gt;
&lt;li&gt;A Pattern Language; Alexander&lt;/li&gt;
&lt;li&gt;Types and Programming Languages, TAPL; Pierce; own-it&lt;/li&gt;
&lt;li&gt;Speed Reading Book: Read More, Learn More, Achieve More, the; Buzan&lt;/li&gt;
&lt;li&gt;Cómo crear mapas mentales (Crecimiento personal); Buzan&lt;/li&gt;
&lt;li&gt;First things first; Covey&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s best next; Perman&lt;/li&gt;
&lt;li&gt;problems of philosophy, the; Russell&lt;/li&gt;
&lt;li&gt;Requiem for the American dream; Chomsky&lt;/li&gt;
&lt;li&gt;sun also rises, the; Hemingway&lt;/li&gt;
&lt;li&gt;travels, the; Polo; non-technical&lt;/li&gt;
&lt;li&gt;Homo Deus: A Brief History of Tomorrow; Harari; non-technical&lt;/li&gt;
&lt;li&gt;Books by Aristotle; non-technical&lt;/li&gt;
&lt;li&gt;Books by Plato&lt;/li&gt;
&lt;li&gt;Books by Descartes&lt;/li&gt;
&lt;li&gt;The idea of culture; Eagleton&lt;/li&gt;
&lt;li&gt;Hereditary Intelligence; Galton; non-technical&lt;/li&gt;
&lt;li&gt;Lean Software Development: An Agile Toolkit; Poppendieck&lt;/li&gt;
&lt;li&gt;Peopleware*; De Marco&lt;/li&gt;
&lt;li&gt;Chaos Monkeys: Obscene Fortune and Random Failure; Garcia Martinez&lt;/li&gt;
&lt;li&gt;Implementing Lean Software Development: From Concept to Cash; Poppendieck&lt;/li&gt;
&lt;li&gt;Joel on Software; Spolsky&lt;/li&gt;
&lt;li&gt;Death March; Yourdon&lt;/li&gt;
&lt;li&gt;Psychology of Computer Programming, The; Weinberg&lt;/li&gt;
&lt;li&gt;Introduction to General Systems Thinking; Weinberg&lt;/li&gt;
&lt;li&gt;Lao Tzu : Tao Te Ching : A Book About the Way and the Power of the Way; Tzu, Le Guin; non-technical&lt;/li&gt;
&lt;li&gt;Gay Science, the; Nietzsche; non-technical&lt;/li&gt;
&lt;li&gt;Being Geek; Lopp&lt;/li&gt;
&lt;li&gt;Finance for Freelancers; Retallick&lt;/li&gt;
&lt;li&gt;Object-oriented software engineering: a use case driven approach; Jacobson&lt;/li&gt;
&lt;li&gt;Patterns of Enterprise Application Architecture; Fowler; own-it&lt;/li&gt;
&lt;li&gt;Thinking fast and slow; Kahneman&lt;/li&gt;
&lt;li&gt;Emotional intelligence; Goleman&lt;/li&gt;
&lt;li&gt;Ética a Nicómaco; Aristotle; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Romeo y Julieta; Shakespeare; non-technical&lt;/li&gt;
&lt;li&gt;Computer Systems: A Programmer’s Perspective; Bryant, O&amp;rsquo;Hallaron&lt;/li&gt;
&lt;li&gt;My Journey to Lhasa: The Classic Story of the Only Western Woman Who Succeeded in Entering the Forbidden City; David-Néel; non-technical&lt;/li&gt;
&lt;li&gt;Cathedral and the bazaar, the ; Raymond&lt;/li&gt;
&lt;li&gt;Coding dojo handbook, the; Bache; own-it&lt;/li&gt;
&lt;li&gt;Making software; Oram and Wilson; own-it&lt;/li&gt;
&lt;li&gt;Code complete; McConnell&lt;/li&gt;
&lt;li&gt;Soft skills; Sonmez; own-it&lt;/li&gt;
&lt;li&gt;DSLs in action; Ghosh; own-it&lt;/li&gt;
&lt;li&gt;purely functional data structures; Okasaki; own-it&lt;/li&gt;
&lt;li&gt;Working effectively with unit tests; Fields (+); own-it&lt;/li&gt;
&lt;li&gt;First Nazi, the; Ludendorff&lt;/li&gt;
&lt;li&gt;Greatest story ever told &amp;hellip; so far; Krauss; non-technical&lt;/li&gt;
&lt;li&gt;Master algorithm, the; Domingos; non-technical&lt;/li&gt;
&lt;li&gt;Invention of Science, the; Wootton; non-technical&lt;/li&gt;
&lt;li&gt;Tesla: Inventor of the electrical age; Bernard Carlson; non-technical&lt;/li&gt;
&lt;li&gt;Psychology in minutes; Weeks; non-technical&lt;/li&gt;
&lt;li&gt;Alan Turing: The Enigma; Hodges; non-technical&lt;/li&gt;
&lt;li&gt;How to think more about sex; de Botton; non-technical&lt;/li&gt;
&lt;li&gt;Piccolo manuale di persuasione; Taylor; non-technical&lt;/li&gt;
&lt;li&gt;arte de la guerra, el; Sun Tzu; non-technical&lt;/li&gt;
&lt;li&gt;Piccolo manuale di leadership Confuciana; Adair; non-technical&lt;/li&gt;
&lt;li&gt;How to Stop Worrying and Start Living; Carnegie; non-technical&lt;/li&gt;
&lt;li&gt;Uomo - Guida allo stile; Roetzel; non-technical&lt;/li&gt;
&lt;li&gt;Unwritten Laws of Engineering: Revised and Updated Edition; King&lt;/li&gt;
&lt;li&gt;Test-Driven JavaScript Development (Developer&amp;rsquo;s Library); Johansen&lt;/li&gt;
&lt;li&gt;Test Driven Development: By Example; Beck&lt;/li&gt;
&lt;li&gt;Arquitectura Java JPA Domain Driven Design; Alvárez, Peláez&lt;/li&gt;
&lt;li&gt;End of loyalty, the; Wartzman; non-technical&lt;/li&gt;
&lt;li&gt;Basic Economics; Sowell; non-technical&lt;/li&gt;
&lt;li&gt;Introduction to Economic Analysis; McAfee; non-technical&lt;/li&gt;
&lt;li&gt;Patterns of Software; Gabriel&lt;/li&gt;
&lt;li&gt;Coders at work; Seibel&lt;/li&gt;
&lt;li&gt;Clean architecture; Martin&lt;/li&gt;
&lt;li&gt;How to Be a Stoic: Using Ancient Philosophy to Live a Modern Life; Pigliucci; non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;unfinished (unsorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Release It! - Design and Deploy Production-Ready Software; own-it&lt;/li&gt;
&lt;li&gt;Refactoring (+); Fowler; own-it&lt;/li&gt;
&lt;li&gt;The Leprechauns of Software Engineering; Bossavit (+); own-it&lt;/li&gt;
&lt;li&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software; Vernon (+); own-it&lt;/li&gt;
&lt;li&gt;Pragmatic Thinking and Learning: Refactor Your Wetware; own-it&lt;/li&gt;
&lt;li&gt;Functional Programming Patterns in Scala and Clojure; own-it&lt;/li&gt;
&lt;li&gt;Readings in Database Systems, 5th Edition; own-it&lt;/li&gt;
&lt;li&gt;Structure and Interpretation of Computer Programs (SICP); Abelson, Sussmann, Sussmann; own-it&lt;/li&gt;
&lt;li&gt;La Sociedad De Coste Marginal Cero (Estado y Sociedad); Rifkin; non-technical&lt;/li&gt;
&lt;li&gt;Odisea; Homero; non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;wip (3):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Working Effectively with Legacy Code (+); Feathers; own-it&lt;/li&gt;
&lt;li&gt;Effective Java; Bloch; own-it&lt;/li&gt;
&lt;li&gt;Nonviolent communication; Rosenberg; own-it, non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Senior software developer, the; Copeland; own-it&lt;/li&gt;
&lt;li&gt;Scandal in Bohemia, a; Doyle; own-it&lt;/li&gt;
&lt;li&gt;Getting things done, &amp;hellip;; Allen (+); own-it&lt;/li&gt;
&lt;li&gt;Nature of Software Development, the; Jeffries; own-it&lt;/li&gt;
&lt;li&gt;Team Geek; Fitzpatrick, Collins-Sussman; own-it&lt;/li&gt;
&lt;li&gt;Aprendo Yoga; Van Lysebeth; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Clean Coder: A Code of Conduct for Professional Programmers, the; Martin; own-it&lt;/li&gt;
&lt;li&gt;ML for the working programmer, 2nd edition [5th chapter only]; Paulson; own-it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;lists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/review/list/246177-rob?shelf=non-fiction-for-humans&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/review/list/246177-rob?shelf=non-fiction-for-humans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/451.Best_Philosophy_Book&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/451.Best_Philosophy_Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/8379.Software_Craftsmanship&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/8379.Software_Craftsmanship&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.ycombinator.com/ycs-2017-summer-reading-list/&#34; target=&#34;_blank&#34;&gt;https://blog.ycombinator.com/ycs-2017-summer-reading-list/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/107321.TI2011_Course&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/107321.TI2011_Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/12287.Fog_Creek_Software_Management_Training_Program&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/12287.Fog_Creek_Software_Management_Training_Program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in September 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/09/01/self-study-september-2017/</link>
      <pubDate>Fri, 01 Sep 2017 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/09/01/self-study-september-2017/</guid>
      <description>

&lt;h2 id=&#34;how-the-clipboard-works-part-1-https-blogs-msdn-microsoft-com-ntdebugging-2012-03-16-how-the-clipboard-works-part-1&#34;&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/ntdebugging/2012/03/16/how-the-clipboard-works-part-1/&#34; target=&#34;_blank&#34;&gt;How the Clipboard Works, Part 1&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article, by Matt Burrough, on how the clipboard works on windows.&lt;/p&gt;

&lt;p&gt;Explains how the API works and how the different formats and priorities are organized so the new application can decide which format to accept.&lt;/p&gt;

&lt;p&gt;Tags: windows, clipboard, matt-burrough, format, copy-paste&lt;/p&gt;

&lt;h2 id=&#34;top-developers-can-have-a-life-outside-coding-https-belenalbeza-com-top-developers-can-have-a-life-outside-coding&#34;&gt;&lt;a href=&#34;https://belenalbeza.com/top-developers-can-have-a-life-outside-coding/&#34; target=&#34;_blank&#34;&gt;Top developers can have a life outside coding&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Belen Albeza on how top coders don&amp;rsquo;t need to spend all their time programming or with activities related to programming.&lt;/p&gt;

&lt;p&gt;Explains some techniques to make the most of the working hours and some strategies to balance your work-non-work life.&lt;/p&gt;

&lt;p&gt;Tags: belen-albeza, coding, time-management, energy-management, improvement, opinion, work-life-balance&lt;/p&gt;

&lt;h2 id=&#34;your-phone-is-your-most-vulnerable-gadget-protect-it-now-https-www-wired-com-story-your-phone-is-your-most-vulnerable-gadget-protect-it-now&#34;&gt;&lt;a href=&#34;https://www.wired.com/story/your-phone-is-your-most-vulnerable-gadget-protect-it-now/&#34; target=&#34;_blank&#34;&gt;Your phone is your most vulnerable gadget. protect it now&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by David Pierce on how the phone device is vulnerable and what options we have available to make it a secure computing device.&lt;/p&gt;

&lt;p&gt;Either switch to a branded-as-secure phone or stick to the main options (Android, iPhone) plus activate some options (updates to the apps and operating system), stay away from public hotspots, don&amp;rsquo;t lend it to strangers and use some apps to monitor what resources apps are using&lt;/p&gt;

&lt;p&gt;Tags: david-pierce, security, phone, mobile-device, hotspot, iphone, android, ios&lt;/p&gt;

&lt;h2 id=&#34;living-in-switzerland-ruined-me-for-america-and-its-lousy-work-culture-https-getpocket-com-explore-item-living-in-switzerland-ruined-me-for-america-and-its-lousy-work-culture-987981365&#34;&gt;&lt;a href=&#34;https://getpocket.com/explore/item/living-in-switzerland-ruined-me-for-america-and-its-lousy-work-culture-987981365&#34; target=&#34;_blank&#34;&gt;Living in Switzerland ruined me for America and its lousy work culture&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Chantal Panozzo comparing the way of living and the economic standards in Switzerland and the US.&lt;/p&gt;

&lt;p&gt;Mainly about the topics of the social security network, provided by the state, taxes and owning a car&lt;/p&gt;

&lt;p&gt;Tags: chantal-panozzo, comparison, way-of-living, living-standard, car, social-security, usa, us, switzerland, economy&lt;/p&gt;

&lt;h2 id=&#34;the-10-10-10-rule-for-tough-decisions-https-getpocket-com-explore-item-the-10-10-10-rule-for-tough-decisions-327321877&#34;&gt;&lt;a href=&#34;https://getpocket.com/explore/item/the-10-10-10-rule-for-tough-decisions-327321877&#34; target=&#34;_blank&#34;&gt;The 10/10/10 Rule For Tough Decisions&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Chip Heath on a technique to make hard decisions: the 10/10/10 rule; How would you feel 10 minutes, 10 months and 10 years after having applied the actions from that decisions?&lt;/p&gt;

&lt;p&gt;Tags: decision, decision-making, rule, ten-ten-ten-rule, chip-heath&lt;/p&gt;

&lt;h2 id=&#34;how-to-retire-in-your-30s-save-most-of-your-money-and-rethink-your-core-values-https-getpocket-com-explore-item-how-to-retire-in-your-30s-save-most-of-your-money-and-rethink-your-core-values-912524855&#34;&gt;&lt;a href=&#34;https://getpocket.com/explore/item/how-to-retire-in-your-30s-save-most-of-your-money-and-rethink-your-core-values-912524855&#34; target=&#34;_blank&#34;&gt;How to retire in your 30s: save most of your money and rethink your core values&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Danielle Kurtzleben on how to retire early or achieve financial independence early in your career: save a big percentage of your salary, invest wisely and reduce costs.&lt;/p&gt;

&lt;p&gt;Tags: danielle-kurtzleben, investment, frugality, early-retirement, retirement, financial-independence, independence, finance, value, core-value&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding all pending work in progress (WIP) in your workspace</title>
      <link>https://alvarogarcia7.github.io/blog/2017/08/07/find-all-pending-work/</link>
      <pubDate>Mon, 07 Aug 2017 06:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/08/07/find-all-pending-work/</guid>
      <description>&lt;p&gt;It is a good practice to push your local work at the end of the day. Be it for increasing the bus factor (more people have the code), be it for reducing the lifespan of the branches (less time without integrating) or just enabling visibility (your teammates to see what has been developed). If you&amp;rsquo;re using Continuous Integration (CI) or Continuous Delivery (CD), this is even more often&lt;/p&gt;

&lt;p&gt;You can even do it more often: for example before going to lunch, before a meeting, before a demo, etc.&lt;/p&gt;

&lt;p&gt;Working with many repositories (e.g. a microservices environment/architecture), it is often the case where you will have multiple folders with work, possibly work in progress (WIP).&lt;/p&gt;

&lt;p&gt;This is why we have created a small tool to detect git repositories that have local changes that haven&amp;rsquo;t been pushed yet: &lt;a href=&#34;https://github.com/alvarogarcia7/find-wip&#34; target=&#34;_blank&#34;&gt;Find WIP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feedback is more than welcome.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>