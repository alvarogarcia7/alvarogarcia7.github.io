<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 May 2017 17:12:19 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Senior Software Engineer, Chapter 9</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-9/</link>
      <pubDate>Sun, 28 May 2017 17:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-9/</guid>
      <description>

&lt;h1 id=&#34;chapter-9-learn-to-write&#34;&gt;Chapter 9: Learn to Write&lt;/h1&gt;

&lt;p&gt;Analogy of TDD to writing.&lt;/p&gt;

&lt;p&gt;Explains how to write good email.
Then, good documentation,
then good API documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 8</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</link>
      <pubDate>Sun, 28 May 2017 16:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</guid>
      <description>

&lt;h1 id=&#34;chapter-8-bootstrap-a-greenfield-system&#34;&gt;Chapter 8: Bootstrap a Greenfield System&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Working on a brand new application can be a lot of fun.
There’s no &amp;ldquo;baggage&amp;rdquo; from legacy code, no technical debt,
and there’s a wonderful feeling of freshness when starting
an app from scratch.&lt;/p&gt;

&lt;p&gt;(p. 101)&lt;/p&gt;

&lt;p&gt;The decisions you make [&amp;hellip;] can have a lasting impact&lt;/p&gt;

&lt;p&gt;(p. 101)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-1-overview&#34;&gt;8.1 Overview&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;When given a greenfield project [&amp;hellip;] you have two main goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure everyone involved in the project feels good about the initial direction and decisions being made&lt;/li&gt;
&lt;li&gt;Establish a location for developers to start contributing code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p. 102)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mention of the iteration Zero, that&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] indicates that no direct business value is going
to be delivered initially&lt;/p&gt;

&lt;p&gt;(p. 102)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-2-understand-the-problem&#34;&gt;8.2 Understand the problem&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You do your company a disservice to build an application you don’t think needs to exist.&lt;/p&gt;

&lt;p&gt;To understand why the application should be built, find answers to these questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What business problems will this application solve?&lt;/li&gt;
&lt;li&gt;Why is the proposed application the best solutiont o those problems?&lt;/li&gt;
&lt;li&gt;What other solutions were considered?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p. 104)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mentioning the importance of asking why about these problems, also, whether this decided solution is good / the best.&lt;/p&gt;

&lt;h3 id=&#34;8-3-understand-the-system-s-place-in-the-technical-architecture&#34;&gt;8.3 Understand the System’s Place in the Technical Architecture&lt;/h3&gt;

&lt;p&gt;Mention of the &amp;lsquo;technical architecture&amp;rsquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;existing applications and existing infrastructure&lt;/p&gt;

&lt;p&gt;(p. 105)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-4-choose-technology&#34;&gt;8.4 Choose Technology&lt;/h3&gt;

&lt;h4 id=&#34;using-the-blessed-stack&#34;&gt;Using the Blessed Stack&lt;/h4&gt;

&lt;p&gt;Be prepared to heavily defend your position if you decide to not use
the blessed stack, both to yourself and others. (paraphrased from p. 107)&lt;/p&gt;

&lt;h3 id=&#34;using-a-different-technology&#34;&gt;Using a Different Technology&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You must answer the question “Why shouldn’t I use the blessed stack?”&lt;/p&gt;

&lt;p&gt;[&amp;hellip;]&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] your first duty is to deliver results.&lt;/p&gt;

&lt;p&gt;(p. 108).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also consider these factors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fitness for purpose&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Developer productivity&lt;/li&gt;
&lt;li&gt;Developer happiness - also called developer experience (DX)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(from p. 108)&lt;/p&gt;

&lt;h3 id=&#34;8-5-outline-the-application-s-architecture&#34;&gt;8.5 Outline the Application’s Architecture&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You want your application to ooze consistency&lt;/p&gt;

&lt;p&gt;(p. 111)&lt;/p&gt;

&lt;p&gt;you want to establish a “culture of consistency”&lt;/p&gt;

&lt;p&gt;(p. 113)&lt;/p&gt;

&lt;p&gt;Each developer should be encouraged to establish a convention when
they first face the need to have one.&lt;/p&gt;

&lt;p&gt;(p. 113)&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] considering the political impact [&amp;hellip;] Since it often doesn’t
matter what the decision is, making an unpopular decision can be
little gain for a lot of trouble.&lt;/p&gt;

&lt;p&gt;(p. 114)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-7-create-a-minimum-deployable-system&#34;&gt;8.7 Create a Minimum Deployable System&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I like to think of deployment as the physical act of getting the code up in the production environment and launching as the act of allowing users access.&lt;/p&gt;

&lt;p&gt;(p. 118)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The difference between deploying and launching. This can be enforced
with some techniques to block/allow access, such as enabling/disabling
these features or controlling access to said features.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 7</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/24/senior-software-engineer-chapter-7/</link>
      <pubDate>Wed, 24 May 2017 11:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/24/senior-software-engineer-chapter-7/</guid>
      <description>

&lt;h1 id=&#34;chapter-7-make-technical-decisions&#34;&gt;Chapter 7: Make Technical Decisions&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Opinions like this are often indicators of hidden facts that you have yet to identify&lt;/p&gt;

&lt;p&gt;(p. 90)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 6</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-6/</link>
      <pubDate>Tue, 23 May 2017 07:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-6/</guid>
      <description>

&lt;h1 id=&#34;chapter-6-play-well-with-others&#34;&gt;Chapter 6: Play Well With Others&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;challenges you’ll face as a programmer is to explain what you do,
or how you’ve done it, to someone who is not a programmer&lt;/p&gt;

&lt;p&gt;Translating your work to non-technical people is a skill that
can be more valuable than any specific technical knowledge you have.
It’s what makes a senior developer in the eyes of others.&lt;/p&gt;

&lt;p&gt;(p 77)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;6-1-empathize-with-your-audience&#34;&gt;6.1 Empathize With Your Audience&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;these &amp;ldquo;interested parties&amp;rdquo; understand the problem more deeply than
you, but lack the technical knowledge, skill, or time to solve it directly.&lt;/p&gt;

&lt;p&gt;(p 78)&lt;/p&gt;

&lt;p&gt;Instead of thinking of them as &amp;ldquo;pointy-haired bosses&amp;rdquo;, think of
them as partners. They understand the problem and you know how
to solve it. This &amp;ldquo;division of labor&amp;rdquo; is why teams can achieve
greater things than any individual.&lt;/p&gt;

&lt;p&gt;(p 79)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;6-2-adapt-and-abstract-information&#34;&gt;6.2 Adapt and Abstract Information&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;We want to adapt our terms to theirs, and we want to abstract
away irrelevant information as much as we can.&lt;/p&gt;

&lt;p&gt;(p 80)&lt;/p&gt;

&lt;p&gt;When communicating with others, you need to learn how to speak
the language.&lt;/p&gt;

&lt;p&gt;(p 80)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some tips:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid technical jargon of your own&lt;/li&gt;
&lt;li&gt;Listen carefully and ask questions&lt;/li&gt;
&lt;li&gt;Don’t &amp;ldquo;talk down&amp;rdquo;&lt;/li&gt;
&lt;li&gt;longer descriptive phrases in place of acronyms or other jargon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p 81)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;need to distill your message to its absolute minimum without giving out
false information.&lt;/p&gt;

&lt;p&gt;(p 82)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a conclusion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Being able to &amp;ldquo;talk the talk&amp;rdquo; with others can make you more effective
and more valuable to your company. Being able to briefly summarize
technical details even more so.&lt;/p&gt;

&lt;p&gt;(p 87)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 5</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-5/</link>
      <pubDate>Tue, 23 May 2017 07:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-5/</guid>
      <description>

&lt;h1 id=&#34;chapter-5-deal-with-technical-debt-and-slop&#34;&gt;Chapter 5: Deal With Technical Debt and Slop&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Seeing legacy as tech debt that has been acquired&lt;/li&gt;
&lt;li&gt;Slop as source for sloppy code&lt;/li&gt;
&lt;li&gt;Chapter about understanding the difference between slop and technical debt.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Many developers, if they are feeling pressured to complete their work, would call this an acceptable compromise, promise to fix it later, and ship it&lt;/p&gt;

&lt;p&gt;(p. 70)&lt;/p&gt;

&lt;p&gt;Technical Debt is [&amp;hellip;] used to explain compromises in implementation that save cost now,
at a larger future cost (just like real debt). [&amp;hellip;] technical debt is code written
under certain assumptions that no longer hold.&lt;/p&gt;

&lt;p&gt;(p. 72)&lt;/p&gt;

&lt;p&gt;Although you’ll likely need to pay it off someday, you might not necessarily have to.&lt;/p&gt;

&lt;p&gt;(p. 73)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Uses a marker (&lt;code&gt;TECHDEBT&lt;/code&gt;) to explain what and why has been introduced. Also
serves to find this debt later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 3</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/13/senior-software-engineer-chapter-3/</link>
      <pubDate>Sat, 13 May 2017 13:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/13/senior-software-engineer-chapter-3/</guid>
      <description>

&lt;h1 id=&#34;chapter-3-fix-bugs-efficiently-and-cleanly&#34;&gt;Chapter 3: Fix bugs efficiently and cleanly&lt;/h1&gt;

&lt;p&gt;In the beginning, you will be given tasks that require no in-depth domain knowledge&lt;/p&gt;

&lt;h3 id=&#34;process&#34;&gt;Process&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A process allows you to focus on the right thing at th right time (p. 14)&lt;/p&gt;

&lt;p&gt;It will make your productivity and quality more predictable, which, in turn, will help you estimate and keep more of your promises about your work (paraphrased from p. 14)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;tdd&#34;&gt;TDD&lt;/h3&gt;

&lt;p&gt;Explains some benefits about TDD:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Thinking before coding&lt;/li&gt;
&lt;li&gt;Separating the &amp;lsquo;getting it to work&amp;rsquo; from &amp;lsquo;getting it right&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p. 15)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The latter can be interpreted as &amp;lsquo;building the thing right&amp;rsquo; vs &amp;lsquo;building the right thing&amp;rsquo;: a red test can be seen as question, a green test as an answer. If the question is defined in business terms, you are building the right thing. When refactoring, you are turning the right thing (no matter how it was built) into the thing right&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] senior software engineers don&amp;rsquo;t ask permission to do their job, they just do it&lt;/p&gt;

&lt;p&gt;(p. 20)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- TODO this will turn into a blog post --&gt;
</description>
    </item>
    
    <item>
      <title>Notes from the Agile Barcelona Open Space</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/07/notes-agile-open-space-barcelona/</link>
      <pubDate>Sun, 07 May 2017 18:17:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/07/notes-agile-open-space-barcelona/</guid>
      <description>

&lt;p&gt;Yesterday I attended an Agile Barcelona open space at Netmind&lt;/p&gt;

&lt;h2 id=&#34;format&#34;&gt;Format&lt;/h2&gt;

&lt;p&gt;On arrival, attendees where welcomed by an Agile Coffee.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;es&#34; dir=&#34;ltr&#34;&gt;Creo que sobrará alguna cosita del café colaborativo... &lt;a href=&#34;https://twitter.com/hashtag/agilebcnOS?src=hash&#34;&gt;#agilebcnOS&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/compartir?src=hash&#34;&gt;#compartir&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/comunidad?src=hash&#34;&gt;#comunidad&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/gracias?src=hash&#34;&gt;#gracias&lt;/a&gt; &lt;a href=&#34;https://t.co/vvShEZmyfJ&#34;&gt;pic.twitter.com/vvShEZmyfJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Miquel Rodríguez (@miquelrodriguez) &lt;a href=&#34;https://twitter.com/miquelrodriguez/status/860792625347137536&#34;&gt;May 6, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;At 10:00, the introduction started: a warm welcome to everyone, including first-time attendees to an open space, explaining what it is, the few rules and laws and making sure everyone had fun. Some time later, the marketplace happened and everyone presented their sessions. A curious thing to see was the effect of a session that everyone wanted to attend (dubbed a &amp;lsquo;black hole&amp;rsquo;). Nobody dared to plan another session in parallel to that.&lt;/p&gt;

&lt;p&gt;As the day went by, the sessions were happening. By lunch time, everyone self organized to have lunch. I had the opportunity to catch up with &lt;a href=&#34;https://twitter.com/Jordi_Falguera&#34; target=&#34;_blank&#34;&gt;Jordi Falguera&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/torinoxx&#34; target=&#34;_blank&#34;&gt;Victor Fairén&lt;/a&gt;. It was a very enjoyable conversation. It had been a long time since we didn&amp;rsquo;t meet. Hello to both from here :)&lt;/p&gt;

&lt;p&gt;On the evening, two more slots for sessions, followed by a cross-pollination session.&lt;/p&gt;

&lt;p&gt;After that, some left and some went for a closing beer.&lt;/p&gt;

&lt;h2 id=&#34;sessions&#34;&gt;Sessions&lt;/h2&gt;

&lt;p&gt;This does not cover all sessions, including the one I facilitated, but the ones I liked the most&lt;/p&gt;

&lt;h3 id=&#34;la-formula-de-la-cocacola&#34;&gt;La formula de la cocacola&lt;/h3&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Full attendance at &lt;a href=&#34;https://twitter.com/hashtag/laFormulaDeLaCocacola?src=hash&#34;&gt;#laFormulaDeLaCocacola&lt;/a&gt; at the &lt;a href=&#34;https://twitter.com/hashtag/agileBcnOS?src=hash&#34;&gt;#agileBcnOS&lt;/a&gt;, facilitated by &lt;a href=&#34;https://twitter.com/jaumejornet&#34;&gt;@jaumejornet&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/pavleras&#34;&gt;@pavleras&lt;/a&gt; at &lt;a href=&#34;https://twitter.com/netmindIT&#34;&gt;@netmindIT&lt;/a&gt; &lt;a href=&#34;https://t.co/GFHpqTRJrp&#34;&gt;pic.twitter.com/GFHpqTRJrp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alvaro Garcia (@alvarobiz) &lt;a href=&#34;https://twitter.com/alvarobiz/status/860800423787204608&#34;&gt;May 6, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;In this session, &lt;a href=&#34;https://twitter.com/jaumejornet/&#34; target=&#34;_blank&#34;&gt;Jaume Jornet&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/pavleras&#34; target=&#34;_blank&#34;&gt;Pablo Domingo&lt;/a&gt; explained flow efficiency and resource efficiency to us, using simple terms and compelling stories, without using any specific jargon. Explaining the efficiencies using games (with volunteers).&lt;/p&gt;

&lt;p&gt;They mention that this format works very well with C-level employees and other executives.&lt;/p&gt;

&lt;h3 id=&#34;teaching-from-the-back-of-the-room&#34;&gt;Teaching from the back of the room&lt;/h3&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Super graphic recording de &lt;a href=&#34;https://twitter.com/zigiella&#34;&gt;@zigiella&lt;/a&gt; durante la charla de Training from the BACK of the Room! &lt;a href=&#34;https://twitter.com/hashtag/gracias?src=hash&#34;&gt;#gracias&lt;/a&gt;! &lt;a href=&#34;https://twitter.com/hashtag/agilebcnOS?src=hash&#34;&gt;#agilebcnOS&lt;/a&gt; &lt;a href=&#34;https://t.co/5NeiWad9hm&#34;&gt;pic.twitter.com/5NeiWad9hm&lt;/a&gt;&lt;/p&gt;&amp;mdash; Miquel Rodríguez (@miquelrodriguez) &lt;a href=&#34;https://twitter.com/miquelrodriguez/status/860888995148034048&#34;&gt;May 6, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;In this session, Miquel Rodríguez explained a few concepts he learnt in a training by Sarah Bowman &amp;ldquo;Training from the back of the room&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;He explained the six concepts for training to be effective:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Movement trumps sitting&lt;/li&gt;
&lt;li&gt;Images trumps words&lt;/li&gt;
&lt;li&gt;Talking trumps listening&lt;/li&gt;
&lt;li&gt;Writing trumps reading&lt;/li&gt;
&lt;li&gt;Shorter trumps longer&lt;/li&gt;
&lt;li&gt;Different trumps same&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the four Cs (or phases in a training):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connection&lt;/li&gt;
&lt;li&gt;Concepts&lt;/li&gt;
&lt;li&gt;Concrete practice&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A few pointers for further reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Training-Back-Room-Aside-Learn/dp/0787996629&#34; target=&#34;_blank&#34;&gt;Training from the back of the room&lt;/a&gt;, by Sarah Bowman&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Using-Brain-Science-Training-Stick/dp/096568511X/&#34; target=&#34;_blank&#34;&gt;Using brain science to make training stick&lt;/a&gt;, by Sarah Bowman&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Neuroci%C3%A8ncia-educadors-David-Bueno-Torrens/dp/8494529013/&#34; target=&#34;_blank&#34;&gt;Neurociencia per educadors&lt;/a&gt;, by David Bueno (Catalan)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I really liked this session, as it helps us deliver more effective trainings, both in formal session as in more ad-hoc / informal ones.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;These open-space events leave me full of energy, after having shared thoughts and happiness with the rest of the community.&lt;/p&gt;

&lt;p&gt;A big thank you to the organizers (the community of Agile Barcelona), the facilitator (Andres Mumenthaler) and Netmind, for hosting the event&lt;/p&gt;

&lt;p&gt;PS: This post is categorized as &amp;lsquo;We were there&amp;rsquo;, in reference to the awesome &amp;lsquo;Estuvimos allí&amp;rsquo; posts that Carlos Blé (and Codesai) write about events. Also &amp;lsquo;Notes&amp;rsquo; for the ones that Eduardo Ferro writes about events he attends&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/agilebcnOS?src=hash&#34;&gt;#agilebcnOS&lt;/a&gt; Session: managing problems with &lt;a href=&#34;https://twitter.com/hashtag/agile?src=hash&#34;&gt;#agile&lt;/a&gt; &lt;a href=&#34;https://t.co/yIYzOYnpH6&#34;&gt;pic.twitter.com/yIYzOYnpH6&lt;/a&gt;&lt;/p&gt;&amp;mdash; Fulgencio Jara (@eltioful) &lt;a href=&#34;https://twitter.com/eltioful/status/860791870938599424&#34;&gt;May 6, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Fulgencio Jara as graphic reporter from my session :)&lt;/p&gt;

&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in May 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/01/self-study-in-may-2017/</link>
      <pubDate>Mon, 01 May 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/01/self-study-in-may-2017/</guid>
      <description>

&lt;h2 id=&#34;the-real-reason-why-the-spotify-model-is-broken&#34;&gt;The real reason why the Spotify model is broken&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://kernelmag.dailydot.com/issue-sections/staff-editorials/12136/spotify-royalty-payment-model/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sharky Laguana, comparing several royalty models for spotify&lt;/p&gt;

&lt;p&gt;Tags: sharky-laguana, spotify, comparison, royalty&lt;/p&gt;

&lt;h2 id=&#34;day-3-of-7-badass-developer-gets-a-rude-awakening&#34;&gt;[Day 3 of 7] &amp;ldquo;Badass&amp;rdquo; developer gets a RUDE awakening&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this email that John Sonmez sends, about being a programmer vs a language programmer. Some quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Someone who could tear apart complex, confusing puzzles and engineer elegant, reliable solutions&amp;hellip; whether those challenges were software, hardware or &amp;ldquo;wetware.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;In other words, they wanted a professional problem solver who could jump in and deliver what the company needed, to meet THEIR customers&amp;rsquo; demands.&lt;/p&gt;

&lt;p&gt;I started looking for ways that I could add value to my employer outside of the code I wrote.&lt;/p&gt;

&lt;p&gt;I developed my &amp;ldquo;soft skills&amp;rdquo;—my ability to communicate, learn quickly, and pass my knowledge on to others.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: john-sonmez, programmer, language-programmer, quote&lt;/p&gt;

&lt;h2 id=&#34;6-rules-to-live-by-when-you-work-in-an-office-but-have-remote-team-members&#34;&gt;6 Rules To Live By When You Work In An Office But Have Remote Team Members&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.trello.com/6-mistakes-when-you-work-in-office-but-have-remote-team-members&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Lauren Moon about how trello works remotely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Value Individuals Over Infrastructure&lt;/li&gt;
&lt;li&gt;Avoid Impromptu Meetings At Someone’s Desk&lt;/li&gt;
&lt;li&gt;If One Person Is On A Video Call, EVERYONE Is On A Video Call&lt;/li&gt;
&lt;li&gt;Communication Is Asynchronous. Deal With It.&lt;/li&gt;
&lt;li&gt;Socializing Is Not Around A Watercooler&lt;/li&gt;
&lt;li&gt;The Tools You’re Using Matter. A Lot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: remote, remote-work, lauren-moon, listicle, trello, team-management&lt;/p&gt;

&lt;h2 id=&#34;princeton-s-ad-blocking-superweapon-may-put-an-end-to-the-ad-blocking-arms-race&#34;&gt;Princeton’s Ad-Blocking Superweapon May Put an End to the Ad-Blocking Arms Race&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://motherboard.vice.com/en_us/article/princetons-ad-blocking-superweapon-may-put-an-end-to-the-ad-blocking-arms-race&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jason Koebler on the tool a university has written and published, that using computer vision, is able to detect sponsored content in native form.&lt;/p&gt;

&lt;p&gt;Tags: jason-koebler, computer-vision, ad, advertisement, ublock, adblock&lt;/p&gt;

&lt;h2 id=&#34;on-sabbaticals&#34;&gt;On Sabbaticals&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://indecorous.com/sabbaticals/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about sabbaticals by Ian Malpass. In it, he explains why we need sabbaticals, how to take them, and some details about them.&lt;/p&gt;

&lt;p&gt;Some principles:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;If you think you can’t take a sabbatical, you need to take your sabbatical.&lt;/li&gt;
&lt;li&gt;Day-to-day work pushes us to think tactically; sabbaticals push us to think strategically. Both are valuable.&lt;/li&gt;
&lt;li&gt;Do the work to gain confidence that you can be away, and then trust that that the mechanisms you put in place are good.&lt;/li&gt;
&lt;li&gt;Just because your team can function without you, doesn’t mean they want to.&lt;/li&gt;
&lt;li&gt;There is rarely a good time to leave work for an extended period of time - don’t let this stop you.&lt;/li&gt;
&lt;li&gt;Allow room for serendipity, the unexpected, and exploration.&lt;/li&gt;
&lt;li&gt;Plan for your return before you leave, to avoid worry.&lt;/li&gt;
&lt;li&gt;The sabbatical process doesn’t end after six weeks.&lt;/li&gt;
&lt;li&gt;You don’t have to be unhappy or frustrated in your work to go on sabbatical.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: sabbatical, ian-malpass, team-management, career&lt;/p&gt;

&lt;h2 id=&#34;hasta-pronto&#34;&gt;Hasta pronto…&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javiergarzas.com/2016/07/hasta-pronto.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Javier Garzás, where he explains that he&amp;rsquo;ll stop blogging for a while and why&lt;/p&gt;

&lt;p&gt;Tags: javier-garzas, blog, personal&lt;/p&gt;

&lt;h2 id=&#34;the-principles-of-clean-architecture&#34;&gt;The principles of Clean Architecture&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this video about the clean architecture (with a client&amp;rsquo;s lunch and learn initiative). By Uncle Bob (Robert C. Martin)&lt;/p&gt;

&lt;p&gt;A quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the plugin is vulnerable to the plugged-in system, at the source code level&lt;/p&gt;

&lt;p&gt;Separate the detail from the general things&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: clean-architecture, uncle-bob, robert-martin, video, mvp, model-view-presenter, model-view-controller, mvc, quote, plugin&lt;/p&gt;

&lt;h2 id=&#34;the-languages-which-almost-became-css&#34;&gt;The Languages Which Almost Became CSS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://eager.io/blog/the-languages-which-almost-were-css/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Zack Bloom on the origins of CSS and the languages to add representation to HTML pages / markup.&lt;/p&gt;

&lt;p&gt;Describes the origins of these languages (e.g., RPP, PWP, CHSS, PSL, FOSI, DSSSL) and how the acceptance of CSS came to be:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;it was the technology which was easiest for a beginner to pick up which won, rather than those which were most powerful for an expert.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt; Zack Bloom&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: css, html, history, zack-bloom, mosaic, violawww&lt;/p&gt;

&lt;h2 id=&#34;you-re-not-going-to-believe-what-i-m-about-to-tell-you&#34;&gt;You&amp;rsquo;re not going to believe what I&amp;rsquo;m about to tell you&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://theoatmeal.com/comics/believe&#34; target=&#34;_blank&#34;&gt;this comic&lt;/a&gt; by Matthew Inman about how we process information from outside, especially when it conflicts with our beliefs&lt;/p&gt;

&lt;p&gt;Tags: matthew-inman, comic, oatmeal, belief&lt;/p&gt;

&lt;h2 id=&#34;how-to-be-perfectly-unhappy&#34;&gt;How to be perfectly unhappy&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://theoatmeal.com/comics/unhappy&#34; target=&#34;_blank&#34;&gt;this comic&lt;/a&gt; by Matthew Inman about the definition of happiness and how it affects the author&lt;/p&gt;

&lt;p&gt;Tags: matthew-inman, oatmeal, happiness, comic, definition&lt;/p&gt;

&lt;h2 id=&#34;spotify-engineering-culture-part-1&#34;&gt;Spotify Engineering Culture - part 1&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://vimeo.com/85490944&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; about the Spotify engineering culture: team organization, the terms they introduce and some general culture about them.&lt;/p&gt;

&lt;p&gt;Tags: team-management, people, spotify, henrik-kniberg, squad, chapter, guild, tribe&lt;/p&gt;

&lt;h2 id=&#34;speak-like-a-leader&#34;&gt;Speak like a leader&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=bGBamfWasNQ&#34; target=&#34;_blank&#34;&gt;this TEDx Talk&lt;/a&gt; by Simon Lancaster in which he explains the importance of rhetoric in our speech. Explains 6 techniques for achieving better communication:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Three breathless sentences: &amp;ldquo;Mangia Bene, Ridi Spesso, ama molto&amp;rdquo;, &amp;ldquo;Ein Volk, ein Reich, ein Fuhrer&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Three repetitive sentences&lt;/li&gt;
&lt;li&gt;Three balancing statements: if we hear the statements as balanced, we imagine that the underlaying thinking is balanced&lt;/li&gt;
&lt;li&gt;Metaphor&lt;/li&gt;
&lt;li&gt;Exaggeration&lt;/li&gt;
&lt;li&gt;Rhyme&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: simon-lancaster, tedx, ted, quote, speech, leadership, communication&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in April 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/04/01/self-study-in-april-2017/</link>
      <pubDate>Sat, 01 Apr 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/04/01/self-study-in-april-2017/</guid>
      <description>

&lt;!--
## Gerald Weinberg on Bugs, Errors, and Software Quality

I&#39;ve listened to [this interview][bug-error-weinberg] with Gerald Weinberg where he first talks about software quality, defining a fault, failure, a boo-boo, a blunder (below). Then, they move on to the cost of quality, experiences in his project &#39;Mercury&#39; (a man in orbit; his contribution was on the software side). Says it&#39;s one of his first projects where a person&#39;s life was directly related to a piece of software.

Fault: wrong operation in code
Failure: user&#39;s experience caused by a fault
Boo-boo: a one-off, small failure. Usually shrugged as a small defect
Blunder: a one-off, big failure. Can kill a career

About the cost of software, he mentions that many managers are not willing to pay the price of almost defect-free software and that this level of quality is not required in every project. This idea is similar to the one &#39;Testing every part is akin to reading every letter on the newspaper: one parts are more important than other&#39;.

This interview talks about similar topics than &#39;Why programs fail&#39;, especially about the definition.

At the end of the interview, he talks about team-based software development (~XP) and an anecdote about a company he was consulting with: follow the process or pay the defects out of your own pocket. One of them, accepted paying for defects, until he made a big mistake. Accepted training the rest of the employees into his very precise methods and became very valuable to the company.

Tags: podcast, gerald-weinberg, quality, interview, manager, software-quality, definition, fault, failure, boo-boo, blunder, project-mercury

TODO missing link

--&gt;

&lt;!--
## Microservice Practitioners with Austin Gunter and Richard Li

I&#39;ve listened to [this podcast][us-practitioners] at Software Engineering Daily with Austin Gunter and Richard Li. In it, they talk about how they have organized the conference &#39;Microservice Practicitioners&#39;: how to find speakers, the vibes of the conference, etc.

Tags: austin-gunter, richard-li, organize-a-conference, conference, microservice, microservice-practitioners, podcast, software-engineering-daily

TODO missing link

--&gt;

&lt;h2 id=&#34;10-myths-about-docker-that-stop-developers-cold&#34;&gt;10 Myths About Docker That Stop Developers Cold&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://dev.to/derickbailey/10-myths-about-docker-that-stop-developers-cold&#34; target=&#34;_blank&#34;&gt;this listicle&lt;/a&gt; of docker myths. By Derick Bailey&lt;/p&gt;

&lt;p&gt;Tags: derick-bailey, docker, myth&lt;/p&gt;

&lt;h2 id=&#34;bored-people-quit&#34;&gt;Bored People Quit&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://randsinrepose.com/archives/bored-people-quit/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Lopp on what are some mechanisms why bored people quit.&lt;/p&gt;

&lt;p&gt;Some interesting quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My gig is the care and feeding of engineers, and their productivity is my productivity. If they all leave, I have exactly no job.&lt;/p&gt;

&lt;p&gt;My job isn’t just building product; I also build people.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: michael-lopp, boredness, team-management, people, career, tech-lead, quote&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Books read in 2017Q1</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/31/books-read-in-2017q1/</link>
      <pubDate>Fri, 31 Mar 2017 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/31/books-read-in-2017q1/</guid>
      <description>&lt;p&gt;Books I&amp;rsquo;ve read this quarter&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;Books started, not yet finished (WIP):&lt;/p&gt;

&lt;p&gt;Books I want to finish. Usually come from another quarter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/functional-programming-in-scala&#34; target=&#34;_blank&#34;&gt;Functional Programming in Scala&lt;/a&gt;, by Chiusano and Bjarnason. Doing the exercises with the &lt;a href=&#34;https://twitter.com/@codurance&#34; target=&#34;_blank&#34;&gt;codurance&lt;/a&gt; team&lt;/li&gt;
&lt;li&gt;Gödel, Escher, Bach: An Eternal Golden Braid, Hofstadter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Books that have entered the queue:&lt;/p&gt;

&lt;p&gt;Non-technical that have entered the queue:&lt;/p&gt;

&lt;!--

repository for WIP books:

  * [The Well-Grounded Java Developer](http://www.manning.com/evans/) by Benjamin J. Evans and Martijn Verburg
  * [Learn You a Haskell for Great Good!](http://learnyouahaskell.com/) by Miran Lipovača
  * [Working Effectively with Legacy Code](http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052) by Michael Feathers, again. Blog posts under the tag [wewlc](/categories/wewlc
/)
  * [Haskell Programming](http://haskellbook.com/), By Chris Allen and Julie Moronuki. This book is still in progress and I&#39;m reviewing it
  * [Pragmatic Thinking and Learning: Refactor Your Wetware](https://pragprog.com/book/ahptl/pragmatic-thinking-and-learning) by Andy Hunt  
  
  Books I want to finish:

  * [Refactoring](http://martinfowler.com/books/refactoring.html) by Martin Fowler, with Kent Beck, John Brant, William Opdyke, and Don Roberts
  * [Java Performance: The Definitive Guide](http://shop.oreilly.com/product/0636920028499.do) by Scott Oaks
  * [Scrum and XP from the trenches](http://www.infoq.com/minibooks/scrum-xp-from-the-trenches) by Henrik Kniberg
  * [The Leprechauns of Software Engineering](https://leanpub.com/leprechauns) by Laurent Bossavit, again. [Gift](https://twitter.com/alvarobiz/status/611799849911103488)  
  * [Functional Programming Patterns in Scala and Clojure](https://pragprog.com/book/mbfpp/functional-programming-patterns-in-scala-and-clojure) by Michael Bevilacqua-Linn
  * [Why programmers work at night](https://leanpub.com/nightowls) by Swizec Teller
  * [Readings in Database Systems, 5th Edition](http://www.redbook.io/) by Peter Bailis, Joseph M. Hellerstein, Michael Stonebraker, editors
  * [Domain-Driven Design: Tackling Complexity in the Heart of Software](http://www.amazon.com/exec/obidos/ASIN/0321125215) by Eric Evans, again.
  * [Amazon Web Services in Action](https://www.manning.com/books/amazon-web-services-in-action) by Michael Wittig and Andreas Wittig
  * [Release It! - Design and Deploy Production-Ready Software](https://pragprog.com/book/mnee/release-it), by Michael T. Nygard, with the &#39;[@deAprendices][deaprendices]&#39;s reading club&#39;. Blog posts under the tag [release-it](/categories/release-it
/)
  * [Clojure Programming - Practical Lisp for the Java World](http://shop.oreilly.com/product/0636920013754.do) by Chas Emerick, Brian Carper, Christophe Grand


Books in the queue:

  * [Mature optimization](http://carlos.bueno.org/optimization/mature-optimization.pdf), by Carlos Bueno
  * [XUnit Test Patterns](http://xunitpatterns.com/) by Gerard Meszaros
  * [Let Over Lambda](http://letoverlambda.com/) by Doug Hoyte
  * [The Haskell Road to Logic, Math and Programming](http://fldit-www.cs.uni-dortmund.de/~peter/PS07/HR.pdf) by Kees Doets and Jan van Eijck
  * [Types and Programming Languages](http://www.cis.upenn.edu/~bcpierce/tapl/) by Benjamin C. Pierce
  * [Fundamentals of Object-oriented Design in UML](http://www.amazon.co.uk/dp/020169946X/ref=pe_385721_37038051_TE_3p_dp_1) by Meilir Page-Jones
  * [Clojure for the brave and true](http://www.braveclojure.com/#toc)
  * [How to Solve It: A New Aspect of Mathematical Method](http://press.princeton.edu/titles/669.html) by George Pólya
  * [Conceptual Mathematics: A First Introduction to Categories](http://www.amazon.com/Conceptual-Mathematics-First-Introduction-Categories/dp/052171916X) by Lawvere and Schanuel
  * [Understanding Computation: From Simple Machines to Impossible Programs](http://computationbook.com/) by Tom Stuart
  * [Programming in Haskell](http://www.cambridge.org/wm-ecommerce-web/academic/landingPage/PIHMOOC) by Graham Hutton
  * [Programming Languages: Application and Interpretation](http://cs.brown.edu/~sk/Publications/Books/ProgLangs/2007-04-26/) by Shriram Krishnamurthi
  * [Doing Math with Python](https://www.nostarch.com/doingmathwithpython) by Amit Saha. [Gift from the PyConEs 2015](https://twitter.com/alvarobiz/status/668927802159288322)
  * [Perfect Software: And Other Illusions about Testing](http://www.geraldmweinberg.com/Site/Perfect_Software.html) by Gerald M. Weinberg  
  * [Computability and Complexity - From a Programming Perspective](https://mitpress.mit.edu/books/computability-and-complexity) by Neil Deaton Jones
  * [Thinking Forth: a language and philosophy for solving problems](http://thinking-forth.sourceforge.net/) by Leo Brodie
  * [Concepts, Techniques, and Models of Computer Programming](https://mitpress.mit.edu/index.php?q=books/concepts-techniques-and-models-computer-programming) by Peter Van Roy and Seif Haridi
  * [Bridging the Communication Gap](http://books.gojko.net/bridging-the-communication-gap/) by Gojko Adzic
  * [Specification by Example](http://books.gojko.net/specification-by-example/) by Gojko Adzic
  * [The Cucumber book](https://pragprog.com/book/hwcuc/the-cucumber-book) by Matt Wynne and Aslak Hellesøy
  * [Software Architecture for Developers](https://leanpub.com/software-architecture-for-developers) by Simon Brown
  * [Object Design: Roles, Responsibilities, and Collaborations ](http://www.amazon.com/Object-Design-Roles-Responsibilities-Collaborations/dp/0201379430) by Rebecca Wirfs-Brock and Alan McKean
  * [RESTful Web APIs](http://shop.oreilly.com/product/0636920028468.do) by Leonard Richardson, Mike Amundsen, Sam Ruby
  * [RESTful Web Services Cookbook](http://shop.oreilly.com/product/9780596801694.do) by Subbu Allamaraju
  * [Building Maintainable Software](https://www.sig.eu/en/building-maintainable-software) by Joost Visser
  * [Serverless - Patterns of Modern Application Design Using Microservices (Amazon Web Services Edition)](https://leanpub.com/serverless) by Obie Fernandez 

Non-technical books in the queue:

  - La psicología del dinero, Hammond
  - Invirtiendo a largo plazo, García Paramés
  - Quién domina el mundo, Chomsky
  - Homenaje a Cataluña, Orwell
  - El camino al 18J, Payne
  - Cartas desde la revolución bolchevique, Sadoul
  - Shogun: The Life of Tokugawa Ieyasu, Sadler
  - Els jueus i Catalunya, Villatoro
  - Russell en 90 minutos, Strathern
  - El problema de los tres cuerpos, Liu

Learning paths that have entered the queue:

  * [Software Architecture Fundamentals](http://shop.oreilly.com/category/learning-path/software-architecture-fundamentals.do)
  * [HTML5 Fundamentals](http://shop.oreilly.com/category/learning-path/html5-fundamentals.do)
  * [Designing Web APIs](http://shop.oreilly.com/category/learning-path/designing-web-apis.do)
  * [Dive Deeper into PHP Programming](http://shop.oreilly.com/category/learning-path/dive-deeper-php-programming.do)
  * [Introduction to the Modern Front-End Web](http://shop.oreilly.com/category/learning-path/intro-modern-front-end-web.do)

--&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;The ending date of the quarter is the same as the publication date
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>On the Make, Buy or Rent decision: Stateful vs Stateless components</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/16/on-the-make-buy-or-rent-decision-stateful-vs-stateless-components/</link>
      <pubDate>Thu, 16 Mar 2017 07:39:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/16/on-the-make-buy-or-rent-decision-stateful-vs-stateless-components/</guid>
      <description>

&lt;p&gt;From the &lt;a href=&#34;http://www.ittoday.info/Articles/Make_Buy_or_Rent.htm&#34; target=&#34;_blank&#34;&gt;Make, Buy or Rent&lt;/a&gt; article:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] [T]he three main system options for organizations seeking to upgrade their systems [are :]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Make&lt;/li&gt;
&lt;li&gt;Buy&lt;/li&gt;
&lt;li&gt;Rent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IT managers have different criteria for deciding which components to assign in each category.&lt;/p&gt;

&lt;h2 id=&#34;another-criteria-for-deciding&#34;&gt;Another criteria for deciding&lt;/h2&gt;

&lt;p&gt;At a client, they have taken the decision to split their core IT systems in to the three options: make, buy, rent.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The business logic to handle the core business is &amp;lsquo;make&amp;rsquo;. These systems are completely stateless&lt;/li&gt;
&lt;li&gt;The persistance (or storage) for the core business is &amp;lsquo;rent&amp;rsquo;. These systems, by definition, are stateful&lt;/li&gt;
&lt;li&gt;Other parts of the system are &amp;lsquo;buy&amp;rsquo;. Not important for this article&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key concept for this separation is moving the responsibility for uptime and complex data management to a provider. The provider can take better care of those procedures and use economies of scale to provide a better service that we could do in-house (&amp;lsquo;make&amp;rsquo;) (e.g., high availability, reliability and SLAs) at the cost of paying a price for that.
This idea simplifies our components (e.g., services), making them stateless. Even if they cache any internal information, it is a &amp;lsquo;Read Through Cache&amp;rsquo;, meaning that in case the data is not available in the cache, the service will transparently fetch it from the underlying storage system.&lt;/p&gt;

&lt;p&gt;This idea for separating components simplifies both development, testing and maintainance, therefore reducing the Total Cost of Ownership (TCO) of our services.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modifying titles in a Trello Board</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/16/modifying-titles-in-a-trello-board/</link>
      <pubDate>Thu, 16 Mar 2017 00:36:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/16/modifying-titles-in-a-trello-board/</guid>
      <description>

&lt;p&gt;A teammate and I have created a &lt;a href=&#34;https://github.com/alvarogarcia7/javascript-simple-sessions/tree/master/trello-cards&#34; target=&#34;_blank&#34;&gt;small tool to modify the titles of the trello card in a trello board&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;technical-description&#34;&gt;Technical description&lt;/h2&gt;

&lt;p&gt;It works by applying a function to the existing title (because we wanted to remove a prefix from the existing title).&lt;/p&gt;

&lt;p&gt;The modification is done, not through the API, but simulating user interaction:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click to edit the card&lt;/li&gt;
&lt;li&gt;Input the new title&lt;/li&gt;
&lt;li&gt;Save&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full code is available &lt;a href=&#34;https://github.com/alvarogarcia7/javascript-simple-sessions/tree/master/trello-cards&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This has been a great example of working with legacy code, as the tools to work with the existing product are not the ones you would like to have and an imaginative solution provides a way out of the tar pit.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Convert a project from npm to yarn</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/03/convert-a-project-from-npm-to-yarn/</link>
      <pubDate>Fri, 03 Mar 2017 11:09:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/03/convert-a-project-from-npm-to-yarn/</guid>
      <description>

&lt;p&gt;At a  client, we&amp;rsquo;re converting all projects (i.e., sites, services, libraries) from &lt;code&gt;npm&lt;/code&gt; to &lt;code&gt;yarn&lt;/code&gt;. Mostly for the speed (as it uses the internal cache).&lt;/p&gt;

&lt;h2 id=&#34;step-by-step-guide&#34;&gt;Step by step guide&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Install yarn in your local environment

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yarnpkg.com/lang/en/docs/install/&#34; target=&#34;_blank&#34;&gt;https://yarnpkg.com/lang/en/docs/install/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;yarn install&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This will create a &lt;code&gt;yarn.lock&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Add that file to the repo: &lt;code&gt;git add yarn.lock&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Modify Dockerfile

&lt;ul&gt;
&lt;li&gt;Install yarn  (in the Dockerfile). Idea: shortcut this execution with &lt;code&gt;yarn --version&lt;/code&gt; in case it is installed&lt;/li&gt;
&lt;li&gt;Configure the PATH variable (ENV PATH &amp;hellip;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ADD yarn.lock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;npm install&lt;/code&gt; with &lt;code&gt;yarn install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Modify pipeline

&lt;ul&gt;
&lt;li&gt;See example (below)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install_yarn&lt;/code&gt;. Idea: shortcut this execution with &lt;code&gt;yarn --version&lt;/code&gt; in case it is installed&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;npm install&lt;/code&gt; with &lt;code&gt;yarn install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Test it&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h2&gt;

&lt;p&gt;Build step: execute shell&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; install_yarn &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  yarn --version &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; curl -o- -L https://yarnpkg.com/install.sh &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; bash
  &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.yarn/bin:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

install_yarn

yarn install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in March 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/01/self-study-in-march-2017/</link>
      <pubDate>Wed, 01 Mar 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/01/self-study-in-march-2017/</guid>
      <description>

&lt;h2 id=&#34;volver&#34;&gt;¿Volver?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://raulavila.com/2017/01/volver/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Raul Avila comparing the options between working in the UK and in Spain (where he&amp;rsquo;s originally from). Inspired by other professionals (e.g., David Bonilla, Jerónimo Palacios).&lt;/p&gt;

&lt;p&gt;Tags: spanish, jeronimo-palacios, david-bonilla, expat, comparison, raul-avila, united-kingdom, spain&lt;/p&gt;

&lt;h2 id=&#34;donkey-code&#34;&gt;Donkey code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://einarwh.wordpress.com/2017/01/21/donkey-code/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Einar W. Høst in which he introduces the concept of a &amp;lsquo;missing domain term&amp;rsquo; with the example of a donkey being &amp;lsquo;closely related to a horse, though not exactly the same&amp;rsquo;&lt;/p&gt;

&lt;p&gt;Tags: einar-host, donkey-code, ddd, domain-driven-development, domain, abstraction, missing-abstraction, business-logic&lt;/p&gt;

&lt;h2 id=&#34;10-habits-that-change-boys-into-men&#34;&gt;10 Habits That Change Boys Into Men&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/the-mission/10-habits-that-change-boys-into-men-b103c47d47e0&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Benjamin P. Hardy on why some men are still boys (e.g., expectations from society) and what can boys do to turn into men.&lt;/p&gt;

&lt;p&gt;Tags: benjamin-hardy, psychology, learning, evolution&lt;/p&gt;

&lt;h2 id=&#34;on-sabbaticals&#34;&gt;On Sabbaticals&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://indecorous.com/sabbaticals/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about sabbaticals by Ian Malpass. In it, he explains why we need sabbaticals, how to take them, and some details about them.&lt;/p&gt;

&lt;p&gt;Some principles:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;If you think you can’t take a sabbatical, you need to take your sabbatical.&lt;/li&gt;
&lt;li&gt;Day-to-day work pushes us to think tactically; sabbaticals push us to think strategically. Both are valuable.&lt;/li&gt;
&lt;li&gt;Do the work to gain confidence that you can be away, and then trust that that the mechanisms you put in place are good.&lt;/li&gt;
&lt;li&gt;Just because your team can function without you, doesn’t mean they want to.&lt;/li&gt;
&lt;li&gt;There is rarely a good time to leave work for an extended period of time - don’t let this stop you.&lt;/li&gt;
&lt;li&gt;Allow room for serendipity, the unexpected, and exploration.&lt;/li&gt;
&lt;li&gt;Plan for your return before you leave, to avoid worry.&lt;/li&gt;
&lt;li&gt;The sabbatical process doesn’t end after six weeks.&lt;/li&gt;
&lt;li&gt;You don’t have to be unhappy or frustrated in your work to go on sabbatical.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: sabbatical, ian-malpass, team-management, career&lt;/p&gt;

&lt;h2 id=&#34;my-favorite-command-line-utilities&#34;&gt;My favorite command-line utilities&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hackernoon.com/macbook-my-command-line-utilities-f8a121c3b019#.3hpq7suhj&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Vitaly Belman in which he explains his curated list of utilities for the terminal&lt;/p&gt;

&lt;p&gt;Tags: vitaly-belman, terminal, cli, application, utility, tig, git&lt;/p&gt;

&lt;h2 id=&#34;three-common-mistakes-of-the-first-time-tech-lead&#34;&gt;Three Common Mistakes of the First Time Tech Lead&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.thoughtworks.com/insights/blog/three-common-mistakes-first-time-tech-lead&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Patrick Kua, in which he explains what are the anti-patterns (or mistakes) of a tech lead. They do not only apply to first timers, but more experienced ones as well.&lt;/p&gt;

&lt;p&gt;I especially like a comment:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Take all blame and give all credit: I ensure I always take the blame from the stakeholders when something is broken but when they praise, I say its all my teams efforts and I am just guiding them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://disqus.com/by/ravensnowbird/&#34; target=&#34;_blank&#34;&gt;ravensnowbird&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: patrick-kua, tech-lead, leadership, team-management, mistake&lt;/p&gt;

&lt;h2 id=&#34;sentimental-versioning&#34;&gt;Sentimental Versioning&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://sentimentalversioning.org/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; (unknown author) on alternatives to semver (semantic versioning).&lt;/p&gt;

&lt;p&gt;Tags: semver, semantic-versioning, sentimental-versioning, humor, parody&lt;/p&gt;

&lt;h2 id=&#34;devoxx-2015-how-to-become-a-java-champion&#34;&gt;Devoxx 2015: How to Become a Java Champion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;http//www.youtube.com/watch?v=otMc_3Dz3hU&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt; to Arun Gupta in which he explains what is a Java champion and how to become one.&lt;/p&gt;

&lt;p&gt;Tags: interview, arun-gupta, java-champion, devoxx&lt;/p&gt;

&lt;h2 id=&#34;how-can-i-become-a-champion-programmer&#34;&gt;How Can I Become a Champion Programmer?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javaspecialists.eu/archive/Issue227.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Heinz M. Kabutz on how to become a java champion&lt;/p&gt;

&lt;p&gt;Tags: heinz-kabutz, java-champion&lt;/p&gt;

&lt;h2 id=&#34;the-myth-of-using-scala-as-a-better-java&#34;&gt;The myth of using Scala as a better Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://appliedscala.com/blog/2017/myth-of-scala-as-better-java/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Denis Kalinin disproving &amp;lsquo;Java as a better Scala&amp;rsquo;. He covers dependency injection, database access, serialization.&lt;/p&gt;

&lt;p&gt;Tags: scala, java, comparison, orm, denis-kalinin, macwire, dependency-injection, serialization, database, myth&lt;/p&gt;

&lt;h2 id=&#34;the-eigenvector-of-why-we-moved-from-language-x-to-language-y&#34;&gt;The eigenvector of &amp;ldquo;Why we moved from language X to language Y&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://erikbern.com/2017/03/15/the-eigenvector-of-why-we-moved-from-language-x-to-language-y.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Erik Bern on the statistical analysis (based on people writing blog posts) of moving from language X to language Y.&lt;/p&gt;

&lt;p&gt;This can help predict which languages will be more prevalent in the future.&lt;/p&gt;

&lt;p&gt;Tags: eigenvector, statistic, erik-bern, language, programming-language, java, c, cplusplus, go, python&lt;/p&gt;

&lt;h2 id=&#34;facebook-s-code-quality-problem&#34;&gt;Facebook’s code quality problem&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.darkcoding.net/software/facebooks-code-quality-problem/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Graham King on the problems that Facebook is facing, at the code level, and how they solve some of them&lt;/p&gt;

&lt;p&gt;Tags: graham-king, facebook, quality, architecture, code-quality&lt;/p&gt;

&lt;h2 id=&#34;the-key-lesson-from-our-serverless-migration&#34;&gt;The key lesson from our serverless migration&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive1.com/?u=abe09ce689751513abf6f095f&amp;amp;id=6ecb59a937&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Gojko Adzic on serverless, a kind of lessons learned. Explains that their system can take 50% more users at 50% of the original cost.&lt;/p&gt;

&lt;p&gt;Also explains three ways of authenticating users: use IAM users, use Cognito, pre-sign URLs&lt;/p&gt;

&lt;p&gt;Tags: lessons-learned, gojko-adzic, serverless, paas, platform-as-a-service, retrospective, money, total-cost-of-ownership, tco,&lt;/p&gt;

&lt;h2 id=&#34;when-automation-goes-horribly-wrong&#34;&gt;When automation goes horribly wrong&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Gojko Adzic on a story of a manual process that was automated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Because it focused too much on replacing humans instead of assisting them, MiDAS actually made it more difficult for clerks to access the data they needed for review&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This reminded me of the framework vs library discussion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in frameworks you relinquish the control, putting your code into the allocated holes.&lt;/li&gt;
&lt;li&gt;using the automated system, you can only check the claim at a certain spot, where the system lets you do.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The system and the framework have been designed to take control of the situation. Both successful at what they do&lt;/p&gt;

&lt;p&gt;Tags: gojko-adzic, automation, framework, library, framework-vs-library, comparison, analogy&lt;/p&gt;

&lt;h2 id=&#34;how-i-store-my-1-s-and-0-s-zfs-bargain-hp-microserver-joy&#34;&gt;How I Store My 1’s and 0’s: ZFS  Bargain HP Microserver = JOY&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://mocko.org.uk/b/2012/06/17/how-i-store-my-1s-and-0s-zfs-bargain-hp-microserver-joy/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how Alex stores his backups, using a microserver&lt;/p&gt;

&lt;p&gt;Tags: backup, microserver, raid, zfs, backup-strategy&lt;/p&gt;

&lt;h2 id=&#34;meeting-policy&#34;&gt;Meeting policy&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/ueno/meeting-policy-9b04593d1b28&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by the Ueno team on how they handle meetings. Interesting that they require manager approval for meetings over a certain threshold (more than four people or more than half an hour).&lt;/p&gt;

&lt;p&gt;Tags: ueno, meeting-policy, meeting, approval&lt;/p&gt;

&lt;h2 id=&#34;a-brief-history-of-random-numbers&#34;&gt;A Brief History of Random Numbers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.freecodecamp.com/a-brief-history-of-random-numbers-9498737f5b6c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Carl Tashian on how random numbers have evolved (from dice to pseudo random number generator and random number generators). Explain how some companies that need true randomness (e.g., certificates company) generate them.&lt;/p&gt;

&lt;p&gt;Tags: carl-tashian, dice, random-number, randomness, prng, pseudo-random-number-generator, random-number-generator, number-generator, true-random-number-generator&lt;/p&gt;

&lt;h2 id=&#34;unlock-honest-feedback-with-this-one-word&#34;&gt;Unlock honest feedback with this one word&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://m.signalvnoise.com/unlock-honest-feedback-with-this-one-word-dcaf3839e7ee&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Claire Lew, in which she suggests to ask for &amp;lsquo;advice&amp;rsquo; instead of asking for &amp;lsquo;feedback&amp;rsquo; as a way of getting more honest and better responses.&lt;/p&gt;

&lt;p&gt;Tags: claire-lew, advice, feedback, feedback-process, improvement&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comparing options for parametrized testing in javascript</title>
      <link>https://alvarogarcia7.github.io/blog/2017/02/26/comparing-options-for-parametrized-testing-in-javascript/</link>
      <pubDate>Sun, 26 Feb 2017 15:42:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/02/26/comparing-options-for-parametrized-testing-in-javascript/</guid>
      <description>

&lt;p&gt;We explore how to use parametrized tests (&lt;a href=&#34;https://github.com/junit-team/junit4/wiki/Parameterized-tests&#34; target=&#34;_blank&#34;&gt;example in java&lt;/a&gt;, &lt;a href=&#34;https://jeremybytes.blogspot.co.uk/2014/10/parameterized-tests-with-nunit.html&#34; target=&#34;_blank&#34;&gt;example in c#&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The tests are written using &lt;code&gt;mocha&lt;/code&gt; syntax: &lt;code&gt;describe&lt;/code&gt;, &lt;code&gt;it&lt;/code&gt;. Using &lt;code&gt;chai&lt;/code&gt; for expectations: &lt;code&gt;assert&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note: the example used below (adding to an array) is simple enough to be understood by everybody, without having to explain the domain. The real tests can have a more complicated environment or domain. This is just an example.&lt;/p&gt;

&lt;h2 id=&#34;using-a-custom-syntax&#34;&gt;Using a custom syntax&lt;/h2&gt;

&lt;p&gt;This is just an example of some possible syntax, not using any (currently) existing framework.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;describe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;adding to a list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()=&amp;gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;newTestCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;to an empty list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
               &lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]})&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;newTestCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;to a non-empty list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
               &lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]})&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;testCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;flexible&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;verbose&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;too close to the the real test syntax?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;how to explain that the &lt;code&gt;it&lt;/code&gt; will execute all test cases?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;magic variable &lt;code&gt;testCase&lt;/code&gt;: linting, editor complaining about it&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;using-an-in-place-executor&#34;&gt;Using an in-place executor&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;describe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;adding to a list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()=&amp;gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;runs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;to an empty list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
               &lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]},&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;to a non-empty list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
               &lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
               &lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]}]&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;runs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testCase&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;testCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;flexible&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;flexible to use any &lt;code&gt;testCase&lt;/code&gt; variable name (e.g., &lt;code&gt;testCase&lt;/code&gt;, &lt;code&gt;tC&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;verbose&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;using the real test syntax&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;duplicate the test runner in every case&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;test-related features mixed with business/domain tests&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;using-it-damp&#34;&gt;Using &lt;code&gt;it&lt;/code&gt;, DAMP&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;describe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;adding to a list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()=&amp;gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;to an empty list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;to a non-empty list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;one test per case&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;the test is self-contained (DAMP)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;using-it-dry&#34;&gt;Using &lt;code&gt;it&lt;/code&gt;, DRY&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;describe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;adding to a list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()=&amp;gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;to an empty list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// use explaining variables&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;pushingToMatches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;to a non-empty list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// not using explaining variables&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;pushingToMatches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pushingToMatches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;one test per case&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;no repeated code&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;the testing method &lt;code&gt;pushingToMatches&lt;/code&gt; requires access to all test inputs and outputs&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;the testing method &lt;code&gt;pushingToMatches&lt;/code&gt; breaks the SRP: act and assert&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;using-it-dry-fluent&#34;&gt;Using &lt;code&gt;it&lt;/code&gt;, DRY+Fluent&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;describe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;adding to a list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()=&amp;gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;to an empty list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// use explaining variables&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;pushingTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;to a non-empty list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// not using explaining variables&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;pushingTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pushingTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)};&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;one test per case&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;no repeated code&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;readable&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;verbose, one test per case, when this could be expressed in some other way&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;the testing method &lt;code&gt;pushingTo&lt;/code&gt; creates space for the difference in act and assert&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;sources&#34;&gt;Sources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rjzaworski.com/2013/01/parameterized-testing-in-javascript&#34; target=&#34;_blank&#34;&gt;https://rjzaworski.com/2013/01/parameterized-testing-in-javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.adequatelygood.com/Writing-Testable-JavaScript.html&#34; target=&#34;_blank&#34;&gt;http://www.adequatelygood.com/Writing-Testable-JavaScript.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Example in java: &lt;a href=&#34;https://github.com/junit-team/junit4/wiki/Parameterized-tests&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Example in C#: &lt;a href=&#34;https://jeremybytes.blogspot.co.uk/2014/10/parameterized-tests-with-nunit.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(This post is a modified version of the session available &lt;a href=&#34;https://github.com/alvarogarcia7/javascript-simple-sessions/blob/master/parametrized-testing/ideas.md&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>