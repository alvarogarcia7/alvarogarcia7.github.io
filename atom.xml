<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-04-25T14:05:57+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I Read Apprenticeship Patterns]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/25/how-i-read-apprenticeship-patterns/"/>
    <updated>2015-04-25T13:49:01+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/25/how-i-read-apprenticeship-patterns</id>
    <content type="html"><![CDATA[<p>At the Craft Conf 2015 I saw someone with the book <a href="http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382">Apprenticeship Patterns</a> by <a href="http://twitter.com/@davehoover">Dave Hoover</a> and <a href="http://twitter.com/@ade_oshineye">Adewale Oshineye</a> and asked them about the book. After praising the contents, they asked me how to approach the book.</p>

<p>I recalled reading it non-sequentially, and explained it to them:</p>

<ul>
<li>Read the introduction, preface, etc first</li>
<li>When you get to the patterns, pick one at random</li>
<li><code>10</code>: Read it and navigate through the <code>see also</code>.</li>
<li>If there are unread chapters from the <code>see also</code>, <code>goto 10</code></li>
<li>Find the remaining unread chapters and read them, try to apply the same algorithm</li>
<li>Read the appendices and finishing words</li>
</ul>


<p>Reading a connected chapter after the first one made me connect the dots and understand it much better than reading them sequentially.</p>

<p>PS: This post was extracted from this one: <a href="../../../../2015/02/02/your-first-language/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demand for TDD and Refactor]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/25/demand-for-tdd-and-refactor/"/>
    <updated>2015-04-25T13:28:20+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/25/demand-for-tdd-and-refactor</id>
    <content type="html"><![CDATA[<p>When I went to the Jason Gorman&rsquo;s TDD workshop (experience report <a href="../../../../2015/04/12/jason-gorman-tdd-intensive-workshop">here</a>), he said something interesting regarding refactor and TDD:</p>

<blockquote><p>In job offers / advertisements, TDD is much more in demand than refactor. But the latter is included in the former as an integral part.</p>

<p>Jason Gorman</p></blockquote>

<p>I agree with the second thought: you cannot properly do TDD without refactoring, as it is an integral part; also the third phase.</p>

<p>For me, sometimes refactoring is the difference between code and &ldquo;Clean Code&rdquo; (as defined in the book by the same title). If I cannot find the (algorithmic) pattern for the software I&rsquo;m writing, I try to introduce scaffolds to keep investigating until I can find a viable, general solution (if the problem requires it.)</p>

<p>Even after doing the refactor <code>replace algorithm</code>, the code might not have the responsibilities in the right place, the methods might be long, value objects not extracted yet, etc. This is where further refactor is needed to introduce all those qualities in the piece of software.</p>

<p>I believe that we programmers have done a bad job of communicating with the rest of the organization what refactoring is about. It has nothing to do with beauty, style or design (in the visual sense) but is related to maintainability, coupling, defects and quality. Money, in the long run, as its objective is to make it cheaper to change in the future, a better investment and ROI. This is the common language that the rest of the company understands.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talks I Have Attended at the Craft Conf 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/25/talks-i-have-attended-at-the-craft-conf-2015/"/>
    <updated>2015-04-25T12:25:09+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/25/talks-i-have-attended-at-the-craft-conf-2015</id>
    <content type="html"><![CDATA[<p>These are the talks I&rsquo;ve attended at the Craft Conf 2015:</p>

<h2>Thursday 23th</h2>

<ul>
<li>Opening keynote by <a href="http://twitter.com/@tastapod">Dan North</a> and <a href="http://twitter.com/@jessitron">Jessica Kerr</a></li>
<li>Writing testable code - A functional programming point of view, by <a href="http://twitter.com/@old_sound">Alvaro Videla</a></li>
<li>Coding Culture, by <a href="http://twitter.com/@svenpet">Sven Peters</a></li>
<li>OnConnectionLost: the life of an offline web application, by <a href="http://twitter.com/@sgrewenig">Stefanie Grewenig</a> and <a href="http://twitter.com/@jthoenes">Johannes Thönes</a></li>
<li>Concurrency: It&rsquo;s harder (and easier) than you think, by <a href="http://twitter.com/@paulrabutcher">Paul Butcher</a></li>
<li>Testing and Integration (the remix), by <a href="http://twitter.com/@randommood">Inés Sombra</a></li>
<li>Beyond Features: Rethinking agile planning and tracking, by <a href="http://twitter.com/@tastapod">Dan North</a></li>
<li>Closing keynote by <a href="http://twitter.com/@alfrehn">Alf Rehn</a></li>
</ul>


<h2>Friday 24th</h2>

<ul>
<li>Opening keynote: The New New Software development game: Containers, Microservices and Contract tests, by <a href="http://twitter.com/@mpoppendieck">Mary Poppendieck</a></li>
<li>Apprenticeship patterns, revisited, by <a href="http://twitter.com/@davehoover">Dave Hoover</a></li>
<li>Interaction Driven Design, by <a href="http://twitter.com/@sandromancuso">Sandro Mancuso</a></li>
<li>The hidden dimension of refactoring, by <a href="http://twitter.com/@mfeathers">Michael Feathers</a></li>
<li>Why is an API like a puppy, by <a href="http://twitter.com/@ade_oshineye">Adewale Oshineye</a></li>
<li>Microservice antipatterns, by <a href="http://twitter.com/@tsaleh">Tammer Saleh</a></li>
</ul>


<p>I couldn&rsquo;t attend the last talk nor the keynote as I had to get to the airport</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Legacy Code Is About]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/21/what-legacy-code-is-about/"/>
    <updated>2015-04-21T22:09:54+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/21/what-legacy-code-is-about</id>
    <content type="html"><![CDATA[<p>In his book <a href="http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/ref=sr_1_1?ie=UTF8&amp;qid=1429647115&amp;sr=8-1&amp;keywords=legacy+code+feathers">Working effectively with legacy code</a>, <a href="https://twitter.com/mfeathers">Michael Feathers</a> describes:</p>

<blockquote><p>[&hellip;] legacy code as code without tests. It is a good working definition, and it points to a solution [&hellip;]</p>

<p>M Feathers, in the preface of Working effectively with legacy code</p></blockquote>

<p>I really like this definition. It is objective and measurable. But this is also a downside. Let&rsquo;s take any concurrent code, for example: you can achieve 100% coverage on a single thread and the program could have defects when executed in parallel. But this might be an outlier, as concurrency is difficult to test. Let&rsquo;s take another example.</p>

<p>Let&rsquo;s a imagine a non-concurrent (i.e., single thread) code composed by a single class (no collaborators; just one responsibility; it is &ldquo;Clean Code&rdquo;, as defined per R.C. Martin&rsquo;s book) that has some happy paths as well as some error-handling cases. As usual. The original code writer has decided to test only the happy paths. They deployed it to production, as the product was ready. You inherit this code.</p>

<p>After the system is deployed to production, you start receiving defect reports on the happy paths (the tested part). The first one, you cross it off as an one-time thing. Then the second and third come. You take a deeper look and start seeing some inconsistencies in the tests, some tests that actually do not test anything interesting:</p>

<ul>
<li>some test the test framework</li>
<li>some the language</li>
<li>some test a happy path that works by pure luck</li>
<li>some functionalities are tested (not all happy paths)</li>
<li>there&rsquo;s actually a defect converted into a specification (test) (??)</li>
</ul>


<p>Now, I ask myself this question: when did I start considering this code as legacy? When I saw the bug reports in production (several in a row) or when I saw the poor suite of tests?</p>

<p>I do think this codebase is legacy, no matter when I realized about it. But my first instinct would be to consider it legacy from the moment I received the bug reports, as I lost the trust in that code.</p>

<p>Because for me, <strong>legacy code is about trust, not tests</strong>. You can have tests but no trust; you can have trust but no tests (the latter is more difficult in non-trivial codebases.)</p>

<p>This is why I would like to update the definition:</p>

<blockquote><p>Legacy code is code without tests that provide trust to all your stakeholders</p></blockquote>

<p>The last part is very important, because the definition is no longer objective but depends from person to person. If the codebase doesn&rsquo;t have tests, it is definitely legacy. But even if it has them, would you consider the given example a legacy or non-legacy code?</p>

<p>These stakeholders include everyone affected or affecting the product: owners, developer team (in the scrum, wide sense), users, clients, &hellip;</p>

<p>Full disclosure: I&rsquo;ve written plenty of legacy code. Code which I thought was good but really wasn&rsquo;t. Even with tests, even with TDD, even with Clean Code. This has made me change my mind about what legacy code is all about.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Annotations and Aspects in Java]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/21/annotations-and-aspects-in-java/"/>
    <updated>2015-04-21T07:23:23+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/21/annotations-and-aspects-in-java</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve written a sample project with an annotation and an aspect to intercept it and decorate it.</p>

<p>The code provides a way of doing <code>try|catch</code>, specifying an exception to be caught.</p>

<p>The source code is available <a href="https://github.com/alvarogarcia7/annotation-aspect-java">here</a></p>

<h2>In the process</h2>

<p>This has taken me approximately one hour to prepare the spike and half more to refactor and massage a bit.</p>

<p>If you want to see the raw details, the refactor has been committed step by step (the spike hasn&rsquo;t). The unmassaged code can be found <a href="https://github.com/alvarogarcia7/annotation-aspect-java/tree/d5e61ca56a38b1611c9acaa61a2e169b14d19d1e">here</a>. The massaged version is at the <a href="https://github.com/alvarogarcia7/annotation-aspect-java/">tip of the arrow</a></p>

<h2>More information</h2>

<p>Regarding <code>annotations</code> (like @Override):</p>

<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/annotations/">This official article</a> on annotations is useful.</li>
<li><a href="http://www.vogella.com/tutorials/JavaAnnotations/article.html">This article</a> by Lars Vogel guides you step by step.</li>
<li><a href="http://tutorials.jenkov.com/java/annotations.html">This article</a> by Jakov Jenkov is very nice.</li>
<li><a href="http://crunchify.com/understanding-java-annotation-annotation-examples/">This article</a> helps you to understand what an annotation is and what to use it for.</li>
</ul>


<p>Regarding <code>aspect</code> (based on AspectJ):</p>

<ul>
<li><a href="http://stackoverflow.com/questions/14714092/spring-3-2-aop-intercepting-methods-by-annotation">This question</a> has been my main source of information / inspiration for the spring + aspectj configuration</li>
</ul>


<h2>Conclusions</h2>

<p>One of the drawbacks that I find to common examples or tutorials is that they&rsquo;re not complete. They show you part of the information, but not the whole. While this helps most of the readers, there are library incompatibilities, defects, specific versions, etc. This is why I like to post the whole solution, including <code>pom.xml</code> (dependencies) and tests.</p>

<p>Having less documentation for developers can be acceptable if you have tests / more tests; of course, as long as other developers can follow your thought while developing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging Is a Feature]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/19/logging-is-a-feature/"/>
    <updated>2015-04-19T23:43:10+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/19/logging-is-a-feature</id>
    <content type="html"><![CDATA[<p>At a client, we&rsquo;re facing this challenge: we cannot access production logs, as we don&rsquo;t have access to production environments. The solution we&rsquo;ve chose is to implement the logging component as a layer on top of <a href="http://www.splunk.com/">Splunk</a>.</p>

<p>This formatter layer &ndash;per component&ndash; accesses a generic layer &ndash;for the whole company&ndash; that accesses splunk. In this manner, it is very easy to reuse the splunk connection and configuration and inject mocks. Also helps with the local environment: you always log to console (even if in production you don&rsquo;t have access to it) and can disable this in local, not needing a local splunk installation.</p>

<p>Strategies for dealing with this:</p>

<ul>
<li>functional logger: no shared state

<ul>
<li>can only log information available in this scope: parameters, attributes, static information</li>
</ul>
</li>
<li>stateful logger: information is added to the threadContext and logged whenever necessary

<ul>
<li>can log information in this scope plus any of the previous invokings.</li>
<li>the problem is precisely sharing state: you have to control all the possible parents to know where this data comes from. A piece of information may come from any source.</li>
<li>Lose the reference of who is invoking you, as there is no customization for this. (only using implementation)</li>
<li>Speak two different languages: one for logging and one for business logic</li>
</ul>
</li>
<li>mixed: mix and match the best of both worlds.

<ul>
<li>The problem with the shared state can be solved if no data is overwritten and any information is stored in a map where the key is the fully qualified (FQ) method name (or FQ class name + FQ method name)</li>
</ul>
</li>
</ul>


<p>The GOOS book explains this very well on the 20th chapter, first half &ldquo;logging is a feature&rdquo;. If we log as described in chapters 19 and 20, some of the problems are reduced:</p>

<ul>
<li>multiple levels of abstraction</li>
<li>indirect control over logging. decide in a single place whether to log exceptions of each kind or not</li>
<li>remove &ldquo;implementation details&rdquo; such as &ldquo;log.isDebugEnabled&rdquo;</li>
<li>remove performance issues: no need to build strings for logging every time, only need to pass objects. inside the logging layer, if the logger is enabled for that level, then spend the time building strings and print them</li>
</ul>


<p>We should remember that:</p>

<ul>
<li>Whenever logging becomes useful data (for the stakeholders) it no longer is a debug information and needs to be tested (automatically). In my opinion, it is not enough to test it daily when debugging, as these stakeholders rely on the data. Also, humans are not good detecting small differences, while machines excel at it.</li>
<li>Why treat the logging feature different from any other? It is an investment, like any other, and as such should work properly</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk: Simplicity Matters]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/18/talk-simplicity-matters/"/>
    <updated>2015-04-18T14:44:06+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/18/talk-simplicity-matters</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve seen this video by <a href="http://twitter.com/@richhickey">Rich Hickey</a>: &ldquo;<a href="https://www.youtube.com/watch?v=rI8tNMsozo0">Simplicity matters</a>&rdquo;, taken from <a href="http://twitter.com/@trikitrok">Manuel Rivero</a>&rsquo;s google plus&#8217; <a href="https://plus.google.com/u/0/117817370205182982732/posts/W6Gd9v67BgS?cfem=1">site</a></p>

<p>here are my notes:</p>

<ul>
<li>the software is the elephant</li>
<li>do more, do it differently, do it better</li>
<li>complexity of the elephant is going to dominate what you can do</li>
<li>your ability to reason about your program is critical</li>
<li>design is about pulling things apart</li>
<li>become familiar by learning, trying</li>
<li>&ldquo;We can be creating the exact same programs out of significantly simpler components&rdquo;. Rich Hickey</li>
</ul>


<p>Complexity vs simplicity:</p>

<table>
<thead>
<tr>
<th>Complexity     </th>
<th> Simplicity</th>
</tr>
</thead>
<tbody>
<tr>
<td>state, objects </td>
<td> values</td>
</tr>
<tr>
<td>methods </td>
<td> functions, namespaces</td>
</tr>
<tr>
<td>variables </td>
<td> managed refs</td>
</tr>
<tr>
<td>inheritance, switch, matching  </td>
<td> polymorphism à la carte</td>
</tr>
<tr>
<td>syntax </td>
<td> data</td>
</tr>
<tr>
<td>imperative loops, fold </td>
<td> set functions</td>
</tr>
<tr>
<td>actors </td>
<td> queues</td>
</tr>
<tr>
<td>ORM </td>
<td> declarative data manipulation</td>
</tr>
<tr>
<td>conditionals </td>
<td> rules</td>
</tr>
<tr>
<td>inconsistency </td>
<td> consistency </td>
</tr>
</tbody>
</table>


<ul>
<li>he does not agree on &ldquo;simplicity&rdquo; on the agile manifesto</li>
<li>simplicity is not about you. simplicity is a lot of hard work

<ul>
<li>clicked with paul graham&rsquo;s <a href="http://www.paulgraham.com/avg.html">LISP startup</a></li>
</ul>
</li>
<li>simplicity is not an objective</li>
</ul>


<p>Order is all over the place:</p>

<table>
<thead>
<tr>
<th>Complex  </th>
<th> Simple</th>
</tr>
</thead>
<tbody>
<tr>
<td>positional arguments </td>
<td> named arguments or map</td>
</tr>
<tr>
<td>syntax </td>
<td> data</td>
</tr>
<tr>
<td>product types  </td>
<td> associate records</td>
</tr>
<tr>
<td>imperative programs </td>
<td> declarative programs</td>
</tr>
<tr>
<td>prolog </td>
<td> datalog</td>
</tr>
<tr>
<td>call chains </td>
<td> queues</td>
</tr>
<tr>
<td>XML </td>
<td> JSON, Clojure literals</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Guardian of the Source]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/17/the-guardian-of-the-source/"/>
    <updated>2015-04-17T22:01:48+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/17/the-guardian-of-the-source</id>
    <content type="html"><![CDATA[<p>Overheard today at the office, while they were discussing the approval of a pull request:</p>

<blockquote><p>[Pull request reviewer] - I&rsquo;m sorry, can&rsquo;t approve this: I don&rsquo;t really agree with this design. Isn&rsquo;t there an alternative for this?</p>

<p>[Pull request author] - [redacted], of course you don&rsquo;t, you&rsquo;re the guardian of the source</p>

<p>[PR reviewer] - Well, sometimes I&rsquo;m a bit picky about introducing bad code into our codebase.</p></blockquote>

<p>This has made me think about Gandalf blocking the path of Balrog Demon, shouting &ldquo;<a href="http://knowyourmeme.com/memes/you-shall-not-pass">you shall not pass</a>&rdquo; while on top of the bridge.</p>

<p>This is part of the objectives of doing a pull request before merging code: stop the bad code<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> before it is merged to the codebase.</p>

<p>Later, as you start having <a href="http://en.wikipedia.org/wiki/Broken_windows_theory">broken windows</a> in your codebase, it is easier that you start introducing more. Exactly about this is the <a href="http://en.wikipedia.org/wiki/Broken_windows_theory">broken windows theory</a>.</p>

<p>On the other hand, if you try to block that bad code before it is merged, it is cheaper to remove it: nothing depends on it, you introduce no repetition, etc<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>This also connects with the idea present in <a href="http://www.amazon.com/The-Software-Craftsman-Professionalism-Pragmatism/dp/0134052501">Software Craftsmanship, now called The Software Craftsman</a>, about preserving value for investors and treat software as an investment (with positive ROI) rather than a sunk cost.</p>

<p>It is being picky and, to the most of our possibilities, do not letting any defects nor bad code into the codebase. A hedge fund manager would not let any toxic or dubious asset into the managed funds. This would be counterproductive in the long run (maybe even in the short one) and would be not doing their job correctly. Why is it that some developers suggest or accept these toxic assets?</p>

<p>So, at least for me, would be an honor to be called the &ldquo;Guardian of the Source&rdquo; by someone I respect, as long as this is a serious proposition (i.e., not a joke of some kind).</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Bad code can be expressed in many ways: long methods, bad naming, breaking design principles (e.g., SOLID, KISS, DRY - OAOO), code with defects, no tests or no coverage, etc.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>A source is <a href="http://c2.com/cgi/wiki?DiscoverDefectsEarly">Discover defects early</a>. Another is <a href="http://developers.slashdot.org/story/03/10/21/0141215/software-defects---do-late-bugs-really-cost-more">this paper</a> that cites the ratio of fixing it later to 5:1 (five times more expensive).<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inserting Clojure Code in Octopress]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/14/inserting-clojure-code-in-octopress/"/>
    <updated>2015-04-14T23:48:27+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/14/inserting-clojure-code-in-octopress</id>
    <content type="html"><![CDATA[<p>Inserting this code in the blog:</p>

<pre><code>```clojure
(defn all-access[k]
    (let [{:keys [a b] :as k}]
        (do a)
        (do (:b k))))
```
</code></pre>

<p>the octopress processor throws the error:</p>

<pre><code>Error: Pygments can't parse unknown language: clojure
Error: Run jekyll build --trace for more information.
</code></pre>

<p>A solution would be to include it as lisp code:</p>

<pre><code>```lisp
(defn all-access[k]
    (let [{:keys [a b] :as k}]
        (do a)
        (do (:b k))))
```
</code></pre>

<p>this is an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">defn</span> <span class="nv">all-access[k]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="nv">[{:keys</span> <span class="nv">[a</span> <span class="nv">b]</span> <span class="ss">:as</span> <span class="nv">k}]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">do</span> <span class="nv">a</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">do</span> <span class="p">(</span><span class="ss">:b</span> <span class="nv">k</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Destructuring as a Refactor in Clojure]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure/"/>
    <updated>2015-04-14T23:36:23+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/@trikitrok">Manuel</a> has taught us today about the default value while destructuring:</p>

<blockquote><p>The following example illustrates the use of an :as directive to bind a local with the entire map.</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (def point {:x 5 :y 7})
</span><span class='line'>#'user/point
</span><span class='line'>
</span><span class='line'>(let [{:keys [x y] :as the-point} point]
</span><span class='line'>         (println "x:" x "y:" y "point:" the-point))
</span><span class='line'>
</span><span class='line'>x: 5 y: 7 point: {:x 5, :y 7}</span></code></pre></td></tr></table></div></figure>


<blockquote><p>We&rsquo;ve now seen the :as directive used for both vectors and maps. In both cases the local is always assigned to the entire expression that is being destructured.</p></blockquote>

<p><a href="http://blog.jayfields.com/2010/07/clojure-destructuring.html">Source</a></p>

<p>This has been used for a method like this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">defn</span> <span class="nv">all-access[k]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do</span> <span class="p">(</span><span class="ss">:a</span> <span class="nv">k</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do</span> <span class="p">(</span><span class="ss">:b</span> <span class="nv">k</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>this has been refactored to this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">defn</span> <span class="nv">all-access[k]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="nv">[{:keys</span> <span class="nv">[a</span> <span class="nv">b]</span> <span class="ss">:as</span> <span class="nv">k}]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">do</span> <span class="nv">a</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">do</span> <span class="p">(</span><span class="ss">:b</span> <span class="nv">k</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>the best thing about this is I can introduce the keys to the array while keeping the original map (<code>k</code>) and, when I&rsquo;m ready, to change some of the accesses to <code>k</code> to its destructured variables.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redesign as a New TDD Phase]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/13/redesign-as-a-new-tdd-phase/"/>
    <updated>2015-04-13T22:00:45+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/13/redesign-as-a-new-tdd-phase</id>
    <content type="html"><![CDATA[<p>In the last TDD workshop (experience report <a href="../../../../2015/04/12/jason-gorman-tdd-intensive-workshop">here</a>), a conversation with <a href="http://twitter.com/@garymcleanhall">Gary McLean Hall</a> introduced to me this new concept of &ldquo;Redesign&rdquo; as a TDD phase.</p>

<h2>Concept</h2>

<p>As Gary introduced it to me<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, it is a phase that might appear after refactor.</p>

<p>It is about changing the outside design without changing the expected behavior. I thought this was also included in the refactor phase.</p>

<h2>How I do redesign</h2>

<p>I usually do this &ldquo;changing of the outside design&rdquo; by applying a series of refactors <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> to the production code but not changing the test code; using a bridge / adapter to get to the new API from the old one. Later you can inline the scaffold and use the new API directly.</p>

<p>The same for the test code: when you want to change design in the test code, do not modify production code (a.k.a. model code).</p>

<h2>Other thoughts</h2>

<p>Merriam-Webster defines &ldquo;<a href="http://www.merriam-webster.com/dictionary/redesign">redesign</a>&rdquo; as</p>

<blockquote><p>to change the design of (something)</p></blockquote>

<p>or</p>

<blockquote><p>to revise in appearance, function, or content</p></blockquote>

<p>an example:</p>

<blockquote><p>The book&rsquo;s cover has been redesigned for the new edition.</p></blockquote>

<p>The Refactoring book (by Martin Fowler) describes &ldquo;refactoring&rdquo; as</p>

<blockquote><p>Refactoring is the process of changing a software system in such a way that it does not alter the external behavior of the code yet improves its internal structure</p></blockquote>

<p>Taken literally, the public API is not internal but external structure, so changing it, should belong to a phase that is not refactor (see definition), nor red (no failing tests), not green (making it pass). Maybe this phase is &ldquo;redesign&rdquo; or we have to take the refactoring phase less literally so it includes redesign. Any thoughts?</p>

<h2>Other references</h2>

<p>I&rsquo;ve searched for redesign and refactor and <a href="https://practicingruby.com/articles/refactoring-is-not-redesign">this blog post</a> came up. They cite redesign as a way of rewriting</p>

<p><a href="http://stackoverflow.com/a/80758/1181094">This answer</a> and the <a href="http://stackoverflow.com/a/80758/1181094">original question</a> in StackOverflow is interesting</p>

<p>Redesign also appears cited in <a href="http://blog.testdouble.com/posts/2014-01-25-the-failures-of-intro-to-tdd.html">this blog post</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Excuse me if you explained it differently and I understand it wrong; you can always open a pull request to fix it <a href="https://github.com/alvarogarcia7/blog_source/tree/source/source/_posts">here</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>thanks for the clarifying refactor vs refactoring <a href="http://blog.4mm.co.uk/2012/12/11/pet-peeve-726.html">here</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experience Report: Test-driven Development Intensive, by Jason Gorman]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/12/jason-gorman-tdd-intensive-workshop/"/>
    <updated>2015-04-12T20:13:45+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/12/jason-gorman-tdd-intensive-workshop</id>
    <content type="html"><![CDATA[<p>This is an experience report on <a href="http://twitter.com/@jasongorman">Jason Gorman</a>&rsquo;s &ldquo;<a href="http://www.codemanship.co.uk/tdd.html">Test-driven development intensive workshop</a>&rdquo; on the April 11th, 2015</p>

<p>I attended this training in the <a href="http://www.grenfell-housing.co.uk/">Greenfell housing &amp; training</a> in South Wimbledon, London SW19 1JZ. The training spanned from 10:00 to 17:00 with a half an hour for lunch plus three or four 10-15 minute pauses. (7 - ,5 - 4 * 12/60 = ~5.7hours = 5 hours 45 minutes)</p>

<h2>Introduction</h2>

<p>There were 23 of us, including me. We spent some half hour introducing ourselves before the training started. I remember about a tester that came to the workshop &ldquo;wanting to know more about this testing methodology&rdquo;. Jason&rsquo;s answer was priceless: &ldquo;I&rsquo;m sorry but you came to the wrong place: this is not about testing&rdquo;.</p>

<p>At 10:00 sharp, he started a set of slides explaining what TDD is about, including:</p>

<ul>
<li>productivity:

<ul>
<li>no company is willing to give you a &ldquo;get out of jail free&rdquo; card to get out of the productivity zone</li>
<li>a drop in the productivity, at least for the first weeks</li>
<li>you have to find a time slot in your schedule to practice TDD, otherwise it&rsquo;s like learning to swim while crossing the Atlantic Ocean</li>
</ul>
</li>
<li>You have to feel uncomfortable not doing TDD</li>
<li>triangulation:

<ul>
<li>how each problem is different</li>
<li>you can only learn it by doing</li>
</ul>
</li>
<li>TDD styles:

<ul>
<li>Chicago style by Kent Beck. Reference book would be &ldquo;<a href="http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530">TDD by example</a>&rdquo;</li>
<li>London school or Mockist style by Steve Freeman and Nat Pryce. Reference book would be <a href="http://www.growing-object-oriented-software.com/">&ldquo;Growing object oriented software, guided by tests</a>&#8221;</li>
</ul>
</li>
<li>13 good habits for a sustainable test-driven development way</li>
<li>The basic TDD cycle:

<ul>
<li>an executable specification, encoded in a failing test</li>
<li>pass the test in the simplest way</li>
<li>refactor</li>
<li>(talking with another attendee, he described to me a new TDD phase called redesign. Maybe another post will explain this in deeper detail level)</li>
</ul>
</li>
<li>Some ideas about <a href="http://www.extremeprogramming.org/rules/simple.html">Simple design, simple development, simplicity</a> (<a href="http://www.extremeprogramming.org">XP</a>)</li>
<li>Shown a wrong example of mixing assertions (state) and verifications (interactions)</li>
<li>More than one reason to go wrong makes the code non-trivial anymore. Non-trivial code requires tests</li>
<li>You want to see the test failing for the right reason: remove / finish code that does not compile, fix null pointers, array out of bounds exceptions, etc. See it fail with &ldquo;was <X> but expected <Y>&rdquo; or &ldquo;NoInteractionException&rdquo; (hamcrest error and mockito error, respectively; both java)</li>
<li>Duplication as a sign of design smell</li>
<li>Process of generalizing code: discover the need for patterns</li>
<li>The most difficult skill in TDD is refactoring [and design; note is mine]. The TDD cycle is very easy.

<ul>
<li>TDD is much more in demand than refactoring, even though the former includes the latter</li>
</ul>
</li>
<li>Refactor until you&rsquo;re happy with the code, until you stand by it</li>
</ul>


<h2>CRC Cards</h2>

<p>A <a href="http://en.wikipedia.org/wiki/Class-responsibility-collaboration_card">Class-responsibility-collaboration card</a> is as follows:</p>

<ul>
<li>top: class name</li>
<li>half left: responsibilities</li>
<li>half right: collaborations</li>
</ul>


<p>Notes from the slides:</p>

<ul>
<li>each then is an outcome

<ul>
<li>do not mix outcomes and implications. An example: after winning the lottery, the money should be transferred to my bank account and I can buy a yacht. The former is an outcome (change in state) and the latter an implication (a new action that is now enabled)</li>
<li>an outcome is mapped to an assertion, while a collaboration is mapped to an interaction (verify in mockito)</li>
</ul>
</li>
<li>Given / When / Then is not enough to implement an executable specification. We need examples, detail</li>
<li>OO: send messages to distribute responsibility.

<ul>
<li>A Then is an unique responsibility</li>
</ul>
</li>
<li>Topmost object: no one connects with it</li>
<li>Put the work where the data is</li>
<li>Tell, don&rsquo;t ask <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> vs data driven design (tell a collaborator what to do vs ask for values and do the work yourself)</li>
<li>You want as few interactions as possible (related to the tell, don&rsquo;t ask)</li>
<li>More objects than outcomes is a bad thing (design smell) (?)</li>
<li>CRC is a very mechanical exercise, do not over think it</li>
<li>Describe outcomes as changes in OO (new, destroy, relationships, modify fields / state)</li>
<li>Continuous integration is not necessarily about shipping the code at each commit but having it shippable at each commit, as always having a product that is ready for its production phase</li>
</ul>


<h2>Exercises</h2>

<p>All exercises were done in pairs, always switching one half of the pair. He asked for someone in the pair to raise, especially if you were not a programmer (e.g., tester, manager)</p>

<h3>First exercise: Banking</h3>

<blockquote><p>Write a program that is capable of transferring money from an account to another</p></blockquote>

<p>A chance to practice arrange, act, assert</p>

<p>Later, he did it some live coding to develop the same kata, practicing &ldquo;<a href="http://www.infoq.com/presentations/TDD-as-if-You-Meant-It">TDD as if you meant it</a>&rdquo; (<a href="https://twitter.com/keithb_b">Keith Braithwaite</a>&rsquo;s original idea). We discovered together the &ldquo;primitive obsession&rdquo; and &ldquo;feature envy&rdquo; smells. We tried doing as few decisions as possible.</p>

<h3>Second exercise: Fibonacci sequence generator</h3>

<blockquote><p>Write a program that is capable of generating Fibonacci sequences, no shorter that 8 and no longer than 50</p></blockquote>

<p>A chance to practice baby steps.</p>

<p>My pair and I had the chance of discovering the importance of understanding correctly the requirements before writing a line of code. Also, I learned about the different ways of doing TDD. In this case, my pair executed the tests via a main (java class) and saw the failures on the console. When proposed to do it in the JUnit runner the IDE has, he said he preferred it in his own ways.</p>

<p>Jason did some live coding to show how he approached and triangulated this exercise.</p>

<p>I really liked some of what he said: I like to make the API correct from the first moment so I will ask questions that are correct but only check answers for things that I have already implemented. Example:</p>

<p>As the generated sequence can only have <code>8 &lt;= x &lt;= 50</code> elements, a list returning a single element would not be correct. So</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//class FibonacciTests</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">theFirstElementIsOne</span><span class="o">(){</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="k">new</span> <span class="nf">FibonacciSequence</span><span class="o">().</span><span class="na">generate</span><span class="o">(</span><span class="mi">8</span><span class="o">)[</span><span class="mi">0</span><span class="o">],</span> <span class="n">is</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Third exercise: FizzBuzz</h3>

<blockquote><p>Write a program that is capable of returning a string with all numbers less than 100 that are using the FizzBuzz pattern. This FizzBuzz pattern converts the divisors of 3 to &lsquo;fizz&rsquo;, divisors of 5 to &lsquo;buzz&rsquo; and divisors to both to &lsquo;fizzbuzz&rsquo;</p></blockquote>

<p>I discovered that this FizzBuzz is a drinking game in the UK.</p>

<h3>Fourth exercise: CRC cards</h3>

<p>Before this exercise there was a short introduction on <a href="http://en.wikipedia.org/wiki/Class-responsibility-collaboration_card">Class-responsibility-collaboration card</a>, explained above</p>

<p>Following an example about a movie library, there were six user stories, described at high level, without acceptance criteria.</p>

<p>We had to create an acceptance criteria for this user story. Later create a set of CRC cards and finally partially implement said feature.</p>

<p>Very interesting exercise, such a pity that there wasn&rsquo;t more time to complete this exercise or see him doing it</p>

<h2>Knowledge pearls</h2>

<p>He dropped some knowledge pearls (that I&rsquo;m going to use myself):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">Q:</span> <span class="n">When</span> <span class="n">are</span> <span class="n">you</span> <span class="n">done</span> <span class="n">with</span> <span class="n">TDD</span><span class="o">?</span>
</span><span class='line'><span class="nl">A:</span> <span class="n">When</span> <span class="n">you</span> <span class="n">can</span> <span class="n">not</span> <span class="n">think</span> <span class="n">of</span> <span class="n">more</span> <span class="n">tests</span> <span class="k">for</span> <span class="n">your</span> <span class="n">suite</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">Q:</span> <span class="n">What</span> <span class="k">do</span> <span class="n">we</span> <span class="k">do</span> <span class="n">after</span> <span class="n">TDD</span><span class="o">?</span>
</span><span class='line'><span class="nl">A:</span> <span class="o">(</span><span class="n">No</span> <span class="n">answer</span><span class="o">)</span>
</span><span class='line'><span class="nl">Q:</span> <span class="n">Starts</span> <span class="n">with</span> <span class="s">&quot;T&quot;</span><span class="o">.</span> <span class="n">Any</span> <span class="n">idea</span><span class="o">?</span>
</span><span class='line'><span class="nl">A:</span> <span class="n">Testing</span><span class="o">.</span> <span class="n">Test</span> <span class="k">for</span> <span class="n">the</span> <span class="n">purpose</span> <span class="n">of</span> <span class="n">testing</span><span class="o">,</span> <span class="n">not</span> <span class="n">TDD</span>
</span></code></pre></td></tr></table></div></figure>


<p>Close concepts interested in responsibilities:</p>

<ul>
<li>Conceptual diagram and class diagram</li>
<li>Instance diagram</li>
<li>Knowledge map and tag cloud</li>
</ul>


<p>Regarding legacy code:</p>

<ul>
<li>Isolate big balls of mud into parts and test these as end-to-end. Also connected to isolating groups of nodes into the class graph</li>
<li>Understand what the code does, not the architecture</li>
<li>Do not use a mock to help you test legacy code, use it just as a design tool. (It might be a good idea to use it temporarily while you refactor, but remove it afterwards)</li>
<li>Tests with mocks double down on the design: if it is broken, it will be a drag more than help</li>
</ul>


<p>Test on the boundaries. Many times we test in the middle of the algorithm but forget the boundaries, where many special cases hide</p>

<p>The GOOS book is pronounced like the goose animal (&ldquo;/gús/&rdquo;) in English</p>

<p>He said he never copy pastes <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<h2>Conclusions</h2>

<ul>
<li>This is a two day workshop condensed on a single day. It shows. In my opinion, it would be better to do fewer exercises and dig deeper in them rather than try so many approaches / exercises</li>
<li>The CRC exercise was well thought and really massaged. It touches the right spots and makes you want to learn more about the subject</li>
<li>Promiscuously pairing is always a good idea, as you don&rsquo;t know what level have your attendees. Get stuck for the whole day with someone who has a (very) different knowledge level than you might spoil the workshop</li>
<li>I don&rsquo;t see the benefit of doing the fizzbuzz kata after having done the Fibonacci sequence one</li>
<li>In my opinion, there were too many breaks. Doing a break in the morning (10-15 mins), lunch (30 mins) and afternoon (10-15 mins) is enough</li>
</ul>


<p>On a personal note:</p>

<ul>
<li>It is not enough to attend the workshop. You have to take notes and study them at home later. (Thanks <a href="http://spines.me">spines</a> for this lesson)</li>
<li>I really had a great time, learned a lot, even though I already know something about TDD</li>
<li>Met very interesting people</li>
<li>Would attend to the workshop again</li>
</ul>


<p>In general, I&rsquo;d like to thank Jason and the other attendees for making this workshop possible. I had a blast there.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>As described by <a href="http://martinfowler.com/bliki/TellDontAsk.html">Martin Fowler</a> and the <a href="https://pragprog.com/articles/tell-dont-ask">Pragmatic Bookshelf</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Copy pasting this post&rsquo;s structure resulted in a wrong title that had to be fixed. Maybe the extra effort of not copy pasting has a good ROI, as long as you do not copy paste by typing the text you&rsquo;re reading from somewhere else<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trimming Your Plants]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/31/trimming-your-plants/"/>
    <updated>2015-03-31T23:13:45+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/31/trimming-your-plants</id>
    <content type="html"><![CDATA[<p>This post belongs to the <a href="http://alvarogarcia7.github.io/blog/categories/growing-software">growing-software series</a></p>

<p>Imagine this situation: the code works. You are at <a href="https://github.com/alvarogarcia7/refactoring_a-first-example/commit/1ff7df4d45ee1ac5bc483b90da7ed1b68f27aef9">this stage</a></p>

<p>Disregarding the tests, the production code is complete. Could be better, but it is ready if you are in a hurry.</p>

<p>Now, picture your test as a plant in a plant pot: it might be healthy on the outside (external quality) but how are their roots (internal quality)?</p>

<p>Do you imagine them in an ordered fashion or in a jungle of roots? Everything on the outside is connected to one or several roots? In case it is several, what / how much do they share?</p>

<h2>Trimming the roots</h2>

<p>Now, let&rsquo;s imagine you want to put the plant in a different plant pot. You don&rsquo;t want the plant to be altered in any way: keep producing fruits as it was before, as green and shiny, etc. Just alter the container for business reasons.</p>

<p>The more tidy and organized the roots are related to the outside plant itself, the easier it is to reshape (or refactor) it.</p>

<p>So this is exactly what refactoring is about: &ldquo;keeping the same external behaviour, modifying the internal structure&rdquo;. I like to explain as &ldquo;modify how it is done but not what it does&rdquo;.</p>

<p>When you trim the roots but leave unaltered the top, you are making it cheaper to modify the internal shape without affecting the rest. The plant will continue to grow, requiring more and more nutrients from the ground. Small increases that do not warrant a bigger plant pot, as the current one can withstand the new requirements.</p>

<p>This is where the analogy is no longer useful: when writing software, you&rsquo;re also making it easier to reuse, modify and maintain.</p>

<h3>Conclusion</h3>

<p>The more tidied up you have your plants, the cheaper to maintain and modify.</p>

<p>Software implementation details are like roots: they expand to find any small hole where to expand. Even to scaffold expected behaviour</p>

<p>Trim your plants early and often, always with the help of a test suite</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Growing Software According to the Season]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/29/growing-software-according-to-the-season/"/>
    <updated>2015-03-29T18:13:45+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/29/growing-software-according-to-the-season</id>
    <content type="html"><![CDATA[<p>This is the first post is of the <a href="http://alvarogarcia7.github.io/blog/categories/growing-software">growing-software series</a></p>

<p>A few weeks ago, while reading the book <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> by <a href="https://twitter.com/@natpryce">Nat Pryce</a> and <a href="https://twitter.com/@sf105">Steve Freeman</a>, I finally understood why the software needs to be grown and not built:</p>

<blockquote class="twitter-tweet" lang="en"><p>.<a href="https://twitter.com/natpryce">@natpryce</a> <a href="https://twitter.com/sf105">@sf105</a> With the <a href="https://twitter.com/hashtag/goos?src=hash">#goos</a> book I finally grasped the importance of growing, not building software. Thanks for writing it</p>&mdash; Alvaro Garcia (@alvarobiz) <a href="https://twitter.com/alvarobiz/status/570835142136049664">February 26, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>A few days ago, I was thinking about new inspiration sources and this came to my mind:</p>

<blockquote class="twitter-tweet" lang="en"><p>If we want to grow software instead of building it, should we start looking at gardening and agriculture for new inspiration? <a href="https://twitter.com/hashtag/goos?src=hash">#goos</a></p>&mdash; Alvaro Garcia (@alvarobiz) <a href="https://twitter.com/alvarobiz/status/581005906667687938">March 26, 2015</a></blockquote>


<p>In agriculture, at least in this latitude, there are different seasons. Different plants have different temporal schedules: you need to plant, wait for it to bloom, produce fruits then collect. Maybe remove the plant and wait for the next time slot to appear.</p>

<p>When growing software, things are different (or we think so):</p>

<ul>
<li>Do we need to plant? Yes, seed the project with resources</li>
<li>Wait for it to bloom? Yes, from an outside actor perspective, there is no result for a while, even if it is one sprint</li>
<li>Wait to produce fruits? Yes, usually some sprints past the minimum viable product (MVP) until the minimum lovable product (MLP)</li>
<li>Do we need to collect it? Yes, usually the final tests (e.g., regression) and ship it to production to be used.</li>
</ul>


<p>After all, we might say that the process is not so different in both activities. Nothing to do related to tools or materials, etc.</p>

<p>As in agriculture, seasons vary in productivity for a certain activity or crop: during the cold months, not many plants are able to produce fruits. Meanwhile, during the hot months, harvest is much higher. (This only applies to outdoors gardening.)</p>

<p>When producing software, there might be seasons too:</p>

<ul>
<li>Seasons where productivity (harvest) varies

<ul>
<li>Lowers when a new team member joins (see the Mythical Man-Month), the pressure is too high, salaries are low, &hellip;</li>
<li>Increases when there are no information silos, the bus factor is high, the team is not affected by external distractions, &hellip;</li>
</ul>
</li>
<li>Seasons where different harvests can be planted, but a subset of them will be the most effective

<ul>
<li>A front-end developer can do back-end, but it won&rsquo;t be as productive. In this area, one can learn other disciplines and get as effective as other professionals.</li>
<li>There are many tasks to be done but the prioritized ones are more effective</li>
</ul>
</li>
<li>Some harvests are more intense on the fields than others. After that, there is a required rest so the next season is as productive as the previous one

<ul>
<li>Some projects produce burn-out so some slack time is more productive than getting to work again.</li>
</ul>
</li>
</ul>


<p>But there might be differences too:</p>

<ul>
<li>Geographical distribution: some crops cannot grow in certain conditions. I believe any geographic area (e.g., country) can produce any type of work (e.g., back-end, front-end, quality assurance, project management, etc)</li>
<li>Quality distribution: same as before, many crops do not grow in Iceland (due to the harsh environment) or do it with lower quality as nearer to the Equator.</li>
</ul>


<p><a href="https://twitter.com/@XaV1uzz">Xavi Gost</a> responded to my tweet:</p>

<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p><a href="https://twitter.com/alvarobiz">@alvarobiz</a> Conceptos como darle a las cosas su tiempo de crecer y madurar nos vendrian bien en la industria</p>&mdash; Xaviuzz (@XaV1uzz) <a href="https://twitter.com/XaV1uzz/status/581063149203394560">March 26, 2015</a></blockquote>


<p>[Roughly translated: Concepts like allowing some time for things to grow and ripe would benefit the industry]</p>

<p>Get the tools out of the tool-shed and start buying seeds for this spring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meetup Cross-pollination]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/25/meetup-cross-pollination/"/>
    <updated>2015-03-25T23:50:23+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/25/meetup-cross-pollination</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/adibolb">Adrian Bolboaca</a> has written a very interesting post on being a community bumble-bee. (Source can be found <a href="http://blog.adrianbolboaca.ro/2015/03/talk-agile-lean-europe-2014-being-a-community-bumble-bee/">here</a>)</p>

<p>He goes on to explain how he has visited many meetups all over Europe and the big chunk of information and experience he has learned from them.</p>

<p>He tells us about a selfish approach to organizing meetups:</p>

<blockquote><p>When one teaches two learn</p>

<p>(apparently attributed to) Robert Heinlein, <a href="http://www.math.niu.edu/~rusin/nonwork/quotes">source</a></p></blockquote>

<p>I share this feeling of learning while teaching, as long as you reflect and analyze (e.g., <a href="http://en.wikipedia.org/wiki/Hansei">hansei</a> or <a href="http://chimera.labs.oreilly.com/books/1234000001813/ch05.html#reflect_as_you_work">reflect as you work</a>). I also try to apply it to my meetups.</p>

<p>As a funny note, he said this cross-pollination has crystallized in as many ideas as to fill three books.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Space: Code Reviews]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews/"/>
    <updated>2015-03-16T22:44:42+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ve discussed about code reviews on <a href="http://www.meetup.com/Barcelona-Software-Craftsmanship/events/220293683/">this open space</a></p>

<h2>Notes</h2>

<p>These are my notes, in no particular order:</p>

<ul>
<li>reduce information silos all around the company, as everyone [technical] can participate in these events</li>
<li>raise the &ldquo;just arrived&rdquo; people&rsquo;s knowledge [Difficult to hit the ground up and running, but these code review sessions can help]</li>
<li>invest one person as &lsquo;sheriff&rsquo; for the sprint: they will take care of static analysis tools (such as sonar) and continuous integration (CI; such as jenkins). They will make sure others follow the working agreements</li>
<li>In the academic environment, some teams do share their patches via mailing lists and this makes it much slower to adapt and review changes [As compared to an on-line sharing system - like web-based interfaces to distributed version control systems] As this team doesn&rsquo;t have a CI tool, they must test it / try it manually before reviewing the code.</li>
<li>Pair programming does not remove the need for code review [This has been surfaced twice]</li>
<li>Your work is not more important than your team members&#8217; one. [Related to not having time to code review]</li>
<li>Do code reviews include architecture? [We&rsquo;ve agreed that the architecture to some degree should be discussed before code reviews]</li>
<li>&ldquo;Troll review&rdquo;</li>
<li>Anyone can veto pull requests [By opening a question; do not allow for pull requests to be closed with open questions]</li>
<li>A 15-minute time slot everyday to code review [As code hygiene; Done right after lunch,  breakfast or just before leaving, when you&rsquo;re tired]</li>
<li>Code review tasks have higher priority than other tasks [Do not take other tasks if there are code reviews to do]</li>
<li>Code reviews put a lot of pressure so people learn and the knowledge level equalizes across the team</li>
</ul>


<h2>Conclusions</h2>

<p> My conclusions, even though some of them were not shared by everyone:</p>

<ul>
<li>Most of the people approve of code review practices: either they are doing them or are trying to apply them at their clients. (Warning: this was a code review meetup, so there&rsquo;s a bias: people not interested in them won&rsquo;t come). No one was against doing them.</li>
<li>Code reviews have a cost, although it is beneficial to do them</li>
<li>Should your teammates not want to participate in the code review after agreeing on doing them, appeal to their professionalism / accountability, then to their time (stated before), then troll them: after a few (healthy) trolling code review sessions, people will feel more comfortable reviewing and being reviewed. Special mention to Miguel who coined (?)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> the term: troll review.</li>
<li>Great way of equalizing the (technical) knowledge level within the team</li>
<li>Great way of reduce information silos across the whole company</li>
<li>They can be fun if you do them properly</li>
<li>The need for code reviews do not disappear when pair programming: as long as you have a personal attachment to the code, you might not see its defects.</li>
</ul>


<h2>Your own</h2>

<p>Should you have any conclusions to share, please add a pull request to this <a href="https://github.com/alvarogarcia7/blog_source">repository</a> or do it as a comment.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>after searching some ten minutes on the internet, there are only a couple of questions on meta.codereview stackoverflow, but not related to this. <strong>Update</strong>: In <a href="https://twitter.com/mallyvai/status/314260072798752768">here</a>, Vaibhav Mallya talks about a #trollReview, related to code. So, unfortunately, Miguel, you&rsquo;re not the first one. But there are fewer than 10 results on twitter.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD Meetup Retrospective]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/16/tdd-meetup-retrospective/"/>
    <updated>2015-03-16T05:42:44+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/16/tdd-meetup-retrospective</id>
    <content type="html"><![CDATA[<p>Yesterday we organized a TDD meetup at the <a href="http://www.fib.upc.edu/fib.html">FIB - Barcelona School of Informatics UPC</a>, within <a href="http://www.meetup.com/Barcelona-Software-Craftsmanship/">Barcelona Software Craftsmanship</a> sponsored by the <a href="http://jediupc.com/">Junior Empresa d&#8217;Informàtica</a>. The meetup started at 9:00 until 18:00, with a one-hour pause in the middle.</p>

<h2>Where</h2>

<ul>
<li>Please make sure the meetup space (e.g., classroom, meeting room) is available and ready to be used at least 15 minutes before the meetup starts</li>
<li>The organizer and the event host should be there in advance to prepare the physical environment (chairs, wifi, beamer, etc) as well as mentally: getting comfortable with the space, loading the presentation, prepare the speaker notes, etc.</li>
<li>Plan for the worse and hope for the best: in this particular meetup, the beamer was not available, so the host gracefully lent us some 23 inch screen as a second monitor.</li>
</ul>


<h2>What</h2>

<ul>
<li>The speaker should have had already decided what they are going to cover on the meetup and not deviate much from this. Leave some empty buffer space at the end because you will cumulate some deviation during the day.</li>
<li>Of course, have the slides ready if you plan on using them</li>
<li>I prefer having more conversations during the meetup rather than a masterclass-style one. The organizer(s) should act as conversation moderators, often guiding the conversation where (they think) it is most useful. Sometimes, it is a good idea to interrupt the conversation when someone is getting bored or losing focus<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</li>
<li>Be prepared to ask to your attendees what do they want: they are your target</li>
<li>Please ask to your attendees to bring their laptop with git, dependency manager, IDE / editor, test double framework installed. Otherwise, most of the first session is invested in downloading / configuring these.</li>
<li>Please try to be communicative / funny in some way. This makes the slides easier to understand</li>
</ul>


<h2>Meetup details</h2>

<ul>
<li><p>We did two sessions of slides:</p>

<ul>
<li>Introduction to TDD</li>
<li>TDD on a daily basis: learn TDD for a greater good</li>
</ul>
</li>
<li><p>We did three katas:</p>

<ul>
<li>LinkedList: <a href="http://codekata.com/kata/kata21-simple-lists/">source</a>. Originally by <a href="http://twitter.com/@pragdave">Dave &ldquo;Pragmatic Dave&rdquo; Thomas</a></li>
<li>Password: <a href="https://gist.github.com/trikitrok/c031d6b621f28b85ce0d">source</a>. Taken from <a href="http://twitter.com/@trikitrok">Manuel Rivero</a>, also seen on a <a href="http://twitter.com/@carlosble">Carlos Blé</a> workshop</li>
<li>Bank Kata: <a href="https://github.com/sandromancuso/Bank-kata">source</a>. Originally from <a href="http://twitter.com/@sandromancuso">Sandro Mancuso</a></li>
</ul>
</li>
<li><p>The format was this: the first set of slides, the two first katas, some discussion, then lunch; coffee (mandatory); the second set of slides, the third kata (done by them), later done by me at the beamer, explaining the situation and my mental process.</p></li>
</ul>


<h2>Useful feedback</h2>

<ul>
<li><p>About the event:</p>

<ul>
<li>One 8-hour event is much more effective / efficient that 4 2-hour ones</li>
<li>No one complained about the lack of beamer. So don&rsquo;t worry too much if your host doesn&rsquo;t have one, as long as everybody can get close to the (big) screen.</li>
</ul>
</li>
<li><p>About the LinkedList kata:</p>

<ul>
<li>This, as a first TDD example was too complex. Getting into TDD with classes, and serveral functions at the same time might be difficult.</li>
<li>Too academic. This is an example you will usually never implement yourself, as there are libraries who provide it. Therefore, not applicable.</li>
</ul>
</li>
<li><p>About the Password kata:</p>

<ul>
<li>They graded this kata easier than the linkedList</li>
<li>Start with this as it is only a function</li>
<li>This has didactic value as there are some gotchas with this kata</li>
<li>More likely to be implemented by yourself, as most systems require some kind of user authentication</li>
</ul>
</li>
<li><p>About the Bank kata:</p>

<ul>
<li>More resembling of a day-to-day problem</li>
<li>This is a difficult kata if you haven&rsquo;t learned about mocks / test doubles</li>
<li>Interesting interactions between objects</li>
</ul>
</li>
<li><p>For me:</p>

<ul>
<li>They liked both the format and the speaker (a.k.a., me)</li>
<li>They thought this meetup was well prepared in advance</li>
</ul>
</li>
<li><p>My own feedback:</p>

<ul>
<li>It is difficult to ask the attendees to rate their own level or for you to rate it. I thought the linkedlist example would be so easy they would finish it in half the allowed time<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, but it wasn&rsquo;t this way</li>
<li>The productivity level varies hugely from person to person. There were some pairs that dug thoroughly on the problem and others who got stuck (sometimes with the language). Even though both types of pairs were working hard on the proposed problem</li>
<li>We still haven&rsquo;t solved the problem with reservations: many people book a seat on the event but later won&rsquo;t come. This makes other (interested) attendees to not have a seat.</li>
</ul>
</li>
</ul>


<p>Should you want to, please share your feedback / comments via the comments section below or sending a pull request to this <a href="https://github.com/alvarogarcia7/blog_source">repository</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>a good indicator of this is body language or position and whether they are doodling on a paper sheet.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>I did prepare against this adding more possible requirements to the kata, although we finally didn&rsquo;t use them<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Module Base for Cucumber in Java]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/10/maven-module-base-for-cucumber-in-java/"/>
    <updated>2015-03-10T07:24:38+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/10/maven-module-base-for-cucumber-in-java</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve built a small maven module, to be used directly with cucumber. You can fork the repository <a href="https://github.com/alvarogarcia7/base-bdd-cucumber">here</a></p>

<p>This is the setup I&rsquo;ve proposed for the meetup <a href="http://www.meetup.com/Agile-Barcelona-Meetup/events/220673134/">&ldquo;BDD Cucumber kata (gherkin + code)&rdquo;</a>. Will see if this code is successfully used by the ~40 participants in a couple of weeks</p>

<p>(Quote from the <a href="https://github.com/alvarogarcia7/base-bdd-cucumber/blob/master/README.md">README.md</a>):</p>

<p>This maven project has been possible due to <a href="https://twitter.com/@thomassundberg">Thomas Sundberg</a> and <a href="https://thomassundberg.wordpress.com/2014/05/29/cucumber-jvm-hello-world">this post</a></p>

<p>Should you want to, there&rsquo;s a tweet to thank him the effort: <a href="https://twitter.com/intent/tweet?text=@thomassundberg%20thanks%20for%20the%20cucumber%20bdd%20tutorial!%20Will%20be%20using%20it%20from%20@agilebcn;Keep%20up%0Athe%20good%20work&amp;url=https://thomassundberg.wordpress.com/2014/05/29/cucumber-jvm-hello-world/">tweet intent here</a></p>

<p>Happy katas and happy bdd&#8217;ing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kata: Mars Rover in Clojure]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/05/kata-mars-rover-in-clojure/"/>
    <updated>2015-03-05T00:33:50+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/05/kata-mars-rover-in-clojure</id>
    <content type="html"><![CDATA[<p>Yesterday at the <a href="http://www.meetup.com/ClojureBCN/events/220773795/">clojure meetup</a> we<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> did the <a href="http://dallashackclub.com/rover">mars rover</a> in clojure and today I&rsquo;ve tried my hand at it again. Original, from the three of us <a href="https://github.com/jesusdiez/kata-rover-clojure">here</a> and my <a href="https://github.com/alvarogarcia7/kata-rover-clojure">results here</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://twitter.com/jorgeavila_ss">Jorge Ávila</a>, <a href="https://twitter.com/jdiezc">Jesús Díez</a> and I<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mob Programming String Calculator Kata]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/03/mob-programming-string-calculator-kata/"/>
    <updated>2015-03-03T04:46:48+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/03/mob-programming-string-calculator-kata</id>
    <content type="html"><![CDATA[<p>Last Friday we did a kata<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> using a projector the string calculator <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> using pair programming, TDD and some mob-programming for the last refactoring.</p>

<p>We used a projector (beamer) so everyone could see it. I tried to take really small baby steps but the adding part was done in ~6 cycles<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>We&rsquo;ve all learnt about shotcuts, live user templates for the IDE <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>, TDD methodology, other ways of tackling the problem, how to refactor as a group, clean code, etc</p>

<p>These sessions are necessary to share some knowledge among the teammates and have another chance of doing code review, releasing some pressure from daily practices or bad abstractions / designs (that will be taken care of in the future)</p>

<p>We&rsquo;ve had such a great time, learning together, that would be a candidate for a weekly interaction.</p>

<p><a href="http://en.wikipedia.org/wiki/Mob_programming">Mob programming</a> is such an eye opening practice. It forces you to reconsider your previous dogma and to understand the others&#8217; positions. Wikipedia reads &ldquo;early use of phrase [&hellip;] was made in &lsquo;Extreme Programming Perspectives&rsquo;&rdquo; but this practice is practiced by some, such as <a href="https://twitter.com/carlosble">Carlos Blé</a>, <a href="https://twitter.com/sandromancuso">Sandro Mancuso</a> among others; also at the <a href="http://www.softwarecraftsmanshipbarcelona.org/">Software Craftsmanship Barcelona</a> <a href="https://twitter.com/hashtag/scbcn2013?src=hash">2013</a> and <a href="https://twitter.com/hashtag/SCBCN14?src=hash">2014</a> and the <a href="https://twitter.com/hashtag/socracan?src=hash">SoCra Canaries 2015</a></p>

<h2>One goal</h2>

<p>Our goal for this session was to practice TDD and baby steps, so the team can improve its ability on these skills.</p>

<p>In any case, my objective for the katas (or deliberate practice) is not to get there as fast as we can but to improve our automated routines. This can affect our daily performance, as it becomes natural. It is not about the getting to the destination but enjoying the path along the way. In this manner, you are not so hurried up about a slow train but enjoy the views across the window.</p>

<p>It was good that QA people in the team came to the session. He even participated with some tips / implementations during the refactors. Always fruitful to discuss (and learn) mixed skills (QA / dev) from the other side of the wall</p>

<h2>Conclusion</h2>

<p>I still haven&rsquo;t mastered the recipe (algorithm) for knowing when it is a scaffold and when it&rsquo;s time to refactor using &ldquo;replace algorithm&rdquo;. For know, I just use the three (3) rule and a bit of gut feeling on the side. The bad thing is that this can not be easily taught to someone else. Just learnt by osmosis and practice.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>matching none of the styles explained in <a href="http://johannesbrodwall.com/2011/12/18/how-to-start-a-coding-dojo/">here</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>This is a very good beginner&rsquo;s kata, created by <a href="https://twitter.com/royosherove">Roy Osherove</a>. Can be found <a href="http://osherove.com/tdd-kata-1/">here</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>One piece of feedback I received is that I talk too much while coding, as these 6 cycles took us about 45 minutes, total<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>There are some for <a href="https://www.jetbrains.com/idea/help/live-templates.html">IntelliJ IDEA</a>, <a href="http://stackoverflow.com/questions/4022367/what-is-the-eclipse-equivalent-of-intellij-live-templates">Eclipse</a> too<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
