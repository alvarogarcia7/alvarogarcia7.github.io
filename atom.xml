<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-04-14T00:26:48+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redesign as a New TDD Phase]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/13/redesign-as-a-new-tdd-phase/"/>
    <updated>2015-04-13T22:00:45+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/13/redesign-as-a-new-tdd-phase</id>
    <content type="html"><![CDATA[<p>In the last TDD workshop (experience report <a href="../../../../2015/04/12/jason-gorman-tdd-intensive-workshop">here</a>), a conversation with <a href="http://twitter.com/@garymcleanhall">Gary McLean Hall</a> introduced to me this new concept of &ldquo;Redesign&rdquo; as a TDD phase.</p>

<h2>Concept</h2>

<p>As Gary introduced it to me<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, it is a phase that might appear after refactor.</p>

<p>It is about changing the outside design without changing the expected behavior. I thought this was also included in the refactor phase.</p>

<h2>How I do redesign</h2>

<p>I usually do this &ldquo;changing of the outside design&rdquo; by applying a series of refactors <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> to the production code but not changing the test code; using a bridge / adapter to get to the new API from the old one. Later you can inline the scaffold and use the new API directly.</p>

<p>The same for the test code: when you want to change design in the test code, do not modify production code (a.k.a. model code).</p>

<h2>Other thoughts</h2>

<p>Merriam-Webster defines &ldquo;<a href="http://www.merriam-webster.com/dictionary/redesign">redesign</a>&rdquo; as</p>

<blockquote><p>to change the design of (something)</p></blockquote>

<p>or</p>

<blockquote><p>to revise in appearance, function, or content</p></blockquote>

<p>an example:</p>

<blockquote><p>The book&rsquo;s cover has been redesigned for the new edition.</p></blockquote>

<p>The Refactoring book (by Martin Fowler) describes &ldquo;refactoring&rdquo; as</p>

<blockquote><p>Refactoring is the process of changing a software system in such a way that it does not alter the external behavior of the code yet improves its internal structure</p></blockquote>

<p>Taken literally, the public API is not internal but external structure, so changing it, should belong to a phase that is not refactor (see definition), nor red (no failing tests), not green (making it pass). Maybe this phase is &ldquo;redesign&rdquo; or we have to take the refactoring phase less literally so it includes redesign. Any thoughts?</p>

<h2>Other references</h2>

<p>I&rsquo;ve searched for redesign and refactor and <a href="https://practicingruby.com/articles/refactoring-is-not-redesign">this blog post</a> came up. They cite redesign as a way of rewriting</p>

<p><a href="http://stackoverflow.com/a/80758/1181094">This answer</a> and the <a href="http://stackoverflow.com/a/80758/1181094">original question</a> in StackOverflow is interesting</p>

<p>Redesign also appears cited in <a href="http://blog.testdouble.com/posts/2014-01-25-the-failures-of-intro-to-tdd.html">this blog post</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Excuse me if you explained it differently and I understand it wrong; you can always open a pull request to fix it <a href="https://github.com/alvarogarcia7/blog_source/tree/source/source/_posts">here</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>thanks for the clarifying refactor vs refactoring <a href="http://blog.4mm.co.uk/2012/12/11/pet-peeve-726.html">here</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experience Report: Test-driven Development Intensive, by Jason Gorman]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/12/jason-gorman-tdd-intensive-workshop/"/>
    <updated>2015-04-12T20:13:45+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/12/jason-gorman-tdd-intensive-workshop</id>
    <content type="html"><![CDATA[<p>This is an experience report on <a href="http://twitter.com/@jasongorman">Jason Gorman</a>&rsquo;s &ldquo;<a href="http://www.codemanship.co.uk/tdd.html">Test-driven development intensive workshop</a>&rdquo; on the April 11th, 2015</p>

<p>I attended this training in the <a href="http://www.grenfell-housing.co.uk/">Greenfell housing &amp; training</a> in South Wimbledon, London SW19 1JZ.</p>

<h2>Introduction</h2>

<p>There were 23 of us, including me. We spent some half hour introducing ourselves before the training started. I remember about a tester that came to the workshop &ldquo;wanting to know more about this testing methodology&rdquo;. Jason&rsquo;s answer was priceless: &ldquo;I&rsquo;m sorry but you came to the wrong place: this is not about testing&rdquo;.</p>

<p>At 10:00 sharp, he started a set of slides explaining what TDD is about, including:</p>

<ul>
<li>productivity:

<ul>
<li>no company is willing to give you a &ldquo;get out of jail free&rdquo; card to get out of the productivity zone</li>
<li>a drop in the productivity, at least for the first weeks</li>
<li>you have to find a time slot in your schedule to practice TDD, otherwise it&rsquo;s like learning to swim while crossing the Atlantic Ocean</li>
</ul>
</li>
<li>You have to feel uncomfortable not doing TDD</li>
<li>triangulation:

<ul>
<li>how each problem is different</li>
<li>you can only learn it by doing</li>
</ul>
</li>
<li>TDD styles:

<ul>
<li>Chicago style by Kent Beck. Reference book would be &ldquo;<a href="http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530">TDD by example</a>&rdquo;</li>
<li>London school or Mockist style by Steve Freeman and Nat Pryce. Reference book would be <a href="http://www.growing-object-oriented-software.com/">&ldquo;Growing object oriented software, guided by tests</a>&#8221;</li>
</ul>
</li>
<li>13 good habits for a sustainable test-driven development way</li>
<li>The basic TDD cycle:

<ul>
<li>an executable specification, encoded in a failing test</li>
<li>pass the test in the simplest way</li>
<li>refactor</li>
<li>(talking with another attendee, he described to me a new TDD phase called redesign. Maybe another post will explain this in deeper detail level)</li>
</ul>
</li>
<li>Some ideas about <a href="http://www.extremeprogramming.org/rules/simple.html">Simple design, simple development, simplicity</a> (<a href="http://www.extremeprogramming.org">XP</a>)</li>
<li>Shown a wrong example of mixing assertions (state) and verifications (interactions)</li>
<li>More than one reason to go wrong makes the code non-trivial anymore. Non-trivial code requires tests</li>
<li>You want to see the test failing for the right reason: remove / finish code that does not compile, fix null pointers, array out of bounds exceptions, etc. See it fail with &ldquo;was <X> but expected <Y>&rdquo; or &ldquo;NoInteractionException&rdquo; (hamcrest error and mockito error, respectively; both java)</li>
<li>Duplication as a sign of design smell</li>
<li>Process of generalizing code: discover the need for patterns</li>
<li>The most difficult skill in TDD is refactoring [and design; note is mine]. The TDD cycle is very easy.

<ul>
<li>TDD is much more in demand than refactoring, even though the former includes the latter</li>
</ul>
</li>
<li>Refactor until you&rsquo;re happy with the code, until you stand by it</li>
</ul>


<h2>CRC Cards</h2>

<p>A <a href="http://en.wikipedia.org/wiki/Class-responsibility-collaboration_card">Class-responsibility-collaboration card</a> is as follows:</p>

<ul>
<li>top: class name</li>
<li>half left: responsibilities</li>
<li>half right: collaborations</li>
</ul>


<p>Notes from the slides:</p>

<ul>
<li>each then is an outcome

<ul>
<li>do not mix outcomes and implications. An example: after winning the lottery, the money should be transferred to my bank account and I can buy a yacht. The former is an outcome (change in state) and the latter an implication (a new action that is now enabled)</li>
<li>an outcome is mapped to an assertion, while a collaboration is mapped to an interaction (verify in mockito)</li>
</ul>
</li>
<li>Given / When / Then is not enough to implement an executable specification. We need examples, detail</li>
<li>OO: send messages to distribute responsibility.

<ul>
<li>A Then is an unique responsibility</li>
</ul>
</li>
<li>Topmost object: no one connects with it</li>
<li>Put the work where the data is</li>
<li>Tell, don&rsquo;t ask <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> vs data driven design (tell a collaborator what to do vs ask for values and do the work yourself)</li>
<li>You want as few interactions as possible (related to the tell, don&rsquo;t ask)</li>
<li>More objects than outcomes is a bad thing (design smell) (?)</li>
<li>CRC is a very mechanical exercise, do not over think it</li>
<li>Describe outcomes as changes in OO (new, destroy, relationships, modify fields / state)</li>
<li>Continuous integration is not necessarily about shipping the code at each commit but having it shippable at each commit, as always having a product that is ready for its production phase</li>
</ul>


<h2>Exercises</h2>

<p>All exercises were done in pairs, always switching one half of the pair. He asked for someone in the pair to raise, especially if you were not a programmer (e.g., tester, manager)</p>

<h3>First exercise: Banking</h3>

<blockquote><p>Write a program that is capable of transferring money from an account to another</p></blockquote>

<p>A chance to practice arrange, act, assert</p>

<p>Later, he did it some live coding to develop the same kata, practicing &ldquo;<a href="http://www.infoq.com/presentations/TDD-as-if-You-Meant-It">TDD as if you meant it</a>&rdquo; (<a href="https://twitter.com/keithb_b">Keith Braithwaite</a>&rsquo;s original idea). We discovered together the &ldquo;primitive obsession&rdquo; and &ldquo;feature envy&rdquo; smells. We tried doing as few decisions as possible.</p>

<h3>Second exercise: Fibonacci sequence generator</h3>

<blockquote><p>Write a program that is capable of generating Fibonacci sequences, no shorter that 8 and no longer than 50</p></blockquote>

<p>A chance to practice baby steps.</p>

<p>My pair and I had the chance of discovering the importance of understanding correctly the requirements before writing a line of code. Also, I learned about the different ways of doing TDD. In this case, my pair executed the tests via a main (java class) and saw the failures on the console. When proposed to do it in the JUnit runner the IDE has, he said he preferred it in his own ways.</p>

<p>Jason did some live coding to show how he approached and triangulated this exercise.</p>

<p>I really liked some of what he said: I like to make the API correct from the first moment so I will ask questions that are correct but only check answers for things that I have already implemented. Example:</p>

<p>As the generated sequence can only have <code>8 &lt;= x &lt;= 50</code> elements, a list returning a single element would not be correct. So</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//class FibonacciTests</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">theFirstElementIsOne</span><span class="o">(){</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="k">new</span> <span class="nf">FibonacciSequence</span><span class="o">().</span><span class="na">generate</span><span class="o">(</span><span class="mi">8</span><span class="o">)[</span><span class="mi">0</span><span class="o">],</span> <span class="n">is</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Third exercise: FizzBuzz</h3>

<blockquote><p>Write a program that is capable of returning a string with all numbers less than 100 that are using the FizzBuzz pattern. This FizzBuzz pattern converts the divisors of 3 to &lsquo;fizz&rsquo;, divisors of 5 to &lsquo;buzz&rsquo; and divisors to both to &lsquo;fizzbuzz&rsquo;</p></blockquote>

<p>I discovered that this FizzBuzz is a drinking game in the UK.</p>

<h3>Fourth exercise: CRC cards</h3>

<p>Before this exercise there was a short introduction on <a href="http://en.wikipedia.org/wiki/Class-responsibility-collaboration_card">Class-responsibility-collaboration card</a>, explained above</p>

<p>Following an example about a movie library, there were six user stories, described at high level, without acceptance criteria.</p>

<p>We had to create an acceptance criteria for this user story. Later create a set of CRC cards and finally partially implement said feature.</p>

<p>Very interesting exercise, such a pity that there wasn&rsquo;t more time to complete this exercise or see him doing it</p>

<h2>Knowledge pearls</h2>

<p>He dropped some knowledge pearls (that I&rsquo;m going to use myself):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">Q:</span> <span class="n">When</span> <span class="n">are</span> <span class="n">you</span> <span class="n">done</span> <span class="n">with</span> <span class="n">TDD</span><span class="o">?</span>
</span><span class='line'><span class="nl">A:</span> <span class="n">When</span> <span class="n">you</span> <span class="n">can</span> <span class="n">not</span> <span class="n">think</span> <span class="n">of</span> <span class="n">more</span> <span class="n">tests</span> <span class="k">for</span> <span class="n">your</span> <span class="n">suite</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">Q:</span> <span class="n">What</span> <span class="k">do</span> <span class="n">we</span> <span class="k">do</span> <span class="n">after</span> <span class="n">TDD</span><span class="o">?</span>
</span><span class='line'><span class="nl">A:</span> <span class="o">(</span><span class="n">No</span> <span class="n">answer</span><span class="o">)</span>
</span><span class='line'><span class="nl">Q:</span> <span class="n">Starts</span> <span class="n">with</span> <span class="s">&quot;T&quot;</span><span class="o">.</span> <span class="n">Any</span> <span class="n">idea</span><span class="o">?</span>
</span><span class='line'><span class="nl">A:</span> <span class="n">Testing</span><span class="o">.</span> <span class="n">Test</span> <span class="k">for</span> <span class="n">the</span> <span class="n">purpose</span> <span class="n">of</span> <span class="n">testing</span><span class="o">,</span> <span class="n">not</span> <span class="n">TDD</span>
</span></code></pre></td></tr></table></div></figure>


<p>Close concepts interested in responsibilities:</p>

<ul>
<li>Conceptual diagram and class diagram</li>
<li>Instance diagram</li>
<li>Knowledge map and tag cloud</li>
</ul>


<p>Regarding legacy code:</p>

<ul>
<li>Isolate big balls of mud into parts and test these as end-to-end. Also connected to isolating groups of nodes into the class graph</li>
<li>Understand what the code does, not the architecture</li>
<li>Do not use a mock to help you test legacy code, use it just as a design tool. (It might be a good idea to use it temporarily while you refactor, but remove it afterwards)</li>
<li>Tests with mocks double down on the design: if it is broken, it will be a drag more than help</li>
</ul>


<p>Test on the boundaries. Many times we test in the middle of the algorithm but forget the boundaries, where many special cases hide</p>

<p>The GOOS book is pronounced like the goose animal (&ldquo;/gús/&rdquo;) in English</p>

<p>He said he never copy pastes <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<h2>Conclusions</h2>

<ul>
<li>This is a two day workshop condensed on a single day. It shows. In my opinion, it would be better to do fewer exercises and dig deeper in them rather than try so many approaches / exercises</li>
<li>The CRC exercise was well thought and really massaged. It touches the right spots and makes you want to learn more about the subject</li>
<li>Promiscuously pairing is always a good idea, as you don&rsquo;t know what level have your attendees. Get stuck for the whole day with someone who has a (very) different knowledge level than you might spoil the workshop</li>
<li>I don&rsquo;t see the benefit of doing the fizzbuzz kata after having done the Fibonacci sequence one</li>
<li>In my opinion, there were too many breaks. Doing a break in the morning (10-15 mins), lunch (30 mins) and afternoon (10-15 mins) is enough</li>
</ul>


<p>On a personal note:</p>

<ul>
<li>It is not enough to attend the workshop. You have to take notes and study them at home later. (Thanks <a href="http://spines.me">spines</a> for this lesson)</li>
<li>I really had a great time, learned a lot, even though I already know something about TDD</li>
<li>Met very interesting people</li>
<li>Would attend to the workshop again</li>
</ul>


<p>In general, I&rsquo;d like to thank Jason and the other attendees for making this workshop possible. I had a blast there.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>As described by <a href="http://martinfowler.com/bliki/TellDontAsk.html">Martin Fowler</a> and the <a href="https://pragprog.com/articles/tell-dont-ask">Pragmatic Bookshelf</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Copy pasting this post&rsquo;s structure resulted in a wrong title that had to be fixed. Maybe the extra effort of not copy pasting has a good ROI, as long as you do not copy paste by typing the text you&rsquo;re reading from somewhere else<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trimming Your Plants]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/31/trimming-your-plants/"/>
    <updated>2015-03-31T23:13:45+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/31/trimming-your-plants</id>
    <content type="html"><![CDATA[<p>This post belongs to the <a href="http://alvarogarcia7.github.io/blog/categories/growing-software">growing-software series</a></p>

<p>Imagine this situation: the code works. You are at <a href="https://github.com/alvarogarcia7/refactoring_a-first-example/commit/1ff7df4d45ee1ac5bc483b90da7ed1b68f27aef9">this stage</a></p>

<p>Disregarding the tests, the production code is complete. Could be better, but it is ready if you are in a hurry.</p>

<p>Now, picture your test as a plant in a plant pot: it might be healthy on the outside (external quality) but how are their roots (internal quality)?</p>

<p>Do you imagine them in an ordered fashion or in a jungle of roots? Everything on the outside is connected to one or several roots? In case it is several, what / how much do they share?</p>

<h2>Trimming the roots</h2>

<p>Now, let&rsquo;s imagine you want to put the plant in a different plant pot. You don&rsquo;t want the plant to be altered in any way: keep producing fruits as it was before, as green and shiny, etc. Just alter the container for business reasons.</p>

<p>The more tidy and organized the roots are related to the outside plant itself, the easier it is to reshape (or refactor) it.</p>

<p>So this is exactly what refactoring is about: &ldquo;keeping the same external behaviour, modifying the internal structure&rdquo;. I like to explain as &ldquo;modify how it is done but not what it does&rdquo;.</p>

<p>When you trim the roots but leave unaltered the top, you are making it cheaper to modify the internal shape without affecting the rest. The plant will continue to grow, requiring more and more nutrients from the ground. Small increases that do not warrant a bigger plant pot, as the current one can withstand the new requirements.</p>

<p>This is where the analogy is no longer useful: when writing software, you&rsquo;re also making it easier to reuse, modify and maintain.</p>

<h3>Conclusion</h3>

<p>The more tidied up you have your plants, the cheaper to maintain and modify.</p>

<p>Software implementation details are like roots: they expand to find any small hole where to expand. Even to scaffold expected behaviour</p>

<p>Trim your plants early and often, always with the help of a test suite</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Growing Software According to the Season]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/29/growing-software-according-to-the-season/"/>
    <updated>2015-03-29T18:13:45+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/29/growing-software-according-to-the-season</id>
    <content type="html"><![CDATA[<p>This is the first post is of the <a href="http://alvarogarcia7.github.io/blog/categories/growing-software">growing-software series</a></p>

<p>A few weeks ago, while reading the book <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> by <a href="https://twitter.com/@natpryce">Nat Pryce</a> and <a href="https://twitter.com/@sf105">Steve Freeman</a>, I finally understood why the software needs to be grown and not built:</p>

<blockquote class="twitter-tweet" lang="en"><p>.<a href="https://twitter.com/natpryce">@natpryce</a> <a href="https://twitter.com/sf105">@sf105</a> With the <a href="https://twitter.com/hashtag/goos?src=hash">#goos</a> book I finally grasped the importance of growing, not building software. Thanks for writing it</p>&mdash; Alvaro Garcia (@alvarobiz) <a href="https://twitter.com/alvarobiz/status/570835142136049664">February 26, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>A few days ago, I was thinking about new inspiration sources and this came to my mind:</p>

<blockquote class="twitter-tweet" lang="en"><p>If we want to grow software instead of building it, should we start looking at gardening and agriculture for new inspiration? <a href="https://twitter.com/hashtag/goos?src=hash">#goos</a></p>&mdash; Alvaro Garcia (@alvarobiz) <a href="https://twitter.com/alvarobiz/status/581005906667687938">March 26, 2015</a></blockquote>


<p>In agriculture, at least in this latitude, there are different seasons. Different plants have different temporal schedules: you need to plant, wait for it to bloom, produce fruits then collect. Maybe remove the plant and wait for the next time slot to appear.</p>

<p>When growing software, things are different (or we think so):</p>

<ul>
<li>Do we need to plant? Yes, seed the project with resources</li>
<li>Wait for it to bloom? Yes, from an outside actor perspective, there is no result for a while, even if it is one sprint</li>
<li>Wait to produce fruits? Yes, usually some sprints past the minimum viable product (MVP) until the minimum lovable product (MLP)</li>
<li>Do we need to collect it? Yes, usually the final tests (e.g., regression) and ship it to production to be used.</li>
</ul>


<p>After all, we might say that the process is not so different in both activities. Nothing to do related to tools or materials, etc.</p>

<p>As in agriculture, seasons vary in productivity for a certain activity or crop: during the cold months, not many plants are able to produce fruits. Meanwhile, during the hot months, harvest is much higher. (This only applies to outdoors gardening.)</p>

<p>When producing software, there might be seasons too:</p>

<ul>
<li>Seasons where productivity (harvest) varies

<ul>
<li>Lowers when a new team member joins (see the Mythical Man-Month), the pressure is too high, salaries are low, &hellip;</li>
<li>Increases when there are no information silos, the bus factor is high, the team is not affected by external distractions, &hellip;</li>
</ul>
</li>
<li>Seasons where different harvests can be planted, but a subset of them will be the most effective

<ul>
<li>A front-end developer can do back-end, but it won&rsquo;t be as productive. In this area, one can learn other disciplines and get as effective as other professionals.</li>
<li>There are many tasks to be done but the prioritized ones are more effective</li>
</ul>
</li>
<li>Some harvests are more intense on the fields than others. After that, there is a required rest so the next season is as productive as the previous one

<ul>
<li>Some projects produce burn-out so some slack time is more productive than getting to work again.</li>
</ul>
</li>
</ul>


<p>But there might be differences too:</p>

<ul>
<li>Geographical distribution: some crops cannot grow in certain conditions. I believe any geographic area (e.g., country) can produce any type of work (e.g., back-end, front-end, quality assurance, project management, etc)</li>
<li>Quality distribution: same as before, many crops do not grow in Iceland (due to the harsh environment) or do it with lower quality as nearer to the Equator.</li>
</ul>


<p><a href="https://twitter.com/@XaV1uzz">Xavi Gost</a> responded to my tweet:</p>

<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p><a href="https://twitter.com/alvarobiz">@alvarobiz</a> Conceptos como darle a las cosas su tiempo de crecer y madurar nos vendrian bien en la industria</p>&mdash; Xaviuzz (@XaV1uzz) <a href="https://twitter.com/XaV1uzz/status/581063149203394560">March 26, 2015</a></blockquote>


<p>[Roughly translated: Concepts like allowing some time for things to grow and ripe would benefit the industry]</p>

<p>Get the tools out of the tool-shed and start buying seeds for this spring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meetup Cross-pollination]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/25/meetup-cross-pollination/"/>
    <updated>2015-03-25T23:50:23+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/25/meetup-cross-pollination</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/adibolb">Adrian Bolboaca</a> has written a very interesting post on being a community bumble-bee. (Source can be found <a href="http://blog.adrianbolboaca.ro/2015/03/talk-agile-lean-europe-2014-being-a-community-bumble-bee/">here</a>)</p>

<p>He goes on to explain how he has visited many meetups all over Europe and the big chunk of information and experience he has learned from them.</p>

<p>He tells us about a selfish approach to organizing meetups:</p>

<blockquote><p>When one teaches two learn</p>

<p>(apparently attributed to) Robert Heinlein, <a href="http://www.math.niu.edu/~rusin/nonwork/quotes">source</a></p></blockquote>

<p>I share this feeling of learning while teaching, as long as you reflect and analyze (e.g., <a href="http://en.wikipedia.org/wiki/Hansei">hansei</a> or <a href="http://chimera.labs.oreilly.com/books/1234000001813/ch05.html#reflect_as_you_work">reflect as you work</a>). I also try to apply it to my meetups.</p>

<p>As a funny note, he said this cross-pollination has crystallized in as many ideas as to fill three books.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Space: Code Reviews]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews/"/>
    <updated>2015-03-16T22:44:42+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ve discussed about code reviews on <a href="http://www.meetup.com/Barcelona-Software-Craftsmanship/events/220293683/">this open space</a></p>

<h2>Notes</h2>

<p>These are my notes, in no particular order:</p>

<ul>
<li>reduce information silos all around the company, as everyone [technical] can participate in these events</li>
<li>raise the &ldquo;just arrived&rdquo; people&rsquo;s knowledge [Difficult to hit the ground up and running, but these code review sessions can help]</li>
<li>invest one person as &lsquo;sheriff&rsquo; for the sprint: they will take care of static analysis tools (such as sonar) and continuous integration (CI; such as jenkins). They will make sure others follow the working agreements</li>
<li>In the academic environment, some teams do share their patches via mailing lists and this makes it much slower to adapt and review changes [As compared to an on-line sharing system - like web-based interfaces to distributed version control systems] As this team doesn&rsquo;t have a CI tool, they must test it / try it manually before reviewing the code.</li>
<li>Pair programming does not remove the need for code review [This has been surfaced twice]</li>
<li>Your work is not more important than your team members&#8217; one. [Related to not having time to code review]</li>
<li>Do code reviews include architecture? [We&rsquo;ve agreed that the architecture to some degree should be discussed before code reviews]</li>
<li>&ldquo;Troll review&rdquo;</li>
<li>Anyone can veto pull requests [By opening a question; do not allow for pull requests to be closed with open questions]</li>
<li>A 15-minute time slot everyday to code review [As code hygiene; Done right after lunch,  breakfast or just before leaving, when you&rsquo;re tired]</li>
<li>Code review tasks have higher priority than other tasks [Do not take other tasks if there are code reviews to do]</li>
<li>Code reviews put a lot of pressure so people learn and the knowledge level equalizes across the team</li>
</ul>


<h2>Conclusions</h2>

<p> My conclusions, even though some of them were not shared by everyone:</p>

<ul>
<li>Most of the people approve of code review practices: either they are doing them or are trying to apply them at their clients. (Warning: this was a code review meetup, so there&rsquo;s a bias: people not interested in them won&rsquo;t come). No one was against doing them.</li>
<li>Code reviews have a cost, although it is beneficial to do them</li>
<li>Should your teammates not want to participate in the code review after agreeing on doing them, appeal to their professionalism / accountability, then to their time (stated before), then troll them: after a few (healthy) trolling code review sessions, people will feel more comfortable reviewing and being reviewed. Special mention to Miguel who coined (?)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> the term: troll review.</li>
<li>Great way of equalizing the (technical) knowledge level within the team</li>
<li>Great way of reduce information silos across the whole company</li>
<li>They can be fun if you do them properly</li>
<li>The need for code reviews do not disappear when pair programming: as long as you have a personal attachment to the code, you might not see its defects.</li>
</ul>


<h2>Your own</h2>

<p>Should you have any conclusions to share, please add a pull request to this <a href="https://github.com/alvarogarcia7/blog_source">repository</a> or do it as a comment.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>after searching some ten minutes on the internet, there are only a couple of questions on meta.codereview stackoverflow, but not related to this. <strong>Update</strong>: In <a href="https://twitter.com/mallyvai/status/314260072798752768">here</a>, Vaibhav Mallya talks about a #trollReview, related to code. So, unfortunately, Miguel, you&rsquo;re not the first one. But there are fewer than 10 results on twitter.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD Meetup Retrospective]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/16/tdd-meetup-retrospective/"/>
    <updated>2015-03-16T05:42:44+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/16/tdd-meetup-retrospective</id>
    <content type="html"><![CDATA[<p>Yesterday we organized a TDD meetup at the <a href="http://www.fib.upc.edu/fib.html">FIB - Barcelona School of Informatics UPC</a>, within <a href="http://www.meetup.com/Barcelona-Software-Craftsmanship/">Barcelona Software Craftsmanship</a> sponsored by the <a href="http://jediupc.com/">Junior Empresa d&#8217;Informàtica</a>. The meetup started at 9:00 until 18:00, with a one-hour pause in the middle.</p>

<h2>Where</h2>

<ul>
<li>Please make sure the meetup space (e.g., classroom, meeting room) is available and ready to be used at least 15 minutes before the meetup starts</li>
<li>The organizer and the event host should be there in advance to prepare the physical environment (chairs, wifi, beamer, etc) as well as mentally: getting comfortable with the space, loading the presentation, prepare the speaker notes, etc.</li>
<li>Plan for the worse and hope for the best: in this particular meetup, the beamer was not available, so the host gracefully lent us some 23 inch screen as a second monitor.</li>
</ul>


<h2>What</h2>

<ul>
<li>The speaker should have had already decided what they are going to cover on the meetup and not deviate much from this. Leave some empty buffer space at the end because you will cumulate some deviation during the day.</li>
<li>Of course, have the slides ready if you plan on using them</li>
<li>I prefer having more conversations during the meetup rather than a masterclass-style one. The organizer(s) should act as conversation moderators, often guiding the conversation where (they think) it is most useful. Sometimes, it is a good idea to interrupt the conversation when someone is getting bored or losing focus<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</li>
<li>Be prepared to ask to your attendees what do they want: they are your target</li>
<li>Please ask to your attendees to bring their laptop with git, dependency manager, IDE / editor, test double framework installed. Otherwise, most of the first session is invested in downloading / configuring these.</li>
<li>Please try to be communicative / funny in some way. This makes the slides easier to understand</li>
</ul>


<h2>Meetup details</h2>

<ul>
<li><p>We did two sessions of slides:</p>

<ul>
<li>Introduction to TDD</li>
<li>TDD on a daily basis: learn TDD for a greater good</li>
</ul>
</li>
<li><p>We did three katas:</p>

<ul>
<li>LinkedList: <a href="http://codekata.com/kata/kata21-simple-lists/">source</a>. Originally by <a href="http://twitter.com/@pragdave">Dave &ldquo;Pragmatic Dave&rdquo; Thomas</a></li>
<li>Password: <a href="https://gist.github.com/trikitrok/c031d6b621f28b85ce0d">source</a>. Taken from <a href="http://twitter.com/@trikitrok">Manuel Rivero</a>, also seen on a <a href="http://twitter.com/@carlosble">Carlos Blé</a> workshop</li>
<li>Bank Kata: <a href="https://github.com/sandromancuso/Bank-kata">source</a>. Originally from <a href="http://twitter.com/@sandromancuso">Sandro Mancuso</a></li>
</ul>
</li>
<li><p>The format was this: the first set of slides, the two first katas, some discussion, then lunch; coffee (mandatory); the second set of slides, the third kata (done by them), later done by me at the beamer, explaining the situation and my mental process.</p></li>
</ul>


<h2>Useful feedback</h2>

<ul>
<li><p>About the event:</p>

<ul>
<li>One 8-hour event is much more effective / efficient that 4 2-hour ones</li>
<li>No one complained about the lack of beamer. So don&rsquo;t worry too much if your host doesn&rsquo;t have one, as long as everybody can get close to the (big) screen.</li>
</ul>
</li>
<li><p>About the LinkedList kata:</p>

<ul>
<li>This, as a first TDD example was too complex. Getting into TDD with classes, and serveral functions at the same time might be difficult.</li>
<li>Too academic. This is an example you will usually never implement yourself, as there are libraries who provide it. Therefore, not applicable.</li>
</ul>
</li>
<li><p>About the Password kata:</p>

<ul>
<li>They graded this kata easier than the linkedList</li>
<li>Start with this as it is only a function</li>
<li>This has didactic value as there are some gotchas with this kata</li>
<li>More likely to be implemented by yourself, as most systems require some kind of user authentication</li>
</ul>
</li>
<li><p>About the Bank kata:</p>

<ul>
<li>More resembling of a day-to-day problem</li>
<li>This is a difficult kata if you haven&rsquo;t learned about mocks / test doubles</li>
<li>Interesting interactions between objects</li>
</ul>
</li>
<li><p>For me:</p>

<ul>
<li>They liked both the format and the speaker (a.k.a., me)</li>
<li>They thought this meetup was well prepared in advance</li>
</ul>
</li>
<li><p>My own feedback:</p>

<ul>
<li>It is difficult to ask the attendees to rate their own level or for you to rate it. I thought the linkedlist example would be so easy they would finish it in half the allowed time<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, but it wasn&rsquo;t this way</li>
<li>The productivity level varies hugely from person to person. There were some pairs that dug thoroughly on the problem and others who got stuck (sometimes with the language). Even though both types of pairs were working hard on the proposed problem</li>
<li>We still haven&rsquo;t solved the problem with reservations: many people book a seat on the event but later won&rsquo;t come. This makes other (interested) attendees to not have a seat.</li>
</ul>
</li>
</ul>


<p>Should you want to, please share your feedback / comments via the comments section below or sending a pull request to this <a href="https://github.com/alvarogarcia7/blog_source">repository</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>a good indicator of this is body language or position and whether they are doodling on a paper sheet.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>I did prepare against this adding more possible requirements to the kata, although we finally didn&rsquo;t use them<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Module Base for Cucumber in Java]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/10/maven-module-base-for-cucumber-in-java/"/>
    <updated>2015-03-10T07:24:38+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/10/maven-module-base-for-cucumber-in-java</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve built a small maven module, to be used directly with cucumber. You can fork the repository <a href="https://github.com/alvarogarcia7/base-bdd-cucumber">here</a></p>

<p>This is the setup I&rsquo;ve proposed for the meetup <a href="http://www.meetup.com/Agile-Barcelona-Meetup/events/220673134/">&ldquo;BDD Cucumber kata (gherkin + code)&rdquo;</a>. Will see if this code is successfully used by the ~40 participants in a couple of weeks</p>

<p>(Quote from the <a href="https://github.com/alvarogarcia7/base-bdd-cucumber/blob/master/README.md">README.md</a>):</p>

<p>This maven project has been possible due to <a href="https://twitter.com/@thomassundberg">Thomas Sundberg</a> and <a href="https://thomassundberg.wordpress.com/2014/05/29/cucumber-jvm-hello-world">this post</a></p>

<p>Should you want to, there&rsquo;s a tweet to thank him the effort: <a href="https://twitter.com/intent/tweet?text=@thomassundberg%20thanks%20for%20the%20cucumber%20bdd%20tutorial!%20Will%20be%20using%20it%20from%20@agilebcn;Keep%20up%0Athe%20good%20work&amp;url=https://thomassundberg.wordpress.com/2014/05/29/cucumber-jvm-hello-world/">tweet intent here</a></p>

<p>Happy katas and happy bdd&#8217;ing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kata: Mars Rover in Clojure]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/05/kata-mars-rover-in-clojure/"/>
    <updated>2015-03-05T00:33:50+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/05/kata-mars-rover-in-clojure</id>
    <content type="html"><![CDATA[<p>Yesterday at the <a href="http://www.meetup.com/ClojureBCN/events/220773795/">clojure meetup</a> we<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> did the <a href="http://dallashackclub.com/rover">mars rover</a> in clojure and today I&rsquo;ve tried my hand at it again. Original, from the three of us <a href="https://github.com/jesusdiez/kata-rover-clojure">here</a> and my <a href="https://github.com/alvarogarcia7/kata-rover-clojure">results here</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://twitter.com/jorgeavila_ss">Jorge Ávila</a>, <a href="https://twitter.com/jdiezc">Jesús Díez</a> and I<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mob Programming String Calculator Kata]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/03/03/mob-programming-string-calculator-kata/"/>
    <updated>2015-03-03T04:46:48+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/03/03/mob-programming-string-calculator-kata</id>
    <content type="html"><![CDATA[<p>Last Friday we did a kata<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> using a projector the string calculator <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> using pair programming, TDD and some mob-programming for the last refactoring.</p>

<p>We used a projector (beamer) so everyone could see it. I tried to take really small baby steps but the adding part was done in ~6 cycles<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>We&rsquo;ve all learnt about shotcuts, live user templates for the IDE <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>, TDD methodology, other ways of tackling the problem, how to refactor as a group, clean code, etc</p>

<p>These sessions are necessary to share some knowledge among the teammates and have another chance of doing code review, releasing some pressure from daily practices or bad abstractions / designs (that will be taken care of in the future)</p>

<p>We&rsquo;ve had such a great time, learning together, that would be a candidate for a weekly interaction.</p>

<p><a href="http://en.wikipedia.org/wiki/Mob_programming">Mob programming</a> is such an eye opening practice. It forces you to reconsider your previous dogma and to understand the others&#8217; positions. Wikipedia reads &ldquo;early use of phrase [&hellip;] was made in &lsquo;Extreme Programming Perspectives&rsquo;&rdquo; but this practice is practiced by some, such as <a href="https://twitter.com/carlosble">Carlos Blé</a>, <a href="https://twitter.com/sandromancuso">Sandro Mancuso</a> among others; also at the <a href="http://www.softwarecraftsmanshipbarcelona.org/">Software Craftsmanship Barcelona</a> <a href="https://twitter.com/hashtag/scbcn2013?src=hash">2013</a> and <a href="https://twitter.com/hashtag/SCBCN14?src=hash">2014</a> and the <a href="https://twitter.com/hashtag/socracan?src=hash">SoCra Canaries 2015</a></p>

<h2>One goal</h2>

<p>Our goal for this session was to practice TDD and baby steps, so the team can improve its ability on these skills.</p>

<p>In any case, my objective for the katas (or deliberate practice) is not to get there as fast as we can but to improve our automated routines. This can affect our daily performance, as it becomes natural. It is not about the getting to the destination but enjoying the path along the way. In this manner, you are not so hurried up about a slow train but enjoy the views across the window.</p>

<p>It was good that QA people in the team came to the session. He even participated with some tips / implementations during the refactors. Always fruitful to discuss (and learn) mixed skills (QA / dev) from the other side of the wall</p>

<h2>Conclusion</h2>

<p>I still haven&rsquo;t mastered the recipe (algorithm) for knowing when it is a scaffold and when it&rsquo;s time to refactor using &ldquo;replace algorithm&rdquo;. For know, I just use the three (3) rule and a bit of gut feeling on the side. The bad thing is that this can not be easily taught to someone else. Just learnt by osmosis and practice.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>matching none of the styles explained in <a href="http://johannesbrodwall.com/2011/12/18/how-to-start-a-coding-dojo/">here</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>This is a very good beginner&rsquo;s kata, created by <a href="https://twitter.com/royosherove">Roy Osherove</a>. Can be found <a href="http://osherove.com/tdd-kata-1/">here</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>One piece of feedback I received is that I talk too much while coding, as these 6 cycles took us about 45 minutes, total<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>There are some for <a href="https://www.jetbrains.com/idea/help/live-templates.html">IntelliJ IDEA</a>, <a href="http://stackoverflow.com/questions/4022367/what-is-the-eclipse-equivalent-of-intellij-live-templates">Eclipse</a> too<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Purple Wire]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/24/the-purple-wire/"/>
    <updated>2015-02-24T20:57:43+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/24/the-purple-wire</id>
    <content type="html"><![CDATA[<p>A quote from the <a href="http://www.amazon.com/The-Mythical-Man-Month-Engineering-Anniversary/dp/0201835959">Mythical Man-Month</a>:</p>

<blockquote><p>Chapter 13: The Whole and the Parts</p>

<p>[&hellip;] In System/360 engineering models, one saw occasional strands of purple wire among the routine yellow wires. When a bug was found, two things were done. A quick fix was devised and installed on the system, so testing could proceed. This change was put on in purple wire, so it stuck out like a sore thumb. It was entered in the log. Meanwhile, an official change document was prepared and started into the design automation mill. Eventually this resulted in updated drawings and wire lists, and a new back panel in which the change was implemented in printed circuitry or yellow wire. Now the physical model and the paper were together again, and the purple wire was gone.</p>

<p>Programming needs a purple-wire technique, and it badly needs tight control and deep respect for the paper that ultimately is the product. The vital ingredients of such technique are the logging of all changes in a journal and the distinction, carried conspicuously in source code, between quick patches and thought-through, tested, documented fixes.</p>

<p>[&hellip;]</p>

<p><quote> Brooks, F. - The Mythical Man-Month</quote></p></blockquote>

<p>This purple-wire the author talks about is extremely important even in the current age as the whole team should not be blocked by a single defect.</p>

<p>What I usually do is a commit containing a quick fix (purple-wire, scaffold, hackish if, etc) on a bugfix branch, push the changes so jenkins can verify that this purple-wire didn&rsquo;t break any other case. Then integrate this bugfix into master if required<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. If this affects <code>develop</code> branch of other developers, also merge into develop and or feature branches.</p>

<p>On the other hand, in my opinion, fixing the defect should include an unit test so the defect does not reproduce again. If this is not reproducible through an unit one, escalate test levels (unit, integration, end to end, etc) until a suitable one is found.</p>

<p>Once that applying the purple-wire is done, I <code>checkout</code> the last version where the defect is to be found (usually right before the bugfix branch) and create this test necessary to reproduce behavior. Only after this defect is found I fix it. Otherwise, I think the root cause might be in a different place and, therefore, fix a non-existing defect, effectively introducing a regression.</p>

<p>This test also serves to reproduce that the corrected behavior is not introduced anymore into the system.</p>

<p>As an ending phase for the defect, replace the purple wire with the new code and, after passing all tests, merge to master, develop and feature branches.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>If the found defect is not business critical, I try not to merge to master the purple wire, just leave master pointing to the defect and the bugfix branch with the solution. This bugfix branch will be deleted when a more stable fix is found.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kata: Persistent Linked List]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/23/kata-persistent-linked-list/"/>
    <updated>2015-02-23T23:19:57+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/23/kata-persistent-linked-list</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just written a new kata, about a persistent linked list.</p>

<p>It is using the same project as for the <a href="https://github.com/alvarogarcia7/kata-linkedlist">linked list kata</a>.</p>

<p>For now, only the <code>add</code>, <code>contains</code> and <code>size</code> methods are implemented.</p>

<p>If you have any comments or code review, please let me know</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polishing Your Tools]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/22/polishing-your-tools/"/>
    <updated>2015-02-22T09:30:20+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/22/polishing-your-tools</id>
    <content type="html"><![CDATA[<h2>The toolsmith</h2>

<p><a href="http://en.wikipedia.org/wiki/Fred_Brooks">Frederick P Brooks, Jr</a> quoted / explained a theory explained by Mills and Baker<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> around 1971-72:</p>

<blockquote><p>Chapter 3: The Surgical Team</p>

<p>[&hellip;] but the team be organized like a surgical team rather than a hog-butchering team. That is, instead of each member cutting away on the problem, one does the cutting and the others give him[her] every support that will enhance his[her] effectiveness and productivity.</p>

<p>[&hellip;]</p>

<p><quote> Brooks, F. - The Mythical Man-Month, chapter 3: The Surgical Team </quote></p></blockquote>

<p>(Text between square brackets is mine)</p>

<p>The author goes on to explain the job descriptions for the surgeon, copilot, administrator, editor, secretaries, program clerk, toolsmith, tester and the language lawyer.</p>

<p>The one that will be covered in this post is the toolsmith:</p>

<blockquote><p><strong>The toolsmith</strong>. File-editing, text-editing, and interactive debugging services are now readily available, so that a team will rarely need its own machine and machine-operating crew. But these services must be available with unquestionably satisfactory response and reliability; and the surgeon must be sole judge of the adequacy of the service available to him. He needs a toolsmith, responsible for ensuring this adequacy of the basic service and for constructing, maintaining, and upgrading special tools &ndash;mostly interactive computer services&ndash; needed by his team. Each team will need its own toolsmith, regardless of the excellence and reliability of any centrally provided service, for his job is to see to the tools needed or wanted by his surgeon, without regard to any other team&rsquo;s needs. The tool-builder will often construct specialized utilities, cataloged procedures, macro libraries.</p>

<p><quote> Brooks, F. - The Mythical Man-Month, chapter 3: The Surgical Team </quote></p></blockquote>

<p>Even though the chapter reads a bit outdated, especially with the part about genders and methodologies (i.e., waterfall), the part about roles is interesting. The surgical team, as the author presents will be composed by 9 &frac12; (nine and a half) as the language lawyer can be shared among two or three teams.</p>

<h2>Day to day practices</h2>

<p>So, one full-time job is to build tools to service the surgeon and the copilot (1:8,5 ratio), or approximately 12% of a full-time position.</p>

<p>These tools can make the surgeon and the copilot more effective, ranging from a single digit percentage to orders of magnitude in other tasks.</p>

<p>As agile teams no longer have a toolsmith and the scrum master is not necessarily a technical expert who can build tools for the whole team, the tasks of creating tools must be taken care by everyone. No one better than yourself can know your needs and tailor solutions for them.</p>

<p>The only downside is you have to invest ~5h (for a full time position) per week into creating and polishing tools for your work: it is a need for achieving more productivity when working.</p>

<p>Nowadays that IDEs are configurable, this time might be invested on learning more advanced features as other shortcuts, refactoring techniques, other design patterns, etc. I like having my own live templates (see <a href="https://www.jetbrains.com/idea/help/creating-and-editing-live-templates.html#d1333587e219">description</a>), especially for tests, as I saw on the <a href="https://skillsmatter.com/courses/503-sandro-mancuso-s-crafting-code-course#programme">Crafting Code workshop</a> by <a href="https://twitter.com/sandromancuso">Sandro Mancuso</a></p>

<p>It may also include other activities as setting up your bash alias, cleaning your desk, trying a new UML diagram modeler, etc. Anything that improves the productivity of your main task.</p>

<p>If we consider our experience and knowledge part of our tools (as we are knowledge workers), training could be considered part of polishing our tools. Short, daily or weekly training sessions (even internal) can make a great impact on breadth (not depth) of knowledge among your teammates. This shallow knowledge can open doors for more knowledge to be gained outside of company time, or used to practice and test other methods.</p>

<p>This training is so useful for everyone (&ldquo;when one teaches, two learn&rdquo;) that I recommend my clients to do it. This has helped them cope with changing technologies, knowledge transfer and even some team building.</p>

<h2>Company provided or not?</h2>

<p>Should the company provide for this time to improve? Although I don&rsquo;t know the answer, it would greatly affect the programmers&#8217; productivity to do so. I would say, provide this time as long as what is produced is useful. How do you measure useful? This is a subjective opinion, so it depends on each one.</p>

<p>Some companies acknowledge that this is so important as to invest part of their resources (0-2 hours per week) into training.</p>

<p>Either way, should your company provide it for your or not, you are the one in charge of your career (from Mancuso, <a href="https://leanpub.com/socra">Software Craftsmanship</a> - now called <a href="http://www.amazon.co.uk/Software-Craftsman-Professionalism-Pragmatism-Robert/dp/0134052501/ref=sr_1_1?ie=UTF8&amp;qid=1416521895&amp;sr=8-1&amp;keywords=the+software+craftsman">The Software Craftsman</a>). If you are not allowed to invest company time for your own benefit, you could use some of your personal time to do so. It is not required, but you will soon enjoy its profits.</p>

<hr />

<p>Mills, H., &ldquo;Chief programmer teams, principles, and procedures,&rdquo; IBM Federal Systems Division Report FSC 715108, Gaithersburg, Md., 1971.</p>

<p>Baker, F. T., &ldquo;Chief programmer team management of production programming,&rdquo; IBM Sys. J., 11, 1 (1972).</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Original references in &ldquo;The Mythical Man-Month&rdquo; (Notes and References, page 294) point to these:<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Legacy Code Introduction]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/21/a-legacy-code-introduction/"/>
    <updated>2015-02-21T20:05:46+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/21/a-legacy-code-introduction</id>
    <content type="html"><![CDATA[<p>This is one of the best legacy code introductions I&rsquo;ve seen:</p>

<blockquote><p>The Grand Redesign in the Sky</p>

<p>Eventually the team rebels. They inform management that they cannot continue to develop in this odious code base. They demand a redesign. Management does not want to expend the resources on a whole new redesign of the project, but they cannot deny that productivity is terrible. Eventually they bend to the demands of the developers and authorize the grand redesign in the sky.</p>

<p>A new tiger team is selected. Everyone wants to be on this team because it&rsquo;s a greenfield project. They get to start over and create something truly beautiful. But only the best and brightest are chosen for the tiger team. Everyone else must continue to maintain the current system.</p>

<p>Now the two teams are in a race. The tiger team must build a new system that does everything that the old system does. Not only that, they have to keep up with the changes that are continuously being made to the old system. Management will not replace the old system until the new system can do everything that the old system does.</p>

<p>This race can go on for a very long time. I&rsquo;ve seen it take 10 years. And by the time it&rsquo;s done, the original members of the tiger team are long gone, and the current members are demanding that the new system be redesigned because it&rsquo;s such a mess.</p>

<p><cite> Robert C. Martin </cite> in the chapter 1: Clean Code from the book by <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/">the same name</a></p></blockquote>

<p>Also, why should you estimate the new tiger team abilities better than the old tiger team? Is it because the language, tools, or just because they are &ldquo;plain better&rdquo;?</p>

<p>What guarantees that the resulting software is going to be better than the old one?</p>

<p>Another interesting definition of legacy code is Michael Feather&rsquo;s one (code without tests).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Use of Power Tools]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/18/the-use-of-power-tools/"/>
    <updated>2015-02-18T23:25:25+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/18/the-use-of-power-tools</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently reading the Apprenticeship patterns book, out of order (explained here: TODO).</p>

<p>I&rsquo;m writing down the read chapters in a text file, to measure progress and also be able to backtrack if necessary. This also makes reading the book a &ldquo;choose your own adventure&rdquo;</p>

<p>After reading approximately half the chapters, the navigation wasn&rsquo;t so easy using only the &ldquo;see also&rdquo; part. So I decided to break free from that constraint and start reading other chapters. But how do you know which chapters you have left to read? Knowing the whole set (<code>all</code>) and the read set (<code>read</code>) this is just the <code>all - read</code>.</p>

<p>Coming to a more practical way, how to know this is an automated (non-manual) way? There are <code>m</code> in <code>read</code> and n in <code>all</code>, where m &lt;= n.</p>

<p>The simplest approach would be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for each current in read:
</span><span class='line'>  remove current from all</span></code></pre></td></tr></table></div></figure>


<p>as read is is no particular order, that would yield some <code>O(m*n)</code>, worst case scenario (<code>m==n</code>), <code>O(n^2)</code>.</p>

<p>That is quite expensive, especially if you have to do it manually</p>

<p>If we use the same algorithm but sort the <code>read</code> set (no longer a set, as sets have no order). Also, converting it to a <code>O(1)</code> lookup table (e.g., a map), that would yield some <code>O(n log2 n + m)</code> that is already better. Taking into account that the sorting can be automated by the computer, it would yield a &ldquo;manual O notation cost&rdquo; of <code>O(1 + m)</code>. So, relative to the amount of chapters you have read.</p>

<p>But we can even do better in terms of this &ldquo;manual big o notation&rdquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>read &lt;- sort read into a map ; cost O(1)
</span><span class='line'>all &lt;- sort all into a map ; cost O(1)
</span><span class='line'>
</span><span class='line'>unread &lt;- all - intersection(all, read) ; cost O(1)</span></code></pre></td></tr></table></div></figure>


<p>And this is where the power tools come into place: if we use <code>comm</code> or <code>diff</code>, the computer will create  the <code>unread</code> set for us, in &ldquo;manual&rdquo; cost of <code>O(1)</code></p>

<h2>Example using vim, sort and diff</h2>

<p>This is the <code>read</code> set (for the moment):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>the long road
</span><span class='line'>draw your own map
</span><span class='line'>find mentors
</span><span class='line'>the deep end
</span><span class='line'>create feedback loops
</span><span class='line'>the white belt
</span><span class='line'>practice, practice, practice
</span><span class='line'>concrete skills
</span><span class='line'>your first language
</span><span class='line'>use the source
</span><span class='line'>reflect as you work
</span><span class='line'>record what you learn
</span><span class='line'>kindred spirits
</span><span class='line'>nurture your passion
</span><span class='line'>study the classics
</span><span class='line'>expose your ignorance
</span><span class='line'>dig deeper
</span><span class='line'>be the worst
</span><span class='line'>rubbing elbows
</span><span class='line'>unleash your enthusiasm</span></code></pre></td></tr></table></div></figure>


<p>and this is the all set (copy-paste from the book):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INTRODUCTION 1 What Is Software Craftsmanship? 3 What Is Apprenticeship? 8 What Is an Apprenticeship Pattern? 9 Where Did the Patterns Come From? 9 Where Do We Go from Here? 10
</span><span class='line'>2 EMPTYING THE CUP 11 Your First Language 13 The White Belt 18 Unleash Your Enthusiasm 22 Concrete Skills 24 Expose Your Ignorance 25 Confront Your Ignorance 28 The Deep End 30 Retreat into Competence 32 Wrapping Up 34
</span><span class='line'>3 WALKING THE LONG ROAD 37 The Long Road 38 Craft over Art 40 Sustainable Motivations 43 Nurture Your Passion 45 Draw Your Own Map 47 Use Your Title 50 Stay in the Trenches 52 A Different Road 53 Wrapping Up 55
</span><span class='line'>4 ACCURATE SELF-ASSESSMENT 57 Be the Worst 58 Find Mentors 61 Kindred Spirits 64 Rubbing Elbows 66 Sweep the Floor 68 Wrapping Up 71
</span><span class='line'>5 PERPETUAL LEARNING 73 Expand Your Bandwidth 74 Practice, Practice, Practice 77 Breakable Toys 79 Use the Source 82 Reflect As You Work 85 Record What You Learn 87 Share What You Learn 89 Create Feedback Loops 91 Learn How You Fail 94 Wrapping Up 95
</span><span class='line'>6 CONSTRUCT YOUR CURRICULUM 99 Reading List 100 Read Constantly 102 Study the Classics 104 Dig Deeper 105 Familiar Tools 109 Wrapping Up 111</span></code></pre></td></tr></table></div></figure>


<p>The first line is not interesting to our purposes, so delete it with:</p>

<p>go to first line (<code>1G</code>), then delete (<code>dd</code>)</p>

<p>After a quick inspection, there&rsquo;s a number at the end of the desired line, so replace it with newline:</p>

<p><code>%s/\d\+/\r/g</code> (a snippet below):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>EMPTYING THE CUP 
</span><span class='line'> Your First Language
</span><span class='line'> The White Belt 
</span><span class='line'> Unleash Your Enthusiasm 
</span><span class='line'> Concrete Skills 
</span><span class='line'> Expose Your Ignorance
</span><span class='line'> Confront Your Ignorance 
</span><span class='line'> The Deep End 
</span><span class='line'> Retreat into Competence 
</span><span class='line'> Wrapping Up 
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> WALKING THE LONG ROAD </span></code></pre></td></tr></table></div></figure>


<p>The title lines are all uppercase, so delete them with <code>:%g/^\s*\u\u/d</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> Your First Language 
</span><span class='line'> The White Belt 
</span><span class='line'> Unleash Your Enthusiasm
</span><span class='line'> Concrete Skills 
</span><span class='line'> Expose Your Ignorance
</span><span class='line'> Confront Your Ignorance
</span><span class='line'> The Deep End
</span><span class='line'> Retreat into Competence
</span><span class='line'> Wrapping Up 
</span><span class='line'> 
</span><span class='line'> 
</span><span class='line'> The Long Road </span></code></pre></td></tr></table></div></figure>


<p>explanation:</p>

<ul>
<li><code>:</code> : command</li>
<li><code>%</code> : in all the file</li>
<li><code>g</code> : do (I remember it as &lsquo;go&rsquo;)</li>
<li><code>^</code> : starting at the beginning</li>
<li><code>\s*</code>: whitsepace, as much a possible</li>
<li><code>\u\u</code>: exactly to uppercase letters. Can also be expressed as <code>\u\{2}</code></li>
<li><code>d</code> : delete</li>
</ul>


<p>for more information on vim&rsquo;s regex, go <a href="http://vimregex.com/">here</a></p>

<p>but there are empty lines. Delete them with: <code>%g/^$/d</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> Your First Language
</span><span class='line'> The White Belt
</span><span class='line'> Unleash Your Enthusiasm
</span><span class='line'> Concrete Skills
</span><span class='line'> Expose Your Ignorance 
</span><span class='line'> Confront Your Ignorance
</span><span class='line'> The Deep End 
</span><span class='line'> Retreat into Competence
</span><span class='line'> The Long Road</span></code></pre></td></tr></table></div></figure>


<p>there is a space at the beginning of the line, delete it with <code>:%s/^ //</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Your First Language 
</span><span class='line'>The White Belt 
</span><span class='line'>Unleash Your Enthusiasm 
</span><span class='line'>Concrete Skills 
</span><span class='line'>Expose Your Ignorance  
</span><span class='line'>Confront Your Ignorance 
</span><span class='line'>The Deep End  
</span><span class='line'>Retreat into Competence 
</span><span class='line'>Wrapping Up  
</span><span class='line'>The Long Road  </span></code></pre></td></tr></table></div></figure>


<p>there are upper and lowercase letters. You could find a way of doing it with vi, but I prefer something that I can remember: save the document, then process it with <code>awk</code> and <code>sort</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat all.txt <span class="p">|</span> awk <span class="s1">&#39;{print tolower($0)&#39;</span><span class="o">}</span><span class="p">|</span> sort &gt; all_sorted.txt
</span></code></pre></td></tr></table></div></figure>


<p>(snippet):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>a different road
</span><span class='line'>be the worst
</span><span class='line'>breakable toys
</span><span class='line'>concrete skills
</span><span class='line'>confront your ignorance
</span></code></pre></td></tr></table></div></figure>


<p>If needed, sort and downcase the read.txt too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat read.txt <span class="p">|</span> awk <span class="s1">&#39;{print tolower($0)&#39;</span><span class="o">}</span><span class="p">|</span> sort &gt; read_sorted.txt
</span></code></pre></td></tr></table></div></figure>


<p>I tried using <code>comm</code>, but it wasn&rsquo;t so useful (because of whitespace).</p>

<p>Tried <code>diff</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>diff read_sorted.txt all_sorted.txt  -bBw &gt; to_read.txt
</span><span class='line'>
</span><span class='line'>0a1
</span><span class='line'>&gt; a different road
</span><span class='line'>1a3
</span><span class='line'>&gt; breakable toys
</span><span class='line'>2a5,6
</span><span class='line'>&gt; confront your ignorance
</span><span class='line'>&gt; craft over art
</span><span class='line'>5a10
</span><span class='line'>&gt; expand your bandwidth
</span><span class='line'>6a12
</span><span class='line'>&gt; familiar tools
</span><span class='line'>8a15
</span></code></pre></td></tr></table></div></figure>


<p>to know which are the remain chapters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat to_read.txt <span class="p">|</span> grep <span class="s2">&quot;&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>to count the number of remaining chapters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat to_read.txt <span class="p">|</span> grep <span class="s2">&quot;&gt;&quot;</span> <span class="p">|</span> wc -l
</span></code></pre></td></tr></table></div></figure>


<p>The lesson learned here is to master your tools. This would have cost me a few minutes if done manually as the list was short, too much time if long (>1000 lines).</p>

<p>On a funny note, it has taken me approximately 2 min to do this processing but ~45 minutes to write this blog post. So I don&rsquo;t recommend you write as many posts as processings you do.</p>

<p>To quote Apprenticeship patterns, <a href="http://chimera.labs.oreilly.com/books/1234000001813/ch03.html#solution_id16">A different road</a>:</p>

<blockquote><p>If you walk away from software development, you will find that the habit of rigorous thinking and automating tasks involving large volumes of data will still be useful wherever you go</p>

<p>D Hoover, A Oshineye</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Discussion: Behaviour-Driven Development]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/15/open-discussion-behaviour-driven-development/"/>
    <updated>2015-02-15T02:30:38+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/15/open-discussion-behaviour-driven-development</id>
    <content type="html"><![CDATA[<p>This week we had a great discussion about Behavior Driven Development (BDD). We have explained it as a way of developing software based on requirements, via automatically tested specifications. For more information, see the <a href="http://en.wikipedia.org/wiki/Behavior-driven_development">wikipedia&rsquo;s article on the subject</a></p>

<p>I forgot to mention that this is the perfect start to TDD, as this is usually called the double-loop TDD. See a post on it on <a href="http://coding-is-like-cooking.info/2013/04/outside-in-development-with-double-loop-tdd/">coding is like cooking</a></p>

<p>In this double-loop TDD, the first thing is to create a BDD scenario, run it (red-1), create a unit test that reflects this red (red-2), pass it, refactor; go to red-1 as many times as you need, doing TDD cycles. When you think the feature is done, execute the BDD scenarios and go to green (outer layer) and refactor.</p>

<h2>(Our) Common setting</h2>

<p>Going back to BDD, a common scenario would be the following:</p>

<p>Layers of software:</p>

<ul>
<li>Domain-Specific Language (DSL). See <a href="http://en.wikipedia.org/wiki/Domain-specific_language">wikipedia&rsquo;s article</a></li>
<li>Test adapter: an interpreter for this DSL</li>
<li>Test software: test fixtures, methods, structures to arrange, act, and assert on the sut</li>
<li>Production software (system under test - SUT): thing being tested</li>
</ul>


<h2>A BDD test vs A TDD test</h2>

<p>Let&rsquo;s imagine a BDD test for a <a href="http://en.wikipedia.org/wiki/Linked_list">linked list</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Given I have an empty list
</span><span class='line'>When I add an element
</span><span class='line'>Then I have an element on the list</span></code></pre></td></tr></table></div></figure>


<p>now, the same test in TDD [using java, junit 4, hamcrest]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">add_an_element_to_an_empty_list</span><span class="o">(){</span>
</span><span class='line'>  <span class="n">MyLinkedList</span> <span class="n">linkedList</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MyLinkedList</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">linkedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;something&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">linkedList</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In some aspects, a BDD and a TDD test are similar:</p>

<ul>
<li>the given is the arrange, i.e., the prerequisite</li>
<li>the when is the act, i.e., the command</li>
<li>the then is the assertion, i.e., the postcondition</li>
</ul>


<p>(for more information on this, see <a href="http://en.wikipedia.org/wiki/Hoare_logic">Hoare&rsquo;s triple</a>)</p>

<p>But in others, they are not. In BDD you do not specify the APIs, methods, etc. You only care about behavior.</p>

<h2>Conclusion</h2>

<p>Benefits:</p>

<ul>
<li>everyone might involved in the specification by example workshops (source: <a href="http://www.amazon.com/ATDD-Example-Test-Driven-Development-Addison-Wesley/dp/0321784154">ATDD by example</a>)</li>
<li>live specifications. managers can now understand the real state</li>
<li><a href="http://en.wikipedia.org/wiki/Regression_testing">regression tests</a> are much cheaper (from automation)</li>
</ul>


<p>Gotchas:</p>

<ul>
<li>Test only the happy paths</li>
<li>This has a cost, do not overdo it</li>
<li>Doesn&rsquo;t remove manual tests</li>
<li>How do you manage multiple scenarios</li>
<li>How fast should it be?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing BDD at a Client]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/09/implementing-bdd-at-a-client/"/>
    <updated>2015-02-09T22:23:44+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/09/implementing-bdd-at-a-client</id>
    <content type="html"><![CDATA[<p>This was a low-hanging fruit as a team member who specialises in QA complained about testing in the last moment during the last sprint&rsquo;s retrospective.</p>

<p>Did the grunt job of connecting the dots and configuring the maven project (using jbehave). Also, got the inspiration from a tutorial.</p>

<p>Announced it only as it was in place and QA approved of it</p>

<p>This grunt job clicked with <a href="http://chimera.labs.oreilly.com/books/1234000001813/ch04.html#solution_id21">Sweep the floor</a></p>

<p>Let&rsquo;s see how the sprint goes and what are the pain points during this sprint</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Discussion: On Code Reviews]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/07/open-discussion-on-code-reviews/"/>
    <updated>2015-02-07T18:54:54+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/07/open-discussion-on-code-reviews</id>
    <content type="html"><![CDATA[<p>We had a great conversation yesterday about code reviews.</p>

<p>The main idea was to discuss about it and share the ideas each one had. I didn&rsquo;t want it to turn into a masterclass (see <a href="http://chimera.labs.oreilly.com/books/1234000001813/ch02.html#the_white_belt">the white belt</a>)</p>

<h2>Benefits</h2>

<p>These are the main benefits we saw in it:</p>

<ul>
<li>Increased trust</li>
<li>Learning from others, other approaches</li>
<li>Less defects, more quality</li>
<li>Increased <a href="http://en.wikipedia.org/wiki/Bus_factor">bus factor</a>, decreased information silos</li>
<li>Also:

<ul>
<li>Getting out of your comfort zone</li>
<li>Communicating more often (code style, edge cases, complaining, etc)</li>
</ul>
</li>
</ul>


<h2>Pair programming</h2>

<p>Then we discussed about the topic of <a href="http://alvarogarcia7.github.io/blog/categories/code-review">code reviews</a> and <a href="http://alvarogarcia7.github.io/blog/categories/pair-programming/">pair programming</a>:</p>

<ul>
<li><p>How do they mix</p>

<ul>
<li>Is the need for code review reduced when doing pair programming?</li>
<li>It is cheaper to catch defects when pairing than code review (e.g., less to modify, mental caches are hot, &hellip;), so why do code reviews? <a href="https://twitter.com/jbrains">J. B. Rainsberger</a> has an <a href="http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=acc77a0fb2&amp;e=4a925444f9">article</a> about it</li>
</ul>
</li>
<li><p>Does it give you the same benefits?</p>

<ul>
<li>I argued that it does, some of my colleagues argued against as one is &ldquo;while doing&rdquo; and the other is after.</li>
</ul>
</li>
</ul>


<h2>Practice, Practice, Practice</h2>

<p>This is also a reference to a chapter by the same name (<a href="http://chimera.labs.oreilly.com/books/1234000001813/ch05.html#practice_comma_practice_comma_practice">here</a>)</p>

<p>We proposed this problem:</p>

<blockquote><p>Receive a list of numbers to a command-line (CLI) application and print their sum</p></blockquote>

<p>I wrote simple code listing and we reviewed it. The code is <a href="https://gist.github.com/alvarogarcia7/258faea12cb9375539fe">here as a gist</a></p>

<p>(Just in case, I wrote this listing with some defects / smells on purpose)</p>

<p>Here are the comments:</p>

<ul>
<li>Not all parameters will be added, only the first three</li>
<li>The parameters are out of order, overcomplicating things. Is it due to something? Should I be careful about it?</li>
<li>There is duplication (i.e., parsing from string)</li>
<li>Bad naming: what is <code>a</code>, <code>b</code>, <code>c</code>?</li>
<li>There are no tests for it. No manual / javadoc either. Therefore, it&rsquo;s difficult to maintain</li>
<li><p>Difficult to test: a smell for bad design?</p>

<ul>
<li>How to test the adding by itself? The output is to the console, so we have to capture it (at GMaur we published this tool: <a href="https://github.com/GMaur/legacyutils">legacyUtils</a>)</li>
<li>How to test the parsing if there is no mock to be injected? Only via state tests, therefore &ldquo;end to end&rdquo; tests as it includes the adding</li>
</ul>
</li>
<li><p>Mixed concerns / responsibilities. Parsing the numbers and adding them are different concerns and should not be together</p></li>
</ul>


<h2>Conclusion</h2>

<ul>
<li>No one was against it</li>
<li>We all agreed that is important to do it even in time-constrained environments</li>
<li>It is also important to review our code reviews to make the most of it. The article by <a href="http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=acc77a0fb2&amp;e=4a925444f9">J. B. Rainsberger</a> is quite useful for that</li>
<li>Even small codes can be bad and need to be reviewed (as the example)</li>
<li>Quick and dirty proof of concept do not mix well with code reviews</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pairing With Junior Developers]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/03/pairing-with-junior-developers/"/>
    <updated>2015-02-03T23:40:21+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/03/pairing-with-junior-developers</id>
    <content type="html"><![CDATA[<p>After reading <a href="https://devmynd.com/blog/2015-1-pairing-with-junior-developers">this blog post</a>, here are my thoughts:</p>

<p><strong>WARNING</strong>: the post was about how to do it, these reflections are on a more philosophical level</p>

<p>This is a controversial topic, as:</p>

<ul>
<li>You cannot discern how much or little the other person knows more than you. I cannot find the reference anymore, but it was a to the tune of &ldquo;once the other person&rsquo;s level is higher than yours, you cannot know how much&rdquo;</li>
<li>There are different knowledge areas. Yours and theirs might overlap on some areas, but not completely. So they may be experts on an area that is not useful to the technology you&rsquo;re currently using.</li>
<li>Different people have different passions and motivators.</li>
</ul>


<p>When and where are you a junior and a senior?</p>

<ul>
<li>Does it depend on each job?</li>
<li>Is it on each product you work?</li>
<li>Is it on each team?</li>
</ul>


<blockquote><p>&ldquo;when you join a new project you are starting from square one&rdquo;</p>

<p><cite> D. Hoover, A. Oshineye </cite> in the chapter <a href="http://chimera.labs.oreilly.com/books/1234000001813/ch04.html#solution_id21">Sweep the floor</a>, <a href="http://chimera.labs.oreilly.com/books/1234000001813/index.html">Apprenticeship patterns</a></p></blockquote>

<p>Related to the amount of senior people, is there only one senior per team?</p>

<ul>
<li>Can everybody be a senior? If we assert this is true, what about &ldquo;if everything matters, nothing matters&rdquo;. Does that mean that everyone is senior or there are different levels of seniority and we call &ldquo;the senior&rdquo; the one on the top of the list?</li>
<li>Who choses the senior within the team? Is it self-organized, self-chosen? Do the people chose one? Is a shared responsibility, as each one masters a (possibly different) subject?</li>
</ul>


<p>Food for thought.</p>

<p>What do you think about it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book: Diseño Ágil Con TDD (Spanish)]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/02/02/book-diseno-agil-con-tdd-spanish/"/>
    <updated>2015-02-02T21:32:21+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/02/02/book-diseno-agil-con-tdd-spanish</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve read this book <a href="http://www.carlosble.com/libro-tdd/">Diseño Ágil con TDD</a> (Spanish) by
<a href="https://twitter.com/carlosble">Carlos Blé</a> from cover to cover,
when previously I had only read the theoretical parts (Part I and Chapter 12 in Part II).</p>

<p>It&rsquo;s worth noting that this is the first TDD book in Spanish (I haven&rsquo;t found any book in Spanish predating this one - also backed by the author; published in January 2010) and, as such, there are some translations that could be improved. Not that it makes it more difficult to read. Sometimes it&rsquo;s a good idea to roughly translate concepts into English and then you&rsquo;ll understand the point.</p>

<h2>First part</h2>

<p>The first part is very interesting, a theoretical introduction into TDD, ATDD and Agile methodologies. Points to some good books as a reference (e.g., Growing Object Oriented Software, Guided by Tests; Working Effectively with Legacy Code; Refactoring; etc)</p>

<p>He explains the TDD algorithm (chapter 2) and the ATDD one (chapter 3). These two are maybe the two most important ones on the book. Should you read only a part of this book, I&rsquo;d recommend to read the motivational intro (the fable on the preface) and these two.</p>

<p>He gives excellent pieces of advice who, correctly applied, would set the basis for good software development, such as SOLID, Object Oriented Design (OOD), Inversion of Control (IoC), etc. (See chapter 7, &ldquo;Diseño orientado a objetos&rdquo;).</p>

<p>There&rsquo;s a chapter (number 6) on &ldquo;Mocks and other test doubles&rdquo; (translation is mine)</p>

<h2>Second part</h2>

<p>The second part, as many other books where the source code is printed, was dense for me. Other books, such as <a href="http://www.growing-object-oriented-software.com/">GOOS</a>, show differences in content with bold typeface, to ease the reader&rsquo;s task.  In my opinion, it would be useful to color the diffs, show them on the left and right, or even show the raw diff (e.g., <code>+++</code> <code>---</code>). I&rsquo;m envisioning a typing program as LaTeX where you could specify a commit with its parent and a range of lines to output.</p>

<p>The second part is written in C# and python, to show a TDD session with him. Warning: it&rsquo;s much better in person than reading his book!</p>

<p>The chapter 12 is a set of antipatterns you might find after starting with TDD. Even after you keep practicing TDD for a while, you will not get rid of these smells. Highly recommended.</p>

<p>There&rsquo;s also an appendix on Continuous Integration, although there are better books for this.</p>

<h2>Conclusion</h2>

<p>Recommend this book if you are starting with TDD, or you are more advanced but it&rsquo;s difficult for you to read in English.</p>

<p>Always good as a refresher to read the theoretical part and the antipatterns</p>

<p>PS: This book is free to read, published under a Creative Commons license (don&rsquo;t know exactly which one)</p>
]]></content>
  </entry>
  
</feed>
