<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-01-27T21:36:12+01:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Podcast: Basta Ya De Picar (Spanish)]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/24/podcast-basta-ya-de-picar-spanish/"/>
    <updated>2015-01-24T21:03:03+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/24/podcast-basta-ya-de-picar-spanish</id>
    <content type="html"><![CDATA[<p>Some weeks ago I listened to some podcasts from <a href="http://www.bastayadepicar.com">BastaYaDePicar</a> (episodes 1 to 8) and now I&rsquo;m listening more (9 to 10). I really recommend these to you, and I imagine that the newer episodes (also new format) will be interesting too.</p>

<p>They&rsquo;re in Spanish and narrated by <a href="https://twitter.com/sbastn">Sebastian Hermida</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Snippets Stash]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/24/code-snippets-stash/"/>
    <updated>2015-01-24T20:49:55+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/24/code-snippets-stash</id>
    <content type="html"><![CDATA[<p>Following a team member&rsquo;s recommendation, I recently started a repository to save all my useful snippets.</p>

<p>I&rsquo;ve decided that the examples should be designed guided by tests or at least to have a working example exercised by tests. Also, that I should not reinvent the wheel and use as many open source libraries as possible, reducing the amount of code I have to write myself.</p>

<p>Ideally, every snippet should be a maven project (where applicable) and be imported as a small library, therefore being able to reuse the functionality incrementally across projects.</p>

<p>For the time being, I&rsquo;m saving my snippets into a private repository and later I might decide to publish it for common usage.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bank Kata in Java]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/22/bank-kata-in-java/"/>
    <updated>2015-01-22T22:52:01+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/22/bank-kata-in-java</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/trikitrok">Manuel Rivero</a> and I did a subset of the <a href="https://github.com/sandromancuso/Bank-kata">bank kata</a>, proposed by <a href="https://twitter.com/sandromancuso">Sandro Mancuso</a>.</p>

<p>We&rsquo;ve used java (mockito, hamcrest, junit), outside-in TDD. The code is spread among several sessions. We have not committed after each step, only at the end of the session.</p>

<p>The source code is on <a href="https://github.com/alvarogarcia7/bank-kata">github</a></p>

<p>You can read Manuel&rsquo;s take on the kata on <a href="http://garajeando.blogspot.com.es/2015/01/kata-bank-account-in-java.html">his blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GMaur Code Jam 2015: 01 - Mini-Power Swapper]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/12/gmaur-code-jam/"/>
    <updated>2015-01-12T04:25:22+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/12/gmaur-code-jam</id>
    <content type="html"><![CDATA[<p>Last year we started the program 12 months, 12 katas (as inspired by this <a href="https://github.com/12meses12katas">repository</a>). This year we want to propose something different: an asynchronous code jam</p>

<h2>New problem: Mini-Power Swapper</h2>

<p>This post belongs to a series: <a href="http://alvarogarcia7.github.io/blog/categories/code-jam">code-jam</a></p>

<p>Each month (or so) we at GMaur will publish a new problem (and announce it on <a href="https://twitter.com/gmaurcom">twitter</a>) and post a solution to the last problem.</p>

<p>This month, the <a href="https://github.com/GMaur/code-jam-2015/tree/master/problem-01">Mini-Power Swapper</a></p>

<p>You can fork the repo, commit there and send a pull request. We&rsquo;ll review the code (if you want) and merge the solution to a branch in &ldquo;solutions/&rdquo;.</p>

<p>Happy katas and happy code jamming!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kata: Reverse Polish Notation in Java]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/12/kata-reverse-polish-notation-in-java/"/>
    <updated>2015-01-12T03:56:58+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/12/kata-reverse-polish-notation-in-java</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve written a <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation">RPN</a> string calculator in java, using TDD with these: mockito, hamcrest, junit</p>

<p>It&rsquo;s close to the <a href="http://osherove.com/tdd-kata-1/">String Calculator kata</a>, by <a href="https://twitter.com/RoyOsherove">Roy Osherove</a>. This RPN is using mocks (so more difficult than the String calculator)</p>

<p>I&rsquo;ve tried to practice <a href="http://us2.campaign-archive1.com/?u=80ca60ec48ef77dfaa1f38943&amp;id=42f9a0b66f&amp;e=6ca6702beb">&ldquo;Your tests are dragging you down&rdquo;</a> by <a href="https://twitter.com/jbrains">J.B Rainsberger</a> (mainly, to use something to write on). This behavior is also explained in the book <a href="http://www.carlosble.com/libro-tdd/">Dirigido por tests</a> (Spanish) by <a href="https://twitter.com/carlosble">Carlos Blé</a>.</p>

<p>My solution is <a href="https://github.com/alvarogarcia7/kata-rpn-calculator-java">here</a>. Every step (red, green, refactor) has been saved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Listening to the Tests]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/06/listening-to-the-tests/"/>
    <updated>2015-01-06T22:05:55+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/06/listening-to-the-tests</id>
    <content type="html"><![CDATA[<p>Specifically the chapter no. 20 (&ldquo;Listening to the tests&rdquo;) from <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> available <a href="http://www.amazon.com/dp/0321503627/ref=as_sl_pd_tf_lc?tag=httpwwwm3pcou-20&amp;camp=213381&amp;creative=390973&amp;linkCode=as4&amp;creativeASIN=0321503627&amp;adid=12B4KPA3REF515ASAZN8&amp;&amp;ref-refURL=http%3A%2F%2Fwww.growing-object-oriented-software.com%2F">here</a> is so good to learn to hear to your tests.</p>

<p>To hear what they&rsquo;re trying to tell you, the authors (<a href="https://twitter.com/sf105">Steve Freeman</a> and <a href="https://twitter.com/natpryce">Nat Pryce</a>) explain this to you:</p>

<ul>
<li>I Need to Mock an Object I Can’t Replace</li>
<li>Logging Is a Feature</li>
<li>Mocking Concrete Classes</li>
<li>Don’t Mock Values</li>
<li>Bloated Constructor</li>
<li>Confused Object</li>
<li>Too Many Dependencies</li>
<li>Too Many Expectations</li>
</ul>


<p>To close, a quote:</p>

<blockquote><p>[&hellip;] We’ve found that the qualities that make an object easy to test also make our code responsive to change</p>

<p><a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a>, chapter 20, page 229</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kata: Prime Factors]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/06/kata-prime-factors/"/>
    <updated>2015-01-06T21:47:04+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/06/kata-prime-factors</id>
    <content type="html"><![CDATA[<p>I just did the prime factors kata, in java using TDD. Results: <a href="https://github.com/alvarogarcia7/primeFactors">https://github.com/alvarogarcia7/primeFactors</a></p>

<p>Code review, comments, pull requests are more than welcome</p>

<p>Source: <a href="http://craftsmanship.sv.cmu.edu/katas/prime-factors-kata">http://craftsmanship.sv.cmu.edu/katas/prime-factors-kata</a></p>

<p>Source: <a href="http://butunclebob.com/ArticleS.UncleBob.ThePrimeFactorsKata">http://butunclebob.com/ArticleS.UncleBob.ThePrimeFactorsKata</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk: 'Is TDD Dead? Of Course Not! But What´s All the Fuzz About Then?' by Emily Bache]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-by-emily-bache/"/>
    <updated>2015-01-06T15:47:47+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-by-emily-bache</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just seen this talk: <a href="https://www.youtube.com/watch?v=PCEHRFHKZSk">Is TDD dead? Of course not! But what´s all the fuzz about then?</a> by <a href="https://twitter.com/emilybache">Emily Bache</a></p>

<h3>My notes</h3>

<ul>
<li>deliberate vs accidental learning (around minute 19)</li>
<li><p>do not be an evangelist for tdd but rather &ldquo;come learn tdd, come at a dojo with us!&rdquo;</p></li>
<li><p>points to <a href="https://twitter.com/tastapod">Dan North</a>&rsquo;s <a href="www.youtube.com/watch?v=SPj-23z-hQA">talk</a> (at the same foo café)</p></li>
<li>points to her book - <a href="https://leanpub.com/codingdojohandbook">The Coding Dojo Handbook</a></li>
<li><p>points to <a href="http://cyber-dojo.org/">cyber dojo</a></p></li>
<li><p>design is hard whether you do TDD or not</p></li>
<li><a href="https://twitter.com/dhh">dhh</a>: too much focus on unit test.</li>
</ul>


<blockquote><p>I thought we got rid of best practices in agile</p></blockquote>

<ul>
<li>different kinds of advice for each kind of target (eg, based on experience level)</li>
<li>points to self-testing code (by <a href="https://twitter.com/martinfowler">Martin Fowler</a>)</li>
<li>problem: the test suite is no longer in sync with the production code</li>
<li>points to approval testing:

<ul>
<li>code kata &ldquo;minesweeper&rdquo;</li>
<li>test data + code produces output data</li>
<li>I approve the data</li>
<li>Useful for full features</li>
<li>Useful for asserting on difficult parts like images</li>
<li>realistic users to generate tests</li>
<li>tool to manage these &ldquo;approval tests&rdquo;. Easy way of managing tests cases</li>
<li><a href="http://texttest.org">TextTest</a> is one of these tools</li>
</ul>
</li>
</ul>


<h3>Her conclusions</h3>

<ul>
<li>Watch out the fundamentalism</li>
<li>TDD might take you to too many layers of indirection</li>
<li>The share of each test (end to end, integration, unit) depends on each project / part</li>
<li>Many TDD pieces of advice is directed to novices. When you&rsquo;re not, you should know when to stop listening</li>
</ul>


<p>PS: I&rsquo;ve first seen this video in <a href="http://garajeando.blogspot.com/2015/01/interesting-talk-is-tdd-dead-of-course.html">garajeando</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Should We Start the TDD Cycle on Refactor?]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2014/12/29/should-we-start-the-tdd-cycle-on-refactor/"/>
    <updated>2014-12-29T20:30:01+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2014/12/29/should-we-start-the-tdd-cycle-on-refactor</id>
    <content type="html"><![CDATA[<p>In this lexical scope, TDD by example is referring to this book<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, available <a href="http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530">on Amazon</a></p>

<h3>The TDD cycle</h3>

<p>Altough <a href="https://twitter.com/KentBeck">Kent Beck</a> in his book Test-Driven Development by example explains in &ldquo;Part I: the money example&rdquo;<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> that one should</p>

<blockquote><p>quickly add a test;</p>

<p>run all the tests and see the new one fail [&hellip;]</p>

<p><cite>Kent Beck </cite></p></blockquote>

<p>Implying that the TDD cycle starts with the red. Later on he explains that the cycle continues with green and refactor and back to red.</p>

<p>But I&rsquo;ve been hearing for a while that there&rsquo;re some useful refactors to be done before introducing new code. Rings in my head but the only example I have is Xavi Gost&rsquo;s &ldquo;La economía del refactoring<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>&rdquo;</p>

<h3>Refactoring</h3>

<p>Let&rsquo;s take a look at the definition of refactor (found <a href="http://www.refactoring.com/">here</a>):</p>

<blockquote><p>[Refactoring] is a disciplined technique for restructuring an existing body of code, altering its internal structure without changing its external behavior.</p>

<p> <cite>Martin Fowler</cite></p></blockquote>

<p>I&rsquo;ve found some info on <a href="http://stackoverflow.com/questions/1355101/test-code-refactor-when-should-we-start-a-refactoring">stackoverflow</a> about the subject. The currently <a href="http://stackoverflow.com/a/1355782">accepted answer</a> points out some interesting comments:</p>

<ul>
<li>Do not refactor on red. Always a good reminder</li>
<li>If you are refactoring for introducing a feature, how much refactor is enough? This is speculative development, possibly taking much time from needed development</li>
</ul>


<p>The last point is the one that interests me the most:</p>

<ul>
<li>Your refactoring might not be where you&rsquo;re going to introduce new production code<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> (spatial caché)</li>
<li>You might end up introducing features after a few hours/days of refactoring, therefore losing focus on the refactor you did and why (local caché)</li>
<li>Given that I&rsquo;ve already &ldquo;cleaned up&rdquo; this, I could also go somewhere else (slippery slope). Heard from <a href="https://twitter.com/xav1uzz">Xavi Gost</a> at the CAS2014 at his talk <a href="http://cas2014.agile-spain.org/sessions/sesion-1h-la-economia-del-refactoring-una-vision-desde-la-gestion-economica-del-proyecto-xavier-gost/">La economía del refactoring</a></li>
</ul>


<blockquote><p>No está justificado hacer cambios fuera de la rebanada.</p></blockquote>

<p>Roughly translated to &ldquo;It&rsquo;s not justified to change outside the bread slice&rdquo;, as Xavi was referring to software as sliced bread instead of layers, vertical rather than horizontal</p>

<h3>Should you do it?</h3>

<ul>
<li>Doing it would be a good thing, as long as you know in advance what will be affected by the next feature.</li>
<li>It can allow for less refactoring at the end of the cycle. This is not about duplication but refactoring to patterns. There might be a gain in refactoring to a pattern before introducing another feature. An example might be adding a new strategy when it&rsquo;s currently coded as if-then-else</li>
<li>The last responsible moment might be before or after introducing the feature. You decide.</li>
<li>Work less as there&rsquo;s no need for adding new cases to old structures and then simplifying</li>
</ul>


<h3>Should you not do it?</h3>

<ul>
<li>Foreseeing the future is difficult, therefore you might end with unused development, as it is speculating</li>
<li>Related to the last point, you might end refactoring in the wrong places. There&rsquo;s no current business value to it.</li>
<li>Not useful on first round of a new feature, you can use a lambda transition to the red again. But then, this is not a general pattern, only applicable to a big percent of cases.</li>
</ul>


<h2>Conclusions</h2>

<p>Short answer: it mainly depends on your environment:</p>

<ul>
<li>You: experience, common sense (sadly) &mdash;another post coming&mdash;, benefit/time-wasted ratio</li>
<li>Your project: how tight are deadlines, how critical that code is, the team&rsquo;s pressure</li>
</ul>


<p>Long answer: Yes, as long as:
 1. You realize there is a fine line between fixing code and rewriting code (Egoless programming #4). Don&rsquo;t be a lone enforcer
 2. Strictly follow the boy scout rule but only around your campfire, not outside of it.
 1. You know your domain, pitfalls and team well
 1. You want to test this hypothesis and post an answer</p>

<h3>Sources</h3>

<ul>
<li><a href="http://cas2014.agile-spain.org/sessions/sesion-1h-la-economia-del-refactoring-una-vision-desde-la-gestion-economica-del-proyecto-xavier-gost/">La economía del refactoring</a>, <a href="https://twitter.com/xav1uzz">Xavi Gost</a></li>
<li><a href="http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530">Test-Driven Development by example</a>, <a href="https://twitter.com/KentBeck">Kent Beck</a></li>
<li><a href="http://refactoring.com">Refactoring.com</a>, <a href="https://twitter.com/martinfowler">Martin Fowler</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Test-Driven Development by example; Beck, K. (ISBN-13: 078-5342146530)<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>from the book, description of part I, before chapter I<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>That talk is not yet available (AFAIK), but there&rsquo;s a <a href="http://ocana.github.io/articles/Conferencia-Agile-Spain-2014-primer-dia/">post</a> about it (Spanish)<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>The &ldquo;pains&rdquo; you might feel before introducing new features might not be real<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global Day of Code Retreat 2014]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2014/12/18/global-day-of-code-retreat/"/>
    <updated>2014-12-18T07:33:59+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2014/12/18/global-day-of-code-retreat</id>
    <content type="html"><![CDATA[<p>One month ago (on November 15th) I facilitated my first <a href="http://globalday.coderetreat.org/">Global Day of Code Retreat</a> at <a href="http://www.ebayenterprise.com/contact/locations.php">eBay Enterprise International</a> and had such a blast. <a href="http://www.meetup.com/Agile-Barcelona-Meetup/events/218211672/">Link to the event (Spanish)</a></p>

<h2>Some thoughts</h2>

<p>After a month of thinking about it, here are some thoughts:</p>

<ol>
<li><p>This year&rsquo;s GDCR was quite different that last one&rsquo;s:</p>

<p>It&rsquo;s OK: do not strive for repeating the same each year</p></li>
<li><p>Heat map (in several dimensions): TDD x language</p>

<p>Usually meetups have a clear goal, for the limited amount of time they run (see another bullet point).</p>

<p>This single goal can span across multiple skill sets (e.g., TDD and language specific), therefore we did a two-dimensional heat map: first dimension is TDD skill level and second dimension (discreet) would be language you master</p>

<p><a href="https://docs.google.com/spreadsheets/d/1LRmjLbvFEtqDskDwb3gVBKDfXckqDylAMJA7HB6ZLC8/edit">Example can be found here</a></p></li>
<li><p>As a facilitator, have a clear goal for the meetup, even though you don&rsquo;t need to share it with the assistants</p>

<p>Mine was to have fun and introduce some people to TDD</p>

<p>I shared the goal with the attendants because I wanted to explain the purpose of that day to newcomers.</p>

<p>Also, as a result of that day, I&rsquo;ve discovered some very motivated people in our host (eBay). Personally, I&rsquo;d like to continue doing meetups with their developers.</p></li>
<li><p>You need a mix of more seasoned attendants and more unexperienced ones.</p>

<p>This way, the knowledge is being transferred both ways; not only about the language but about strategies, patterns, shortcuts &amp; editors, languages, etc</p>

<p>If doing TDD in these events, it&rsquo;s even more important to mix people, as it&rsquo;s difficult for an unexperienced pair to start doing TDD for themselves.</p></li>
<li><p>You should only do your job as facilitator</p>

<p>Let others discuss, ask and answer questions. Your job should be as thin as possible. Don&rsquo;t try to answer too many questions</p>

<p>There will be attendants with more experience / expertise than you (most of them were in my case), so don&rsquo;t strive to teach them but to manage the discussions to the right place</p>

<p>Be strict about timing but find the balance. Sometimes it&rsquo;s useful to invest more time (~5 minutes) to a rich discussion and then reduce the next iteration.</p>

<p>Many people will complain about having to delete their code the first time. Explain to them that&rsquo;s part of the game and don&rsquo;t give in. The following iterations most of the people won&rsquo;t complain anymore</p>

<p>Last but not least, have fun!</p></li>
</ol>


<h2>Some critiques</h2>

<p>We organized the event a little bit late</p>

<ul>
<li><p>The difference from last year (<a href="http://www.meetup.com/Agile-Barcelona-Meetup/events/153967432/">December</a>) vs this year (<a href="http://www.meetup.com/Agile-Barcelona-Meetup/events/218211672/">November</a>) was relevant. We were expecting to do it later so it surprised us.</p></li>
<li><p>Due to that, many people couldn&rsquo;t come and I&rsquo;m sorry for it</p></li>
</ul>


<h2>Conclusion</h2>

<p>We totally, definitely should do this more often.</p>

<p>You need to reinvent yourself for every global day or people will stop coming</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Joys of the Craft]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2014/12/15/the-joys-of-the-craft/"/>
    <updated>2014-12-15T22:46:50+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2014/12/15/the-joys-of-the-craft</id>
    <content type="html"><![CDATA[<p>Quoting the book,</p>

<blockquote><p>Why is programming fun? What delights may its practitioner expect as his reward?</p>

<p>First is the sheer joy of making things. As the child delights in his mud pie, so the adult enjoys building things, especially things of his own design [&hellip;]</p>

<p>Second is the pleasure of making things that are useful to other people. Deep within, we want other to use our work and to find it helpful. [&hellip;]</p>

<p>Third is the fascination of fashioning complex puzzle-like objects of interlocking moving parts and watching them work in subtle cycles, playing out the consequences of principles built in from the beginning. [&hellip;]</p>

<p>Fourth is the joy of always learning, which springs from the nonrepeating nature of the task. In one way or another the problem is ever new, and its solver learns something: sometimes practical, sometimes theoretical, and sometimes both.</p>

<p>Finally, there is the delight of working in such a tractable medium. The programmer, like the poet, works only slightly removed from the pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination. Few media of creating are so flexible, so easy to polish and rework, so readily capable of realizing grand conceptual structures. (As we shall see later, this very tractability has its own problems.)</p>

<p><cite>Frederick P. Brooks, Jr</cite> in the <a href="http://www.amazon.com/The-Mythical-Man-Month-Engineering-Anniversary/dp/0201835959">&ldquo;The Mythical Man-Month&rdquo;</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['Pocket' Application]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2014/12/08/pocket-application/"/>
    <updated>2014-12-08T23:40:13+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2014/12/08/pocket-application</id>
    <content type="html"><![CDATA[<p>This is a free application I use quite often: <a href="http://getpocket.com/">pocket</a></p>

<p>They promote it as &ldquo;When you find something you want to view later, put it in Pocket.&rdquo;</p>

<p>I really use for that. Once you install it in your phone, some handy shortcuts appear both on Chrome for saving the page and on twitter when you hit the &ldquo;share&rdquo; button.</p>

<p>It is especially useful when you&rsquo;re on the tube and have no connection, as pocket saves an offline version of the page (warning: this doesn&rsquo;t work for video sites like youtube)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CAS2014 Wrap Up]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2014/12/08/cas2014-wrap-up/"/>
    <updated>2014-12-08T19:18:28+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2014/12/08/cas2014-wrap-up</id>
    <content type="html"><![CDATA[<p>This year&rsquo;s edition of the CAS 2014 has been awesome. There were several tracks:</p>

<ul>
<li>Enterprise Agile</li>
<li>Collaboration, Culture and Teams</li>
<li>Delighting Products</li>
<li>Agile+</li>
<li>Development Practices and Craftsmanship</li>
</ul>


<p>The last one is where I spent most of the time.</p>

<h2>The schedule</h2>

<p> The first day:</p>

<ul>
<li><a href="https://twitter.com/sandromancuso">Sandro Mancuso</a>: talking about Software Craftsmanship</li>
<li><a href="https://twitter.com/fiunchinho">Jose Manuel Armesto</a>: talking about Unit Testing sucks (and it&rsquo;s our fault)</li>
<li><a href="https://twitter.com/rmarpozo">Rubén Martín Pozo</a>: talking about Specification by example - Historia de un equipo que no odia documentar</li>
<li><a href="https://twitter.com/XaV1uzz">Xavi Gost</a>: talking about La economía del refactoring. Una visión desde la gestión económica del proyecto.</li>
<li><a href="https://twitter.com/_pedro_torres">Pedro Gustavo Torres</a>: talking about Pair Programming</li>
</ul>


<p> The second day:</p>

<ul>
<li><a href="https://twitter.com/rafadc">Rafael de Castro</a>: talking about Generando tests</li>
<li><a href="https://twitter.com/borillo">Ricardo Borillo</a>: talking about CQRS y los beneficios surgidos de la necesidad.</li>
<li><a href="https://twitter.com/cupcicm">Manu Cupcic</a> and <a href="https://twitter.com/eidrien">Adrian Perreau de Pinninck</a>: talking about Delivery at Scale.</li>
<li><a href="https://twitter.com/jgabardini">Juan Gabardini</a>: talking about Testing en equipos infectados de test. This talk was also prepared by Juan Diego Vasco Moncada but he couldn&rsquo;t come.</li>
</ul>


<h2> Some thoughts</h2>

<p> The conferences were awesome, but I&rsquo;d preferred if most (if not all) were in English so this conference can attract more international speakers</p>

<p> There were 600+ people in the <a href="http://www.cccb.org/">CCCB</a>. That was only possible due to all the volunteers, organizers, caterers and the assistants.</p>

<h2> More info</h2>

<p> You can find more information on the <a href="http://cas2014.agile-spain.org/">official website</a> and on twitter using the hashtag <a href="https://twitter.com/search?q=%23cas2k14&amp;src=tyah">#cas2014</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2014/12/08/hello-world/"/>
    <updated>2014-12-08T17:20:59+01:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2014/12/08/hello-world</id>
    <content type="html"><![CDATA[<p>This is the obligatory &ldquo;Hello World!&rdquo; post</p>

<p>To get here and create your own blog using <a href="http://octopress.org/">octopress</a>, follow the
instructions below:</p>

<ul>
<li>Install ruby, as explained on the guide
<a href="http://octopress.org/docs/setup/">here</a></li>
<li>I&rsquo;ve used Ruby 2.1.5p273 (2014-11-13 revision 48405) [x64-mingw32]
(<code>ruby --version</code>)</li>
<li>Configure your blog. See
<a href="http://octopress.org/docs/configuring/">here</a></li>
<li>Install octopress: <code>rake install</code></li>
<li>Start the server with <code>rake preview</code>. You should see a basic
template (CSS) with your blog name, the author, etcetera</li>
<li>Create your first post.</li>
</ul>


<pre><code class="`cmd">rake new_post["Hello World!"]
</code></pre>

<ul>
<li>Refresh the browser and see the new post appear</li>
<li>Edit the .markdown file in &ldquo;source\_posts&rdquo; using a markup editor</li>
<li>Execute <code>rake preview</code> to see your first post (this)</li>
<li>Execute <code>rake setup_github_pages</code> for every computer you want to
publish from</li>
<li><p>Execute <code>rake generate &amp;&amp; rake deploy</code>. After a few minutes, you
should go to
<username>.github.io to find your new blog in there</p></li>
<li><p>Happy blogging!</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
