<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-07-06T09:29:44+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Paper: Fundamental Concepts on Programming Languages]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/07/06/paper-fundamental-concepts-on-programming-languages/"/>
    <updated>2015-07-06T07:48:35+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/07/06/paper-fundamental-concepts-on-programming-languages</id>
    <content type="html"><![CDATA[<p>Note: all quotes on this post come from [this paper][<a href="http://www.cs.cmu.edu/~crary/819-f09/Strachey67.pdf">http://www.cs.cmu.edu/~crary/819-f09/Strachey67.pdf</a>]: Strachey, C. Fundamental Concepts in Programming Languages. Published in Higher-Order and Symbolic Computation, 13, 11–49, 2000.</p>

<h2>Contents</h2>

<p>This paper starts slow, from the mathematical and philosophical point of view, until it gets to the basic concepts on the fundamental concepts:</p>

<ul>
<li>Assignment command</li>
<li>L-Value and R-Value</li>
<li>Definitions</li>
<li>Names</li>
<li>Numerals</li>
<li>Conceptual models: an explanation about the relationship between the code, the memory store and the abstract concepts</li>
</ul>


<p>Later, it gets more in depth to the conceptual constructs, where most of the content is explained and contains:</p>

<ul>
<li>Expressions and commands</li>
<li>Expressions and evaluations</li>
<li>Commands and sequencing</li>
<li>Definition of functions and routines</li>
<li>Functions and routines as data items</li>
<li>Types and polymorphism</li>
<li>Compound data structures</li>
</ul>


<p>Finally, as closing notes, it explains some implementation details (such as Load-Update Pairs), tools as Macrogenerators (nowadays called macros) and formal semantics</p>

<h2>Notes / highlights</h2>

<h3>L-Values and R-Values</h3>

<blockquote><p>L-value for the address-like object appropriate on the left of the assignment, and R-value for the contents-like object appropriate for the right</p>

<p>2.1, Assignment commands in page 14</p>

<p>An L-value represents an area of the store of the computer. [&hellip;] Two essential features [&hellip;] it has content &ndash;i.e., an associated R-value&ndash; and that it is in general possible to change this content</p>

<p>2.2, L-values and R-Values in pages 14-15</p></blockquote>

<h3>Referential transparency</h3>

<p>Explained in 3.2.1, Values:</p>

<blockquote><p>In essence, this means that if we wish to find the value of an expression with contains a sub-expression, the only thing we need to know about the sub-expression is its value.</p></blockquote>

<p>Also cites Quine <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> on this matter.</p>

<blockquote><p>We tend to assume automatically that the symbol <code>x</code> in an expression such as <code>3x**2 + 2x + 17</code> stands for the same thing (or has the same value) on each occasion it occurs. This is the most important consequence of referential transparency</p>

<p>3.3.1 Variables, page 22</p>

<p>If we consider L-values as well as R-Values, however, we can preserve referential transparency as far as L-values are concerned. Thi is because L-values, being generalised addresses, are not altered by assignment command</p>

<p>3.3.1 Variables, page 22</p></blockquote>

<h3>Types of variables: bound, free</h3>

<p>Explains the types of variables, based on their belonging to an environment or not: bound variable and free variable. Page 20</p>

<h3>Evaluating vs applying</h3>

<blockquote><p>Distinction between evaluating an operator and applying it to its operands
3.2.4, Evaluation, page 20</p></blockquote>

<p>This also introduces the concept of currification / currying:</p>

<blockquote><p>[&hellip;] for reducing operators with several operands to the successive application of single operands operators
3.2.4, Evaluation, page 21</p></blockquote>

<p>An example is given.</p>

<h3>Conditional expressions vs conditional commands</h3>

<p>Introduces the concept of conditional expression, akin to the ternary operator (example in java):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">2</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>this is equivalent to (example in java):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the conditional command (example in java):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">f</span><span class="o">();</span>
</span><span class='line'>  <span class="n">h</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">g</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The conditional expression is also known as &ldquo;functional if&rdquo;</p>

<h2>Parameter calling modes</h2>

<p>Explains call by value and call by reference, equivalent to calling by R-Value or L-Value, respectively</p>

<p>3.4.2, Parameter calling mode</p>

<h3>Functions and routines</h3>

<blockquote><p>Functions and routines are as different in their nature as expressions and commands. It
is unfortunate, therefore, that most programming languages manage to confuse them very
successfully</p>

<p>3.4.5 Functions and routines, page 30</p>

<p>The problem arises because we naturally expect referential transparency of R-values in
expressions, particularly those on the right of assignment commands</p>

<p>3.4.5 Functions and routines, page 30</p>

<p>Any departure of R-value referential transparency in a R-value context should
either be eliminated by decomposing the expression into several commands and simpler
expressions, or, if this turns out to be difficult, the subject of a comment</p>

<p>3.4.5 Functions and routines, page 30</p></blockquote>

<h3>Constancy and fixity</h3>

<p>&ldquo;Protection by freezing&rdquo;</p>

<blockquote><p>Constancy is thus an attribute of an L-value, and
is, moreover, an invariant attribute. Thus when we create a new L-value, and in particular
when we define a new quantity, we must decide whether it is a constant or a variable.</p>

<p>3.4.6 Constants and variables, page 30</p>

<p>[&hellip;] fixed function. This is defined as a function which
either has no free variables, or if it has, whose free variables are all both constant and fixed.</p>

<p>3.4.7, Fixed and free, page 31</p>

<p>Note that fixity is a property of the λ-expression&ndash;i.e., a property of the R-value, while
constancy is a property of the L-value.</p>

<p>3.4.7, Fixed and free, page 31</p></blockquote>

<p>In general:</p>

<ul>
<li>Constancy is an attribute of the L-Value</li>
<li>Fixity is an attribute of the R-Value</li>
</ul>


<p>Both for functions and objects.</p>

<h3>First and second class objects</h3>

<blockquote><p>A procedure, on the other hand, may only appear in another procedure call either
as the operator (the most common case) or as one of the actual parameters. There are no
other expressions involving procedures or whose results are procedures. Thus in a sense
procedures in ALGOL are second class citizens—they always have to appear in person
and can never be represented by a variable or expression</p>

<p>3.5.1, First and second class objects, page 32</p>

<p>Historically this second class status of procedures in ALGOL is probably a consequence
of the view of functions taken by many mathematicians: that they are constants whose
name one can always recognise.</p>

<p>3.5.1, First and second class objects, page 33</p>

<p>[&hellip;] it is remarkably difficult to stop looking on functions as second class objects</p>

<p>3.5.1, First and second class objects, page 33</p>

<p>and in particular, of functions which have functions as a result</p>

<p>3.5.1, First and second class objects, page 33</p></blockquote>

<h3>Closure</h3>

<blockquote><p>Thus the R-value of a function contains two parts—a rule for evaluating the expression,
and an environment which supplies its free variables. An R-value of this sort will be called
a closure.</p>

<p>3.5.2, Representation of functions, page 34</p></blockquote>

<h3>Types</h3>

<p>There is information on types: latent vs manifest, how to determine it</p>

<blockquote><p>We call attributes which can be determined at compile time in this way manifest; attributes
that can only be determined by running the program are known as latent</p>

<p>3.6.2, Manifest and latent, page 36</p></blockquote>

<h3>Polymorphism</h3>

<p>Ad-hoc vs parametric polymorphism</p>

<blockquote><p>In ad hoc polymorphism there is no single systematic way of determining the type of the
result from the type of the arguments. There may be several rules of limited extent which
reduce the number of cases, but these are themselves ad hoc both in scope and content</p>

<p>3.6.4, Polymorphism, page 37</p>

<p>Parametric polymorphism:</p>

<p>(α ⇒ β, α list) ⇒ β list</p>

<p>3.6.4, Polymorphism, page 37</p></blockquote>

<h3>Collections</h3>

<blockquote><ul>
<li><strong>List</strong>: An ordered sequence of objects all of the same type. The number is dynamically variable.</li>
<li><strong>Ntuple</strong>: An ordered sequence of objects all of the same type. The number is dynamically variable.</li>
<li><strong>Set</strong>: An ordered sequence of objects all of the same type. The number is dynamically variable.</li>
<li><strong>Bag or Coll</strong>: It consists of an unordered collection of objects all of which are of the same type and differs from a set in that repetitions are allowed</li>
</ul>


<p>3.7.7, Other forms of structure, page 45</p></blockquote>

<p>Also talks about &ldquo;rings&rdquo; (3.7.7, Other forms of structure, page 45)</p>

<h3>Macros</h3>

<blockquote><p>macrogenerators deal with the symbols which represent
the variables, values and other objects of concern to a program so that all their manipulation
is performed before the final compiling</p>

<p>4.2, Macrogenerators, page 47</p>

<p>Macrogeneration seems to be particularly valuable when a semantic extension of the
language is required</p>

<p>4.2, Macrogenerators, page 47</p>

<p>I believe, a proper aim for programming language designers to try to make the use of
macrogenerators wholly unnecessary</p>

<p>4.2, Macrogenerators, page 47</p></blockquote>

<h3>funny comments</h3>

<blockquote><p>One important characteristic of mathematics is our habit of using names for things</p>

<p>3.3.1 Variables, page 22</p>

<p>if this turns out to be difficult, the subject of a comment</p>

<p>3.4.5 Functions and routines, page 30</p>

<p><strong>Bag or Coll</strong> This is a new sort of collection for which there is, as yet, no generally accepted name.</p>

<p>3.7.7, Other forms of structure, page 45</p></blockquote>

<h2>Review</h2>

<p>This has been a very interesting paper, on the foundational concepts. A more formal approach to the assignment operator, L-Values and R-Values and functions.</p>

<p>The part about types is very interesting, explained in simple terms and with examples.</p>

<p>Some of the examples are in CPL, that although an old language, it is still comprehensible. The examples or equivalences in lambda calculus are more difficult to understand (I had to read an introduction to it<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, just to grab the basics)</p>

<p>Some concepts are a bit outdated, such as the missing object orientation (or its features) or the assembly code, but in general the contents resist the time.</p>

<p>Many of the concepts in programming are around L-Values and R-Values and this paper has made me realize this. Also that even if we are users of these systems, I didn&rsquo;t know many formalities behind it (assignment operator, rewriting, types, type inference, polymorphism modes, polymorphism without inheritance, etc).</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Quine, W.V. Word and Object. New York Technology Press and Wiley, 1960<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="../../../../2015/07/01/self-study-in-july-2015">introduction to lambda calculus</a>, search for &ldquo;A Tutorial Introduction to the Lambda Calculus&rdquo;<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterate With Index in Clojure]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/07/04/iterate-with-index-in-clojure/"/>
    <updated>2015-07-04T14:34:37+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/07/04/iterate-with-index-in-clojure</id>
    <content type="html"><![CDATA[<p>Scenario: iterate a sequence (<code>seq</code>) with its index</p>

<p>The lines have an implicit line number (starting by 1, in most editors):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1] line1
</span><span class='line'>[2] line2
</span><span class='line'>[3] hello</span></code></pre></td></tr></table></div></figure>


<p>When you read it from file to a variable, it is converted to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="s">&quot;line1&quot;</span> <span class="s">&quot;line2&quot;</span> <span class="s">&quot;hello&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p> This implicit line number value is not present, therefore you need to assign them one.</p>

<p> In ruby, you have this construct:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">,</span> <span class="s2">&quot;C&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">each_with_index</span> <span class="p">{</span><span class="o">|</span><span class="n">val</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="s2"> =&gt; </span><span class="si">#{</span><span class="n">index</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/questions/310634/what-is-the-right-way-to-iterate-through-an-array-in-ruby/310638#310638">Source</a></p>

<p>In clojure, there is a similar function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">map-indexed</span> <span class="p">(</span><span class="nv">fn</span> <span class="nv">[idx</span> <span class="nv">itm]</span> <span class="nv">[idx</span> <span class="nv">itm]</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="ss">:f</span> <span class="ss">:o</span><span class="p">))</span>
</span><span class='line'><span class="c1">; ([0 &quot;line1&quot;] [1 &quot;line2&quot;] [2 &quot;hello&quot;])</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to shift the collection to the right so it starts with 1 (for the REPL):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">def</span> <span class="nv">lines</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;line1&quot;</span> <span class="s">&quot;line2&quot;</span> <span class="s">&quot;hello&quot;</span><span class="p">))</span>
</span><span class='line'><span class="c1">; (&quot;line1&quot; &quot;line2&quot; &quot;hello&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">defn</span> <span class="nv">shift-one</span> <span class="nv">[lines]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">cons</span> <span class="s">&quot;&quot;</span> <span class="nv">lines</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nv">def</span> <span class="nv">lines</span> <span class="p">(</span><span class="nv">shift-one</span> <span class="nv">lines</span><span class="p">))</span>
</span><span class='line'><span class="nv">lines</span>
</span><span class='line'><span class="c1">; (&quot;&quot; &quot;line1&quot; &quot;line2&quot; &quot;hello&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">map-indexed</span> <span class="p">(</span><span class="nv">fn</span> <span class="nv">[idx</span> <span class="nv">itm]</span> <span class="nv">[idx</span> <span class="nv">itm]</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">lines</span><span class="p">)</span>
</span><span class='line'><span class="c1">; ([0 &quot;&quot;] [1 &quot;line1&quot;] [2 &quot;line2&quot;] [3 &quot;hello&quot;])</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://clojuredocs.org/clojure.core/map-indexed">Source</a>, especially <a href="https://clojuredocs.org/clojure.core/map-indexed#example-542692cdc026201cdc326d25">this one</a></p>

<p>But if you only need to get the lines at certain indexes, it is also possible to get the values directly, using <code>map</code> on the sequence of desired indexes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">lines</span>
</span><span class='line'><span class="c1">; (&quot;&quot; &quot;line1&quot; &quot;line2&quot; &quot;hello&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">defn</span> <span class="nv">get-all</span> <span class="nv">[lines</span> <span class="nv">indexes]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map</span> <span class="o">#(</span><span class="nb">nth</span> <span class="nv">lines</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">indexes</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nv">get-all</span> <span class="nv">lines</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="c1">; (&quot;line1&quot; &quot;line2&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">get-all</span> <span class="nv">lines</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="c1">; (&quot;line1&quot; &quot;line1&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: the original source code for this post is <a href="https://github.com/alvarogarcia7/clojure-simple-sessions/blob/master/test/simple/iterate-with-index.clj">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brown-bag Session: Refactoring Legacy Code]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/07/01/brownbag-session-refactoring-legacy-code/"/>
    <updated>2015-07-01T13:18:28+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/07/01/brownbag-session-refactoring-legacy-code</id>
    <content type="html"><![CDATA[<p>Today I have done a brown bag session about refactoring legacy code. It includes:</p>

<ul>
<li>legacy code definition. There is no agreement about this in the team.</li>
<li>the legacy code change algorithm (source is Feathers, Working effectively with legacy code). Plus an example about it.</li>
<li>working with legacy code</li>
<li>experience with it.</li>
</ul>


<p>The slides are available <a href="../../../../uploads/refactoring-legacy-code-slides.pdf">here</a> (PDF format)</p>

<p>We also did a practical session, whose experience report is <a href="../../../../2015/06/23/brown-bag-session-refactoring-legacy-code/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-study in July 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/"/>
    <updated>2015-07-01T01:08:10+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve grouped all small posts related to the self-study from July 2015 into a single post</p>

<h2>Clojure made simple</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=VSdnJDO-xdg">this talk</a> by Rich Hickey at the Java One. It references the talk <a href="http://www.infoq.com/presentations/Simple-Made-Easy">Easy made simple</a></p>

<ul>
<li>polymorphism without inheritance; single dispatch on the first parameter</li>
</ul>


<h2>Productive pair programming</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/07/productive-pair-programming/">this article</a> about pair programming, using the driver &amp; copilot technique, written by Carlos Blé</p>

<h2>Building Automated REST APIs with Python</h2>

<p>Investigating QA automation for REST APIs, I&rsquo;ve read <a href="http://www.slideshare.net/jeffknupp/building-automated-rest-apis-with-python">these slides</a> about it</p>

<h2>Backwards Compatibility Testing For Your Clojure Project</h2>

<p>I&rsquo;ve read <a href="http://blog.jenkster.com/2014/02/backwards-compatibility-testing-your-clojure-project.html">this article</a> on making leiningen test the application on several clojure versions. Written by Kris Jenkins.</p>

<h2>Succeeding with Automated Integration Tests</h2>

<p>I&rsquo;ve read <a href="http://jeremydmiller.com/2015/06/25/succeeding_with_integration_testing/">this article</a> by Jeremy Miller on integration testing and how to succeed with it. Some notes:</p>

<ul>
<li>Choose the Quickest, Useful Feedback Mechanism, even if that means testing the backend and frontend separately</li>
<li>Prefer white-box than black-box testing</li>
<li>Use quick tests, that can be run locally in an easy fashion</li>
<li>Do not share databases, as they introduce risks of flaky tests</li>
</ul>


<h2>Applied DDD in a Java EE 7 and Open Source World</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=9D_-7E7Mrzw">this video</a> by Edson Yanaga in the Java One, about DDD using Java EE 7, JSFs and lambdas on top of glassfish</p>

<h2>Integrated tests are a scam</h2>

<p>I&rsquo;ve read, again, <a href="http://blog.thecodewhisperer.com/2010/10/16/integrated-tests-are-a-scam/">this article</a> by J. B. Rainsberger on integrated tests and why not to use them. From a numerical / combinatorics point of view.</p>

<h2>Functional Programming should be your #1 priority for 2015</h2>

<p>I&rsquo;ve read <a href="https://medium.com/@jugoncalves/functional-programming-should-be-your-1-priority-for-2015-47dd4641d6b9">this introduction</a> to functional programming by Ju Gonçalves. Explains some functional concepts, such as:</p>

<ul>
<li>First-Class Functions</li>
<li>High-Order Functions</li>
<li>Pure Functions</li>
<li>Closures</li>
<li>Immutable State</li>
</ul>


<p>Also recommends a few books on the subject (e.g., SICP, HTDP).</p>

<h2>A Tutorial Introduction to the Lambda Calculus</h2>

<p>I&rsquo;ve read <a href="http://www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf">this paper</a>, an introduction to the lambda calculus. Haven&rsquo;t done the exercises. Written by Raúl Rojas</p>

<h2>20 common mistakes when doing Test-Driven Development</h2>

<p>I had thought of converting all of <a href="https://twitter.com/search?q=svpino%20%23tdd%20mistake&amp;src=typd">his tweets</a> into a blog post, but he has already done this for us: I&rsquo;ve read a <a href="https://blog.svpino.com/2015/05/29/20-common-mistakes-when-doing-test-driven-development">list of common mistakes</a> when doing TDD by <a href="https://twitter.com/svpino">Santiago Pino</a></p>

<h2>Reducing coupling</h2>

<p>I&rsquo;ve read the article by Martin Fowler <a href="http://martinfowler.com/ieeeSoftware/coupling.pdf">Reducing Coupling</a> in the IEEE SOFTWARE July/August 2001</p>

<h2>Comparing Java Mock Frameworks – Part 2: Creating Mock Objects</h2>

<p><a href="https://softwareinabottle.wordpress.com/2010/10/06/comparing-java-mock-frameworks-part-2-creating-mock-objects/">List of mock frameworks for java</a>. Have only read the jMock, mockito and jMockit part.</p>

<h2> Software Craftsmanship book review</h2>

<p>I&rsquo;ve read <a href="http://meaganwaller.com/software-craftsmanship-book-review/">this review</a> for a book that is already pending in my book list: Software Craftsmanship by Pete McBreen.</p>

<p>The review has been written by Megan Waller, an (ex-)apprentice at 8th Light.</p>

<h2>Fundamental concepts in programming languages</h2>

<p>I&rsquo;ve read <a href="http://www.cs.cmu.edu/~crary/819-f09/Strachey67.pdf">this paper</a> containing the contents for lectures in Computer Programming in the year 1967. Written by Christopher Strachey.</p>

<p>Note: I&rsquo;ve also seen this paper recommended in the repo <a href="https://github.com/papers-we-love/papers-we-love/tree/master/plt">Papers We Love > plt</a> (Programming Language Theory)</p>

<h2>What is reification?</h2>

<p>I&rsquo;ve read <a href="http://www.angelikalanger.com/GenericsFAQ/FAQSections/TechnicalDetails.html#FAQ101A">this FAQ</a> on reification by Angelika Langer</p>

<h2>Type erasure</h2>

<p>I&rsquo;ve read this wikipedia <a href="https://en.wikipedia.org/wiki/Type_erasure">page on type erasure</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Books Read in 2015Q2]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/06/30/books-read-in-2015q2/"/>
    <updated>2015-06-30T12:49:50+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/06/30/books-read-in-2015q2</id>
    <content type="html"><![CDATA[<p>Books I&rsquo;ve read this quarter Q2 on 2015:</p>

<ul>
<li><a href="http://www.amazon.com/Flow-Psychology-Experience-Perennial-Classics/dp/0061339202">Flow</a> by Mihaly Csikszentmihalyi. Blog posts under the tag <a href="http://alvarogarcia7.github.io/blog/categories/flow">flow</a></li>
<li><a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> by Steve Freeman and Nat Pryce. Blog posts under the tag <a href="http://alvarogarcia7.github.io/blog/categories/goos">goos</a>. Read in the &lsquo;<a href="https://twitter.com/@deaprendices">@deAprendices</a>&rsquo;s reading club&rsquo;.</li>
</ul>


<p>Books started, not yet finished (WIP):</p>

<ul>
<li><a href="http://www.manning.com/evans/">The Well-Grounded Java Developer</a> by Benjamin J. Evans and Martijn Verburg</li>
<li><a href="https://leanpub.com/lisphackers">Lisp Hackers</a> by Vsevolod Dyomkin</li>
<li><a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good!</a> by Miran Lipovača</li>
<li><a href="http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052">Working Effectively with Legacy Code</a> by Michael Feathers, again</li>
<li><a href="http://www.poodr.com/">Practical Object-Oriented Design in Ruby, An Agile Primer (POODR)</a> by Sandi Metz, with the &lsquo;<a href="https://twitter.com/@deaprendices">@deAprendices</a>&rsquo;s reading club&rsquo;. Blog posts under the tag <a href="http://alvarogarcia7.github.io/blog/categories/poodr">poodr</a>.</li>
</ul>


<p>Books I want to finish:</p>

<ul>
<li><a href="http://martinfowler.com/books/refactoring.html">Refactoring</a> by Martin Fowler, with Kent Beck, John Brant, William Opdyke, and Don Roberts</li>
<li><a href="http://shop.oreilly.com/product/0636920028499.do">Java Performance: The Definitive Guide</a> by Scott Oaks</li>
<li><a href="http://www.infoq.com/minibooks/scrum-xp-from-the-trenches">Scrum and XP from the trenches</a> by Henrik Kniberg</li>
</ul>


<p>Books that have entered the queue:</p>

<ul>
<li><a href="http://carlos.bueno.org/optimization/mature-optimization.pdf">Mature optimization</a>, by Carlos Bueno</li>
<li><a href="https://leanpub.com/leprechauns">The Leprechauns of Software Engineering</a> by Laurent Bossavit, again. <a href="https://twitter.com/alvarobiz/status/611799849911103488">Gift</a></li>
<li><a href="http://xunitpatterns.com/">XUnit Test Patterns</a> by Gerard Meszaros</li>
<li><a href="https://leanpub.com/nightowls">Why programmers work at night</a> by Swizec Teller</li>
<li><a href="http://letoverlambda.com/">Let Over Lambda</a> by Doug Hoyte</li>
<li><a href="http://fldit-www.cs.uni-dortmund.de/~peter/PS07/HR.pdf">The Haskell Road to Logic, Math and Programming</a> by Kees Doets and Jan van Eijck</li>
<li><a href="http://mitpress.mit.edu/sicp/">Structure and Interpretation of Computer Programs</a> by Abelson, Sussman, and Sussman</li>
<li><a href="http://www.cis.upenn.edu/~bcpierce/tapl/">Types and Programming Languages</a> by Benjamin C. Pierce</li>
<li><a href="http://www.amazon.co.uk/Craftsman-Richard-Sennett/dp/0141022094">The Craftsman</a> by Richard Sennett</li>
<li><a href="http://www.amazon.co.uk/Software-Craftsmanship-Imperative-McBreen-Aug-2001/dp/B00L6JZAT0">Software Craftsmanship: The New Imperative</a> by Pete McBreen</li>
<li><a href="http://www.amazon.co.uk/dp/020169946X/ref=pe_385721_37038051_TE_3p_dp_1">Fundamentals of Object-oriented Design in UML</a> by Meilir Page-Jones</li>
</ul>


<p>Starting in 2015-Q2, I&rsquo;m also writing here the list of books that I want to read.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practical Object-Oriented Design in Ruby: Chapter 1]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/06/29/practical-object-oriented-design-in-ruby-chapter-1/"/>
    <updated>2015-06-29T00:07:29+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/06/29/practical-object-oriented-design-in-ruby-chapter-1</id>
    <content type="html"><![CDATA[<p>We&rsquo;ve read the first chapter from the Practical Object-Oriented Design in Ruby, by Sandi Metz.</p>

<p>These are the concepts and links brought up during the discussion:</p>

<blockquote><p>Walking on water and developing software from a specification are easy if both are frozen.</p>

<p>Edward V Berard, source is <a href="https://en.wikiquote.org/wiki/Edward_V._Berard">Wikiquote</a></p></blockquote>

<p>Two cited papers on metrics for design:</p>

<ul>
<li><a href="http://www.pitt.edu/~ckemerer/CK%20research%20papers/MetricForOOD_ChidamberKemerer94.pdf">A metrics suite for object oriented design</a> by Chidamber and Kemerer</li>
<li><a href="http://www.cs.umd.edu/~basili/publications/technical/T102.pdf">A validation of object-oriented design metrics as quality indicators</a> by Basili, Briand and Melo</li>
</ul>


<p> The video for the &lsquo;churn&rsquo; as a measure:</p>

<ul>
<li><a href="http://www.ustream.tv/recorded/61483799">The Hidden Dimension Of Refactoring</a> by Michael Feathers</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brown-bag Session: Refactoring Legacy Code]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/"/>
    <updated>2015-06-23T19:19:28+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code</id>
    <content type="html"><![CDATA[<p>Today I have facilitated a brown bag session about refactoring legacy code applications, as this is the case with one of the applications we maintain and add new features to.</p>

<p>The contents of the session:</p>

<ul>
<li>Briefly exposing the problem to the team, me taking the role of the Product Owner (PO)</li>
<li>Ask the dev team to add an easy feature</li>
<li>Do it without tests, as it was so simple that they thought they could do it (using mob programming)</li>
<li>Ask if they were satisfied by the patch / fix. Answer was yes.</li>
<li>Point out that there are regressions in the few lines of the patch</li>
<li>Repeat the session, starting with adding tests to guarantee the behavior is preserved  (using mob programming)</li>
<li>Explain the technique of the golden master</li>
<li>Some more programming, until they start to see the light at the end of the tunnel</li>
<li>Small retrospective, including:

<ul>
<li>asking them their feelings when dealing with legacy code. The contents of this is pretty similar to the concepts that appear in the retrospectives, when talking about the legacy project / submodule.</li>
<li>what could I improve as facilitator or for the structure of the session</li>
</ul>
</li>
</ul>


<p>The repo can be found <a href="https://github.com/alvarogarcia7/trivia-kata-spike">here</a>.</p>

<p>I prepared a small script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">while</span> <span class="nb">test true</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  git add --all<span class="p">;</span>
</span><span class='line'>  git commit --all -m <span class="s2">&quot;save process - uknown state&quot;</span><span class="p">;</span>
</span><span class='line'>  sleep 120<span class="p">;</span>
</span><span class='line'><span class="k">done</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>that saves the process and the progress, without disturbing the attendees. This allows you to follow the progress without any distraction. This idea was taken from a similar one from  <a href="http://twitter.com/@xav1uzz">Xavi Gost</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>This same idea was also cited by someone else, if I recall correctly by Sandro Mancuso, saying that it would be a good idea to have a background git repository while working. IntelliJ IDEA already does something similar (and saves the events, e.g., when the tests are run, either red or green)</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Cannot find the source, it was about having a script to commit automatically each time you run the tests; if it was red while refactoring, it would do git checkout (to revert); Was related to the noFlopSquad<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brown-bag Session: Maven]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/06/16/brown-bag-session-docker/"/>
    <updated>2015-06-16T18:52:28+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/06/16/brown-bag-session-docker</id>
    <content type="html"><![CDATA[<p>Today we have done a brown bag session about Docker. One of the team members explained to us the latest news, topics and how tos, including:</p>

<ul>
<li>the difference between a container and an image</li>
<li>diffing image contents</li>
<li>AUFS (Another Union FS)</li>
<li>persistent vs non-persistent (volatile) filesystems</li>
<li>running CMD and other commands on the instance</li>
<li>problems of running with permission = root (or its group)</li>
<li>downsides of it</li>
<li>how to compare it with a virtual machine</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Types of Defects]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/06/14/types-of-defects/"/>
    <updated>2015-06-14T16:16:51+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/06/14/types-of-defects</id>
    <content type="html"><![CDATA[<p>Some time ago, while researching types of defects and the cost of fixing them<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, I stumbled upon this:</p>

<blockquote><p>Years ago I worked with a bunch of economists in the US Federal Government - they categorized &lsquo;bugs&rsquo; in their memos into three types:</p>

<ul>
<li><p>Typos: Simple misspellings of words. Infrequent, easy to detect, easy to fix.</p></li>
<li><p>Writos: Incoherent sentences. More frequent, hard to detect, harder to fix.</p></li>
<li><p>Thinkos: Conceptually bonkers. Very frequent, subtle and hard to detect; almost impossible to fix.</p></li>
</ul>


<p>Most &lsquo;late&rsquo; bugs that I&rsquo;ve seen in software projects belong in the last category - a lack of design or the failure to make a working mock-up leads to &lsquo;thinkos&rsquo; which are only obvious when the application is nearly completed. These are expensive to fix.</p>

<p>Source: <a href="http://developers.slashdot.org/story/03/10/21/0141215/software-defects---do-late-bugs-really-cost-more">http://developers.slashdot.org/story/03/10/21/0141215/software-defects&#8212;do-late-bugs-really-cost-more</a></p></blockquote>

<p>I would also add a new category to this:</p>

<ul>
<li>Ethos: Morally wrong, although possibly legal. These may take different forms: vary from a company to the next one,
from society to society, etc. Even harder to fix than &lsquo;thinkos&rsquo;,
as there is a reason (mainly economic) to keep them in place.</li>
</ul>


<p>  On a technical note,
  these are not usually well-known artifacts in the company, therefore not everyone
  should know about them. Only a few developers know the correct reasons behind them and
  the rest might be sold a fake reason, so the latter cannot fix these &lsquo;ethos&rsquo;, as they
  assume they are present for a good reason</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This is also a chapter in the book <a href="https://leanpub.com/leprechauns">The Leprechauns of Software Engineering</a> by Laurent Bossavit: &lsquo;Chapter 10: The cost of defects: an illustrated history&rsquo;<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brown-bag Session: Refactoring]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/06/11/brownbag-session-refactoring/"/>
    <updated>2015-06-11T20:22:16+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/06/11/brownbag-session-refactoring</id>
    <content type="html"><![CDATA[<p>At a client, today we&rsquo;ve done a brown-bag session on refactoring: we&rsquo;ve gone through
and a live demo, including refactoring a core piece of our code.</p>

<p>We&rsquo;ve done some mob programming to help identify some smells and how to fix them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-study in June 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/"/>
    <updated>2015-06-03T13:13:10+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015</id>
    <content type="html"><![CDATA[<p>Update: I&rsquo;ve grouped all small posts related to the self-study from June 2015
into a single post</p>

<h2>Le monitoring de flux par l’exemple</h2>

<p>I&rsquo;ve read <a href="http://blog.octo.com/le-monitoring-de-flux-par-lexemple/">this article</a> about monitoring, in the way of &ldquo;by example&rdquo;, by Cédrick Lunven and Julien Kirch (French)</p>

<h2>The First Micro-service Architecture</h2>

<p>I&rsquo;ve read <a href="http://blog.cleancoder.com/uncle-bob/2015/05/28/TheFirstMicroserviceArchitecture.html">this article</a> about microservices and how they were implemented many years ago by Robert C. Martin</p>

<h2>How I Learned to Balance My Life With Remote Work</h2>

<p>I&rsquo;ve read <a href="https://open.bufferapp.com/remote-work/?utm_content=bufferaa5a2&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">this article</a> about balancing life and work, either physical or remote by Michael Erasmus</p>

<h2>Demystified CQRS</h2>

<p>I&rsquo;ve read <a href="https://blog.codecentric.de/en/2015/05/demystified-cqrs/?utm_content=buffer35b18&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">this article</a> about CQRS by Nino Martincevic</p>

<h2>The perils of programmer education in the bazaar</h2>

<p>I&rsquo;ve read <a href="http://blog.practicingruby.com/2015/06/04/the-perils-of-programmer-education-in-the-bazaar/">this article</a> by Gregory Brown</p>

<h2>6 useful and lesser-known git commands</h2>

<p>I&rsquo;ve read <a href="http://blog.joncairns.com/2015/05/6-useful-and-lesser-known-git-commands/">this article</a> about git commands (log, checkout, stash, cherry-pick, annotate) by Jon Cairns</p>

<h2>Is Your Scrum Standup Slowing You Down?</h2>

<p>I&rsquo;ve read <a href="http://www.sitepoint.com/scrum-standup-slowing-down/">this article</a> by M. David Green</p>

<h2>Me duele Indra</h2>

<p>I&rsquo;ve read <a href="http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;id=67ce79e01b">this Bonillista</a> (Spanish) by David Bonilla</p>

<h2>TDD, BDD, [add every other method that promises software quality here] and the tea tasting lady</h2>

<p>I&rsquo;ve read <a href="https://blinkingcaret.wordpress.com/2012/10/02/tdd-bdd-add-every-other-method-that-promises-software-quality-here-and-the-tea-tasting-lady/">this article</a> by Rui Figueiredo about the scientific method, TDD / BDD and how to scientifically detect if the &lsquo;how&rsquo; affects the result. In this case, exemplified by how to prepare your tea</p>

<h2>The Art of Metaprogramming in Java</h2>

<p>I&rsquo;ve read <a href="http://www.slideshare.net/PolymathicCoder/the-art-of-metaprogramming-in-java">these slides</a> by Abdelmonaim Remani</p>

<h2>When TDD does not work</h2>

<p>I&rsquo;ve read <a href="https://blog.8thlight.com/uncle-bob/2014/04/30/When-tdd-does-not-work.html">this article</a> by Uncle Bob on situations where TDD might not be appropiate, especially around the borders</p>

<h2>Mi primera semana como aprendiz</h2>

<p>I&rsquo;ve read <a href="http://ronnyancorini.es/blog/index.php/2015/06/08/mi-primera-semana-como-aprendiz/">Ronny Ancorini&rsquo;s experiences</a> in his first week as apprentince with Carlos Blé &amp; Associates (Spanish)</p>

<h2>Refactoring without good tests</h2>

<p>I&rsquo;ve read <a href="http://blog.codeclimate.com/blog/2013/12/05/refactoring-without-good-tests/">this article</a> by Peter Bell on how to deal with a legacy codebase, what are the effects of not having tests and how to deal with. How to add tests to a codebase that is not ready for it.</p>

<h2>Big Ball of Mud</h2>

<p>I&rsquo;ve read <a href="http://www.laputan.org/mud/">this paper</a>, containing a collection of patterns and antipatterns (disguised as notes) by Brian Foote and Joseph Yoder</p>

<h2>Comparision of different concurrency models: Actors, CSP, Disruptor and Threads [sic]</h2>

<p>I&rsquo;ve read <a href="http://java-is-the-new-c.blogspot.com.es/2014/01/comparision-of-different-concurrency.html">this comparison of concurrency models</a> by Rüdiger Möller</p>

<h2>5 Whys</h2>

<p>I&rsquo;ve read <a href="https://en.wikipedia.org/wiki/5_Whys">this wikipedia</a> article on the technique called &ldquo;5 Whys&rdquo;</p>

<h2>Expectations, Outcomes, and Challenges of Modern Code Review</h2>

<p>I&rsquo;ve read <a href="http://research.microsoft.com/apps/pubs/default.aspx?id=180283">this paper</a>, <a href="http://research.microsoft.com/pubs/180283/ICSE%202013-codereview.pdf">direct link</a>, by Alberto Bacchelli and Christian Bird on code review at Microsoft.</p>

<p>They explain how they do it, the exact methodology they are using and why they do it.</p>

<p>The main reasons to code review are:</p>

<ul>
<li>finding defects</li>
<li>code improvement</li>
<li>alternative solutions</li>
<li>knowledge transfer</li>
<li>team awareness and transparency</li>
<li>also:

<ul>
<li>improve development process</li>
<li>avoid build breaks</li>
<li>share code ownership</li>
<li>track rationale</li>
<li>team assessment</li>
</ul>
</li>
</ul>


<h2>The quality wheel</h2>

<p>I&rsquo;ve read <a href="http://blog.jessitron.com/2015/04/the-quality-wheel.html">this article</a> by Jessica Kerr about the qualities of beautiful code</p>

<h2>5 Minute Physics</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=n6FKT-KafRk">this video</a> on interactions with the mobile devices and related to physics by David DeSandro</p>

<h2>Rise of the Transpilers</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=DspYurD75Ns">this video</a> on the rise of the transpilers and coffeescript by Jeremy Ashkenas</p>

<h2>Drawing Lines with Bresenham&rsquo;s Line Algorithm</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=zytBpLlSHms">this video</a> about how to apply the Bresenham&rsquo;s algorithm to draw lines (implemented in pseudo-code and javascript) by Jenn Schiffer</p>

<h2>Working with Minified JavaScript</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=SuFNR7-XjKI">this video</a> by John Crepezzi on how to mix javascript files (clients and yours), how to decompile javascript in chrome, dev &amp; debug tools</p>

<h2>How we ran our Legacy Code Retreat</h2>

<p>I&rsquo;ve read <a href="https://pboop.wordpress.com/2012/02/19/how-we-ran-our-legacy-code-retreat/">this article</a> by Andreas Leidig, looking for inspiration on running a legacy code retreat / brown-bag session. The experience report <a href="../../../../2015/06/23/brown-bag-session-refactoring-legacy-code/">is here</a></p>

<h2>Shift Left: Testing Earlier in Development</h2>

<p>I&rsquo;ve read <a href="http://wirfs-brock.com/blog/2015/06/18/shift-left">this article</a> by Rebecca Wirfs-Brock</p>

<h2>Polymorphic Equality</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/06/polymorphic-equality/">this article</a> on implementing polymorphic equality on C#, by Carlos Blé</p>

<h2>Commit messages are not titles</h2>

<p>I&rsquo;ve read <a href="http://antirez.com/news/90">this article</a> on git commit messages and how to use them, by antirez</p>

<h2>Oracle Considers G1 Garbage Collector for Java 9</h2>

<p>I&rsquo;ve read this <a href="https://adtmag.com/articles/2015/06/22/oracle-java-9.aspx">press article</a> on the G1 and CMS collector, by John K. Waters</p>

<h2>What Tech Newbies Need</h2>

<p>I&rsquo;ve read <a href="https://storify.com/jesslynnrose/what-tech-newbies-need">this set of tweets</a>, grouped by Jessica Rose about the most helpful things beginners can do to improve their programming skills.</p>

<h2>JavaScript For Cats</h2>

<p>I&rsquo;ve read <a href="http://jsforcats.com/">this introductory guide</a> to javascript by <a href="https://twitter.com/maxogden">Max Ogden</a></p>

<h2>Why Doesn&rsquo;t Python Have Switch/Case?</h2>

<p>I&rsquo;ve read <a href="http://www.pydanny.com/why-doesnt-python-have-switch-case.html">this article</a> on the switch case in the python language by Daniel Roy Greenfeld</p>

<h2>[Joseph Moniz&rsquo;s] Notes on Clojure</h2>

<p>I&rsquo;ve read Joseph Moniz&rsquo;s <a href="http://blog.plasmaconduit.com/notes-on-clojure/">Notes on Clojure</a>.</p>

<h2>Chemical Computing with Clojure</h2>

<p>I&rsquo;ve read <a href="http://gigasquidsoftware.com/chemical-computing/index.html">an article</a> on performing abstract computations with chemicals, written in Clojure by Carin Meier</p>

<h2>Lenses</h2>

<p>I&rsquo;ve read <a href="http://www.haskellforall.com/2012/01/haskell-for-mainstream-programmers_28.html">this tutorial</a> on writing lenses for haskell, a way of importing imperative getters / setters to a Data. Written by Gabriel Gonzalez.</p>

<p>On another note, the first part, about writing getters and setters in the naive way, is also explained in Learn you a Haskell > Chapter 8 Making Our Own Types and Typeclasses > Record syntax</p>

<h2>Microservices in Haskell</h2>

<p>I&rsquo;ve read <a href="https://github.com/AlexanderAA/haskell-microservices/blob/gh-pages/haskell-microservices.md">these notes</a> on implementing a microservice in haskell, by <a href="https://github.com/AlexanderAA">AlexanderAA</a></p>

<h2>Overcoming Resistance to Change - Isn&rsquo;t It Obvious?</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=hcz1aZ60k7w">this video</a> in the channel of The World with Theory of Constraints</p>

<h2>Bacon is bad for you</h2>

<p>I&rsquo;ve read <a href="https://speakerdeck.com/garann/bacon-is-bad-for-you">these slides</a>
 on professionalism and the programmer culture, by Garann Means</p>

<h2>Code is a job</h2>

<p>I&rsquo;ve read <a href="https://speakerdeck.com/garann/code-is-a-job">these slides</a>, that are the continuation of &ldquo;Bacon is bad for you&rdquo;, by the same author, Garann Means</p>

<h2>The Great Newline Schism</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/the-great-newline-schism/">this article</a> by Jeff Atwood on the difference in newline character(s)</p>

<h2>Top ten reasons why I won’t use your open source project</h2>

<p>I&rsquo;ve read <a href="https://changelog.com/top-ten-reasons-why-i-wont-use-your-open-source-project/">this article</a> on what&rsquo;s necessary for an open-source project to be usable by others. Written by Adam Stacoviak</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internal Training: BPM: Process and Tools for Developers]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/06/02/internal-training-bpm-tool-and-process/"/>
    <updated>2015-06-02T22:20:09+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/06/02/internal-training-bpm-tool-and-process</id>
    <content type="html"><![CDATA[<p>At a client, I&rsquo;ve presented today an internal training on &ldquo;BPM: Process and tools for developers&rdquo;</p>

<p>In it, we have introduced the BPM concept and the main ideas in Activiti BPM.</p>

<p>Also techniques for hotswapping processes, tips and how-tos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internal Training: QA &amp; How to Test]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/18/internal-training-qa-and-how-to-test/"/>
    <updated>2015-05-18T22:20:09+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/18/internal-training-qa-and-how-to-test</id>
    <content type="html"><![CDATA[<p>At a client, we&rsquo;ve done today an internal training on &ldquo;QA &amp; how to test&rdquo;. In it, the most skilled person with the QA role in the dev team has explained to us some techniques and concepts for testing</p>

<h2>My notes</h2>

<p>Verification vs validation: building the product right vs building the right product.</p>

<h3>Principles</h3>

<p>Extracted from <a href="http://www.istqb.org/">ISTQB</a>:</p>

<ul>
<li>testing shows presence of defects</li>
<li>exhaustive testing is impossible</li>
<li>early testing is better than later testing</li>
<li>defect clustering: areas with bigger defect ratio or more critical, etc should be tested more thoroughly</li>
<li>pesticide paradox</li>
<li>testing is context-dependent</li>
<li>absence of errors fallacy: the absence of defects does not imply perfect software. There are also problems with validation.</li>
</ul>


<h3>Techniques</h3>

<h4>People-based</h4>

<ul>
<li>bug bashes: e.g., time-constrained</li>
<li>subject-matter expert testing</li>
<li>eat your own dogfood</li>
<li>others</li>
</ul>


<h4>Activity-based</h4>

<ul>
<li>regression</li>
<li>scripted (manual)</li>
<li>smoke</li>
<li>exploratory</li>
<li>installation</li>
<li>load</li>
<li>long sequence</li>
<li>performance</li>
</ul>


<h4>Coverage-based</h4>

<ul>
<li>menu tour: exploration based on menus (especially on websites)</li>
<li>functional and system testing</li>
<li>integration</li>
<li>logic</li>
<li>state-based</li>
</ul>


<h4>Requirements-based</h4>

<ul>
<li>Equivalence partitioning: examples in the same set are considered equivalent</li>
<li>Boundary based: there are interesting examples around and on the boundaries</li>
<li>Decision tables: truth table</li>
<li>State transition tables: state diagram</li>
</ul>


<h4>Risk-based</h4>

<ul>
<li>make a prioritized list: probability and impact</li>
<li>perform testing exploring each risk</li>
<li>after a risk disappears, another opens. Adjust your test effort to stay focused on the current crop</li>
</ul>


<h4>Use case tests</h4>

<ul>
<li>use case: a common case that represents one of your customer&rsquo;s cases</li>
<li>use busines language</li>
</ul>


<h4>Structure-based</h4>

<ul>
<li>test coverage is different than code coverage</li>
<li>test coverage is based on decision tables</li>
</ul>


<h4>Defining testing priorities</h4>

<ul>
<li>customer and contractual requirements</li>
<li>regulatory</li>
<li>experience-based</li>
<li>&ldquo;Best representative&rdquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Gardening Manifesto]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/17/software-gardening-manifesto/"/>
    <updated>2015-05-17T12:41:18+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/17/software-gardening-manifesto</id>
    <content type="html"><![CDATA[<p>A friend sent this <a href="http://softwaregarden.io/manifesto/">Software Gardening Manifesto</a> to me.</p>

<p>This is related to the idea of growing software vs building it, greatly exemplified by the <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> book (<a href="http://alvarogarcia7.github.io/blog/categories/goos">category here</a>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paper: TDD in Industrial Teams]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams/"/>
    <updated>2015-05-12T00:02:44+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve read <a href="http://www.msr-waypoint.net/en-us/groups/ese/nagappan_tdd.pdf">this paper</a> by Nagappan, Maximilien, Bhat and Williams on the cost, advantages, pitfalls of doing TDD in industrial teams (private companies who create software).</p>

<h2>My notes</h2>

<p>Abstract:</p>

<blockquote><p>little empirical evidence supports or refutes the utility of this practice in an industrial context</p></blockquote>

<ul>
<li>they seem to be talking about inside-out tdd as in chapter 2 (page 291), they talk about small units and then integrating them in a bigger context</li>
</ul>


<h3>Benefits</h3>

<p>taken from chapter 2 (page 292)</p>

<ul>
<li>Better design</li>
<li>Efficiency</li>
<li>Test assets</li>
<li>Reducing defect injection</li>
</ul>


<h3>Conclusions</h3>

<blockquote><p>TDD seems to be applicable in various domains</p>

<p>[TDD] can significantly reduce the defect density of developed software without significant productivity reduction [&hellip;]</p>

<p>[&hellip;] an important aspect of TDD is the creation of tests assets.</p></blockquote>

<p>Recommendations (this is all quotes):</p>

<ul>
<li>Start TDD from the beginning of projects</li>
<li>For a team new to TDD, introduce automated build test integration towards the second third of the development phase</li>
<li>[&hellip;] add new tests every time a problem is found</li>
<li>Get the test team involved and knowledgeable about the TDD approach</li>
<li>Constantly running the unit tests [&hellip;]</li>
<li>Encourage fast unit test execution and efficient unit testing design</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk: Software Is Eating the World]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/10/talk-software-is-eating-the-world/"/>
    <updated>2015-05-10T21:00:52+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/10/talk-software-is-eating-the-world</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve watched <a href="http://reaktor.com/blog/erik-meijer-software-eating-world/">this talk</a> by Erik Meijer</p>

<h2>My notes</h2>

<ul>
<li><p><a href="http://www.amazon.com/Agile-The-Good-Hype-Ugly/dp/3319051547">Agile!: The Good, the Hype and the Ugly</a></p></li>
<li><p>The hacker way</p>

<ul>
<li>code always wins vs manager always wins</li>
<li>source: <a href="http://www.wired.com/2012/02/zuck-letter/">http://www.wired.com/2012/02/zuck-letter/</a></li>
</ul>
</li>
<li>we&rsquo;re doing maths => we&rsquo;re building a proof</li>
<li>reinforcement learning

<ul>
<li>agent is the company</li>
</ul>
</li>
<li>related to &ldquo;build, measure, learn&rdquo; by Eric Ries (<a href="http://theleanstartup.com/book">the lean startup</a>)</li>
</ul>


<h3>Feedback systems</h3>

<ul>
<li>Open (no) feedback system, such as timed sprinklers</li>
<li>Closed feedback system</li>
<li>Output only system</li>
</ul>


<h3>Why everything is software</h3>

<ul>
<li>Examples of everything is software</li>
<li>Software is eating the world</li>
<li>Even hardware is modeled as software</li>
</ul>


<h3>Modeling as a Finite State Machine (FSM)</h3>

<ul>
<li>There&rsquo;s memory in the feedback loop. See the <a href="http://en.wikipedia.org/wiki/Finite-state_machine">finite state machine</a></li>
<li>A lesson from &ldquo;World War Z&rdquo;: &ldquo;When nine people agree on something, it&rsquo;s the tenth man&rsquo;s responsibility to disagree no matter how improbable the idea&rdquo;. &ldquo;You don&rsquo;t believe your own [ideas]&rdquo;. There&rsquo;s an article <a href="http://lifehacker.com/plan-more-effectively-with-the-tenth-man-rule-1689738373">here</a> and <a href="http://evidencemag.com/world-war-z/">here</a>, but they don&rsquo;t cite any official source related to this. The second one cites World War Z again, so it might be <a href="http://en.wikipedia.org/wiki/Confirmation_bias">confirmation bias</a>.</li>
<li>Test in production (e.g., <a href="https://github.com/Netflix/SimianArmy/wiki/Chaos-Monkey">chaos monkey</a> from Netflix) rather than doing TDD</li>
<li>No evidence of TDD as effective, he sees it as waste</li>
<li>Move fast and break things</li>
</ul>


<h3>About layered organizations</h3>

<ul>
<li>Layered architecture. Examples: OSI, Catholic Church, Army</li>
<li>Analogy: Software development as a professional team structure (also cited from Netflix)</li>
<li>Book: Creativity from Constraints: the psychology of breakthrough. Focus, constraint, creativity</li>
<li>Presentation: <a href="http://www.infoq.com/presentations/Developing-Expertise-Dave-Thomas">Developing Expertise: Herding Racehorses, Racing Sheep</a></li>
<li>Analogy: Developers are like junkies, we want to be high all the time</li>
<li>Answering a new proposal: instead of &ldquo;no, but&rdquo; (black hat), &ldquo;yes and&rdquo; (blue hat). Reference to <a href="http://www.amazon.com/Bossypants-Tina-Fey-ebook/dp/B0047Y0FGY">Bossypants</a> by Tina Fey</li>
<li>Your knives, your tools. &ldquo;How can we make millions if we don&rsquo;t value our tools?&rdquo;</li>
</ul>


<h3>Conclusion</h3>

<p>About software:</p>

<blockquote><p>software will take over the world, and developers are the ones who make it happen.</p></blockquote>

<p>About methodologies:</p>

<blockquote><p>&ldquo;Programming, motherfucker. Do you speak it?&rdquo; (<a href="http://programming-motherfucker.com/">Source</a>)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-study in May 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/"/>
    <updated>2015-05-09T16:41:10+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015</id>
    <content type="html"><![CDATA[<p>Update: I&rsquo;ve grouped all small posts related to the self-study from May 2015
into a single post</p>

<h2>Programmer passion considered harmful</h2>

<p>I&rsquo;ve read <a href="https://medium.com/on-coding/programmer-passion-considered-harmful-5c5d4e3a9b28">this article</a> on why programmer passion could be negative. The title is similar to a paper by Dijkstra.</p>

<h2>Software Craftsmanship: Are Bootcamps Enough?</h2>

<p>I&rsquo;ve read <a href="https://www.coursereport.com/blog/software-craftsmanship-are-bootcamps-enough">this article</a> on software craftsmanship, development bootcamps and passion by <a href="https://twitter.com/kauerrolemodel">Ken Auer</a></p>

<h2>Improve your development environments with virtualization</h2>

<p>I have seen this video: <a href="https://www.youtube.com/watch?v=Dg_vPMnC7_k&amp;feature=youtu.be">Improve your development environments with virtualization</a> by Luke Sneeringer.</p>

<p>My notes:</p>

<ul>
<li>development should be exactly like production.</li>
<li>except where it is too painful. there it should be different</li>
</ul>


<h2>Buffer&rsquo;s take on values</h2>

<p>I have found these <a href="http://www.slideshare.net/Bufferapp/buffer-culture-04">values</a>, written by Buffer, very interesting.</p>

<h2>Public static void</h2>

<p>I&rsquo;ve watched this video: <a href="https://www.youtube.com/watch?v=5kj5ApnhPAE">&ldquo;Public, static void&rdquo;</a> by Rob Pike. The slides can be found <a href="http://www.oscon.com/oscon2010/public/schedule/detail/13423">here</a></p>

<h3>My notes</h3>

<ul>
<li>too much bureaucracy</li>
<li>fighting the compiler</li>
<li>dynamic vs static typing</li>
<li>language too verbose</li>
<li><p>do not mix the two of them</p></li>
<li><p>a language niche:</p>

<ul>
<li>comprehensible</li>
<li>statically typed</li>
<li>light on the page</li>
<li>fast to work in</li>
<li>scales well</li>
<li>doesn&rsquo;t require tools but supports them well</li>
<li>good at networking and multiprocessing</li>
</ul>


<p>(minute 10:09)​</p></li>
<li><p><a href="http://golang.org">Go</a> was born to fill this niche</p></li>
</ul>


<h2>Nothing is something</h2>

<p>This video has been extracted to a <a href="../../../../2015/05/04/video-nothing-is-something/">post</a> of its own.</p>

<h2>Software is eating the world</h2>

<p>This video has been extracted to a <a href="../../../../2015/05/10/talk-software-is-eating-the-world/">post</a> of its own.</p>

<h2>The Cost of Test Driven Development</h2>

<p>I&rsquo;ve read <a href="http://blog.typemock.com/2009/03/the-cost-of-test-driven-development.html">this article</a>, on the cost of doing TDD, which refers to <a href="http://www.msr-waypoint.net/en-us/groups/ese/nagappan_tdd.pdf">this paper</a>: Realizing quality improvement through test driven development: results and experiences of four industrial teams (below)</p>

<h2>Realizing quality improvement through test driven development: results and experiences of four industrial teams</h2>

<p>This paper has been extracted to a <a href="../../../../2015/05/12/paper-tdd-in-industrial-teams/">post</a> of its own.</p>

<h2>Learn You Some Lisp for Great Good</h2>

<p>I&rsquo;ve watched the video <a href="https://www.youtube.com/watch?v=3T00X_sNg4Q">Learn You Some Lisp for Great Good</a>, by Howard Abrams.</p>

<p>I guess this is a reference to the popular <a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good!</a>.</p>

<p>He suggests many interesting resources for learning Lisp dialects. The live coding is in Clojure:</p>

<ul>
<li><a href="http://landoflisp.com/">The land of Lisp</a></li>
<li><a href="https://mitpress.mit.edu/sicp/">Structure and Interpretation of Computer Programs</a>. See also <a href="https://twitter.com/SICPQuotes">SICPQuotes</a></li>
<li><a href="http://mitpress.mit.edu/books/little-schemer">The Little Schemer</a></li>
<li><a href="https://www.gnu.org/software/emacs/manual/pdf/eintr.pdf">An Introduction to Programming in Emacs Lisp</a></li>
<li><a href="https://www.4clojure.com/">4clojure Questions</a></li>
<li><a href="http://clojurekoans.com/">Clojure Koans</a></li>
</ul>


<p>On another topic, in the <a href="http://www.meetup.com/ClojureBCN/events/222418104/">Bank accounts exercise from Exercism</a> meetup, we discussed the book <a href="https://pragprog.com/book/shcloj2/programming-clojure">Programming Clojure (2nd edition)</a> by Stuart Halloway</p>

<h2>Professor Frisby&rsquo;s Mostly Adequate Guide to Functional Programming</h2>

<p>I&rsquo;ve read <a href="https://github.com/DrBoolean/mostly-adequate-guide">this guide</a> to functional programming. It is still work in progress (WIP) but still interesting. Written in javascript, so you can REPL in the browser.</p>

<h2>Learning Code Good</h2>

<p>I&rsquo;ve watched this video, by Saron Yitbarek: <a href="https://www.youtube.com/watch?v=-nsnAYRqYLA">Learn Code Good</a>.</p>

<h2>Why You Don&rsquo;t Get Mock Objects</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=R9FOchgTtLM">Why You Don&rsquo;t Get Mock Objects</a>, by Gregory Moeck.</p>

<p>In it, they point to the <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> book (<a href="http://alvarogarcia7.github.io/blog/categories/goos">category here</a>), the paper <a href="www.jmock.org/oopsla2004.pdf">Mock Roles, not Objects</a> (also present in the GOOS book).</p>

<h2>Technical Debt: A Repayment Plan</h2>

<p>I&rsquo;ve read <a href="http://www.infoq.com/articles/tech-debt-repayment">this article</a> by <a href="https://twitter.com/@jeremyjarrell">Jeremy Jarrell</a> on technical debt how to repay it: schedule, taxes, default, etc</p>

<p>This has made me think of the <a href="http://scbcn.ideascale.com/a/dtd/Deuda-t%C3%A9cnica-origen-y-consecuencias/69782-25568">&ldquo;Deuda técnica, origen y consecuencias&rdquo; talk</a> (Technical debt: origin and consequences) (Spanish), that was delivered by <a href="https://twitter.com/@jgomezz">Javier Gómez</a> at the Software Craftsmanship 2014.</p>

<h2>Revisiting XP: be a thoughtful programmer by exercising more collective ownership</h2>

<p>I&rsquo;ve read <a href="http://www.infoq.com/articles/revisit-p-collective">this article</a> by <a href="https://twitter.com/tiagooo_romero">Tiago Garcia</a> on the collective code ownership, as stated by Xtreme Programming (XP), with some example and guidelines.</p>

<h2>Where&rsquo;s the Real Bottleneck in Scientific Computing?</h2>

<p>I&rsquo;ve read <a href="http://www.americanscientist.org/issues/pub/wheres-the-real-bottleneck-in-scientific-computing/99999">this article</a> by Greg Wilson on the tools and procedures investigators use to produce software.</p>

<h2>Testing inside the Sprint</h2>

<p>I&rsquo;ve read <a href="http://ronjeffries.com/articles/2015-03-01-testing-in-sprints/">this article</a> by Ron Jeffries.</p>

<p>Discusses the need for testing and why this hasn&rsquo;t been communicated enough, as there still are people who have not understood it.</p>

<p>Also about why people equal something failing when using scrum with scrum failing.</p>

<h2>DTO vs Domain Models</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/05/dto-vs-domain-models/">this article</a> by Carlos Blé</p>

<h2>Homoiconicity isn’t the point</h2>

<p>I&rsquo;ve read <a href="http://calculist.org/blog/2012/04/17/homoiconicity-isnt-the-point/">this article</a> by David Herman about homoiconicity, comparing Lisp dialects (have it) to others that don&rsquo;t. The main point is at the end, where it says:</p>

<blockquote><p>[&hellip;] homoiconicity isn’t the point, read is</p></blockquote>

<h2>So You Don&rsquo;t Want to be a Programmer After All</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/so-you-dont-want-to-be-a-programmer-after-all/">this article</a> by Jeff Atwood. Cites the golden handcuffs (also known as golden shackles), reasons to be and not to be a programmer, and how to be an average and outstanding programmer</p>

<h2>The Nature of Lisp</h2>

<p>I&rsquo;ve read <a href="http://www.defmacro.org/ramblings/lisp.html">this article / introduction</a> to Lisp by Slava Akhmechet</p>

<h2>[David Pollak&rsquo;s] My Thoughts on Go</h2>

<p>I&rsquo;ve read <a href="http://blog.goodstuff.im/golang">these comments</a> on Go Lang from David Pollak</p>

<h2>The Well-Rounded Technologist</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/04/02/the-well-rounded-technologist.html">this article</a> by Michael Bernstein</p>

<h2>Should I read papers?</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/10/21/should-i-read-papers.html">this article</a> by Michael Bernstein</p>

<h2>Lisp-1 vs Lisp-2</h2>

<p>I&rsquo;ve read <a href="https://hornbeck.wordpress.com/2009/07/05/lisp-1-vs-lisp-2/">this article</a> by <a href="https://twitter.com/hornbeck">@Hornbeck</a> about the lisp 1 and lisp 2.</p>

<h2>Science Corps</h2>

<p>I&rsquo;ve watched this <a href="https://www.youtube.com/watch?v=dkQkafxFoIQ">TEDx talk</a> by Aza Raskin, featuring Data Banks and Science corps</p>

<h2>Healthy Codebase and Preparatory Refactoring</h2>

<p> I&rsquo;ve read <a href="http://brewhouse.io/blog/2014/11/10/healthy-codebase-and-preparatory-refactoring.html">this article</a> by Philippe Creux about preparatory refactoring</p>

<h2>You Are Learning Haskell Right Now (Or Anything You Want Really)</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/12/11/you-are-learning-haskell-right-now.html">this article</a> by Michael Bernstein</p>

<h2>Lisp is Abstract Syntax</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/04/16/lisp-is-abstract-syntax.html">this article</a> by Michael Bernstein</p>

<h2>Two Things Types Have Taught Me</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/10/30/two-things-types-have-taught-me.html">this article</a> by Michael Bernstein</p>

<h2>Don&rsquo;t Bet Against Yourself</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html">this article</a> by Michael Bernstein</p>

<h2>Learning Math: A Blank Is A Blank With A Blank</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html">this article</a> by Michael Bernstein</p>

<h2>The False Economy Of Metaprogramming</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2015/03/06/the-false-economy-of-generated-methods.html">this article</a> by Michael Bernstein</p>

<h2>Management and Engineering, overlapping</h2>

<p>I&rsquo;ve read <a href="http://www.quora.com/Does-Adam-DAngelo-feel-comfortable-with-the-transition-from-an-engineer-to-a-management-position?srid=3OC&amp;share=1">this Quora answer</a> by Adam D&#8217;Angelo. The original title is: Does Adam D&#8217;Angelo feel comfortable with the transition from an engineer to a management position?</p>

<h2>Evolution of The Twitter Stack</h2>

<p>I&rsquo;ve read <a href="https://www.slideshare.net/slideshow/embed_code/key/ly83zQkBjCxnIX">these slides</a> about changing the technology stack in Twitter: from Rails to JVM-based</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Versus How]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/06/what-versus-how/"/>
    <updated>2015-05-06T07:15:08+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/06/what-versus-how</id>
    <content type="html"><![CDATA[<p>After reading the GOOS<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, the more and more I get this feeling of what vs how:</p>

<ul>
<li>Information hiding</li>
<li>The total simpler than the sum of the parts</li>
<li>Extracting a concept so you can think about this. Makes you find better names:

<ul>
<li>test name</li>
<li>variable name</li>
<li>method name</li>
<li>interface / protocol name</li>
</ul>
</li>
</ul>


<p>I also got this feeling when reading Clean Code. But with this other book the smell is much harder, stronger. This same concept is repeated all over the book. In our discussions about the book, this concept appears again and again. I&rsquo;m thinking of adding a sub-title to the book:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Growing Object-Oriented Software, Guided by Tests
</span><span class='line'>What and not How</span></code></pre></td></tr></table></div></figure>


<h2>Applying this in your team</h2>

<p>Now, there might be a problem if your team has a split opinion on &lsquo;what vs how&rsquo; (i.e., part of the team prefers what and another prefers how)</p>

<p>Reasons I&rsquo;ve heard to defend how:</p>

<ul>
<li>The ones cited above</li>
<li>Concision / shortness</li>
<li>Code reusability</li>
<li>Easier to test, extracting to collaborators<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
</ul>


<p>Reasons I&rsquo;ve heard to defend what:</p>

<ul>
<li>Knowing exactly what the code is doing: i.e., do not have to think what the name means and to what this corresponds</li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Altough I believe you shouldn&rsquo;t do anything <em>just</em> for the purpose of tests. If it also improves your design, OK, but only for the tests, no.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internal Training: Testing Is Hard - Just Do It]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it/"/>
    <updated>2015-05-05T23:00:17+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it</id>
    <content type="html"><![CDATA[<p>At a client, last week I&rsquo;ve organized an internal training, in the form of a discussion about this article: <a href="http://davidsouther.com/#/posts/2013/10/30/testing-its-hard-just-do-it/">Testing is hard - just do it</a></p>

<h2>Our thoughts</h2>

<blockquote><p>When a bug is found, prove it exists with a test</p></blockquote>

<p>This immediately reduces defect rate: the same regression cannot be introduced again</p>

<blockquote><p> fix a bug a second time</p></blockquote>

<p>If fixing a bug (having defects in your code) was &lsquo;waste&rsquo;, as defined by lean methodologies, it also is wast fixing it for the following times</p>

<blockquote><p>testing requires discipline</p></blockquote>

<p>Agree. See quote by Larry Wall (this same article)</p>

<blockquote><p>[Three requirements for a good test suite]:</p>

<ol>
<li>The tests need to be easier to write</li>
<li>The test suite must run, and pass, before any code is allowed out the door</li>
<li>Support from the project&rsquo;s leadership</li>
</ol>
</blockquote>

<p>Agree.</p>

<blockquote><p>Programming is like drawing water from a well</p></blockquote>

<p>Good analogy</p>

<blockquote><p>I&rsquo;m going to assume you are smarter than me [&hellip;]</p></blockquote>

<p>This is related to &lsquo;doing clever things&rsquo;: when I write &lsquo;clever code&rsquo;, that has neither comments, nor it is massaged to be Clean Code, it will cost me many times more to modify / understand in the future vs massage it a little bit.</p>

<p>For me, an example of clever code are certain bitwise operations. Even though these operations are publicly available on websites and books, you must know about them before understanding the code.</p>

<p>Another example of clever code is taking assumptions, even if they are valid. Example: always return the second element because the first one is the header</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">select</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">elements</span><span class="o">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">elements</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>vs</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">selectFirstValidLine</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">elements</span><span class="o">){</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">validElements</span> <span class="o">=</span> <span class="n">skipHeader</span><span class="o">(</span><span class="n">elements</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">validElements</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Open questions / other ideas</h2>

<ul>
<li>There are tests that are more important than others. Is there a tool to assign them weights and inform about which preponderation of the codebase is broken? The same (i.e., more importance) can happen for production code.</li>
<li>Is SCRUM apt for junior developers? In the sense of the increased autonomy, more decisions, more required technical skills / values, etc</li>
<li>We discussed what differentiates a project with a shorter deadline from one with a longer deadline. The consensus was: you should do tests for any kind of project, the shorter deadline project won&rsquo;t allow as much time for refactoring</li>
<li>Tests iff (i.e., if and only if) working code</li>
<li>Tests do not guarantee lack of defects</li>
<li>Bijectiveness between tests and features (production code)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video: Nothing Is Something]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/04/video-nothing-is-something/"/>
    <updated>2015-05-04T07:43:14+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/04/video-nothing-is-something</id>
    <content type="html"><![CDATA[<p>I have seen this video: <a href="https://www.youtube.com/watch?feature=player_detailpage&amp;v=9lv2lBq6x4A">Nothing is something</a> by <a href="https://twitter.com/@sandimetz">Sandi Metz</a>, as I saw it recommended <a href="http://garajeando.blogspot.com.es/2015/04/interesting-talk-nothing-is-something.html">here</a></p>

<p>In the video, she talks programming in this fashion: (it is a stack, not an unordered list)</p>

<ul>
<li>Abstraction seeking</li>
<li>Message centric</li>
<li>Condition Averse</li>
<li>Smalltalk Infected</li>
</ul>


<blockquote><p>Not here to change the language but change you</p></blockquote>

<p>This is a pattern I&rsquo;ve also heard from <a href="https://twitter.com/@old_sound">Alvaro Videla</a>, where he said that other, more powerful languages can change your mind and help you bring some of those concepts to your own language. He was talking about Haskell, she, about Smalltalk.</p>

<p>She shows how to smell the <code>null object pattern</code> (that she independently discovered herself too - can be improved studying the classics<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>), also called <code>active nothing</code>. Decorates the <code>Animal</code> with a wrapper, to call it <code>GuaranteedAnimal</code></p>

<p>Later on, shows how to code an example on a &lsquo;tail&rsquo;, extending behaviour with inheritance and how to get rid of it: prefer composition versus inheritance. The importance of roles.</p>

<blockquote><p>Inheritance is for specialization, not for sharing code</p></blockquote>

<p>Steps to convert inheritance into composition:</p>

<ol>
<li> Isolate the difference</li>
<li> Name the concept</li>
<li> Define the role</li>
<li> Inject the players</li>
</ol>


<p>This is a trick I discovered here: when you don&rsquo;t know what name put here, create a spreadsheet and ask yourself what name the row should have. There is an example <a href="https://www.youtube.com/watch?feature=player_detailpage&amp;v=9lv2lBq6x4A#t=1959">at this minute</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>a reference to a pattern by the same name at <a href="http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382">Apprenticeship Patterns</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
