<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The long way through Software Craftsmanship]]></title>
  <link href="http://alvarogarcia7.github.io/atom.xml" rel="self"/>
  <link href="http://alvarogarcia7.github.io/"/>
  <updated>2015-05-28T00:01:36+02:00</updated>
  <id>http://alvarogarcia7.github.io/</id>
  <author>
    <name><![CDATA[alvaro garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Internal Training: QA &amp; How to Test]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/18/internal-training-qa-and-how-to-test/"/>
    <updated>2015-05-18T22:20:09+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/18/internal-training-qa-and-how-to-test</id>
    <content type="html"><![CDATA[<p>At a client, we&rsquo;ve done today an internal training on &ldquo;QA &amp; how to test&rdquo;. In it, the most skilled person with the QA role in the dev team has explained to us some techniques and concepts for testing</p>

<h2>My notes</h2>

<p>Verification vs validation: building the product right vs building the right product.</p>

<h3>Principles</h3>

<p>Extracted from <a href="http://www.istqb.org/">ISTQB</a>:</p>

<ul>
<li>testing shows presence of defects</li>
<li>exhaustive testing is impossible</li>
<li>early testing is better than later testing</li>
<li>defect clustering: areas with bigger defect ratio or more critical, etc should be tested more thoroughly</li>
<li>pesticide paradox</li>
<li>testing is context-dependent</li>
<li>absence of errors fallacy: the absence of defects does not imply perfect software. There are also problems with validation.</li>
</ul>


<h3>Techniques</h3>

<h4>People-based</h4>

<ul>
<li>bug bashes: e.g., time-constrained</li>
<li>subject-matter expert testing</li>
<li>eat your own dogfood</li>
<li>others</li>
</ul>


<h4>Activity-based</h4>

<ul>
<li>regression</li>
<li>scripted (manual)</li>
<li>smoke</li>
<li>exploratory</li>
<li>installation</li>
<li>load</li>
<li>long sequence</li>
<li>performance</li>
</ul>


<h4>Coverage-based</h4>

<ul>
<li>menu tour: exploration based on menus (especially on websites)</li>
<li>functional and system testing</li>
<li>integration</li>
<li>logic</li>
<li>state-based</li>
</ul>


<h4>Requirements-based</h4>

<ul>
<li>Equivalence partitioning: examples in the same set are considered equivalent</li>
<li>Boundary based: there are interesting examples around and on the boundaries</li>
<li>Decision tables: truth table</li>
<li>State transition tables: state diagram</li>
</ul>


<h4>Risk-based</h4>

<ul>
<li>make a prioritized list: probability and impact</li>
<li>perform testing exploring each risk</li>
<li>after a risk disappears, another opens. Adjust your test effort to stay focused on the current crop</li>
</ul>


<h4>Use case tests</h4>

<ul>
<li>use case: a common case that represents one of your customer&rsquo;s cases</li>
<li>use busines language</li>
</ul>


<h4>Structure-based</h4>

<ul>
<li>test coverage is different than code coverage</li>
<li>test coverage is based on decision tables</li>
</ul>


<h4>Defining testing priorities</h4>

<ul>
<li>customer and contractual requirements</li>
<li>regulatory</li>
<li>experience-based</li>
<li>&ldquo;Best representative&rdquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Gardening Manifesto]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/17/software-gardening-manifesto/"/>
    <updated>2015-05-17T12:41:18+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/17/software-gardening-manifesto</id>
    <content type="html"><![CDATA[<p>A friend sent this <a href="http://softwaregarden.io/manifesto/">Software Gardening Manifesto</a> to me.</p>

<p>This is related to the idea of growing software vs building it, greatly exemplified by the <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> book (<a href="http://alvarogarcia7.github.io/blog/categories/goos">category here</a>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paper: TDD in Industrial Teams]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams/"/>
    <updated>2015-05-12T00:02:44+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve read <a href="http://www.msr-waypoint.net/en-us/groups/ese/nagappan_tdd.pdf">this paper</a> by Nagappan, Maximilien, Bhat and Williams on the cost, advantages, pitfalls of doing TDD in industrial teams (private companies who create software).</p>

<h2>My notes</h2>

<p>Abstract:</p>

<blockquote><p>little empirical evidence supports or refutes the utility of this practice in an industrial context</p></blockquote>

<ul>
<li>they seem to be talking about inside-out tdd as in chapter 2 (page 291), they talk about small units and then integrating them in a bigger context</li>
</ul>


<h3>Benefits</h3>

<p>taken from chapter 2 (page 292)</p>

<ul>
<li>Better design</li>
<li>Efficiency</li>
<li>Test assets</li>
<li>Reducing defect injection</li>
</ul>


<h3>Conclusions</h3>

<blockquote><p>TDD seems to be applicable in various domains</p>

<p>[TDD] can significantly reduce the defect density of developed software without significant productivity reduction [&hellip;]</p>

<p>[&hellip;] an important aspect of TDD is the creation of tests assets.</p></blockquote>

<p>Recommendations (this is all quotes):</p>

<ul>
<li>Start TDD from the beginning of projects</li>
<li>For a team new to TDD, introduce automated build test integration towards the second third of the development phase</li>
<li>[&hellip;] add new tests every time a problem is found</li>
<li>Get the test team involved and knowledgeable about the TDD approach</li>
<li>Constantly running the unit tests [&hellip;]</li>
<li>Encourage fast unit test execution and efficient unit testing design</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk: Software Is Eating the World]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/10/talk-software-is-eating-the-world/"/>
    <updated>2015-05-10T21:00:52+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/10/talk-software-is-eating-the-world</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve watched <a href="http://reaktor.com/blog/erik-meijer-software-eating-world/">this talk</a> by Erik Meijer</p>

<h2>My notes</h2>

<ul>
<li><p><a href="http://www.amazon.com/Agile-The-Good-Hype-Ugly/dp/3319051547">Agile!: The Good, the Hype and the Ugly</a></p></li>
<li><p>The hacker way</p>

<ul>
<li>code always wins vs manager always wins</li>
<li>source: <a href="http://www.wired.com/2012/02/zuck-letter/">http://www.wired.com/2012/02/zuck-letter/</a></li>
</ul>
</li>
<li>we&rsquo;re doing maths => we&rsquo;re building a proof</li>
<li>reinforcement learning

<ul>
<li>agent is the company</li>
</ul>
</li>
<li>related to &ldquo;build, measure, learn&rdquo; by Eric Ries (<a href="http://theleanstartup.com/book">the lean startup</a>)</li>
</ul>


<h3>Feedback systems</h3>

<ul>
<li>Open (no) feedback system, such as timed sprinklers</li>
<li>Closed feedback system</li>
<li>Output only system</li>
</ul>


<h3>Why everything is software</h3>

<ul>
<li>Examples of everything is software</li>
<li>Software is eating the world</li>
<li>Even hardware is modeled as software</li>
</ul>


<h3>Modeling as a Finite State Machine (FSM)</h3>

<ul>
<li>There&rsquo;s memory in the feedback loop. See the <a href="http://en.wikipedia.org/wiki/Finite-state_machine">finite state machine</a></li>
<li>A lesson from &ldquo;World War Z&rdquo;: &ldquo;When nine people agree on something, it&rsquo;s the tenth man&rsquo;s responsibility to disagree no matter how improbable the idea&rdquo;. &ldquo;You don&rsquo;t believe your own [ideas]&rdquo;. There&rsquo;s an article <a href="http://lifehacker.com/plan-more-effectively-with-the-tenth-man-rule-1689738373">here</a> and <a href="http://evidencemag.com/world-war-z/">here</a>, but they don&rsquo;t cite any official source related to this. The second one cites World War Z again, so it might be <a href="http://en.wikipedia.org/wiki/Confirmation_bias">confirmation bias</a>.</li>
<li>Test in production (e.g., <a href="https://github.com/Netflix/SimianArmy/wiki/Chaos-Monkey">chaos monkey</a> from Netflix) rather than doing TDD</li>
<li>No evidence of TDD as effective, he sees it as waste</li>
<li>Move fast and break things</li>
</ul>


<h3>About layered organizations</h3>

<ul>
<li>Layered architecture. Examples: OSI, Catholic Church, Army</li>
<li>Analogy: Software development as a professional team structure (also cited from Netflix)</li>
<li>Book: Creativity from Constraints: the psychology of breakthrough. Focus, constraint, creativity</li>
<li>Presentation: <a href="http://www.infoq.com/presentations/Developing-Expertise-Dave-Thomas">Developing Expertise: Herding Racehorses, Racing Sheep</a></li>
<li>Analogy: Developers are like junkies, we want to be high all the time</li>
<li>Answering a new proposal: instead of &ldquo;no, but&rdquo; (black hat), &ldquo;yes and&rdquo; (blue hat). Reference to <a href="http://www.amazon.com/Bossypants-Tina-Fey-ebook/dp/B0047Y0FGY">Bossypants</a> by Tina Fey</li>
<li>Your knives, your tools. &ldquo;How can we make millions if we don&rsquo;t value our tools?&rdquo;</li>
</ul>


<h3>Conclusion</h3>

<p>About software:</p>

<blockquote><p>software will take over the world, and developers are the ones who make it happen.</p></blockquote>

<p>About methodologies:</p>

<blockquote><p>&ldquo;Programming, motherfucker. Do you speak it?&rdquo; (<a href="http://programming-motherfucker.com/">Source</a>)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-study in May 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/"/>
    <updated>2015-05-09T16:41:10+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015</id>
    <content type="html"><![CDATA[<p>Update: I&rsquo;ve grouped all small posts related to the self-study from May 2015
into a single post</p>

<h2>Programmer passion considered harmful</h2>

<p>I&rsquo;ve read <a href="https://medium.com/on-coding/programmer-passion-considered-harmful-5c5d4e3a9b28">this article</a> on why programmer passion could be negative. The title is similar to a paper by Dijkstra.</p>

<h2>Software Craftsmanship: Are Bootcamps Enough?</h2>

<p>I&rsquo;ve read <a href="https://www.coursereport.com/blog/software-craftsmanship-are-bootcamps-enough">this article</a> on software craftsmanship, development bootcamps and passion by <a href="https://twitter.com/kauerrolemodel">Ken Auer</a></p>

<h2>Improve your development environments with virtualization</h2>

<p>I have seen this video: <a href="https://www.youtube.com/watch?v=Dg_vPMnC7_k&amp;feature=youtu.be">Improve your development environments with virtualization</a> by Luke Sneeringer.</p>

<p>My notes:</p>

<ul>
<li>development should be exactly like production.</li>
<li>except where it is too painful. there it should be different</li>
</ul>


<h2>Buffer&rsquo;s take on values</h2>

<p>I have found these <a href="http://www.slideshare.net/Bufferapp/buffer-culture-04">values</a>, written by Buffer, very interesting.</p>

<h2>Public static void</h2>

<p>I&rsquo;ve watched this video: <a href="https://www.youtube.com/watch?v=5kj5ApnhPAE">&ldquo;Public, static void&rdquo;</a> by Rob Pike. The slides can be found <a href="http://www.oscon.com/oscon2010/public/schedule/detail/13423">here</a></p>

<h3>My notes</h3>

<ul>
<li>too much bureaucracy</li>
<li>fighting the compiler</li>
<li>dynamic vs static typing</li>
<li>language too verbose</li>
<li><p>do not mix the two of them</p></li>
<li><p>a language niche:</p>

<ul>
<li>comprehensible</li>
<li>statically typed</li>
<li>light on the page</li>
<li>fast to work in</li>
<li>scales well</li>
<li>doesn&rsquo;t require tools but supports them well</li>
<li>good at networking and multiprocessing</li>
</ul>


<p>(minute 10:09)​</p></li>
<li><p><a href="http://golang.org">Go</a> was born to fill this niche</p></li>
</ul>


<h2>Nothing is something</h2>

<p>This video has been extracted to a <a href="../../../../2015/05/04/video-nothing-is-something/">post</a> of its own.</p>

<h2>Software is eating the world</h2>

<p>This video has been extracted to a <a href="../../../../2015/05/10/talk-software-is-eating-the-world/">post</a> of its own.</p>

<h2>The Cost of Test Driven Development</h2>

<p>I&rsquo;ve read <a href="http://blog.typemock.com/2009/03/the-cost-of-test-driven-development.html">this article</a>, on the cost of doing TDD, which refers to <a href="http://www.msr-waypoint.net/en-us/groups/ese/nagappan_tdd.pdf">this paper</a>: Realizing quality improvement through test driven development: results and experiences of four industrial teams (below)</p>

<h2>Realizing quality improvement through test driven development: results and experiences of four industrial teams</h2>

<p>This paper has been extracted to a <a href="../../../../2015/05/12/paper-tdd-in-industrial-teams/">post</a> of its own.</p>

<h2>Learn You Some Lisp for Great Good</h2>

<p>I&rsquo;ve watched the video <a href="https://www.youtube.com/watch?v=3T00X_sNg4Q">Learn You Some Lisp for Great Good</a>, by Howard Abrams.</p>

<p>I guess this is a reference to the popular <a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good!</a>.</p>

<p>He suggests many interesting resources for learning Lisp dialects. The live coding is in Clojure:</p>

<ul>
<li><a href="http://landoflisp.com/">The land of Lisp</a></li>
<li><a href="https://mitpress.mit.edu/sicp/">Structure and Interpretation of Computer Programs</a>. See also <a href="https://twitter.com/SICPQuotes">SICPQuotes</a></li>
<li><a href="http://mitpress.mit.edu/books/little-schemer">The Little Schemer</a></li>
<li><a href="https://www.gnu.org/software/emacs/manual/pdf/eintr.pdf">An Introduction to Programming in Emacs Lisp</a></li>
<li><a href="https://www.4clojure.com/">4clojure Questions</a></li>
<li><a href="http://clojurekoans.com/">Clojure Koans</a></li>
</ul>


<p>On another topic, in the <a href="http://www.meetup.com/ClojureBCN/events/222418104/">Bank accounts exercise from Exercism</a> meetup, we discussed the book <a href="https://pragprog.com/book/shcloj2/programming-clojure">Programming Clojure (2nd edition)</a> by Stuart Halloway</p>

<h2>Professor Frisby&rsquo;s Mostly Adequate Guide to Functional Programming</h2>

<p>I&rsquo;ve read <a href="https://github.com/DrBoolean/mostly-adequate-guide">this guide</a> to functional programming. It is still work in progress (WIP) but still interesting. Written in javascript, so you can REPL in the browser.</p>

<h2>Learning Code Good</h2>

<p>I&rsquo;ve watched this video, by Saron Yitbarek: <a href="https://www.youtube.com/watch?v=-nsnAYRqYLA">Learn Code Good</a>.</p>

<h2>Why You Don&rsquo;t Get Mock Objects</h2>

<p>I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=R9FOchgTtLM">Why You Don&rsquo;t Get Mock Objects</a>, by Gregory Moeck.</p>

<p>In it, they point to the <a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> book (<a href="http://alvarogarcia7.github.io/blog/categories/goos">category here</a>), the paper <a href="www.jmock.org/oopsla2004.pdf">Mock Roles, not Objects</a> (also present in the GOOS book).</p>

<h2>Technical Debt: A Repayment Plan</h2>

<p>I&rsquo;ve read <a href="http://www.infoq.com/articles/tech-debt-repayment">this article</a> by <a href="https://twitter.com/@jeremyjarrell">Jeremy Jarrell</a> on technical debt how to repay it: schedule, taxes, default, etc</p>

<p>This has made me think of the <a href="http://scbcn.ideascale.com/a/dtd/Deuda-t%C3%A9cnica-origen-y-consecuencias/69782-25568">&ldquo;Deuda técnica, origen y consecuencias&rdquo; talk</a> (Technical debt: origin and consequences) (Spanish), that was delivered by <a href="https://twitter.com/@jgomezz">Javier Gómez</a> at the Software Craftsmanship 2014.</p>

<h2>Revisiting XP: be a thoughtful programmer by exercising more collective ownership</h2>

<p>I&rsquo;ve read <a href="http://www.infoq.com/articles/revisit-p-collective">this article</a> by <a href="https://twitter.com/tiagooo_romero">Tiago Garcia</a> on the collective code ownership, as stated by Xtreme Programming (XP), with some example and guidelines.</p>

<h2>Where&rsquo;s the Real Bottleneck in Scientific Computing?</h2>

<p>I&rsquo;ve read <a href="http://www.americanscientist.org/issues/pub/wheres-the-real-bottleneck-in-scientific-computing/99999">this article</a> by Greg Wilson on the tools and procedures investigators use to produce software.</p>

<h2>Testing inside the Sprint</h2>

<p>I&rsquo;ve read <a href="http://ronjeffries.com/articles/2015-03-01-testing-in-sprints/">this article</a> by Ron Jeffries.</p>

<p>Discusses the need for testing and why this hasn&rsquo;t been communicated enough, as there still are people who have not understood it.</p>

<p>Also about why people equal something failing when using scrum with scrum failing.</p>

<h2>DTO vs Domain Models</h2>

<p>I&rsquo;ve read <a href="http://www.carlosble.com/2015/05/dto-vs-domain-models/">this article</a> by Carlos Blé</p>

<h2>Homoiconicity isn’t the point</h2>

<p>I&rsquo;ve read <a href="http://calculist.org/blog/2012/04/17/homoiconicity-isnt-the-point/">this article</a> by David Herman about homoiconicity, comparing Lisp dialects (have it) to others that don&rsquo;t. The main point is at the end, where it says:</p>

<blockquote><p>[&hellip;] homoiconicity isn’t the point, read is</p></blockquote>

<h2>So You Don&rsquo;t Want to be a Programmer After All</h2>

<p>I&rsquo;ve read <a href="http://blog.codinghorror.com/so-you-dont-want-to-be-a-programmer-after-all/">this article</a> by Jeff Atwood. Cites the golden handcuffs (also known as golden shackles), reasons to be and not to be a programmer, and how to be an average and outstanding programmer</p>

<h2>The Nature of Lisp</h2>

<p>I&rsquo;ve read <a href="http://www.defmacro.org/ramblings/lisp.html">this article / introduction</a> to Lisp by Slava Akhmechet</p>

<h2>[David Pollak&rsquo;s] My Thoughts on Go</h2>

<p>I&rsquo;ve read <a href="http://blog.goodstuff.im/golang">these comments</a> on Go Lang from David Pollak</p>

<h2>The Well-Rounded Technologist</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/04/02/the-well-rounded-technologist.html">this article</a> by Michael Bernstein</p>

<h2>Should I read papers?</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/10/21/should-i-read-papers.html">this article</a> by Michael Bernstein</p>

<h2>Lisp-1 vs Lisp-2</h2>

<p>I&rsquo;ve read <a href="https://hornbeck.wordpress.com/2009/07/05/lisp-1-vs-lisp-2/">this article</a> by <a href="https://twitter.com/hornbeck">@Hornbeck</a> about the lisp 1 and lisp 2.</p>

<h2>Science Corps</h2>

<p>I&rsquo;ve watched this <a href="https://www.youtube.com/watch?v=dkQkafxFoIQ">TEDx talk</a> by Aza Raskin, featuring Data Banks and Science corps</p>

<h2>Healthy Codebase and Preparatory Refactoring</h2>

<p> I&rsquo;ve read <a href="http://brewhouse.io/blog/2014/11/10/healthy-codebase-and-preparatory-refactoring.html">this article</a> by Philippe Creux about preparatory refactoring</p>

<h2>You Are Learning Haskell Right Now (Or Anything You Want Really)</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/12/11/you-are-learning-haskell-right-now.html">this article</a> by Michael Bernstein</p>

<h2>Lisp is Abstract Syntax</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/04/16/lisp-is-abstract-syntax.html">this article</a> by Michael Bernstein</p>

<h2>Two Things Types Have Taught Me</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2014/10/30/two-things-types-have-taught-me.html">this article</a> by Michael Bernstein</p>

<h2>Don&rsquo;t Bet Against Yourself</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html">this article</a> by Michael Bernstein</p>

<h2>Learning Math: A Blank Is A Blank With A Blank</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html">this article</a> by Michael Bernstein</p>

<h2>The False Economy Of Metaprogramming</h2>

<p>I&rsquo;ve read <a href="http://michaelrbernste.in/2015/03/06/the-false-economy-of-generated-methods.html">this article</a> by Michael Bernstein</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Versus How]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/06/what-versus-how/"/>
    <updated>2015-05-06T07:15:08+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/06/what-versus-how</id>
    <content type="html"><![CDATA[<p>After reading the GOOS<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, the more and more I get this feeling of what vs how:</p>

<ul>
<li>Information hiding</li>
<li>The total simpler than the sum of the parts</li>
<li>Extracting a concept so you can think about this. Makes you find better names:

<ul>
<li>test name</li>
<li>variable name</li>
<li>method name</li>
<li>interface / protocol name</li>
</ul>
</li>
</ul>


<p>I also got this feeling when reading Clean Code. But with this other book the smell is much harder, stronger. This same concept is repeated all over the book. In our discussions about the book, this concept appears again and again. I&rsquo;m thinking of adding a sub-title to the book:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Growing Object-Oriented Software, Guided by Tests
</span><span class='line'>What and not How</span></code></pre></td></tr></table></div></figure>


<h2>Applying this in your team</h2>

<p>Now, there might be a problem if your team has a split opinion on &lsquo;what vs how&rsquo; (i.e., part of the team prefers what and another prefers how)</p>

<p>Reasons I&rsquo;ve heard to defend how:</p>

<ul>
<li>The ones cited above</li>
<li>Concision / shortness</li>
<li>Code reusability</li>
<li>Easier to test, extracting to collaborators<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
</ul>


<p>Reasons I&rsquo;ve heard to defend what:</p>

<ul>
<li>Knowing exactly what the code is doing: i.e., do not have to think what the name means and to what this corresponds</li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Altough I believe you shouldn&rsquo;t do anything <em>just</em> for the purpose of tests. If it also improves your design, OK, but only for the tests, no.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internal Training: Testing Is Hard - Just Do It]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it/"/>
    <updated>2015-05-05T23:00:17+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it</id>
    <content type="html"><![CDATA[<p>At a client, last week I&rsquo;ve organized an internal training, in the form of a discussion about this article: <a href="http://davidsouther.com/#/posts/2013/10/30/testing-its-hard-just-do-it/">Testing is hard - just do it</a></p>

<h2>Our thoughts</h2>

<blockquote><p>When a bug is found, prove it exists with a test</p></blockquote>

<p>This immediately reduces defect rate: the same regression cannot be introduced again</p>

<blockquote><p> fix a bug a second time</p></blockquote>

<p>If fixing a bug (having defects in your code) was &lsquo;waste&rsquo;, as defined by lean methodologies, it also is wast fixing it for the following times</p>

<blockquote><p>testing requires discipline</p></blockquote>

<p>Agree. See quote by Larry Wall (this same article)</p>

<blockquote><p>[Three requirements for a good test suite]:</p>

<ol>
<li>The tests need to be easier to write</li>
<li>The test suite must run, and pass, before any code is allowed out the door</li>
<li>Support from the project&rsquo;s leadership</li>
</ol>
</blockquote>

<p>Agree.</p>

<blockquote><p>Programming is like drawing water from a well</p></blockquote>

<p>Good analogy</p>

<blockquote><p>I&rsquo;m going to assume you are smarter than me [&hellip;]</p></blockquote>

<p>This is related to &lsquo;doing clever things&rsquo;: when I write &lsquo;clever code&rsquo;, that has neither comments, nor it is massaged to be Clean Code, it will cost me many times more to modify / understand in the future vs massage it a little bit.</p>

<p>For me, an example of clever code are certain bitwise operations. Even though these operations are publicly available on websites and books, you must know about them before understanding the code.</p>

<p>Another example of clever code is taking assumptions, even if they are valid. Example: always return the second element because the first one is the header</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">select</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">elements</span><span class="o">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">elements</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>vs</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">selectFirstValidLine</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">elements</span><span class="o">){</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">validElements</span> <span class="o">=</span> <span class="n">skipHeader</span><span class="o">(</span><span class="n">elements</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">validElements</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Open questions / other ideas</h2>

<ul>
<li>There are tests that are more important than others. Is there a tool to assign them weights and inform about which preponderation of the codebase is broken? The same (i.e., more importance) can happen for production code.</li>
<li>Is SCRUM apt for junior developers? In the sense of the increased autonomy, more decisions, more required technical skills / values, etc</li>
<li>We discussed what differentiates a project with a shorter deadline from one with a longer deadline. The consensus was: you should do tests for any kind of project, the shorter deadline project won&rsquo;t allow as much time for refactoring</li>
<li>Tests iff (i.e., if and only if) working code</li>
<li>Tests do not guarantee lack of defects</li>
<li>Bijectiveness between tests and features (production code)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video: Nothing Is Something]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/05/04/video-nothing-is-something/"/>
    <updated>2015-05-04T07:43:14+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/05/04/video-nothing-is-something</id>
    <content type="html"><![CDATA[<p>I have seen this video: <a href="https://www.youtube.com/watch?feature=player_detailpage&amp;v=9lv2lBq6x4A">Nothing is something</a> by <a href="https://twitter.com/@sandimetz">Sandi Metz</a>, as I saw it recommended <a href="http://garajeando.blogspot.com.es/2015/04/interesting-talk-nothing-is-something.html">here</a></p>

<p>In the video, she talks programming in this fashion: (it is a stack, not an unordered list)</p>

<ul>
<li>Abstraction seeking</li>
<li>Message centric</li>
<li>Condition Averse</li>
<li>Smalltalk Infected</li>
</ul>


<blockquote><p>Not here to change the language but change you</p></blockquote>

<p>This is a pattern I&rsquo;ve also heard from <a href="https://twitter.com/@old_sound">Alvaro Videla</a>, where he said that other, more powerful languages can change your mind and help you bring some of those concepts to your own language. He was talking about Haskell, she, about Smalltalk.</p>

<p>She shows how to smell the <code>null object pattern</code> (that she independently discovered herself too - can be improved studying the classics<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>), also called <code>active nothing</code>. Decorates the <code>Animal</code> with a wrapper, to call it <code>GuaranteedAnimal</code></p>

<p>Later on, shows how to code an example on a &lsquo;tail&rsquo;, extending behaviour with inheritance and how to get rid of it: prefer composition versus inheritance. The importance of roles.</p>

<blockquote><p>Inheritance is for specialization, not for sharing code</p></blockquote>

<p>Steps to convert inheritance into composition:</p>

<ol>
<li> Isolate the difference</li>
<li> Name the concept</li>
<li> Define the role</li>
<li> Inject the players</li>
</ol>


<p>This is a trick I discovered here: when you don&rsquo;t know what name put here, create a spreadsheet and ask yourself what name the row should have. There is an example <a href="https://www.youtube.com/watch?feature=player_detailpage&amp;v=9lv2lBq6x4A#t=1959">at this minute</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>a reference to a pattern by the same name at <a href="http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382">Apprenticeship Patterns</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internal Training: Introduction to AngularJs]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/30/internal-training-introduction-to-angularjs/"/>
    <updated>2015-04-30T20:22:16+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/30/internal-training-introduction-to-angularjs</id>
    <content type="html"><![CDATA[<p>At a client, today I&rsquo;ve done an internal training on <a href="https://angularjs.org/">angular js</a>: we&rsquo;ve prepared some <a href="https://github.com/alvarogarcia7/demo-frontend-angularjs/tree/master/slides">slides</a> and a live demo.</p>

<p>The repository with all the information can be found <a href="https://github.com/alvarogarcia7/demo-frontend-angularjs">here</a>.</p>

<p>Apparently, the training has been a success, given that most of the talent in the team is backend focused (as opposed to full-stack) and changing from java to javascript is not straight-forward.</p>

<p>Note: this post has been created a posteriori, dated with the correct training timestamp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whose Fault Is This?]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/25/whose-fault-is-this/"/>
    <updated>2015-04-25T14:10:31+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/25/whose-fault-is-this</id>
    <content type="html"><![CDATA[<p>In the prologue of the book, while thanking everyone that has made the book possible:</p>

<blockquote><p>[&hellip;], none of the people mentioned here would be responsible for any inaccuracy that might exist in the book, as this responsibility is exclusively mine</p>

<p>Mihaly Csikszentmihalyi (translated)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, prologue of &ldquo;<a href="http://www.amazon.com/Flow-The-Psychology-Optimal-Experience/dp/0061339202">Flow</a>&rdquo;</p></blockquote>

<p>This connects with what <a href="http://twitter.com/@tastapod">Dan North</a> said in the Craft Conf about this idea of the &ldquo;I&rsquo;m the only one in the company producing good quality work, the rest are not doing the same&rdquo;. Of course, he was quoting greedy, selfish people who think this instead of attributing the success to the whole team.</p>

<p>Regarding the whole team, if I recall correctly, it was <a href="http://twitter.com/@svenpet">Sven Peters</a> who explained that &ldquo;[&hellip;] either the team wins or looses. There are no individual wins [&hellip;]&rdquo; <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>In this sense, Csikszentmihalyi assumes all responsibility when quoting and reflecting on other&rsquo;s works. It was his idea to develop on top of others, so any imperfection is his.</p>

<p>This is similar as when approving a pull request: you make sure that the code works and you stand by it. It is no longer the original owner&rsquo;s cause, but yours too, as you have signed this request. On the pull request, though, the code ownership is already distributed among the whole team, but approvals ensures the presence of the <a href="http://alvarogarcia7.github.io/blog/categories/guardian-of-the-source">guardian of the source</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I had to translate the quote, because I did not borrow the book in English<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>When the talks are available, we will be able the ensure the correct attribution of this idea.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Read Apprenticeship Patterns]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/25/how-i-read-apprenticeship-patterns/"/>
    <updated>2015-04-25T13:49:01+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/25/how-i-read-apprenticeship-patterns</id>
    <content type="html"><![CDATA[<p>At the Craft Conf 2015 I saw someone with the book <a href="http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382">Apprenticeship Patterns</a> by <a href="http://twitter.com/@davehoover">Dave Hoover</a> and <a href="http://twitter.com/@ade_oshineye">Adewale Oshineye</a> and asked them about the book. After praising the contents, they asked me how to approach the book.</p>

<p>I recalled reading it non-sequentially, and explained it to them:</p>

<ul>
<li>Read the introduction, preface, etc first</li>
<li>When you get to the patterns, pick one at random</li>
<li><code>10</code>: Read it and navigate through the <code>see also</code>.</li>
<li>If there are unread chapters from the <code>see also</code>, <code>goto 10</code></li>
<li>Find the remaining unread chapters and read them, try to apply the same algorithm</li>
<li>Read the appendices and finishing words</li>
</ul>


<p>Reading a connected chapter after the first one made me connect the dots and understand it much better than reading them sequentially.</p>

<p>PS: This post was extracted from this one: <a href="../../../../2015/02/02/your-first-language/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demand for TDD and Refactor]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/25/demand-for-tdd-and-refactor/"/>
    <updated>2015-04-25T13:28:20+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/25/demand-for-tdd-and-refactor</id>
    <content type="html"><![CDATA[<p>When I went to the Jason Gorman&rsquo;s TDD workshop (experience report <a href="../../../../2015/04/12/jason-gorman-tdd-intensive-workshop">here</a>), he said something interesting regarding refactor and TDD:</p>

<blockquote><p>In job offers / advertisements, TDD is much more in demand than refactor. But the latter is included in the former as an integral part.</p>

<p>Jason Gorman</p></blockquote>

<p>I agree with the second thought: you cannot properly do TDD without refactoring, as it is an integral part; also the third phase.</p>

<p>For me, sometimes refactoring is the difference between code and &ldquo;Clean Code&rdquo; (as defined in the book by the same title). If I cannot find the (algorithmic) pattern for the software I&rsquo;m writing, I try to introduce scaffolds to keep investigating until I can find a viable, general solution (if the problem requires it.)</p>

<p>Even after doing the refactor <code>replace algorithm</code>, the code might not have the responsibilities in the right place, the methods might be long, value objects not extracted yet, etc. This is where further refactor is needed to introduce all those qualities in the piece of software.</p>

<p>I believe that we programmers have done a bad job of communicating with the rest of the organization what refactoring is about. It has nothing to do with beauty, style or design (in the visual sense) but is related to maintainability, coupling, defects and quality. Money, in the long run, as its objective is to make it cheaper to change in the future, a better investment and ROI. This is the common language that the rest of the company understands.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talks I Have Attended at the Craft Conf 2015]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/25/talks-i-have-attended-at-the-craft-conf-2015/"/>
    <updated>2015-04-25T12:25:09+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/25/talks-i-have-attended-at-the-craft-conf-2015</id>
    <content type="html"><![CDATA[<p>These are the talks I&rsquo;ve attended at the Craft Conf 2015:</p>

<h2>Thursday 23th</h2>

<ul>
<li>Opening keynote by <a href="http://twitter.com/@tastapod">Dan North</a> and <a href="http://twitter.com/@jessitron">Jessica Kerr</a></li>
<li>Writing testable code - A functional programming point of view, by <a href="http://twitter.com/@old_sound">Alvaro Videla</a></li>
<li>Coding Culture, by <a href="http://twitter.com/@svenpet">Sven Peters</a></li>
<li>OnConnectionLost: the life of an offline web application, by <a href="http://twitter.com/@sgrewenig">Stefanie Grewenig</a> and <a href="http://twitter.com/@jthoenes">Johannes Thönes</a></li>
<li>Concurrency: It&rsquo;s harder (and easier) than you think, by <a href="http://twitter.com/@paulrabutcher">Paul Butcher</a></li>
<li>Testing and Integration (the remix), by <a href="http://twitter.com/@randommood">Inés Sombra</a></li>
<li>Beyond Features: Rethinking agile planning and tracking, by <a href="http://twitter.com/@tastapod">Dan North</a></li>
<li>Closing keynote by <a href="http://twitter.com/@alfrehn">Alf Rehn</a></li>
</ul>


<h2>Friday 24th</h2>

<ul>
<li>Opening keynote: The New New Software development game: Containers, Microservices and Contract tests, by <a href="http://twitter.com/@mpoppendieck">Mary Poppendieck</a></li>
<li>Apprenticeship patterns, revisited, by <a href="http://twitter.com/@davehoover">Dave Hoover</a></li>
<li>Interaction Driven Design, by <a href="http://twitter.com/@sandromancuso">Sandro Mancuso</a></li>
<li>The hidden dimension of refactoring, by <a href="http://twitter.com/@mfeathers">Michael Feathers</a></li>
<li>Why is an API like a puppy, by <a href="http://twitter.com/@ade_oshineye">Adewale Oshineye</a></li>
<li>Microservice antipatterns, by <a href="http://twitter.com/@tsaleh">Tammer Saleh</a></li>
</ul>


<p>I couldn&rsquo;t attend the last talk nor the keynote as I had to get to the airport</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Legacy Code Is About]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/21/what-legacy-code-is-about/"/>
    <updated>2015-04-21T22:09:54+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/21/what-legacy-code-is-about</id>
    <content type="html"><![CDATA[<p>In his book <a href="http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/ref=sr_1_1?ie=UTF8&amp;qid=1429647115&amp;sr=8-1&amp;keywords=legacy+code+feathers">Working effectively with legacy code</a>, <a href="https://twitter.com/mfeathers">Michael Feathers</a> describes:</p>

<blockquote><p>[&hellip;] legacy code as code without tests. It is a good working definition, and it points to a solution [&hellip;]</p>

<p>M Feathers, in the preface of Working effectively with legacy code</p></blockquote>

<p>I really like this definition. It is objective and measurable. But this is also a downside. Let&rsquo;s take any concurrent code, for example: you can achieve 100% coverage on a single thread and the program could have defects when executed in parallel. But this might be an outlier, as concurrency is difficult to test. Let&rsquo;s take another example.</p>

<p>Let&rsquo;s a imagine a non-concurrent (i.e., single thread) code composed by a single class (no collaborators; just one responsibility; it is &ldquo;Clean Code&rdquo;, as defined per R.C. Martin&rsquo;s book) that has some happy paths as well as some error-handling cases. As usual. The original code writer has decided to test only the happy paths. They deployed it to production, as the product was ready. You inherit this code.</p>

<p>After the system is deployed to production, you start receiving defect reports on the happy paths (the tested part). The first one, you cross it off as an one-time thing. Then the second and third come. You take a deeper look and start seeing some inconsistencies in the tests, some tests that actually do not test anything interesting:</p>

<ul>
<li>some test the test framework</li>
<li>some the language</li>
<li>some test a happy path that works by pure luck</li>
<li>some functionalities are tested (not all happy paths)</li>
<li>there&rsquo;s actually a defect converted into a specification (test) (??)</li>
</ul>


<p>Now, I ask myself this question: when did I start considering this code as legacy? When I saw the bug reports in production (several in a row) or when I saw the poor suite of tests?</p>

<p>I do think this codebase is legacy, no matter when I realized about it. But my first instinct would be to consider it legacy from the moment I received the bug reports, as I lost the trust in that code.</p>

<p>Because for me, <strong>legacy code is about trust, not tests</strong>. You can have tests but no trust; you can have trust but no tests (the latter is more difficult in non-trivial codebases.)</p>

<p>This is why I would like to update the definition:</p>

<blockquote><p>Legacy code is code without tests that provide trust to all your stakeholders</p></blockquote>

<p>The last part is very important, because the definition is no longer objective but depends from person to person. If the codebase doesn&rsquo;t have tests, it is definitely legacy. But even if it has them, would you consider the given example a legacy or non-legacy code?</p>

<p>These stakeholders include everyone affected or affecting the product: owners, developer team (in the scrum, wide sense), users, clients, &hellip;</p>

<p>Full disclosure: I&rsquo;ve written plenty of legacy code. Code which I thought was good but really wasn&rsquo;t. Even with tests, even with TDD, even with Clean Code. This has made me change my mind about what legacy code is all about.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Annotations and Aspects in Java]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/21/annotations-and-aspects-in-java/"/>
    <updated>2015-04-21T07:23:23+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/21/annotations-and-aspects-in-java</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve written a sample project with an annotation and an aspect to intercept it and decorate it.</p>

<p>The code provides a way of doing <code>try|catch</code>, specifying an exception to be caught.</p>

<p>The source code is available <a href="https://github.com/alvarogarcia7/annotation-aspect-java">here</a></p>

<h2>In the process</h2>

<p>This has taken me approximately one hour to prepare the spike and half more to refactor and massage a bit.</p>

<p>If you want to see the raw details, the refactor has been committed step by step (the spike hasn&rsquo;t). The unmassaged code can be found <a href="https://github.com/alvarogarcia7/annotation-aspect-java/tree/d5e61ca56a38b1611c9acaa61a2e169b14d19d1e">here</a>. The massaged version is at the <a href="https://github.com/alvarogarcia7/annotation-aspect-java/">tip of the arrow</a></p>

<h2>More information</h2>

<p>Regarding <code>annotations</code> (like @Override):</p>

<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/annotations/">This official article</a> on annotations is useful.</li>
<li><a href="http://www.vogella.com/tutorials/JavaAnnotations/article.html">This article</a> by Lars Vogel guides you step by step.</li>
<li><a href="http://tutorials.jenkov.com/java/annotations.html">This article</a> by Jakov Jenkov is very nice.</li>
<li><a href="http://crunchify.com/understanding-java-annotation-annotation-examples/">This article</a> helps you to understand what an annotation is and what to use it for.</li>
</ul>


<p>Regarding <code>aspect</code> (based on AspectJ):</p>

<ul>
<li><a href="http://stackoverflow.com/questions/14714092/spring-3-2-aop-intercepting-methods-by-annotation">This question</a> has been my main source of information / inspiration for the spring + aspectj configuration</li>
</ul>


<h2>Conclusions</h2>

<p>One of the drawbacks that I find to common examples or tutorials is that they&rsquo;re not complete. They show you part of the information, but not the whole. While this helps most of the readers, there are library incompatibilities, defects, specific versions, etc. This is why I like to post the whole solution, including <code>pom.xml</code> (dependencies) and tests.</p>

<p>Having less documentation for developers can be acceptable if you have tests / more tests; of course, as long as other developers can follow your thought while developing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging Is a Feature]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/19/logging-is-a-feature/"/>
    <updated>2015-04-19T23:43:10+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/19/logging-is-a-feature</id>
    <content type="html"><![CDATA[<p>At a client, we&rsquo;re facing this challenge: we cannot access production logs, as we don&rsquo;t have access to production environments. The solution we&rsquo;ve chose is to implement the logging component as a layer on top of <a href="http://www.splunk.com/">Splunk</a>.</p>

<p>This formatter layer &ndash;per component&ndash; accesses a generic layer &ndash;for the whole company&ndash; that accesses splunk. In this manner, it is very easy to reuse the splunk connection and configuration and inject mocks. Also helps with the local environment: you always log to console (even if in production you don&rsquo;t have access to it) and can disable this in local, not needing a local splunk installation.</p>

<p>Strategies for dealing with this:</p>

<ul>
<li>functional logger: no shared state

<ul>
<li>can only log information available in this scope: parameters, attributes, static information</li>
</ul>
</li>
<li>stateful logger: information is added to the threadContext and logged whenever necessary

<ul>
<li>can log information in this scope plus any of the previous invokings.</li>
<li>the problem is precisely sharing state: you have to control all the possible parents to know where this data comes from. A piece of information may come from any source.</li>
<li>Lose the reference of who is invoking you, as there is no customization for this. (only using implementation)</li>
<li>Speak two different languages: one for logging and one for business logic</li>
</ul>
</li>
<li>mixed: mix and match the best of both worlds.

<ul>
<li>The problem with the shared state can be solved if no data is overwritten and any information is stored in a map where the key is the fully qualified (FQ) method name (or FQ class name + FQ method name)</li>
</ul>
</li>
</ul>


<p>The GOOS book explains this very well on the 20th chapter, first half &ldquo;logging is a feature&rdquo;. If we log as described in chapters 19 and 20, some of the problems are reduced:</p>

<ul>
<li>multiple levels of abstraction</li>
<li>indirect control over logging. decide in a single place whether to log exceptions of each kind or not</li>
<li>remove &ldquo;implementation details&rdquo; such as &ldquo;log.isDebugEnabled&rdquo;</li>
<li>remove performance issues: no need to build strings for logging every time, only need to pass objects. inside the logging layer, if the logger is enabled for that level, then spend the time building strings and print them</li>
</ul>


<p>We should remember that:</p>

<ul>
<li>Whenever logging becomes useful data (for the stakeholders) it no longer is a debug information and needs to be tested (automatically). In my opinion, it is not enough to test it daily when debugging, as these stakeholders rely on the data. Also, humans are not good detecting small differences, while machines excel at it.</li>
<li>Why treat the logging feature different from any other? It is an investment, like any other, and as such should work properly</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk: Simplicity Matters]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/18/talk-simplicity-matters/"/>
    <updated>2015-04-18T14:44:06+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/18/talk-simplicity-matters</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve seen this video by <a href="http://twitter.com/@richhickey">Rich Hickey</a>: &ldquo;<a href="https://www.youtube.com/watch?v=rI8tNMsozo0">Simplicity matters</a>&rdquo;, taken from <a href="http://twitter.com/@trikitrok">Manuel Rivero</a>&rsquo;s google plus&#8217; <a href="https://plus.google.com/u/0/117817370205182982732/posts/W6Gd9v67BgS?cfem=1">site</a></p>

<p>here are my notes:</p>

<ul>
<li>the software is the elephant</li>
<li>do more, do it differently, do it better</li>
<li>complexity of the elephant is going to dominate what you can do</li>
<li>your ability to reason about your program is critical</li>
<li>design is about pulling things apart</li>
<li>become familiar by learning, trying</li>
<li>&ldquo;We can be creating the exact same programs out of significantly simpler components&rdquo;. Rich Hickey</li>
</ul>


<p>Complexity vs simplicity:</p>

<table>
<thead>
<tr>
<th>Complexity     </th>
<th> Simplicity</th>
</tr>
</thead>
<tbody>
<tr>
<td>state, objects </td>
<td> values</td>
</tr>
<tr>
<td>methods </td>
<td> functions, namespaces</td>
</tr>
<tr>
<td>variables </td>
<td> managed refs</td>
</tr>
<tr>
<td>inheritance, switch, matching  </td>
<td> polymorphism à la carte</td>
</tr>
<tr>
<td>syntax </td>
<td> data</td>
</tr>
<tr>
<td>imperative loops, fold </td>
<td> set functions</td>
</tr>
<tr>
<td>actors </td>
<td> queues</td>
</tr>
<tr>
<td>ORM </td>
<td> declarative data manipulation</td>
</tr>
<tr>
<td>conditionals </td>
<td> rules</td>
</tr>
<tr>
<td>inconsistency </td>
<td> consistency </td>
</tr>
</tbody>
</table>


<ul>
<li>he does not agree on &ldquo;simplicity&rdquo; on the agile manifesto</li>
<li>simplicity is not about you. simplicity is a lot of hard work

<ul>
<li>clicked with paul graham&rsquo;s <a href="http://www.paulgraham.com/avg.html">LISP startup</a></li>
</ul>
</li>
<li>simplicity is not an objective</li>
</ul>


<p>Order is all over the place:</p>

<table>
<thead>
<tr>
<th>Complex  </th>
<th> Simple</th>
</tr>
</thead>
<tbody>
<tr>
<td>positional arguments </td>
<td> named arguments or map</td>
</tr>
<tr>
<td>syntax </td>
<td> data</td>
</tr>
<tr>
<td>product types  </td>
<td> associate records</td>
</tr>
<tr>
<td>imperative programs </td>
<td> declarative programs</td>
</tr>
<tr>
<td>prolog </td>
<td> datalog</td>
</tr>
<tr>
<td>call chains </td>
<td> queues</td>
</tr>
<tr>
<td>XML </td>
<td> JSON, Clojure literals</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Guardian of the Source]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/17/the-guardian-of-the-source/"/>
    <updated>2015-04-17T22:01:48+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/17/the-guardian-of-the-source</id>
    <content type="html"><![CDATA[<p>Overheard today at the office, while they were discussing the approval of a pull request:</p>

<blockquote><p>[Pull request reviewer] - I&rsquo;m sorry, can&rsquo;t approve this: I don&rsquo;t really agree with this design. Isn&rsquo;t there an alternative for this?</p>

<p>[Pull request author] - [redacted], of course you don&rsquo;t, you&rsquo;re the guardian of the source</p>

<p>[PR reviewer] - Well, sometimes I&rsquo;m a bit picky about introducing bad code into our codebase.</p></blockquote>

<p>This has made me think about Gandalf blocking the path of Balrog Demon, shouting &ldquo;<a href="http://knowyourmeme.com/memes/you-shall-not-pass">you shall not pass</a>&rdquo; while on top of the bridge.</p>

<p>This is part of the objectives of doing a pull request before merging code: stop the bad code<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> before it is merged to the codebase.</p>

<p>Later, as you start having <a href="http://en.wikipedia.org/wiki/Broken_windows_theory">broken windows</a> in your codebase, it is easier that you start introducing more. Exactly about this is the <a href="http://en.wikipedia.org/wiki/Broken_windows_theory">broken windows theory</a>.</p>

<p>On the other hand, if you try to block that bad code before it is merged, it is cheaper to remove it: nothing depends on it, you introduce no repetition, etc<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>This also connects with the idea present in <a href="http://www.amazon.com/The-Software-Craftsman-Professionalism-Pragmatism/dp/0134052501">Software Craftsmanship, now called The Software Craftsman</a>, about preserving value for investors and treat software as an investment (with positive ROI) rather than a sunk cost.</p>

<p>It is being picky and, to the most of our possibilities, do not letting any defects nor bad code into the codebase. A hedge fund manager would not let any toxic or dubious asset into the managed funds. This would be counterproductive in the long run (maybe even in the short one) and would be not doing their job correctly. Why is it that some developers suggest or accept these toxic assets?</p>

<p>So, at least for me, would be an honor to be called the &ldquo;Guardian of the Source&rdquo; by someone I respect, as long as this is a serious proposition (i.e., not a joke of some kind).</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Bad code can be expressed in many ways: long methods, bad naming, breaking design principles (e.g., SOLID, KISS, DRY - OAOO), code with defects, no tests or no coverage, etc.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>A source is <a href="http://c2.com/cgi/wiki?DiscoverDefectsEarly">Discover defects early</a>. Another is <a href="http://developers.slashdot.org/story/03/10/21/0141215/software-defects---do-late-bugs-really-cost-more">this paper</a> that cites the ratio of fixing it later to 5:1 (five times more expensive).<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inserting Clojure Code in Octopress]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/14/inserting-clojure-code-in-octopress/"/>
    <updated>2015-04-14T23:48:27+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/14/inserting-clojure-code-in-octopress</id>
    <content type="html"><![CDATA[<p>Inserting this code in the blog:</p>

<pre><code>```clojure
(defn all-access[k]
    (let [{:keys [a b] :as k}]
        (do a)
        (do (:b k))))
```
</code></pre>

<p>the octopress processor throws the error:</p>

<pre><code>Error: Pygments can't parse unknown language: clojure
Error: Run jekyll build --trace for more information.
</code></pre>

<p>A solution would be to include it as lisp code:</p>

<pre><code>```lisp
(defn all-access[k]
    (let [{:keys [a b] :as k}]
        (do a)
        (do (:b k))))
```
</code></pre>

<p>this is an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">defn</span> <span class="nv">all-access[k]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="nv">[{:keys</span> <span class="nv">[a</span> <span class="nv">b]</span> <span class="ss">:as</span> <span class="nv">k}]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">do</span> <span class="nv">a</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">do</span> <span class="p">(</span><span class="ss">:b</span> <span class="nv">k</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Destructuring as a Refactor in Clojure]]></title>
    <link href="http://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure/"/>
    <updated>2015-04-14T23:36:23+02:00</updated>
    <id>http://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/@trikitrok">Manuel</a> has taught us today about the default value while destructuring:</p>

<blockquote><p>The following example illustrates the use of an :as directive to bind a local with the entire map.</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user=&gt; (def point {:x 5 :y 7})
</span><span class='line'>#'user/point
</span><span class='line'>
</span><span class='line'>(let [{:keys [x y] :as the-point} point]
</span><span class='line'>         (println "x:" x "y:" y "point:" the-point))
</span><span class='line'>
</span><span class='line'>x: 5 y: 7 point: {:x 5, :y 7}</span></code></pre></td></tr></table></div></figure>


<blockquote><p>We&rsquo;ve now seen the :as directive used for both vectors and maps. In both cases the local is always assigned to the entire expression that is being destructured.</p></blockquote>

<p><a href="http://blog.jayfields.com/2010/07/clojure-destructuring.html">Source</a></p>

<p>This has been used for a method like this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">defn</span> <span class="nv">all-access[k]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do</span> <span class="p">(</span><span class="ss">:a</span> <span class="nv">k</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">do</span> <span class="p">(</span><span class="ss">:b</span> <span class="nv">k</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>this has been refactored to this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">defn</span> <span class="nv">all-access[k]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="nv">[{:keys</span> <span class="nv">[a</span> <span class="nv">b]</span> <span class="ss">:as</span> <span class="nv">k}]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">do</span> <span class="nv">a</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">do</span> <span class="p">(</span><span class="ss">:b</span> <span class="nv">k</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>the best thing about this is I can introduce the keys to the array while keeping the original map (<code>k</code>) and, when I&rsquo;m ready, to change some of the accesses to <code>k</code> to its destructured variables.</p>
]]></content>
  </entry>
  
</feed>
