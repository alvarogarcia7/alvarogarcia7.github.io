<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>threading-macro on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/threading-macro/</link>
    <description>Recent content in threading-macro on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Jul 2023 16:38:28 +0400</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/threading-macro/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Threading Macro (clojure) equivalent in Python</title>
      <link>https://alvarogarcia7.github.io/articles/2023/07/22/threading-macro-equivalent-python/</link>
      <pubDate>Sat, 22 Jul 2023 16:38:28 +0400</pubDate>
      
      <guid>https://alvarogarcia7.github.io/articles/2023/07/22/threading-macro-equivalent-python/</guid>
      <description>Introduction In any programming language, it is common to compose functions by pipelining functions: h = g âˆ˜ f such that h(x) = g(f(x)).
The function f is applied first, then g, then the following. 1
For me, it would be more comfortable and easy to understand to write it f COMPOSE_THEN g, indicating that this function composition is not the usual, but a different operation.
Introduction in Clojure This function composition can be written in Clojure by pipelining or chaining functions:</description>
    </item>
    
  </channel>
</rss>
