<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>alvaro-videla on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/alvaro-videla/</link>
    <description>Recent content in alvaro-videla on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Sep 2019 10:32:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/alvaro-videla/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self-Study in September 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/09/01/self-study-september-2019/</link>
      <pubDate>Sun, 01 Sep 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/09/01/self-study-september-2019/</guid>
      <description>Profiling Memory Allocations In iOS With Instruments Describes a technique for profiling memory allocations
Tags: memory-management, memory-allocation, tool, technique, ios, matt-eaton
Id: 237dd71a-dc50-11e9-b201-0242ac110003 Read: Sat, 21 Sep 2019 09:13:56 +0000
Programming as translation  Converting the real world into digital abstractions requires distillation. And, like literary translators, developers must understand their biases.
 Tags: alvaro-videla, old_sound, analogy, metaphor, quote, umberto-eco
Id: a2c0f458-dc50-11e9-95d7-0242ac110003 Read: Sat, 21 Sep 2019 09:17:29 +0000</description>
    </item>
    
    <item>
      <title>Self-Study in January 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/01/01/self-study-in-january-2017/</link>
      <pubDate>Sun, 01 Jan 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/01/01/self-study-in-january-2017/</guid>
      <description>Translation from Haskell to JavaScript of selected portions of the best introduction to monads I’ve ever read I&amp;rsquo;ve read this article by James Coglan, introducing monads.
About composability:
 The symmetry of the argument and return types is what makes these functions composable
 or
 symmetric input and output types
 Guide to basic monadic functions:
 lift, which converts a &amp;lsquo;simple’ function into a debuggable function bind, which converts a debuggable function into a composable form unit, which converts a simple value into the format required for debugging, by placing it in a container</description>
    </item>
    
  </channel>
</rss>
