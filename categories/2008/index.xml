<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2008 on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/2008/</link>
    <description>Recent content in 2008 on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 May 2015 00:02:44 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/2008/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Paper: TDD in industrial teams</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams/</link>
      <pubDate>Tue, 12 May 2015 00:02:44 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.msr-waypoint.net/en-us/groups/ese/nagappan_tdd.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; by Nagappan, Maximilien, Bhat and Williams on the cost, advantages, pitfalls of doing TDD in industrial teams (private companies who create software).&lt;/p&gt;

&lt;h2 id=&#34;my-notes&#34;&gt;My notes&lt;/h2&gt;

&lt;p&gt;Abstract:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;little empirical evidence supports or refutes the utility of this practice in an industrial context&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;they seem to be talking about inside-out tdd as in chapter 2 (page 291), they talk about small units and then integrating them in a bigger context&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;benefits&#34;&gt;Benefits&lt;/h3&gt;

&lt;p&gt;taken from chapter 2 (page 292)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Better design&lt;/li&gt;
&lt;li&gt;Efficiency&lt;/li&gt;
&lt;li&gt;Test assets&lt;/li&gt;
&lt;li&gt;Reducing defect injection&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;TDD seems to be applicable in various domains&lt;/p&gt;

&lt;p&gt;[TDD] can significantly reduce the defect density of developed software without significant productivity reduction [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] an important aspect of TDD is the creation of tests assets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recommendations (this is all quotes):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start TDD from the beginning of projects&lt;/li&gt;
&lt;li&gt;For a team new to TDD, introduce automated build test integration towards the second third of the development phase&lt;/li&gt;
&lt;li&gt;[&amp;hellip;] add new tests every time a problem is found&lt;/li&gt;
&lt;li&gt;Get the test team involved and knowledgeable about the TDD approach&lt;/li&gt;
&lt;li&gt;Constantly running the unit tests [&amp;hellip;]&lt;/li&gt;
&lt;li&gt;Encourage fast unit test execution and efficient unit testing design&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>