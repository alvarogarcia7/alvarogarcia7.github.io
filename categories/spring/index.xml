<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/spring/</link>
    <description>Recent content in Spring on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Apr 2016 00:08:19 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/spring/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in April 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/01/self-study-in-april-2016/</link>
      <pubDate>Fri, 01 Apr 2016 00:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/01/self-study-in-april-2016/</guid>
      <description>

&lt;h2 id=&#34;deliberate-practice-what-it-is-and-why-you-need-it&#34;&gt;Deliberate Practice: What It Is and Why You Need It&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Corbett Barr on what is deliberate practice and why it is needed to become an expert in a given domain field.&lt;/p&gt;

&lt;p&gt;The four essential components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Motivation&lt;/li&gt;
&lt;li&gt;Tailored (practice)&lt;/li&gt;
&lt;li&gt;Feedback&lt;/li&gt;
&lt;li&gt;Repetion
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: corbett-barr, deliberate-practice, expert, practice, anders-ericsson, talent, professional-development, career&lt;/p&gt;

&lt;h2 id=&#34;10-features-i-wish-java-would-steal-from-the-kotlin-language&#34;&gt;10 Features I Wish Java Would Steal From the Kotlin Language&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jooq.org/2016/03/31/10-features-i-wish-java-would-steal-from-the-kotlin-language/&#34; target=&#34;_blank&#34;&gt;this list of features&lt;/a&gt; that the Kotlin Language has that would be an improvement for the Java language. By Lukas Eder&lt;/p&gt;

&lt;p&gt;Tags: list, lukas-eder, kotlin, java, comparison, language, jooq&lt;/p&gt;

&lt;h2 id=&#34;how-we-built-uber-engineering-s-highest-query-per-second-service-using-go&#34;&gt;How we built Uber engineering&amp;rsquo;s highest query per second service using Go&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://eng.uber.com/go-geofence/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Kai Wei on a microservice they&amp;rsquo;ve built using Go.&lt;/p&gt;

&lt;p&gt;Explains the reasons for choosing that algorithm for geofencing, the performance they&amp;rsquo;re achieving, and the architecture.&lt;/p&gt;

&lt;p&gt;Tags: uber, go, microservice, performance, geofence, geofencing, rps, go-memory-model, kai-wei&lt;/p&gt;

&lt;h2 id=&#34;unwinding-uber-s-most-efficient-service&#34;&gt;Unwinding Uber&amp;rsquo;s Most Efficient Service&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@buckhx/unwinding-uber-s-most-efficient-service-406413c5871d&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Buck Heroux commenting on the decisions of Uber for building the geofencing microservice (above read).&lt;/p&gt;

&lt;p&gt;Explains the different alternatives for algorithms in this problem space and has implemented them in go. Provides a benchmark for comparing those, including a profiling session.&lt;/p&gt;

&lt;p&gt;Tags: s2, quadtree, rtree, brute-force, geofence, geofencing, uber, comment, buck-heroux, go, read-on-read, meta-read&lt;/p&gt;

&lt;h2 id=&#34;lawful-hacking-and-continuing-vulnerabilities&#34;&gt;Lawful Hacking and Continuing Vulnerabilities&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.schneier.com/blog/archives/2016/03/lawful_hacking_.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Bruce Schneier on the stance the FBI is taking in regards to vulnerabilities discovered in Apple&amp;rsquo;s devices.&lt;/p&gt;

&lt;p&gt;Tags: bruce-schneier, apple, security, fbi, vulnerability, exploit, law, hacking&lt;/p&gt;

&lt;h2 id=&#34;a-side-project-helped-jumpstart-my-career-life-learning&#34;&gt;A Side Project Helped Jumpstart My Career — Life Learning&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/life-learning/a-side-project-helped-jumpstart-my-career-7cd6f8e9b07f&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Dave Gerhardt on how making a side project happen affected his life and his skills.&lt;/p&gt;

&lt;p&gt;Some of the reasons for doing it include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It forces you to figure stuff out&lt;/li&gt;
&lt;li&gt;The only way to learn is by doing&lt;/li&gt;
&lt;li&gt;It gets your brain working on something other than your job&lt;/li&gt;
&lt;li&gt;You have to create your own network&lt;/li&gt;
&lt;li&gt;You are the CEO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: long-life-learning, continuous-learning, side-project, dave-gerhardt, drift, professional-development, personal-development, business, career&lt;/p&gt;

&lt;h2 id=&#34;fun-jekyll-tricks&#34;&gt;Fun Jekyll Tricks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.madebymarket.com/blog/dev/fun-jekyll-tricks.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brian Knapp where he explains some tips and tricks of jekyll (in which octopress is based on): speed, deployment, subcategories inside the blog, _data, _includes.&lt;/p&gt;

&lt;p&gt;Tags: brian-knapp, jekyll, octopress, tip-and-trick, improvement, subcategory, meta, automation, deployment&lt;/p&gt;

&lt;h2 id=&#34;la-ola-que-llega&#34;&gt;La ola que llega&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=f8a8ee92cc&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; by David Bonilla, where he explains (in Spanish) the &amp;lsquo;contractor&amp;rsquo; phenomenon arriving to Spain, 2-3 years after being in other countries and the effects that this could have both for workers and companies.&lt;/p&gt;

&lt;p&gt;Tags: bonilista, david-bonilla, contractor&lt;/p&gt;

&lt;h2 id=&#34;10-razones-por-las-que-este-sábado-deberías-ir-a-un-code-retreat&#34;&gt;10 razones por las que este sábado deberías ir a un code retreat&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://francho.org/2015/11/10/10-razones-para-ir-a-un-coderetreat/&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of reasons for attending a code retreat, by Francho Joven, who I met in the Global Day Of Code Retreat (GDCR) &amp;lsquo;15 in Zaragoza&lt;/p&gt;

&lt;p&gt;Tags: francho-joven, list, zaragoza, code-retreat, gdcr&lt;/p&gt;

&lt;h2 id=&#34;meaningful-work-through-passion-not-genius&#34;&gt;Meaningful Work through Passion, not Genius&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=pIYUMwxKFzo&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; on the importance of hard work and how it can be mistaken as genious. By Malcolm Gladwell&lt;/p&gt;

&lt;p&gt;Tags: malcolm-gladwell, passion, genius, work, time-management, productivity, career, mastery-autonomy-purpose&lt;/p&gt;

&lt;h2 id=&#34;how-to-ask-your-wife-for-permission-to-spend-250-000-on-a-domain-name&#34;&gt;How to ask your wife for permission to spend $250,000 on a domain name&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@Stockphoto.com/how-to-ask-your-wife-for-permission-to-spend-250-000-on-a-domain-name-c27a3c2852e1&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jon Yau on how they started StockPhoto.com, buying a $250,000 domain name.&lt;/p&gt;

&lt;p&gt;Tags: startup, domain, stockphoto, jon-yau&lt;/p&gt;

&lt;h2 id=&#34;sorry-developer-bootcamps-i-was-wrong&#34;&gt;Sorry, developer bootcamps: I was wrong&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@dillonforrest/sorry-developer-bootcamps-i-was-wrong-ea37fcc5572c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Dillon Forrest on the topic of developer bootcamps. Explains why developers should not be threatened by recent graduates of these programs and describes how people pursuing these programs usually are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intelligence&lt;/li&gt;
&lt;li&gt;Risk appetite&lt;/li&gt;
&lt;li&gt;Resilience&lt;/li&gt;
&lt;li&gt;Self-investment&lt;/li&gt;
&lt;li&gt;Entrepreneurship&lt;/li&gt;
&lt;li&gt;Growth trajectory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: bootcamp, developer-bootcamp, dev-bootcamp, dillon-forrest, intelligence, risk-appetite, resilience, self-investment, entrepreneurship, growth-trajectory&lt;/p&gt;

&lt;h2 id=&#34;the-jvm-and-java-garbage-collection&#34;&gt;The JVM and Java Garbage Collection&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=DoJr5QQYsl8&#34; target=&#34;_blank&#34;&gt;this webcast&lt;/a&gt; about how the JVM garbage collection works. By Michael W Williams&lt;/p&gt;

&lt;p&gt;Tags: michael-williams, oracle, webcast, jvm, garbage-collection, gc,&lt;/p&gt;

&lt;h2 id=&#34;files-are-hard&#34;&gt;Files Are Hard&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://danluu.com/file-consistency/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why software that writes on files is difficult, based on the different filesystems that are below, and the operating system. Written by Dan Luu.&lt;/p&gt;

&lt;p&gt;Uses software product to find bugs in filesystems&lt;/p&gt;

&lt;p&gt;Tags: filesystem, file, dan-luu, analysis&lt;/p&gt;

&lt;h2 id=&#34;contrata-a-un-fracasado-con-ilusión-inquebrantable&#34;&gt;Contrata a un fracasado con ilusión inquebrantable&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.contunegocio.es/tecnologia/contrata-a-un-fracasado-con-ilusion-inquebrantable/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Alberto Mena (in Spanish) on what are the qualities that define a good programmer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;humility&lt;/li&gt;
&lt;li&gt;failure&lt;/li&gt;
&lt;li&gt;illusion&lt;/li&gt;
&lt;li&gt;hard work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: alberto-mena, spanish, team-management, success, developer, quality, developer-quality&lt;/p&gt;

&lt;h2 id=&#34;don-t-react&#34;&gt;Don&amp;rsquo;t react&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://journal.avdi.org/2016/04/14/dont-react/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Avdi Grimm on how the action vs reaction attitude. Why to prefer the former.&lt;/p&gt;

&lt;p&gt;Tags: action, reaction, social-media, avdi-grimm, productivity&lt;/p&gt;

&lt;h2 id=&#34;ftp-is-so-90-s-let-s-deploy-via-git-instead&#34;&gt;FTP is so 90&amp;rsquo;s. Let&amp;rsquo;s deploy via Git instead!&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://coderwall.com/p/xczkaq/ftp-is-so-90-s-let-s-deploy-via-git-instead&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; on how to deploy using git. By Kerrick Long&lt;/p&gt;

&lt;p&gt;Tags: kerrick-long, git, deployment, webapp, application, devops&lt;/p&gt;

&lt;h2 id=&#34;job-vs-career-10-key-differences-you-need-to-understand&#34;&gt;Job vs Career: 10 Key Differences You Need To Understand&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.officevibe.com/blog/job-vs-career&#34; target=&#34;_blank&#34;&gt;the infographic and the article&lt;/a&gt; by Jacob Shriar on what differentiates a job from a career&lt;/p&gt;

&lt;p&gt;Tags: jacob-shriar, infographic, job-vs-career, comparison, job, career&lt;/p&gt;

&lt;h2 id=&#34;the-secret-to-employee-motivation&#34;&gt;The Secret To Employee Motivation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.officevibe.com/blog/secret-employee-motivation-infographic&#34; target=&#34;_blank&#34;&gt;the infographic and the article&lt;/a&gt; by Jacob Shriar on what motivates employess: mastery, autonomy and purpose. A direct reference to Dan Pink&amp;rsquo;s &amp;ldquo;The puzzle of motivation&amp;rdquo; TED talk.&lt;/p&gt;

&lt;p&gt;Tags: jacob-shriar, motivation, employee, infographic, mastery, autonomy, purpose&lt;/p&gt;

&lt;h2 id=&#34;the-puzzle-of-motivation&#34;&gt;The puzzle of motivation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.ted.com/talks/dan_pink_on_motivation&#34; target=&#34;_blank&#34;&gt;this TED talk&lt;/a&gt; by Dan Pink on what motivates us: intrinsic vs extrinsic motivation.&lt;/p&gt;

&lt;p&gt;Also about the gap that exists between what science knows and what businesses propose.&lt;/p&gt;

&lt;p&gt;Tags: ted, ted-talk, video, dan-pink, mastery, autonomy, purpose&lt;/p&gt;

&lt;h2 id=&#34;applying-a-ceiling-to-the-bug-count&#34;&gt;Applying a ceiling to the bug count&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://techblog.king.com/applying-a-ceiling-to-the-bug-count/&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt;, written by Susanna Berg, on how King has reduced the amount of bugs in their backlog using an agile technique, measuring and setting a limit.&lt;/p&gt;

&lt;p&gt;Tags: susanna-berg, king, agile, bug, bug-count, defect, defect-count, per-malmen&lt;/p&gt;

&lt;h2 id=&#34;coming-up-in-2016-spring-framework-4-3-5-0&#34;&gt;Coming up in 2016: Spring Framework 4.3 &amp;amp; 5.0&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://spring.io/blog/2015/08/03/coming-up-in-2016-spring-framework-4-3-5-0&#34; target=&#34;_blank&#34;&gt;this announcement&lt;/a&gt; of Spring&amp;rsquo;s new release, 5.0, which will require java 8 and will turn most of the features into the reactive programming paradigm. By Juergen Hoeller.&lt;/p&gt;

&lt;p&gt;Tags: juergen-hoeller, spring, reactive-programming, release, announcement&lt;/p&gt;

&lt;h2 id=&#34;why-offices-are-where-work-goes-to-die&#34;&gt;Why offices are where work goes to die&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://swizec.com/blog/why-offices-are-where-work-goes-to-die/swizec/6695&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Swizec Teller explaining the downsides of working in an office as compared to working remotely.&lt;/p&gt;

&lt;p&gt;Tags: swizec-teller, remote, home-office, office, comparison, time-management&lt;/p&gt;

&lt;h2 id=&#34;the-myth-of-the-passionate-developer&#34;&gt;The Myth of the Passionate Developer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@bm2yogi/the-myth-of-the-passionate-developer-76a41d457304&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Ibarra on what are the implications of being a passionate developer, how it affects your tasks and what are the factors to a job.&lt;/p&gt;

&lt;p&gt;Tags: michael-ibarra, passion, development, job, motivation, myth&lt;/p&gt;

&lt;h2 id=&#34;mossack-fonseca-breach-wordpress-revolution-slider-plugin-possible-cause&#34;&gt;Mossack Fonseca Breach – WordPress Revolution Slider Plugin Possible Cause&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.wordfence.com/blog/2016/04/mossack-fonseca-breach-vulnerable-slider-revolution/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mark Maunder, which describes an hypothesis on how the Mossack Fonseca breach could have happened. Also describes and shows how to breach a Wordpress installation with a vulnerable Revolution Slider plugin.&lt;/p&gt;

&lt;p&gt;Tags: mark-maunder, security, breach, mossack-fonseca-breach, mossack-fonseca, hypothesis, attack, plugin, revolution-slider, wordpress&lt;/p&gt;

&lt;h2 id=&#34;tim-urban-inside-the-mind-of-a-master-procrastinator&#34;&gt;Tim Urban: Inside the mind of a master procrastinator&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.ted.com/talks/tim_urban_inside_the_mind_of_a_master_procrastinator&#34; target=&#34;_blank&#34;&gt;this TED talk&lt;/a&gt; from Tim Urban on how the procrastinator&amp;rsquo;s mind works, exemplified by his own career.&lt;/p&gt;

&lt;p&gt;Tags: procrastinator, procrastination, mind, time-management, tim-urban&lt;/p&gt;

&lt;h2 id=&#34;pep-20-the-zen-of-python&#34;&gt;PEP 20 &amp;ndash; The Zen of Python&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.python.org/dev/peps/pep-0020/&#34; target=&#34;_blank&#34;&gt;the PEP20&lt;/a&gt;, the zen of python, with special attention to this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Explicit is better than implicit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: pep-20, pep, python, zen&lt;/p&gt;

&lt;h2 id=&#34;why-i-switched-from-octopress-2-to-hugo&#34;&gt;Why I switched from Octopress 2 to Hugo&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://conscientiousprogrammer.com/blog/2015/05/31/why-i-switched-from-octopress-2-to-hugo/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Franklin Chen on the change he made on the static site generator (SSG) he used. He considered hakyll, octopress, jekyll, hugo. Was decided between hakyll and hugo for their speed but, finally, decided to use hugo for their bigger community.&lt;/p&gt;

&lt;p&gt;Tags: franklin-chen, comparison, ssg, static-site-generator, hakyll, octopress, jekyll, hugo, change, speed, statically-typed, dynamically-typed, golang, performance&lt;/p&gt;

&lt;h2 id=&#34;why-incremental-regeneration-in-jekyll-3-0-is-such-a-big-deal&#34;&gt;Why incremental regeneration in Jekyll 3.0 is such a big deal&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://idratherbewriting.com/2015/11/04/jekyll-30-released-incremental-regeneration-rocks/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tom Johnson on one of the new features that jekyll 3.0 brings: incremental generation. How this can speed up the generation&lt;/p&gt;

&lt;p&gt;Tags: tom-johnson, incremental-generation, speed, performance, octopress-2, octopress-3, jekyll-3&lt;/p&gt;

&lt;h2 id=&#34;hugo-s3-travis-ci-oh-boy&#34;&gt;Hugo, S3, Travis CI, oh boy!&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://continuousfailure.com/post/s3_blog/&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; by Alan Scherger on how to set up a specific stack for developing and deploying a static site blog.&lt;/p&gt;

&lt;p&gt;Tags: alan-scherger, static-site-generator, ssg, travis, hugo, s3&lt;/p&gt;

&lt;h2 id=&#34;deploy-your-blog-to-github-pages-automatically-using-hugo-and-travis&#34;&gt;Deploy your blog to github pages automatically using Hugo and Travis&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://rcoedo.com/post/hugo-static-site-generator/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Roman Coedo on how to deploy a hugo blog to github pages, using travis.&lt;/p&gt;

&lt;p&gt;Tags: roman-coedo, travis, hugo, github, github-pages, ssg, static-site-generator&lt;/p&gt;

&lt;h2 id=&#34;improve-octopress-with-advanced-tweaks-tips&#34;&gt;Improve Octopress with Advanced Tweaks &amp;amp; Tips&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.narga.net/improve-octopress-advanced-tweaks-tips/&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of tips on how to improve the octopress (2) installation. By Nguyễn Đình Quân.&lt;/p&gt;

&lt;p&gt;Tags: nguyen-dinh-quan, octopress-2, tip, tweak&lt;/p&gt;

&lt;h2 id=&#34;laboratorios&#34;&gt;Laboratorios&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.presionblogosferica.com/2014/11/12/laboratorios/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ángel Medinilla, about laboratories to use a percentage of company time to investigate, innovate, learn and improve.&lt;/p&gt;

&lt;p&gt;Tags: angel-medinilla, team-management, time-management, innovation, strategy, improvement, kaizen, laboratory, craftsmanship, spanish&lt;/p&gt;

&lt;h2 id=&#34;what-refactoring-is-and-what-it-isn-t&#34;&gt;What Refactoring is, and what it isn’t&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://swreflections.blogspot.com/2012/04/what-refactoring-is-and-what-it-isnt.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jim Bird, where he splits some practices into refactoring and not refactoring. Draws the line between these two different activities.&lt;/p&gt;

&lt;p&gt;Also cites scratch refactoring.&lt;/p&gt;

&lt;p&gt;Tags: jim-bird, scratch-refactoring, refactoring, martin-fowler, kent-beck, definition, quote, design&lt;/p&gt;

&lt;h2 id=&#34;pitfalls-of-unlimited-vacations&#34;&gt;Pitfalls of Unlimited Vacations&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://haacked.com/archive/2016/02/18/unlimited-vaction-pitfalls/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Phil Haack on the github, travis and netflix policies about unlimited vacations and the effects they have on the employees.&lt;/p&gt;

&lt;p&gt;Also about minimum vacation periods, (paternity) paid leave.&lt;/p&gt;

&lt;p&gt;Tags: phil-haack, unlimited-vacation, holiday, vacation, team-management, burnout, github, travis, netflix, policy&lt;/p&gt;

&lt;h2 id=&#34;cultura-corporativa&#34;&gt;Cultura Corporativa&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.presionblogosferica.com/2011/02/06/cultura-corporativa/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ángel Medinilla about the corporate culture, and how &amp;ldquo;hanging a highly interchangeable sentence on a wall&amp;rdquo; does not represent it.&lt;/p&gt;

&lt;p&gt;Tags: angel-medinilla, corporate culture, spanish&lt;/p&gt;

&lt;h2 id=&#34;what-it-s-really-like-to-learn-to-code&#34;&gt;What It’s Really Like to Learn to Code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@sandjar/what-it-s-really-like-to-learn-to-code-53f6d9156a32&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains firsthand how it is to learn programming for a novice student,even with a strong financial background and having completed a university degree. By Sandjar Kozubaev&lt;/p&gt;

&lt;p&gt;Tags: sandjar-kozubaev, learning, programming, student, firsthand, coding, story&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Searching on a suite of failing tests</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/13/searching-on-a-suite-of-failing-tests/</link>
      <pubDate>Thu, 13 Aug 2015 16:45:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/13/searching-on-a-suite-of-failing-tests/</guid>
      <description>

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Today, at a client, in the green phase, we had a test suite which was failing: the whole suite fails but the test cases, individually, succeed.&lt;/p&gt;

&lt;p&gt;So my first impression was that something was being shared between tests. Also confirmed because the failing class was an EndToEnd test, in which we load the whole spring context&lt;/p&gt;

&lt;p&gt;A quick glance was not revealing anything interesting, so I decided to find which is the minimum suite (as opposed as to the whole suite) that makes the new testcase fail, expecting to narrow the search for possible causes. This is very similar to what QuickCheck does, to generate the minimum testcase that breaks your property. In this way, you can focus in a possibly simpler&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; feature.&lt;/p&gt;

&lt;p&gt;This post covers how to perform this search.&lt;/p&gt;

&lt;h2 id=&#34;mathematical-formulation&#34;&gt;Mathematical formulation&lt;/h2&gt;

&lt;p&gt;Let &lt;code&gt;T&lt;/code&gt; be a sequence of tests: &lt;code&gt;i1, i2, ..., in, F, j1, j2, ..., jm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; are green tests&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F&lt;/code&gt; is first failing test

&lt;ul&gt;
&lt;li&gt;when executed in isolation, is green&lt;/li&gt;
&lt;li&gt;when executed in the sequence, is red&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt; are tests after the failed test.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case, the order is important, as the failed test suite (presumably) comes from a shared state set by a previous test.&lt;/p&gt;

&lt;p&gt;The first search-space pruning is to remove the &lt;code&gt;j&lt;/code&gt;, as they supposedly don&amp;rsquo;t have any effect (as they are after the failed test)&lt;/p&gt;

&lt;p&gt;let &lt;code&gt;T1&lt;/code&gt; be a subsequence of &lt;code&gt;T&lt;/code&gt; that includes &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt;: &lt;code&gt;i1, i2, ..., in, F&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then it is assumed that one (or more) of the &lt;code&gt;i&lt;/code&gt; generates an inconsistent state that makes &lt;code&gt;F&lt;/code&gt; fail.&lt;/p&gt;

&lt;p&gt;In the sequence &lt;code&gt;T1&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt; fails, but in the sequence &lt;code&gt;TF&lt;/code&gt; composed by &lt;code&gt;F&lt;/code&gt; only, the test succeeds. This can be thought as the equivalent of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Intermediate_value_theorem&#34; target=&#34;_blank&#34;&gt;Intermediate value theorem&lt;/a&gt;, also called Bolzano&amp;rsquo;s theorem, where the &lt;code&gt;T1&lt;/code&gt; is at one side ot the axis and the &lt;code&gt;TF&lt;/code&gt; at another. The theorem proves that there must be at least one value where the domain of the function crosses the axis&lt;/p&gt;

&lt;p&gt;I say &amp;ldquo;thought of&amp;rdquo; because that theorem is only for continous functions and sets are not (are discrete) but the analogy is good enough: if one sequence is OK but the other isn&amp;rsquo;t, there must be a minimum sequence where the result is OK and another one where the results are not. They two sequences must not be the same case as one result cannot be OK and not OK at the same time.&lt;/p&gt;

&lt;h2 id=&#34;naïve-search&#34;&gt;Naïve search&lt;/h2&gt;

&lt;p&gt;The first way of searching would be find the minimum set that fails:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;include &lt;code&gt;F&lt;/code&gt;, then another from &lt;code&gt;i1,...,in&lt;/code&gt; that makes the &lt;code&gt;F&lt;/code&gt; fail. &lt;code&gt;F&lt;/code&gt; the last one, because it needs to be affected by the side effects from the preceding test.&lt;/li&gt;
&lt;li&gt;if the first strategy does not work, for each of the above cases, add another from the &lt;code&gt;i1,...,in&lt;/code&gt; (except the one that was added)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the first step, it takes &lt;code&gt;O(n * 2)&lt;/code&gt;, assuming executing a single test costs &lt;code&gt;O(1)&lt;/code&gt;. Reduces to &lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the second step, &lt;code&gt;O(n * n-1 * 3)&lt;/code&gt;. Reduces to &lt;code&gt;O(n^2)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the third step, &lt;code&gt;O(n * n-1 * n-2 * 4)&lt;/code&gt;. Reduces to &lt;code&gt;O(n^3)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the nth step, it costs &lt;code&gt;O(n * n-1 * n-2 * ... * n-(n-1) * (n+1))&lt;/code&gt;. Reduces to &lt;code&gt;O(n^n)&lt;/code&gt;. Which is polynomical but not feasible for medium-sized &lt;code&gt;n&lt;/code&gt; (in an automatic fashion) or small &lt;code&gt;n&lt;/code&gt; (in a manual fashion)&lt;/p&gt;

&lt;h2 id=&#34;dichotomous-search&#34;&gt;Dichotomous search&lt;/h2&gt;

&lt;p&gt;(This is also known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Binary_search_algorithm&#34; target=&#34;_blank&#34;&gt;binary search&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Inspired by &lt;code&gt;git-bisect&lt;/code&gt;, I decided to treat the sequence &lt;code&gt;i1, ..., in&lt;/code&gt; as the source for the dicotomical search, applying the subsequences to &lt;code&gt;F&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first step, it takes &lt;code&gt;O(n/2 * n/2)&lt;/code&gt; = &lt;code&gt;O(n^2)&lt;/code&gt; to execute half the tests&lt;/p&gt;

&lt;p&gt;The second step, is to execute half the number of the tests previously executed, either from the sequence before (if the &lt;code&gt;F&lt;/code&gt; fails) or from the other half (if &lt;code&gt;F&lt;/code&gt; does not fail). The cost is &lt;code&gt;O(n/4 * n/4)&lt;/code&gt; = &lt;code&gt;O(n^2)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the nth step, the cost is &lt;code&gt;O(n/2^n * n/2^n)&lt;/code&gt; = &lt;code&gt;O(n^2/2^n)&lt;/code&gt; = &lt;code&gt;O(0)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This n in the nth step is smaller than the other n, as each step divides by two the amount of tests to be included.&lt;/p&gt;

&lt;p&gt;The amount of tests to be executed is &lt;code&gt;n + n/2 + n/4 + n/8 + ... + 1&lt;/code&gt; which is roughly &lt;code&gt;2n&lt;/code&gt;. Executing each test costs &lt;code&gt;O(1)&lt;/code&gt; (by the assumption before), so the total cost is &lt;code&gt;O(2n)&lt;/code&gt; = &lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If we take it by the amount of steps we need to manually execute is 1 for the whole, 1 for the half, 1 for the quarter, &amp;hellip;. = &lt;code&gt;O(log2 n)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;procedure&#34;&gt;Procedure&lt;/h2&gt;

&lt;p&gt;To keep the executed tests, I created a support branch where I deleted the tests that were selected to be excluded. Always executed &amp;ldquo;all tests in the suite&amp;rdquo; as this makes it faster to select in the IDE.&lt;/p&gt;

&lt;p&gt;When the half taken was wrong, I reverted the last commit and selected the other half.&lt;/p&gt;

&lt;p&gt;After finding the minimum sequence and solving the issue, this support branch was discarded&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In the real scenario, with around 100 tests, searching manually in the naïve way would not have been possible. It would have cost 100 steps, as the minimum set that produces &lt;code&gt;F&lt;/code&gt; had size 2 (so only one step was necessary).&lt;/p&gt;

&lt;p&gt;Applying the dichotomous search, in 8-10 steps I had finished, with the guarantee that no matter how many tests produced the &lt;code&gt;F&lt;/code&gt; I would have found it in a reasonable amount of time.&lt;/p&gt;

&lt;h2 id=&#34;comments&#34;&gt;Comments&lt;/h2&gt;

&lt;p&gt;Finally, the root cause for the failing test &lt;code&gt;F&lt;/code&gt; was the OrientDB InMemory implementation with Spring context, as the former does not allow two instances at the same time in the same JVM.&lt;/p&gt;

&lt;p&gt;It was solved using &lt;code&gt;@DirtiesContext&lt;/code&gt; in both cases of the minimum sequence that forms &lt;code&gt;F&lt;/code&gt;, so no matter which order the executor decides, the context will always be clean for the next execution.&lt;/p&gt;

&lt;p&gt;We found this thanks to a teammate&amp;rsquo;s intuition.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Because maybe the minimum testcase is more difficult than another.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Annotations and Aspects in Java</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/21/annotations-and-aspects-in-java/</link>
      <pubDate>Tue, 21 Apr 2015 07:23:23 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/21/annotations-and-aspects-in-java/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve written a sample project with an annotation and an aspect to intercept it and decorate it.&lt;/p&gt;

&lt;p&gt;The code provides a way of doing &lt;code&gt;try|catch&lt;/code&gt;, specifying an exception to be caught.&lt;/p&gt;

&lt;p&gt;The source code is available &lt;a href=&#34;https://github.com/alvarogarcia7/annotation-aspect-java&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;in-the-process&#34;&gt;In the process&lt;/h2&gt;

&lt;p&gt;This has taken me approximately one hour to prepare the spike and half more to refactor and massage a bit.&lt;/p&gt;

&lt;p&gt;If you want to see the raw details, the refactor has been committed step by step (the spike hasn&amp;rsquo;t). The unmassaged code can be found &lt;a href=&#34;https://github.com/alvarogarcia7/annotation-aspect-java/tree/d5e61ca56a38b1611c9acaa61a2e169b14d19d1e&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. The massaged version is at the &lt;a href=&#34;https://github.com/alvarogarcia7/annotation-aspect-java/&#34; target=&#34;_blank&#34;&gt;tip of the arrow&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;more-information&#34;&gt;More information&lt;/h2&gt;

&lt;p&gt;Regarding &lt;code&gt;annotations&lt;/code&gt; (like @Override):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/annotations/&#34; target=&#34;_blank&#34;&gt;This official article&lt;/a&gt; on annotations is useful.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vogella.com/tutorials/JavaAnnotations/article.html&#34; target=&#34;_blank&#34;&gt;This article&lt;/a&gt; by Lars Vogel guides you step by step.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tutorials.jenkov.com/java/annotations.html&#34; target=&#34;_blank&#34;&gt;This article&lt;/a&gt; by Jakov Jenkov is very nice.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crunchify.com/understanding-java-annotation-annotation-examples/&#34; target=&#34;_blank&#34;&gt;This article&lt;/a&gt; helps you to understand what an annotation is and what to use it for.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regarding &lt;code&gt;aspect&lt;/code&gt; (based on AspectJ):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/14714092/spring-3-2-aop-intercepting-methods-by-annotation&#34; target=&#34;_blank&#34;&gt;This question&lt;/a&gt; has been my main source of information / inspiration for the spring + aspectj configuration
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;One of the drawbacks that I find to common examples or tutorials is that they&amp;rsquo;re not complete. They show you part of the information, but not the whole. While this helps most of the readers, there are library incompatibilities, defects, specific versions, etc. This is why I like to post the whole solution, including &lt;code&gt;pom.xml&lt;/code&gt; (dependencies) and tests.&lt;/p&gt;

&lt;p&gt;Having less documentation for developers can be acceptable if you have tests / more tests; of course, as long as other developers can follow your thought while developing.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>