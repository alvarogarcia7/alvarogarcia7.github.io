<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/script/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/script/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in June 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/06/01/self-study-june-2019/</link>
      <pubDate>Sat, 01 Jun 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/06/01/self-study-june-2019/</guid>
      <description>

&lt;h2 id=&#34;h0p3-s-wiki-https-philosopher-life-root-root-20-5b-5blegal-20notice-5d-5d&#34;&gt;&lt;a href=&#34;https://philosopher.life/#Root:Root%20%5B%5BLegal%20Notice%5D%5D&#34; target=&#34;_blank&#34;&gt;(h0p3&amp;rsquo;s Wiki)&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This is a highly customized tiddlyWiki, from h0p3.&lt;/p&gt;

&lt;p&gt;Tags: wiki, personal-knowledge-base, h0p3&lt;/p&gt;

&lt;p&gt;Id: b8b3d973-9611-4180-854a-0242ac110003
Read: Fri, 7 Jun 2019 13:20:26 +0000&lt;/p&gt;

&lt;h2 id=&#34;debug-bash-scripts-https-gist-github-com-potherca-4f4ce1c8d4bcf4cd4aab&#34;&gt;&lt;a href=&#34;https://gist.github.com/Potherca/4f4ce1c8d4bcf4cd4aab&#34; target=&#34;_blank&#34;&gt;Debug bash scripts&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This article explains how to debug bash scripts using the DEBUG trap.&lt;/p&gt;

&lt;p&gt;Declares several log levels for the commands&lt;/p&gt;

&lt;p&gt;Tags: debug, bash, trap, help, script&lt;/p&gt;

&lt;p&gt;Id: 39f76af4-99ce-48b6-adc1-0242ac110003
Read: Fri, 7 Jun 2019 13:20:26 +0000&lt;/p&gt;

&lt;h2 id=&#34;understanding-rust-lifetimes-https-medium-com-nearprotocol-understanding-rust-lifetimes-e813bcd405fa&#34;&gt;&lt;a href=&#34;https://medium.com/nearprotocol/understanding-rust-lifetimes-e813bcd405fa&#34; target=&#34;_blank&#34;&gt;Understanding Rust Lifetimes&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Describes rust lifetimes, lifetime parameters.&lt;/p&gt;

&lt;p&gt;Compares them to C++ pointers (in the sense they are difficult to learn, but make things explicit).&lt;/p&gt;

&lt;p&gt;Tags: rust, borrowing-rules, pointer, language, comparison, generic, lifetime, lifetime-parameter, maksym-zavershynskyi, compiler, language-feature, variance, covariance, struct, rustonomicon&lt;/p&gt;

&lt;p&gt;Id: 2e14ae3e-8ec0-11e9-be23-0242ac110003
Read: Fri, 14 Jun 2019 16:19:26 +0000&lt;/p&gt;

&lt;h2 id=&#34;everything-you-need-to-know-about-pointers-in-c-https-boredzo-org-pointers&#34;&gt;&lt;a href=&#34;https://boredzo.org/pointers/&#34; target=&#34;_blank&#34;&gt;Everything you need to know about pointers in C&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Explains pointers in C&lt;/p&gt;

&lt;p&gt;Tags: c, programming-language, pointer, peter-hosey, language-feature, string, pointer-arithmetic, function-pointer&lt;/p&gt;

&lt;p&gt;Id: ddc39078-8ed6-11e9-85bc-0242ac110003
Read: Fri, 14 Jun 2019 19:01:50 +0000&lt;/p&gt;

&lt;h2 id=&#34;how-to-do-distributed-locking-https-martin-kleppmann-com-2016-02-08-how-to-do-distributed-locking-html&#34;&gt;&lt;a href=&#34;https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html&#34; target=&#34;_blank&#34;&gt;How to do distributed locking&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This article explains the usage of locks (for efficiency - optimization / for correctness).&lt;/p&gt;

&lt;p&gt;Explains the usage of the &amp;ldquo;Redlock&amp;rdquo; algorithm, to perform distributed locks. Explains a fencing mechanism (using tokens).&lt;/p&gt;

&lt;p&gt;References monotonic clocks, stop-the-world garbage collection, consensus mechanisms.&lt;/p&gt;

&lt;p&gt;Uses good diagrams for parallelism and concurrency.&lt;/p&gt;

&lt;p&gt;Tags: lock, efficiency, correctness, redlock, redlock-algorithm, consensus, distributed-consensus, distributed-programming, distributed-lock, martin-kleppmann, parallellism, concurrency, fencing-mechanism, monotonic-clock, stop-the-world, garbage-collection&lt;/p&gt;

&lt;p&gt;Id: a1165c1e-9719-11e9-bf0b-0242ac110003
Read: Tue, 25 Jun 2019 07:19:54 +0000&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing safe(r) bash scripts</title>
      <link>https://alvarogarcia7.github.io/blog/2018/07/13/writing-safe-bash-scripts/</link>
      <pubDate>Fri, 13 Jul 2018 07:03:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/07/13/writing-safe-bash-scripts/</guid>
      <description>

&lt;p&gt;After writing more and more bash scripts for a client, I&amp;rsquo;ve decided to write down my thoughts about it.&lt;/p&gt;

&lt;p&gt;This assumes you have some knowledge about bash, as it is not intended as a beginner&amp;rsquo;s tutorial.&lt;/p&gt;

&lt;h2 id=&#34;why-bash-scripts&#34;&gt;Why bash scripts?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bash is present in almost every unix/linux-based stack, now some Windows as well. An exception is the &amp;lsquo;alpine&amp;rsquo; docker images, which have a smaller, lighter shell (more on that later)&lt;/li&gt;
&lt;li&gt;Everything that you can automate, you can do from bash. Bash forces you to create a (first?) client for your application and see how the integration is from the user&amp;rsquo;s perspective&lt;/li&gt;
&lt;li&gt;Testing your application from bash forces you to treat your application as a black-box (e.g., different technology, no shared state, no access to internals)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;using-a-safe-bash-subset-sh&#34;&gt;Using a safe bash subset: sh&lt;/h3&gt;

&lt;p&gt;This is useful for &amp;lsquo;alpine&amp;rsquo; docker images, as some alpine do not include bash.&lt;/p&gt;

&lt;p&gt;The more general you need your script to be, the more you should prefer sh rather than bash. A source of generality can be making your script public (publish it), executing it under multiple environments, making it the installer for other tools, etc.&lt;/p&gt;

&lt;h2 id=&#34;tips&#34;&gt;Tips&lt;/h2&gt;

&lt;h3 id=&#34;temporary-files&#34;&gt;Temporary files&lt;/h3&gt;

&lt;p&gt;Do not assume that the current directory is the place for writing temporary files (or any file, for that matter).&lt;/p&gt;

&lt;p&gt;For temporary files, use &lt;code&gt;mktemp&lt;/code&gt;, and for directories &lt;code&gt;mktemp -d&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ man mktemp
MKTEMP(1)                 BSD General Commands Manual                MKTEMP(1)

NAME
     mktemp -- make temporary file name (unique)

DESCRIPTION
     The mktemp utility takes each of the given file name templates and over-
     writes a portion of it to create a file name.  This file name is unique
     and suitable for use by the application.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(remember to cleanup resources when your script exists - maybe use exit traps)&lt;/p&gt;

&lt;h3 id=&#34;exit-traps&#34;&gt;(Exit) Traps&lt;/h3&gt;

&lt;p&gt;There are some resources that you need to remove / cleanup / close at the end of your script. Both when things go well as when they don&amp;rsquo;t. Think of it as a (java) try-with-resources or try..catch..finally.&lt;/p&gt;

&lt;p&gt;Bash offers &lt;a href=&#34;https://www.gnu.org/software/bash/manual/bash.html#Bourne-Shell-Builtins&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;trap&lt;/code&gt;&lt;/a&gt; to perform this task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;trap arg signal
trap command signal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Taken from &lt;a href=&#34;https://bash.cyberciti.biz/guide/Trap_statement&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function finish {
  # Your cleanup code here
}
trap finish EXIT
trap finish SIGQUIT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More information, and this example from &lt;a href=&#34;http://redsymbol.net/articles/bash-exit-traps/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;do-not-hardcode-the-shell-location&#34;&gt;Do not hardcode the shell location&lt;/h3&gt;

&lt;p&gt;This is more common with perl than with bash, as most bash installs are placed at &lt;code&gt;/bin/bash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can use &lt;code&gt;/usr/bin/env bash&lt;/code&gt; / &lt;code&gt;/usr/bin/env sh&lt;/code&gt; to spawn a shell.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash

#rest of commands
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;options-for-executing-header&#34;&gt;Options for executing / Header&lt;/h3&gt;

&lt;p&gt;add these options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set -euxo pipefail
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These can be added anywhere, but I usually add them after the shebang (the beginning of the script)&lt;/p&gt;

&lt;p&gt;Reference: &lt;a href=&#34;https://www.gnu.org/software/bash/manual/bash.html#The-Set-Builtin&#34; target=&#34;_blank&#34;&gt;The set built-in&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another reference: the inspiration for these options comes from &lt;a href=&#34;https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;a brief note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set -e&lt;/code&gt; stops the execution if a command fails (this is the default behavior in &lt;code&gt;make&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set -u&lt;/code&gt;: Treat unset variables and parameters other than the special parameters ‘@’ or ‘*’ as an error when performing parameter expansion. An error message will be written to the standard error, and a non-interactive shell will exit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set -x&lt;/code&gt;: debug. Trace the commands on the console&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set -o pipefail&lt;/code&gt;: make the pipe command fail if any of the commands in the pipe fail.

&lt;ul&gt;
&lt;li&gt;Example: with this option disabled, &lt;code&gt;a|b|c&lt;/code&gt; when &lt;code&gt;a&lt;/code&gt; fails, b will execute, the return value will be the one of &lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Example: with this option enabled, &lt;code&gt;a|b|c&lt;/code&gt; when &lt;code&gt;a&lt;/code&gt; fails, &lt;code&gt;b&lt;/code&gt; will not execute, the return value will be the one of &lt;code&gt;a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to use a try&amp;hellip;catch pattern, disable &lt;code&gt;-e&lt;/code&gt; temporarily:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set +e # 1
ls NON_EXISTING_FILE # 2
set -e # 3
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;1: Disable error-checking. Note this is a plus (+) sign&lt;/li&gt;
&lt;li&gt;2: a command that could fail. As the error checking is disabled, the execution continues even if 2 throws an error. Therefore, the exception is swallowed.&lt;/li&gt;
&lt;li&gt;3: Enable error-checking again&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;debugging&#34;&gt;Debugging&lt;/h3&gt;

&lt;h4 id=&#34;enable-tracing-debugging-mode&#34;&gt;Enable tracing / debugging mode&lt;/h4&gt;

&lt;p&gt;I usually make my bash scripts as simple as possible (see Limitations), but even then, they fail often while building them.&lt;/p&gt;

&lt;p&gt;For that reason, you can enable the &amp;lsquo;debug&amp;rsquo; option permanently:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Inside the script
set -x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or just for one invocation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# When invoking the script
bash -x myscript.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: your script will get the parameters in the same fashion as if executing &lt;code&gt;./myscript.sh&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat myscript.sh
echo $1
$ ./myscript.sh 1
1
$ bash -x myscript.sh 1
+ echo 1
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;dry-run-while-building-the-script&#34;&gt;Dry-run while building the script&lt;/h4&gt;

&lt;p&gt;A common pattern I use while building scripts is to prepare the command but do not execute it yet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
# prepare options, decide what to do
echo COMMAND_WITH_SIDE_EFFECTS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I am sure that this is the desired command, usually after trying it manually on the console, I can remove the &lt;code&gt;echo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
# prepare options, decide what to do
COMMAND_WITH_SIDE_EFFECTS
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;dry-run-as-another-switch&#34;&gt;Dry-run as another switch&lt;/h4&gt;

&lt;p&gt;You can use the previous pattern but as a feature of your script:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accept &amp;lsquo;-n / &amp;ndash;dry-run&amp;rsquo; (or similar)&lt;/li&gt;
&lt;li&gt;When the switch is enabled, it prepends &lt;code&gt;echo&lt;/code&gt; to your final command&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;COMMAND=&amp;quot;rm -rf ./.git&amp;quot;
if [ $DRY_RUN ]; then
  COMMAND=&amp;quot;echo $COMMAND&amp;quot;
fi

$COMMAND
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;verbosity-levels-and-other-modes&#34;&gt;Verbosity levels and other modes&lt;/h3&gt;

&lt;p&gt;When some scripts grow in size and are not a script but an application, being more or less verbose is useful.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;curl&lt;/code&gt; as an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl localhost:8080
curl: (7) Failed to connect to localhost port 8080: Connection refused
$ curl -vvv localhost:8080
* Rebuilt URL to: localhost:8080/
*   Trying ::1...
* connect to ::1 port 8080 failed: Connection refused
*   Trying fe80::1...
* connect to fe80::1 port 8080 failed: Connection refused
*   Trying 127.0.0.1...
* connect to 127.0.0.1 port 8080 failed: Connection refused
* Failed to connect to localhost port 8080: Connection refused
* Closing connection 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Same with quiet mode, a mode to reduce verbosity.&lt;/p&gt;

&lt;p&gt;Same with &amp;lsquo;raw&amp;rsquo; mode, a mode to only print the raw output, maybe for consumption from another script.&lt;/p&gt;

&lt;h3 id=&#34;using-quotes&#34;&gt;Using quotes&lt;/h3&gt;

&lt;p&gt;Imagine a script that prints the first, second, and third received parameter, then all of them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat myscript.sh
echo &amp;quot;first=$1 second=$2 third=$3; all=$@&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The normal invocation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./myscript.sh 1 2 3
first=1 second=2 third=3; all=1 2 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(everything works as expected)&lt;/p&gt;

&lt;p&gt;now let&amp;rsquo;s try strings (with spaces)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./myscript.sh hello world
first=hello second=world third=; all=hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, bash uses spaces to delimit words. Now that we know this, lets be careful.&lt;/p&gt;

&lt;p&gt;We want to process some files (with spaces):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls file*
file 1.txt file 2.txt
$ ./myscript.sh $(ls file*)
first=file second=1.txt third=file; all=file 1.txt file 2.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A defect appeared: I want &amp;ldquo;file 1.txt&amp;rdquo; to be a parameter, not two.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s imagine a script checking whether a file exists:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat file_exists.sh
if [ -e $1 ]; then # -e is for file exists; see `man test`
  echo &amp;quot;file $1 exists&amp;quot;
else
  echo &amp;quot;file $1 does not exist&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ls file*
file 1.txt     file 2.txt     file_exists.sh
$ ./file_exists.sh &amp;quot;file 1.txt&amp;quot;
./file_exists.sh: line 1: [: file: binary operator expected
file file 1.txt does not exist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s add quotes to the test to make it work with spaces:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat file_exists.sh
if [ -e &amp;quot;$1&amp;quot; ]; then # note the quotes
  echo &amp;quot;file $1 exists&amp;quot;
else
  echo &amp;quot;file $1 does not exist&amp;quot;
fi
$ ./file_exists.sh &amp;quot;file 1.txt&amp;quot;
file file 1.txt exists
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In general, be careful with spaces, as they mark the end of the string / parameter. Be proactive with quoting. From the &lt;a href=&#34;https://google.github.io/styleguide/shell.xml&#34; target=&#34;_blank&#34;&gt;google bash guide&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Always quote strings containing variables, command substitutions, spaces or shell meta characters, unless careful unquoted expansion is required.&lt;/li&gt;
&lt;li&gt;Prefer quoting strings that are &amp;ldquo;words&amp;rdquo; (as opposed to command options or path names).&lt;/li&gt;
&lt;li&gt;Never quote literal integers.&lt;/li&gt;
&lt;li&gt;Be aware of the quoting rules for pattern matches in [[.&lt;/li&gt;
&lt;li&gt;Use &amp;ldquo;$@&amp;rdquo; unless you have a specific reason to use $*.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single quote does not interpolate: &lt;code&gt;&#39;$PATH&#39; is literally $PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Double quotes interpolate: &lt;code&gt;&amp;quot;$PATH&amp;quot; is the contents of the variable $PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If possible, try having spaces in the files you produce. It makes life much simpler.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;solid&#34;&gt;SOLID&lt;/h3&gt;

&lt;p&gt;If your script is a one-off thing, or will not suffer churn/modification, then feel free to discard this tip. On the other hand, if this script will be part of a critical path (e.g., deploying) or will be modified in the future, try to apply the SOLID principles that we apply for other pieces of software.&lt;/p&gt;

&lt;p&gt;Especially the SRP (below)&lt;/p&gt;

&lt;h3 id=&#34;single-responsibility-principle-srp&#34;&gt;Single Responsibility Principle (SRP)&lt;/h3&gt;

&lt;p&gt;I like to design my scripts by separating concerns or responsibilities.&lt;/p&gt;

&lt;p&gt;One typical example: process many files at once:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat s1.sh
#!/usr/bin/env bash

function find_files {
   while IFS= read -r -d &#39;&#39; file; do
       files+=( &amp;quot;$file&amp;quot; )
   done &amp;lt; &amp;lt;(find . -maxdepth 1 -type f -iname &amp;quot;file*.txt&amp;quot; -print0)
}

function process_file {
  file=&amp;quot;$1&amp;quot;
  echo &amp;quot;Will write to file $file&amp;quot;
}

function main {
  declare -a files # this is a global variable inside the script
  find_files
  for file in &amp;quot;${files[@]}&amp;quot;; do
    process_file &amp;quot;$file&amp;quot;
  done
}

main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main benefit is that iterating the files is something that usually does not fail (just copy paste the script), while the main work is done in &lt;code&gt;process_file&lt;/code&gt;. The two functions have different pace of change, therefore two responsibilities. The latter, I can test manually (on the REPL) until it works, then copy-paste the script (see &amp;lsquo;How I write my scripts&amp;rsquo;).&lt;/p&gt;

&lt;p&gt;Its execution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls file*
file1.txt file2.txt
$ ./s1.sh
Will write to file ./file1.txt
Will write to file ./file2.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on return values and functions in bash, see &lt;a href=&#34;https://www.linuxjournal.com/content/return-values-bash-functions&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hot-swap-reload&#34;&gt;Hot-swap / reload&lt;/h3&gt;

&lt;p&gt;Files in bash are read every time you invoke them. So if you separate the &lt;code&gt;process_file&lt;/code&gt; function to another file, you can change the contents of it while the long-running main script is working.&lt;/p&gt;

&lt;h3 id=&#34;be-extra-careful-with-rm&#34;&gt;Be extra careful with &lt;code&gt;rm&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is common knowledge, but it can happen to any of us.&lt;/p&gt;

&lt;p&gt;Removing files is a sharp-edged tool, such as &lt;code&gt;DELETE&lt;/code&gt; in SQL. This is why we &lt;code&gt;SELECT&lt;/code&gt; the same data set before deleting. Why we &lt;code&gt;ls&lt;/code&gt; files before &lt;code&gt;rm&lt;/code&gt;ing them.&lt;/p&gt;

&lt;p&gt;Some operating systems now protect &lt;code&gt;#rm -rf /&lt;/code&gt; with another flag, but the mistake of &lt;code&gt;#rm -rf $VARIABLE/*&lt;/code&gt; where &lt;code&gt;$VARIABLE&lt;/code&gt; is empty is common enough.&lt;/p&gt;

&lt;p&gt;To avoid the above mistake,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/env/bin bash
set -euxo pipefail
cd $VARIABLE #this will fail if $VARIABLE is unbound
rm -rf ./* # notice the dot (.) before the star
cd - #go back to the previous folder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will only delete files from the current directory down (&lt;code&gt;./&lt;/code&gt;), yet another level of protection.&lt;/p&gt;

&lt;h3 id=&#34;static-code-analysis&#34;&gt;Static code analysis&lt;/h3&gt;

&lt;p&gt;Shell files can also be analyzed statically, (i.e., &lt;a href=&#34;https://en.wikipedia.org/wiki/Lint_(software)&#34; target=&#34;_blank&#34;&gt;lint&lt;/a&gt;). A tool for that is &lt;a href=&#34;https://www.shellcheck.net/&#34; target=&#34;_blank&#34;&gt;ShellCheck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Shellcheck helps you locate possible errors, bugs, stylistic errors and suspicious constructs in your scripts.&lt;/p&gt;

&lt;p&gt;The tool is large enough to warrant another article, but the basic usage is straightforward: run the linter with the shell script as input.&lt;/p&gt;

&lt;p&gt;Some example run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ shellcheck sh1.sh
In sh1.sh line 22:
  destination=${date}-$(basename $file)
                                 ^-- SC2086: Double quote to prevent globbing and word splitting.

In sh1.sh line 25:
  git add $file
          ^-- SC2086: Double quote to prevent globbing and word splitting.


In sh1.sh line 34:
  if [[ -z $(which imagemagick) ]]; then
             ^-- SC2230: which is non-standard. Use builtin &#39;command -v&#39; instead.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: I use the tool with docker (see &lt;a href=&#34;https://github.com/alvarogarcia7/shellcheck-docker&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://github.com/koalaman/shellcheck#installing&#34; target=&#34;_blank&#34;&gt;official docker image&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;how-i-write-my-scripts&#34;&gt;How I write my scripts&lt;/h2&gt;

&lt;p&gt;Usually, I design my scripts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the function &lt;code&gt;process_file&lt;/code&gt; to receive a single element (i.e., the function passed to &lt;code&gt;map&lt;/code&gt; / iterate). This is the hard part&lt;/li&gt;
&lt;li&gt;Create plumbing (either code or manual invocations), putting together the candidates with the other function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;example-1-a-long-lived-script&#34;&gt;Example 1: a long-lived script&lt;/h3&gt;

&lt;p&gt;This is a full example with code to plumb the candidate to the function.&lt;/p&gt;

&lt;p&gt;I want to remove all the existing files in a directory that are greater in size than 30 KB. (I know this can be done with &lt;code&gt;find -exec&lt;/code&gt; or &lt;code&gt;ls | xargs rm&lt;/code&gt;, this is just an example for arbitrary logic).&lt;/p&gt;

&lt;p&gt;First, on the REPL, find all the files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -lh file*
-rw-r--r--  1 user  group     0B Jul 13 00:50 file1.txt
-rw-r--r--  1 user  group     0B Jul 13 00:50 file2.txt
-rw-r--r--  1 user  group   531K Jul 13 00:07 file3.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find files greater than the desired size:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find . -maxdepth 1 -type f -iname &amp;quot;file*.txt&amp;quot; -size +30k -print0
./file3.txt%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;now, only need to delete the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function process_file {
  file=&amp;quot;$1&amp;quot;
  echo &amp;quot;rm $file&amp;quot; # 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: #1 - Notice the &lt;code&gt;echo&lt;/code&gt; command to protect the real execution&lt;/p&gt;

&lt;p&gt;First, I make sure that the plumbing code is all correct before executing commands with side effects (e.g., rm). If you are working with delicate data, you can consider working in a docker container.&lt;/p&gt;

&lt;p&gt;Then, remove the &amp;ldquo;temporary dry-run mode&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function process_file {
  file=&amp;quot;$1&amp;quot;
  rm $file
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The full script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat s2.sh
#!/usr/bin/env bash

function find_files {
   while IFS= read -r -d &#39;&#39; file; do
       files+=( &amp;quot;$file&amp;quot; )
   done &amp;lt; &amp;lt;(find . -maxdepth 1 -type f -iname &amp;quot;file*.txt&amp;quot; -size +30k -print0)
}

function process_file {
  file=&amp;quot;$1&amp;quot;
  rm $file
}

function main {
  declare -a files
  find_files
  for file in &amp;quot;${files[@]}&amp;quot;; do
    process_file &amp;quot;$file&amp;quot;
  done
}

main
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-2-a-one-off-script&#34;&gt;Example 2: a one-off script&lt;/h3&gt;

&lt;p&gt;This is a full example with a manual invocation to plumb the candidate to the function.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the function &lt;code&gt;process_file&lt;/code&gt; to receive a single element (i.e., the function passed to &lt;code&gt;map&lt;/code&gt; / iterate).&lt;/li&gt;
&lt;li&gt;Manually, I will list all files / candidates to a temporary file&lt;/li&gt;
&lt;li&gt;Review the candidates&lt;/li&gt;
&lt;li&gt;(with vim) turn the selected candidates into invocations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, on the REPL, find all the files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -lh file*
-rw-r--r--  1 user  group     0B Jul 13 00:50 file1.txt
-rw-r--r--  1 user  group     0B Jul 13 00:50 file2.txt
-rw-r--r--  1 user  group   531K Jul 13 00:07 file3.txt
-rw-r--r--  1 user  group   531K Jul 13 00:07 file_SUPER_IMPORTANT_DO_NOT_DELETE.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find files greater than the desired size:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find . -maxdepth 1 -type f -iname &amp;quot;file*.txt&amp;quot; -size +30k &amp;gt; candidates.txt
$ cat candidates.txt
./file3.txt
./file_SUPER_IMPORTANT_DO_NOT_DELETE.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, open vim to review, as a way of checking the valid candidates. This is the same process that &lt;code&gt;git rebase --interactive&lt;/code&gt; offers: a CLI command to rebase based on your editor.&lt;/p&gt;

&lt;p&gt;I realize that the file &lt;code&gt;file_SUPER_IMPORTANT_DO_NOT_DELETE.txt&lt;/code&gt; should not be deleted. So I remove that, manually.&lt;/p&gt;

&lt;p&gt;Now,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat candidates.txt
./file3.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then I prefer to edit the file manually than to create a script. Remember, this is a one-off effort. And programs need to be maintained. One-off scripts are to be thrown away, so no maintenance effort.&lt;/p&gt;

&lt;p&gt;Hint: the vim command &lt;code&gt;%s/^/rm /&lt;/code&gt; will insert at the beginning of the line the command &lt;code&gt;rm&lt;/code&gt; that we need. The command &lt;code&gt;%s/$/;/&lt;/code&gt; will append a semicolon at the end of the line. It&amp;rsquo;s not needed for this example, but as a reminder. This replacement can also be done with &lt;code&gt;sed&lt;/code&gt;/&lt;code&gt;awk&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat candidates.txt
rm ./file3.txt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, just execute this file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bash candidates.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And your files are processed. Gone, in this case.&lt;/p&gt;

&lt;h2 id=&#34;limitations&#34;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;Every tool (and metaphor) has its limits. Know when to use a tool and when to change tools.&lt;/p&gt;

&lt;h3 id=&#34;when-is-bash-enough&#34;&gt;When is bash enough&lt;/h3&gt;

&lt;p&gt;Small scripts, simple invocations, etc.&lt;/p&gt;

&lt;p&gt;One-off tasks are perfect for bash: write code, review effects, throw it away. Don&amp;rsquo;t plan on reusing it. Although you can keep a collection of snippets for iterating, dealing with spaces, etc.&lt;/p&gt;

&lt;p&gt;More than 50-100 bash lines (a rough approximation), I consider a small program already. Maybe start thinking on building a better foundation around it.&lt;/p&gt;

&lt;h3 id=&#34;when-it-is-too-much-for-bash&#34;&gt;When it is too much for bash&lt;/h3&gt;

&lt;h4 id=&#34;complex-multi-stage-scripts&#34;&gt;Complex/multi-stage scripts&lt;/h4&gt;

&lt;p&gt;With my current knowledge of bash, I feel that some jobs are not appropriate for bash. For example, when dealing with spaces in strings, arrays, complex functions, etc.&lt;/p&gt;

&lt;p&gt;For that, I prefer a more powerful language, ideally scripting (so I can get a quick feedback cycle.) I&amp;rsquo;ve been playing with Perl lately (works very well), Ruby in the past. I&amp;rsquo;ve heard good things about typescript and go as well.&lt;/p&gt;

&lt;p&gt;Perl works well for powerful scripts that don&amp;rsquo;t need to be tested.&lt;/p&gt;

&lt;p&gt;Ruby works well for programs (no longer scripts) that need to be tested.&lt;/p&gt;

&lt;h4 id=&#34;parameter-autocompletion&#34;&gt;Parameter autocompletion&lt;/h4&gt;

&lt;p&gt;For my build scripts, I enjoy hitting &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; for auto-completion of the goals. Bash does not offer that out of the box (but can be performed using &lt;a href=&#34;https://www.gnu.org/software/bash/manual/bash.html#Programmable-Completion&#34; target=&#34;_blank&#34;&gt;programmable completion&lt;/a&gt;). Make, on the other hand, offers goal autocompletion out of the box:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.PHONY: build
build:
    ./gradlew build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, I can &lt;code&gt;make b&amp;lt;TAB&amp;gt;&lt;/code&gt; and it will suggest &lt;code&gt;make build&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;other-resources&#34;&gt;Other resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shellcheck.net/&#34; target=&#34;_blank&#34;&gt;ShellCheck&lt;/a&gt; helps you check your shell scripts, using static analysis tools: ShellCheck is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/bash/manual/bash.html&#34; target=&#34;_blank&#34;&gt;Bash reference manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://google.github.io/styleguide/shell.xml&#34; target=&#34;_blank&#34;&gt;Google Bash reference guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Modifying titles in a Trello Board</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/16/modifying-titles-in-a-trello-board/</link>
      <pubDate>Thu, 16 Mar 2017 00:36:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/16/modifying-titles-in-a-trello-board/</guid>
      <description>

&lt;p&gt;A teammate and I have created a &lt;a href=&#34;https://github.com/alvarogarcia7/javascript-simple-sessions/tree/master/trello-cards&#34; target=&#34;_blank&#34;&gt;small tool to modify the titles of the trello card in a trello board&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;technical-description&#34;&gt;Technical description&lt;/h2&gt;

&lt;p&gt;It works by applying a function to the existing title (because we wanted to remove a prefix from the existing title).&lt;/p&gt;

&lt;p&gt;The modification is done, not through the API, but simulating user interaction:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click to edit the card&lt;/li&gt;
&lt;li&gt;Input the new title&lt;/li&gt;
&lt;li&gt;Save&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full code is available &lt;a href=&#34;https://github.com/alvarogarcia7/javascript-simple-sessions/tree/master/trello-cards&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This has been a great example of working with legacy code, as the tools to work with the existing product are not the ones you would like to have and an imaginative solution provides a way out of the tar pit.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in January 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</link>
      <pubDate>Fri, 01 Jan 2016 16:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</guid>
      <description>

&lt;h2 id=&#34;test-cases-in-inner-classes-with-junit&#34;&gt;Test cases in inner classes with JUnit&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/8758294/test-cases-in-inner-classes-with-junit&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt; in stackoverflow about nested test runners in JUnit&lt;/p&gt;

&lt;p&gt;Tags: junit, stackoverflow, answer, nested-runner&lt;/p&gt;

&lt;h2 id=&#34;recording-a-great-coding-screencast&#34;&gt;Recording a Great Coding Screencast&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://egghead.io/articles/recording-a-great-coding-screencast&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by John Lindquist where he explains how he sets up the recording environment for egghead.&lt;/p&gt;

&lt;p&gt;Tags: john-lindquist, record, screencast, egghead, code-screencast, record-video, video&lt;/p&gt;

&lt;h2 id=&#34;react-testing-course&#34;&gt;React Testing Course&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://egghead.io/lessons/react-testing-jsx-error-diffs&#34; target=&#34;_blank&#34;&gt;the full course&lt;/a&gt; by Trevor D. Miller on how to test react components and the libraries to make it possible.&lt;/p&gt;

&lt;p&gt;Tags: trevor-miller, online-course, screencast, mooc, react, flux, egghead&lt;/p&gt;

&lt;h2 id=&#34;what-is-functional-programming&#34;&gt;What Is Functional Programming?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jenkster.com/2015/12/what-is-functional-programming.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kris Jenkins where the author describes functional programming from an input &amp;amp; output point of view.&lt;/p&gt;

&lt;p&gt;Describes state of the system (maybe global or local) is input &amp;amp; output of the function&lt;/p&gt;

&lt;p&gt;Produced state changes are called side effects. the author calls the state inputs as &amp;ldquo;side causes&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Side effects and causes are called complexity iceberg, as they are not visible under the water level (surface)&lt;/p&gt;

&lt;p&gt;Also what a pure function is: one with no side causes or side effects; e.g., all its inputs are declared inputs (i.e., parameters) and all outputs are declared outputs (i.e., return value).&lt;/p&gt;

&lt;p&gt;notes on jobbing programmer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.safaribooksonline.com/library/view/becoming-a-better/9781491905562/ch32.html&#34; target=&#34;_blank&#34;&gt;at Becoming a Better Programmer&lt;/a&gt;, by Pete Goodliffe&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://books.google.es/books?id=P-09CgAAQBAJ&amp;amp;pg=PA67&amp;amp;lpg=PA67&amp;amp;dq=%22jobbing+programmer%22&amp;amp;source=bl&amp;amp;ots=U6Gvi9OSda&amp;amp;sig=J4qWDUtnk768SMjAK3yuEeWUv5Y&amp;amp;hl=es&amp;amp;sa=X&amp;amp;ved=0ahUKEwjz58K615DKAhUFVRQKHfyhAZAQ6AEIOTAE#v=onepage&amp;amp;q=%22jobbing%20programmer%22&amp;amp;f=false&#34; target=&#34;_blank&#34;&gt;at Mastering Julia&lt;/a&gt;, by Malcolm Sherrington&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://joshsymonds.com/blog/2013/11/03/what-makes-a-good-programmer-good/&#34; target=&#34;_blank&#34;&gt;at What Makes a Good Programmer Good?&lt;/a&gt; by Josh Symonds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: kris-jenkins, functional-programming, input, output, function, complexity-iceberg, pure-function, impure-function, side-effect, side-cause&lt;/p&gt;

&lt;h2 id=&#34;which-programming-languages-are-functional&#34;&gt;Which Programming Languages Are Functional?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jenkster.com/2015/12/which-programming-languages-are-functional.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kris Jenkins where the author analyses languages, determining whether they are functional or not.&lt;/p&gt;

&lt;p&gt;Describes how functional languages deal with side effects and side causes, and to identify them (was also explained in part one&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;

&lt;!--
    FOOTNOTES are at the beginning
--&gt;

&lt;p&gt;Tags: kris-jenkins, functional-programming, side-effect, side-cause, comparison, haskell, clojure, python, perl, javascript, java, map, reduce, hof, scala, moc&lt;/p&gt;

&lt;h2 id=&#34;argument-from-the-real-world&#34;&gt;Argument from the &amp;ldquo;Real World&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ronjeffries.com/xprog/articles/argument-from-the-real-world/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ron Jeffries that dismantles the &amp;ldquo;real world&amp;rdquo;, as an excuse to use good practices: as in &amp;ldquo;we could use that, but we live in the real world&amp;rdquo;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] our job is to create the “real world” and not to imagine that our present situation is the only situation there is&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is exactly our day to day task, to imagine a real world solution to present problems, maybe involving software in between.&lt;/p&gt;

&lt;p&gt;Can&amp;rsquo;t we do this for product and team management?&lt;/p&gt;

&lt;p&gt;Tags: ron-jeffries, agile, scrum, tdd, bdd, incremental-iterative-development, product-management, team-management&lt;/p&gt;

&lt;h2 id=&#34;self-contained-systems&#34;&gt;Self-Contained Systems&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/rstrangh/self-contained-systems-1&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about a self-contained system (SCS), an architecture choice to split monolithic systems in parts. It includes the use of microservices in the business logic to solve domain specific problems. Written by Roman Stranghöner&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;development, operation and maintenance [&amp;hellip;] by a single team&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: big-bang-release, roman-stranghoner, self-contained-system, scs, microservice, monolith, monolithic-system, architecture&lt;/p&gt;

&lt;h2 id=&#34;what-makes-a-good-programmer-good&#34;&gt;What Makes a Good Programmer Good?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://joshsymonds.com/blog/2013/11/03/what-makes-a-good-programmer-good/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Josh Symonds on the characteristics that differentiate a good programmer from the jobbing programmers, the list of skills to be a good programmer.&lt;/p&gt;

&lt;p&gt;Explains what factors are related and not related to being a good one&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;knowing that most programming problems have already been solved. You have to know where to look for the solution&lt;/li&gt;
&lt;li&gt;not to be afraid to dig deep into problems: detect a problem and be eager to solve it; figure out what is wrong&lt;/li&gt;
&lt;li&gt;go to the source: use the source as a fact, as analysis needs to be based on facts, not beliefs&lt;/li&gt;
&lt;li&gt;just do it: to be driven to act&lt;/li&gt;
&lt;li&gt;instinctively tackle problems head-on, grabbing the bull by the horns instead of waiting for it to be solved automagically; start solving the problem&lt;/li&gt;
&lt;li&gt;excited about grabbing problems, about facing the cutting edge&lt;/li&gt;
&lt;li&gt;taking the time to reflect and understand it before moving one to the next one&lt;/li&gt;
&lt;li&gt;communicate well: succintly and eloquently expressing your thoughts. The author thinks this might be the most important aspect of all.&lt;/li&gt;
&lt;li&gt;to be truly caring about what you do: not just a job, but a hobby, an interest, even a fascination; great programmers are always programming&lt;/li&gt;
&lt;li&gt;thinking of programming of a way to shape the world, not just a money-making activity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: jobbing-programmer, good-programmer, career, career-management, skill, josh-symonds, quote&lt;/p&gt;

&lt;h2 id=&#34;the-best-programming-language-or-how-to-stop-worrying-and-love-the-code&#34;&gt;The Best Programming Language (or How to Stop Worrying and Love the Code)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.fourthbit.com/2014/03/01/the-best-programming-language-or-how-to-stop-worrying-and-love-the-code&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Álvaro Castro-Castilla analysing different programming languages and what to choose each of them.&lt;/p&gt;

&lt;p&gt;Tags: alvaro-castro-castilla, programming-language, language, analysis, comparison&lt;/p&gt;

&lt;h2 id=&#34;tomates-en-el-campo&#34;&gt;Tomates en el campo&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.presionblogosferica.com/2011/02/20/tomates-en-el-campo/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ángel Medinilla, about how to cultivate teams, instead of creating or building them. Talks about the mandatory conditions, necessary factors and how to enable it, not guaranteeing success.&lt;/p&gt;

&lt;p&gt;Tags: angel-medinilla, team-management, spanish, team, analogy&lt;/p&gt;

&lt;h2 id=&#34;default-constructors-in-java&#34;&gt;Default constructors in Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/17068389/default-constructors-in-java&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt; in stackoverflow about extending a java class that has a private constructor.&lt;/p&gt;

&lt;p&gt;Tags: stackoverflow, answer, java, constructor, syntax&lt;/p&gt;

&lt;h2 id=&#34;what-s-so-great-about-reducers&#34;&gt;What&amp;rsquo;s So Great About Reducers?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.guillermowinkler.com/blog/2013/12/01/whats-so-great-about-reducers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Guillermo Winkler explaining reducers, a type of divide and conquer strategy clojure.&lt;/p&gt;

&lt;p&gt;Tags: guillermo-winkler, reducer, clojure, parallelism, concurrency&lt;/p&gt;

&lt;h2 id=&#34;don-t-use-slack&#34;&gt;Don’t use Slack?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/hacker-daily/don-t-use-slack-8e70452f3eed&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Christian Heilmann about the relation between open / closed software and accessibility.&lt;/p&gt;

&lt;p&gt;Tags: slack, christian-heilmann, accessibility, open-source, propietary-software, closed-source&lt;/p&gt;

&lt;h2 id=&#34;towards-an-understanding-of-technical-debt&#34;&gt;Towards an understanding of technical debt&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@kellan/towards-an-understanding-of-technical-debt-ae0f97cc0553&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kellan Elliott-McCrea about some definitions of technical debt and why taking care of it matters for the future.&lt;/p&gt;

&lt;p&gt;Talks about the way of inheriting projects by other teams and the paradox of &amp;ldquo;investing more time to fix the problem than originally invested in coding it.&amp;rdquo; Also about judgement.&lt;/p&gt;

&lt;p&gt;I find it related to the &amp;ldquo;theory building&amp;rdquo; by Naur.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are at least 5 distinct things we mean we say “technical debt”.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Maintenance work: buying breathing room&lt;/li&gt;
&lt;li&gt;Features of the codebase that resist change&lt;/li&gt;
&lt;li&gt;Operability choices that resist change&lt;/li&gt;
&lt;li&gt;Code choices that suck the will to live&lt;/li&gt;
&lt;li&gt;Dependencies that resist upgrading&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: kellan-elliott-mccrea, kellan, technical-debt, list, definition, quote&lt;/p&gt;

&lt;h2 id=&#34;lifetimes-of-cryptographic-hash-functions&#34;&gt;Lifetimes of cryptographic hash functions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://valerieaurora.org/hash.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Valerie Aurora where she explains the lifetimes of cryptographic hash functions up to 2012.&lt;/p&gt;

&lt;p&gt;Tags: hash-function, valerie-aurora&lt;/p&gt;

&lt;h2 id=&#34;collisions-for-hash-functions-md4-md5-haval-128-and-ripemd&#34;&gt;Collisions for Hash Functions - MD4, MD5, HAVAL-128 and RIPEMD&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://eprint.iacr.org/2004/199.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; that explains some collisions found for MD4, MD5, HAVAL-128 and RIPEMD. By Xiaoyun Wang, Dengguo Feng, Xuejia Lai, Hongbo Yu.&lt;/p&gt;

&lt;p&gt;Tags: collision, hash-function, xiaoyun-wang, dengguo-feng, xuejia-lai, hongbo-yu, paper&lt;/p&gt;

&lt;h2 id=&#34;the-future-is-parallel-what-s-a-programmer-to-do&#34;&gt;The future is parallel: What&amp;rsquo;s a programmer to do?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://groups.csail.mit.edu/mac/users/gjs/6.945/readings/MITApril2009Steele.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Guy Steele about the differences in linear vs parallel computing and about the old habits that we still have.&lt;/p&gt;

&lt;p&gt;Some quotes:&lt;/p&gt;

&lt;h3 id=&#34;motivation&#34;&gt;Motivation&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Good sequential code minimizes total number of operations.

&lt;ul&gt;
&lt;li&gt;Clever tricks to reuse previously computed results.&lt;/li&gt;
&lt;li&gt;Good parallel code often performs redundant operations to reduce communication.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Good sequential algorithms minimize space usage.

&lt;ul&gt;
&lt;li&gt;Clever tricks to reuse storage.&lt;/li&gt;
&lt;li&gt;Good parallel code often requires extra space to permit temporal decoupling.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Sequential idioms stress linear problem decomposition.

&lt;ul&gt;
&lt;li&gt;Process one thing at a time and accumulate results.&lt;/li&gt;
&lt;li&gt;Good parallel code usually requires multiway problem decomposition and multiway aggregation of results.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;a-new-mindset&#34;&gt;A New Mindset&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;DO loops are so 1950s! (Literally: Fortran is now 50 years old.)&lt;/li&gt;
&lt;li&gt;So are linear linked lists! (Literally: Lisp is now 50 years old.)&lt;/li&gt;
&lt;li&gt;Java-style iterators are so last millennium!&lt;/li&gt;
&lt;li&gt;Even arrays are suspect!&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;As soon as you say &lt;code&gt;first, SUM = 0&lt;/code&gt; you are hosed. Accumulators are BAD.&lt;/li&gt;
&lt;li&gt;If you say, “process subproblems in order,” you lose.&lt;/li&gt;
&lt;li&gt;The great tricks of the sequential past DON’T WORK.&lt;/li&gt;
&lt;li&gt;The programming idioms that have become second nature to us as everyday tools DON’T WORK.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;the-parallel-future&#34;&gt;The Parallel Future&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;We need new strategies for problem decomposition.&lt;/li&gt;
&lt;li&gt;Data structure design/object relationships&lt;/li&gt;
&lt;li&gt;Algorithmic organization&lt;/li&gt;
&lt;li&gt;Don’t split a problem into “the first” and “the rest.”&lt;/li&gt;
&lt;li&gt;Do split a problem into roughly equal pieces. Then figure out how to combine general subsolutions.&lt;/li&gt;
&lt;li&gt;Often this makes combining the results a bit harder.&lt;/li&gt;
&lt;li&gt;We need programming languages and runtime implementations that support parallel strategies and hybrid sequential/parallel strategies.&lt;/li&gt;
&lt;li&gt;We must learn to manage new space-time tradeoffs&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A program organized according to linear problem decomposition principles can be really hard to parallelize.&lt;/li&gt;
&lt;li&gt;A program organized according to parallel problem decomposition principles is easily run either in parallel or sequentially, according to available resources.&lt;/li&gt;
&lt;li&gt;The new strategy has costs and overheads. They will be reduced over time but will not disappear.&lt;/li&gt;
&lt;li&gt;In a world of parallel computers of wildly varying sizes, this is our only hope for program portability in the future.&lt;/li&gt;
&lt;li&gt;Better language design can encourage better parallel programming.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: representation, computation, catamorphism, list, associativity
commutativity, idempotency, abstract-data-type, slide, operator, mapreduce, mindset, comparison, parallel, guy-steele,  linear-computing, parallel-computing&lt;/p&gt;

&lt;h2 id=&#34;surviving-being-senior-tech-management&#34;&gt;Surviving being senior (tech) management.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@kellan/surviving-being-senior-tech-management-aa6654efd027&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kellan Elliott-McCrea about the basic things to do as management to retain the best performance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;exercise&lt;/li&gt;
&lt;li&gt;someone to talk to&lt;/li&gt;
&lt;li&gt;discuss with peers, in petit commité&lt;/li&gt;
&lt;li&gt;personal mastery project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: kellan-elliott-mccrea, kellan, list, management, tip, exercise, pet-project&lt;/p&gt;

&lt;h2 id=&#34;you-don-t-need-more-free-time&#34;&gt;You Don’t Need More Free Time&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.nytimes.com/2016/01/10/opinion/sunday/you-dont-need-more-free-time.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the quality of life, work-life balance by Cristobal Young on why the time where we have more fun is spent together, in company.&lt;/p&gt;

&lt;p&gt;Tags: cristobal-young, time-management, work-life-balance&lt;/p&gt;

&lt;h2 id=&#34;taking-longer-to-reach-the-top-has-its-benefits&#34;&gt;Taking Longer to Reach the Top Has Its Benefits&lt;/h2&gt;

&lt;p&gt;​I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/2015/12/taking-longer-to-reach-the-top-has-its-benefits&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains how having work life balance and preventing burn out syndrome, aided by a patient career, can help with reaching a higher destination on your career. By Karen Firestone&lt;/p&gt;

&lt;p&gt;Tags: career-management, patience, burnout, burn-out, ceo, karen-firestone, professional-career, improvement&lt;/p&gt;

&lt;h2 id=&#34;all-bugs-lead-to-rome&#34;&gt;All bugs lead to Rome&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@nickbaum/all-bugs-lead-to-rome-505a1205bb9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains how the author tracks down a bug present in mail communication, just for a handful of client. By Nick Baum&lt;/p&gt;

&lt;p&gt;Tags: track-down, bug, defect, mailgun, rot13, nick-baum&lt;/p&gt;

&lt;h2 id=&#34;design-patterns-coming-full-circle&#34;&gt;Design Patterns — Coming Full Circle&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/swlh/design-patterns-coming-full-circle-d8292e261dc6&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains what a design pattern is, where does it come from, the figure of Christopher Alexander and the architecture design patterns. By Jen Carlile&lt;/p&gt;

&lt;p&gt;Tags: design-pattern, christopher-alexander, jen-carlile, comparison, example, proxy, command, observer&lt;/p&gt;

&lt;h2 id=&#34;react-performance&#34;&gt;React + Performance = ?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://aerotwist.com/blog/react-plus-performance-equals-what/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Paul Lewis comparing the performance and developer experience of react.js and vanilla js.&lt;/p&gt;

&lt;p&gt;Conclusion: under his measurements, react is too slow once the amount of elements is big on mobile devices&lt;/p&gt;

&lt;p&gt;Tags: paul-lewis, comparison, javascript, react, mobile, perfomance, jsperf, js-perf, vanilla-javascript&lt;/p&gt;

&lt;h2 id=&#34;full-speed-then-stop-gracefully&#34;&gt;Full speed, then stop, gracefully&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://sethgodin.typepad.com/seths_blog/2015/12/full-speed-then-stop.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about how to end professional relationships with an employer or a team.&lt;/p&gt;

&lt;p&gt;Makes an analogy to the hockey sport attitude: &amp;ldquo;full speed, then stop&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: seth-godin, professional, employer, team-management, team, analogy&lt;/p&gt;

&lt;h2 id=&#34;por-qué-tendrás-que-facturar-55-000-para-cobrar-una-nómina-de-26-000&#34;&gt;Por qué tendrás que facturar 55.000€ para cobrar una nómina de 26.000€&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive1.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=7e79a27689&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; by David Bonilla on why freelancers need to bill more to clients to achieve the same (economic) results as being hired by a company.&lt;/p&gt;

&lt;p&gt;Tags: david-bonilla, bonilista, freelancer, contractor, employee&lt;/p&gt;

&lt;h2 id=&#34;principles-of-microservices&#34;&gt;Principles Of Microservices&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://vimeo.com/131632250&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Sam Newman on microservices at the NDC 2015 at Oslo&lt;/p&gt;

&lt;p&gt;Describes a microservice as a small, autonomous services that work together, modelled around a business domain&lt;/p&gt;

&lt;p&gt;Microservices can mix technology, persistence stack, idioms, options&lt;/p&gt;

&lt;p&gt;reference to the twelve factors (by heroku).&lt;/p&gt;

&lt;p&gt;At a client:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Design and delivery practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;standard http/rest&lt;/li&gt;
&lt;li&gt;encapsulate legacy&lt;/li&gt;
&lt;li&gt;eliminate integration databases&lt;/li&gt;
&lt;li&gt;consolidate and cleanse data&lt;/li&gt;
&lt;li&gt;published integration model&lt;/li&gt;
&lt;li&gt;small independent devices&lt;/li&gt;
&lt;li&gt;continous deployment&lt;/li&gt;
&lt;li&gt;minimal customization of COTS/SAAS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Architectural principles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reduce inertia&lt;/li&gt;
&lt;li&gt;eliminate accidential complexity&lt;/li&gt;
&lt;li&gt;consistent interfaces and data flows&lt;/li&gt;
&lt;li&gt;no silver bullets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Strategic goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;enable scalable businesses&lt;/li&gt;
&lt;li&gt;support entry into new markets&lt;/li&gt;
&lt;li&gt;support innovation in existing markets&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Principles of microservices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;modelled around a business domain&lt;/li&gt;
&lt;li&gt;culture of automation&lt;/li&gt;
&lt;li&gt;hide implementation details&lt;/li&gt;
&lt;li&gt;decentralise all the things&lt;/li&gt;
&lt;li&gt;deploy independently&lt;/li&gt;
&lt;li&gt;consumer first&lt;/li&gt;
&lt;li&gt;isolate failure&lt;/li&gt;
&lt;li&gt;highly observable&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;p&gt;the business domain changes more slowly. find these boundaries (reference to IDDD)&lt;/p&gt;

&lt;p&gt;bounded contexts is about concepts which are shared and others who are hidden&lt;/p&gt;

&lt;p&gt;consumer driven contracts as a way to express to consumer expectations, written as tests. this is a high-trust pattern (requires it). reduces end to end testing, considerably. Using tools as &lt;a href=&#34;http://github.com/realestate&#34; target=&#34;_blank&#34;&gt;pact&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;parallel change for endpoints (or APIs) for avoiding lock step release (expand contract pattern). high cost to change an API: apply upfront thought to it.&lt;/p&gt;

&lt;p&gt;explains about a case writing a strangler application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;circuit breakers&lt;/li&gt;
&lt;li&gt;one thread pool per application&lt;/li&gt;
&lt;li&gt;bulkhead downstream connections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the book &amp;ldquo;Release It!&amp;rdquo;&lt;/li&gt;
&lt;li&gt;the book &amp;ldquo;Implementing Domain-Driven Design (IDDD)&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;p&gt;correlation ids, parent and child ids
extracting information from logs (e.g., kibana, splunk, new relic)
see how services connect to each other based on logs instead of based on documentation&lt;/p&gt;

&lt;p&gt;Tags: lock-step-release, autonomy, sam-newman, consumer-driven-contract, team, zookeper, etcd, consul, service-discovery, distributed-consensus, talk, ndc, humane-registry, bulkhead-pattern, circuit-breaker&lt;/p&gt;

&lt;h2 id=&#34;the-website-obesity-crisis&#34;&gt;The Website Obesity Crisis&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://idlewords.com/talks/website_obesity.htm&#34; target=&#34;_blank&#34;&gt;this transcription&lt;/a&gt; of &lt;a href=&#34;http://www.webdirections.org/blog/the-website-obesity-crisis/&#34; target=&#34;_blank&#34;&gt;this presentation&lt;/a&gt; about the increase of weight of websites and how this connects with new needs for automation and other services. How the solution is to keep the pages lightweight and open for everybody to use and learn; without invading our privacy. By Maciej Ceglowski&lt;/p&gt;

&lt;p&gt;Tags: obesity, fat-page, slide, transcription, slide-transcription, maciej-ceglowski, simplicity, speed&lt;/p&gt;

&lt;h2 id=&#34;command-line-tools-can-be-235x-faster-than-your-hadoop-cluster&#34;&gt;Command-line tools can be 235x faster than your Hadoop cluster&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://aadrake.com/command-line-tools-can-be-235x-faster-than-your-hadoop-cluster.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how using command-line based (&lt;code&gt;find&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;) can have a better performance as compared to Hadoop for a specific case, which is analyzing 2 million chess games. By Adam Drake&lt;/p&gt;

&lt;p&gt;Tags: adam-drake, chess, comparison, performance, cli-commands, unix, nix, hadoop, awk&lt;/p&gt;

&lt;h2 id=&#34;the-serializable-isolation-level&#34;&gt;The Serializable Isolation Level&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://sqlperformance.com/2014/04/t-sql-queries/the-serializable-isolation-level&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Paul White about the serializable isolation level and how it is implemented in some databases.&lt;/p&gt;

&lt;p&gt;Tags: serializable, isolation level, paul-white, oracle, mssql, database, sql&lt;/p&gt;

&lt;h2 id=&#34;academic-writing-with-markdown-pandoc-and-emacs&#34;&gt;Academic Writing With Markdown, Pandoc and Emacs&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://milinda.svbtle.com/academic-writing-with-markdown-pandoc-and-emacs&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Milinda Pathirage that explains an alternative way of writing LaTeX in a user-friendly manner, writing markdown then converting it to the output format (he provides &lt;a href=&#34;https://gist.github.com/milinda/d9272e67711d324f18ba&#34; target=&#34;_blank&#34;&gt;such a script&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Tags: latex, milinda-pathirage, academia, research, paper, markdown, script&lt;/p&gt;

&lt;h2 id=&#34;rest-ddd-layers-jsf-microservices-sizing-a-umejug-conversation&#34;&gt;Rest, DDD, layers, JSF, microservices sizing a Umejug conversation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;http://www.adam-bien.com/roller/abien/entry/rest_ddd_layers_jsf_a&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Adam Bien on topics related to microservices and architecture. Discusses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What do you think a typical web application should look like? How should it be built?&lt;/li&gt;
&lt;li&gt;When using REST, which level of REST is appropriate when, is HATEOAS something to strive for, how to implement it?&lt;/li&gt;
&lt;li&gt;Which patterns do you recommend, hexagonal architecture, layers, &amp;hellip;?&lt;/li&gt;
&lt;li&gt;What do you think of the DDD strategic and tactical patterns?&lt;/li&gt;
&lt;li&gt;Microservices vs right-sized services, is transactions over several services always a bad idea?&lt;/li&gt;
&lt;li&gt;When use JSF? Is it still useful?&lt;/li&gt;
&lt;li&gt;Entity-Control-Boundary Pattern (ECB) (around &lt;a href=&#34;https://youtu.be/VkcLpRs0i0g?t=995&#34; target=&#34;_blank&#34;&gt;16:37&lt;/a&gt;). &lt;a href=&#34;http://www.cs.sjsu.edu/~pearce/modules/patterns/enterprise/ecb/ecb.htm&#34; target=&#34;_blank&#34;&gt;More info&lt;/a&gt; on the pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: hateoas, rest, microservice, pattern, architecture, umejug, hexagonal-architecture, ddd, adam-bien, ecb-pattern, mvc-pattern&lt;/p&gt;

&lt;h2 id=&#34;how-to-go-remote&#34;&gt;How To Go Remote&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://workdifferent.com/how-to-remote/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sebastian Kade that explains how to go remote: where the possibility of working anywhere is a luxury, even if it is in an office.&lt;/p&gt;

&lt;p&gt;Explains the case of Automattic, some examples of communication, culture. Suggests using some tools to accomplish this cultural change.&lt;/p&gt;

&lt;p&gt;Tags: remote-work, sebastian-kade, remote, work, asynchronous-communication, communication, automattic, tool, culture, team-management&lt;/p&gt;

&lt;h2 id=&#34;why-your-company-should-have-a-creed&#34;&gt;Why Your Company Should Have a Creed&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ma.tt/2011/09/automattic-creed/&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Matt Mullenweg about the importance of having a company creed (a belief system, ethos), which ideally would be shared by the colleagues. These should be the values that help deciding, when in doubt, so everyone is aligned.&lt;/p&gt;

&lt;p&gt;At Automattic, this is theirs (as of September 19th, 2011):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I will never stop learning. I won’t just work on things that are assigned to me. I know there’s no such thing as a status quo. I will build our business sustainably through passionate and loyal customers. I will never pass up an opportunity to help out a colleague, and I’ll remember the days before I knew everything. I am more motivated by impact than money, and I know that Open Source is one of the most powerful ideas of our generation. I will communicate as much as possible, because it’s the oxygen of a distributed company. I am in a marathon, not a sprint, and no matter how far away the goal is, the only way to get there is by putting one foot in front of another every day. Given time, there is no problem that’s insurmountable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: quote, matt-mullenweg, automattic, creed, ethos, learning, team-management, startup, communication, essay&lt;/p&gt;

&lt;h2 id=&#34;mob-programming-the-unruly-experience&#34;&gt;Mob Programming: The Unruly Experience&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://wirfs-brock.com/blog/2015/06/05/mob-programming/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Rebecca Wirfs-Brock on mob programming and the experience report (+ &lt;a href=&#34;http://www.xp2015.org/wp-content/uploads/2015/06/TH2.3_Wilson.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;) at the company called Unruly.&lt;/p&gt;

&lt;p&gt;She explains what works for them and what does not.&lt;/p&gt;

&lt;p&gt;Also, she makes a difference on complex vs complicated work:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;complex work (where there is the potential for errors) over complicated work (where the solution is known, but is merely time consuming)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Explains some characteristics of learning organizations:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Teams in learning organizations perform ongoing experiments. While they settle on a core set of practices, they also try to build upon them. They keep innovating, improving, and reflecting. And how they work continues to evolve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: learning, learning-organization, xp, rebecca-wirfs-brock, mob-programming, pair-programming, complex-work, complicated-work, experience-report, unruly, team-management, team-building, team-dysfunction, comparison&lt;/p&gt;

&lt;h2 id=&#34;what-you-re-hiding-from-when-you-constantly-check-your-phone&#34;&gt;What You’re Hiding from When You Constantly Check Your Phone&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/2016/01/what-youre-hiding-from-when-you-constantly-check-your-phone&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Charlotte Lieberman where she explains the technology-stress paradox and the fact of replacing one addiction with another, as some addictions are more socially than others.&lt;/p&gt;

&lt;p&gt;Explains that the constant connection to social media allow us to avoid ourselves, and the connection to mindfulness.&lt;/p&gt;

&lt;p&gt;On the paradox:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;technology-stress paradox: we share the desire for greater freedom from our devices, and yet that very freedom itself causes anxiety&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the work-life balance:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;work-life balance [is]  [&amp;hellip;] about noticing those moments in which you really don&amp;rsquo;t want to deal with yourself&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: charlotte-lieberman, paradox, quote, social-media, mindfulness, technology-stress-paradox, stress, addiction, time-management&lt;/p&gt;

&lt;h2 id=&#34;testing-myth-1-writing-tests-slows-you-down&#34;&gt;Testing myth #1: Writing tests slows you down&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://arhohuttunen.fi/testing/testing-myth-1-writing-tests-slows-you-down/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Arho Huttunen on an excuse to not test: there is no time.&lt;/p&gt;

&lt;p&gt;In the article, he explains the false assumptions based on that reason and the gains (short term and long term) from doing it.&lt;/p&gt;

&lt;p&gt;Tags: arho-huttunen, test, excuse&lt;/p&gt;

&lt;h2 id=&#34;becodeweek-by-josé-manuel-beas&#34;&gt;BeCodeWeek by José Manuel Beas&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jmbeas.es/category/becodeweek/&#34; target=&#34;_blank&#34;&gt;this category of posts&lt;/a&gt; by José Manuel Beas about his BeCodeWeek, a desk-surfing experience at BeCode.&lt;/p&gt;

&lt;p&gt;Analyses facts and publishes one entry per day detailing his activities.&lt;/p&gt;

&lt;p&gt;Tags: becodeweek, jmbeas, jose-manuel-beas, desk-surfing, experience, experience-report, analysis&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;code&gt;What Is Functional Programming?&lt;/code&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;many of these fragments are quotes or paraphrased quotes
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in October 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</link>
      <pubDate>Thu, 01 Oct 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</guid>
      <description>

&lt;h2 id=&#34;blazing-fast-html-virtual-dom-in-elm&#34;&gt;Blazing Fast HTML: Virtual DOM in Elm&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://elm-lang.org/blog/blazing-fast-html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining how Elm works in relation to the virtual DOM. By Evan Czaplicki.&lt;/p&gt;

&lt;p&gt;Tags: elm, dom, virtual-dom, comparison, speed, haskell, evan-czaplicki&lt;/p&gt;

&lt;h2 id=&#34;why-you-should-never-ever-ever-use-mongodb&#34;&gt;Why you should never, ever, ever use MongoDB&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; stating the downsides of using MongoDB. Written by Sven Slootweg&lt;/p&gt;

&lt;p&gt;Tags: mongodb, downside, sven-slootweg, json, document-store, postgresql, acid&lt;/p&gt;

&lt;h2 id=&#34;do-you-really-get-classloaders&#34;&gt;Do you really get classloaders?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;http://zeroturnaround.com/rebellabs/rebel-labs-tutorial-do-you-really-get-classloaders/&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Jevgeny Kabanov on classloaders: what they are, how they work nad some tips to solve common issues.&lt;/p&gt;

&lt;p&gt;My notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the classloading is lazy: the resources are not loaded until they are mentioned&lt;/li&gt;
&lt;li&gt;every classloader has a parent&lt;/li&gt;
&lt;li&gt;every class has a classloader associated with it&lt;/li&gt;
&lt;li&gt;every object has a class associated with it&lt;/li&gt;
&lt;li&gt;classloading delegation: the parent is consulted before loading a class. if it has it, it will load it. If not, I will delegate it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also &lt;a href=&#34;http://www.javaworld.com/article/2074396/core-java/javaone-2011--do-you-really-get-classloaders-.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the same video&lt;/p&gt;

&lt;p&gt;Tags: jevgeny-kabanov, classloader, java,&lt;/p&gt;

&lt;h2 id=&#34;truth-table&#34;&gt;Truth table&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Truth_table&#34; target=&#34;_blank&#34;&gt;the wikipedia article&lt;/a&gt; about the truth table and the 16 possible binary boolean operators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Contradiction&lt;/li&gt;
&lt;li&gt;NOR&lt;/li&gt;
&lt;li&gt;Converse nonimplication&lt;/li&gt;
&lt;li&gt;Negation (of p)&lt;/li&gt;
&lt;li&gt;Material nonimplication&lt;/li&gt;
&lt;li&gt;Negation (of q)&lt;/li&gt;
&lt;li&gt;XOR (exclusive disjunction)&lt;/li&gt;
&lt;li&gt;NAND&lt;/li&gt;
&lt;li&gt;AND (conjunction)&lt;/li&gt;
&lt;li&gt;XNOR (biconditional)&lt;/li&gt;
&lt;li&gt;Projection (of p)&lt;/li&gt;
&lt;li&gt;Implication&lt;/li&gt;
&lt;li&gt;Projection (of q)&lt;/li&gt;
&lt;li&gt;Converse implication&lt;/li&gt;
&lt;li&gt;OR (disjunction)&lt;/li&gt;
&lt;li&gt;Tautology&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-lines-of-code-3-minutes-implement-a-programming-language-from-scratch&#34;&gt;7 lines of code, 3 minutes: Implement a programming language from scratch&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://matt.might.net/articles/implementing-a-programming-language/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matt Might about the benefits of implementing a language (from scratch but on top of another existing language used as framework). Chooses lambda calculus as the desired DSL&lt;/p&gt;

&lt;p&gt;Tags: matt-might, lambda-calculus, racket, domain-specific-language&lt;/p&gt;

&lt;h2 id=&#34;turing-completeness&#34;&gt;Turing completeness&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing_completeness&#34; target=&#34;_blank&#34;&gt;this wikipedia article&lt;/a&gt; (both main and discussion) about this subject.&lt;/p&gt;

&lt;p&gt;It has sounded strange to me the reference to S-expressions:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Data languages
The notion of Turing-completeness does not apply to languages such as XML, HTML, JSON, YAML and S-expressions because they are typically used to represent structured data, not describe computation [&amp;hellip;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If data (S-expression) is represented as the same format as code (e.g., Lisp&amp;rsquo;s S-expression) and the latter is used to represent a computation, shouldn&amp;rsquo;t be &amp;ldquo;data languages that also are used as computation languages&amp;rdquo; excluded from that list?&lt;/p&gt;

&lt;p&gt;As a side note, Lisp is Turing Complete (see &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing_completeness#Examples&#34; target=&#34;_blank&#34;&gt;Turing Complete#Examples&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;the-prize-is-won-the-simplest-universal-turing-machine-is-proved&#34;&gt;The Prize Is Won; The Simplest Universal Turing Machine Is Proved&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.wolfram.com/2007/10/24/the-prize-is-won-the-simplest-universal-turing-machine-is-proved/?year=2007&amp;amp;monthnum=10&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Stephen Wolfram about the proof of a Turing Machine 2,3 being universal by Alex Smith.&lt;/p&gt;

&lt;p&gt;Tags: stephen-wolfram, turing-machine, universal-turing-machine, proof, paper, alex-smith&lt;/p&gt;

&lt;h2 id=&#34;making-a-successful-commitment-in-each-sprint&#34;&gt;Making a successful commitment in each Sprint&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://succeeding-with-agile.blogspot.com/2015/07/making-successful-commitment-in-each.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Nikolaos Raptis on committing to work in each sprint.&lt;/p&gt;

&lt;p&gt;Tags: nikolaos-raptis, sprint, agile, commitment&lt;/p&gt;

&lt;h2 id=&#34;no-increment-operator-in-ruby&#34;&gt;No increment operator (++) in Ruby?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/3717519/no-increment-operator-in-ruby&#34; target=&#34;_blank&#34;&gt;this stackoverflow&lt;/a&gt; question about the lack of post-increment operator (i++) in Ruby:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;++ and &amp;ndash; are NOT reserved operator in Ruby.&lt;/p&gt;

&lt;p&gt;Mailing list from &lt;a href=&#34;http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/2710&#34; target=&#34;_blank&#34;&gt;Yukihiro Matsumoto aka matz&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;code-is-data-data-is-code&#34;&gt;Code is Data, Data is Code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blogs.mulesoft.com/dev/news-dev/code-is-data-data-is-code/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by James Donelan on the equivalence of code and data in homoiconic languages, including Clojure.&lt;/p&gt;

&lt;p&gt;The article talks about homoiconicity, manually creating Abstract Syntax Trees (AST) out of data and the macro environment. Also, compares the difference between macros and functions.&lt;/p&gt;

&lt;p&gt;Tags: code=data, data=code, james-donelan, clojure, homoiconicity, abstract-syntax-tree, ast, macro, function&lt;/p&gt;

&lt;h2 id=&#34;agile-in-practice-test-driven-development&#34;&gt;Agile in Practice: Test Driven Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=uGaNkTahrIw&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; introducing TDD by the Agile Academy. Explains its motivations and the basic cyclical fashion.&lt;/p&gt;

&lt;p&gt;Tags: agile-academy, video, tdd, introduction&lt;/p&gt;

&lt;h2 id=&#34;agile-in-practice-pair-programming&#34;&gt;Agile in Practice: Pair Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=ET3Q6zNK3Io&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Agile Academy on practicing pair programming. Explains the destination and how to get there.&lt;/p&gt;

&lt;p&gt;Tags: agile-academy, pair-programming, video, introduction&lt;/p&gt;

&lt;h2 id=&#34;a-low-cost-approach-to-working-on-side-projects&#34;&gt;A low cost approach to working on side projects&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://practicingruby.com/articles/low-cost-approach-to-side-projects&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Gregory Brown on how to apply the MVP and Lean Startup principles to side projects (a.k.a. pet projects). Try to start with a brainstorming session of all the features you want your product to have, then prioritise, picking the most important ones.&lt;/p&gt;

&lt;p&gt;Most projects&amp;rsquo; needs can be solved with a minimal version, in the form of a script that took half an hour to develop.&lt;/p&gt;

&lt;p&gt;Tags: gregory-brown, mvp, lean-startup, script, proof-of-concept, priority, backlog, side-project, pet-project, low-cost, cost-reduction&lt;/p&gt;

&lt;h2 id=&#34;extreme-programming&#34;&gt;Extreme Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=kFM2Vcu-BRo&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by STAR Videos on the basic principles behind Extreme Programming and how to use it to improve software quality&lt;/p&gt;

&lt;p&gt;Tags: star-videos, extreme-programming, xp, software-quality&lt;/p&gt;

&lt;h2 id=&#34;disruptor-high-performance-alternative-to-bounded-queues-for-exchanging-data-between-concurrent-threads&#34;&gt;Disruptor: High performance alternative to bounded queues for exchanging data between concurrent threads&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lmax-exchange.github.io/disruptor/files/Disruptor-1.0.pdf&#34; target=&#34;_blank&#34;&gt;this white paper&lt;/a&gt; describing the disruptor framework: a way of exchanging data between concurrent threads.&lt;/p&gt;

&lt;p&gt;It uses a ring buffer and other techniques to eliminate write contention, reduce read contention and produces good results. It was developed for a financial exchange environment but it&amp;rsquo;s general purpose.&lt;/p&gt;

&lt;p&gt;Tags: martin-thompson, dave-farley, michael-barker, patricia-gee, andrew-stewart, trisha-gee, disruptor, contention, framework, concurrency, parallelism, white-paper, comparison, arrayblockingqueue, concurrentlinkedqueue, doug-lea, benchmark, lmax, low-level-optimization, optimization&lt;/p&gt;

&lt;h2 id=&#34;dissecting-the-disruptor-what-s-so-special-about-a-ring-buffer&#34;&gt;Dissecting the Disruptor: What&amp;rsquo;s so special about a ring buffer?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mechanitis.blogspot.com.es/2011/06/dissecting-disruptor-whats-so-special.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the ring buffer data structure. A FIFO data structure where elements get overwritten to reduce pressure on the garbage collector. Every message gets sent to every consumer.&lt;/p&gt;

&lt;p&gt;Tags: patricia-gee, trisha-gee, disruptor, ring-buffer, data-structure&lt;/p&gt;

&lt;h2 id=&#34;the-dependency-inversion-principle&#34;&gt;The Dependency Inversion Principle&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.objectmentor.com/resources/articles/dip.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; about the Dependency Inversion Principle (DIP) written Robert C. Martin.&lt;/p&gt;

&lt;p&gt;It explains the theory, philosophy behind it. Also, creates an example with a copy buffer and different output locations&lt;/p&gt;

&lt;p&gt;Tags: robert-martin, dependency-inversion-principle, dip, example, comparison, object-oriented, principle, solid, design-principle&lt;/p&gt;

&lt;h2 id=&#34;dip-in-the-wild&#34;&gt;DIP in the Wild&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://martinfowler.com/articles/dipInTheWild.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the Dependency Inversion Principle (DIP) written by Brett L. Schuchert.&lt;/p&gt;

&lt;p&gt;It is explained non-canonical representations of this principle, how in other cases he has solved it and conclusions of using it day to day.&lt;/p&gt;

&lt;p&gt;Tags: brett-l.-schuchert, dependency-inversion-principle, dip, example, object-oriented, solid, design-principle&lt;/p&gt;

&lt;h2 id=&#34;the-new-new-product-development-game&#34;&gt;The New New Product Development Game&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/1986/01/the-new-new-product-development-game&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; about the holistic approach to product development, considered seminal for Scrum and other Agile methodologies. Written by Hirotaka Takeuchi and Ikujiro Nonaka&lt;/p&gt;

&lt;p&gt;In it, they describe how teams are distributed, the responsibilities for each one, and the degrees of freedom.&lt;/p&gt;

&lt;p&gt;Cites the six basic characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;built-in instability&lt;/li&gt;
&lt;li&gt;self-organizing project teams&lt;/li&gt;
&lt;li&gt;overlapping development phases&lt;/li&gt;
&lt;li&gt;multilearning&lt;/li&gt;
&lt;li&gt;subtle control&lt;/li&gt;
&lt;li&gt;organizational transfer of learning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: hirotaka-takeuchi, ikujiro-nonaka, scrum, agile, product-development, management, 1986&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>