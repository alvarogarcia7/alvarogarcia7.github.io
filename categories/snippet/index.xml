<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>snippet on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/snippet/</link>
    <description>Recent content in snippet on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Jun 2018 09:03:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/snippet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing a component that includes randomness</title>
      <link>https://alvarogarcia7.github.io/blog/2018/06/15/testing-component-randomness/</link>
      <pubDate>Fri, 15 Jun 2018 09:03:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/06/15/testing-component-randomness/</guid>
      <description>Context We have been tasked with designing a component to generate secrets for two-factor authentication (2FA), to ensure that the you also own that other &amp;lsquo;channel&amp;rsquo;.
It has to be secure enough to pass to verify a user, meaning no other user should be able to impersonating another one by guessing the secret.
Solution A first solution that he have implemented is to provide a 6-digit pin code.
The solution (in java) is straightforward: get a Random to generate ints for you.</description>
    </item>
    
    <item>
      <title>Refactoring functional code</title>
      <link>https://alvarogarcia7.github.io/articles/2016/09/28/refactoring-functional-code/</link>
      <pubDate>Wed, 28 Sep 2016 20:36:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/articles/2016/09/28/refactoring-functional-code/</guid>
      <description>With my pairing mate we have refactored this piece of functional code.
Original code:
function filterTokens (rawTokens) { const cleanedTokens = rawTokens.map(token =&amp;gt; (token.length &amp;amp;&amp;amp; token[0] === &amp;#39;-&amp;#39;) ? token.substring(1) : token) return cleanedTokens.filter(token =&amp;gt; token !== &amp;#39;&amp;#39; &amp;amp;&amp;amp; stopWordsArray.indexOf(token) === -1) } Refactored code:
function filterTokens (rawTokens) { const cleanedTokens = rawTokens.map(token =&amp;gt; startsWithADash(token) ? removeDashFrom(token) : token) const processedTokens = cleanedTokens.filter(token =&amp;gt; isNotEmpty(token) &amp;amp;&amp;amp; isNotAStopWord(token)) return processedTokens function startsWithADash (token) { return (token.</description>
    </item>
    
    <item>
      <title>Annotations and Aspects in Java</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/21/annotations-and-aspects-in-java/</link>
      <pubDate>Tue, 21 Apr 2015 07:23:23 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/21/annotations-and-aspects-in-java/</guid>
      <description>I&amp;rsquo;ve written a sample project with an annotation and an aspect to intercept it and decorate it.
The code provides a way of doing try|catch, specifying an exception to be caught.
The source code is available here
In the process This has taken me approximately one hour to prepare the spike and half more to refactor and massage a bit.
If you want to see the raw details, the refactor has been committed step by step (the spike hasn&amp;rsquo;t).</description>
    </item>
    
  </channel>
</rss>
