<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tests on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/tests/</link>
    <description>Recent content in tests on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Apr 2015 22:09:54 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/tests/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What legacy code is about</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/21/what-legacy-code-is-about/</link>
      <pubDate>Tue, 21 Apr 2015 22:09:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/21/what-legacy-code-is-about/</guid>
      <description>In his book Working effectively with legacy code, Michael Feathers describes:
 [&amp;hellip;] legacy code as code without tests. It is a good working definition, and it points to a solution [&amp;hellip;]
M Feathers, in the preface of Working effectively with legacy code
 I really like this definition. It is objective and measurable. But this is also a downside. Let&amp;rsquo;s take any concurrent code, for example: you can achieve 100% coverage on a single thread and the program could have defects when executed in parallel.</description>
    </item>
    
  </channel>
</rss>
