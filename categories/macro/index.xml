<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>macro on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/macro/</link>
    <description>Recent content in macro on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Jul 2023 16:38:28 +0400</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/macro/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Threading Macro (clojure) equivalent in Python</title>
      <link>https://alvarogarcia7.github.io/articles/2023/07/22/threading-macro-equivalent-python/</link>
      <pubDate>Sat, 22 Jul 2023 16:38:28 +0400</pubDate>
      
      <guid>https://alvarogarcia7.github.io/articles/2023/07/22/threading-macro-equivalent-python/</guid>
      <description>Introduction In any programming language, it is common to compose functions by pipelining functions: h = g âˆ˜ f such that h(x) = g(f(x)).
The function f is applied first, then g, then the following. 1
For me, it would be more comfortable and easy to understand to write it f COMPOSE_THEN g, indicating that this function composition is not the usual, but a different operation.
Introduction in Clojure This function composition can be written in Clojure by pipelining or chaining functions:</description>
    </item>
    
    <item>
      <title>Clojure and the macro and</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/08/clojure-and-the-macro-and/</link>
      <pubDate>Tue, 08 Dec 2015 17:37:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/08/clojure-and-the-macro-and/</guid>
      <description>While on the REPL, I tried this:
simple.core=&amp;gt; (reduce and true [true]) CompilerException java.lang.RuntimeException: Can&amp;#39;t take value of a macro: #&amp;#39;clojure.core/and, compiling:(form-init7116694665186998245.clj:1:1) Reading the clojuredocs for and, you can find this:
 Note add is a macro, so you cannot apply it. For example, there is a vector of some Boolean values [true true false true], which you want to test to see if they are all true. The code below will not work:</description>
    </item>
    
    <item>
      <title>Self-Study in December 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</link>
      <pubDate>Wed, 02 Dec 2015 09:50:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</guid>
      <description>Ruby Equality And Object Comparison I&amp;rsquo;ve read this article, written by Alan Skorkin, that explains equality comparisons in ruby:
 equal? is reference equality == is value equality eql? is value and type equality  Tags: ruby, comparison, equality, object, reference, alan-skorkin
Software Folklore I&amp;rsquo;ve watched this PechaKucha by Chris Ford on what are laws and how they relate to creating software. Also talks on what could be an analogy to software creation (says not science, not engineering)</description>
    </item>
    
    <item>
      <title>Self-Study in November 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</link>
      <pubDate>Mon, 02 Nov 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</guid>
      <description>Call me maybe: RabbitMQ I&amp;rsquo;ve read this article by Kyle Kingsbury on using RabbitMQ as a lock service. It investigates and gives a counterexample of using it for this purpose.
Uses Knossos to do the testing and surfaces a problem with it. Explains specific problems on locking: at-most-once and at-least-once message delivery
Note: References Jepsen (I guess an inside joke to the song &amp;ldquo;Call me maybe&amp;rdquo; by Carly Rae Jepsen) for at-most-once and at-least-once message delivery.</description>
    </item>
    
    <item>
      <title>Self-Study in October 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</link>
      <pubDate>Thu, 01 Oct 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</guid>
      <description>Blazing Fast HTML: Virtual DOM in Elm I&amp;rsquo;ve read this article explaining how Elm works in relation to the virtual DOM. By Evan Czaplicki.
Tags: elm, dom, virtual-dom, comparison, speed, haskell, evan-czaplicki
Why you should never, ever, ever use MongoDB I&amp;rsquo;ve read this article stating the downsides of using MongoDB. Written by Sven Slootweg
Tags: mongodb, downside, sven-slootweg, json, document-store, postgresql, acid
Do you really get classloaders? I&amp;rsquo;ve watched this video by Jevgeny Kabanov on classloaders: what they are, how they work nad some tips to solve common issues.</description>
    </item>
    
    <item>
      <title>Self-Study in August 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</link>
      <pubDate>Sun, 02 Aug 2015 21:45:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</guid>
      <description>Humble Object I&amp;rsquo;ve read the Humble Object list of patterns, by Gerard Meszaros, including:
 humble dialog humble executable humble transaction controller humble container adapter  Tags: pattern, gerard-meszaros
How you know I&amp;rsquo;ve reread this small essay by Paul Graham on storing information in our heads, based on the context. On the importance of rereading, to add more contexts to the initial one.
Tags: paul-graham, reread, read
Protected Variation: The Importance of Being Closed I&amp;rsquo;ve read this article by Craig Larman in the magazine IEEE Software &amp;gt; Design.</description>
    </item>
    
  </channel>
</rss>
