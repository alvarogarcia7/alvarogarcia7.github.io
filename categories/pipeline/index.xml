<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pipeline on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/pipeline/</link>
    <description>Recent content in pipeline on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Mar 2017 11:09:28 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/pipeline/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Convert a project from npm to yarn</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/03/convert-a-project-from-npm-to-yarn/</link>
      <pubDate>Fri, 03 Mar 2017 11:09:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/03/convert-a-project-from-npm-to-yarn/</guid>
      <description>At a client, we&amp;rsquo;re converting all projects (i.e., sites, services, libraries) from npm to yarn. Mostly for the speed (as it uses the internal cache).
Step by step guide  Install yarn in your local environment * https://yarnpkg.com/lang/en/docs/install/ Run yarn install * This will create a yarn.lock file * Add that file to the repo: git add yarn.lock Modify Dockerfile * Install yarn (in the Dockerfile). Idea: shortcut this execution with yarn --version in case it is installed * Configure the PATH variable (ENV PATH &amp;hellip;) * ADD yarn.</description>
    </item>
    
    <item>
      <title>Tool: Building a local pipeline</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/10/tool_building_local_pipeline/</link>
      <pubDate>Sat, 10 Oct 2015 11:06:58 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/10/tool_building_local_pipeline/</guid>
      <description>Motivation At a client, one of the projects has a long building process and the tests are mostly slow, so I use a local building pipeline, an example of the Pipes and Filters pattern.
This allows for executing manually only the fast unit tests, then automatically (no user intervention, no time spent) executing the rest of them before pushing. In case the latter fails, it is possible to do git push -f to the pipeline without corrupting the central repository (origin) history, possibly disturbing others.</description>
    </item>
    
  </channel>
</rss>
