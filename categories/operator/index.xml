<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>operator on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/operator/</link>
    <description>Recent content in operator on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Oct 2022 00:00:00 +0400</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/operator/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self-Study in October 2022</title>
      <link>https://alvarogarcia7.github.io/blog/2022/10/01/self-study-october-2022/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0400</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2022/10/01/self-study-october-2022/</guid>
      <description>The Art of Logging https://news.ycombinator.com/item?id=33054741
Tags: imported, hacker-news
Id: 02a22390-c1a1-11ed-b61a-0242ac110004 Read: Sun Oct 2 10:42:15 2022
“Rust is safe” is not some kind of absolute guarantee of code safety https://news.ycombinator.com/item?id=33056077
Tags: imported, hacker-news
Id: 12483f20-c1a4-11ed-84be-0242ac110004 Read: Sun Oct 2 14:20:21 2022
Have lots of AWS accounts Using the physical separation of your AWS accounts as a way to isolate the data and services
https://news.ycombinator.com/item?id=33069547
Tags: aws, aws-account, physical-isolation, isolation, data-isolation, risk-management, imported, hacker-news</description>
    </item>
    
    <item>
      <title>The language was prepared for that</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/10/the-language-was-prepared-for-that/</link>
      <pubDate>Mon, 10 Aug 2015 00:58:33 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/10/the-language-was-prepared-for-that/</guid>
      <description>Many times I&amp;rsquo;ve written this function:
public boolean between(int lowerBound, int n, int upperBound){ return lowerBound &amp;lt;= n &amp;amp;&amp;amp; n &amp;lt;= upperBound; } It may depend on the case, whether it is [], [), (] or (), to use mathematical terms.
When the two comparisons are the same ([] and ()), there is duplication in the comparisons.
Investigating a little bit on this in clojure, I&amp;rsquo;ve found this function:
&amp;lt;= And its clojuredocs: Returns non-nil if nums are in monotonically non-decreasing order, otherwise false.</description>
    </item>
    
  </channel>
</rss>
