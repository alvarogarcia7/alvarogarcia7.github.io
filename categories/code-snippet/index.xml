<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/code-snippet/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/code-snippet/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Refactoring functional code</title>
      <link>https://alvarogarcia7.github.io/articles/2016/09/28/refactoring-functional-code/</link>
      <pubDate>Wed, 28 Sep 2016 20:36:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/articles/2016/09/28/refactoring-functional-code/</guid>
      <description>&lt;p&gt;With my pairing mate we have refactored this piece of functional code.&lt;/p&gt;

&lt;p&gt;Original code:&lt;/p&gt;
function filterTokens (rawTokens) {
  const cleanedTokens = rawTokens.map(token =&gt; (token.length &amp;&amp; token[0] === &#39;-&#39;) ? token.substring(1) : token)
  return cleanedTokens.filter(token =&gt; token !== &#39;&#39; &amp;&amp; stopWordsArray.indexOf(token) === -1)
}

&lt;p&gt;Refactored code:&lt;/p&gt;
function filterTokens (rawTokens) {
  const cleanedTokens = rawTokens.map(token =&gt; startsWithADash(token) ? removeDashFrom(token) : token)
  const processedTokens = cleanedTokens.filter(token =&gt; isNotEmpty(token) &amp;&amp; isNotAStopWord(token))
  return processedTokens

  function startsWithADash (token) {
    return (token.length &amp;&amp; token[ 0 ] === &#39;-&#39;)
  }

  function removeDashFrom (token) {
    return token.substring(1)
  }

  function isNotAStopWord (token) {
    return stopWordsArray.indexOf(token) === -1
  }

  function isNotEmpty (token) {
    return token !== &#39;&#39;
  }
 }

&lt;p&gt;These two codes do the same, but the second reads better, given that each small concept (e.g., &lt;code&gt;cleanedTokens&lt;/code&gt;) or operation (e.g., &lt;code&gt;removeDashFrom&lt;/code&gt;) has a name. Even the returned value, usually &lt;code&gt;result&lt;/code&gt;, has an appropiate name. The machine will optimize that variable assignment to a variable but the human reader will dig deeper only if required.&lt;/p&gt;

&lt;p&gt;Writing functional code should not be an excuse to forget about clean code. The two are independent variables.&lt;/p&gt;

&lt;p&gt;We have found that the second reads better than the first one, but we have reached this conclusion because we have similar values and practices.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>