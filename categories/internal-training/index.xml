<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Internal Training on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/internal-training/</link>
    <description>Recent content in Internal Training on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jun 2015 22:20:09 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/internal-training/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Internal training: BPM: Process and tools for developers</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/02/internal-training-bpm-process-and-tools-for-developers/</link>
      <pubDate>Tue, 02 Jun 2015 22:20:09 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/02/internal-training-bpm-process-and-tools-for-developers/</guid>
      <description>&lt;p&gt;At a client, I&amp;rsquo;ve presented today an internal training on &amp;ldquo;BPM: Process and tools for developers&amp;rdquo;&lt;/p&gt;

&lt;p&gt;In it, we have introduced the BPM concept and the main ideas in Activiti BPM.&lt;/p&gt;

&lt;p&gt;Also techniques for hotswapping processes, tips and how-tos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Internal training: QA &amp;amp; how to test</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/18/internal-training-qa-amp-how-to-test/</link>
      <pubDate>Mon, 18 May 2015 22:20:09 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/18/internal-training-qa-amp-how-to-test/</guid>
      <description>

&lt;p&gt;At a client, we&amp;rsquo;ve done today an internal training on &amp;ldquo;QA &amp;amp; how to test&amp;rdquo;. In it, the most skilled person with the QA role in the dev team has explained to us some techniques and concepts for testing&lt;/p&gt;

&lt;h2 id=&#34;my-notes&#34;&gt;My notes&lt;/h2&gt;

&lt;p&gt;Verification vs validation: building the product right vs building the right product.&lt;/p&gt;

&lt;h3 id=&#34;principles&#34;&gt;Principles&lt;/h3&gt;

&lt;p&gt;Extracted from &lt;a href=&#34;http://www.istqb.org/&#34; target=&#34;_blank&#34;&gt;ISTQB&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;testing shows presence of defects&lt;/li&gt;
&lt;li&gt;exhaustive testing is impossible&lt;/li&gt;
&lt;li&gt;early testing is better than later testing&lt;/li&gt;
&lt;li&gt;defect clustering: areas with bigger defect ratio or more critical, etc should be tested more thoroughly&lt;/li&gt;
&lt;li&gt;pesticide paradox&lt;/li&gt;
&lt;li&gt;testing is context-dependent&lt;/li&gt;
&lt;li&gt;absence of errors fallacy: the absence of defects does not imply perfect software. There are also problems with validation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;techniques&#34;&gt;Techniques&lt;/h3&gt;

&lt;h4 id=&#34;people-based&#34;&gt;People-based&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;bug bashes: e.g., time-constrained&lt;/li&gt;
&lt;li&gt;subject-matter expert testing&lt;/li&gt;
&lt;li&gt;eat your own dogfood&lt;/li&gt;
&lt;li&gt;others&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;activity-based&#34;&gt;Activity-based&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;regression&lt;/li&gt;
&lt;li&gt;scripted (manual)&lt;/li&gt;
&lt;li&gt;smoke&lt;/li&gt;
&lt;li&gt;exploratory&lt;/li&gt;
&lt;li&gt;installation&lt;/li&gt;
&lt;li&gt;load&lt;/li&gt;
&lt;li&gt;long sequence&lt;/li&gt;
&lt;li&gt;performance&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;coverage-based&#34;&gt;Coverage-based&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;menu tour: exploration based on menus (especially on websites)&lt;/li&gt;
&lt;li&gt;functional and system testing&lt;/li&gt;
&lt;li&gt;integration&lt;/li&gt;
&lt;li&gt;logic&lt;/li&gt;
&lt;li&gt;state-based&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;requirements-based&#34;&gt;Requirements-based&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Equivalence partitioning: examples in the same set are considered equivalent&lt;/li&gt;
&lt;li&gt;Boundary based: there are interesting examples around and on the boundaries&lt;/li&gt;
&lt;li&gt;Decision tables: truth table&lt;/li&gt;
&lt;li&gt;State transition tables: state diagram&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;risk-based&#34;&gt;Risk-based&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;make a prioritized list: probability and impact&lt;/li&gt;
&lt;li&gt;perform testing exploring each risk&lt;/li&gt;
&lt;li&gt;after a risk disappears, another opens. Adjust your test effort to stay focused on the current crop&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;use-case-tests&#34;&gt;Use case tests&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;use case: a common case that represents one of your customer&amp;rsquo;s cases&lt;/li&gt;
&lt;li&gt;use busines language&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;structure-based&#34;&gt;Structure-based&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;test coverage is different than code coverage&lt;/li&gt;
&lt;li&gt;test coverage is based on decision tables&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;defining-testing-priorities&#34;&gt;Defining testing priorities&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;customer and contractual requirements&lt;/li&gt;
&lt;li&gt;regulatory&lt;/li&gt;
&lt;li&gt;experience-based&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Best representative&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Internal training: Testing is hard - just do it</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard---just-do-it/</link>
      <pubDate>Tue, 05 May 2015 23:00:17 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard---just-do-it/</guid>
      <description>

&lt;p&gt;At a client, last week I&amp;rsquo;ve organized an internal training, in the form of a discussion about this article: &lt;a href=&#34;http://davidsouther.com/#/posts/2013/10/30/testing-its-hard-just-do-it/&#34; target=&#34;_blank&#34;&gt;Testing is hard - just do it&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;our-thoughts&#34;&gt;Our thoughts&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;When a bug is found, prove it exists with a test&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This immediately reduces defect rate: the same regression cannot be introduced again&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;fix a bug a second time&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If fixing a bug (having defects in your code) was &amp;lsquo;waste&amp;rsquo;, as defined by lean methodologies, it also is wast fixing it for the following times&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;testing requires discipline&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Agree. See quote by Larry Wall (this same article)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[Three requirements for a good test suite]:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The tests need to be easier to write&lt;/li&gt;
&lt;li&gt;The test suite must run, and pass, before any code is allowed out the door&lt;/li&gt;
&lt;li&gt;Support from the project&amp;rsquo;s leadership&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Agree.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Programming is like drawing water from a well&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good analogy&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m going to assume you are smarter than me [&amp;hellip;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is related to &amp;lsquo;doing clever things&amp;rsquo;: when I write &amp;lsquo;clever code&amp;rsquo;, that has neither comments, nor it is massaged to be Clean Code, it will cost me many times more to modify / understand in the future vs massage it a little bit.&lt;/p&gt;

&lt;p&gt;For me, an example of clever code are certain bitwise operations. Even though these operations are publicly available on websites and books, you must know about them before understanding the code.&lt;/p&gt;

&lt;p&gt;Another example of clever code is taking assumptions, even if they are valid. Example: always return the second element because the first one is the header&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;vs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;selectFirstValidLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;validElements&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;skipHeader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;validElements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;open-questions-other-ideas&#34;&gt;Open questions / other ideas&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There are tests that are more important than others. Is there a tool to assign them weights and inform about which preponderation of the codebase is broken? The same (i.e., more importance) can happen for production code.&lt;/li&gt;
&lt;li&gt;Is SCRUM apt for junior developers? In the sense of the increased autonomy, more decisions, more required technical skills / values, etc&lt;/li&gt;
&lt;li&gt;We discussed what differentiates a project with a shorter deadline from one with a longer deadline. The consensus was: you should do tests for any kind of project, the shorter deadline project won&amp;rsquo;t allow as much time for refactoring&lt;/li&gt;
&lt;li&gt;Tests iff (i.e., if and only if) working code&lt;/li&gt;
&lt;li&gt;Tests do not guarantee lack of defects&lt;/li&gt;
&lt;li&gt;Bijectiveness between tests and features (production code)
&lt;!--
Expand on this bijectiveness
--&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Internal training: Introduction to AngularJs</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/30/internal-training-introduction-to-angularjs/</link>
      <pubDate>Thu, 30 Apr 2015 20:22:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/30/internal-training-introduction-to-angularjs/</guid>
      <description>&lt;p&gt;At a client, today I&amp;rsquo;ve done an internal training on &lt;a href=&#34;https://angularjs.org/&#34; target=&#34;_blank&#34;&gt;angular js&lt;/a&gt;: we&amp;rsquo;ve prepared some &lt;a href=&#34;https://github.com/alvarogarcia7/demo-frontend-angularjs/tree/master/slides&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt; and a live demo.&lt;/p&gt;

&lt;p&gt;The repository with all the information can be found &lt;a href=&#34;https://github.com/alvarogarcia7/demo-frontend-angularjs&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Apparently, the training has been a success, given that most of the talent in the team is backend focused (as opposed to full-stack) and changing from java to javascript is not straight-forward.&lt;/p&gt;

&lt;p&gt;Note: this post has been created a posteriori, dated with the correct training timestamp.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Open discussion: On code reviews</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/07/open-discussion-on-code-reviews/</link>
      <pubDate>Sat, 07 Feb 2015 18:54:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/07/open-discussion-on-code-reviews/</guid>
      <description>

&lt;p&gt;At a client, I organized an open discussion on code reviews. We had a great conversation.&lt;/p&gt;

&lt;p&gt;The main idea was to discuss about it and share the ideas each one had. I didn&amp;rsquo;t want it to turn into a masterclass (see &lt;a href=&#34;http://chimera.labs.oreilly.com/books/1234000001813/ch02.html#the_white_belt&#34; target=&#34;_blank&#34;&gt;the white belt&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;benefits&#34;&gt;Benefits&lt;/h2&gt;

&lt;p&gt;These are the main benefits we saw in it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Increased trust&lt;/li&gt;
&lt;li&gt;Learning from others, other approaches&lt;/li&gt;
&lt;li&gt;Less defects, more quality&lt;/li&gt;
&lt;li&gt;Increased &lt;a href=&#34;http://en.wikipedia.org/wiki/Bus_factor&#34; target=&#34;_blank&#34;&gt;bus factor&lt;/a&gt;, decreased information silos&lt;/li&gt;
&lt;li&gt;Also:

&lt;ul&gt;
&lt;li&gt;Getting out of your comfort zone&lt;/li&gt;
&lt;li&gt;Communicating more often (code style, edge cases, complaining, etc)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pair-programming&#34;&gt;Pair programming&lt;/h2&gt;

&lt;p&gt;Then we discussed about the topic of &lt;a href=&#34;https://alvarogarcia7.github.io/{{site.category_dir}}/code-review&#34;&gt;code reviews&lt;/a&gt; and &lt;a href=&#34;https://alvarogarcia7.github.io/{{site.category_dir}}/pair-programming/&#34;&gt;pair programming&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How do they mix&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is the need for code review reduced when doing pair programming?&lt;/li&gt;
&lt;li&gt;It is cheaper to catch defects when pairing than code review (e.g., less to modify, mental caches are hot, &amp;hellip;), so why do code reviews? &lt;a href=&#34;https://twitter.com/jbrains&#34; target=&#34;_blank&#34;&gt;J. B. Rainsberger&lt;/a&gt; has an &lt;a href=&#34;http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=acc77a0fb2&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;article&lt;/a&gt; about it&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Does it give you the same benefits?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I argued that it does, some of my colleagues argued against as one is &amp;ldquo;while doing&amp;rdquo; and the other is after.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;practice-practice-practice&#34;&gt;Practice, Practice, Practice&lt;/h2&gt;

&lt;p&gt;This is also a reference to a chapter by the same name (&lt;a href=&#34;http://chimera.labs.oreilly.com/books/1234000001813/ch05.html#practice_comma_practice_comma_practice&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;We proposed this problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Receive a list of numbers to a command-line (CLI) application and print their sum&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I wrote simple code listing and we reviewed it. The code is &lt;a href=&#34;https://gist.github.com/alvarogarcia7/258faea12cb9375539fe&#34; target=&#34;_blank&#34;&gt;here as a gist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Just in case, I wrote this listing with some defects / smells on purpose)&lt;/p&gt;

&lt;p&gt;Here are the comments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not all parameters will be added, only the first three&lt;/li&gt;
&lt;li&gt;The parameters are out of order, overcomplicating things. Is it due to something? Should I be careful about it?&lt;/li&gt;
&lt;li&gt;There is duplication (i.e., parsing from string)&lt;/li&gt;
&lt;li&gt;Bad naming: what is &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;There are no tests for it. No manual / javadoc either. Therefore, it&amp;rsquo;s difficult to maintain&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Difficult to test: a smell for bad design?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to test the adding by itself? The output is to the console, so we have to capture it (at GMaur we published this tool: &lt;a href=&#34;https://github.com/GMaur/legacyutils&#34; target=&#34;_blank&#34;&gt;legacyUtils&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;How to test the parsing if there is no mock to be injected? Only via state tests, therefore &amp;ldquo;end to end&amp;rdquo; tests as it includes the adding&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mixed concerns / responsibilities. Parsing the numbers and adding them are different concerns and should not be together&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;No one was against it&lt;/li&gt;
&lt;li&gt;We all agreed that is important to do it even in time-constrained environments&lt;/li&gt;
&lt;li&gt;It is also important to review our code reviews to make the most of it. The article by &lt;a href=&#34;http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=acc77a0fb2&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;J. B. Rainsberger&lt;/a&gt; is quite useful for that&lt;/li&gt;
&lt;li&gt;Even small codes can be bad and need to be reviewed (as the example)&lt;/li&gt;
&lt;li&gt;Quick and dirty proof of concept do not mix well with code reviews&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>