<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/life/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/life/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in January 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/01/01/self-study-in-january-2017/</link>
      <pubDate>Sun, 01 Jan 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/01/01/self-study-in-january-2017/</guid>
      <description>

&lt;h2 id=&#34;translation-from-haskell-to-javascript-of-selected-portions-of-the-best-introduction-to-monads-i-ve-ever-read&#34;&gt;Translation from Haskell to JavaScript of selected portions of the best introduction to monads I’ve ever read&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.jcoglan.com/2011/03/05/translation-from-haskell-to-javascript-of-selected-portions-of-the-best-introduction-to-monads-ive-ever-read/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by James Coglan, introducing monads.&lt;/p&gt;

&lt;p&gt;About composability:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The symmetry of the argument and return types is what makes these functions composable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;symmetric input and output types&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Guide to basic monadic functions:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;lift, which converts a &amp;lsquo;simple’ function into a debuggable function
bind, which converts a debuggable function into a composable form
unit, which converts a simple value into the format required for debugging, by placing it in a container&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The basic definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So what is a monad? Well, it’s a design pattern. It says that whenever you have a class of functions that accept one type of thing and return another type of thing, there are two functions that can be applied across this class to make them composable:&lt;/p&gt;

&lt;p&gt;There is a &lt;code&gt;bind&lt;/code&gt; function that transforms any function so that accepts the same type as it returns, making it composable
There is a &lt;code&gt;unit&lt;/code&gt; function that wraps a value in the type accepted by the composable functions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[I]t’s a very useful design pattern to be aware of because it helps you spot accidental complexity: code that isn’t dealing directly with the problem at hand, but which is dealing with glueing data types together&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: monad, monad-explanation, haskell, javascript, james-coglan, bind, unit, lift&lt;/p&gt;

&lt;h2 id=&#34;you-could-have-invented-monads-and-maybe-you-already-have&#34;&gt;You Could Have Invented Monads! (And Maybe You Already Have.)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html&#34; target=&#34;_blank&#34;&gt;this tutorial&lt;/a&gt; by Dan Piponi, in which he slowly introduces monads, using examples from everyday life.&lt;/p&gt;

&lt;p&gt;Tags: dan-piponi, monad, monad-explanation, haskell&lt;/p&gt;

&lt;h2 id=&#34;monads-part-one&#34;&gt;Monads, part one&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/02/21/monads-part-one/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes monads as a design pattern that &amp;ldquo;can sneak up on you&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-two&#34;&gt;Monads, part two&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/02/25/monads-part-two/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes monad examples in the C# code. Also describes what an &amp;lsquo;amplifier&amp;rsquo; is. I relate it to composing behavior.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An &amp;ldquo;amplifier&amp;rdquo; is something that increases the representational power of their &amp;ldquo;underlying&amp;rdquo; type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming, amplifier&lt;/p&gt;

&lt;h2 id=&#34;monads-part-three&#34;&gt;Monads, part three&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/02/28/monads-part-three/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes how to wrap a value in a monadic wrapper (&lt;code&gt;unit&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-four&#34;&gt;Monads, part four&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/04/monads-part-four/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he explains the second function (&lt;code&gt;bind&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-five&#34;&gt;Monads, part five&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/07/monads-part-five/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he explains the three laws, which are later compressed into two (&lt;code&gt;unit&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-six&#34;&gt;Monads, part six&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/11/monads-part-six/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he explains the logical identity of applying the function inside a monad and outside a monad.&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-seven&#34;&gt;Monads, part seven&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/14/monads-part-seven/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he states the three laws of monads:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Applying the construction function to a given instance of the monad produces a logically identical instance of the monad.&lt;/li&gt;
&lt;li&gt;Applying a function to the result of the construction function on a value, and applying that function to the value directly, produces two logically identical instances of the monad.&lt;/li&gt;
&lt;li&gt;Applying to a value a first function followed by applying to the result a second function, and applying to the original value a third function that is the composition of the first and second functions, produces two logically identical instances of the monad.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-eight&#34;&gt;Monads, part eight&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/18/monads-part-eight/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes the monad terms he was using other, more common names (&lt;code&gt;unit&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-nine&#34;&gt;Monads, part nine&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/21/monads-part-nine/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he creates a &lt;code&gt;Tainted&lt;/code&gt; monad, which is basically a &lt;code&gt;Nullable&lt;/code&gt; or &lt;code&gt;Maybe&lt;/code&gt; monad&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-ten&#34;&gt;Monads, part ten&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/25/monads-part-ten/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes &lt;code&gt;Where&lt;/code&gt; (as the query syntax form) using the &lt;code&gt;bind&lt;/code&gt; signature&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-eleven&#34;&gt;Monads, part eleven&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/28/monads-part-eleven/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes the &amp;ldquo;additive monad&amp;rdquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;There is a zero value of every construction of the monadic type.&lt;/li&gt;
&lt;li&gt;There is a way to add two monads with the same underlying type together.&lt;/li&gt;
&lt;li&gt;The zero value is the identity of the add operation.&lt;/li&gt;
&lt;li&gt;Using bind to apply any function to the zero produces the zero.&lt;/li&gt;
&lt;li&gt;Using bind to apply the function &lt;code&gt;a=&amp;gt;zero&lt;/code&gt; to any &lt;code&gt;M&amp;lt;A&amp;gt;&lt;/code&gt; produces the zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming, additive-monad&lt;/p&gt;

&lt;h2 id=&#34;monads-part-twelve&#34;&gt;Monads, part twelve&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/04/02/monads-part-twelve/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he explains how the &lt;code&gt;SelectMany&lt;/code&gt; could be implemented (but it is not implemented in practice)&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-thirteen&#34;&gt;Monads, part thirteen&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/04/03/monads-part-thirteen/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he suggests reading a similar article on the Task comonad&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming, comonad&lt;/p&gt;

&lt;h2 id=&#34;tasks-monads-and-linq&#34;&gt;Tasks, Monads, and LINQ&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blogs.msdn.microsoft.com/pfxteam/2013/04/03/tasks-monads-and-linq/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Stephen Toub in which he explains the comonad &lt;code&gt;Task&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A comonad:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] dual of a monad, a triple consisting of the type and two operators: &lt;code&gt;Extract&lt;/code&gt; (the flip of &lt;code&gt;Unit&lt;/code&gt;/&lt;code&gt;Return&lt;/code&gt;) and &lt;code&gt;Extend&lt;/code&gt; (the flip of &lt;code&gt;Bind&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: comonad, monad, monad-explanation, stephen-toub, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;5-questions-every-unit-test-must-answer&#34;&gt;5 Questions Every Unit Test Must Answer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/javascript-scene/what-every-unit-test-needs-f6cd34d9836d&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; (titled as a listicle) by Eric Elliot about unit tests:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;What are you testing?&lt;/li&gt;
&lt;li&gt;What should it do?&lt;/li&gt;
&lt;li&gt;What is the actual output?&lt;/li&gt;
&lt;li&gt;What is the expected output?&lt;/li&gt;
&lt;li&gt;How can the test be reproduced?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: eric-elliott, javascript, unit-test, test&lt;/p&gt;

&lt;h2 id=&#34;why-you-should-be-planning-for-2018-not-2017&#34;&gt;Why You Should be Planning for 2018, Not 2017.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/the-mission/why-you-should-be-planning-for-2018-not-2017-7c8fea3e2e52&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Benjamin P. Hardy on motivation, planning and designing your life.&lt;/p&gt;

&lt;p&gt;Some quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] having the power to make choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The right to choice&lt;/li&gt;
&lt;li&gt;The responsibility to choose&lt;/li&gt;
&lt;li&gt;The results of choice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[&amp;hellip;] hope reflects your perceptions regarding your capacity to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clearly conceptualize goals&lt;/li&gt;
&lt;li&gt;develop the specific strategies to reach those goals (i.e., pathways thinking)&lt;/li&gt;
&lt;li&gt;initiate and sustain the motivation for using those strategies (i.e., agency thinking).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[&amp;hellip;] motivation involves three components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the value you place on your goal&lt;/li&gt;
&lt;li&gt;your belief that specific behaviors will actually facilitate the outcomes you desire&lt;/li&gt;
&lt;li&gt;your belief in your own ability to successfully execute the behaviors requisite to achieving your goals&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: benjamin-hardy, motivation, life, planning, long-term-plans&lt;/p&gt;

&lt;h2 id=&#34;get-5-better&#34;&gt;Get 5% Better&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.farnamstreetblog.com/2016/03/five-percent-better/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, in which the author explains how compound interest does not only apply to investing and saving but also personal improvement.&lt;/p&gt;

&lt;p&gt;Tags: kaizen, personal-improvement, compound-interest&lt;/p&gt;

&lt;h2 id=&#34;hunter-s-thompson-s-letter-on-finding-your-purpose-and-living-a-meaningful-life&#34;&gt;Hunter S. Thompson’s Letter on Finding Your Purpose and Living a Meaningful Life&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.farnamstreetblog.com/2014/05/hunter-s-thompson-to-hume-logan/&#34; target=&#34;_blank&#34;&gt;this letter&lt;/a&gt; from Hunter S. Thompson to his friend Hume Logan, containing advice on living your own life: must find your own way, decide between floating or swimming to your goal and strive to be yourself.&lt;/p&gt;

&lt;p&gt;Tags: hunter-thompson, hume-logan, advice, psychology, life&lt;/p&gt;

&lt;h2 id=&#34;the-japanese-philosophy-of-kaizen-offers-an-effective-manageable-way-to-achieve-long-term-goals&#34;&gt;The Japanese philosophy of Kaizen offers an effective, manageable way to achieve long-term goals&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://qz.com/867711/the-japanese-philosophy-of-kaizen-offers-an-effective-manageable-way-to-achieve-long-term-goals/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Thomas Oppong on kaizen, or continuous improvement, and how it applies like compound interest to your life.&lt;/p&gt;

&lt;p&gt;Tags: kaizen, continous-improvement, thomas-oppong, compound-interest, life, psychology&lt;/p&gt;

&lt;h2 id=&#34;preparing-for-a-software-interview&#34;&gt;Preparing for a Software Interview&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://42hire.com/preparing-for-a-software-interview-6d0392a3d72c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Alvaro Videla on interviewing technical people.&lt;/p&gt;

&lt;p&gt;Tags: recruitement, interviewing, interview, alvaro-videla&lt;/p&gt;

&lt;h2 id=&#34;why-recursive-data-structures&#34;&gt;Why Recursive Data Structures?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://raganwald.com/2016/12/27/recursive-data-structures.html&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Reginald “Raganwald” Braithwaite, on which he introduces the relationship between data structures and algorithms. Explains how the algorithm can be split into parts, following the data structure.&lt;/p&gt;

&lt;p&gt;Uses a library containing a function called &amp;lsquo;multirec&amp;rsquo; for recursion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/multirec&#34; target=&#34;_blank&#34;&gt;a candidate&lt;/a&gt; library, in haskell&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lazutkin.com/blog/2008/06/30/using-recursion-combinators-javascript/&#34; target=&#34;_blank&#34;&gt;another candidate&lt;/a&gt; library, in javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: reginald-braithwaite, recursive-data-structure, quadtree, javascript, functional-programming, essay, data-structure, isomorphic, tree, multirec, linrec, tailrec, haskell&lt;/p&gt;

&lt;h2 id=&#34;leading-by-example&#34;&gt;Leading by Example&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.codinghorror.com/leading-by-example/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jeff Atwood on how the best leadership comes from doing, rather than telling how to do it. From being a leader rather than being a boss.&lt;/p&gt;

&lt;p&gt;Suggests further reads.&lt;/p&gt;

&lt;p&gt;Tags: leadership, team-lead, leading-by-example, jeff-atwood, gerald-weinberg&lt;/p&gt;

&lt;h2 id=&#34;discipline-makes-strong-developers&#34;&gt;Discipline Makes Strong Developers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.codinghorror.com/discipline-makes-strong-developers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jeff Atwood on a project sucess should not be attributed to a language or framework, but to the team&amp;rsquo;s and individuals&amp;rsquo; discipline.&lt;/p&gt;

&lt;p&gt;Also explains how small projects require different levels of discipline than large projects.&lt;/p&gt;

&lt;p&gt;Tags: leadership, discipline, nasa, code-complete, coding-horror, jeff-atwood&lt;/p&gt;

&lt;h2 id=&#34;effectively-integrating-into-software-development-teams&#34;&gt;Effectively Integrating Into Software Development Teams&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://dennisforbes.ca/index.php/2006/01/29/effectively-integrating-into-software-development-teams/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Dennis Forbes about authority and discipline in a team.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One organization’s Enterprise solution is another organization’s short sighted mistake.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: shiny, dennis-forbes, discipline, authority, psychology, politics&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in May 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/05/01/self-study/</link>
      <pubDate>Sun, 01 May 2016 00:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/05/01/self-study/</guid>
      <description>

&lt;h2 id=&#34;being-a-developer-after-40&#34;&gt;Being A Developer After 40&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.freecodecamp.com/being-a-developer-after-40-3c5dd112210c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Adrian Kosmaczewski on the required topics to be a developer at age 40 and keep enjoying it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forget The Hype&lt;/li&gt;
&lt;li&gt;Choose Your Galaxy Wisely&lt;/li&gt;
&lt;li&gt;Learn About Software History&lt;/li&gt;
&lt;li&gt;Keep on Learning&lt;/li&gt;
&lt;li&gt;Teach&lt;/li&gt;
&lt;li&gt;Workplaces Suck&lt;/li&gt;
&lt;li&gt;Know Your Worth&lt;/li&gt;
&lt;li&gt;Send The Elevator Down&lt;/li&gt;
&lt;li&gt;LLVM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He references galaxy, the big stack you are positioned (JVM, .net, PHP, etc). He makes a special mention of the LLVM&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Take conscious decisions in your life. Be aware of your actions and their effect. Do not blush or be embarrased for changing your opinions. Say “I’m sorry” when required. Listen. Do not be a hotshot. Have integrity and self-respect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recommends these books:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dealers of Lightning by Michael A. Hiltzik&lt;/li&gt;
&lt;li&gt;Revolution in the Valley by Andy Hertzfeld&lt;/li&gt;
&lt;li&gt;The Cathedral and the Bazaar by Eric S. Raymond&lt;/li&gt;
&lt;li&gt;The Success of Open Source by Steven Weber&lt;/li&gt;
&lt;li&gt;The Old New Thing by Raymond Chen&lt;/li&gt;
&lt;li&gt;The Mythical Man Month by Frederick P. Brooks Jr.&lt;/li&gt;
&lt;li&gt;Peopleware by Tom DeMarco and Tim Lister&lt;/li&gt;
&lt;li&gt;The Psychology of Software Programming by Gerald M. Weinberg&lt;/li&gt;
&lt;li&gt;Facts and Fallacies of Software Engineering by Robert L. Glass&lt;/li&gt;
&lt;li&gt;The Design of Everyday Things by Don Norman&lt;/li&gt;
&lt;li&gt;Agile!: The Good, the Hype and the Ugly by Bertrand Meyer&lt;/li&gt;
&lt;li&gt;Rework by Jason Fried and David Heinemeier Hansson&lt;/li&gt;
&lt;li&gt;Geekonomics by David Rice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: adrian-kosmaczewski, career, profession, age, galaxy, long-term, book&lt;/p&gt;

&lt;h2 id=&#34;firing-people&#34;&gt;Firing people&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://zachholman.com/talk/firing-people&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Zach Holman on firing people at your current work, both from the perspective of the employee (fired), employer, coworker.&lt;/p&gt;

&lt;p&gt;Also explains his personal experience of being fired from Github.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You’ll know the difference between doing far and away your best work, and doing work that is still good, but just nominally better than what you’ve been doing. Once you catch yourself adjusting to that incremental progression… maybe it’s time to leave, to change things up&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: zach-holman, github, team-management, firing, coworker, employee, employer, job, relationship, next&lt;/p&gt;

&lt;h2 id=&#34;10-design-principles-for-developers&#34;&gt;10 design principles — for developers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@nirbenita/the-10-design-heuristics-for-developers-1e70a9dc58a7&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains what are the 10 design principles for programmers, as outlined by Jakob Nielsen. The article itself is by Nir Benita&lt;/p&gt;

&lt;p&gt;Tags: design-principle, ux, jakob-nielsen, nir-benita, usability, testing, list&lt;/p&gt;

&lt;h2 id=&#34;design-patterns-coming-full-circle-part-two&#34;&gt;Design Patterns — Coming Full Circle, Part Two&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/swlh/design-patterns-coming-full-circle-part-two-ced2c69e4724#.x8ud7eeqm&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains how design patterns can be observed and then discovered and shows a list of four patterns dot working with data, by flux.io. Article by Jen Carlile&lt;/p&gt;

&lt;p&gt;Tags: design-pattern, data, pattern, flux, flux-io, pattern-catalog, jen-carlile&lt;/p&gt;

&lt;h2 id=&#34;why-i-m-ending-my-github-streak-after-844-days&#34;&gt;Why I’m Ending my Github Streak after 844 Days&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@karan/why-i-m-ending-my-github-streak-after-844-days-80fd014dc8df&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Karan Goel on the mechanics of following a pattern, of an activity sliced in small parts (1 problem a day or half an hour) and how this can be counterproductive sometimes.&lt;/p&gt;

&lt;p&gt;Discusses ROI of this type of activity at the beginning of your career and later.&lt;/p&gt;

&lt;p&gt;Tags: karan-goel, github, streak, python, code, everyday, practice, deliberate-practice, career, career-management&lt;/p&gt;

&lt;h2 id=&#34;good-lessons-learned-from-past-jobs&#34;&gt;Good lessons learned from past jobs&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.kartones.net/post/good-lessons-learned-from-past-jobs/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Diego &amp;lsquo;Kartones&amp;rsquo; on a synopsis of his work experience, job by job and what he has learned on each job.&lt;/p&gt;

&lt;p&gt;Tags: diego-kartones, job, professional-career, career&lt;/p&gt;

&lt;h2 id=&#34;too-much-work-in-progress&#34;&gt;Too Much Work In Progress&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://monospacedmonologues.com/post/144137568985/too-much-work-in-progress&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Samir Talwar on factors that indicate work in progress.&lt;/p&gt;

&lt;p&gt;Tags: wip, work-in-progress, list, samir-talwar&lt;/p&gt;

&lt;h2 id=&#34;testdouble&#34;&gt;TestDouble&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.martinfowler.com/bliki/TestDouble.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Martin Fowler describing the test doubles that Gerard Meszaros describes in xUnit Test Patterns.&lt;/p&gt;

&lt;p&gt;Tags: test-double, martin-fowler, gerard-meszaros, stub, fake, mock, dummy, spy, xunit, junit, pattern, test-pattern&lt;/p&gt;

&lt;h2 id=&#34;scaling-to-12-million-concurrent-connections-how-migratorydata-did-it&#34;&gt;Scaling to 12 Million Concurrent Connections: How MigratoryData Did It&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://mrotaru.wordpress.com/2013/10/10/scaling-to-12-million-concurrent-connections-how-migratorydata-did-it/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mihai Rotaru on how MigratoryData scaled to 12 million concurrent connections in a 1U server. They explain what optimizations they did in order to achieve this.&lt;/p&gt;

&lt;p&gt;Tags: migratorydata, mihai-rotaru, concurrent-connection, 1u-server, scalability, websocket&lt;/p&gt;

&lt;h2 id=&#34;do-what-you-love&#34;&gt;Do what you love&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/do-what-you-love-jorge-diaz&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jorge Diaz on doing what takes you out of your comfort zone, changing careers, and life-work in general.&lt;/p&gt;

&lt;p&gt;Cites this &lt;a href=&#34;https://www.ted.com/talks/scott_dinsmore_how_to_find_work_you_love/transcript?language=en&#34; target=&#34;_blank&#34;&gt;TED talk: How to find work you love&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: jorge-diaz, work, life, career, comfort-zone, scott-dinsmore, career-management&lt;/p&gt;

&lt;h2 id=&#34;jhipster-the-best-way-to-breed-a-new-app&#34;&gt;JHipster - The best way to breed a new app&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/olbpetersson/jhipster-the-best-way-to-breed-a-new-app&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Ola Petersson, where he describes the architecture and contents of the jHipster, its pros and cons.&lt;/p&gt;

&lt;p&gt;Tags: jhipster, ola petersson, java, code-generation, code-generator, microservice&lt;/p&gt;

&lt;h2 id=&#34;how-going-to-coding-events-helped-me-get-an-awesome-job&#34;&gt;How going to coding events helped me get an awesome job&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.freecodecamp.com/networking-at-meet-ups-getting-hired-f0f7c4f4681a&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Gwendolyn Faraday on how to kickstart a career in web development, attending events, pairing and networking. That netted her some interviews to start programming for a living.&lt;/p&gt;

&lt;p&gt;Tags: networking, gwendolyn-faraday, event, job, learn-to-code&lt;/p&gt;

&lt;h2 id=&#34;maze-generation-algorithm-recap&#34;&gt;Maze Generation: Algorithm Recap&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://weblog.jamisbuck.org/2011/2/7/maze-generation-algorithm-recap&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of maze-generation algorithms by Jamis Buck. Including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;recursive backtracker&lt;/li&gt;
&lt;li&gt;Eller’s algorithm&lt;/li&gt;
&lt;li&gt;Kruskal’s algorithm&lt;/li&gt;
&lt;li&gt;Prim’s algorithm&lt;/li&gt;
&lt;li&gt;recursive division algorithm&lt;/li&gt;
&lt;li&gt;Aldous-Broder algorithm&lt;/li&gt;
&lt;li&gt;Wilson’s algorithm&lt;/li&gt;
&lt;li&gt;Hunt-and-Kill algorithm&lt;/li&gt;
&lt;li&gt;Growing Tree algorithm&lt;/li&gt;
&lt;li&gt;Binary Tree algorithm&lt;/li&gt;
&lt;li&gt;Sidewinder algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: recursive-backtracker,eller-algorithm,kruskal-algorithm,prim-algorithm,recursive-division-algorithm,aldous-broder-algorithm,wilson-algorithm,hunt-and-kill-algorithm,growing-tree-algorithm,binary-tree-algorithm,sidewinder-algorithm, jamis-buck, maze, maze-generation, algorithm, list&lt;/p&gt;

&lt;h2 id=&#34;the-poverty-of-constraints&#34;&gt;The Poverty of Constraints&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://weblog.jamisbuck.org/2016/3/19/poverty-of-constraints.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jamis Buck on interpreting two Korean proverbs in the world of software:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A dutiful son comes from a poor home&lt;/li&gt;
&lt;li&gt;A poor house has many children&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: proverb, korea, philosophy, software, constraint, jamis-buck&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>