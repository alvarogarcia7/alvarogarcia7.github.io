<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>versioning on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/versioning/</link>
    <description>Recent content in versioning on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jul 2018 07:03:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/versioning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Questioning the existing choices</title>
      <link>https://alvarogarcia7.github.io/blog/2018/07/04/questioning-existing-choices/</link>
      <pubDate>Wed, 04 Jul 2018 07:03:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/07/04/questioning-existing-choices/</guid>
      <description>Context For a client, we have worked on a service that works with files (containing sensitive data) that get corrupted very often.
The use case is generally:
 Two/Three file opens per day One modification per 10 file opens One corruption per 100 file opens  Initial solution The initial solution was just to copy the file (file.txt) before opening, after closing. This results in two files (YYY-MM-DDTHH-mm-ss_before_file.txt, YYY-MM-DDTHH-mm-ss_after_file.txt).
As this solution quickly became unmaintainable, the client developed a solution to hash the contents of the file and to remove the duplicated files.</description>
    </item>
    
  </channel>
</rss>
