<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scbcn on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/scbcn/</link>
    <description>Recent content in scbcn on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Dec 2015 09:50:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/scbcn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self-Study in December 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</link>
      <pubDate>Wed, 02 Dec 2015 09:50:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</guid>
      <description>Ruby Equality And Object Comparison I&amp;rsquo;ve read this article, written by Alan Skorkin, that explains equality comparisons in ruby:
 equal? is reference equality == is value equality eql? is value and type equality  Tags: ruby, comparison, equality, object, reference, alan-skorkin
Software Folklore I&amp;rsquo;ve watched this PechaKucha by Chris Ford on what are laws and how they relate to creating software. Also talks on what could be an analogy to software creation (says not science, not engineering)</description>
    </item>
    
    <item>
      <title>TDD microexercise: Tire pressure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/31/tdd-microexercise-tire-pressure/</link>
      <pubDate>Tue, 31 Mar 2015 23:13:45 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/31/tdd-microexercise-tire-pressure/</guid>
      <description>Yesterday, Manuel Rivero and I facilitated a workshop using the tire pressure TDD microexercise. (More microexercises can be found in this category, also here)
We scheduled the session as follows:
 10 minutes introduction to the exercise 10 minutes to download the code and take a first look 10 minutes explanation about the exercise, what the problem is, etc 30 minutes for the attendees to explore the solution (on their own) 10 minutes for commenting the explored solutions, comments about it 40 minutes of prepared kata format 10 minutes of final explanations, questions and answers (Q&amp;amp;A)  Total: 120 minutes or two hours, approximately</description>
    </item>
    
  </channel>
</rss>
