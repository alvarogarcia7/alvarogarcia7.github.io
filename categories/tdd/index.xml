<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TDD on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/tdd/</link>
    <description>Recent content in TDD on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Jun 2018 09:03:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/tdd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing a component that includes randomness</title>
      <link>https://alvarogarcia7.github.io/blog/2018/06/15/testing-component-randomness/</link>
      <pubDate>Fri, 15 Jun 2018 09:03:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/06/15/testing-component-randomness/</guid>
      <description>Context We have been tasked with designing a component to generate secrets for two-factor authentication (2FA), to ensure that the you also own that other &amp;lsquo;channel&amp;rsquo;.
It has to be secure enough to pass to verify a user, meaning no other user should be able to impersonating another one by guessing the secret.
Solution A first solution that he have implemented is to provide a 6-digit pin code.
The solution (in java) is straightforward: get a Random to generate ints for you.</description>
    </item>
    
    <item>
      <title>Self-Study in June 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/06/01/self-study-june-2018/</link>
      <pubDate>Fri, 01 Jun 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/06/01/self-study-june-2018/</guid>
      <description>Don&amp;rsquo;t look, don&amp;rsquo;t tell I&amp;rsquo;ve read this bonilista by David Bonilla on what strategies companies use to deal with security and defects.
Explains full disclosure, responsible disclosure and bug bounties.
Tags: david-bonilla, bonilista, security, full-disclosure, responsible-disclosure, bug-bounty, reporting, hacker, cracker
Id: a1a6925a-7958-11e8-a87f-0242ac110002 Read: Tue, 26 Jun 2018 15:50:21 +0000
La vida de las ideas I&amp;rsquo;ve read this bonilista by David Bonilla about the value of the ideas and what differentiates a good idea from a good execution from a good outcome</description>
    </item>
    
    <item>
      <title>Self-Study in August 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/08/01/self-study-in-august-2016/</link>
      <pubDate>Mon, 01 Aug 2016 19:56:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/08/01/self-study-in-august-2016/</guid>
      <description>Lessons in Agile: Six Months at Pivotal I&amp;rsquo;ve read this article by Maryam Labib where she explains what she has learned in the last 6 months at Pivotal: how to pair program, how to TDD and some good practices to be a better developer.
Tags: maryam-labib, pivotal, career, professional-career, tdd, pair-programming, team, lessons-learned, experience
Hacking verbal communication systems I&amp;rsquo;ve watched this talk by Ryan Alexander on what kind of systems humans use to communicate and how to improve them.</description>
    </item>
    
    <item>
      <title>Self-Study in July 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/07/04/self-study-in-july-2016/</link>
      <pubDate>Mon, 04 Jul 2016 10:47:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/07/04/self-study-in-july-2016/</guid>
      <description>Until the End of the Internet I&amp;rsquo;ve read this article by Jason Zimdars explaining the &amp;ldquo;end of the internet&amp;rdquo; policy at Basecamp: they will make everything possible to keep the services running for existing customer until the end or until the last customer uses it.
Tags: policy, end-of-the-internet, jason-zimdars, basecamp, product
How Agile Principles Can Fund Your Start-Up I&amp;rsquo;ve read this article by Jurgen Appelo explaining how the agile values can help you negotiate funding for your startup: instead of negotiating with each investor, agree on a formula and invest in many small rounds, instead of a big one.</description>
    </item>
    
    <item>
      <title>Self-Study in March 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</link>
      <pubDate>Wed, 02 Mar 2016 12:58:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</guid>
      <description>Learning Programming Isn’t That Hard, Deep Work Is Hard I&amp;rsquo;ve read this article by Benedict Fritz on two types of work (i.e., deep and shallow) and how programming is of the deep type. He links the difficulty of learning to program to the difficulty of practicing deep work.
Tags: analogy, benedict-fritz, deep-work, shallow-work, learn-to-program, psychology
BeCodeWeek by Yeray Darias I&amp;rsquo;ve read this category of posts by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.</description>
    </item>
    
    <item>
      <title>Self-Study in February 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</link>
      <pubDate>Mon, 01 Feb 2016 02:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</guid>
      <description>Software and all that comes with it I&amp;rsquo;ve read these slides about creating software and asking questions to deliver value, by Alberto Brandolini
Tags: alberto-brandolini, software, slide, team-management, agile
Driving your DBA crazy in 3 easy steps I&amp;rsquo;ve read these slides about dealing with the knowledge that is present in the database, not expressed in ubiquitous language and cause of the low bus factor, by Alberto Brandolini
Analogy between the movie The Shining and a model / entities / aggregates.</description>
    </item>
    
    <item>
      <title>Self-Study in January 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</link>
      <pubDate>Fri, 01 Jan 2016 16:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</guid>
      <description>Test cases in inner classes with JUnit I&amp;rsquo;ve read this answer in stackoverflow about nested test runners in JUnit
Tags: junit, stackoverflow, answer, nested-runner
Recording a Great Coding Screencast I&amp;rsquo;ve read this article by John Lindquist where he explains how he sets up the recording environment for egghead.
Tags: john-lindquist, record, screencast, egghead, code-screencast, record-video, video
React Testing Course I&amp;rsquo;ve watched the full course by Trevor D. Miller on how to test react components and the libraries to make it possible.</description>
    </item>
    
    <item>
      <title>Self-Study in December 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</link>
      <pubDate>Wed, 02 Dec 2015 09:50:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</guid>
      <description>Ruby Equality And Object Comparison I&amp;rsquo;ve read this article, written by Alan Skorkin, that explains equality comparisons in ruby:
 equal? is reference equality == is value equality eql? is value and type equality  Tags: ruby, comparison, equality, object, reference, alan-skorkin
Software Folklore I&amp;rsquo;ve watched this PechaKucha by Chris Ford on what are laws and how they relate to creating software. Also talks on what could be an analogy to software creation (says not science, not engineering)</description>
    </item>
    
    <item>
      <title>Self-Study in November 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</link>
      <pubDate>Mon, 02 Nov 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</guid>
      <description>Call me maybe: RabbitMQ I&amp;rsquo;ve read this article by Kyle Kingsbury on using RabbitMQ as a lock service. It investigates and gives a counterexample of using it for this purpose.
Uses Knossos to do the testing and surfaces a problem with it. Explains specific problems on locking: at-most-once and at-least-once message delivery
Note: References Jepsen (I guess an inside joke to the song &amp;ldquo;Call me maybe&amp;rdquo; by Carly Rae Jepsen) for at-most-once and at-least-once message delivery.</description>
    </item>
    
    <item>
      <title>Self-Study in October 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</link>
      <pubDate>Thu, 01 Oct 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</guid>
      <description>Blazing Fast HTML: Virtual DOM in Elm I&amp;rsquo;ve read this article explaining how Elm works in relation to the virtual DOM. By Evan Czaplicki.
Tags: elm, dom, virtual-dom, comparison, speed, haskell, evan-czaplicki
Why you should never, ever, ever use MongoDB I&amp;rsquo;ve read this article stating the downsides of using MongoDB. Written by Sven Slootweg
Tags: mongodb, downside, sven-slootweg, json, document-store, postgresql, acid
Do you really get classloaders? I&amp;rsquo;ve watched this video by Jevgeny Kabanov on classloaders: what they are, how they work nad some tips to solve common issues.</description>
    </item>
    
    <item>
      <title>Self-Study in August 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</link>
      <pubDate>Sun, 02 Aug 2015 21:45:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</guid>
      <description>Humble Object I&amp;rsquo;ve read the Humble Object list of patterns, by Gerard Meszaros, including:
 humble dialog humble executable humble transaction controller humble container adapter  Tags: pattern, gerard-meszaros
How you know I&amp;rsquo;ve reread this small essay by Paul Graham on storing information in our heads, based on the context. On the importance of rereading, to add more contexts to the initial one.
Tags: paul-graham, reread, read
Protected Variation: The Importance of Being Closed I&amp;rsquo;ve read this article by Craig Larman in the magazine IEEE Software &amp;gt; Design.</description>
    </item>
    
    <item>
      <title>Self-study in July 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/</link>
      <pubDate>Wed, 01 Jul 2015 01:08:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/</guid>
      <description>I&amp;rsquo;ve grouped all small posts related to the self-study from July 2015 into a single post
Clojure made simple I&amp;rsquo;ve watched this talk by Rich Hickey at the Java One. It references the talk Easy made simple
 polymorphism without inheritance; single dispatch on the first parameter  Productive pair programming I&amp;rsquo;ve read this article about pair programming, using the driver &amp;amp; copilot technique, written by Carlos Blé
Building Automated REST APIs with Python Investigating QA automation for REST APIs, I&amp;rsquo;ve read these slides about it</description>
    </item>
    
    <item>
      <title>Self-study in June 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/</link>
      <pubDate>Wed, 03 Jun 2015 13:13:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/</guid>
      <description>Update: I&amp;rsquo;ve grouped all small posts related to the self-study from June 2015 into a single post
Le monitoring de flux par l’exemple I&amp;rsquo;ve read this article about monitoring, in the way of &amp;ldquo;by example&amp;rdquo;, by Cédrick Lunven and Julien Kirch (French)
The First Micro-service Architecture I&amp;rsquo;ve read this article about microservices and how they were implemented many years ago by Robert C. Martin
How I Learned to Balance My Life With Remote Work I&amp;rsquo;ve read this article about balancing life and work, either physical or remote by Michael Erasmus</description>
    </item>
    
    <item>
      <title>Paper: TDD in industrial teams</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams/</link>
      <pubDate>Tue, 12 May 2015 00:02:44 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams/</guid>
      <description>I&amp;rsquo;ve read this paper by Nagappan, Maximilien, Bhat and Williams on the cost, advantages, pitfalls of doing TDD in industrial teams (private companies who create software).
My notes Abstract:
 little empirical evidence supports or refutes the utility of this practice in an industrial context
  they seem to be talking about inside-out tdd as in chapter 2 (page 291), they talk about small units and then integrating them in a bigger context  Benefits taken from chapter 2 (page 292)</description>
    </item>
    
    <item>
      <title>Talk: Software is eating the world</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/10/talk-software-is-eating-the-world/</link>
      <pubDate>Sun, 10 May 2015 21:00:52 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/10/talk-software-is-eating-the-world/</guid>
      <description>I&amp;rsquo;ve watched this talk by Erik Meijer
My notes   Agile!: The Good, the Hype and the Ugly
  The hacker way
 code always wins vs manager always wins source: http://www.wired.com/2012/02/zuck-letter/    we&amp;rsquo;re doing maths =&amp;gt; we&amp;rsquo;re building a proof
  reinforcement learning
 agent is the company    related to &amp;ldquo;build, measure, learn&amp;rdquo; by Eric Ries (the lean startup)
  Feedback systems  Open (no) feedback system, such as timed sprinklers Closed feedback system Output only system  Why everything is software  Examples of everything is software Software is eating the world Even hardware is modeled as software  Modeling as a Finite State Machine (FSM)  There&amp;rsquo;s memory in the feedback loop.</description>
    </item>
    
    <item>
      <title>Internal training: Testing is hard - just do it</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it/</link>
      <pubDate>Tue, 05 May 2015 23:00:17 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it/</guid>
      <description>At a client, last week I&amp;rsquo;ve organized an internal training, in the form of a discussion about this article: Testing is hard - just do it
Our thoughts  When a bug is found, prove it exists with a test
 This immediately reduces defect rate: the same regression cannot be introduced again
 fix a bug a second time
 If fixing a bug (having defects in your code) was &amp;lsquo;waste&amp;rsquo;, as defined by lean methodologies, it also is wast fixing it for the following times</description>
    </item>
    
    <item>
      <title>Demand for TDD and Refactor</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/25/demand-for-tdd-and-refactor/</link>
      <pubDate>Sat, 25 Apr 2015 13:28:20 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/25/demand-for-tdd-and-refactor/</guid>
      <description>When I went to the Jason Gorman&amp;rsquo;s TDD workshop (experience report here), he said something interesting regarding refactor and TDD:
 In job offers / advertisements, TDD is much more in demand than refactor. But the latter is included in the former as an integral part.
Jason Gorman
 I agree with the second thought: you cannot properly do TDD without refactoring, as it is an integral part; also the third phase.</description>
    </item>
    
    <item>
      <title>Redesign as a new TDD phase</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/13/redesign-as-a-new-tdd-phase/</link>
      <pubDate>Mon, 13 Apr 2015 22:00:45 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/13/redesign-as-a-new-tdd-phase/</guid>
      <description>In the last TDD workshop (experience report here), a conversation with Gary McLean Hall introduced to me this new concept of &amp;ldquo;Redesign&amp;rdquo; as a TDD phase.
Concept As Gary introduced it to me1, it is a phase that might appear after refactor.
It is about changing the outside design without changing the expected behavior. I thought this was also included in the refactor phase.
How I do redesign I usually do this &amp;ldquo;changing of the outside design&amp;rdquo; by applying a series of refactors 2 to the production code but not changing the test code; using a bridge / adapter to get to the new API from the old one.</description>
    </item>
    
    <item>
      <title>Experience report: Test-driven development intensive, by Jason Gorman</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/12/jason-gorman-tdd-intensive-workshop/</link>
      <pubDate>Sun, 12 Apr 2015 20:13:45 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/12/jason-gorman-tdd-intensive-workshop/</guid>
      <description>This is an experience report on Jason Gorman&amp;rsquo;s &amp;ldquo;Test-driven development intensive workshop&amp;rdquo; on the April 11th, 2015
I attended this training in the Greenfell housing &amp;amp; training in South Wimbledon, London SW19 1JZ. The training spanned from 10:00 to 17:00 with a half an hour for lunch plus three or four 10-15 minute pauses. (7 - ,5 - 4 * 12/60 = ~5.7hours = 5 hours 45 minutes)
Introduction There were 23 of us, including me.</description>
    </item>
    
    <item>
      <title>TDD Meetup Retrospective</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/16/tdd-meetup-retrospective/</link>
      <pubDate>Mon, 16 Mar 2015 05:42:44 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/16/tdd-meetup-retrospective/</guid>
      <description>Yesterday we organized a TDD meetup at the FIB - Barcelona School of Informatics UPC, within Barcelona Software Craftsmanship sponsored by the Junior Empresa d&amp;rsquo;Informàtica. The meetup started at 9:00 until 18:00, with a one-hour pause in the middle.
Where  Please make sure the meetup space (e.g., classroom, meeting room) is available and ready to be used at least 15 minutes before the meetup starts The organizer and the event host should be there in advance to prepare the physical environment (chairs, wifi, beamer, etc) as well as mentally: getting comfortable with the space, loading the presentation, prepare the speaker notes, etc.</description>
    </item>
    
    <item>
      <title>Mob programming String calculator kata</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/03/mob-programming-string-calculator-kata/</link>
      <pubDate>Tue, 03 Mar 2015 04:46:48 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/03/mob-programming-string-calculator-kata/</guid>
      <description>Last Friday we did a kata1 using a projector the string calculator 2 using pair programming, TDD and some mob-programming for the last refactoring.
We used a projector (beamer) so everyone could see it. I tried to take really small baby steps but the adding part was done in ~6 cycles3
We&amp;rsquo;ve all learnt about shotcuts, live user templates for the IDE 4, TDD methodology, other ways of tackling the problem, how to refactor as a group, clean code, etc</description>
    </item>
    
    <item>
      <title>kata: persistent linked list</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/23/kata-persistent-linked-list/</link>
      <pubDate>Mon, 23 Feb 2015 23:19:57 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/23/kata-persistent-linked-list/</guid>
      <description>I&amp;rsquo;ve just written a new kata, about a persistent linked list.
It is using the same project as for the linked list kata.
For now, only the add, contains and size methods are implemented.
If you have any comments or code review, please let me know</description>
    </item>
    
    <item>
      <title>Book: Diseño Ágil con TDD (Spanish)</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/02/book-diseno-agil-con-tdd-spanish/</link>
      <pubDate>Mon, 02 Feb 2015 21:32:21 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/02/book-diseno-agil-con-tdd-spanish/</guid>
      <description>I&amp;rsquo;ve read this book Diseño Ágil con TDD (Spanish) by Carlos Blé from cover to cover, when previously I had only read the theoretical parts (Part I and Chapter 12 in Part II).
It&amp;rsquo;s worth noting that this is the first TDD book in Spanish (I haven&amp;rsquo;t found any book in Spanish predating this one - also backed by the author; published in January 2010) and, as such, there are some translations that could be improved.</description>
    </item>
    
    <item>
      <title>Bank kata in java</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/22/bank-kata-in-java/</link>
      <pubDate>Thu, 22 Jan 2015 22:52:01 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/22/bank-kata-in-java/</guid>
      <description>Manuel Rivero and I did a subset of the bank kata, proposed by Sandro Mancuso.
We&amp;rsquo;ve used java (mockito, hamcrest, junit), outside-in TDD. The code is spread among several sessions. We have not committed after each step, only at the end of the session.
The source code is on github
You can read Manuel&amp;rsquo;s take on the kata on his blog</description>
    </item>
    
    <item>
      <title>Kata: Reverse Polish Notation in java</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/12/kata-reverse-polish-notation-in-java/</link>
      <pubDate>Mon, 12 Jan 2015 03:56:58 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/12/kata-reverse-polish-notation-in-java/</guid>
      <description>I&amp;rsquo;ve written a RPN string calculator in java, using TDD with these: mockito, hamcrest, junit
It&amp;rsquo;s close to the String Calculator kata, by Roy Osherove. This RPN is using mocks (so more difficult than the String calculator)
I&amp;rsquo;ve tried to practice &amp;ldquo;Your tests are dragging you down&amp;rdquo; by J.B Rainsberger (mainly, to use something to write on). This behavior is also explained in the book Dirigido por tests (Spanish) by Carlos Blé.</description>
    </item>
    
    <item>
      <title>Listening to the tests</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/06/listening-to-the-tests/</link>
      <pubDate>Tue, 06 Jan 2015 22:05:55 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/06/listening-to-the-tests/</guid>
      <description>Specifically the chapter no. 20 (&amp;ldquo;Listening to the tests&amp;rdquo;) from Growing Object-Oriented Software Guided by Tests available here is so good to learn to hear to your tests.
To hear what they&amp;rsquo;re trying to tell you, the authors (Steve Freeman and Nat Pryce) explain this to you:
 I Need to Mock an Object I Can’t Replace Logging Is a Feature Mocking Concrete Classes Don’t Mock Values Bloated Constructor Confused Object Too Many Dependencies Too Many Expectations  To close, a quote:</description>
    </item>
    
    <item>
      <title>Kata: prime factors</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/06/kata-prime-factors/</link>
      <pubDate>Tue, 06 Jan 2015 21:47:04 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/06/kata-prime-factors/</guid>
      <description>I just did the prime factors kata, in java using TDD. Results: https://github.com/alvarogarcia7/primeFactors
Code review, comments, pull requests are more than welcome
Source: http://craftsmanship.sv.cmu.edu/katas/prime-factors-kata
Source: http://butunclebob.com/ArticleS.UncleBob.ThePrimeFactorsKata</description>
    </item>
    
    <item>
      <title>Talk: &#39;Is TDD Dead? Of course not! But what´s all the fuzz about then?&#39; by Emily Bache</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-by-emily-bache/</link>
      <pubDate>Tue, 06 Jan 2015 15:47:47 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-by-emily-bache/</guid>
      <description>I&amp;rsquo;ve just seen this talk: Is TDD dead? Of course not! But what´s all the fuzz about then? by Emily Bache
My notes   deliberate vs accidental learning (around minute 19)
  do not be an evangelist for tdd but rather &amp;ldquo;come learn tdd, come at a dojo with us!&amp;rdquo;
  points to Dan North&amp;rsquo;s talk (at the same foo café)
  points to her book - The Coding Dojo Handbook</description>
    </item>
    
    <item>
      <title>Should we start the TDD cycle on refactor?</title>
      <link>https://alvarogarcia7.github.io/blog/2014/12/29/should-we-start-the-tdd-cycle-on-refactor/</link>
      <pubDate>Mon, 29 Dec 2014 20:30:01 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2014/12/29/should-we-start-the-tdd-cycle-on-refactor/</guid>
      <description>In this lexical scope, TDD by example is referring to this book1, available on Amazon
The TDD cycle Altough Kent Beck in his book Test-Driven Development by example explains in &amp;ldquo;Part I: the money example&amp;rdquo;2 that one should
 quickly add a test;
run all the tests and see the new one fail [&amp;hellip;]
Kent Beck  Implying that the TDD cycle starts with the red. Later on he explains that the cycle continues with green and refactor and back to red.</description>
    </item>
    
  </channel>
</rss>
