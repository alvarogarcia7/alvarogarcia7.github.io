<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>goos on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/goos/</link>
    <description>Recent content in goos on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Jul 2018 10:32:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/goos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self-Study in July 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/07/01/self-study-july-2018/</link>
      <pubDate>Sun, 01 Jul 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/07/01/self-study-july-2018/</guid>
      <description>The Haskell Pyramid I&amp;rsquo;ve read this article on how the productivity for Haskell is achieved: not using the topics discussed on social networks (monads, functors, laws, lenses, etc) but using more basic tools
Tags: haskell, productivity, lucas-di-cioccio, learning, development, tool, monad, hype, pyramid, productive-haskell-bar, bar
Id: 454f53fc-7dd6-11e8-8208-0242ac110003 Read: Mon, 02 Jul 2018 08:59:47 +0000
El verde más verde I&amp;rsquo;ve read this article on how to structure creative projects (e.g., UX, programming) by professionals, as told by David Bonilla.</description>
    </item>
    
    <item>
      <title>What defines a dependency</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/13/what-defines-a-dependency/</link>
      <pubDate>Mon, 13 Jul 2015 07:48:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/13/what-defines-a-dependency/</guid>
      <description>A friend and I were arguing about this code (fragment):
public void register (final String userName) { try { registeredUsers.add(new User(userName)); } catch (AlreadyRegisteredUserException e) { resultListener.alreadyRegistered(userName); } } I would have said that resultListener is a dependency as, first, it was injected by the constructor, second, it is necessary for the execution (negative case).
He suggested that:
 being injected through the constructor is usually what happens with dependencies, but does not make it one (i.</description>
    </item>
    
    <item>
      <title>Object Peer Stereotypes</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/13/object-peer-stereotypes/</link>
      <pubDate>Mon, 13 Jul 2015 07:36:14 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/13/object-peer-stereotypes/</guid>
      <description>We categorize an object&amp;rsquo;s peers (loosely) into three types of relationship. An object might have:
 Dependencies: Services that the object requires from its peers so it can perform its responsibilities. The object cannot function without these services. It should not be possible to create the object without them. For example, a graphics package will need something like a screen or canvas to draw on&amp;ndash;it doesn&amp;rsquo;t make sense without one.</description>
    </item>
    
    <item>
      <title>Self-study in May 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/</link>
      <pubDate>Sat, 09 May 2015 16:41:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/</guid>
      <description>Update: I&amp;rsquo;ve grouped all small posts related to the self-study from May 2015 into a single post
Programmer passion considered harmful I&amp;rsquo;ve read this article on why programmer passion could be negative. The title is similar to a paper by Dijkstra.
Software Craftsmanship: Are Bootcamps Enough? I&amp;rsquo;ve read this article on software craftsmanship, development bootcamps and passion by Ken Auer
Improve your development environments with virtualization I have seen this video: Improve your development environments with virtualization by Luke Sneeringer.</description>
    </item>
    
    <item>
      <title>What versus How</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/06/what-versus-how/</link>
      <pubDate>Wed, 06 May 2015 07:15:08 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/06/what-versus-how/</guid>
      <description>After reading the GOOS1, the more and more I get this feeling of what vs how:
 Information hiding The total simpler than the sum of the parts Extracting a concept so you can think about this. Makes you find better names:  test name variable name method name interface / protocol name    I also got this feeling when reading Clean Code. But with this other book the smell is much harder, stronger.</description>
    </item>
    
    <item>
      <title>Trimming your plants</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/02/trimming-your-plants/</link>
      <pubDate>Thu, 02 Apr 2015 23:13:45 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/02/trimming-your-plants/</guid>
      <description>This post belongs to the growing-software series
Imagine this situation: the code works. You are at this stage
Disregarding the tests, the production code is complete. Could be better, but it is ready if you are in a hurry.
Now, picture your test as a plant in a plant pot: it might be healthy on the outside (external quality) but how are their roots (internal quality)?
Do you imagine them in an ordered fashion or in a jungle of roots?</description>
    </item>
    
    <item>
      <title>Growing software according to the season</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/29/growing-software-according-to-the-season/</link>
      <pubDate>Sun, 29 Mar 2015 18:13:45 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/29/growing-software-according-to-the-season/</guid>
      <description>This is the first post is of the growing-software series
A few weeks ago, while reading the book Growing Object-Oriented Software Guided by Tests by Nat Pryce and Steve Freeman, I finally understood why the software needs to be grown and not built:
A few days ago, I was thinking about new inspiration sources and this came to my mind:
In agriculture, at least in this latitude, there are different seasons.</description>
    </item>
    
    <item>
      <title>Listening to the tests</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/06/listening-to-the-tests/</link>
      <pubDate>Tue, 06 Jan 2015 22:05:55 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/06/listening-to-the-tests/</guid>
      <description>Specifically the chapter no. 20 (&amp;ldquo;Listening to the tests&amp;rdquo;) from Growing Object-Oriented Software Guided by Tests available here is so good to learn to hear to your tests.
To hear what they&amp;rsquo;re trying to tell you, the authors (Steve Freeman and Nat Pryce) explain this to you:
 I Need to Mock an Object I Can’t Replace Logging Is a Feature Mocking Concrete Classes Don’t Mock Values Bloated Constructor Confused Object Too Many Dependencies Too Many Expectations  To close, a quote:</description>
    </item>
    
    <item>
      <title>Category: Goos</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/01/category-goos/</link>
      <pubDate>Thu, 01 Jan 2015 07:09:43 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/01/category-goos/</guid>
      <description>This category is mainly dedicated to anything related or included in the book &amp;lsquo;Growing Object-Oriented Software Guided by Tests&amp;rsquo;, by Nat Pryce and Steve Freeman
Note: This has been created a posteriori with a previous date</description>
    </item>
    
  </channel>
</rss>
