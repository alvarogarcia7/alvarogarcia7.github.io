<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brown Bag Session on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/brown-bag-session/</link>
    <description>Recent content in Brown Bag Session on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Sep 2015 10:41:16 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/brown-bag-session/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Brown-bag session: eXtreme Programming</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/02/brownbag-session-xtreme-programming/</link>
      <pubDate>Wed, 02 Sep 2015 10:41:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/02/brownbag-session-xtreme-programming/</guid>
      <description>&lt;p&gt;At a client, today I&amp;rsquo;ve introduced the eXtreme Programmig methodology, with its values, principles, practices in a brown-bag session.&lt;/p&gt;

&lt;p&gt;It has been an informal session, without slides, but we have used &lt;a href=&#34;https://www.youtube.com/watch?v=4nN6Gh79Yg8&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by the Kleer guys (in Spanish).&lt;/p&gt;

&lt;p&gt;The video gives a high-level overview of what XP is. We also needed to cover the daily practices (e.g., TDD, pair programming, whole team)&lt;/p&gt;

&lt;p&gt;After that, we&amp;rsquo;ve done a questions&amp;amp;answers round to solve the teammates&amp;rsquo; doubts&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brown-bag session: Spring Boot</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/12/brownbag-session-spring-boot/</link>
      <pubDate>Wed, 12 Aug 2015 10:44:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/12/brownbag-session-spring-boot/</guid>
      <description>&lt;p&gt;At a client, today we&amp;rsquo;ve done a brown-bag session on &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34; target=&#34;_blank&#34;&gt;Spring Boot&lt;/a&gt;: we&amp;rsquo;ve gone through the basics with a &lt;a href=&#34;https://github.com/Rossyafk/spring-boot-demo/&#34; target=&#34;_blank&#34;&gt;sample maven project&lt;/a&gt; and its &lt;a href=&#34;https://github.com/Rossyafk/spring-boot-demo/blob/master/pom.xml&#34; target=&#34;_blank&#34;&gt;pom file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve seen the &lt;a href=&#34;http://start.spring.io/&#34; target=&#34;_blank&#34;&gt;Spring Initializr&lt;/a&gt; and a live demo, using curl for REST client.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brown-bag session and Dojo: Beginning Clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/05/brown-bag-session-and-dojo-beginning-clojure/</link>
      <pubDate>Wed, 05 Aug 2015 01:14:14 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/05/brown-bag-session-and-dojo-beginning-clojure/</guid>
      <description>&lt;p&gt;At a client, today I&amp;rsquo;ve facilitated a brown-bag session introducing the Clojure language to a group of java programmers.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve started hands-on, live coding on a REPL. To make things easier, I&amp;rsquo;ve created a maven project that imports the clojure jar and lets you obtain dependencies from clojars. The repo is &lt;a href=&#34;https://github.com/alvarogarcia7/clojure-for-java-devs&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. This repo wouldn&amp;rsquo;t have been possible without the &lt;a href=&#34;https://github.com/talios/clojure-maven-plugin&#34; target=&#34;_blank&#34;&gt;clojure maven plugin&lt;/a&gt;, written by Mark Derricutt.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve more or less followed &lt;a href=&#34;https://github.com/alvarogarcia7/clojure-for-java-devs/blob/master/guide.md&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve also practiced, using a dojo in clojure, the fizzbuzz kata.&lt;/p&gt;

&lt;p&gt;There is a sample implementation in the same repo, &lt;a href=&#34;https://github.com/alvarogarcia7/clojure-for-java-devs/tree/sample-implementation/src&#34; target=&#34;_blank&#34;&gt;this folder&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brown-bag session: refactoring legacy code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/01/brownbag-session-refactoring-legacy-code/</link>
      <pubDate>Wed, 01 Jul 2015 13:18:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/01/brownbag-session-refactoring-legacy-code/</guid>
      <description>&lt;p&gt;Today I have done a brown bag session about refactoring legacy code. It includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;legacy code definition. There is no agreement about this in the team.&lt;/li&gt;
&lt;li&gt;the legacy code change algorithm (source is Feathers, Working effectively with legacy code). Plus an example about it.&lt;/li&gt;
&lt;li&gt;working with legacy code&lt;/li&gt;
&lt;li&gt;experience with it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The slides are available &lt;a href=&#34;https://alvarogarcia7.github.io/{{site.category_dir}}/../uploads/refactoring-legacy-code-slides.pdf&#34;&gt;here&lt;/a&gt; (PDF format)&lt;/p&gt;

&lt;p&gt;We also did a practical session, whose experience report is &lt;a href=&#34;../../../../2015/06/23/brown-bag-session-refactoring-legacy-code/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brown-bag session: Refactoring legacy code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</link>
      <pubDate>Tue, 23 Jun 2015 19:19:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</guid>
      <description>&lt;p&gt;Today I have facilitated a brown bag session about refactoring legacy code applications, as this is the case with one of the applications we maintain and add new features to.&lt;/p&gt;

&lt;p&gt;The contents of the session:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Briefly exposing the problem to the team, me taking the role of the Product Owner (PO)&lt;/li&gt;
&lt;li&gt;Ask the dev team to add an easy feature&lt;/li&gt;
&lt;li&gt;Do it without tests, as it was so simple that they thought they could do it (using mob programming)&lt;/li&gt;
&lt;li&gt;Ask if they were satisfied by the patch / fix. Answer was yes.&lt;/li&gt;
&lt;li&gt;Point out that there are regressions in the few lines of the patch&lt;/li&gt;
&lt;li&gt;Repeat the session, starting with adding tests to guarantee the behavior is preserved  (using mob programming)&lt;/li&gt;
&lt;li&gt;Explain the technique of the golden master&lt;/li&gt;
&lt;li&gt;Some more programming, until they start to see the light at the end of the tunnel&lt;/li&gt;
&lt;li&gt;Small retrospective, including:

&lt;ul&gt;
&lt;li&gt;asking them their feelings when dealing with legacy code. The contents of this is pretty similar to the concepts that appear in the retrospectives, when talking about the legacy project / submodule.&lt;/li&gt;
&lt;li&gt;what could I improve as facilitator or for the structure of the session
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The repo can be found &lt;a href=&#34;https://github.com/alvarogarcia7/trivia-kata-spike&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I prepared a small script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
  git add --all&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  git commit --all -m &lt;span class=&#34;s2&#34;&gt;&amp;quot;save process - uknown state&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  sleep 120&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;that saves the process and the progress, without disturbing the attendees. This allows you to follow the progress without any distraction. This idea was taken from a similar one from  &lt;a href=&#34;http://twitter.com/@xav1uzz&#34; target=&#34;_blank&#34;&gt;Xavi Gost&lt;/a&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This same idea was also cited by someone else, if I recall correctly by Sandro Mancuso, saying that it would be a good idea to have a background git repository while working. IntelliJ IDEA already does something similar (and saves the events, e.g., when the tests are run, either red or green)&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Cannot find the source, it was about having a script to commit automatically each time you run the tests; if it was red while refactoring, it would do git checkout (to revert); Was related to the noFlopSquad
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Brown-bag session: docker</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/16/brown-bag-session-docker/</link>
      <pubDate>Tue, 16 Jun 2015 18:52:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/16/brown-bag-session-docker/</guid>
      <description>&lt;p&gt;Today we have done a brown bag session about Docker. One of the team members explained to us the latest news, topics and how tos, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the difference between a container and an image&lt;/li&gt;
&lt;li&gt;diffing image contents&lt;/li&gt;
&lt;li&gt;AUFS (Another Union FS)&lt;/li&gt;
&lt;li&gt;persistent vs non-persistent (volatile) filesystems&lt;/li&gt;
&lt;li&gt;running CMD and other commands on the instance&lt;/li&gt;
&lt;li&gt;problems of running with permission = root (or its group)&lt;/li&gt;
&lt;li&gt;downsides of it&lt;/li&gt;
&lt;li&gt;how to compare it with a virtual machine&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Brown-bag session: Refactoring</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/11/brownbag-session-refactoring/</link>
      <pubDate>Thu, 11 Jun 2015 20:22:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/11/brownbag-session-refactoring/</guid>
      <description>&lt;p&gt;At a client, today we&amp;rsquo;ve done a brown-bag session on refactoring: we&amp;rsquo;ve gone through
and a live demo, including refactoring a core piece of our code.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve done some mob programming to help identify some smells and how to fix them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Internal training: BPM: Process and tools for developers</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/02/internal-training-bpm-tool-and-process/</link>
      <pubDate>Tue, 02 Jun 2015 22:20:09 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/02/internal-training-bpm-tool-and-process/</guid>
      <description>&lt;p&gt;At a client, I&amp;rsquo;ve presented today an internal training on &amp;ldquo;BPM: Process and tools for developers&amp;rdquo;&lt;/p&gt;

&lt;p&gt;In it, we have introduced the BPM concept and the main ideas in Activiti BPM.&lt;/p&gt;

&lt;p&gt;Also techniques for hotswapping processes, tips and how-tos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Internal training: QA &amp;amp; how to test</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/18/internal-training-qa-and-how-to-test/</link>
      <pubDate>Mon, 18 May 2015 22:20:09 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/18/internal-training-qa-and-how-to-test/</guid>
      <description>

&lt;p&gt;At a client, we&amp;rsquo;ve done today an internal training on &amp;ldquo;QA &amp;amp; how to test&amp;rdquo;. In it, the most skilled person with the QA role in the dev team has explained to us some techniques and concepts for testing&lt;/p&gt;

&lt;h2 id=&#34;my-notes&#34;&gt;My notes&lt;/h2&gt;

&lt;p&gt;Verification vs validation: building the product right vs building the right product.&lt;/p&gt;

&lt;h3 id=&#34;principles&#34;&gt;Principles&lt;/h3&gt;

&lt;p&gt;Extracted from &lt;a href=&#34;http://www.istqb.org/&#34; target=&#34;_blank&#34;&gt;ISTQB&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;testing shows presence of defects&lt;/li&gt;
&lt;li&gt;exhaustive testing is impossible&lt;/li&gt;
&lt;li&gt;early testing is better than later testing&lt;/li&gt;
&lt;li&gt;defect clustering: areas with bigger defect ratio or more critical, etc should be tested more thoroughly&lt;/li&gt;
&lt;li&gt;pesticide paradox&lt;/li&gt;
&lt;li&gt;testing is context-dependent&lt;/li&gt;
&lt;li&gt;absence of errors fallacy: the absence of defects does not imply perfect software. There are also problems with validation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;techniques&#34;&gt;Techniques&lt;/h3&gt;

&lt;h4 id=&#34;people-based&#34;&gt;People-based&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;bug bashes: e.g., time-constrained&lt;/li&gt;
&lt;li&gt;subject-matter expert testing&lt;/li&gt;
&lt;li&gt;eat your own dogfood&lt;/li&gt;
&lt;li&gt;others&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;activity-based&#34;&gt;Activity-based&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;regression&lt;/li&gt;
&lt;li&gt;scripted (manual)&lt;/li&gt;
&lt;li&gt;smoke&lt;/li&gt;
&lt;li&gt;exploratory&lt;/li&gt;
&lt;li&gt;installation&lt;/li&gt;
&lt;li&gt;load&lt;/li&gt;
&lt;li&gt;long sequence&lt;/li&gt;
&lt;li&gt;performance&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;coverage-based&#34;&gt;Coverage-based&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;menu tour: exploration based on menus (especially on websites)&lt;/li&gt;
&lt;li&gt;functional and system testing&lt;/li&gt;
&lt;li&gt;integration&lt;/li&gt;
&lt;li&gt;logic&lt;/li&gt;
&lt;li&gt;state-based&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;requirements-based&#34;&gt;Requirements-based&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Equivalence partitioning: examples in the same set are considered equivalent&lt;/li&gt;
&lt;li&gt;Boundary based: there are interesting examples around and on the boundaries&lt;/li&gt;
&lt;li&gt;Decision tables: truth table&lt;/li&gt;
&lt;li&gt;State transition tables: state diagram&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;risk-based&#34;&gt;Risk-based&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;make a prioritized list: probability and impact&lt;/li&gt;
&lt;li&gt;perform testing exploring each risk&lt;/li&gt;
&lt;li&gt;after a risk disappears, another opens. Adjust your test effort to stay focused on the current crop&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;use-case-tests&#34;&gt;Use case tests&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;use case: a common case that represents one of your customer&amp;rsquo;s cases&lt;/li&gt;
&lt;li&gt;use busines language&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;structure-based&#34;&gt;Structure-based&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;test coverage is different than code coverage&lt;/li&gt;
&lt;li&gt;test coverage is based on decision tables&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;defining-testing-priorities&#34;&gt;Defining testing priorities&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;customer and contractual requirements&lt;/li&gt;
&lt;li&gt;regulatory&lt;/li&gt;
&lt;li&gt;experience-based&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Best representative&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Internal training: Testing is hard - just do it</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it/</link>
      <pubDate>Tue, 05 May 2015 23:00:17 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it/</guid>
      <description>

&lt;p&gt;At a client, last week I&amp;rsquo;ve organized an internal training, in the form of a discussion about this article: &lt;a href=&#34;http://davidsouther.com/#/posts/2013/10/30/testing-its-hard-just-do-it/&#34; target=&#34;_blank&#34;&gt;Testing is hard - just do it&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;our-thoughts&#34;&gt;Our thoughts&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;When a bug is found, prove it exists with a test&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This immediately reduces defect rate: the same regression cannot be introduced again&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;fix a bug a second time&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If fixing a bug (having defects in your code) was &amp;lsquo;waste&amp;rsquo;, as defined by lean methodologies, it also is wast fixing it for the following times&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;testing requires discipline&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Agree. See quote by Larry Wall (this same article)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[Three requirements for a good test suite]:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The tests need to be easier to write&lt;/li&gt;
&lt;li&gt;The test suite must run, and pass, before any code is allowed out the door&lt;/li&gt;
&lt;li&gt;Support from the project&amp;rsquo;s leadership&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Agree.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Programming is like drawing water from a well&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good analogy&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m going to assume you are smarter than me [&amp;hellip;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is related to &amp;lsquo;doing clever things&amp;rsquo;: when I write &amp;lsquo;clever code&amp;rsquo;, that has neither comments, nor it is massaged to be Clean Code, it will cost me many times more to modify / understand in the future vs massage it a little bit.&lt;/p&gt;

&lt;p&gt;For me, an example of clever code are certain bitwise operations. Even though these operations are publicly available on websites and books, you must know about them before understanding the code.&lt;/p&gt;

&lt;p&gt;Another example of clever code is taking assumptions, even if they are valid. Example: always return the second element because the first one is the header&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;vs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;selectFirstValidLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;validElements&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;skipHeader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;validElements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;open-questions-other-ideas&#34;&gt;Open questions / other ideas&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There are tests that are more important than others. Is there a tool to assign them weights and inform about which preponderation of the codebase is broken? The same (i.e., more importance) can happen for production code.&lt;/li&gt;
&lt;li&gt;Is SCRUM apt for junior developers? In the sense of the increased autonomy, more decisions, more required technical skills / values, etc&lt;/li&gt;
&lt;li&gt;We discussed what differentiates a project with a shorter deadline from one with a longer deadline. The consensus was: you should do tests for any kind of project, the shorter deadline project won&amp;rsquo;t allow as much time for refactoring&lt;/li&gt;
&lt;li&gt;Tests iff (i.e., if and only if) working code&lt;/li&gt;
&lt;li&gt;Tests do not guarantee lack of defects&lt;/li&gt;
&lt;li&gt;Bijectiveness between tests and features (production code)
&lt;!--
Expand on this bijectiveness
--&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Internal training: Introduction to AngularJs</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/30/internal-training-introduction-to-angularjs/</link>
      <pubDate>Thu, 30 Apr 2015 20:22:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/30/internal-training-introduction-to-angularjs/</guid>
      <description>&lt;p&gt;At a client, today I&amp;rsquo;ve done an internal training on &lt;a href=&#34;https://angularjs.org/&#34; target=&#34;_blank&#34;&gt;angular js&lt;/a&gt;: we&amp;rsquo;ve prepared some &lt;a href=&#34;https://github.com/alvarogarcia7/demo-frontend-angularjs/tree/master/slides&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt; and a live demo.&lt;/p&gt;

&lt;p&gt;The repository with all the information can be found &lt;a href=&#34;https://github.com/alvarogarcia7/demo-frontend-angularjs&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Apparently, the training has been a success, given that most of the talent in the team is backend focused (as opposed to full-stack) and changing from java to javascript is not straight-forward.&lt;/p&gt;

&lt;p&gt;Note: this post has been created a posteriori, dated with the correct training timestamp.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brown-bag session: maven</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/06/brown-bag-session-maven/</link>
      <pubDate>Fri, 06 Mar 2015 22:18:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/06/brown-bag-session-maven/</guid>
      <description>&lt;p&gt;Yesterday we did a training about the maven tool. One of the team members explained to us some topics including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lifecycles&lt;/li&gt;
&lt;li&gt;profiles and how to create one

&lt;ul&gt;
&lt;li&gt;slowTests for integration tests (this client only)&lt;/li&gt;
&lt;li&gt;downloadJavadoc&lt;/li&gt;
&lt;li&gt;downloadSources&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;convention over configuration&lt;/li&gt;
&lt;li&gt;scopes of the dependencies (test, runtime, compile, provided)&lt;/li&gt;
&lt;li&gt;tricks about the tool:

&lt;ul&gt;
&lt;li&gt;order of the dependencies (especially junit, hamcrest)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;plugins and how to build one&lt;/li&gt;
&lt;li&gt;destination folders

&lt;ul&gt;
&lt;li&gt;target, classes, test-classes, etc&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: this post was created a posteriori, with the original date&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>