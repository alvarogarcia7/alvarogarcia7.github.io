<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>brown-bag-session on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/brown-bag-session/</link>
    <description>Recent content in brown-bag-session on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Sep 2015 10:41:16 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/brown-bag-session/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Brown-bag session: eXtreme Programming</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/02/brownbag-session-xtreme-programming/</link>
      <pubDate>Wed, 02 Sep 2015 10:41:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/02/brownbag-session-xtreme-programming/</guid>
      <description>At a client, today I&amp;rsquo;ve introduced the eXtreme Programmig methodology, with its values, principles, practices in a brown-bag session.
It has been an informal session, without slides, but we have used this video by the Kleer guys (in Spanish).
The video gives a high-level overview of what XP is. We also needed to cover the daily practices (e.g., TDD, pair programming, whole team)
After that, we&amp;rsquo;ve done a questions&amp;amp;answers round to solve the teammates&#39; doubts</description>
    </item>
    
    <item>
      <title>Brown-bag session: Spring Boot</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/12/brownbag-session-spring-boot/</link>
      <pubDate>Wed, 12 Aug 2015 10:44:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/12/brownbag-session-spring-boot/</guid>
      <description>At a client, today we&amp;rsquo;ve done a brown-bag session on Spring Boot: we&amp;rsquo;ve gone through the basics with a sample maven project and its pom file.
We&amp;rsquo;ve seen the Spring Initializr and a live demo, using curl for REST client.</description>
    </item>
    
    <item>
      <title>Brown-bag session and Dojo: Beginning Clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/05/brown-bag-session-and-dojo-beginning-clojure/</link>
      <pubDate>Wed, 05 Aug 2015 01:14:14 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/05/brown-bag-session-and-dojo-beginning-clojure/</guid>
      <description>At a client, today I&amp;rsquo;ve facilitated a brown-bag session introducing the Clojure language to a group of java programmers.
I&amp;rsquo;ve started hands-on, live coding on a REPL. To make things easier, I&amp;rsquo;ve created a maven project that imports the clojure jar and lets you obtain dependencies from clojars. The repo is here. This repo wouldn&amp;rsquo;t have been possible without the clojure maven plugin, written by Mark Derricutt.
I&amp;rsquo;ve more or less followed this guide</description>
    </item>
    
    <item>
      <title>Brown-bag session: refactoring legacy code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/01/brownbag-session-refactoring-legacy-code/</link>
      <pubDate>Wed, 01 Jul 2015 13:18:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/01/brownbag-session-refactoring-legacy-code/</guid>
      <description>Today I have done a brown bag session about refactoring legacy code. It includes:
 legacy code definition. There is no agreement about this in the team. the legacy code change algorithm (source is Feathers, Working effectively with legacy code). Plus an example about it. working with legacy code experience with it.  The slides are available here (PDF format)
We also did a practical session, whose experience report is here</description>
    </item>
    
    <item>
      <title>Brown-bag session: Refactoring legacy code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</link>
      <pubDate>Tue, 23 Jun 2015 19:19:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</guid>
      <description>Today I have facilitated a brown bag session about refactoring legacy code applications, as this is the case with one of the applications we maintain and add new features to.
The contents of the session:
 Briefly exposing the problem to the team, me taking the role of the Product Owner (PO) Ask the dev team to add an easy feature Do it without tests, as it was so simple that they thought they could do it (using mob programming) Ask if they were satisfied by the patch / fix.</description>
    </item>
    
    <item>
      <title>Brown-bag session: docker</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/16/brown-bag-session-docker/</link>
      <pubDate>Tue, 16 Jun 2015 18:52:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/16/brown-bag-session-docker/</guid>
      <description>Today we have done a brown bag session about Docker. One of the team members explained to us the latest news, topics and how tos, including:
 the difference between a container and an image diffing image contents AUFS (Another Union FS) persistent vs non-persistent (volatile) filesystems running CMD and other commands on the instance problems of running with permission = root (or its group) downsides of it how to compare it with a virtual machine  </description>
    </item>
    
    <item>
      <title>Brown-bag session: Refactoring</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/11/brownbag-session-refactoring/</link>
      <pubDate>Thu, 11 Jun 2015 20:22:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/11/brownbag-session-refactoring/</guid>
      <description>At a client, today we&amp;rsquo;ve done a brown-bag session on refactoring: we&amp;rsquo;ve gone through and a live demo, including refactoring a core piece of our code.
We&amp;rsquo;ve done some mob programming to help identify some smells and how to fix them.</description>
    </item>
    
    <item>
      <title>Internal training: BPM: Process and tools for developers</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/02/internal-training-bpm-tool-and-process/</link>
      <pubDate>Tue, 02 Jun 2015 22:20:09 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/02/internal-training-bpm-tool-and-process/</guid>
      <description>At a client, I&amp;rsquo;ve presented today an internal training on &amp;ldquo;BPM: Process and tools for developers&amp;rdquo;
In it, we have introduced the BPM concept and the main ideas in Activiti BPM.
Also techniques for hotswapping processes, tips and how-tos.</description>
    </item>
    
    <item>
      <title>Internal training: QA &amp;amp; how to test</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/18/internal-training-qa-and-how-to-test/</link>
      <pubDate>Mon, 18 May 2015 22:20:09 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/18/internal-training-qa-and-how-to-test/</guid>
      <description>At a client, we&amp;rsquo;ve done today an internal training on &amp;ldquo;QA &amp;amp; how to test&amp;rdquo;. In it, the most skilled person with the QA role in the dev team has explained to us some techniques and concepts for testing
My notes Verification vs validation: building the product right vs building the right product.
Principles Extracted from ISTQB:
 testing shows presence of defects exhaustive testing is impossible early testing is better than later testing defect clustering: areas with bigger defect ratio or more critical, etc should be tested more thoroughly pesticide paradox testing is context-dependent absence of errors fallacy: the absence of defects does not imply perfect software.</description>
    </item>
    
    <item>
      <title>Internal training: Testing is hard - just do it</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it/</link>
      <pubDate>Tue, 05 May 2015 23:00:17 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it/</guid>
      <description>At a client, last week I&amp;rsquo;ve organized an internal training, in the form of a discussion about this article: Testing is hard - just do it
Our thoughts  When a bug is found, prove it exists with a test
 This immediately reduces defect rate: the same regression cannot be introduced again
 fix a bug a second time
 If fixing a bug (having defects in your code) was &amp;lsquo;waste&amp;rsquo;, as defined by lean methodologies, it also is wast fixing it for the following times</description>
    </item>
    
    <item>
      <title>Internal training: Introduction to AngularJs</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/30/internal-training-introduction-to-angularjs/</link>
      <pubDate>Thu, 30 Apr 2015 20:22:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/30/internal-training-introduction-to-angularjs/</guid>
      <description>At a client, today I&amp;rsquo;ve done an internal training on angular js: we&amp;rsquo;ve prepared some slides and a live demo.
The repository with all the information can be found here.
Apparently, the training has been a success, given that most of the talent in the team is backend focused (as opposed to full-stack) and changing from java to javascript is not straight-forward.
Note: this post has been created a posteriori, dated with the correct training timestamp.</description>
    </item>
    
    <item>
      <title>Brown-bag session: maven</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/06/brown-bag-session-maven/</link>
      <pubDate>Fri, 06 Mar 2015 22:18:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/06/brown-bag-session-maven/</guid>
      <description>Yesterday we did a training about the maven tool. One of the team members explained to us some topics including:
 lifecycles profiles and how to create one  slowTests for integration tests (this client only) downloadJavadoc downloadSources   convention over configuration scopes of the dependencies (test, runtime, compile, provided) tricks about the tool:  order of the dependencies (especially junit, hamcrest)   plugins and how to build one destination folders  target, classes, test-classes, etc    Note: this post was created a posteriori, with the original date</description>
    </item>
    
  </channel>
</rss>
