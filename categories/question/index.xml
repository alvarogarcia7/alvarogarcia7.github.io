<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/question/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/question/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in February 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/02/01/self-study-in-february-2017/</link>
      <pubDate>Wed, 01 Feb 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/02/01/self-study-in-february-2017/</guid>
      <description>

&lt;h2 id=&#34;whatsapp-security-vulnerability&#34;&gt;WhatsApp Security Vulnerability&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.schneier.com/blog/archives/2017/01/whatsapp_securi.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Bruce Schneier on a security defect in whatsapp, where an &amp;lsquo;unconfirmed&amp;rsquo; message can be re-encrypted (with a new key) and resent. This is a vector for some attacks.&lt;/p&gt;

&lt;p&gt;Tags: bruce-schneier, security, whatsapp, encryption, attack-vector&lt;/p&gt;

&lt;h2 id=&#34;encrypted-email-service-once-used-by-edward-snowden-relaunches&#34;&gt;Encrypted email service once used by Edward Snowden relaunches&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://theintercept.com/2017/01/20/encrypted-email-service-once-used-by-edward-snowden-to-relaunch/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, by Kim Zetter, on Lavabit restablishing its service. Explains the company&amp;rsquo;s past and the new services they are offering&lt;/p&gt;

&lt;p&gt;Tags: lavabit, kim-zetter, privacy, encryption, email, mail&lt;/p&gt;

&lt;h2 id=&#34;what-happens-when-you-mix-java-with-a-1960-ibm-mainframe&#34;&gt;What Happens When You Mix Java with a 1960 IBM Mainframe&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/happens-use-java-1960-ibm-mainframe/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Cassel about the legacy infrastructure of hardware that the U.S. government agencies have. How old mainframes are still useful to web applications and how these mainframes can communicate with more modern systems, through APIs&lt;/p&gt;

&lt;p&gt;Tags: mainframe, david-cassel, marianne-bellotti, legacy-hardware, legacy-software, legacy-system, legacy, api&lt;/p&gt;

&lt;h2 id=&#34;systems-we-love-how-the-past-informs-our-present&#34;&gt;Systems We Love: How the Past Informs Our Present&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/systems-we-love/&#34; target=&#34;_blank&#34;&gt;this experience report&lt;/a&gt; by David Cassel about the conference &amp;ldquo;Systems we love&amp;rdquo;: a mix of papers we love and systems that happened at San Francisco in December 2016&lt;/p&gt;

&lt;p&gt;Tags: david-cassel, systems-we-love, papers-we-love, system, conference, experience-report, joyent&lt;/p&gt;

&lt;h2 id=&#34;the-agonizing-death-of-an-astronaut&#34;&gt;The agonizing death of an astronaut&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.javaslang.io/the-agonizing-death-of-an-astronaut/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Daniel Dietrich on why the implementation of the &lt;code&gt;Option&lt;/code&gt; in Javaslang seems to be broken but, in fact, follows the rules of the monads.&lt;/p&gt;

&lt;p&gt;Explains why &lt;code&gt;map&lt;/code&gt; should be used for non-changing contexts and &lt;code&gt;flatmap&lt;/code&gt; should be used for changing it.&lt;/p&gt;

&lt;p&gt;Tags: daniel-dietrich, monad, option, haskell, optional, maybe, scala, javaslang&lt;/p&gt;

&lt;h2 id=&#34;we-reverse-engineered-16k-apps-here-s-what-we-found&#34;&gt;We reverse engineered 16k apps, here’s what we found&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hackernoon.com/we-reverse-engineered-16k-apps-heres-what-we-found-51bdf3b456bb&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Fallible team, in which they describe the analysis of apps. They discovered 2500 apps with key and secret on them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] whenever you hardcode any API key/token in the app, think hard if you really need to hardcode this, understand the API usage and the read/write scope of the tokens before putting it in the apps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: analysis, security, app, key, token, api, fallible&lt;/p&gt;

&lt;h2 id=&#34;oh-the-emails-you-ll-get&#34;&gt;Oh, the emails you’ll get&amp;hellip;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.joelonsoftware.com/2006/11/09/oh-the-emails-youll-get/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joel Spolsky, in which he explains how some companies focus on some metrics for measuring performance, how difficult it is to measure performance.&lt;/p&gt;

&lt;p&gt;Tags: joel-spolsky, performance, management, consulting&lt;/p&gt;

&lt;h2 id=&#34;2002-07-15-measurement&#34;&gt;2002/07/15 - Measurement&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.joelonsoftware.com/2002/07/15/20020715/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joel Spolsky where he explains how measuring performance is difficult, according to  Robert D. Austin in his book Measuring and Managing Performance in Organizations. He gives some examples of that, mainly about paying out bonuses for performance reasons.&lt;/p&gt;

&lt;p&gt;Tags: joel-spolsky, robert-austin, measuring-performance, managing-performance, book, knowledge-worker, bonus, pay, performance, organization&lt;/p&gt;

&lt;h2 id=&#34;the-purpose-of-life-is-not-happiness-it-s-usefulness&#34;&gt;The Purpose Of Life Is Not Happiness: It’s Usefulness&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://dariusforoux.com/happiness-usefulness/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Darius Foroux on what the purpose of life is about: making a difference (even if small) in what you leave behind.&lt;/p&gt;

&lt;p&gt;Tags: psychology, purpose-of-life, usefulness, happiness, darius-foroux&lt;/p&gt;

&lt;h2 id=&#34;the-future-of-user-interfaces&#34;&gt;The Future of User Interfaces&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://brandur.org/interfaces&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brandur on how interfaces are becoming more and more bloated, slow and ridden with animations. All of that is targeted to the beginner user, rather than the proficient one. He suggests some ideas on finding inspiration from the terminal applications&lt;/p&gt;

&lt;p&gt;Tags: brandur, interface, interface-design, ux, ui&lt;/p&gt;

&lt;h2 id=&#34;my-increasing-frustration-with-clojure&#34;&gt;My Increasing Frustration With Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ashtonkemerling.com/blog/2016/06/11/my-increasing-frustration-with-clojure/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ashton Kemerling on the problems he has found working professionally with Clojure and some possible solutions.&lt;/p&gt;

&lt;p&gt;Tags: clojure, language, ashton-kemerling, functional-programming, problem, frustration&lt;/p&gt;

&lt;h2 id=&#34;java-without-if&#34;&gt;Java Without If&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ashtonkemerling.com/blog/2017/01/26/java-without-if/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ashton Kemerling on how he is using a library called &amp;lsquo;lambda&amp;rsquo;, which brings some of the functional programming features to Java.&lt;/p&gt;

&lt;p&gt;Tags: lambda, library, ashton-kemerling, functional-programming, java, palatable, john-napier&lt;/p&gt;

&lt;h2 id=&#34;top-ten-pull-request-review-mistakes&#34;&gt;Top ten pull request review mistakes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.scottnonnenberg.com/top-ten-pull-request-review-mistakes/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Scott Nonnenberg on the most common mistakes while doing a code review in the context of a pull request.&lt;/p&gt;

&lt;p&gt;Tags: scott-nonnenberg, pull-request, code-review, github, diff, listicle&lt;/p&gt;

&lt;h2 id=&#34;shutting-down-simplicity-itself&#34;&gt;Shutting down Simplicity Itself&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://daviddawson.me/blog/2017/02/04/simplicity-itself-shutdown.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Dawson on why he&amp;rsquo;s shutting down his consultancy company, Simplicity Itself, which was mainly focused on microservices.&lt;/p&gt;

&lt;p&gt;Tags: david-dawson, simplicity-itself, shut-down, company, consulting, post-mortem, postmortem&lt;/p&gt;

&lt;h2 id=&#34;turn-off-your-cellphone&#34;&gt;Turn Off Your Cellphone&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://brandur.org/fragments/turn-off-your-cellphone&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brandur on how to get more done by unplugging the notifications&lt;/p&gt;

&lt;p&gt;Tags: brandur, time-management, interruption, phone, notification&lt;/p&gt;

&lt;h2 id=&#34;the-dark-standup&#34;&gt;The Dark Standup&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://18f.gsa.gov/2017/01/19/the-dark-standup/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Alan Brouilette on the steps they took to reduce the amount of hours worked. It started with a few extra questions during the daily standup:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;What didn’t you do today because you stopped working on time?&lt;/li&gt;
&lt;li&gt;What will the impact be on tomorrow because of it?&lt;/li&gt;
&lt;li&gt;How much more time would you have needed to get everything done today?&lt;/li&gt;
&lt;li&gt;What will you do with those hours tonight instead?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;and what they realized after a two-week experiment:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The costs of context switching are much higher than we realized.&lt;/li&gt;
&lt;li&gt;We were spending a lot of time doing things that were urgent but not important, or that didn’t need to have been urgent at all.&lt;/li&gt;
&lt;li&gt;We needed to be a lot more ruthless about saying “No.”&lt;/li&gt;
&lt;li&gt;Some Operations roles are legitimately shorthanded, some of us just needed to impose a little order.&lt;/li&gt;
&lt;li&gt;FOMO WIP (unnecessary work one takes on because one fears missing something) is a real problem, especially as regards to Slack and meetings.&lt;/li&gt;
&lt;li&gt;We worked better in the time we had to work, knowing it was finite.&lt;/li&gt;
&lt;li&gt;Work-life balance improves both work and life. People literally slept better when limiting after-hours exposure to Slack and email. [&amp;hellip;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: dark-standup, quote, limited-time, overtime, team-management, experiment, question, alan-brouilette&lt;/p&gt;

&lt;h2 id=&#34;what-it-means-to-be-a-remote-first-company&#34;&gt;What it Means to be a Remote-First Company&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.stackoverflow.blog/code-for-a-living/what-it-means-to-be-a-remote-first-company&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by  Alyssa Mazzina on what Stack Overflow does to keep its remote employees happy, how they are a remote-first company and small practicalities like tools, holiday gifts and stipends.&lt;/p&gt;

&lt;p&gt;Tags: alyssa-mazzina, team-management, remote, remote-work, stack-overflow, team&lt;/p&gt;

&lt;h2 id=&#34;google-s-not-so-secret-new-os&#34;&gt;Google’s not-so-secret new OS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://techspecs.blog/blog/2017/2/14/googles-not-so-secret-new-os&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; describing the state of Google&amp;rsquo;s new operating system, Fuchsia or Andromeda (the final name is not final yet).&lt;/p&gt;

&lt;p&gt;Tags: google, os, operating-system, daniel-matte, fuchsia, andromeda&lt;/p&gt;

&lt;h2 id=&#34;four-secrets-of-people-who-finish-their-workweeks-on-thursday&#34;&gt;Four Secrets Of People Who Finish Their Workweeks On Thursday&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.fastcompany.com/3068122/work-smart/four-secrets-of-people-who-finish-their-workweeks-on-thursday&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kat Boogaard that includes four tips to finish your week early:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They Schedule Intentionally&lt;/li&gt;
&lt;li&gt;They Focus On Priorities&lt;/li&gt;
&lt;li&gt;They Tune Out Distractions&lt;/li&gt;
&lt;li&gt;They Find Shortcuts&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tags: kat-boogaard, time-management, eisenhower-productivity-matrix, urgent-vs-important, important-vs-urgent, urgent, important, productivity&lt;/p&gt;

&lt;h2 id=&#34;reflecting-on-one-very-very-strange-year-at-uber&#34;&gt;Reflecting On One Very, Very Strange Year At Uber&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Susan J Fowler on some bad HR practices at Uber and how they are part of the reason their low percentage of women (3%) in the engineering team.&lt;/p&gt;

&lt;p&gt;Tags: sexism, uber, susan-fowler, hr, human-resources, women, work-environment, review&lt;/p&gt;

&lt;h2 id=&#34;ni-dioses-ni-reyes-sólo-el-hombre&#34;&gt;Ni dioses ni reyes. Sólo el hombre.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive1.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=860ccae5e2&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; (in Spanish) by David Bonilla on which he talks about the God Mode and how that is implemented in different applications.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also liked this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Los desarrolladores sólo somos herreros que forjan ceros y unos. Construimos herramientas para satisfacer necesidades de nuestros usuarios, sin que eso nos haga mejores que ellos o nos dé el derecho de supervisar y juzgar sus actos. A la hora de diseñar nuevos sistemas y funcionalidades, lo único que nunca deberíamos olvidar es que no somos dioses ni reyes, sólo hombres.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rough translation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We, developers, we are only blacksmiths of the digital era. We build tools to satisfy our user&amp;rsquo;s need, without that fact making us better than they are or without the right to overview what they do or to judge their acts. When designing new systems and features, the only thing we must never forget is that we are neither gods nor kings, just humans.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;las-tres-erres&#34;&gt;Las tres erres&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article (in Spanish) by David Bonilla in which he explains three necessary factors when considering a job offer:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Referentes: es imposible conocer a toda la plantilla de una empresa, pero si conoces a dos o tres empleados clave, podrás hacerte una idea de cómo será el equipo que te vas a encontrar. La gente prefiere trabajar con compañeros que compartan su ética y valores. Yo conocía a casi toda la plantilla de Comalatech tras haber coincidido con unos y otros en distintos eventos… y aún hay gente que se pregunta para qué sirve ir a conferencias técnicas si en Internet “se puede encontrar todo”.&lt;/li&gt;
&lt;li&gt;Referencias: es complicado, pero en el día a día una persona puede ser completamente diferente a la imagen que proyecta públicamente. Me ha pasado. Por eso es importante contar con referencias, terceras personas –antiguos empleados, clientes o proveedores- con las que haya trabajado. Los españoles no solemos pedirlas, pero para los anglosajones son un requisito imprescindible. En el caso de Comala, conseguí las mejores de la mejor fuente posible.&lt;/li&gt;
&lt;li&gt;Retos: los profesionales trabajamos por dinero, pero a partir de cierto nivel de salario, podemos permitirnos el lujo de elegir un trabajo u otro según otros factores. En mi caso, siempre he priorizado por encima de todo el potencial de aprendizaje y, en ese sentido, Comalatech no tenía rival.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: referent, reference, challenge, david-bonilla, bonilista, change-job, job-offer&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in November 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</link>
      <pubDate>Mon, 02 Nov 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</guid>
      <description>

&lt;h2 id=&#34;call-me-maybe-rabbitmq&#34;&gt;Call me maybe: RabbitMQ&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://aphyr.com/posts/315-call-me-maybe-rabbitmq&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kyle Kingsbury on using RabbitMQ as a lock service. It investigates and gives a counterexample of using it for this purpose.&lt;/p&gt;

&lt;p&gt;Uses Knossos to do the testing and surfaces a problem with it. Explains specific problems on locking: at-most-once and at-least-once message delivery&lt;/p&gt;

&lt;p&gt;Note: References Jepsen (I guess an inside joke to the song &amp;ldquo;Call me maybe&amp;rdquo; by Carly Rae Jepsen) for at-most-once and at-least-once message delivery.&lt;/p&gt;

&lt;p&gt;Tags: rabbitmq, kyle-kingsbury, lock, cap-theorem, distributed-system, jepsen, knossos, at-most-once-delivery, at-least-once-delivery, counterexample, mutex&lt;/p&gt;

&lt;h2 id=&#34;everyone-is-potentially-a-teacher&#34;&gt;Everyone is potentially a teacher&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/09/everyone-is-potentially-a-teacher&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Carlos Blé where he explains that everyone can have ideas worth spreading and that the knowledge not only comes from others but also from the relationships that tie you to other people.&lt;/p&gt;

&lt;p&gt;Tags: carlos-ble, teaching, pedagogy, idea, teacher, relationship&lt;/p&gt;

&lt;h2 id=&#34;ragel-state-machine-compiler&#34;&gt;Ragel State Machine Compiler&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.colm.net/open-source/ragel/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining what the Ragel project is about: a code generator from regex to code in languages such as C#, Java, etc. It is limited to finite state machines (FSM), with determinism. It can also handle some indeterminism. Written by Adrian D. Thurston&lt;/p&gt;

&lt;p&gt;Tags: adrian-thurston, fsm, state-machine, finite-state-machine, code-generation, ragel&lt;/p&gt;

&lt;h2 id=&#34;http-is-obsolete-it-s-time-for-the-distributed-permanent-web&#34;&gt;HTTP is obsolete. It&amp;rsquo;s time for the distributed, permanent web&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ipfs.io/ipfs/QmNhFJjGcMPqpuYfxL62VVB9528NXqDNMFXiqN5bgFYiZ1/its-time-for-the-permanent-web.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kyle Drake explaining the need for a permanent, distributed web archive.&lt;/p&gt;

&lt;p&gt;Using a distributed file system (IPFS) and software similar to Bitcoin, they can host parts of the web locally, making it immutable and distributed&lt;/p&gt;

&lt;p&gt;Tags: kyle-drake, web-archive, centralization, decentralization, distribution, permanent-web, ipfs, federation,&lt;/p&gt;

&lt;h2 id=&#34;recovering-from-the-integrated-tests-scam&#34;&gt;Recovering From the Integrated Tests Scam&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive1.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=42e61e203e&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; from J. B. Rainsberger on the integrated test scam and how to solve it: refactoring.&lt;/p&gt;

&lt;p&gt;Tags: jbrains, tdd, integrated-test, integration-test, j-rainsberger&lt;/p&gt;

&lt;h2 id=&#34;broken-windows-theory&#34;&gt;Broken windows theory&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Broken_windows_theory&#34; target=&#34;_blank&#34;&gt;this wikipedia article&lt;/a&gt; that talks about the broken windows theory, that states that controlling and monitoring public spaces leads to lowering the serious crimes.&lt;/p&gt;

&lt;p&gt;Cites three causes for this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Social norms and conformity&lt;/li&gt;
&lt;li&gt;Lack of routing monitoring&lt;/li&gt;
&lt;li&gt;Social signaling and signal crime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also discusses examples in the US and in the Netherlands, as well as criticisms.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve read it to better understand how to apply this theory to software development, on a day-to-day basis.&lt;/p&gt;

&lt;p&gt;Tags: wikipedia, theory, broken-window&lt;/p&gt;

&lt;h2 id=&#34;scsh&#34;&gt;Scsh&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Scsh&#34; target=&#34;_blank&#34;&gt;the wikipedia page&lt;/a&gt; for Scsh, the Scheme shell.&lt;/p&gt;

&lt;h2 id=&#34;why-is-scala-s-type-inference-not-as-powerful-as-haskell-s&#34;&gt;Why is Scala&amp;rsquo;s type inference not as powerful as Haskell&amp;rsquo;s?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the reasoning why Haskell supports other type inferences that are not present in Scala, in &lt;a href=&#34;http://stackoverflow.com/questions/7234095/why-is-scalas-type-inference-not-as-powerful-as-haskells&#34; target=&#34;_blank&#34;&gt;this StackOverflow question&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: scala, haskell, type-inference, hindley-milner, type-inference-algorithm&lt;/p&gt;

&lt;h2 id=&#34;the-future-of-the-lispm&#34;&gt;The Future of the LispM&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://arrdem.com/2014/11/28/the_future_of_the_lispm/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining the past and current situation in the Lisp world: from Lisp, to LispM, to the MIT and Symbolics Inc., to Clojure and Scheme.&lt;/p&gt;

&lt;p&gt;Also talks about integration with the operating system and its execution in the microprocessor. Written by Reid McKenzie&lt;/p&gt;

&lt;p&gt;Tags: reid-mckenzie, lisp, lispm, clojure, scheme, symbolics&lt;/p&gt;

&lt;h2 id=&#34;the-lisp-curse&#34;&gt;The Lisp Curse&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.winestockwebdesign.com/Essays/Lisp_Curse.html&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Rudolf Winestock, where he explains the low barrier (or low cost) for people in powerful languages (such as Lisp) to not accept the status quo in their project and fork / start their own.&lt;/p&gt;

&lt;p&gt;It also compares languages and the people attracted to them. Cites Mark Tarver&amp;rsquo;s essays several times, including the Brilliant Bipolar Mind (BBM) in &lt;a href=&#34;https://web.archive.org/web/20150308085419/http://www.lambdassociates.org/blog/bipolar.htm&#34; target=&#34;_blank&#34;&gt;this other&lt;/a&gt; essay (from WebArchive). Compares the BBM and the normal worker in usefulness to companies.&lt;/p&gt;

&lt;p&gt;Cites the Pareto principle (80-20 rule): a single hacker will port 80% the library from another language, leaving it buggy, undocumented and only understandable by the original author (assuming this is only 20% of the work). The rest (e.g., documentation, bugfixing, maintenance) are dropped and never taken care of.&lt;/p&gt;

&lt;p&gt;Cites that this could be somewhat based on the facility of creating new features for the language. A small effort implies small implementation time, leaving no margin for thinking it through and seeing other corner cases. Also, a single person working on the project means no code review. The style might be coherent (always the same one), but might not be idiomatic, understandable by others, maintainable, etc.&lt;/p&gt;

&lt;p&gt;Closes the essay with this quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The expressive power of Lisp has drawbacks. There is no such thing as a free lunch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: rudolf-winestock, essay, pareto-principle, hacking, one-man-band, lisp, no-free-lunch, quote&lt;/p&gt;

&lt;h2 id=&#34;the-bipolar-lisp-programmer&#34;&gt;The Bipolar Lisp Programmer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://web.archive.org/web/20150308085419/http://www.lambdassociates.org/blog/bipolar.htm&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Mark Tarver on the Bipolar Lisp programmmer or the koan of Lisp.&lt;/p&gt;

&lt;p&gt;It explains the history of the Brilliant Bipolar Mind (BBM) when they attend high school and college. The freedom they&amp;rsquo;re given, exactly the same as in Lisp, as you don&amp;rsquo;t need to mix and socialize with others to create a good-enough solution.&lt;/p&gt;

&lt;p&gt;In this fashion, he says, most of the projects are 80% finished, not documented, not maintained. The same problems that worry enterprises.&lt;/p&gt;

&lt;p&gt;Cites the article &amp;ldquo;Lisp: Good News, Bad News, How to Win Big&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: essay, mark-tarver, bipolar-lisp-programmer, lisp-programmer, programmer, brillian-bipolar-mind, blp, bbm, koan&lt;/p&gt;

&lt;p&gt;Note: this article was no longer present on its original site. Fetched it from the Web Archive (WayBack Machine).&lt;/p&gt;

&lt;h2 id=&#34;writing-readable-clojure-code&#34;&gt;Writing readable Clojure code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/jiriknesl/writing-readable-clojure-code&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Jiří Knesl, that explains how to write better clojure code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Macros&lt;/li&gt;
&lt;li&gt;HOFs&lt;/li&gt;
&lt;li&gt;left-to-right vs right-to-left code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: clojure, jiri-knesl, macro, hof, thread, slide&lt;/p&gt;

&lt;h2 id=&#34;how-can-i-get-a-reference-to-a-method&#34;&gt;How can I get a reference to a method?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/485151/how-can-i-get-a-reference-to-a-method&#34; target=&#34;_blank&#34;&gt;this question&lt;/a&gt;, &lt;a href=&#34;http://stackoverflow.com/questions/4294485/how-do-i-reference-a-function-in-ruby&#34; target=&#34;_blank&#34;&gt;another question&lt;/a&gt; from StackOverflow&lt;/p&gt;

&lt;p&gt;Tags: stackoverflow, question, ruby, functional-programming, method-reference&lt;/p&gt;

&lt;h2 id=&#34;implicit-and-explicit-blocks&#34;&gt;Implicit and Explicit Blocks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/18-blocks/lessons/55-new-lesson&#34; target=&#34;_blank&#34;&gt;this lesson from rubyMonk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: rubymonk, lesson, block, ruby&lt;/p&gt;

&lt;h2 id=&#34;what-s-point-free-programing&#34;&gt;What&amp;rsquo;s Point-free Programing?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://xahlee.info/comp/point-free_programing.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Xah Lee explaining point-free programming, which requires a glance at function decomposition (currying)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] “point-free programing” is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is about a particular &lt;strong&gt;syntax&lt;/strong&gt; for &lt;strong&gt;function definition&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;strong&gt;defining a function&lt;/strong&gt;, no symbol is used for function parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;oracle-s-planned-obsolescence-for-java&#34;&gt;Oracle’s “planned obsolescence” for Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://jaxenter.com/oracle-and-javas-planned-obsolescence-121144.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Coman Hamilton on the possible Java&amp;rsquo;s planned obsolescence by Oracle.&lt;/p&gt;

&lt;p&gt;Discusses features pushed to future releases, comparing it to other legacy languages.&lt;/p&gt;

&lt;p&gt;Tags: obsolescence, legacy-language, planned-obsolescence, java, java-ee, oracle, fortran, cobol, coman-hamilton&lt;/p&gt;

&lt;h2 id=&#34;your-first-ruby-native-extension-c&#34;&gt;Your first Ruby native extension: C&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.jcoglan.com/2012/07/29/your-first-ruby-native-extension-c/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about writing a native extension for ruby. Written by James Coglan&lt;/p&gt;

&lt;p&gt;Tags: james-coglan, ruby, c, native-extension&lt;/p&gt;

&lt;h2 id=&#34;what-s-the-difference-between-equal-eql-and&#34;&gt;What&amp;rsquo;s the difference between equal?, eql?, ===, and ==?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/7156955/whats-the-difference-between-equal-eql-and&#34; target=&#34;_blank&#34;&gt;this stackoverflow&lt;/a&gt; question regarding Ruby operators: equal?, eql?, ===, ==:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;==: generic equality&lt;/li&gt;
&lt;li&gt;===: case equality (for case - when)&lt;/li&gt;
&lt;li&gt;eql?: hash equality&lt;/li&gt;
&lt;li&gt;equal?: identity comparison (pointer comparison)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: comparison, stackoverflow, ruby, equal, eq, ==, ===, question, answer, jtbandes&lt;/p&gt;

&lt;h2 id=&#34;kanban&#34;&gt;Kanban&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://es.wikipedia.org/wiki/Kanban&#34; target=&#34;_blank&#34;&gt;the wikipedia page&lt;/a&gt; for Kanban (Spanish)&lt;/p&gt;

&lt;p&gt;Tags: wikipedia, kanban, agile-methodology, management&lt;/p&gt;

&lt;h2 id=&#34;is-your-scrum-team-agile&#34;&gt;Is your Scrum team Agile?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.thesoftwarecraft.com/2014/04/is-your-scrum-team-agile.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by  Bart Bakker where he discusses some common patterns in Agile implementations (in software companies)&lt;/p&gt;

&lt;p&gt;Tags: scrum, team, agile, scrum-implementation, bart-bakker&lt;/p&gt;

&lt;h2 id=&#34;mejora-tu-trabajo-en-equipo-con-el-método-kanban&#34;&gt;Mejora tu trabajo en equipo con el método Kanban&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://hipertextual.com/archivo/2013/11/que-es-kanban/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains then kanban management framework, with its principles and its values. Written by Jose López (in Spanish)&lt;/p&gt;

&lt;p&gt;Tags: kanban, management, agile-methodology, management-framework, principle, value, jose-lopez&lt;/p&gt;

&lt;h2 id=&#34;qué-es-el-método-kanban-para-la-gestión-de-proyectos&#34;&gt;¿Qué es el método Kanban para la gestión de proyectos?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javiergarzas.com/2011/11/kanban.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; (Spanish) written by Javier Garzás where it is explained the kanban methodology and three of its main rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;visualize workflow&lt;/li&gt;
&lt;li&gt;limit WIP&lt;/li&gt;
&lt;li&gt;measure {lead, cycle} time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: kanban, management, agile-methodology, management-framework, principle, value, javier-garzas&lt;/p&gt;

&lt;h2 id=&#34;describe-vs-context-in-rspec&#34;&gt;describe vs. context in rspec&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lmws.net/describe-vs-context-in-rspec&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains the (lack of) functional difference between RSpec&amp;rsquo;s &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; methods. The difference is contextual (i.e., the amount of information they convey). Written by LM&lt;/p&gt;

&lt;p&gt;Tags: rspec, ruby, describe, context, difference&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>