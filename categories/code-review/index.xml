<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code Review on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/code-review/</link>
    <description>Recent content in Code Review on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Mar 2015 22:44:42 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/code-review/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Open Space: Code reviews</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews/</link>
      <pubDate>Mon, 16 Mar 2015 22:44:42 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews/</guid>
      <description>

&lt;p&gt;Today we&amp;rsquo;ve discussed about code reviews on &lt;a href=&#34;http://www.meetup.com/Barcelona-Software-Craftsmanship/events/220293683/&#34; target=&#34;_blank&#34;&gt;this open space&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;

&lt;p&gt;These are my notes, in no particular order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reduce information silos all around the company, as everyone [technical] can participate in these events&lt;/li&gt;
&lt;li&gt;raise the &amp;ldquo;just arrived&amp;rdquo; people&amp;rsquo;s knowledge [Difficult to hit the ground up and running, but these code review sessions can help]&lt;/li&gt;
&lt;li&gt;invest one person as &amp;lsquo;sheriff&amp;rsquo; for the sprint: they will take care of static analysis tools (such as sonar) and continuous integration (CI; such as jenkins). They will make sure others follow the working agreements&lt;/li&gt;
&lt;li&gt;In the academic environment, some teams do share their patches via mailing lists and this makes it much slower to adapt and review changes [As compared to an on-line sharing system - like web-based interfaces to distributed version control systems] As this team doesn&amp;rsquo;t have a CI tool, they must test it / try it manually before reviewing the code.&lt;/li&gt;
&lt;li&gt;Pair programming does not remove the need for code review [This has been surfaced twice]&lt;/li&gt;
&lt;li&gt;Your work is not more important than your team members&amp;rsquo; one. [Related to not having time to code review]&lt;/li&gt;
&lt;li&gt;Do code reviews include architecture? [We&amp;rsquo;ve agreed that the architecture to some degree should be discussed before code reviews]&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Troll review&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Anyone can veto pull requests [By opening a question; do not allow for pull requests to be closed with open questions]&lt;/li&gt;
&lt;li&gt;A 15-minute time slot everyday to code review [As code hygiene; Done right after lunch,  breakfast or just before leaving, when you&amp;rsquo;re tired]&lt;/li&gt;
&lt;li&gt;Code review tasks have higher priority than other tasks [Do not take other tasks if there are code reviews to do]&lt;/li&gt;
&lt;li&gt;Code reviews put a lot of pressure so people learn and the knowledge level equalizes across the team&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;My conclusions, even though some of them were not shared by everyone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most of the people approve of code review practices: either they are doing them or are trying to apply them at their clients. (Warning: this was a code review meetup, so there&amp;rsquo;s a bias: people not interested in them won&amp;rsquo;t come). No one was against doing them.&lt;/li&gt;
&lt;li&gt;Code reviews have a cost, although it is beneficial to do them&lt;/li&gt;
&lt;li&gt;Should your teammates not want to participate in the code review after agreeing on doing them, appeal to their professionalism / accountability, then to their time (stated before), then troll them: after a few (healthy) trolling code review sessions, people will feel more comfortable reviewing and being reviewed. Special mention to Miguel who coined (?)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; the term: troll review.&lt;/li&gt;
&lt;li&gt;Great way of equalizing the (technical) knowledge level within the team&lt;/li&gt;
&lt;li&gt;Great way of reduce information silos across the whole company&lt;/li&gt;
&lt;li&gt;They can be fun if you do them properly&lt;/li&gt;
&lt;li&gt;The need for code reviews do not disappear when pair programming: as long as you have a personal attachment to the code, you might not see its defects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;your-own&#34;&gt;Your own&lt;/h2&gt;

&lt;p&gt;Should you have any conclusions to share, please add a pull request to this &lt;a href=&#34;https://github.com/alvarogarcia7/blog_source&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt; or do it as a comment.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;after searching some ten minutes on the internet, there are only a couple of questions on meta.codereview stackoverflow, but not related to this. &lt;strong&gt;Update&lt;/strong&gt;: In &lt;a href=&#34;https://twitter.com/mallyvai/status/314260072798752768&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;, Vaibhav Mallya talks about a #trollReview, related to code. So, unfortunately, Miguel, you&amp;rsquo;re not the first one. But there are fewer than 10 results on twitter.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Open discussion: On code reviews</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/07/open-discussion-on-code-reviews/</link>
      <pubDate>Sat, 07 Feb 2015 18:54:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/07/open-discussion-on-code-reviews/</guid>
      <description>

&lt;p&gt;At a client, I organized an open discussion on code reviews. We had a great conversation.&lt;/p&gt;

&lt;p&gt;The main idea was to discuss about it and share the ideas each one had. I didn&amp;rsquo;t want it to turn into a masterclass (see &lt;a href=&#34;http://chimera.labs.oreilly.com/books/1234000001813/ch02.html#the_white_belt&#34; target=&#34;_blank&#34;&gt;the white belt&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;benefits&#34;&gt;Benefits&lt;/h2&gt;

&lt;p&gt;These are the main benefits we saw in it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Increased trust&lt;/li&gt;
&lt;li&gt;Learning from others, other approaches&lt;/li&gt;
&lt;li&gt;Less defects, more quality&lt;/li&gt;
&lt;li&gt;Increased &lt;a href=&#34;http://en.wikipedia.org/wiki/Bus_factor&#34; target=&#34;_blank&#34;&gt;bus factor&lt;/a&gt;, decreased information silos&lt;/li&gt;
&lt;li&gt;Also:

&lt;ul&gt;
&lt;li&gt;Getting out of your comfort zone&lt;/li&gt;
&lt;li&gt;Communicating more often (code style, edge cases, complaining, etc)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pair-programming&#34;&gt;Pair programming&lt;/h2&gt;

&lt;p&gt;Then we discussed about the topic of &lt;a href=&#34;https://alvarogarcia7.github.io/{{site.category_dir}}/code-review&#34;&gt;code reviews&lt;/a&gt; and &lt;a href=&#34;https://alvarogarcia7.github.io/{{site.category_dir}}/pair-programming/&#34;&gt;pair programming&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How do they mix&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is the need for code review reduced when doing pair programming?&lt;/li&gt;
&lt;li&gt;It is cheaper to catch defects when pairing than code review (e.g., less to modify, mental caches are hot, &amp;hellip;), so why do code reviews? &lt;a href=&#34;https://twitter.com/jbrains&#34; target=&#34;_blank&#34;&gt;J. B. Rainsberger&lt;/a&gt; has an &lt;a href=&#34;http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=acc77a0fb2&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;article&lt;/a&gt; about it&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Does it give you the same benefits?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I argued that it does, some of my colleagues argued against as one is &amp;ldquo;while doing&amp;rdquo; and the other is after.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;practice-practice-practice&#34;&gt;Practice, Practice, Practice&lt;/h2&gt;

&lt;p&gt;This is also a reference to a chapter by the same name (&lt;a href=&#34;http://chimera.labs.oreilly.com/books/1234000001813/ch05.html#practice_comma_practice_comma_practice&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;We proposed this problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Receive a list of numbers to a command-line (CLI) application and print their sum&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I wrote simple code listing and we reviewed it. The code is &lt;a href=&#34;https://gist.github.com/alvarogarcia7/258faea12cb9375539fe&#34; target=&#34;_blank&#34;&gt;here as a gist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Just in case, I wrote this listing with some defects / smells on purpose)&lt;/p&gt;

&lt;p&gt;Here are the comments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not all parameters will be added, only the first three&lt;/li&gt;
&lt;li&gt;The parameters are out of order, overcomplicating things. Is it due to something? Should I be careful about it?&lt;/li&gt;
&lt;li&gt;There is duplication (i.e., parsing from string)&lt;/li&gt;
&lt;li&gt;Bad naming: what is &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;There are no tests for it. No manual / javadoc either. Therefore, it&amp;rsquo;s difficult to maintain&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Difficult to test: a smell for bad design?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to test the adding by itself? The output is to the console, so we have to capture it (at GMaur we published this tool: &lt;a href=&#34;https://github.com/GMaur/legacyutils&#34; target=&#34;_blank&#34;&gt;legacyUtils&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;How to test the parsing if there is no mock to be injected? Only via state tests, therefore &amp;ldquo;end to end&amp;rdquo; tests as it includes the adding&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mixed concerns / responsibilities. Parsing the numbers and adding them are different concerns and should not be together&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;No one was against it&lt;/li&gt;
&lt;li&gt;We all agreed that is important to do it even in time-constrained environments&lt;/li&gt;
&lt;li&gt;It is also important to review our code reviews to make the most of it. The article by &lt;a href=&#34;http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=acc77a0fb2&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;J. B. Rainsberger&lt;/a&gt; is quite useful for that&lt;/li&gt;
&lt;li&gt;Even small codes can be bad and need to be reviewed (as the example)&lt;/li&gt;
&lt;li&gt;Quick and dirty proof of concept do not mix well with code reviews&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>