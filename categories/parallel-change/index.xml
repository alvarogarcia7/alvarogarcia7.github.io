<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/parallel-change/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/parallel-change/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in July 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/07/01/self-study-july-2019/</link>
      <pubDate>Mon, 01 Jul 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/07/01/self-study-july-2019/</guid>
      <description>

&lt;h2 id=&#34;how-i-use-reveal-js-https-elmiko-github-io-2017-10-08-how-i-use-revealjs-html&#34;&gt;&lt;a href=&#34;https://elmiko.github.io/2017/10/08/how-i-use-revealjs.html&#34; target=&#34;_blank&#34;&gt;How I use reveal.js&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This author explains how they use reveal.js.&lt;/p&gt;

&lt;p&gt;The online editor (slides.com).&lt;/p&gt;

&lt;p&gt;The author uses plain html for storing the slides.&lt;/p&gt;

&lt;p&gt;Tags: slide, slideshare, reveal-js, reveal, presentation, slide-deck, michael-mccune&lt;/p&gt;

&lt;p&gt;Id: 41e287b4-ae15-11e9-9e8a-0242ac110003
Read: Wed, 24 Jul 2019 07:16:33 +0000&lt;/p&gt;

&lt;h2 id=&#34;all-your-digital-life-on-a-single-timeline-stored-locally-https-github-com-mholt-timeliner&#34;&gt;&lt;a href=&#34;https://github.com/mholt/timeliner&#34; target=&#34;_blank&#34;&gt;All your digital life on a single timeline, stored locally&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Keep your digital life under your control&lt;/p&gt;

&lt;p&gt;Tags: backup, local-data, encryption, control&lt;/p&gt;

&lt;p&gt;Id: 4d115f64-ae17-11e9-bf0e-0242ac110003
Read: Wed, 24 Jul 2019 13:31:11 +0000&lt;/p&gt;

&lt;h2 id=&#34;safely-rewriting-mixpanel-s-highest-throughput-service-in-golang-https-engineering-mixpanel-com-2019-07-24-safely-rewriting-mixpanels-highest-throughput-service-in-golang&#34;&gt;&lt;a href=&#34;https://engineering.mixpanel.com/2019/07/24/safely-rewriting-mixpanels-highest-throughput-service-in-golang/&#34; target=&#34;_blank&#34;&gt;Safely Rewriting Mixpanelâ€™s Highest Throughput Service in Golang&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This article explains how they rewrote a (high-throughput + critical path) service, in part using a tool called Diffy.&lt;/p&gt;

&lt;p&gt;Tags: diffy, tool, golang, python, mixpanel, evan-noon, api, rewrite, parallel-change&lt;/p&gt;

&lt;p&gt;Id: 263f2b8c-afca-11e9-ad3d-0242ac110002
Read: Fri, 26 Jul 2019 17:23:57 +0000&lt;/p&gt;

&lt;h2 id=&#34;a-software-engineering-manager-guide-to-measuring-a-software-engineers-performance-https-www-jmoses-co-2019-07-08-software-engineering-manager-guide-measuring-performance-html&#34;&gt;&lt;a href=&#34;https://www.jmoses.co/2019/07/08/software-engineering-manager-guide-measuring-performance.html&#34; target=&#34;_blank&#34;&gt;A software engineering manager guide to measuring a software engineers performance&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Explains how to measure performance&lt;/p&gt;

&lt;p&gt;Tags: measure, performance, engineering-manager, manager, management, career-management, lake-wobegon-strategy, peer-review, compensation, salary&lt;/p&gt;

&lt;p&gt;Id: 5f2a6e8e-afca-11e9-97d5-0242ac110002
Read: Fri, 26 Jul 2019 17:25:32 +0000&lt;/p&gt;

&lt;h2 id=&#34;jssembly-https-github-com-dvx-jssembly&#34;&gt;&lt;a href=&#34;https://github.com/dvx/jssembly&#34; target=&#34;_blank&#34;&gt;jssembly&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;JVM tool to include assembler code in java&lt;/p&gt;

&lt;p&gt;Tags: assembler, java, jvm, bytecode&lt;/p&gt;

&lt;p&gt;Id: dfc8a150-afca-11e9-9fcb-0242ac110002
Read: Fri, 26 Jul 2019 17:29:08 +0000&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Destructuring as a refactor in Clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure/</link>
      <pubDate>Tue, 14 Apr 2015 23:36:23 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://twitter.com/@trikitrok&#34; target=&#34;_blank&#34;&gt;Manuel&lt;/a&gt; has taught us today about the default value while destructuring:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The following example illustrates the use of an :as directive to bind a local with the entire map.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;user=&amp;gt; (def point {:x 5 :y 7})
#&#39;user/point

(let [{:keys [x y] :as the-point} point]
         (println &amp;quot;x:&amp;quot; x &amp;quot;y:&amp;quot; y &amp;quot;point:&amp;quot; the-point))

x: 5 y: 7 point: {:x 5, :y 7}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;We&amp;rsquo;ve now seen the :as directive used for both vectors and maps. In both cases the local is always assigned to the entire expression that is being destructured.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.jayfields.com/2010/07/clojure-destructuring.html&#34; target=&#34;_blank&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This has been used for a method like this one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;all-access[k]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;this has been refactored to this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;all-access[k]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;[{:keys&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;[a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b]&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;k}]&lt;/span&gt;
	  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;the best thing about this is I can introduce the keys to the array while keeping the original map (&lt;code&gt;k&lt;/code&gt;) and, when I&amp;rsquo;m ready, to change some of the accesses to &lt;code&gt;k&lt;/code&gt; to its destructured variables.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>