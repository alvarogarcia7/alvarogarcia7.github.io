<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>language-comparison on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/language-comparison/</link>
    <description>Recent content in language-comparison on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Aug 2015 00:58:33 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/language-comparison/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The language was prepared for that</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/10/the-language-was-prepared-for-that/</link>
      <pubDate>Mon, 10 Aug 2015 00:58:33 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/10/the-language-was-prepared-for-that/</guid>
      <description>Many times I&amp;rsquo;ve written this function:
public boolean between(int lowerBound, int n, int upperBound){ return lowerBound &amp;lt;= n &amp;amp;&amp;amp; n &amp;lt;= upperBound; } It may depend on the case, whether it is [], [), (] or (), to use mathematical terms.
When the two comparisons are the same ([] and ()), there is duplication in the comparisons.
Investigating a little bit on this in clojure, I&amp;rsquo;ve found this function:
&amp;lt;= And its clojuredocs: Returns non-nil if nums are in monotonically non-decreasing order, otherwise false.</description>
    </item>
    
    <item>
      <title>Iterate with index in clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/04/iterate-with-index-in-clojure/</link>
      <pubDate>Sat, 04 Jul 2015 14:34:37 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/04/iterate-with-index-in-clojure/</guid>
      <description>Scenario: iterate a sequence (seq) with its index
The lines have an implicit line number (starting by 1, in most editors):
[1] line1 [2] line2 [3] hello When you read it from file to a variable, it is converted to:
(&amp;#34;line1&amp;#34; &amp;#34;line2&amp;#34; &amp;#34;hello&amp;#34;) This implicit line number value is not present, therefore you need to assign them one.
In ruby, you have this construct:
array = [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;] array.each_with_index {|val, index| puts &amp;#34;#{val}=&amp;gt; #{index}&amp;#34; } Source</description>
    </item>
    
  </channel>
</rss>
