<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/ron-jeffries/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/ron-jeffries/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Nature of Software Development: Part I</title>
      <link>https://alvarogarcia7.github.io/blog/2017/07/09/nature-software-development-part-1/</link>
      <pubDate>Sun, 09 Jul 2017 13:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/07/09/nature-software-development-part-1/</guid>
      <description>

&lt;h1 id=&#34;the-nature-of-software-development-reading-breadcrumbs-quotes-thoughts&#34;&gt;The Nature of Software development: reading breadcrumbs, quotes, thoughts&lt;/h1&gt;

&lt;h2 id=&#34;preface&#34;&gt;Preface&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The Natural Way serves end users well because it delivers value to them sooner.&lt;/p&gt;

&lt;p&gt;serves the business [&amp;hellip;] because it provides important information quickly, and because it provides the ability to adjust direction as needed.&lt;/p&gt;

&lt;p&gt;serves management [&amp;hellip;] see what’s really going on inside the project so that when action is needed, there will be time to act. And it reduces management’s problems by making information visible [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] easier for developers. [&amp;hellip;] clear direction and allows them freedom to use their skills to build what the organization needs, when it’s needed.&lt;/p&gt;

&lt;p&gt;(p. xv)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;part-i-the-circle-of-value&#34;&gt;Part I: The Circle of Value&lt;/h1&gt;

&lt;h2 id=&#34;chapter-1-the-search-for-value&#34;&gt;Chapter 1: The search for value&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Value.  &amp;ldquo;what you want.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the building blocks of value or to produce value:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Guiding. We produce value by creating teams with responsibility for creating value.&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The value in guiding is not related to creating value in itself, but to help others so they can create value.&lt;/p&gt;

&lt;p&gt;Therefore, the value of guiding depends on the value of the value-producing people&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Organizing [&amp;hellip;] We organize around features, because features give us the ability to plan and build value most rapidly&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;

&lt;p&gt;Planning [&amp;hellip;] selecting the features we need, in the order we need them.&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;

&lt;p&gt;Building [&amp;hellip;] product feature by feature&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;

&lt;p&gt;Slicing [&amp;hellip;] smallest possible value-bearing size&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;

&lt;p&gt;Quality [&amp;hellip;] always has a good design and that it is as nearly defect-free as possible&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-2-value-is-what-we-want&#34;&gt;Chapter 2: Value is What we Want&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;we generally get value by delivering features. Features that have value. Features that we want.&lt;/p&gt;

&lt;p&gt;(p. 7)&lt;/p&gt;

&lt;p&gt;software can save time or money. Software can help us earn money&lt;/p&gt;

&lt;p&gt;(p. 7)&lt;/p&gt;

&lt;p&gt;I think of value as simply what we want [&amp;hellip;] Each choice gives us something we value&lt;/p&gt;

&lt;p&gt;(p. 7)&lt;/p&gt;

&lt;p&gt;A project delivers value only when we ship the software and put it to use&lt;/p&gt;

&lt;p&gt;(p. 8)&lt;/p&gt;

&lt;p&gt;Since most users don’t use all the features, a smaller set of features can provide real value, and provide it sooner.&lt;/p&gt;

&lt;p&gt;(p. 10)&lt;/p&gt;

&lt;p&gt;pieces that make sense to us, and to our users. [&amp;hellip;] minimal marketable features (MMFs)&lt;/p&gt;

&lt;p&gt;(p. 12)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-3-guiding-goes-better-feature-by-feature&#34;&gt;Chapter 3: Guiding Goes Better &amp;ldquo;Feature by Feature&amp;rdquo;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;With a monolithic project, late in the game we can’t do much to cut costs. We have already written requirements for things we’ll never get&lt;/p&gt;

&lt;p&gt;(p. 22)&lt;/p&gt;

&lt;p&gt;We laid out this project with an all-or-nothing mentality.&lt;/p&gt;

&lt;p&gt;(p. 22)&lt;/p&gt;

&lt;p&gt;When our projects grow feature by feature, we can respond to what’s really happening. We can respond to the changing needs and inputs of the business and of management.&lt;/p&gt;

&lt;p&gt;(p. 24)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-4-organizing-by-feature&#34;&gt;Chapter 4: Organizing by Feature&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;To get the work done, different parts require different skills. The work won’t be done [&amp;hellip;] until it has had the attention of people with each needed skill.&lt;/p&gt;

&lt;p&gt;If we organize teams by skill-set, each piece of work will need to be passed around among teams&lt;/p&gt;

&lt;p&gt;(p. 26)&lt;/p&gt;

&lt;p&gt;organize into small teams, each of which builds features that the Product Champions can understand. Make sure that each team has all the people and all the skills necessary to build the entire feature, not just part of it&lt;/p&gt;

&lt;p&gt;(p. 27)&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] we can allocate work across teams easily [&amp;hellip;]  Responsibility and authority are aligned.&lt;/p&gt;

&lt;p&gt;(p. 27)&lt;/p&gt;

&lt;p&gt;the people belong to the feature teams.&lt;/p&gt;

&lt;p&gt;(p. 30)&lt;/p&gt;

&lt;p&gt;You belong to your family; you’re a member of the golf club&lt;/p&gt;

&lt;p&gt;(p. 30)&lt;/p&gt;

&lt;p&gt;A highly paid expert shouldn’t be highly paid just because she’s an expert. She should be highly paid because she is helping other people become experts.&lt;/p&gt;

&lt;p&gt;(p. 30)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-5-planning-feature-by-feature&#34;&gt;Chapter 5: Planning Feature by Feature&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Vision is about big ideas, not tiny bites.&lt;/p&gt;

&lt;p&gt;(p. 32)&lt;/p&gt;

&lt;p&gt;General Eisenhower said, &amp;ldquo;Plans are useless, but planning is indispensable.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;(p. 33)&lt;/p&gt;

&lt;p&gt;We do need to plan. We don’t need a detailed list of what will happen and when&lt;/p&gt;

&lt;p&gt;(p. 33)&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] software people are terrible at estimating, because humans are terrible at estimating.&lt;/p&gt;

&lt;p&gt;(p. 34)&lt;/p&gt;

&lt;p&gt;set a time and money budget; produce the most valuable features first; keep the product ready to ship at any time&lt;/p&gt;

&lt;p&gt;(p. 34)&lt;/p&gt;

&lt;p&gt;It’s not good enough to plan just at the beginning&lt;/p&gt;

&lt;p&gt;(p. 36)&lt;/p&gt;

&lt;p&gt;I don’t recommend working with larger stories and breaking them down into technical items, often called tasks&lt;/p&gt;

&lt;p&gt;(p. 36)&lt;/p&gt;

&lt;p&gt;Stick with stories&lt;/p&gt;

&lt;p&gt;(p. 36)&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] break down stories into smaller stories, each making sense to the business-side people.&lt;/p&gt;

&lt;p&gt;(p. 36)&lt;/p&gt;

&lt;p&gt;the team itself should decide how much work it can accomplish in the next two-week interval&lt;/p&gt;

&lt;p&gt;(p. 37)&lt;/p&gt;

&lt;p&gt;The point isn’t to make good estimates—the point is to do good work at a consistent pace.&lt;/p&gt;

&lt;p&gt;(p. 37)&lt;/p&gt;

&lt;p&gt;There are some serious risks to estimates: we have an almost irresistible desire to &amp;ldquo;improve&amp;rdquo; them, or to compare them. [&amp;hellip;] business and management get the best results by selecting the work to be done and the work to be deferred&lt;/p&gt;

&lt;p&gt;(p. 38)&lt;/p&gt;

&lt;p&gt;Is prediction better than steering?&lt;/p&gt;

&lt;p&gt;(p. 38)&lt;/p&gt;

&lt;p&gt;Planning with &amp;ldquo;stretch goals&amp;rdquo; is destructive.&lt;/p&gt;

&lt;p&gt;[&amp;hellip;]&lt;/p&gt;

&lt;p&gt;Hurrying, they’ll inject more defects. Since defects take longer to fix than they do to prevent, hurrying will slow you down. [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;[&amp;hellip;]&lt;/p&gt;

&lt;p&gt;Dirty code slows you down as well [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;Pressure is destructive. Avoid it.&lt;/p&gt;

&lt;p&gt;(p. 39)&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] estimates are likely to be wrong, and they focus our attention on the cost of things rather than on value.&lt;/p&gt;

&lt;p&gt;(p. 40)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-6-building-the-product-feature-by-feature&#34;&gt;Chapter 6: Building the Product, Feature by Feature&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;We need to sharpen our vision of what the product must do—and what’s just &amp;ldquo;nice to have.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;(p. 45)&lt;/p&gt;

&lt;p&gt;To be sure we’re free of defects, we need to check everything, all the time [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;(p. 48)&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] grow the design as we go. If we design too much, we won’t get as many features, and that will show up. If we design too little, features will be hard to do, we’ll slow down&lt;/p&gt;

&lt;p&gt;(p. 49)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-7-build-features-and-foundation-in-parallel&#34;&gt;Chapter 7: Build Features and Foundation in Parallel&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Each feature needs a solid foundation of design, a solid &amp;ldquo;infrastructure.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;(p.52)&lt;/p&gt;

&lt;p&gt;We need to do as little work as possible to deliver the best possible product by our delivery date&amp;hellip;and we need to do that work as soundly as we can afford.&lt;/p&gt;

&lt;p&gt;(p. 53)&lt;/p&gt;

&lt;p&gt;Developers are often trained to try to design a system up front&lt;/p&gt;

&lt;p&gt;(p. 59)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-8-bug-free-and-well-designed&#34;&gt;Chapter 8: Bug-Free and Well Designed&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Our product is made up of a growing set of correctly working features, built on a growing, evolving foundation of design.&lt;/p&gt;

&lt;p&gt;(p. 61)&lt;/p&gt;

&lt;p&gt;Defects amount to negative features. Progress is uncertain. Eliminate defects to provide clarity on what’s done.&lt;/p&gt;

&lt;p&gt;We’re trying to plan by features, grow by features, and manage by features&lt;/p&gt;

&lt;p&gt;We cannot work effectively in a world of defects.&lt;/p&gt;

&lt;p&gt;(p. 62)&lt;/p&gt;

&lt;p&gt;At the end of every iteration, we need to have the software as close to defect-free as possible. The only way to get there is to test it.&lt;/p&gt;

&lt;p&gt;We test at two levels, with &amp;ldquo;Business&amp;rdquo; tests and &amp;ldquo;Programmer&amp;rdquo; tests.&lt;/p&gt;

&lt;p&gt;(p. 65)&lt;/p&gt;

&lt;p&gt;If we don’t check something, we don’t know whether it works&lt;/p&gt;

&lt;p&gt;(p. 66)&lt;/p&gt;

&lt;p&gt;We need to have a good design at all times. A bad design slows us down, because it is hard to change [&amp;hellip;] We need a high-quality design at every moment.&lt;/p&gt;

&lt;p&gt;(p. 71)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-9-full-circle&#34;&gt;Chapter 9: Full Circle&lt;/h2&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Value is what we want. Features deliver value. Delivering features early gives us value sooner.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Managing by looking at value works better than managing by dates or artifacts that don’t deliver value.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Planning features is easy enough to do. Estimate if you must. Selecting the work based on Yesterday’s Weather works better.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Building by features requires us to build a small, complete product, every couple of weeks. That product must always work correctly, and it must always be well designed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Development must deliver real working features. The product must be well tested. Business-side people and developers contribute to testing. The product must be well designed. Developers keep the design alive all the time.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[&amp;hellip;] A commitment from the top of the business, down to the individual managers and developers [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;(p. 77)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The Search for Value (a quote)</title>
      <link>https://alvarogarcia7.github.io/blog/2017/07/09/search-for-value-quote-chapter-1/</link>
      <pubDate>Sun, 09 Jul 2017 13:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/07/09/search-for-value-quote-chapter-1/</guid>
      <description>&lt;p&gt;A quote from the book &lt;a href=&#34;https://pragprog.com/book/rjnsd/the-nature-of-software-development&#34; target=&#34;_blank&#34;&gt;The Nature of Software Development&lt;/a&gt; by Ron Jeffries, talking about value (in software) and the building blocks to achieve it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Value. Value, we’ll see, is “what you want.” [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;We’ll tell the story by building up from the bottom of the pyramid, describing how to guide, organize, plan, and build our product, in small slices, with a focus on quality. The value we produce is based on these.&lt;/p&gt;

&lt;p&gt;Guiding. We produce value by creating teams with responsibility for creating value. We make sure they understand what is needed, and understand the time available. We guide them by observing what they actually build.&lt;/p&gt;

&lt;p&gt;Organizing. We organize teams with the ability to get the job done. We organize around features, because features give us the ability to plan and build value most rapidly. We apply good people and help them build their skills.&lt;/p&gt;

&lt;p&gt;Planning. We steer our projects by selecting the features we need, in the order we need them. We produce value in a timely fashion.&lt;/p&gt;

&lt;p&gt;Building. We build up our product feature by feature. This provides frequent delivery of value. We can see how things are progressing early and often.&lt;/p&gt;

&lt;p&gt;Slicing. We slice features down to the smallest possible value-bearing size. We build a capable product as early as possible, and then enhance and grow it as the deadline approaches. We’re always ready to ship.&lt;/p&gt;

&lt;p&gt;Quality. We apply the necessary practices to ensure that our product always has a good design and that it is as nearly defect-free as possible. We’re able to build value continuously, sustainably, indefinitely.&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in January 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</link>
      <pubDate>Fri, 01 Jan 2016 16:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</guid>
      <description>

&lt;h2 id=&#34;test-cases-in-inner-classes-with-junit&#34;&gt;Test cases in inner classes with JUnit&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/8758294/test-cases-in-inner-classes-with-junit&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt; in stackoverflow about nested test runners in JUnit&lt;/p&gt;

&lt;p&gt;Tags: junit, stackoverflow, answer, nested-runner&lt;/p&gt;

&lt;h2 id=&#34;recording-a-great-coding-screencast&#34;&gt;Recording a Great Coding Screencast&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://egghead.io/articles/recording-a-great-coding-screencast&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by John Lindquist where he explains how he sets up the recording environment for egghead.&lt;/p&gt;

&lt;p&gt;Tags: john-lindquist, record, screencast, egghead, code-screencast, record-video, video&lt;/p&gt;

&lt;h2 id=&#34;react-testing-course&#34;&gt;React Testing Course&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://egghead.io/lessons/react-testing-jsx-error-diffs&#34; target=&#34;_blank&#34;&gt;the full course&lt;/a&gt; by Trevor D. Miller on how to test react components and the libraries to make it possible.&lt;/p&gt;

&lt;p&gt;Tags: trevor-miller, online-course, screencast, mooc, react, flux, egghead&lt;/p&gt;

&lt;h2 id=&#34;what-is-functional-programming&#34;&gt;What Is Functional Programming?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jenkster.com/2015/12/what-is-functional-programming.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kris Jenkins where the author describes functional programming from an input &amp;amp; output point of view.&lt;/p&gt;

&lt;p&gt;Describes state of the system (maybe global or local) is input &amp;amp; output of the function&lt;/p&gt;

&lt;p&gt;Produced state changes are called side effects. the author calls the state inputs as &amp;ldquo;side causes&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Side effects and causes are called complexity iceberg, as they are not visible under the water level (surface)&lt;/p&gt;

&lt;p&gt;Also what a pure function is: one with no side causes or side effects; e.g., all its inputs are declared inputs (i.e., parameters) and all outputs are declared outputs (i.e., return value).&lt;/p&gt;

&lt;p&gt;notes on jobbing programmer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.safaribooksonline.com/library/view/becoming-a-better/9781491905562/ch32.html&#34; target=&#34;_blank&#34;&gt;at Becoming a Better Programmer&lt;/a&gt;, by Pete Goodliffe&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://books.google.es/books?id=P-09CgAAQBAJ&amp;amp;pg=PA67&amp;amp;lpg=PA67&amp;amp;dq=%22jobbing+programmer%22&amp;amp;source=bl&amp;amp;ots=U6Gvi9OSda&amp;amp;sig=J4qWDUtnk768SMjAK3yuEeWUv5Y&amp;amp;hl=es&amp;amp;sa=X&amp;amp;ved=0ahUKEwjz58K615DKAhUFVRQKHfyhAZAQ6AEIOTAE#v=onepage&amp;amp;q=%22jobbing%20programmer%22&amp;amp;f=false&#34; target=&#34;_blank&#34;&gt;at Mastering Julia&lt;/a&gt;, by Malcolm Sherrington&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://joshsymonds.com/blog/2013/11/03/what-makes-a-good-programmer-good/&#34; target=&#34;_blank&#34;&gt;at What Makes a Good Programmer Good?&lt;/a&gt; by Josh Symonds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: kris-jenkins, functional-programming, input, output, function, complexity-iceberg, pure-function, impure-function, side-effect, side-cause&lt;/p&gt;

&lt;h2 id=&#34;which-programming-languages-are-functional&#34;&gt;Which Programming Languages Are Functional?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jenkster.com/2015/12/which-programming-languages-are-functional.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kris Jenkins where the author analyses languages, determining whether they are functional or not.&lt;/p&gt;

&lt;p&gt;Describes how functional languages deal with side effects and side causes, and to identify them (was also explained in part one&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;

&lt;!--
    FOOTNOTES are at the beginning
--&gt;

&lt;p&gt;Tags: kris-jenkins, functional-programming, side-effect, side-cause, comparison, haskell, clojure, python, perl, javascript, java, map, reduce, hof, scala, moc&lt;/p&gt;

&lt;h2 id=&#34;argument-from-the-real-world&#34;&gt;Argument from the &amp;ldquo;Real World&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ronjeffries.com/xprog/articles/argument-from-the-real-world/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ron Jeffries that dismantles the &amp;ldquo;real world&amp;rdquo;, as an excuse to use good practices: as in &amp;ldquo;we could use that, but we live in the real world&amp;rdquo;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] our job is to create the “real world” and not to imagine that our present situation is the only situation there is&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is exactly our day to day task, to imagine a real world solution to present problems, maybe involving software in between.&lt;/p&gt;

&lt;p&gt;Can&amp;rsquo;t we do this for product and team management?&lt;/p&gt;

&lt;p&gt;Tags: ron-jeffries, agile, scrum, tdd, bdd, incremental-iterative-development, product-management, team-management&lt;/p&gt;

&lt;h2 id=&#34;self-contained-systems&#34;&gt;Self-Contained Systems&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/rstrangh/self-contained-systems-1&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about a self-contained system (SCS), an architecture choice to split monolithic systems in parts. It includes the use of microservices in the business logic to solve domain specific problems. Written by Roman Stranghöner&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;development, operation and maintenance [&amp;hellip;] by a single team&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: big-bang-release, roman-stranghoner, self-contained-system, scs, microservice, monolith, monolithic-system, architecture&lt;/p&gt;

&lt;h2 id=&#34;what-makes-a-good-programmer-good&#34;&gt;What Makes a Good Programmer Good?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://joshsymonds.com/blog/2013/11/03/what-makes-a-good-programmer-good/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Josh Symonds on the characteristics that differentiate a good programmer from the jobbing programmers, the list of skills to be a good programmer.&lt;/p&gt;

&lt;p&gt;Explains what factors are related and not related to being a good one&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;knowing that most programming problems have already been solved. You have to know where to look for the solution&lt;/li&gt;
&lt;li&gt;not to be afraid to dig deep into problems: detect a problem and be eager to solve it; figure out what is wrong&lt;/li&gt;
&lt;li&gt;go to the source: use the source as a fact, as analysis needs to be based on facts, not beliefs&lt;/li&gt;
&lt;li&gt;just do it: to be driven to act&lt;/li&gt;
&lt;li&gt;instinctively tackle problems head-on, grabbing the bull by the horns instead of waiting for it to be solved automagically; start solving the problem&lt;/li&gt;
&lt;li&gt;excited about grabbing problems, about facing the cutting edge&lt;/li&gt;
&lt;li&gt;taking the time to reflect and understand it before moving one to the next one&lt;/li&gt;
&lt;li&gt;communicate well: succintly and eloquently expressing your thoughts. The author thinks this might be the most important aspect of all.&lt;/li&gt;
&lt;li&gt;to be truly caring about what you do: not just a job, but a hobby, an interest, even a fascination; great programmers are always programming&lt;/li&gt;
&lt;li&gt;thinking of programming of a way to shape the world, not just a money-making activity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: jobbing-programmer, good-programmer, career, career-management, skill, josh-symonds, quote&lt;/p&gt;

&lt;h2 id=&#34;the-best-programming-language-or-how-to-stop-worrying-and-love-the-code&#34;&gt;The Best Programming Language (or How to Stop Worrying and Love the Code)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.fourthbit.com/2014/03/01/the-best-programming-language-or-how-to-stop-worrying-and-love-the-code&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Álvaro Castro-Castilla analysing different programming languages and what to choose each of them.&lt;/p&gt;

&lt;p&gt;Tags: alvaro-castro-castilla, programming-language, language, analysis, comparison&lt;/p&gt;

&lt;h2 id=&#34;tomates-en-el-campo&#34;&gt;Tomates en el campo&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.presionblogosferica.com/2011/02/20/tomates-en-el-campo/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ángel Medinilla, about how to cultivate teams, instead of creating or building them. Talks about the mandatory conditions, necessary factors and how to enable it, not guaranteeing success.&lt;/p&gt;

&lt;p&gt;Tags: angel-medinilla, team-management, spanish, team, analogy&lt;/p&gt;

&lt;h2 id=&#34;default-constructors-in-java&#34;&gt;Default constructors in Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/17068389/default-constructors-in-java&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt; in stackoverflow about extending a java class that has a private constructor.&lt;/p&gt;

&lt;p&gt;Tags: stackoverflow, answer, java, constructor, syntax&lt;/p&gt;

&lt;h2 id=&#34;what-s-so-great-about-reducers&#34;&gt;What&amp;rsquo;s So Great About Reducers?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.guillermowinkler.com/blog/2013/12/01/whats-so-great-about-reducers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Guillermo Winkler explaining reducers, a type of divide and conquer strategy clojure.&lt;/p&gt;

&lt;p&gt;Tags: guillermo-winkler, reducer, clojure, parallelism, concurrency&lt;/p&gt;

&lt;h2 id=&#34;don-t-use-slack&#34;&gt;Don’t use Slack?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/hacker-daily/don-t-use-slack-8e70452f3eed&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Christian Heilmann about the relation between open / closed software and accessibility.&lt;/p&gt;

&lt;p&gt;Tags: slack, christian-heilmann, accessibility, open-source, propietary-software, closed-source&lt;/p&gt;

&lt;h2 id=&#34;towards-an-understanding-of-technical-debt&#34;&gt;Towards an understanding of technical debt&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@kellan/towards-an-understanding-of-technical-debt-ae0f97cc0553&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kellan Elliott-McCrea about some definitions of technical debt and why taking care of it matters for the future.&lt;/p&gt;

&lt;p&gt;Talks about the way of inheriting projects by other teams and the paradox of &amp;ldquo;investing more time to fix the problem than originally invested in coding it.&amp;rdquo; Also about judgement.&lt;/p&gt;

&lt;p&gt;I find it related to the &amp;ldquo;theory building&amp;rdquo; by Naur.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are at least 5 distinct things we mean we say “technical debt”.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Maintenance work: buying breathing room&lt;/li&gt;
&lt;li&gt;Features of the codebase that resist change&lt;/li&gt;
&lt;li&gt;Operability choices that resist change&lt;/li&gt;
&lt;li&gt;Code choices that suck the will to live&lt;/li&gt;
&lt;li&gt;Dependencies that resist upgrading&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: kellan-elliott-mccrea, kellan, technical-debt, list, definition, quote&lt;/p&gt;

&lt;h2 id=&#34;lifetimes-of-cryptographic-hash-functions&#34;&gt;Lifetimes of cryptographic hash functions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://valerieaurora.org/hash.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Valerie Aurora where she explains the lifetimes of cryptographic hash functions up to 2012.&lt;/p&gt;

&lt;p&gt;Tags: hash-function, valerie-aurora&lt;/p&gt;

&lt;h2 id=&#34;collisions-for-hash-functions-md4-md5-haval-128-and-ripemd&#34;&gt;Collisions for Hash Functions - MD4, MD5, HAVAL-128 and RIPEMD&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://eprint.iacr.org/2004/199.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; that explains some collisions found for MD4, MD5, HAVAL-128 and RIPEMD. By Xiaoyun Wang, Dengguo Feng, Xuejia Lai, Hongbo Yu.&lt;/p&gt;

&lt;p&gt;Tags: collision, hash-function, xiaoyun-wang, dengguo-feng, xuejia-lai, hongbo-yu, paper&lt;/p&gt;

&lt;h2 id=&#34;the-future-is-parallel-what-s-a-programmer-to-do&#34;&gt;The future is parallel: What&amp;rsquo;s a programmer to do?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://groups.csail.mit.edu/mac/users/gjs/6.945/readings/MITApril2009Steele.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Guy Steele about the differences in linear vs parallel computing and about the old habits that we still have.&lt;/p&gt;

&lt;p&gt;Some quotes:&lt;/p&gt;

&lt;h3 id=&#34;motivation&#34;&gt;Motivation&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Good sequential code minimizes total number of operations.

&lt;ul&gt;
&lt;li&gt;Clever tricks to reuse previously computed results.&lt;/li&gt;
&lt;li&gt;Good parallel code often performs redundant operations to reduce communication.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Good sequential algorithms minimize space usage.

&lt;ul&gt;
&lt;li&gt;Clever tricks to reuse storage.&lt;/li&gt;
&lt;li&gt;Good parallel code often requires extra space to permit temporal decoupling.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Sequential idioms stress linear problem decomposition.

&lt;ul&gt;
&lt;li&gt;Process one thing at a time and accumulate results.&lt;/li&gt;
&lt;li&gt;Good parallel code usually requires multiway problem decomposition and multiway aggregation of results.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;a-new-mindset&#34;&gt;A New Mindset&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;DO loops are so 1950s! (Literally: Fortran is now 50 years old.)&lt;/li&gt;
&lt;li&gt;So are linear linked lists! (Literally: Lisp is now 50 years old.)&lt;/li&gt;
&lt;li&gt;Java-style iterators are so last millennium!&lt;/li&gt;
&lt;li&gt;Even arrays are suspect!&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;As soon as you say &lt;code&gt;first, SUM = 0&lt;/code&gt; you are hosed. Accumulators are BAD.&lt;/li&gt;
&lt;li&gt;If you say, “process subproblems in order,” you lose.&lt;/li&gt;
&lt;li&gt;The great tricks of the sequential past DON’T WORK.&lt;/li&gt;
&lt;li&gt;The programming idioms that have become second nature to us as everyday tools DON’T WORK.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;the-parallel-future&#34;&gt;The Parallel Future&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;We need new strategies for problem decomposition.&lt;/li&gt;
&lt;li&gt;Data structure design/object relationships&lt;/li&gt;
&lt;li&gt;Algorithmic organization&lt;/li&gt;
&lt;li&gt;Don’t split a problem into “the first” and “the rest.”&lt;/li&gt;
&lt;li&gt;Do split a problem into roughly equal pieces. Then figure out how to combine general subsolutions.&lt;/li&gt;
&lt;li&gt;Often this makes combining the results a bit harder.&lt;/li&gt;
&lt;li&gt;We need programming languages and runtime implementations that support parallel strategies and hybrid sequential/parallel strategies.&lt;/li&gt;
&lt;li&gt;We must learn to manage new space-time tradeoffs&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A program organized according to linear problem decomposition principles can be really hard to parallelize.&lt;/li&gt;
&lt;li&gt;A program organized according to parallel problem decomposition principles is easily run either in parallel or sequentially, according to available resources.&lt;/li&gt;
&lt;li&gt;The new strategy has costs and overheads. They will be reduced over time but will not disappear.&lt;/li&gt;
&lt;li&gt;In a world of parallel computers of wildly varying sizes, this is our only hope for program portability in the future.&lt;/li&gt;
&lt;li&gt;Better language design can encourage better parallel programming.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: representation, computation, catamorphism, list, associativity
commutativity, idempotency, abstract-data-type, slide, operator, mapreduce, mindset, comparison, parallel, guy-steele,  linear-computing, parallel-computing&lt;/p&gt;

&lt;h2 id=&#34;surviving-being-senior-tech-management&#34;&gt;Surviving being senior (tech) management.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@kellan/surviving-being-senior-tech-management-aa6654efd027&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kellan Elliott-McCrea about the basic things to do as management to retain the best performance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;exercise&lt;/li&gt;
&lt;li&gt;someone to talk to&lt;/li&gt;
&lt;li&gt;discuss with peers, in petit commité&lt;/li&gt;
&lt;li&gt;personal mastery project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: kellan-elliott-mccrea, kellan, list, management, tip, exercise, pet-project&lt;/p&gt;

&lt;h2 id=&#34;you-don-t-need-more-free-time&#34;&gt;You Don’t Need More Free Time&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.nytimes.com/2016/01/10/opinion/sunday/you-dont-need-more-free-time.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the quality of life, work-life balance by Cristobal Young on why the time where we have more fun is spent together, in company.&lt;/p&gt;

&lt;p&gt;Tags: cristobal-young, time-management, work-life-balance&lt;/p&gt;

&lt;h2 id=&#34;taking-longer-to-reach-the-top-has-its-benefits&#34;&gt;Taking Longer to Reach the Top Has Its Benefits&lt;/h2&gt;

&lt;p&gt;​I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/2015/12/taking-longer-to-reach-the-top-has-its-benefits&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains how having work life balance and preventing burn out syndrome, aided by a patient career, can help with reaching a higher destination on your career. By Karen Firestone&lt;/p&gt;

&lt;p&gt;Tags: career-management, patience, burnout, burn-out, ceo, karen-firestone, professional-career, improvement&lt;/p&gt;

&lt;h2 id=&#34;all-bugs-lead-to-rome&#34;&gt;All bugs lead to Rome&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@nickbaum/all-bugs-lead-to-rome-505a1205bb9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains how the author tracks down a bug present in mail communication, just for a handful of client. By Nick Baum&lt;/p&gt;

&lt;p&gt;Tags: track-down, bug, defect, mailgun, rot13, nick-baum&lt;/p&gt;

&lt;h2 id=&#34;design-patterns-coming-full-circle&#34;&gt;Design Patterns — Coming Full Circle&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/swlh/design-patterns-coming-full-circle-d8292e261dc6&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains what a design pattern is, where does it come from, the figure of Christopher Alexander and the architecture design patterns. By Jen Carlile&lt;/p&gt;

&lt;p&gt;Tags: design-pattern, christopher-alexander, jen-carlile, comparison, example, proxy, command, observer&lt;/p&gt;

&lt;h2 id=&#34;react-performance&#34;&gt;React + Performance = ?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://aerotwist.com/blog/react-plus-performance-equals-what/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Paul Lewis comparing the performance and developer experience of react.js and vanilla js.&lt;/p&gt;

&lt;p&gt;Conclusion: under his measurements, react is too slow once the amount of elements is big on mobile devices&lt;/p&gt;

&lt;p&gt;Tags: paul-lewis, comparison, javascript, react, mobile, perfomance, jsperf, js-perf, vanilla-javascript&lt;/p&gt;

&lt;h2 id=&#34;full-speed-then-stop-gracefully&#34;&gt;Full speed, then stop, gracefully&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://sethgodin.typepad.com/seths_blog/2015/12/full-speed-then-stop.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about how to end professional relationships with an employer or a team.&lt;/p&gt;

&lt;p&gt;Makes an analogy to the hockey sport attitude: &amp;ldquo;full speed, then stop&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: seth-godin, professional, employer, team-management, team, analogy&lt;/p&gt;

&lt;h2 id=&#34;por-qué-tendrás-que-facturar-55-000-para-cobrar-una-nómina-de-26-000&#34;&gt;Por qué tendrás que facturar 55.000€ para cobrar una nómina de 26.000€&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive1.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=7e79a27689&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; by David Bonilla on why freelancers need to bill more to clients to achieve the same (economic) results as being hired by a company.&lt;/p&gt;

&lt;p&gt;Tags: david-bonilla, bonilista, freelancer, contractor, employee&lt;/p&gt;

&lt;h2 id=&#34;principles-of-microservices&#34;&gt;Principles Of Microservices&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://vimeo.com/131632250&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Sam Newman on microservices at the NDC 2015 at Oslo&lt;/p&gt;

&lt;p&gt;Describes a microservice as a small, autonomous services that work together, modelled around a business domain&lt;/p&gt;

&lt;p&gt;Microservices can mix technology, persistence stack, idioms, options&lt;/p&gt;

&lt;p&gt;reference to the twelve factors (by heroku).&lt;/p&gt;

&lt;p&gt;At a client:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Design and delivery practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;standard http/rest&lt;/li&gt;
&lt;li&gt;encapsulate legacy&lt;/li&gt;
&lt;li&gt;eliminate integration databases&lt;/li&gt;
&lt;li&gt;consolidate and cleanse data&lt;/li&gt;
&lt;li&gt;published integration model&lt;/li&gt;
&lt;li&gt;small independent devices&lt;/li&gt;
&lt;li&gt;continous deployment&lt;/li&gt;
&lt;li&gt;minimal customization of COTS/SAAS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Architectural principles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reduce inertia&lt;/li&gt;
&lt;li&gt;eliminate accidential complexity&lt;/li&gt;
&lt;li&gt;consistent interfaces and data flows&lt;/li&gt;
&lt;li&gt;no silver bullets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Strategic goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;enable scalable businesses&lt;/li&gt;
&lt;li&gt;support entry into new markets&lt;/li&gt;
&lt;li&gt;support innovation in existing markets&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Principles of microservices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;modelled around a business domain&lt;/li&gt;
&lt;li&gt;culture of automation&lt;/li&gt;
&lt;li&gt;hide implementation details&lt;/li&gt;
&lt;li&gt;decentralise all the things&lt;/li&gt;
&lt;li&gt;deploy independently&lt;/li&gt;
&lt;li&gt;consumer first&lt;/li&gt;
&lt;li&gt;isolate failure&lt;/li&gt;
&lt;li&gt;highly observable&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;p&gt;the business domain changes more slowly. find these boundaries (reference to IDDD)&lt;/p&gt;

&lt;p&gt;bounded contexts is about concepts which are shared and others who are hidden&lt;/p&gt;

&lt;p&gt;consumer driven contracts as a way to express to consumer expectations, written as tests. this is a high-trust pattern (requires it). reduces end to end testing, considerably. Using tools as &lt;a href=&#34;http://github.com/realestate&#34; target=&#34;_blank&#34;&gt;pact&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;parallel change for endpoints (or APIs) for avoiding lock step release (expand contract pattern). high cost to change an API: apply upfront thought to it.&lt;/p&gt;

&lt;p&gt;explains about a case writing a strangler application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;circuit breakers&lt;/li&gt;
&lt;li&gt;one thread pool per application&lt;/li&gt;
&lt;li&gt;bulkhead downstream connections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the book &amp;ldquo;Release It!&amp;rdquo;&lt;/li&gt;
&lt;li&gt;the book &amp;ldquo;Implementing Domain-Driven Design (IDDD)&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;p&gt;correlation ids, parent and child ids
extracting information from logs (e.g., kibana, splunk, new relic)
see how services connect to each other based on logs instead of based on documentation&lt;/p&gt;

&lt;p&gt;Tags: lock-step-release, autonomy, sam-newman, consumer-driven-contract, team, zookeper, etcd, consul, service-discovery, distributed-consensus, talk, ndc, humane-registry, bulkhead-pattern, circuit-breaker&lt;/p&gt;

&lt;h2 id=&#34;the-website-obesity-crisis&#34;&gt;The Website Obesity Crisis&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://idlewords.com/talks/website_obesity.htm&#34; target=&#34;_blank&#34;&gt;this transcription&lt;/a&gt; of &lt;a href=&#34;http://www.webdirections.org/blog/the-website-obesity-crisis/&#34; target=&#34;_blank&#34;&gt;this presentation&lt;/a&gt; about the increase of weight of websites and how this connects with new needs for automation and other services. How the solution is to keep the pages lightweight and open for everybody to use and learn; without invading our privacy. By Maciej Ceglowski&lt;/p&gt;

&lt;p&gt;Tags: obesity, fat-page, slide, transcription, slide-transcription, maciej-ceglowski, simplicity, speed&lt;/p&gt;

&lt;h2 id=&#34;command-line-tools-can-be-235x-faster-than-your-hadoop-cluster&#34;&gt;Command-line tools can be 235x faster than your Hadoop cluster&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://aadrake.com/command-line-tools-can-be-235x-faster-than-your-hadoop-cluster.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how using command-line based (&lt;code&gt;find&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;) can have a better performance as compared to Hadoop for a specific case, which is analyzing 2 million chess games. By Adam Drake&lt;/p&gt;

&lt;p&gt;Tags: adam-drake, chess, comparison, performance, cli-commands, unix, nix, hadoop, awk&lt;/p&gt;

&lt;h2 id=&#34;the-serializable-isolation-level&#34;&gt;The Serializable Isolation Level&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://sqlperformance.com/2014/04/t-sql-queries/the-serializable-isolation-level&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Paul White about the serializable isolation level and how it is implemented in some databases.&lt;/p&gt;

&lt;p&gt;Tags: serializable, isolation level, paul-white, oracle, mssql, database, sql&lt;/p&gt;

&lt;h2 id=&#34;academic-writing-with-markdown-pandoc-and-emacs&#34;&gt;Academic Writing With Markdown, Pandoc and Emacs&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://milinda.svbtle.com/academic-writing-with-markdown-pandoc-and-emacs&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Milinda Pathirage that explains an alternative way of writing LaTeX in a user-friendly manner, writing markdown then converting it to the output format (he provides &lt;a href=&#34;https://gist.github.com/milinda/d9272e67711d324f18ba&#34; target=&#34;_blank&#34;&gt;such a script&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Tags: latex, milinda-pathirage, academia, research, paper, markdown, script&lt;/p&gt;

&lt;h2 id=&#34;rest-ddd-layers-jsf-microservices-sizing-a-umejug-conversation&#34;&gt;Rest, DDD, layers, JSF, microservices sizing a Umejug conversation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;http://www.adam-bien.com/roller/abien/entry/rest_ddd_layers_jsf_a&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Adam Bien on topics related to microservices and architecture. Discusses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What do you think a typical web application should look like? How should it be built?&lt;/li&gt;
&lt;li&gt;When using REST, which level of REST is appropriate when, is HATEOAS something to strive for, how to implement it?&lt;/li&gt;
&lt;li&gt;Which patterns do you recommend, hexagonal architecture, layers, &amp;hellip;?&lt;/li&gt;
&lt;li&gt;What do you think of the DDD strategic and tactical patterns?&lt;/li&gt;
&lt;li&gt;Microservices vs right-sized services, is transactions over several services always a bad idea?&lt;/li&gt;
&lt;li&gt;When use JSF? Is it still useful?&lt;/li&gt;
&lt;li&gt;Entity-Control-Boundary Pattern (ECB) (around &lt;a href=&#34;https://youtu.be/VkcLpRs0i0g?t=995&#34; target=&#34;_blank&#34;&gt;16:37&lt;/a&gt;). &lt;a href=&#34;http://www.cs.sjsu.edu/~pearce/modules/patterns/enterprise/ecb/ecb.htm&#34; target=&#34;_blank&#34;&gt;More info&lt;/a&gt; on the pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: hateoas, rest, microservice, pattern, architecture, umejug, hexagonal-architecture, ddd, adam-bien, ecb-pattern, mvc-pattern&lt;/p&gt;

&lt;h2 id=&#34;how-to-go-remote&#34;&gt;How To Go Remote&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://workdifferent.com/how-to-remote/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sebastian Kade that explains how to go remote: where the possibility of working anywhere is a luxury, even if it is in an office.&lt;/p&gt;

&lt;p&gt;Explains the case of Automattic, some examples of communication, culture. Suggests using some tools to accomplish this cultural change.&lt;/p&gt;

&lt;p&gt;Tags: remote-work, sebastian-kade, remote, work, asynchronous-communication, communication, automattic, tool, culture, team-management&lt;/p&gt;

&lt;h2 id=&#34;why-your-company-should-have-a-creed&#34;&gt;Why Your Company Should Have a Creed&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ma.tt/2011/09/automattic-creed/&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Matt Mullenweg about the importance of having a company creed (a belief system, ethos), which ideally would be shared by the colleagues. These should be the values that help deciding, when in doubt, so everyone is aligned.&lt;/p&gt;

&lt;p&gt;At Automattic, this is theirs (as of September 19th, 2011):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I will never stop learning. I won’t just work on things that are assigned to me. I know there’s no such thing as a status quo. I will build our business sustainably through passionate and loyal customers. I will never pass up an opportunity to help out a colleague, and I’ll remember the days before I knew everything. I am more motivated by impact than money, and I know that Open Source is one of the most powerful ideas of our generation. I will communicate as much as possible, because it’s the oxygen of a distributed company. I am in a marathon, not a sprint, and no matter how far away the goal is, the only way to get there is by putting one foot in front of another every day. Given time, there is no problem that’s insurmountable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: quote, matt-mullenweg, automattic, creed, ethos, learning, team-management, startup, communication, essay&lt;/p&gt;

&lt;h2 id=&#34;mob-programming-the-unruly-experience&#34;&gt;Mob Programming: The Unruly Experience&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://wirfs-brock.com/blog/2015/06/05/mob-programming/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Rebecca Wirfs-Brock on mob programming and the experience report (+ &lt;a href=&#34;http://www.xp2015.org/wp-content/uploads/2015/06/TH2.3_Wilson.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;) at the company called Unruly.&lt;/p&gt;

&lt;p&gt;She explains what works for them and what does not.&lt;/p&gt;

&lt;p&gt;Also, she makes a difference on complex vs complicated work:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;complex work (where there is the potential for errors) over complicated work (where the solution is known, but is merely time consuming)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Explains some characteristics of learning organizations:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Teams in learning organizations perform ongoing experiments. While they settle on a core set of practices, they also try to build upon them. They keep innovating, improving, and reflecting. And how they work continues to evolve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: learning, learning-organization, xp, rebecca-wirfs-brock, mob-programming, pair-programming, complex-work, complicated-work, experience-report, unruly, team-management, team-building, team-dysfunction, comparison&lt;/p&gt;

&lt;h2 id=&#34;what-you-re-hiding-from-when-you-constantly-check-your-phone&#34;&gt;What You’re Hiding from When You Constantly Check Your Phone&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/2016/01/what-youre-hiding-from-when-you-constantly-check-your-phone&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Charlotte Lieberman where she explains the technology-stress paradox and the fact of replacing one addiction with another, as some addictions are more socially than others.&lt;/p&gt;

&lt;p&gt;Explains that the constant connection to social media allow us to avoid ourselves, and the connection to mindfulness.&lt;/p&gt;

&lt;p&gt;On the paradox:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;technology-stress paradox: we share the desire for greater freedom from our devices, and yet that very freedom itself causes anxiety&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the work-life balance:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;work-life balance [is]  [&amp;hellip;] about noticing those moments in which you really don&amp;rsquo;t want to deal with yourself&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: charlotte-lieberman, paradox, quote, social-media, mindfulness, technology-stress-paradox, stress, addiction, time-management&lt;/p&gt;

&lt;h2 id=&#34;testing-myth-1-writing-tests-slows-you-down&#34;&gt;Testing myth #1: Writing tests slows you down&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://arhohuttunen.fi/testing/testing-myth-1-writing-tests-slows-you-down/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Arho Huttunen on an excuse to not test: there is no time.&lt;/p&gt;

&lt;p&gt;In the article, he explains the false assumptions based on that reason and the gains (short term and long term) from doing it.&lt;/p&gt;

&lt;p&gt;Tags: arho-huttunen, test, excuse&lt;/p&gt;

&lt;h2 id=&#34;becodeweek-by-josé-manuel-beas&#34;&gt;BeCodeWeek by José Manuel Beas&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jmbeas.es/category/becodeweek/&#34; target=&#34;_blank&#34;&gt;this category of posts&lt;/a&gt; by José Manuel Beas about his BeCodeWeek, a desk-surfing experience at BeCode.&lt;/p&gt;

&lt;p&gt;Analyses facts and publishes one entry per day detailing his activities.&lt;/p&gt;

&lt;p&gt;Tags: becodeweek, jmbeas, jose-manuel-beas, desk-surfing, experience, experience-report, analysis&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;code&gt;What Is Functional Programming?&lt;/code&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;many of these fragments are quotes or paraphrased quotes
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Self-study in May 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/</link>
      <pubDate>Sat, 09 May 2015 16:41:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/</guid>
      <description>

&lt;p&gt;Update: I&amp;rsquo;ve grouped all small posts related to the self-study from May 2015
into a single post&lt;/p&gt;

&lt;h2 id=&#34;programmer-passion-considered-harmful&#34;&gt;Programmer passion considered harmful&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/on-coding/programmer-passion-considered-harmful-5c5d4e3a9b28&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why programmer passion could be negative. The title is similar to a paper by Dijkstra.&lt;/p&gt;

&lt;h2 id=&#34;software-craftsmanship-are-bootcamps-enough&#34;&gt;Software Craftsmanship: Are Bootcamps Enough?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.coursereport.com/blog/software-craftsmanship-are-bootcamps-enough&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on software craftsmanship, development bootcamps and passion by &lt;a href=&#34;https://twitter.com/kauerrolemodel&#34; target=&#34;_blank&#34;&gt;Ken Auer&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;improve-your-development-environments-with-virtualization&#34;&gt;Improve your development environments with virtualization&lt;/h2&gt;

&lt;p&gt;I have seen this video: &lt;a href=&#34;https://www.youtube.com/watch?v=Dg_vPMnC7_k&amp;amp;feature=youtu.be&#34; target=&#34;_blank&#34;&gt;Improve your development environments with virtualization&lt;/a&gt; by Luke Sneeringer.&lt;/p&gt;

&lt;p&gt;My notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;development should be exactly like production.&lt;/li&gt;
&lt;li&gt;except where it is too painful. there it should be different&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;buffer-s-take-on-values&#34;&gt;Buffer&amp;rsquo;s take on values&lt;/h2&gt;

&lt;p&gt;I have found these &lt;a href=&#34;http://www.slideshare.net/Bufferapp/buffer-culture-04&#34; target=&#34;_blank&#34;&gt;values&lt;/a&gt;, written by Buffer, very interesting.&lt;/p&gt;

&lt;h2 id=&#34;public-static-void&#34;&gt;Public static void&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this video: &lt;a href=&#34;https://www.youtube.com/watch?v=5kj5ApnhPAE&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Public, static void&amp;rdquo;&lt;/a&gt; by Rob Pike. The slides can be found &lt;a href=&#34;http://www.oscon.com/oscon2010/public/schedule/detail/13423&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;my-notes&#34;&gt;My notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;too much bureaucracy&lt;/li&gt;
&lt;li&gt;fighting the compiler&lt;/li&gt;
&lt;li&gt;dynamic vs static typing&lt;/li&gt;
&lt;li&gt;language too verbose&lt;/li&gt;

&lt;li&gt;&lt;p&gt;do not mix the two of them&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a language niche:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;comprehensible&lt;/li&gt;
&lt;li&gt;statically typed&lt;/li&gt;
&lt;li&gt;light on the page&lt;/li&gt;
&lt;li&gt;fast to work in&lt;/li&gt;
&lt;li&gt;scales well&lt;/li&gt;
&lt;li&gt;doesn&amp;rsquo;t require tools but supports them well&lt;/li&gt;
&lt;li&gt;good at networking and multiprocessing
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(minute 10:09)​&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org&#34; target=&#34;_blank&#34;&gt;Go&lt;/a&gt; was born to fill this niche&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nothing-is-something&#34;&gt;Nothing is something&lt;/h2&gt;

&lt;p&gt;This video has been extracted to a &lt;a href=&#34;../../../../2015/05/04/video-nothing-is-something/&#34;&gt;post&lt;/a&gt; of its own.&lt;/p&gt;

&lt;h2 id=&#34;software-is-eating-the-world&#34;&gt;Software is eating the world&lt;/h2&gt;

&lt;p&gt;This video has been extracted to a &lt;a href=&#34;../../../../2015/05/10/talk-software-is-eating-the-world/&#34;&gt;post&lt;/a&gt; of its own.&lt;/p&gt;

&lt;h2 id=&#34;the-cost-of-test-driven-development&#34;&gt;The Cost of Test Driven Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.typemock.com/2009/03/the-cost-of-test-driven-development.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, on the cost of doing TDD, which refers to &lt;a href=&#34;http://www.msr-waypoint.net/en-us/groups/ese/nagappan_tdd.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt;: Realizing quality improvement through test driven development: results and experiences of four industrial teams (below)&lt;/p&gt;

&lt;h2 id=&#34;realizing-quality-improvement-through-test-driven-development-results-and-experiences-of-four-industrial-teams&#34;&gt;Realizing quality improvement through test driven development: results and experiences of four industrial teams&lt;/h2&gt;

&lt;p&gt;This paper has been extracted to a &lt;a href=&#34;../../../../2015/05/12/paper-tdd-in-industrial-teams/&#34;&gt;post&lt;/a&gt; of its own.&lt;/p&gt;

&lt;h2 id=&#34;learn-you-some-lisp-for-great-good&#34;&gt;Learn You Some Lisp for Great Good&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched the video &lt;a href=&#34;https://www.youtube.com/watch?v=3T00X_sNg4Q&#34; target=&#34;_blank&#34;&gt;Learn You Some Lisp for Great Good&lt;/a&gt;, by Howard Abrams.&lt;/p&gt;

&lt;p&gt;I guess this is a reference to the popular &lt;a href=&#34;http://learnyouahaskell.com/&#34; target=&#34;_blank&#34;&gt;Learn You a Haskell for Great Good!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He suggests many interesting resources for learning Lisp dialects. The live coding is in Clojure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://landoflisp.com/&#34; target=&#34;_blank&#34;&gt;The land of Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mitpress.mit.edu/sicp/&#34; target=&#34;_blank&#34;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;. See also &lt;a href=&#34;https://twitter.com/SICPQuotes&#34; target=&#34;_blank&#34;&gt;SICPQuotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mitpress.mit.edu/books/little-schemer&#34; target=&#34;_blank&#34;&gt;The Little Schemer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/pdf/eintr.pdf&#34; target=&#34;_blank&#34;&gt;An Introduction to Programming in Emacs Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.4clojure.com/&#34; target=&#34;_blank&#34;&gt;4clojure Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://clojurekoans.com/&#34; target=&#34;_blank&#34;&gt;Clojure Koans&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On another topic, in the &lt;a href=&#34;http://www.meetup.com/ClojureBCN/events/222418104/&#34; target=&#34;_blank&#34;&gt;Bank accounts exercise from Exercism&lt;/a&gt; meetup, we discussed the book &lt;a href=&#34;https://pragprog.com/book/shcloj2/programming-clojure&#34; target=&#34;_blank&#34;&gt;Programming Clojure (2nd edition)&lt;/a&gt; by Stuart Halloway&lt;/p&gt;

&lt;h2 id=&#34;professor-frisby-s-mostly-adequate-guide-to-functional-programming&#34;&gt;Professor Frisby&amp;rsquo;s Mostly Adequate Guide to Functional Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/DrBoolean/mostly-adequate-guide&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; to functional programming. It is still work in progress (WIP) but still interesting. Written in javascript, so you can REPL in the browser.&lt;/p&gt;

&lt;h2 id=&#34;learning-code-good&#34;&gt;Learning Code Good&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this video, by Saron Yitbarek: &lt;a href=&#34;https://www.youtube.com/watch?v=-nsnAYRqYLA&#34; target=&#34;_blank&#34;&gt;Learn Code Good&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;why-you-don-t-get-mock-objects&#34;&gt;Why You Don&amp;rsquo;t Get Mock Objects&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=R9FOchgTtLM&#34; target=&#34;_blank&#34;&gt;Why You Don&amp;rsquo;t Get Mock Objects&lt;/a&gt;, by Gregory Moeck.&lt;/p&gt;

&lt;p&gt;In it, they point to the &lt;a href=&#34;http://www.growing-object-oriented-software.com/&#34; target=&#34;_blank&#34;&gt;Growing Object-Oriented Software Guided by Tests&lt;/a&gt; book (&lt;a href=&#34;https://alvarogarcia7.github.io/categories/goos
/&#34;&gt;category here&lt;/a&gt;), the paper &lt;a href=&#34;www.jmock.org/oopsla2004.pdf&#34; target=&#34;_blank&#34;&gt;Mock Roles, not Objects&lt;/a&gt; (also present in the GOOS book).&lt;/p&gt;

&lt;h2 id=&#34;technical-debt-a-repayment-plan&#34;&gt;Technical Debt: A Repayment Plan&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.infoq.com/articles/tech-debt-repayment&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/@jeremyjarrell&#34; target=&#34;_blank&#34;&gt;Jeremy Jarrell&lt;/a&gt; on technical debt how to repay it: schedule, taxes, default, etc&lt;/p&gt;

&lt;p&gt;This has made me think of the &lt;a href=&#34;http://scbcn.ideascale.com/a/dtd/Deuda-t%C3%A9cnica-origen-y-consecuencias/69782-25568&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Deuda técnica, origen y consecuencias&amp;rdquo; talk&lt;/a&gt; (Technical debt: origin and consequences) (Spanish), that was delivered by &lt;a href=&#34;https://twitter.com/@jgomezz&#34; target=&#34;_blank&#34;&gt;Javier Gómez&lt;/a&gt; at the Software Craftsmanship 2014.&lt;/p&gt;

&lt;h2 id=&#34;revisiting-xp-be-a-thoughtful-programmer-by-exercising-more-collective-ownership&#34;&gt;Revisiting XP: be a thoughtful programmer by exercising more collective ownership&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.infoq.com/articles/revisit-p-collective&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/tiagooo_romero&#34; target=&#34;_blank&#34;&gt;Tiago Garcia&lt;/a&gt; on the collective code ownership, as stated by Xtreme Programming (XP), with some example and guidelines.&lt;/p&gt;

&lt;h2 id=&#34;where-s-the-real-bottleneck-in-scientific-computing&#34;&gt;Where&amp;rsquo;s the Real Bottleneck in Scientific Computing?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.americanscientist.org/issues/pub/wheres-the-real-bottleneck-in-scientific-computing/99999&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Greg Wilson on the tools and procedures investigators use to produce software.&lt;/p&gt;

&lt;h2 id=&#34;testing-inside-the-sprint&#34;&gt;Testing inside the Sprint&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ronjeffries.com/articles/2015-03-01-testing-in-sprints/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ron Jeffries.&lt;/p&gt;

&lt;p&gt;Discusses the need for testing and why this hasn&amp;rsquo;t been communicated enough, as there still are people who have not understood it.&lt;/p&gt;

&lt;p&gt;Also about why people equal something failing when using scrum with scrum failing.&lt;/p&gt;

&lt;h2 id=&#34;dto-vs-domain-models&#34;&gt;DTO vs Domain Models&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/05/dto-vs-domain-models/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Carlos Blé&lt;/p&gt;

&lt;h2 id=&#34;homoiconicity-isn-t-the-point&#34;&gt;Homoiconicity isn’t the point&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://calculist.org/blog/2012/04/17/homoiconicity-isnt-the-point/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Herman about homoiconicity, comparing Lisp dialects (have it) to others that don&amp;rsquo;t. The main point is at the end, where it says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] homoiconicity isn’t the point, read is&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;so-you-don-t-want-to-be-a-programmer-after-all&#34;&gt;So You Don&amp;rsquo;t Want to be a Programmer After All&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/so-you-dont-want-to-be-a-programmer-after-all/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jeff Atwood. Cites the golden handcuffs (also known as golden shackles), reasons to be and not to be a programmer, and how to be an average and outstanding programmer&lt;/p&gt;

&lt;h2 id=&#34;the-nature-of-lisp&#34;&gt;The Nature of Lisp&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.defmacro.org/ramblings/lisp.html&#34; target=&#34;_blank&#34;&gt;this article / introduction&lt;/a&gt; to Lisp by Slava Akhmechet&lt;/p&gt;

&lt;h2 id=&#34;david-pollak-s-my-thoughts-on-go&#34;&gt;[David Pollak&amp;rsquo;s] My Thoughts on Go&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.goodstuff.im/golang&#34; target=&#34;_blank&#34;&gt;these comments&lt;/a&gt; on Go Lang from David Pollak&lt;/p&gt;

&lt;h2 id=&#34;the-well-rounded-technologist&#34;&gt;The Well-Rounded Technologist&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/04/02/the-well-rounded-technologist.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;should-i-read-papers&#34;&gt;Should I read papers?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/10/21/should-i-read-papers.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;lisp-1-vs-lisp-2&#34;&gt;Lisp-1 vs Lisp-2&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hornbeck.wordpress.com/2009/07/05/lisp-1-vs-lisp-2/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/hornbeck&#34; target=&#34;_blank&#34;&gt;@Hornbeck&lt;/a&gt; about the lisp 1 and lisp 2.&lt;/p&gt;

&lt;h2 id=&#34;science-corps&#34;&gt;Science Corps&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this &lt;a href=&#34;https://www.youtube.com/watch?v=dkQkafxFoIQ&#34; target=&#34;_blank&#34;&gt;TEDx talk&lt;/a&gt; by Aza Raskin, featuring Data Banks and Science corps&lt;/p&gt;

&lt;h2 id=&#34;healthy-codebase-and-preparatory-refactoring&#34;&gt;Healthy Codebase and Preparatory Refactoring&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://brewhouse.io/blog/2014/11/10/healthy-codebase-and-preparatory-refactoring.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Philippe Creux about preparatory refactoring&lt;/p&gt;

&lt;h2 id=&#34;you-are-learning-haskell-right-now-or-anything-you-want-really&#34;&gt;You Are Learning Haskell Right Now (Or Anything You Want Really)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/12/11/you-are-learning-haskell-right-now.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;lisp-is-abstract-syntax&#34;&gt;Lisp is Abstract Syntax&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/04/16/lisp-is-abstract-syntax.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;two-things-types-have-taught-me&#34;&gt;Two Things Types Have Taught Me&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/10/30/two-things-types-have-taught-me.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;don-t-bet-against-yourself&#34;&gt;Don&amp;rsquo;t Bet Against Yourself&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;learning-math-a-blank-is-a-blank-with-a-blank&#34;&gt;Learning Math: A Blank Is A Blank With A Blank&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;the-false-economy-of-metaprogramming&#34;&gt;The False Economy Of Metaprogramming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2015/03/06/the-false-economy-of-generated-methods.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;management-and-engineering-overlapping&#34;&gt;Management and Engineering, overlapping&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.quora.com/Does-Adam-DAngelo-feel-comfortable-with-the-transition-from-an-engineer-to-a-management-position?srid=3OC&amp;amp;share=1&#34; target=&#34;_blank&#34;&gt;this Quora answer&lt;/a&gt; by Adam D&amp;rsquo;Angelo. The original title is: Does Adam D&amp;rsquo;Angelo feel comfortable with the transition from an engineer to a management position?&lt;/p&gt;

&lt;h2 id=&#34;evolution-of-the-twitter-stack&#34;&gt;Evolution of The Twitter Stack&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.slideshare.net/slideshow/embed_code/key/ly83zQkBjCxnIX&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about changing the technology stack in Twitter: from Rails to JVM-based&lt;/p&gt;

&lt;h2 id=&#34;compilers-as-assistants&#34;&gt;Compilers as Assistants&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://elm-lang.org/blog/compilers-as-assistants&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Evan Czaplicki on seeing the compiler as an assistant to your work, instead of an adversary. Of how the compiler should give the most useful errors and warnings.&lt;/p&gt;

&lt;p&gt;He also explains what features have been removed from the Elm language in 0.16.&lt;/p&gt;

&lt;p&gt;Tags: compiler, assistant, adversary, enemy, elm, elm-compiler, evan-czaplicki&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>