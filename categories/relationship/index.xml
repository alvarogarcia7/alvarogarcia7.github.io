<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Relationship on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/relationship/</link>
    <description>Recent content in Relationship on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 May 2016 00:08:19 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/relationship/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in May 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/05/01/self-study-in-may-2016/</link>
      <pubDate>Sun, 01 May 2016 00:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/05/01/self-study-in-may-2016/</guid>
      <description>

&lt;h2 id=&#34;being-a-developer-after-40&#34;&gt;Being A Developer After 40&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.freecodecamp.com/being-a-developer-after-40-3c5dd112210c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Adrian Kosmaczewski on the required topics to be a developer at age 40 and keep enjoying it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forget The Hype&lt;/li&gt;
&lt;li&gt;Choose Your Galaxy Wisely&lt;/li&gt;
&lt;li&gt;Learn About Software History&lt;/li&gt;
&lt;li&gt;Keep on Learning&lt;/li&gt;
&lt;li&gt;Teach&lt;/li&gt;
&lt;li&gt;Workplaces Suck&lt;/li&gt;
&lt;li&gt;Know Your Worth&lt;/li&gt;
&lt;li&gt;Send The Elevator Down&lt;/li&gt;
&lt;li&gt;LLVM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He references galaxy, the big stack you are positioned (JVM, .net, PHP, etc). He makes a special mention of the LLVM&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Take conscious decisions in your life. Be aware of your actions and their effect. Do not blush or be embarrased for changing your opinions. Say “I’m sorry” when required. Listen. Do not be a hotshot. Have integrity and self-respect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recommends these books:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dealers of Lightning by Michael A. Hiltzik&lt;/li&gt;
&lt;li&gt;Revolution in the Valley by Andy Hertzfeld&lt;/li&gt;
&lt;li&gt;The Cathedral and the Bazaar by Eric S. Raymond&lt;/li&gt;
&lt;li&gt;The Success of Open Source by Steven Weber&lt;/li&gt;
&lt;li&gt;The Old New Thing by Raymond Chen&lt;/li&gt;
&lt;li&gt;The Mythical Man Month by Frederick P. Brooks Jr.&lt;/li&gt;
&lt;li&gt;Peopleware by Tom DeMarco and Tim Lister&lt;/li&gt;
&lt;li&gt;The Psychology of Software Programming by Gerald M. Weinberg&lt;/li&gt;
&lt;li&gt;Facts and Fallacies of Software Engineering by Robert L. Glass&lt;/li&gt;
&lt;li&gt;The Design of Everyday Things by Don Norman&lt;/li&gt;
&lt;li&gt;Agile!: The Good, the Hype and the Ugly by Bertrand Meyer&lt;/li&gt;
&lt;li&gt;Rework by Jason Fried and David Heinemeier Hansson&lt;/li&gt;
&lt;li&gt;Geekonomics by David Rice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: adrian-kosmaczewski, career, profession, age, galaxy, long-term, book&lt;/p&gt;

&lt;h2 id=&#34;firing-people&#34;&gt;Firing people&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://zachholman.com/talk/firing-people&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Zach Holman on firing people at your current work, both from the perspective of the employee (fired), employer, coworker.&lt;/p&gt;

&lt;p&gt;Also explains his personal experience of being fired from Github.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You’ll know the difference between doing far and away your best work, and doing work that is still good, but just nominally better than what you’ve been doing. Once you catch yourself adjusting to that incremental progression… maybe it’s time to leave, to change things up&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: zach-holman, github, team-management, firing, coworker, employee, employer, job, relationship, next&lt;/p&gt;

&lt;h2 id=&#34;10-design-principles-for-developers&#34;&gt;10 design principles — for developers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@nirbenita/the-10-design-heuristics-for-developers-1e70a9dc58a7&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains what are the 10 design principles for programmers, as outlined by Jakob Nielsen. The article itself is by Nir Benita&lt;/p&gt;

&lt;p&gt;Tags: design-principle, ux, jakob-nielsen, nir-benita, usability, testing, list&lt;/p&gt;

&lt;h2 id=&#34;design-patterns-coming-full-circle-part-two&#34;&gt;Design Patterns — Coming Full Circle, Part Two&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/swlh/design-patterns-coming-full-circle-part-two-ced2c69e4724#.x8ud7eeqm&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains how design patterns can be observed and then discovered and shows a list of four patterns dot working with data, by flux.io. Article by Jen Carlile&lt;/p&gt;

&lt;p&gt;Tags: design-pattern, data, pattern, flux, flux-io, pattern-catalog, jen-carlile&lt;/p&gt;

&lt;h2 id=&#34;why-i-m-ending-my-github-streak-after-844-days&#34;&gt;Why I’m Ending my Github Streak after 844 Days&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@karan/why-i-m-ending-my-github-streak-after-844-days-80fd014dc8df&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Karan Goel on the mechanics of following a pattern, of an activity sliced in small parts (1 problem a day or half an hour) and how this can be counterproductive sometimes.&lt;/p&gt;

&lt;p&gt;Discusses ROI of this type of activity at the beginning of your career and later.&lt;/p&gt;

&lt;p&gt;Tags: karan-goel, github, streak, python, code, everyday, practice, deliberate-practice, career, career-management&lt;/p&gt;

&lt;h2 id=&#34;good-lessons-learned-from-past-jobs&#34;&gt;Good lessons learned from past jobs&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.kartones.net/post/good-lessons-learned-from-past-jobs/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Diego &amp;lsquo;Kartones&amp;rsquo; on a synopsis of his work experience, job by job and what he has learned on each job.&lt;/p&gt;

&lt;p&gt;Tags: diego-kartones, job, professional-career, career&lt;/p&gt;

&lt;h2 id=&#34;too-much-work-in-progress&#34;&gt;Too Much Work In Progress&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://monospacedmonologues.com/post/144137568985/too-much-work-in-progress&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Samir Talwar on factors that indicate work in progress.&lt;/p&gt;

&lt;p&gt;Tags: wip, work-in-progress, list, samir-talwar&lt;/p&gt;

&lt;h2 id=&#34;testdouble&#34;&gt;TestDouble&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.martinfowler.com/bliki/TestDouble.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Martin Fowler describing the test doubles that Gerard Meszaros describes in xUnit Test Patterns.&lt;/p&gt;

&lt;p&gt;Tags: test-double, martin-fowler, gerard-meszaros, stub, fake, mock, dummy, spy, xunit, junit, pattern, test-pattern&lt;/p&gt;

&lt;h2 id=&#34;scaling-to-12-million-concurrent-connections-how-migratorydata-did-it&#34;&gt;Scaling to 12 Million Concurrent Connections: How MigratoryData Did It&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://mrotaru.wordpress.com/2013/10/10/scaling-to-12-million-concurrent-connections-how-migratorydata-did-it/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mihai Rotaru on how MigratoryData scaled to 12 million concurrent connections in a 1U server. They explain what optimizations they did in order to achieve this.&lt;/p&gt;

&lt;p&gt;Tags: migratorydata, mihai-rotaru, concurrent-connection, 1u-server, scalability, websocket&lt;/p&gt;

&lt;h2 id=&#34;do-what-you-love&#34;&gt;Do what you love&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/do-what-you-love-jorge-diaz&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jorge Diaz on doing what takes you out of your comfort zone, changing careers, and life-work in general.&lt;/p&gt;

&lt;p&gt;Cites this &lt;a href=&#34;https://www.ted.com/talks/scott_dinsmore_how_to_find_work_you_love/transcript?language=en&#34; target=&#34;_blank&#34;&gt;TED talk: How to find work you love&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: jorge-diaz, work, life, career, comfort-zone, scott-dinsmore, career-management&lt;/p&gt;

&lt;h2 id=&#34;jhipster-the-best-way-to-breed-a-new-app&#34;&gt;JHipster - The best way to breed a new app&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/olbpetersson/jhipster-the-best-way-to-breed-a-new-app&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Ola Petersson, where he describes the architecture and contents of the jHipster, its pros and cons.&lt;/p&gt;

&lt;p&gt;Tags: jhipster, ola petersson, java, code-generation, code-generator, microservice&lt;/p&gt;

&lt;h2 id=&#34;how-going-to-coding-events-helped-me-get-an-awesome-job&#34;&gt;How going to coding events helped me get an awesome job&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.freecodecamp.com/networking-at-meet-ups-getting-hired-f0f7c4f4681a&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Gwendolyn Faraday on how to kickstart a career in web development, attending events, pairing and networking. That netted her some interviews to start programming for a living.&lt;/p&gt;

&lt;p&gt;Tags: networking, gwendolyn-faraday, event, job, learn-to-code&lt;/p&gt;

&lt;h2 id=&#34;maze-generation-algorithm-recap&#34;&gt;Maze Generation: Algorithm Recap&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://weblog.jamisbuck.org/2011/2/7/maze-generation-algorithm-recap&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of maze-generation algorithms by Jamis Buck. Including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;recursive backtracker&lt;/li&gt;
&lt;li&gt;Eller’s algorithm&lt;/li&gt;
&lt;li&gt;Kruskal’s algorithm&lt;/li&gt;
&lt;li&gt;Prim’s algorithm&lt;/li&gt;
&lt;li&gt;recursive division algorithm&lt;/li&gt;
&lt;li&gt;Aldous-Broder algorithm&lt;/li&gt;
&lt;li&gt;Wilson’s algorithm&lt;/li&gt;
&lt;li&gt;Hunt-and-Kill algorithm&lt;/li&gt;
&lt;li&gt;Growing Tree algorithm&lt;/li&gt;
&lt;li&gt;Binary Tree algorithm&lt;/li&gt;
&lt;li&gt;Sidewinder algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: recursive-backtracker,eller-algorithm,kruskal-algorithm,prim-algorithm,recursive-division-algorithm,aldous-broder-algorithm,wilson-algorithm,hunt-and-kill-algorithm,growing-tree-algorithm,binary-tree-algorithm,sidewinder-algorithm, jamis-buck, maze, maze-generation, algorithm, list&lt;/p&gt;

&lt;h2 id=&#34;the-poverty-of-constraints&#34;&gt;The Poverty of Constraints&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://weblog.jamisbuck.org/2016/3/19/poverty-of-constraints.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jamis Buck on interpreting two Korean proverbs in the world of software:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A dutiful son comes from a poor home&lt;/li&gt;
&lt;li&gt;A poor house has many children&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: proverb, korea, philosophy, software, constraint, jamis-buck&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in November 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</link>
      <pubDate>Mon, 02 Nov 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</guid>
      <description>

&lt;h2 id=&#34;call-me-maybe-rabbitmq&#34;&gt;Call me maybe: RabbitMQ&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://aphyr.com/posts/315-call-me-maybe-rabbitmq&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kyle Kingsbury on using RabbitMQ as a lock service. It investigates and gives a counterexample of using it for this purpose.&lt;/p&gt;

&lt;p&gt;Uses Knossos to do the testing and surfaces a problem with it. Explains specific problems on locking: at-most-once and at-least-once message delivery&lt;/p&gt;

&lt;p&gt;Note: References Jepsen (I guess an inside joke to the song &amp;ldquo;Call me maybe&amp;rdquo; by Carly Rae Jepsen) for at-most-once and at-least-once message delivery.&lt;/p&gt;

&lt;p&gt;Tags: rabbitmq, kyle-kingsbury, lock, cap-theorem, distributed-system, jepsen, knossos, at-most-once-delivery, at-least-once-delivery, counterexample, mutex&lt;/p&gt;

&lt;h2 id=&#34;everyone-is-potentially-a-teacher&#34;&gt;Everyone is potentially a teacher&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/09/everyone-is-potentially-a-teacher&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Carlos Blé where he explains that everyone can have ideas worth spreading and that the knowledge not only comes from others but also from the relationships that tie you to other people.&lt;/p&gt;

&lt;p&gt;Tags: carlos-ble, teaching, pedagogy, idea, teacher, relationship&lt;/p&gt;

&lt;h2 id=&#34;ragel-state-machine-compiler&#34;&gt;Ragel State Machine Compiler&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.colm.net/open-source/ragel/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining what the Ragel project is about: a code generator from regex to code in languages such as C#, Java, etc. It is limited to finite state machines (FSM), with determinism. It can also handle some indeterminism. Written by Adrian D. Thurston&lt;/p&gt;

&lt;p&gt;Tags: adrian-thurston, fsm, state-machine, finite-state-machine, code-generation, ragel&lt;/p&gt;

&lt;h2 id=&#34;http-is-obsolete-it-s-time-for-the-distributed-permanent-web&#34;&gt;HTTP is obsolete. It&amp;rsquo;s time for the distributed, permanent web&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ipfs.io/ipfs/QmNhFJjGcMPqpuYfxL62VVB9528NXqDNMFXiqN5bgFYiZ1/its-time-for-the-permanent-web.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kyle Drake explaining the need for a permanent, distributed web archive.&lt;/p&gt;

&lt;p&gt;Using a distributed file system (IPFS) and software similar to Bitcoin, they can host parts of the web locally, making it immutable and distributed&lt;/p&gt;

&lt;p&gt;Tags: kyle-drake, web-archive, centralization, decentralization, distribution, permanent-web, ipfs, federation,&lt;/p&gt;

&lt;h2 id=&#34;recovering-from-the-integrated-tests-scam&#34;&gt;Recovering From the Integrated Tests Scam&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive1.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=42e61e203e&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; from J. B. Rainsberger on the integrated test scam and how to solve it: refactoring.&lt;/p&gt;

&lt;p&gt;Tags: jbrains, tdd, integrated-test, integration-test, j-rainsberger&lt;/p&gt;

&lt;h2 id=&#34;broken-windows-theory&#34;&gt;Broken windows theory&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Broken_windows_theory&#34; target=&#34;_blank&#34;&gt;this wikipedia article&lt;/a&gt; that talks about the broken windows theory, that states that controlling and monitoring public spaces leads to lowering the serious crimes.&lt;/p&gt;

&lt;p&gt;Cites three causes for this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Social norms and conformity&lt;/li&gt;
&lt;li&gt;Lack of routing monitoring&lt;/li&gt;
&lt;li&gt;Social signaling and signal crime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also discusses examples in the US and in the Netherlands, as well as criticisms.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve read it to better understand how to apply this theory to software development, on a day-to-day basis.&lt;/p&gt;

&lt;p&gt;Tags: wikipedia, theory, broken-window&lt;/p&gt;

&lt;h2 id=&#34;scsh&#34;&gt;Scsh&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Scsh&#34; target=&#34;_blank&#34;&gt;the wikipedia page&lt;/a&gt; for Scsh, the Scheme shell.&lt;/p&gt;

&lt;h2 id=&#34;why-is-scala-s-type-inference-not-as-powerful-as-haskell-s&#34;&gt;Why is Scala&amp;rsquo;s type inference not as powerful as Haskell&amp;rsquo;s?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the reasoning why Haskell supports other type inferences that are not present in Scala, in &lt;a href=&#34;http://stackoverflow.com/questions/7234095/why-is-scalas-type-inference-not-as-powerful-as-haskells&#34; target=&#34;_blank&#34;&gt;this StackOverflow question&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: scala, haskell, type-inference, hindley-milner, type-inference-algorithm&lt;/p&gt;

&lt;h2 id=&#34;the-future-of-the-lispm&#34;&gt;The Future of the LispM&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://arrdem.com/2014/11/28/the_future_of_the_lispm/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining the past and current situation in the Lisp world: from Lisp, to LispM, to the MIT and Symbolics Inc., to Clojure and Scheme.&lt;/p&gt;

&lt;p&gt;Also talks about integration with the operating system and its execution in the microprocessor. Written by Reid McKenzie&lt;/p&gt;

&lt;p&gt;Tags: reid-mckenzie, lisp, lispm, clojure, scheme, symbolics&lt;/p&gt;

&lt;h2 id=&#34;the-lisp-curse&#34;&gt;The Lisp Curse&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.winestockwebdesign.com/Essays/Lisp_Curse.html&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Rudolf Winestock, where he explains the low barrier (or low cost) for people in powerful languages (such as Lisp) to not accept the status quo in their project and fork / start their own.&lt;/p&gt;

&lt;p&gt;It also compares languages and the people attracted to them. Cites Mark Tarver&amp;rsquo;s essays several times, including the Brilliant Bipolar Mind (BBM) in &lt;a href=&#34;https://web.archive.org/web/20150308085419/http://www.lambdassociates.org/blog/bipolar.htm&#34; target=&#34;_blank&#34;&gt;this other&lt;/a&gt; essay (from WebArchive). Compares the BBM and the normal worker in usefulness to companies.&lt;/p&gt;

&lt;p&gt;Cites the Pareto principle (80-20 rule): a single hacker will port 80% the library from another language, leaving it buggy, undocumented and only understandable by the original author (assuming this is only 20% of the work). The rest (e.g., documentation, bugfixing, maintenance) are dropped and never taken care of.&lt;/p&gt;

&lt;p&gt;Cites that this could be somewhat based on the facility of creating new features for the language. A small effort implies small implementation time, leaving no margin for thinking it through and seeing other corner cases. Also, a single person working on the project means no code review. The style might be coherent (always the same one), but might not be idiomatic, understandable by others, maintainable, etc.&lt;/p&gt;

&lt;p&gt;Closes the essay with this quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The expressive power of Lisp has drawbacks. There is no such thing as a free lunch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: rudolf-winestock, essay, pareto-principle, hacking, one-man-band, lisp, no-free-lunch, quote&lt;/p&gt;

&lt;h2 id=&#34;the-bipolar-lisp-programmer&#34;&gt;The Bipolar Lisp Programmer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://web.archive.org/web/20150308085419/http://www.lambdassociates.org/blog/bipolar.htm&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Mark Tarver on the Bipolar Lisp programmmer or the koan of Lisp.&lt;/p&gt;

&lt;p&gt;It explains the history of the Brilliant Bipolar Mind (BBM) when they attend high school and college. The freedom they&amp;rsquo;re given, exactly the same as in Lisp, as you don&amp;rsquo;t need to mix and socialize with others to create a good-enough solution.&lt;/p&gt;

&lt;p&gt;In this fashion, he says, most of the projects are 80% finished, not documented, not maintained. The same problems that worry enterprises.&lt;/p&gt;

&lt;p&gt;Cites the article &amp;ldquo;Lisp: Good News, Bad News, How to Win Big&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: essay, mark-tarver, bipolar-lisp-programmer, lisp-programmer, programmer, brillian-bipolar-mind, blp, bbm, koan&lt;/p&gt;

&lt;p&gt;Note: this article was no longer present on its original site. Fetched it from the Web Archive (WayBack Machine).&lt;/p&gt;

&lt;h2 id=&#34;writing-readable-clojure-code&#34;&gt;Writing readable Clojure code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/jiriknesl/writing-readable-clojure-code&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Jiří Knesl, that explains how to write better clojure code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Macros&lt;/li&gt;
&lt;li&gt;HOFs&lt;/li&gt;
&lt;li&gt;left-to-right vs right-to-left code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: clojure, jiri-knesl, macro, hof, thread, slide&lt;/p&gt;

&lt;h2 id=&#34;how-can-i-get-a-reference-to-a-method&#34;&gt;How can I get a reference to a method?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/485151/how-can-i-get-a-reference-to-a-method&#34; target=&#34;_blank&#34;&gt;this question&lt;/a&gt;, &lt;a href=&#34;http://stackoverflow.com/questions/4294485/how-do-i-reference-a-function-in-ruby&#34; target=&#34;_blank&#34;&gt;another question&lt;/a&gt; from StackOverflow&lt;/p&gt;

&lt;p&gt;Tags: stackoverflow, question, ruby, functional-programming, method-reference&lt;/p&gt;

&lt;h2 id=&#34;implicit-and-explicit-blocks&#34;&gt;Implicit and Explicit Blocks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/18-blocks/lessons/55-new-lesson&#34; target=&#34;_blank&#34;&gt;this lesson from rubyMonk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: rubymonk, lesson, block, ruby&lt;/p&gt;

&lt;h2 id=&#34;what-s-point-free-programing&#34;&gt;What&amp;rsquo;s Point-free Programing?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://xahlee.info/comp/point-free_programing.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Xah Lee explaining point-free programming, which requires a glance at function decomposition (currying)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] “point-free programing” is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is about a particular &lt;strong&gt;syntax&lt;/strong&gt; for &lt;strong&gt;function definition&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;strong&gt;defining a function&lt;/strong&gt;, no symbol is used for function parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;oracle-s-planned-obsolescence-for-java&#34;&gt;Oracle’s “planned obsolescence” for Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://jaxenter.com/oracle-and-javas-planned-obsolescence-121144.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Coman Hamilton on the possible Java&amp;rsquo;s planned obsolescence by Oracle.&lt;/p&gt;

&lt;p&gt;Discusses features pushed to future releases, comparing it to other legacy languages.&lt;/p&gt;

&lt;p&gt;Tags: obsolescence, legacy-language, planned-obsolescence, java, java-ee, oracle, fortran, cobol, coman-hamilton&lt;/p&gt;

&lt;h2 id=&#34;your-first-ruby-native-extension-c&#34;&gt;Your first Ruby native extension: C&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.jcoglan.com/2012/07/29/your-first-ruby-native-extension-c/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about writing a native extension for ruby. Written by James Coglan&lt;/p&gt;

&lt;p&gt;Tags: james-coglan, ruby, c, native-extension&lt;/p&gt;

&lt;h2 id=&#34;what-s-the-difference-between-equal-eql-and&#34;&gt;What&amp;rsquo;s the difference between equal?, eql?, ===, and ==?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/7156955/whats-the-difference-between-equal-eql-and&#34; target=&#34;_blank&#34;&gt;this stackoverflow&lt;/a&gt; question regarding Ruby operators: equal?, eql?, ===, ==:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;==: generic equality&lt;/li&gt;
&lt;li&gt;===: case equality (for case - when)&lt;/li&gt;
&lt;li&gt;eql?: hash equality&lt;/li&gt;
&lt;li&gt;equal?: identity comparison (pointer comparison)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: comparison, stackoverflow, ruby, equal, eq, ==, ===, question, answer, jtbandes&lt;/p&gt;

&lt;h2 id=&#34;kanban&#34;&gt;Kanban&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://es.wikipedia.org/wiki/Kanban&#34; target=&#34;_blank&#34;&gt;the wikipedia page&lt;/a&gt; for Kanban (Spanish)&lt;/p&gt;

&lt;p&gt;Tags: wikipedia, kanban, agile-methodology, management&lt;/p&gt;

&lt;h2 id=&#34;is-your-scrum-team-agile&#34;&gt;Is your Scrum team Agile?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.thesoftwarecraft.com/2014/04/is-your-scrum-team-agile.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by  Bart Bakker where he discusses some common patterns in Agile implementations (in software companies)&lt;/p&gt;

&lt;p&gt;Tags: scrum, team, agile, scrum-implementation, bart-bakker&lt;/p&gt;

&lt;h2 id=&#34;mejora-tu-trabajo-en-equipo-con-el-método-kanban&#34;&gt;Mejora tu trabajo en equipo con el método Kanban&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://hipertextual.com/archivo/2013/11/que-es-kanban/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains then kanban management framework, with its principles and its values. Written by Jose López (in Spanish)&lt;/p&gt;

&lt;p&gt;Tags: kanban, management, agile-methodology, management-framework, principle, value, jose-lopez&lt;/p&gt;

&lt;h2 id=&#34;qué-es-el-método-kanban-para-la-gestión-de-proyectos&#34;&gt;¿Qué es el método Kanban para la gestión de proyectos?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javiergarzas.com/2011/11/kanban.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; (Spanish) written by Javier Garzás where it is explained the kanban methodology and three of its main rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;visualize workflow&lt;/li&gt;
&lt;li&gt;limit WIP&lt;/li&gt;
&lt;li&gt;measure {lead, cycle} time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: kanban, management, agile-methodology, management-framework, principle, value, javier-garzas&lt;/p&gt;

&lt;h2 id=&#34;describe-vs-context-in-rspec&#34;&gt;describe vs. context in rspec&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lmws.net/describe-vs-context-in-rspec&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains the (lack of) functional difference between RSpec&amp;rsquo;s &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; methods. The difference is contextual (i.e., the amount of information they convey). Written by LM&lt;/p&gt;

&lt;p&gt;Tags: rspec, ruby, describe, context, difference&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>