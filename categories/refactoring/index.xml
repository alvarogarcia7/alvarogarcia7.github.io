<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>refactoring on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/refactoring/</link>
    <description>Recent content in refactoring on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Aug 2019 10:32:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/refactoring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self-Study in August 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/08/01/self-study-august-2019/</link>
      <pubDate>Thu, 01 Aug 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/08/01/self-study-august-2019/</guid>
      <description>List the local NPM link packages npm ls -g &amp;ndash;depth=0 &amp;ndash;link=true
Tags: npm, npm-link, node, link, global-dependency
Id: c01a0efa-b832-11e9-87be-0242ac110003 Read: Tue, 06 Aug 2019 10:12:52 +0000
Mutation testing tool for java / jvm This is a mutation testing tool for the JVM / java
Tags: pitest, pit, mutation-testing, testing, test, tool, jvm, java, mutation
Id: 02d29d3e-b833-11e9-b785-0242ac110003 Read: Tue, 06 Aug 2019 10:14:44 +0000
Ugly trivia kata, using mutation testing This is a kata I&amp;rsquo;ve practiced, then shown at the Software Crafters meetup (at Softonic).</description>
    </item>
    
    <item>
      <title>Refactoring: split loop &#43; loop/map equivalence</title>
      <link>https://alvarogarcia7.github.io/blog/2019/02/06/refactoring-split-loop-map-equivalence/</link>
      <pubDate>Wed, 06 Feb 2019 20:44:59 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/02/06/refactoring-split-loop-map-equivalence/</guid>
      <description>We can combine the &amp;ldquo;Split loop&amp;rdquo; refactoring technique plus the &amp;ldquo;Loop / Map equivalence&amp;rdquo; when refactoring.
Given that it does not matter in which order we apply these operations, we can say that they have the associative property
Chart of the operations Take the case of a loop doing two things. From there:
 we can replace the loop for a map (including the two actions into a single map body) we can split the loop into two loops  Take the case of two loops, doing one thing each.</description>
    </item>
    
    <item>
      <title>Refactoring functional code</title>
      <link>https://alvarogarcia7.github.io/articles/2016/09/28/refactoring-functional-code/</link>
      <pubDate>Wed, 28 Sep 2016 20:36:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/articles/2016/09/28/refactoring-functional-code/</guid>
      <description>With my pairing mate we have refactored this piece of functional code.
Original code:
function filterTokens (rawTokens) { const cleanedTokens = rawTokens.map(token =&amp;gt; (token.length &amp;amp;&amp;amp; token[0] === &amp;#39;-&amp;#39;) ? token.substring(1) : token) return cleanedTokens.filter(token =&amp;gt; token !== &amp;#39;&amp;#39; &amp;amp;&amp;amp; stopWordsArray.indexOf(token) === -1) } Refactored code:
function filterTokens (rawTokens) { const cleanedTokens = rawTokens.map(token =&amp;gt; startsWithADash(token) ? removeDashFrom(token) : token) const processedTokens = cleanedTokens.filter(token =&amp;gt; isNotEmpty(token) &amp;amp;&amp;amp; isNotAStopWord(token)) return processedTokens function startsWithADash (token) { return (token.</description>
    </item>
    
    <item>
      <title>Self-Study in April 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/01/self-study/</link>
      <pubDate>Fri, 01 Apr 2016 00:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/01/self-study/</guid>
      <description>Deliberate Practice: What It Is and Why You Need It I&amp;rsquo;ve read this article by Corbett Barr on what is deliberate practice and why it is needed to become an expert in a given domain field.
The four essential components:
 Motivation Tailored (practice) Feedback Repetion  Tags: corbett-barr, deliberate-practice, expert, practice, anders-ericsson, talent, professional-development, career
10 Features I Wish Java Would Steal From the Kotlin Language I&amp;rsquo;ve read this list of features that the Kotlin Language has that would be an improvement for the Java language.</description>
    </item>
    
    <item>
      <title>Self-Study in March 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</link>
      <pubDate>Wed, 02 Mar 2016 12:58:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</guid>
      <description>Learning Programming Isn’t That Hard, Deep Work Is Hard I&amp;rsquo;ve read this article by Benedict Fritz on two types of work (i.e., deep and shallow) and how programming is of the deep type. He links the difficulty of learning to program to the difficulty of practicing deep work.
Tags: analogy, benedict-fritz, deep-work, shallow-work, learn-to-program, psychology
BeCodeWeek by Yeray Darias I&amp;rsquo;ve read this category of posts by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.</description>
    </item>
    
    <item>
      <title>Self-Study in December 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</link>
      <pubDate>Wed, 02 Dec 2015 09:50:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</guid>
      <description>Ruby Equality And Object Comparison I&amp;rsquo;ve read this article, written by Alan Skorkin, that explains equality comparisons in ruby:
 equal? is reference equality == is value equality eql? is value and type equality  Tags: ruby, comparison, equality, object, reference, alan-skorkin
Software Folklore I&amp;rsquo;ve watched this PechaKucha by Chris Ford on what are laws and how they relate to creating software. Also talks on what could be an analogy to software creation (says not science, not engineering)</description>
    </item>
    
    <item>
      <title>Brown-bag session: refactoring legacy code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/01/brownbag-session-refactoring-legacy-code/</link>
      <pubDate>Wed, 01 Jul 2015 13:18:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/01/brownbag-session-refactoring-legacy-code/</guid>
      <description>Today I have done a brown bag session about refactoring legacy code. It includes:
 legacy code definition. There is no agreement about this in the team. the legacy code change algorithm (source is Feathers, Working effectively with legacy code). Plus an example about it. working with legacy code experience with it.  The slides are available here (PDF format)
We also did a practical session, whose experience report is here</description>
    </item>
    
    <item>
      <title>Brown-bag session: Refactoring legacy code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</link>
      <pubDate>Tue, 23 Jun 2015 19:19:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</guid>
      <description>Today I have facilitated a brown bag session about refactoring legacy code applications, as this is the case with one of the applications we maintain and add new features to.
The contents of the session:
 Briefly exposing the problem to the team, me taking the role of the Product Owner (PO) Ask the dev team to add an easy feature Do it without tests, as it was so simple that they thought they could do it (using mob programming) Ask if they were satisfied by the patch / fix.</description>
    </item>
    
    <item>
      <title>Brown-bag session: Refactoring</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/11/brownbag-session-refactoring/</link>
      <pubDate>Thu, 11 Jun 2015 20:22:16 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/11/brownbag-session-refactoring/</guid>
      <description>At a client, today we&amp;rsquo;ve done a brown-bag session on refactoring: we&amp;rsquo;ve gone through and a live demo, including refactoring a core piece of our code.
We&amp;rsquo;ve done some mob programming to help identify some smells and how to fix them.</description>
    </item>
    
    <item>
      <title>Self-study in June 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/</link>
      <pubDate>Wed, 03 Jun 2015 13:13:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/</guid>
      <description>Update: I&amp;rsquo;ve grouped all small posts related to the self-study from June 2015 into a single post
Le monitoring de flux par l’exemple I&amp;rsquo;ve read this article about monitoring, in the way of &amp;ldquo;by example&amp;rdquo;, by Cédrick Lunven and Julien Kirch (French)
The First Micro-service Architecture I&amp;rsquo;ve read this article about microservices and how they were implemented many years ago by Robert C. Martin
How I Learned to Balance My Life With Remote Work I&amp;rsquo;ve read this article about balancing life and work, either physical or remote by Michael Erasmus</description>
    </item>
    
    <item>
      <title>Self-study in May 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/</link>
      <pubDate>Sat, 09 May 2015 16:41:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/</guid>
      <description>Update: I&amp;rsquo;ve grouped all small posts related to the self-study from May 2015 into a single post
Programmer passion considered harmful I&amp;rsquo;ve read this article on why programmer passion could be negative. The title is similar to a paper by Dijkstra.
Software Craftsmanship: Are Bootcamps Enough? I&amp;rsquo;ve read this article on software craftsmanship, development bootcamps and passion by Ken Auer
Improve your development environments with virtualization I have seen this video: Improve your development environments with virtualization by Luke Sneeringer.</description>
    </item>
    
    <item>
      <title>Trimming your plants</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/02/trimming-your-plants/</link>
      <pubDate>Thu, 02 Apr 2015 23:13:45 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/02/trimming-your-plants/</guid>
      <description>This post belongs to the growing-software series
Imagine this situation: the code works. You are at this stage
Disregarding the tests, the production code is complete. Could be better, but it is ready if you are in a hurry.
Now, picture your test as a plant in a plant pot: it might be healthy on the outside (external quality) but how are their roots (internal quality)?
Do you imagine them in an ordered fashion or in a jungle of roots?</description>
    </item>
    
    <item>
      <title>Should we start the TDD cycle on refactor?</title>
      <link>https://alvarogarcia7.github.io/blog/2014/12/29/should-we-start-the-tdd-cycle-on-refactor/</link>
      <pubDate>Mon, 29 Dec 2014 20:30:01 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2014/12/29/should-we-start-the-tdd-cycle-on-refactor/</guid>
      <description>In this lexical scope, TDD by example is referring to this book1, available on Amazon
###The TDD cycle
Altough Kent Beck in his book Test-Driven Development by example explains in &amp;ldquo;Part I: the money example&amp;rdquo;2 that one should
 quickly add a test;
  run all the tests and see the new one fail [&amp;hellip;]
  Kent Beck  Implying that the TDD cycle starts with the red. Later on he explains that the cycle continues with green and refactor and back to red.</description>
    </item>
    
  </channel>
</rss>
