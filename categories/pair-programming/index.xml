<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pair-programming on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/pair-programming/</link>
    <description>Recent content in pair-programming on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Aug 2016 19:56:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/pair-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self-Study in August 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/08/01/self-study-in-august-2016/</link>
      <pubDate>Mon, 01 Aug 2016 19:56:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/08/01/self-study-in-august-2016/</guid>
      <description>Lessons in Agile: Six Months at Pivotal I&amp;rsquo;ve read this article by Maryam Labib where she explains what she has learned in the last 6 months at Pivotal: how to pair program, how to TDD and some good practices to be a better developer.
Tags: maryam-labib, pivotal, career, professional-career, tdd, pair-programming, team, lessons-learned, experience
Hacking verbal communication systems I&amp;rsquo;ve watched this talk by Ryan Alexander on what kind of systems humans use to communicate and how to improve them.</description>
    </item>
    
    <item>
      <title>Two persons involved in a git commit, in github</title>
      <link>https://alvarogarcia7.github.io/blog/2016/02/14/two-persons-involved-in-a-git-commit/</link>
      <pubDate>Sun, 14 Feb 2016 17:12:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/02/14/two-persons-involved-in-a-git-commit/</guid>
      <description>On git You can have multiple persons involved in a single git commit: an author and a committer.
The difference is explained by Manuel Doninger 1:
 The author is the one who did the code change. The committer is the person who committed that change to a repository.
 an example, by the same author:
 Example: I&amp;rsquo;m not a committer in the EGit project, so i have no rights to push directly to the EGit repository at Eclipse.</description>
    </item>
    
    <item>
      <title>Self-Study in January 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</link>
      <pubDate>Fri, 01 Jan 2016 16:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</guid>
      <description>Test cases in inner classes with JUnit I&amp;rsquo;ve read this answer in stackoverflow about nested test runners in JUnit
Tags: junit, stackoverflow, answer, nested-runner
Recording a Great Coding Screencast I&amp;rsquo;ve read this article by John Lindquist where he explains how he sets up the recording environment for egghead.
Tags: john-lindquist, record, screencast, egghead, code-screencast, record-video, video
React Testing Course I&amp;rsquo;ve watched the full course by Trevor D. Miller on how to test react components and the libraries to make it possible.</description>
    </item>
    
    <item>
      <title>Self-Study in October 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</link>
      <pubDate>Thu, 01 Oct 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</guid>
      <description>Blazing Fast HTML: Virtual DOM in Elm I&amp;rsquo;ve read this article explaining how Elm works in relation to the virtual DOM. By Evan Czaplicki.
Tags: elm, dom, virtual-dom, comparison, speed, haskell, evan-czaplicki
Why you should never, ever, ever use MongoDB I&amp;rsquo;ve read this article stating the downsides of using MongoDB. Written by Sven Slootweg
Tags: mongodb, downside, sven-slootweg, json, document-store, postgresql, acid
Do you really get classloaders? I&amp;rsquo;ve watched this video by Jevgeny Kabanov on classloaders: what they are, how they work nad some tips to solve common issues.</description>
    </item>
    
    <item>
      <title>Self-study in July 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/</link>
      <pubDate>Wed, 01 Jul 2015 01:08:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/</guid>
      <description>I&amp;rsquo;ve grouped all small posts related to the self-study from July 2015 into a single post
Clojure made simple I&amp;rsquo;ve watched this talk by Rich Hickey at the Java One. It references the talk Easy made simple
 polymorphism without inheritance; single dispatch on the first parameter  Productive pair programming I&amp;rsquo;ve read this article about pair programming, using the driver &amp;amp; copilot technique, written by Carlos Blé
Building Automated REST APIs with Python Investigating QA automation for REST APIs, I&amp;rsquo;ve read these slides about it</description>
    </item>
    
    <item>
      <title>Experience report: Test-driven development intensive, by Jason Gorman</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/12/jason-gorman-tdd-intensive-workshop/</link>
      <pubDate>Sun, 12 Apr 2015 20:13:45 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/12/jason-gorman-tdd-intensive-workshop/</guid>
      <description>This is an experience report on Jason Gorman&amp;rsquo;s &amp;ldquo;Test-driven development intensive workshop&amp;rdquo; on the April 11th, 2015
I attended this training in the Greenfell housing &amp;amp; training in South Wimbledon, London SW19 1JZ. The training spanned from 10:00 to 17:00 with a half an hour for lunch plus three or four 10-15 minute pauses. (7 - ,5 - 4 * 12/60 = ~5.7hours = 5 hours 45 minutes)
Introduction There were 23 of us, including me.</description>
    </item>
    
    <item>
      <title>Kata: Mars Rover in Clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/05/kata-mars-rover-in-clojure/</link>
      <pubDate>Thu, 05 Mar 2015 00:33:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/05/kata-mars-rover-in-clojure/</guid>
      <description>Yesterday at the clojure meetup we1 did the mars rover in clojure and today I&amp;rsquo;ve tried my hand at it again. Original, from the three of us here and my results here
  Jorge Ávila, Jesús Díez and I &amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>Mob programming String calculator kata</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/03/mob-programming-string-calculator-kata/</link>
      <pubDate>Tue, 03 Mar 2015 04:46:48 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/03/mob-programming-string-calculator-kata/</guid>
      <description>Last Friday we did a kata1 using a projector the string calculator 2 using pair programming, TDD and some mob-programming for the last refactoring.
We used a projector (beamer) so everyone could see it. I tried to take really small baby steps but the adding part was done in ~6 cycles3
We&amp;rsquo;ve all learnt about shotcuts, live user templates for the IDE 4, TDD methodology, other ways of tackling the problem, how to refactor as a group, clean code, etc</description>
    </item>
    
    <item>
      <title>Open discussion: On code reviews</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/07/open-discussion-on-code-reviews/</link>
      <pubDate>Sat, 07 Feb 2015 18:54:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/07/open-discussion-on-code-reviews/</guid>
      <description>At a client, I organized an open discussion on code reviews. We had a great conversation.
The main idea was to discuss about it and share the ideas each one had. I didn&amp;rsquo;t want it to turn into a masterclass (see the white belt)
Benefits These are the main benefits we saw in it:
 Increased trust Learning from others, other approaches Less defects, more quality Increased bus factor, decreased information silos Also:  Getting out of your comfort zone Communicating more often (code style, edge cases, complaining, etc)    Pair programming Then we discussed about the topic of code reviews and pair programming:</description>
    </item>
    
    <item>
      <title>Pairing with junior developers</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/03/pairing-with-junior-developers/</link>
      <pubDate>Tue, 03 Feb 2015 23:40:21 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/03/pairing-with-junior-developers/</guid>
      <description>After reading this blog post, here are my thoughts:
WARNING: the post was about how to do it, these reflections are on a more philosophical level
This is a controversial topic, as:
 You cannot discern how much or little the other person knows more than you. I cannot find the reference anymore, but it was a to the tune of &amp;ldquo;once the other person&amp;rsquo;s level is higher than yours, you cannot know how much&amp;rdquo; There are different knowledge areas.</description>
    </item>
    
    <item>
      <title>Bank kata in java</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/22/bank-kata-in-java/</link>
      <pubDate>Thu, 22 Jan 2015 22:52:01 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/22/bank-kata-in-java/</guid>
      <description>Manuel Rivero and I did a subset of the bank kata, proposed by Sandro Mancuso.
We&amp;rsquo;ve used java (mockito, hamcrest, junit), outside-in TDD. The code is spread among several sessions. We have not committed after each step, only at the end of the session.
The source code is on github
You can read Manuel&amp;rsquo;s take on the kata on his blog</description>
    </item>
    
  </channel>
</rss>
