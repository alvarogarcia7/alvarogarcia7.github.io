<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/codurance/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/codurance/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Books read in 2017Q3</title>
      <link>https://alvarogarcia7.github.io/blog/2017/09/30/books-read-2017q3/</link>
      <pubDate>Sat, 30 Sep 2017 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/09/30/books-read-2017q3/</guid>
      <description>&lt;p&gt;Read this quarter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the senior software developer; Copeland, with the &lt;a href=&#34;https://twitter.com/@deaprendices&#34; target=&#34;_blank&#34;&gt;aprendices reading club&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scandal in Bohemia, a; Doyle: a short novel by Sir Arthur Conan Doyle, mentioning Irene Adler and the king of Bohemia&lt;/li&gt;
&lt;li&gt;Getting things done, &amp;hellip;; Allen (+): A book on productivity, where Allen explains his method of GTD and how to apply it. Explains what has worked and not worked for him in his many years of consulting and coaching clients.&lt;/li&gt;
&lt;li&gt;Nature of Software Development, the; Jeffries: Jefrries explains what he sees as &amp;lsquo;the Natural way&amp;rsquo; of software development: agile-based, good technical practices-based, to produce software in an iterative incremental way, with a sustainable pace and not much technical debt.&lt;/li&gt;
&lt;li&gt;Clean Coder: A Code of Conduct for Professional Programmers, the; Martin: a set of principles, values, and practices for the professional programmer (as compared to the 9-5 amateur programmer).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: re+read means I&amp;rsquo;m re-reading this book. The (+) stands for one-or-more times, as in the regexes.&lt;/p&gt;

&lt;!-- copy-paste the books.md here --&gt;

&lt;p&gt;backlog (partially sorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unsorted V&lt;/li&gt;
&lt;li&gt;The Machine That Changed the World: The Story of Lean Production&lt;/li&gt;
&lt;li&gt;Haskell Programming&lt;/li&gt;
&lt;li&gt;Software Architecture in Practice&lt;/li&gt;
&lt;li&gt;The five disfunctions of a team: a leadership fable; Lencioni&lt;/li&gt;
&lt;li&gt;Phoenix project, the ; Kim, Behr, Spafford&lt;/li&gt;
&lt;li&gt;lucha por la desigualdad, la; Pontón; non-technical&lt;/li&gt;
&lt;li&gt;psicología del dinero, la; Hammond; non-technical&lt;/li&gt;
&lt;li&gt;Invirtiendo a largo plazo; García Paramés; non-technical&lt;/li&gt;
&lt;li&gt;Well-Grounded Java Developer, the; own-it&lt;/li&gt;
&lt;li&gt;Quién domina el mundo; Chomsky; non-technical&lt;/li&gt;
&lt;li&gt;Learn You a Haskell for Great Good!; own-it&lt;/li&gt;
&lt;li&gt;camino al 18J, el; Payne; non-technical&lt;/li&gt;
&lt;li&gt;Cartas desde la revolución bolchevique; Sadoul; non-technical&lt;/li&gt;
&lt;li&gt;Java Performance: The Definitive Guide&lt;/li&gt;
&lt;li&gt;Why programmers work at night&lt;/li&gt;
&lt;li&gt;Shogun: The Life of Tokugawa Ieyasu; Sadler; non-technical&lt;/li&gt;
&lt;li&gt;Scrum and XP from the trenches, 2nd edition;&lt;/li&gt;
&lt;li&gt;Els jueus i Catalunya; Villatoro; non-technical&lt;/li&gt;
&lt;li&gt;El problema de los tres cuerpos; Liu; non-technical&lt;/li&gt;
&lt;li&gt;Amazon Web Services in Action; own-it&lt;/li&gt;
&lt;li&gt;Clojure Programming - Practical Lisp for the Java World&lt;/li&gt;
&lt;li&gt;Mature optimization&lt;/li&gt;
&lt;li&gt;XUnit Test Patterns&lt;/li&gt;
&lt;li&gt;Let Over Lambda&lt;/li&gt;
&lt;li&gt;The Haskell Road to Logic, Math and Programming&lt;/li&gt;
&lt;li&gt;Types and Programming Languages&lt;/li&gt;
&lt;li&gt;Fundamentals of Object-oriented Design in UML&lt;/li&gt;
&lt;li&gt;Clojure for the brave and true&lt;/li&gt;
&lt;li&gt;How to Solve It: A New Aspect of Mathematical Method&lt;/li&gt;
&lt;li&gt;Conceptual Mathematics: A First Introduction to Categories&lt;/li&gt;
&lt;li&gt;Understanding Computation: From Simple Machines to Impossible Programs&lt;/li&gt;
&lt;li&gt;Programming in Haskell&lt;/li&gt;
&lt;li&gt;Programming Languages: Application and Interpretation&lt;/li&gt;
&lt;li&gt;Doing Math with Python&lt;/li&gt;
&lt;li&gt;Perfect Software: And Other Illusions about Testing&lt;/li&gt;
&lt;li&gt;Computability and Complexity - From a Programming Perspective&lt;/li&gt;
&lt;li&gt;Thinking Forth: a language and philosophy for solving problems&lt;/li&gt;
&lt;li&gt;Concepts, Techniques, and Models of Computer Programming&lt;/li&gt;
&lt;li&gt;Bridging the Communication Gap; Adzic&lt;/li&gt;
&lt;li&gt;Specification by Example; Adzic&lt;/li&gt;
&lt;li&gt;Cucumber book, the; Adzic&lt;/li&gt;
&lt;li&gt;Software Architecture for Developers; Brown&lt;/li&gt;
&lt;li&gt;Object Design: Roles, Responsibilities, and Collaborations&lt;/li&gt;
&lt;li&gt;RESTful Web APIs&lt;/li&gt;
&lt;li&gt;RESTful Web Services Cookbook&lt;/li&gt;
&lt;li&gt;Building Maintainable Software&lt;/li&gt;
&lt;li&gt;Serverless - Patterns of Modern Application Design Using Microservices (Amazon Web Services Edition)&lt;/li&gt;
&lt;li&gt;A Pattern Language; Alexander&lt;/li&gt;
&lt;li&gt;Types and Programming Languages, TAPL; Pierce; own-it&lt;/li&gt;
&lt;li&gt;Speed Reading Book: Read More, Learn More, Achieve More, the; Buzan&lt;/li&gt;
&lt;li&gt;Cómo crear mapas mentales (Crecimiento personal); Buzan&lt;/li&gt;
&lt;li&gt;First things first; Covey&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s best next; Perman&lt;/li&gt;
&lt;li&gt;problems of philosophy, the; Russell&lt;/li&gt;
&lt;li&gt;Requiem for the American dream; Chomsky&lt;/li&gt;
&lt;li&gt;sun also rises, the; Hemingway&lt;/li&gt;
&lt;li&gt;travels, the; Polo; non-technical&lt;/li&gt;
&lt;li&gt;Homo Deus: A Brief History of Tomorrow; Harari; non-technical&lt;/li&gt;
&lt;li&gt;Books by Aristotle; non-technical&lt;/li&gt;
&lt;li&gt;Books by Plato&lt;/li&gt;
&lt;li&gt;Books by Descartes&lt;/li&gt;
&lt;li&gt;The idea of culture; Eagleton&lt;/li&gt;
&lt;li&gt;Hereditary Intelligence; Galton; non-technical&lt;/li&gt;
&lt;li&gt;Lean Software Development: An Agile Toolkit; Poppendieck&lt;/li&gt;
&lt;li&gt;Peopleware*; De Marco&lt;/li&gt;
&lt;li&gt;Chaos Monkeys: Obscene Fortune and Random Failure; Garcia Martinez&lt;/li&gt;
&lt;li&gt;Implementing Lean Software Development: From Concept to Cash; Poppendieck&lt;/li&gt;
&lt;li&gt;Joel on Software; Spolsky&lt;/li&gt;
&lt;li&gt;Death March; Yourdon&lt;/li&gt;
&lt;li&gt;Psychology of Computer Programming, The; Weinberg&lt;/li&gt;
&lt;li&gt;Introduction to General Systems Thinking; Weinberg&lt;/li&gt;
&lt;li&gt;Lao Tzu : Tao Te Ching : A Book About the Way and the Power of the Way; Tzu, Le Guin; non-technical&lt;/li&gt;
&lt;li&gt;Gay Science, the; Nietzsche; non-technical&lt;/li&gt;
&lt;li&gt;Being Geek; Lopp&lt;/li&gt;
&lt;li&gt;Finance for Freelancers; Retallick&lt;/li&gt;
&lt;li&gt;Object-oriented software engineering: a use case driven approach; Jacobson&lt;/li&gt;
&lt;li&gt;Patterns of Enterprise Application Architecture; Fowler; own-it&lt;/li&gt;
&lt;li&gt;Thinking fast and slow; Kahneman&lt;/li&gt;
&lt;li&gt;Emotional intelligence; Goleman&lt;/li&gt;
&lt;li&gt;Ética a Nicómaco; Aristotle; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Romeo y Julieta; Shakespeare; non-technical&lt;/li&gt;
&lt;li&gt;Computer Systems: A Programmer’s Perspective; Bryant, O&amp;rsquo;Hallaron&lt;/li&gt;
&lt;li&gt;My Journey to Lhasa: The Classic Story of the Only Western Woman Who Succeeded in Entering the Forbidden City; David-Néel; non-technical&lt;/li&gt;
&lt;li&gt;Cathedral and the bazaar, the ; Raymond&lt;/li&gt;
&lt;li&gt;Coding dojo handbook, the; Bache; own-it&lt;/li&gt;
&lt;li&gt;Making software; Oram and Wilson; own-it&lt;/li&gt;
&lt;li&gt;Code complete; McConnell&lt;/li&gt;
&lt;li&gt;Soft skills; Sonmez; own-it&lt;/li&gt;
&lt;li&gt;DSLs in action; Ghosh; own-it&lt;/li&gt;
&lt;li&gt;purely functional data structures; Okasaki; own-it&lt;/li&gt;
&lt;li&gt;Working effectively with unit tests; Fields (+); own-it&lt;/li&gt;
&lt;li&gt;First Nazi, the; Ludendorff&lt;/li&gt;
&lt;li&gt;Greatest story ever told &amp;hellip; so far; Krauss; non-technical&lt;/li&gt;
&lt;li&gt;Master algorithm, the; Domingos; non-technical&lt;/li&gt;
&lt;li&gt;Invention of Science, the; Wootton; non-technical&lt;/li&gt;
&lt;li&gt;Tesla: Inventor of the electrical age; Bernard Carlson; non-technical&lt;/li&gt;
&lt;li&gt;Psychology in minutes; Weeks; non-technical&lt;/li&gt;
&lt;li&gt;Alan Turing: The Enigma; Hodges; non-technical&lt;/li&gt;
&lt;li&gt;How to think more about sex; de Botton; non-technical&lt;/li&gt;
&lt;li&gt;Piccolo manuale di persuasione; Taylor; non-technical&lt;/li&gt;
&lt;li&gt;arte de la guerra, el; Sun Tzu; non-technical&lt;/li&gt;
&lt;li&gt;Piccolo manuale di leadership Confuciana; Adair; non-technical&lt;/li&gt;
&lt;li&gt;How to Stop Worrying and Start Living; Carnegie; non-technical&lt;/li&gt;
&lt;li&gt;Uomo - Guida allo stile; Roetzel; non-technical&lt;/li&gt;
&lt;li&gt;Unwritten Laws of Engineering: Revised and Updated Edition; King&lt;/li&gt;
&lt;li&gt;Test-Driven JavaScript Development (Developer&amp;rsquo;s Library); Johansen&lt;/li&gt;
&lt;li&gt;Test Driven Development: By Example; Beck&lt;/li&gt;
&lt;li&gt;Arquitectura Java JPA Domain Driven Design; Alvárez, Peláez&lt;/li&gt;
&lt;li&gt;End of loyalty, the; Wartzman; non-technical&lt;/li&gt;
&lt;li&gt;Basic Economics; Sowell; non-technical&lt;/li&gt;
&lt;li&gt;Introduction to Economic Analysis; McAfee; non-technical&lt;/li&gt;
&lt;li&gt;Patterns of Software; Gabriel&lt;/li&gt;
&lt;li&gt;Coders at work; Seibel&lt;/li&gt;
&lt;li&gt;Clean architecture; Martin&lt;/li&gt;
&lt;li&gt;How to Be a Stoic: Using Ancient Philosophy to Live a Modern Life; Pigliucci; non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;unfinished (unsorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Release It! - Design and Deploy Production-Ready Software; own-it&lt;/li&gt;
&lt;li&gt;Refactoring (+); Fowler; own-it&lt;/li&gt;
&lt;li&gt;The Leprechauns of Software Engineering; Bossavit (+); own-it&lt;/li&gt;
&lt;li&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software; Vernon (+); own-it&lt;/li&gt;
&lt;li&gt;Pragmatic Thinking and Learning: Refactor Your Wetware; own-it&lt;/li&gt;
&lt;li&gt;Functional Programming Patterns in Scala and Clojure; own-it&lt;/li&gt;
&lt;li&gt;Readings in Database Systems, 5th Edition; own-it&lt;/li&gt;
&lt;li&gt;Structure and Interpretation of Computer Programs (SICP); Abelson, Sussmann, Sussmann; own-it&lt;/li&gt;
&lt;li&gt;La Sociedad De Coste Marginal Cero (Estado y Sociedad); Rifkin; non-technical&lt;/li&gt;
&lt;li&gt;Odisea; Homero; non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;wip (3):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Working Effectively with Legacy Code (+); Feathers; own-it&lt;/li&gt;
&lt;li&gt;Effective Java; Bloch; own-it&lt;/li&gt;
&lt;li&gt;Nonviolent communication; Rosenberg; own-it, non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Senior software developer, the; Copeland; own-it&lt;/li&gt;
&lt;li&gt;Scandal in Bohemia, a; Doyle; own-it&lt;/li&gt;
&lt;li&gt;Getting things done, &amp;hellip;; Allen (+); own-it&lt;/li&gt;
&lt;li&gt;Nature of Software Development, the; Jeffries; own-it&lt;/li&gt;
&lt;li&gt;Team Geek; Fitzpatrick, Collins-Sussman; own-it&lt;/li&gt;
&lt;li&gt;Aprendo Yoga; Van Lysebeth; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Clean Coder: A Code of Conduct for Professional Programmers, the; Martin; own-it&lt;/li&gt;
&lt;li&gt;ML for the working programmer, 2nd edition [5th chapter only]; Paulson; own-it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;lists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/review/list/246177-rob?shelf=non-fiction-for-humans&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/review/list/246177-rob?shelf=non-fiction-for-humans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/451.Best_Philosophy_Book&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/451.Best_Philosophy_Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/8379.Software_Craftsmanship&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/8379.Software_Craftsmanship&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.ycombinator.com/ycs-2017-summer-reading-list/&#34; target=&#34;_blank&#34;&gt;https://blog.ycombinator.com/ycs-2017-summer-reading-list/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/107321.TI2011_Course&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/107321.TI2011_Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/12287.Fog_Creek_Software_Management_Training_Program&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/12287.Fog_Creek_Software_Management_Training_Program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Books read in 2017Q2</title>
      <link>https://alvarogarcia7.github.io/blog/2017/06/30/books-read-2017q2/</link>
      <pubDate>Fri, 30 Jun 2017 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/06/30/books-read-2017q2/</guid>
      <description>&lt;p&gt;(I&amp;rsquo;ve changed how I organize my books. More, here (TODO))&lt;/p&gt;

&lt;p&gt;Finished:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Russell en 90 minutos, Strathern; non-technical. A quick introduction to Bertrand Russell, his life and his way of thinking and seeing the world.&lt;/li&gt;
&lt;li&gt;Homenaje a Cataluña, Orwell; non-technical. A first-person view of the events during the Spanish Civil War (1936-1939), seen from the perspective of a British citizen that went there voluntarily. Explains the internal fracture of the left political parties and the fracture of the Spanish society.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--
You can delete here and below
--&gt;

&lt;p&gt;backlog (partially sorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unsorted V&lt;/li&gt;
&lt;li&gt;The Machine That Changed the World: The Story of Lean Production&lt;/li&gt;
&lt;li&gt;Haskell Programming&lt;/li&gt;
&lt;li&gt;Software Architecture in Practice&lt;/li&gt;
&lt;li&gt;La lucha por la desigualdad&lt;/li&gt;
&lt;li&gt;La psicología del dinero, Hammond&lt;/li&gt;
&lt;li&gt;Invirtiendo a largo plazo, García Paramés&lt;/li&gt;
&lt;li&gt;The Well-Grounded Java Developer&lt;/li&gt;
&lt;li&gt;Quién domina el mundo, Chomsky&lt;/li&gt;
&lt;li&gt;Learn You a Haskell for Great Good!&lt;/li&gt;
&lt;li&gt;El camino al 18J, Payne&lt;/li&gt;
&lt;li&gt;Cartas desde la revolución bolchevique, Sadoul&lt;/li&gt;
&lt;li&gt;Java Performance: The Definitive Guide&lt;/li&gt;
&lt;li&gt;Functional Programming Patterns in Scala and Clojure&lt;/li&gt;
&lt;li&gt;Why programmers work at night&lt;/li&gt;
&lt;li&gt;Shogun: The Life of Tokugawa Ieyasu, Sadler&lt;/li&gt;
&lt;li&gt;Scrum and XP from the trenches, 2nd edition&lt;/li&gt;
&lt;li&gt;Els jueus i Catalunya, Villatoro&lt;/li&gt;
&lt;li&gt;El problema de los tres cuerpos, Liu&lt;/li&gt;
&lt;li&gt;Amazon Web Services in Action&lt;/li&gt;
&lt;li&gt;Clojure Programming - Practical Lisp for the Java World&lt;/li&gt;
&lt;li&gt;Mature optimization&lt;/li&gt;
&lt;li&gt;XUnit Test Patterns&lt;/li&gt;
&lt;li&gt;Let Over Lambda&lt;/li&gt;
&lt;li&gt;The Haskell Road to Logic, Math and Programming&lt;/li&gt;
&lt;li&gt;Types and Programming Languages&lt;/li&gt;
&lt;li&gt;Fundamentals of Object-oriented Design in UML&lt;/li&gt;
&lt;li&gt;Clojure for the brave and true&lt;/li&gt;
&lt;li&gt;How to Solve It: A New Aspect of Mathematical Method&lt;/li&gt;
&lt;li&gt;Conceptual Mathematics: A First Introduction to Categories&lt;/li&gt;
&lt;li&gt;Understanding Computation: From Simple Machines to Impossible Programs&lt;/li&gt;
&lt;li&gt;Programming in Haskell&lt;/li&gt;
&lt;li&gt;Programming Languages: Application and Interpretation&lt;/li&gt;
&lt;li&gt;Doing Math with Python&lt;/li&gt;
&lt;li&gt;Perfect Software: And Other Illusions about Testing&lt;/li&gt;
&lt;li&gt;Computability and Complexity - From a Programming Perspective&lt;/li&gt;
&lt;li&gt;Thinking Forth: a language and philosophy for solving problems&lt;/li&gt;
&lt;li&gt;Concepts, Techniques, and Models of Computer Programming&lt;/li&gt;
&lt;li&gt;Bridging the Communication Gap&lt;/li&gt;
&lt;li&gt;Specification by Example&lt;/li&gt;
&lt;li&gt;The Cucumber book&lt;/li&gt;
&lt;li&gt;Software Architecture for Developers&lt;/li&gt;
&lt;li&gt;Object Design: Roles, Responsibilities, and Collaborations&lt;/li&gt;
&lt;li&gt;RESTful Web APIs&lt;/li&gt;
&lt;li&gt;RESTful Web Services Cookbook&lt;/li&gt;
&lt;li&gt;Building Maintainable Software&lt;/li&gt;
&lt;li&gt;Serverless - Patterns of Modern Application Design Using Microservices (Amazon Web Services Edition)&lt;/li&gt;
&lt;li&gt;A Pattern Language; Alexander&lt;/li&gt;
&lt;li&gt;Types and Programming Languages, TAPL; Pierce&lt;/li&gt;
&lt;li&gt;The Speed Reading Book: Read More, Learn More, Achieve More; Buzan&lt;/li&gt;
&lt;li&gt;Cómo crear mapas mentales (Crecimiento personal); Buzan&lt;/li&gt;
&lt;li&gt;First things first ; covey&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s best next ; perman&lt;/li&gt;
&lt;li&gt;The problems of philosophy; Russell (1998)&lt;/li&gt;
&lt;li&gt;Rèquiem for the American dream ; chomsky&lt;/li&gt;
&lt;li&gt;The sun also rises; Hemingway&lt;/li&gt;
&lt;li&gt;The travels; Marco polo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;unfinished (unsorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Release It! - Design and Deploy Production-Ready Software&lt;/li&gt;
&lt;li&gt;The Leprechauns of Software Engineering; Bossavit (*)&lt;/li&gt;
&lt;li&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software; Vernon (*)&lt;/li&gt;
&lt;li&gt;Pragmatic Thinking and Learning: Refactor Your Wetware&lt;/li&gt;
&lt;li&gt;Readings in Database Systems, 5th Edition&lt;/li&gt;
&lt;li&gt;La Sociedad De Coste Marginal Cero (Estado y Sociedad); Rifkin&lt;/li&gt;
&lt;li&gt;Structure and Interpretation of Computer Programs (SICP); Abelson, Sussmann, Sussmann&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;next (2):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Refactoring (*)&lt;/li&gt;
&lt;li&gt;Working Effectively with Legacy Code (*)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;wip (3):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aprendo Yoga; Van Lysebeth&lt;/li&gt;
&lt;li&gt;Getting things done, &amp;hellip;; Allen (*)&lt;/li&gt;
&lt;li&gt;the senior software developer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Russell en 90 minutos, Strathern&lt;/li&gt;
&lt;li&gt;Homenaje a Cataluña, Orwell&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Books read in 2017Q1</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/31/books-read-in-2017q1/</link>
      <pubDate>Fri, 31 Mar 2017 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/31/books-read-in-2017q1/</guid>
      <description>&lt;p&gt;Books I&amp;rsquo;ve read this quarter&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;Books started, not yet finished (WIP):&lt;/p&gt;

&lt;p&gt;Books I want to finish. Usually come from another quarter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/functional-programming-in-scala&#34; target=&#34;_blank&#34;&gt;Functional Programming in Scala&lt;/a&gt;, by Chiusano and Bjarnason. Doing the exercises with the &lt;a href=&#34;https://twitter.com/@codurance&#34; target=&#34;_blank&#34;&gt;codurance&lt;/a&gt; team&lt;/li&gt;
&lt;li&gt;Gödel, Escher, Bach: An Eternal Golden Braid, Hofstadter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Books that have entered the queue:&lt;/p&gt;

&lt;p&gt;Non-technical that have entered the queue:&lt;/p&gt;

&lt;!--

repository for WIP books:

  * [The Well-Grounded Java Developer](http://www.manning.com/evans/) by Benjamin J. Evans and Martijn Verburg
  * [Learn You a Haskell for Great Good!](http://learnyouahaskell.com/) by Miran Lipovača
  * [Working Effectively with Legacy Code](http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052) by Michael Feathers, again. Blog posts under the tag [wewlc](/categories/wewlc
/)
  * [Haskell Programming](http://haskellbook.com/), By Chris Allen and Julie Moronuki. This book is still in progress and I&#39;m reviewing it
  * [Pragmatic Thinking and Learning: Refactor Your Wetware](https://pragprog.com/book/ahptl/pragmatic-thinking-and-learning) by Andy Hunt  
  
  Books I want to finish:

  * [Refactoring](http://martinfowler.com/books/refactoring.html) by Martin Fowler, with Kent Beck, John Brant, William Opdyke, and Don Roberts
  * [Java Performance: The Definitive Guide](http://shop.oreilly.com/product/0636920028499.do) by Scott Oaks
  * [Scrum and XP from the trenches](http://www.infoq.com/minibooks/scrum-xp-from-the-trenches) by Henrik Kniberg
  * [The Leprechauns of Software Engineering](https://leanpub.com/leprechauns) by Laurent Bossavit, again. [Gift](https://twitter.com/alvarobiz/status/611799849911103488)  
  * [Functional Programming Patterns in Scala and Clojure](https://pragprog.com/book/mbfpp/functional-programming-patterns-in-scala-and-clojure) by Michael Bevilacqua-Linn
  * [Why programmers work at night](https://leanpub.com/nightowls) by Swizec Teller
  * [Readings in Database Systems, 5th Edition](http://www.redbook.io/) by Peter Bailis, Joseph M. Hellerstein, Michael Stonebraker, editors
  * [Domain-Driven Design: Tackling Complexity in the Heart of Software](http://www.amazon.com/exec/obidos/ASIN/0321125215) by Eric Evans, again.
  * [Amazon Web Services in Action](https://www.manning.com/books/amazon-web-services-in-action) by Michael Wittig and Andreas Wittig
  * [Release It! - Design and Deploy Production-Ready Software](https://pragprog.com/book/mnee/release-it), by Michael T. Nygard, with the &#39;[@deAprendices][deaprendices]&#39;s reading club&#39;. Blog posts under the tag [release-it](/categories/release-it
/)
  * [Clojure Programming - Practical Lisp for the Java World](http://shop.oreilly.com/product/0636920013754.do) by Chas Emerick, Brian Carper, Christophe Grand


Books in the queue:

  * [Mature optimization](http://carlos.bueno.org/optimization/mature-optimization.pdf), by Carlos Bueno
  * [XUnit Test Patterns](http://xunitpatterns.com/) by Gerard Meszaros
  * [Let Over Lambda](http://letoverlambda.com/) by Doug Hoyte
  * [The Haskell Road to Logic, Math and Programming](http://fldit-www.cs.uni-dortmund.de/~peter/PS07/HR.pdf) by Kees Doets and Jan van Eijck
  * [Types and Programming Languages](http://www.cis.upenn.edu/~bcpierce/tapl/) by Benjamin C. Pierce
  * [Fundamentals of Object-oriented Design in UML](http://www.amazon.co.uk/dp/020169946X/ref=pe_385721_37038051_TE_3p_dp_1) by Meilir Page-Jones
  * [Clojure for the brave and true](http://www.braveclojure.com/#toc)
  * [How to Solve It: A New Aspect of Mathematical Method](http://press.princeton.edu/titles/669.html) by George Pólya
  * [Conceptual Mathematics: A First Introduction to Categories](http://www.amazon.com/Conceptual-Mathematics-First-Introduction-Categories/dp/052171916X) by Lawvere and Schanuel
  * [Understanding Computation: From Simple Machines to Impossible Programs](http://computationbook.com/) by Tom Stuart
  * [Programming in Haskell](http://www.cambridge.org/wm-ecommerce-web/academic/landingPage/PIHMOOC) by Graham Hutton
  * [Programming Languages: Application and Interpretation](http://cs.brown.edu/~sk/Publications/Books/ProgLangs/2007-04-26/) by Shriram Krishnamurthi
  * [Doing Math with Python](https://www.nostarch.com/doingmathwithpython) by Amit Saha. [Gift from the PyConEs 2015](https://twitter.com/alvarobiz/status/668927802159288322)
  * [Perfect Software: And Other Illusions about Testing](http://www.geraldmweinberg.com/Site/Perfect_Software.html) by Gerald M. Weinberg  
  * [Computability and Complexity - From a Programming Perspective](https://mitpress.mit.edu/books/computability-and-complexity) by Neil Deaton Jones
  * [Thinking Forth: a language and philosophy for solving problems](http://thinking-forth.sourceforge.net/) by Leo Brodie
  * [Concepts, Techniques, and Models of Computer Programming](https://mitpress.mit.edu/index.php?q=books/concepts-techniques-and-models-computer-programming) by Peter Van Roy and Seif Haridi
  * [Bridging the Communication Gap](http://books.gojko.net/bridging-the-communication-gap/) by Gojko Adzic
  * [Specification by Example](http://books.gojko.net/specification-by-example/) by Gojko Adzic
  * [The Cucumber book](https://pragprog.com/book/hwcuc/the-cucumber-book) by Matt Wynne and Aslak Hellesøy
  * [Software Architecture for Developers](https://leanpub.com/software-architecture-for-developers) by Simon Brown
  * [Object Design: Roles, Responsibilities, and Collaborations ](http://www.amazon.com/Object-Design-Roles-Responsibilities-Collaborations/dp/0201379430) by Rebecca Wirfs-Brock and Alan McKean
  * [RESTful Web APIs](http://shop.oreilly.com/product/0636920028468.do) by Leonard Richardson, Mike Amundsen, Sam Ruby
  * [RESTful Web Services Cookbook](http://shop.oreilly.com/product/9780596801694.do) by Subbu Allamaraju
  * [Building Maintainable Software](https://www.sig.eu/en/building-maintainable-software) by Joost Visser
  * [Serverless - Patterns of Modern Application Design Using Microservices (Amazon Web Services Edition)](https://leanpub.com/serverless) by Obie Fernandez 

Non-technical books in the queue:

  - La psicología del dinero, Hammond
  - Invirtiendo a largo plazo, García Paramés
  - Quién domina el mundo, Chomsky
  - Homenaje a Cataluña, Orwell
  - El camino al 18J, Payne
  - Cartas desde la revolución bolchevique, Sadoul
  - Shogun: The Life of Tokugawa Ieyasu, Sadler
  - Els jueus i Catalunya, Villatoro
  - Russell en 90 minutos, Strathern
  - El problema de los tres cuerpos, Liu

Learning paths that have entered the queue:

  * [Software Architecture Fundamentals](http://shop.oreilly.com/category/learning-path/software-architecture-fundamentals.do)
  * [HTML5 Fundamentals](http://shop.oreilly.com/category/learning-path/html5-fundamentals.do)
  * [Designing Web APIs](http://shop.oreilly.com/category/learning-path/designing-web-apis.do)
  * [Dive Deeper into PHP Programming](http://shop.oreilly.com/category/learning-path/dive-deeper-php-programming.do)
  * [Introduction to the Modern Front-End Web](http://shop.oreilly.com/category/learning-path/intro-modern-front-end-web.do)

--&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;The ending date of the quarter is the same as the publication date
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Books read in 2016Q4</title>
      <link>https://alvarogarcia7.github.io/blog/2016/12/31/books-read-in-2016q4/</link>
      <pubDate>Sat, 31 Dec 2016 12:49:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/12/31/books-read-in-2016q4/</guid>
      <description>&lt;p&gt;Books I&amp;rsquo;ve read this quarter&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;Books started, not yet finished (WIP):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/functional-programming-in-scala&#34; target=&#34;_blank&#34;&gt;Functional Programming in Scala&lt;/a&gt;, by Chiusano and Bjarnason. Doing the exercises with the &lt;a href=&#34;https://twitter.com/@codurance&#34; target=&#34;_blank&#34;&gt;codurance&lt;/a&gt; team&lt;/li&gt;
&lt;li&gt;Gödel, Escher, Bach: An Eternal Golden Braid, Hofstadter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Books I want to finish. Usually come from another quarter:&lt;/p&gt;

&lt;p&gt;Books that have entered the queue:&lt;/p&gt;

&lt;p&gt;Non-technical that have entered the queue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La psicología del dinero, Hammond&lt;/li&gt;
&lt;li&gt;Invirtiendo a largo plazo, García Paramés&lt;/li&gt;
&lt;li&gt;Quién domina el mundo, Chomsky&lt;/li&gt;
&lt;li&gt;Homenaje a Cataluña, Orwell&lt;/li&gt;
&lt;li&gt;El camino al 18J, Payne&lt;/li&gt;
&lt;li&gt;Cartas desde la revolución bolchevique, Sadoul&lt;/li&gt;
&lt;li&gt;Shogun: The Life of Tokugawa Ieyasu, Sadler&lt;/li&gt;
&lt;li&gt;Els jueus i Catalunya, Villatoro&lt;/li&gt;
&lt;li&gt;Russell en 90 minutos, Strathern&lt;/li&gt;
&lt;li&gt;El problema de los tres cuerpos, Liu&lt;/li&gt;
&lt;/ul&gt;

&lt;!--

repository for WIP books:

  * [The Well-Grounded Java Developer](http://www.manning.com/evans/) by Benjamin J. Evans and Martijn Verburg
  * [Learn You a Haskell for Great Good!](http://learnyouahaskell.com/) by Miran Lipovača
  * [Working Effectively with Legacy Code](http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052) by Michael Feathers, again. Blog posts under the tag [wewlc](/categories/wewlc
/)
  * [Haskell Programming](http://haskellbook.com/), By Chris Allen and Julie Moronuki. This book is still in progress and I&#39;m reviewing it
  * [Pragmatic Thinking and Learning: Refactor Your Wetware](https://pragprog.com/book/ahptl/pragmatic-thinking-and-learning) by Andy Hunt  
  
  Books I want to finish:

  * [Refactoring](http://martinfowler.com/books/refactoring.html) by Martin Fowler, with Kent Beck, John Brant, William Opdyke, and Don Roberts
  * [Java Performance: The Definitive Guide](http://shop.oreilly.com/product/0636920028499.do) by Scott Oaks
  * [Scrum and XP from the trenches](http://www.infoq.com/minibooks/scrum-xp-from-the-trenches) by Henrik Kniberg
  * [The Leprechauns of Software Engineering](https://leanpub.com/leprechauns) by Laurent Bossavit, again. [Gift](https://twitter.com/alvarobiz/status/611799849911103488)  
  * [Functional Programming Patterns in Scala and Clojure](https://pragprog.com/book/mbfpp/functional-programming-patterns-in-scala-and-clojure) by Michael Bevilacqua-Linn
  * [Why programmers work at night](https://leanpub.com/nightowls) by Swizec Teller
  * [Readings in Database Systems, 5th Edition](http://www.redbook.io/) by Peter Bailis, Joseph M. Hellerstein, Michael Stonebraker, editors
  * [Domain-Driven Design: Tackling Complexity in the Heart of Software](http://www.amazon.com/exec/obidos/ASIN/0321125215) by Eric Evans, again.
  * [Amazon Web Services in Action](https://www.manning.com/books/amazon-web-services-in-action) by Michael Wittig and Andreas Wittig
  * [Release It! - Design and Deploy Production-Ready Software](https://pragprog.com/book/mnee/release-it), by Michael T. Nygard, with the &#39;[@deAprendices][deaprendices]&#39;s reading club&#39;. Blog posts under the tag [release-it](/categories/release-it
/)
  * [Clojure Programming - Practical Lisp for the Java World](http://shop.oreilly.com/product/0636920013754.do) by Chas Emerick, Brian Carper, Christophe Grand


Books in the queue:

  * [Mature optimization](http://carlos.bueno.org/optimization/mature-optimization.pdf), by Carlos Bueno
  * [XUnit Test Patterns](http://xunitpatterns.com/) by Gerard Meszaros
  * [Let Over Lambda](http://letoverlambda.com/) by Doug Hoyte
  * [The Haskell Road to Logic, Math and Programming](http://fldit-www.cs.uni-dortmund.de/~peter/PS07/HR.pdf) by Kees Doets and Jan van Eijck
  * [Types and Programming Languages](http://www.cis.upenn.edu/~bcpierce/tapl/) by Benjamin C. Pierce
  * [Fundamentals of Object-oriented Design in UML](http://www.amazon.co.uk/dp/020169946X/ref=pe_385721_37038051_TE_3p_dp_1) by Meilir Page-Jones
  * [Clojure for the brave and true](http://www.braveclojure.com/#toc)
  * [How to Solve It: A New Aspect of Mathematical Method](http://press.princeton.edu/titles/669.html) by George Pólya
  * [Conceptual Mathematics: A First Introduction to Categories](http://www.amazon.com/Conceptual-Mathematics-First-Introduction-Categories/dp/052171916X) by Lawvere and Schanuel
  * [Understanding Computation: From Simple Machines to Impossible Programs](http://computationbook.com/) by Tom Stuart
  * [Programming in Haskell](http://www.cambridge.org/wm-ecommerce-web/academic/landingPage/PIHMOOC) by Graham Hutton
  * [Programming Languages: Application and Interpretation](http://cs.brown.edu/~sk/Publications/Books/ProgLangs/2007-04-26/) by Shriram Krishnamurthi
  * [Doing Math with Python](https://www.nostarch.com/doingmathwithpython) by Amit Saha. [Gift from the PyConEs 2015](https://twitter.com/alvarobiz/status/668927802159288322)
  * [Perfect Software: And Other Illusions about Testing](http://www.geraldmweinberg.com/Site/Perfect_Software.html) by Gerald M. Weinberg  
  * [Computability and Complexity - From a Programming Perspective](https://mitpress.mit.edu/books/computability-and-complexity) by Neil Deaton Jones
  * [Thinking Forth: a language and philosophy for solving problems](http://thinking-forth.sourceforge.net/) by Leo Brodie
  * [Concepts, Techniques, and Models of Computer Programming](https://mitpress.mit.edu/index.php?q=books/concepts-techniques-and-models-computer-programming) by Peter Van Roy and Seif Haridi
  * [Bridging the Communication Gap](http://books.gojko.net/bridging-the-communication-gap/) by Gojko Adzic
  * [Specification by Example](http://books.gojko.net/specification-by-example/) by Gojko Adzic
  * [The Cucumber book](https://pragprog.com/book/hwcuc/the-cucumber-book) by Matt Wynne and Aslak Hellesøy
  * [Software Architecture for Developers](https://leanpub.com/software-architecture-for-developers) by Simon Brown
  * [Object Design: Roles, Responsibilities, and Collaborations ](http://www.amazon.com/Object-Design-Roles-Responsibilities-Collaborations/dp/0201379430) by Rebecca Wirfs-Brock and Alan McKean
  * [RESTful Web APIs](http://shop.oreilly.com/product/0636920028468.do) by Leonard Richardson, Mike Amundsen, Sam Ruby
  * [RESTful Web Services Cookbook](http://shop.oreilly.com/product/9780596801694.do) by Subbu Allamaraju
  * [Building Maintainable Software](https://www.sig.eu/en/building-maintainable-software) by Joost Visser
  * [Serverless - Patterns of Modern Application Design Using Microservices (Amazon Web Services Edition)](https://leanpub.com/serverless) by Obie Fernandez 

Learning paths that have entered the queue:

  * [Software Architecture Fundamentals](http://shop.oreilly.com/category/learning-path/software-architecture-fundamentals.do)
  * [HTML5 Fundamentals](http://shop.oreilly.com/category/learning-path/html5-fundamentals.do)
  * [Designing Web APIs](http://shop.oreilly.com/category/learning-path/designing-web-apis.do)
  * [Dive Deeper into PHP Programming](http://shop.oreilly.com/category/learning-path/dive-deeper-php-programming.do)
  * [Introduction to the Modern Front-End Web](http://shop.oreilly.com/category/learning-path/intro-modern-front-end-web.do)


--&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;The ending date of the quarter is the same as the publication date
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in March 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</link>
      <pubDate>Wed, 02 Mar 2016 12:58:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</guid>
      <description>

&lt;h2 id=&#34;learning-programming-isn-t-that-hard-deep-work-is-hard&#34;&gt;Learning Programming Isn’t That Hard, Deep Work Is Hard&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@benedictfritz/learning-programming-isn-t-that-hard-deep-work-is-hard-40a4cf3104f4&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Benedict Fritz on two types of work (i.e., deep and shallow) and how programming is of the deep type. He links the difficulty of learning to program to the difficulty of practicing deep work.&lt;/p&gt;

&lt;p&gt;Tags: analogy, benedict-fritz, deep-work, shallow-work, learn-to-program, psychology&lt;/p&gt;

&lt;h2 id=&#34;becodeweek-by-yeray-darias&#34;&gt;BeCodeWeek by Yeray Darias&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://developerscookbook.blogspot.com.es/search/label/desk-surfing&#34; target=&#34;_blank&#34;&gt;this category of posts&lt;/a&gt; by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.&lt;/p&gt;

&lt;p&gt;Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc&lt;/p&gt;

&lt;p&gt;Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis&lt;/p&gt;

&lt;h2 id=&#34;becodeweek-by-yeray-darias-1&#34;&gt;BeCodeWeek by Yeray Darias&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://developerscookbook.blogspot.com.es/search/label/desk-surfing&#34; target=&#34;_blank&#34;&gt;this category of posts&lt;/a&gt; by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.&lt;/p&gt;

&lt;p&gt;Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc&lt;/p&gt;

&lt;p&gt;Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis&lt;/p&gt;

&lt;h2 id=&#34;tracer-bullets&#34;&gt;Tracer Bullets&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://c2.com/cgi/wiki?TracerBullets&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt; about tracer bullets, an analogy from the military warfare to a software project.&lt;/p&gt;

&lt;p&gt;Serves the purpose of adjusting the aim of the cannon to better reach the target.&lt;/p&gt;

&lt;p&gt;Tags: analogy, metaphor, warfare, management&lt;/p&gt;

&lt;h2 id=&#34;cohesion-the-cornerstone-of-software-design&#34;&gt;Cohesion - the cornerstone of software design&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://codurance.com/2016/03/03/cohesion-cornerstone-software-design/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sandro Mancuso on the topic of cohesion. Describes the 7 types of cohesion, as described in Structured Design&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, from worst to best:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coincidental cohesion&lt;/li&gt;
&lt;li&gt;Logical cohesion&lt;/li&gt;
&lt;li&gt;Temporal cohesion&lt;/li&gt;
&lt;li&gt;Procedural cohesion&lt;/li&gt;
&lt;li&gt;Communicational/informational cohesion&lt;/li&gt;
&lt;li&gt;Sequential cohesion&lt;/li&gt;
&lt;li&gt;Functional cohesion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and about Design-Level Cohesion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coincidental relation (R1)&lt;/li&gt;
&lt;li&gt;Conditional relation (R2)&lt;/li&gt;
&lt;li&gt;Iterative relation (R3)&lt;/li&gt;
&lt;li&gt;Communication relation (R4)&lt;/li&gt;
&lt;li&gt;Sequential relation (R5)&lt;/li&gt;
&lt;li&gt;Functional (R6)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: cohesion, codurance, edward-yourdon, larry-constantine, list, sandro-mancuso, software-design, design-level-cohesion, smc-cohesion, dlc-cohesion&lt;/p&gt;

&lt;h2 id=&#34;etsy-cto-q-a-we-need-software-engineers-not-developers&#34;&gt;Etsy CTO Q&amp;amp;A: We Need Software Engineers, Not Developers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/etsy-cto-qa-need-software-engineers-not-developers/&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt; with John Allspaw, where they explain the onboarding experience for new hires at Etsy, the DevOps philosophy and the need for engineering skills, more than developer skills. This can be exemplified in the need to know more, defining the boundaries of your job and finding the right tool for the job.&lt;/p&gt;

&lt;p&gt;Tags: devops, interview, q-and-a, john-allspaw, etsy, onboarding, hire, team-management, deploy&lt;/p&gt;

&lt;h2 id=&#34;frequency-reduces-difficulty&#34;&gt;Frequency Reduces Difficulty&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://martinfowler.com/bliki/FrequencyReducesDifficulty.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Martin Fowler on why we should repeat things that are difficult for us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perfectioning the technique&lt;/li&gt;
&lt;li&gt;Internalizing the details&lt;/li&gt;
&lt;li&gt;Easing its automation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: martin-fowler, automation, process, perfection, internalizing, technique, detail, process-theory, agile&lt;/p&gt;

&lt;h2 id=&#34;lambdas-are-confusing&#34;&gt;Lambdas are confusing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this video where Coman Hamilton from JAXenter interviews Dr. Heinz Kabutz about Java&amp;rsquo;s lambda syntax. Cites the problem with exceptions, generics, method overloading.&lt;/p&gt;

&lt;p&gt;Tags: java, lambda, coman-hamilton, jaxenter, heinz-kabutz, problem&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WcHom1eVhi4&amp;amp;feature=youtu.be&#34; target=&#34;_blank&#34;&gt;https://www.youtube.com/watch?v=WcHom1eVhi4&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;el-full-stack-developer-en-2016&#34;&gt;El full-stack developer en 2016&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.developerdepueblo.com/development/full-stack-developer-2016/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jose Ignacio Andrés about the job descriptions of 2016.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;El principal valor de un full-stack es poder simplificar el trabajo a los demás miembros del equipo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My translation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The main value of a full-stack developer is to be able to simplify other teammates&amp;rsquo; work&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: teamwork, teammate, fullstack, simplification, work, team-management, jose andres&lt;/p&gt;

&lt;h2 id=&#34;i-am-a-software-craftsman&#34;&gt;I am a software craftsman&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.dirv.me/i-am-a-software-craftsman/index.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Daniel Irvine about calling yourself a craftsman or not. He says that if you adhere to their values, you should.&lt;/p&gt;

&lt;p&gt;Tags: craftsmanship, label, daniel-irvine, craftsman, group-belonging&lt;/p&gt;

&lt;h2 id=&#34;teaching-programming-languages-in-a-post-linnaean-age&#34;&gt;Teaching Programming Languages in a Post-Linnaean Age&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://cs.brown.edu/~sk/Publications/Papers/Published/sk-teach-pl-post-linnaean/paper.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; by Shriram Krishnamurthi where he explains the need for books like &lt;a href=&#34;http://www.plai.org/&#34; target=&#34;_blank&#34;&gt;PLAI&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lack of paradigms in new languages, and its separation (or lack of)&lt;/li&gt;
&lt;li&gt;design of languages cheaper and cheaper these days&lt;/li&gt;
&lt;li&gt;rigor level in publications&lt;/li&gt;
&lt;li&gt;inductive and deductive learning
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;post-Linnaean&lt;/code&gt; refers to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Carl_Linnaeus&#34; target=&#34;_blank&#34;&gt;Carl Linnaeus&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;He is known as the father of modern taxonomy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: inductive-learning, deductive-learning, dsl, domain-specific-language, type-soundness, continuation-style, garbage-collection, reactive-programming, scheme, plai, teaching, programming-language, shriram-krishnamurthi&lt;/p&gt;

&lt;h2 id=&#34;lazy-ruby&#34;&gt;Lazy Ruby&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://sonnym.github.io/2014/04/05/lazy-ruby/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by sonnym about using ruby&amp;rsquo;s lazy (non-strict) features, detailing an example with Fibonacci&amp;rsquo;s sequence.&lt;/p&gt;

&lt;p&gt;Tags: laziness, strictness, non-strictness, ruby, fibonacci, comparison&lt;/p&gt;

&lt;h2 id=&#34;jessica-livingston&#34;&gt;Jessica Livingston&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://paulgraham.com/jessica.html&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Paul Graham about his co-founder at the Y-combinator: Jessica Livingston. She was considered the Social Radar at YC&lt;/p&gt;

&lt;p&gt;The essay also talks about the non-existent separation between working hours and not and about her implication and personality.&lt;/p&gt;

&lt;p&gt;Tags: jessica-livingston, paul-graham, y-combinator, feminism, yc, essay&lt;/p&gt;

&lt;h2 id=&#34;four-laws-of-software-economics-part-1&#34;&gt;Four Laws Of Software Economics (Part 1)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@RichMironov/four-laws-of-software-economics-part-1-e162aa0ea9e5&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Rich Mironov on why the development team will never be big enough (because of economics, because there are more things to be done than time to do them, so we have to prioritize them) and about the communication problems between the dev team and the client(s).&lt;/p&gt;

&lt;p&gt;Also talks about the general personality of clients and devs and task prioritization&lt;/p&gt;

&lt;p&gt;Tags: exclusive-or, magical-thinking, tnstaafl, management, agile, team, capacity, death-march, estj, intp, software-economics, product-strategy, law-of-ruthless-prioritization, law, rich-mironov, slack, myers-briggs-type&lt;/p&gt;

&lt;h2 id=&#34;you-should-take-a-codecation&#34;&gt;You Should Take A Codecation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://robots.thoughtbot.com/you-should-take-a-codecation&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ben Orenstein explaining what is a codecation and what he&amp;rsquo;s done in the two codecations he&amp;rsquo;s taken.&lt;/p&gt;

&lt;p&gt;Tags: codecation, ben-orenstein, vacation, holiday, coding, shipping, in-company&lt;/p&gt;

&lt;h2 id=&#34;giving-up-on-tdd&#34;&gt;Giving Up on TDD&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://iansommerville.com/systems-software-and-technology/giving-up-on-test-first-development/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ian Sommerville about the problems he&amp;rsquo;s found while doing TDD, mainly about design, but also about being conservative in the amount of tests you allow yourself to break while refactoring.&lt;/p&gt;

&lt;p&gt;Tags: tdd, ian-sommerville, refactoring, problem, design-problem, design, giving-up-tdd&lt;/p&gt;

&lt;h2 id=&#34;giving-up-on-tdd-answer&#34;&gt;Giving Up on TDD - answer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.cleancoder.com/uncle-bob/2016/03/19/GivingUpOnTDD.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Robert C. Martin on the common issues for people adopting TDD:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Fragile Test Problem&lt;/li&gt;
&lt;li&gt;The Design Problem&lt;/li&gt;
&lt;li&gt;The Testable Design Problem&lt;/li&gt;
&lt;li&gt;The Magic Bullet Problem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article is an answer to another by Ian Sommerville.&lt;/p&gt;

&lt;p&gt;Tags: tdd, uncle-bob, robert-martin, adoption, ian-sommerville, fragile-test-problem, giving-up-tdd, design-problem, testable-design-problem, magic-bullet-problem&lt;/p&gt;

&lt;h2 id=&#34;seek-out-jobs-with-fast-learning-cycles&#34;&gt;Seek out jobs with fast learning cycles&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@sarahtavel/seek-out-jobs-with-fast-learning-cycles-f923c8d8a4be#.7bxx65a4x&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sarah Tavel on learning on the job and how fast these learning cycles can happen at companies at different stages of maturity.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So if you’re thinking of changing jobs, or taking your first, my advice: find a place with a fast learning cycle, and a steep learning curve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: learning, job, hypothesis, sarah-tavel, learning-cycle, maturity-level, learning-process, product-management&lt;/p&gt;

&lt;h2 id=&#34;clean-code-vs-implementation-patterns&#34;&gt;Clean Code Vs. Implementation Patterns&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.xebia.com/clean-code-vs-implementation-patterns/&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; of Clean Code vs Implementation Pattern books, by Vincent Partington.&lt;/p&gt;

&lt;p&gt;In it, the author explains the differences in style in both books, and how they compare to others.&lt;/p&gt;

&lt;p&gt;Tags: clean-code, implementation-patterns, comparison, book-review, book-comparison, vincent-partington&lt;/p&gt;

&lt;h2 id=&#34;stuck-in-traffic-vlog-103-new-spammer-techniques&#34;&gt;Stuck in Traffic vlog #103 - New Spammer Techniques&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.peerlyst.com/posts/stuck-in-traffic-vlog-103-new-spammer-techniques-j-wolfgang-goerlich&#34; target=&#34;_blank&#34;&gt;this vlog entry&lt;/a&gt; on machines fighting machines (exemplified with the spam producing and filtering) and how some spammers are trying more direct techniques focusing on higher-value targets, sometimes even handcrafting messages and modifying them every few units.&lt;/p&gt;

&lt;p&gt;Tags: wolfgang-goerlich, spam, vlog, spammer, machine-learning&lt;/p&gt;

&lt;h2 id=&#34;becoming-a-finisher&#34;&gt;Becoming A Finisher&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://christopherdbui.com/becoming-a-finisher/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Christopher Bui where he explains that projects that are too ambitious stall your productivity and make you lose your focus.&lt;/p&gt;

&lt;p&gt;Tags: christopher-bui, pomodoro, time-management, productivity, motivation, ambition, paul-graham, quote&lt;/p&gt;

&lt;h2 id=&#34;hanging-around-with-red-black-tree-implementations-the-beginnings&#34;&gt;Hanging around with red-black tree implementations: the beginnings&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.fraixed.es/post/hanging-around-red-black-trees-implementations/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ivan Fraixedes where he details the progress of implementing a red-black tree, and also his motivation for doing it.&lt;/p&gt;

&lt;p&gt;Tags: ivan-fraixedes, red-black-tree, abstract-data-structure, adt, deliberate-practice, pet-project&lt;/p&gt;

&lt;h2 id=&#34;some-tools-for-faster-blogging-in-octopress&#34;&gt;Some Tools for Faster Blogging in Octopress&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://dgmstuart.github.io/blog/2015/03/27/some-tools-for-faster-blogging-in-octopress/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; for tips and tricks on how to blog faster with octopress. Written by Duncan Stuart.&lt;/p&gt;

&lt;p&gt;Tags: duncan-stuart, blog, improvement, meta, octopress, tip-and-trick&lt;/p&gt;

&lt;h2 id=&#34;the-veil-of-ignorance&#34;&gt;The veil of ignorance&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mrmrs.io/writing/2016/03/23/the-veil-of-ignorance/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Adam Morse on how not being on the top of the skills performance can affect your design and your user experience. Also, references the concept of &amp;ldquo;The Veil of Ignorance&amp;rdquo;, a concept by John Rawls.&lt;/p&gt;

&lt;p&gt;Tags: john-rawls, veil-of-ignorance, user-experience, design&lt;/p&gt;

&lt;h2 id=&#34;to-smile-again-recovering-from-the-paralysis-of-burnout&#34;&gt;To Smile Again &amp;ndash; Recovering from the paralysis of burnout&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://m.signalvnoise.com/to-smile-again-ae0ba9f2198c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jamis Buck on his story of burnout, what symptoms had on him and how he got out of it.&lt;/p&gt;

&lt;p&gt;Tags: burnout, jamis-buck, psychology, productivity, personal, story, analogy&lt;/p&gt;

&lt;h2 id=&#34;beyond-email-could-startup-slack-change-the-way-you-work&#34;&gt;Beyond email: could startup Slack change the way you work?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.theguardian.com/technology/2016/mar/25/slack-butterfield-emoji-chat-nasa-harvard-silicon-valley&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on Slack&amp;rsquo;s office culture, with their diversity, policies and values after a high people growth in a short period of time. By Jemima Kiss&lt;/p&gt;

&lt;p&gt;Tags: culture, office-culture, slack, jemima-kiss&lt;/p&gt;

&lt;h2 id=&#34;slack-work-this-way&#34;&gt;Slack: Work This Way&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@iaintait/slack-work-this-way-9221284472dd&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, a response to my above read, about the office culture at Slack.&lt;/p&gt;

&lt;p&gt;Tags: iain-tait, response, slack, office-culture&lt;/p&gt;

&lt;h2 id=&#34;bem-101&#34;&gt;BEM 101&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://css-tricks.com/bem-101/&#34; target=&#34;_blank&#34;&gt;this introduction&lt;/a&gt; to a CSS style called Block, Element, Modifier methodology (BEM).&lt;/p&gt;

&lt;p&gt;In it,&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;a block is a top-level abstraction of a new component&lt;/li&gt;
&lt;li&gt;Child items, or elements, can be placed inside and these are denoted by two underscores following the name of the block [&amp;hellip;].
modifiers can manipulate the block so that we can theme or style that particular component without inflicting changes on a completely unrelated module. This is done by appending two hyphens to the name of the block [&amp;hellip;].&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;By Joe Richardson, Robin Rendle et al.&lt;/p&gt;

&lt;p&gt;Tags: joe-richardson, robin-rendle, bem, css, css-methodology, introduction, css-architecture, sass&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Structured Design: Fundamentals of a Discipline of Computer Program and Systems Design by Yourdon and Constantine.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>