<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/google/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/google/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in August 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/08/01/self-study-august-2017/</link>
      <pubDate>Tue, 01 Aug 2017 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/08/01/self-study-august-2017/</guid>
      <description>

&lt;h2 id=&#34;how-i-ended-up-paying-150-for-a-single-60gb-download-from-amazon-glacier-https-medium-com-karppinen-how-i-ended-up-paying-150-for-a-single-60gb-download-from-amazon-glacier-6cb77b288c3e&#34;&gt;&lt;a href=&#34;https://medium.com/@karppinen/how-i-ended-up-paying-150-for-a-single-60gb-download-from-amazon-glacier-6cb77b288c3e&#34; target=&#34;_blank&#34;&gt;How I ended up paying $150 for a single 60GB download from Amazon Glacier&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Marko Karppinen that explains how a mistake in understanding the pricing model of AWS Glacier cost 150$ instead of the expected 0.86$&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When cloud providers use uncommon and/or unpredictable pricing models, even your informed hunch about the cost can be off by several orders of magnitude, like the price differential between an iPad and a Ferrari.&lt;/p&gt;

&lt;p&gt;The only way to avoid this is by reading, very carefully, through the laughably long passages of meandering technical trivia that constitute the Glacier FAQ or, indeed, this Medium post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: quote, glacier, amazon, aws, amazon-web-service, marko-karppinen&lt;/p&gt;

&lt;h2 id=&#34;debian-9-stretch-released-https-www-debian-org-news-2017-20170617&#34;&gt;&lt;a href=&#34;https://www.debian.org/News/2017/20170617&#34; target=&#34;_blank&#34;&gt;Debian 9 Stretch released&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the release notes for Debian 9 &amp;ldquo;Stretch&amp;rdquo;. By the Debian team&lt;/p&gt;

&lt;p&gt;Tags: debian, release-note, stretch, linux, distribution, distro&lt;/p&gt;

&lt;h2 id=&#34;why-we-re-betting-against-real-time-team-messaging-https-blog-doist-com-why-were-betting-against-real-time-team-messaging-521804a3da09&#34;&gt;&lt;a href=&#34;https://blog.doist.com/why-were-betting-against-real-time-team-messaging-521804a3da09&#34; target=&#34;_blank&#34;&gt;Why we’re betting against real-time team messaging &lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Amir Salihefendic on why they have created a tool for online async communication, where the online presence icon is disabled and communications happen around threads.&lt;/p&gt;

&lt;p&gt;Trying to transform the online (from real-time to async) communications to leave spaces for deep work.&lt;/p&gt;

&lt;p&gt;Tags: amir-salihefendic, deep-work, todoist, doist, twist, app, slack, online-communication, communication, productivity, async, real-time, work, chat&lt;/p&gt;

&lt;h2 id=&#34;crypto-tokens-a-breakthrough-in-open-network-design-https-medium-com-cdixon-crypto-tokens-a-breakthrough-in-open-network-design-e600975be2ef&#34;&gt;&lt;a href=&#34;https://medium.com/@cdixon/crypto-tokens-a-breakthrough-in-open-network-design-e600975be2ef&#34; target=&#34;_blank&#34;&gt;Crypto Tokens: A Breakthrough in Open Network Design&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Chris Dixon that explains what is a crypto currency, what is a smart contract and how this can revolutionize the market.&lt;/p&gt;

&lt;p&gt;Also explains public vs private networks and tokens&lt;/p&gt;

&lt;p&gt;Tags: chris-dixon, public-network, private-network, token, ethereum, bitcoin, cryptocurrency, contract, smart-contract, miner, mining, comparison&lt;/p&gt;

&lt;h2 id=&#34;jsx-vs-clojurescript-the-showdown-http-ingesolvoll-github-io-2017-06-22-plain-react-vs-reagent-html&#34;&gt;&lt;a href=&#34;http://ingesolvoll.github.io/2017/06/22/plain-react-vs-reagent.html&#34; target=&#34;_blank&#34;&gt;JSX vs Clojurescript: the showdown&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article comparing the Reagent vs React (clojurescript vs javascript), going into details for both technologies. By Inge Solvoll&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Conclusion: Code vs Data&lt;/p&gt;

&lt;p&gt;Hopefully I managed to show you a few things that Reagent brings to the table:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Concise and compact&lt;/li&gt;
&lt;li&gt;Creating functional style components is super easy&lt;/li&gt;
&lt;li&gt;Immutable data is the default&lt;/li&gt;
&lt;li&gt;But the thing that fundamentally separates it from React/JSX is the data focus.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSX creates instructions: React.createElement(&amp;lsquo;div&amp;rsquo;).
Reagent creates data structures: [:div].
The former is opaque, hard to inspect at runtime. The latter is highly transparent, and easily inspectable in more than one way.&lt;/p&gt;

&lt;p&gt;Your app is declared using nothing but pure data, using nothing but plain functions to manipulate the data. The very rich Clojure standard library with functions like map, filter and reduce at your disposal, without any funky new syntax to learn.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: clojurescript, comparison, javascript, react, reagent, om, cljs, js, inge-solvoll&lt;/p&gt;

&lt;h2 id=&#34;iot-goes-nuclear-creating-a-zigbee-chain-reaction-https-blog-acolyer-org-2017-06-22-iot-goes-nuclear-creating-a-zigbee-chain-reaction&#34;&gt;&lt;a href=&#34;https://blog.acolyer.org/2017/06/22/iot-goes-nuclear-creating-a-zigbee-chain-reaction/&#34; target=&#34;_blank&#34;&gt;IoT goes nuclear: creating a ZigBee chain reaction&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by on the security of Philips Hue lightbulbs, a kind of IoT device that has been hacked using a defect in their protocols&lt;/p&gt;

&lt;p&gt;Tags: adrian-colyer, zigbee, philips, hue, philips-hue, iot, defect, hack, security&lt;/p&gt;

&lt;h2 id=&#34;breaking-the-chain-https-googleprojectzero-blogspot-com-es-2016-11-breaking-chain-html&#34;&gt;&lt;a href=&#34;https://googleprojectzero.blogspot.com.es/2016/11/breaking-chain.html&#34; target=&#34;_blank&#34;&gt;Breaking the Chain&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by James Forshaw, in which they explain how the Chrome browser does not use the Win32k system calls (under certain conditions), to reduce the attack surface&lt;/p&gt;

&lt;p&gt;Tags: attack-surface, rasq, security, chrome, chromium, project-zero, win32k, win32, windows, google, flash, ppapi, james-forshaw&lt;/p&gt;

&lt;h2 id=&#34;language-server-protocol-lsp-rust-and-emacs-https-christian-kellner-me-2017-05-31-language-server-protocol-lsp-rust-and-emacs&#34;&gt;&lt;a href=&#34;https://christian.kellner.me/2017/05/31/language-server-protocol-lsp-rust-and-emacs/&#34; target=&#34;_blank&#34;&gt;Language Server Protocol (lsp), rust and Emacs&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Christian Kellner about a common way of operating with a program&amp;rsquo;s Language Server Protocol (LSP) so all languages could benefit from standard tools. Then, a new editor would just have to implement the bindings to LSP to support those.&lt;/p&gt;

&lt;p&gt;Similar to what LLVM is to some languages: once you specify your syntax in terms of LLVM, you can benefit from the improvements that LLVM provides.&lt;/p&gt;

&lt;p&gt;Tags: christian-kellner, lsp, emacs, rust, ast, analogy&lt;/p&gt;

&lt;h2 id=&#34;how-to-create-a-mooc-in-28-days-https-www-indiehackers-com-sknthla-how-to-create-a-mooc-in-28-days&#34;&gt;&lt;a href=&#34;https://www.indiehackers.com/@sknthla/how-to-create-a-mooc-in-28-days&#34; target=&#34;_blank&#34;&gt;How to Create a MOOC in 28 Days&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Saku Panditharatne on how she has created a massively open online course (MOOC).&lt;/p&gt;

&lt;p&gt;Tags: saku-panditharatne, mooc, passive-income, business, side-project, side-business&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in June 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/06/01/self-study-june-2017/</link>
      <pubDate>Thu, 01 Jun 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/06/01/self-study-june-2017/</guid>
      <description>

&lt;h2 id=&#34;so-hey-you-should-stop-using-texts-for-two-factor-authentication&#34;&gt;So Hey You Should Stop Using Texts for Two-Factor Authentication&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.wired.com/2016/06/hey-stop-using-texts-two-factor-authentication/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining why messages over SMS should not be used for the &amp;lsquo;what you own&amp;rsquo; in 2FA.&lt;/p&gt;

&lt;p&gt;Tags: andy-greenberg, 2fa, sms, security, warning&lt;/p&gt;

&lt;h2 id=&#34;why-i-d-never-work-for-google-twitter-or-facebook&#34;&gt;Why I&amp;rsquo;d never work for Google, Twitter, or Facebook&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://naildrivin5.com/blog/2011/08/01/why-i-wont-work-for-google-twitter-facebook.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Bryant Copeland on why he would never work for these three companies: he doesn&amp;rsquo;t share the principles and values from these companies.&lt;/p&gt;

&lt;p&gt;Tags: david-copeland, google, twitter, facebook, job-satisfaction, commitment&lt;/p&gt;

&lt;h2 id=&#34;design-thinking-needs-to-think-bigger&#34;&gt;Design Thinking Needs To Think Bigger&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.fastcodesign.com/90112320/design-thinking-needs-to-think-bigger&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by STEVE VASSALLO on systems thinking and design thinking.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What makes a system a system rather than just a collection of parts is that the components are interconnected and interdependent&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: steve-vassallo, design-thinking, system-thinking, mental-model, emergence-point, leverage-point, iceberg-model&lt;/p&gt;

&lt;h2 id=&#34;cobol-is-everywhere-who-will-maintain-it&#34;&gt;COBOL Is Everywhere. Who Will Maintain It?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://thenewstack.io/cobol-everywhere-will-maintain/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Cassel explaining the state of the COBOL systems at some banks and the difficulty of finding young COBOL programmers.&lt;/p&gt;

&lt;p&gt;Tags: david-cassel, cobol, youth, team-management, hiring, bank, java, mainframe, legacy-system&lt;/p&gt;

&lt;h2 id=&#34;you-re-too-busy-you-need-a-shultz-hour&#34;&gt;You’re Too Busy. You Need a ‘Shultz Hour.’&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.nytimes.com/2017/04/18/opinion/youre-too-busy-you-need-a-shultz-hour.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Leonhardt, about the Shultz Hour: time set aside to not be busy, so you can set aside the tactical topics and focus on the strategic topics.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“You waste years by not being able to waste hours.”&lt;/p&gt;

&lt;p&gt;Amos Tversky  (as Michael Lewis describes in his THE UNDOING PROJECT)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: david-leonhardt, busyness, time-management, shultz-hour, connectedness, social-media, quote&lt;/p&gt;

&lt;h1 id=&#34;avoid-these-35-habits-that-lead-to-unmaintainable-code&#34;&gt;Avoid these 35 habits that lead to unmaintainable code&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/avoid-35-habits-lead-unmaintainable-code-christian-maioli-mackeprang&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about habits that make writing software more difficult:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Saying “I’ll fix it later”, and never doing it&lt;/li&gt;
&lt;li&gt;Insisting on a one-liner solution&lt;/li&gt;
&lt;li&gt;Making pointless optimizations&lt;/li&gt;
&lt;li&gt;Convincing yourself that styling issues are not that important&lt;/li&gt;
&lt;li&gt;Sweeping things under the rug&lt;/li&gt;
&lt;li&gt;Using names that don’t add information&lt;/li&gt;
&lt;li&gt;Ignoring proven best practices&lt;/li&gt;
&lt;li&gt;Abandoning plans too early&lt;/li&gt;
&lt;li&gt;Insisting on a plan that has little chance of working&lt;/li&gt;
&lt;li&gt;Working on your own all the time&lt;/li&gt;
&lt;li&gt;Refusing to write bad code&lt;/li&gt;
&lt;li&gt;Blaming others&lt;/li&gt;
&lt;li&gt;Not sharing with your team what you’ve learned&lt;/li&gt;
&lt;li&gt;Being too slow on giving feedback to managers/clients&lt;/li&gt;
&lt;li&gt;Not using Google enough&lt;/li&gt;
&lt;li&gt;Overvaluing your personal style&lt;/li&gt;
&lt;li&gt;Having a personal attachment to your code&lt;/li&gt;
&lt;li&gt;Not knowing how to optimize&lt;/li&gt;
&lt;li&gt;Using the wrong tool for the job&lt;/li&gt;
&lt;li&gt;Not bothering with mastering your tools and IDE&lt;/li&gt;
&lt;li&gt;Ignoring error messages&lt;/li&gt;
&lt;li&gt;Romanticizing your developer toolkit&lt;/li&gt;
&lt;li&gt;Hardcoding values instead of making them configurable&lt;/li&gt;
&lt;li&gt;Reinventing the wheel all the time&lt;/li&gt;
&lt;li&gt;Blindly copy/pasting code&lt;/li&gt;
&lt;li&gt;Not taking the time to learn how things really work&lt;/li&gt;
&lt;li&gt;Having excessive confidence in your own code&lt;/li&gt;
&lt;li&gt;Not thinking about the trade-offs of each design, solution, or library&lt;/li&gt;
&lt;li&gt;Not getting help when you’re stuck&lt;/li&gt;
&lt;li&gt;Writing tests to pass&lt;/li&gt;
&lt;li&gt;Disregarding performance testing for critical cases&lt;/li&gt;
&lt;li&gt;Not checking that your build works&lt;/li&gt;
&lt;li&gt;Pushing large changes late, or leaving after making a large push&lt;/li&gt;
&lt;li&gt;Disowning code you wrote&lt;/li&gt;
&lt;li&gt;Ignoring the nonfunctional requirements&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: christian-maioli-mackeprang, maintanability, code, listicle, habit&lt;/p&gt;

&lt;h2 id=&#34;javascript-a-first-class-language-at-last&#34;&gt;JavaScript — A First-Class Language At Last&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/javascript-first-class-language-atlast-tom-goldenberg&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tom Goldenberg defending javascript, citing sources on why it is a first-class language,
the amount of job offers, and the state of the art in NodeJS.&lt;/p&gt;

&lt;p&gt;Tags: tom-goldenberg, javascript, java, comparison, first-class, language, analysis&lt;/p&gt;

&lt;h2 id=&#34;why-the-8-hour-workday-doesn-t-work&#34;&gt;Why the 8-Hour Workday Doesn&amp;rsquo;t Work&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/why-8-hour-workday-doesnt-work-dr-travis-bradberry&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; defending the removal of the 8-hour workday, preferring the division of time in slots.
In the article, 52 minutes of highly focused work then 17 minutes of rest.&lt;/p&gt;

&lt;p&gt;The key idea is the work-rest, no matter how big those slots are.&lt;/p&gt;

&lt;p&gt;Gives tips on how to separate both, some other tips for improving your performance.&lt;/p&gt;

&lt;p&gt;By Travis Bradberry&lt;/p&gt;

&lt;p&gt;Tags: time-management, pomodoro-technique, travis-bradberry, time, workday&lt;/p&gt;

&lt;h2 id=&#34;the-dark-side-of-extreme-productivity-and-how-to-steer-back-toward-the-light-https-medium-freecodecamp-com-the-dark-side-of-extreme-productivity-2a31ff7a4cd2&#34;&gt;&lt;a href=&#34;https://medium.freecodecamp.com/the-dark-side-of-extreme-productivity-2a31ff7a4cd2&#34; target=&#34;_blank&#34;&gt;The dark side of extreme productivity, and how to steer back toward the light&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Beau Carnes on how productivity can have a downside, how it can affect your healthy lifestyle.
Explains effective vs efficient, productivity, silent retreat, prayer or meditation&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The key is not to prioritize what’s on your schedule, but to schedule your priorities&lt;/p&gt;

&lt;p&gt;Stephen Covey&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: beau-carnes, productivity, quote, stephen-covey, sustainable-pace&lt;/p&gt;

&lt;h2 id=&#34;dejé-de-leer&#34;&gt;Dejé de leer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://culto.latercera.com/2017/03/15/deje-de-leer/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Catalina Bu on the tsundoku and how to read more. (In Spanish)&lt;/p&gt;

&lt;p&gt;Tags: catalina-bu, tsundoku, reading, time-management, spanish&lt;/p&gt;

&lt;h2 id=&#34;hacked-in-translation-from-subtitles-to-complete-takeover&#34;&gt;Hacked in Translation – from Subtitles to Complete Takeover&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.checkpoint.com/2017/05/23/hacked-in-translation/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about a vector to getting to user&amp;rsquo;s machines through the video player, using subtitle files.
by Check Point Research Team.&lt;/p&gt;

&lt;p&gt;Tags: check-point-research-team, security, vulnerability, vector, attack, subtitle, video-player&lt;/p&gt;

&lt;h2 id=&#34;8-teamwork-myths-to-tackle-at-your-office&#34;&gt;8 Teamwork Myths To Tackle At Your Office&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.trello.com/8-teamwork-myths-to-tackle-at-your-office&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Leah Ryder on remote work myths.&lt;/p&gt;

&lt;p&gt;Tags: leah-ryder, productivity, myth, remote, remote-work&lt;/p&gt;

&lt;h2 id=&#34;why-i-think-elm-is-the-future-of-front-end-development&#34;&gt;Why I think Elm is the Future of Front End Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@rgoomar/why-i-think-elm-is-the-future-of-front-end-development-21e9b091fa05&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Rishi Goomar comparing reactredux to elm, comparing javascript to elm.&lt;/p&gt;

&lt;p&gt;Tags: rishi-goomar, comparison, elm, javascript, react, redux, javascript-fatigue&lt;/p&gt;

&lt;h2 id=&#34;los-viejos-programadores-nunca-mueren-y-silicon-valley-se-está-dando-cuenta-de-ello&#34;&gt;Los viejos programadores nunca mueren, y Silicon Valley se está dando cuenta de ello&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://m.xataka.com/empresas-y-economia/los-viejos-programadores-nunca-mueren-y-silicon-valley-se-esta-dando-cuenta-de-ello&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Javier Pastor on the age of the programmers in Silicon Valley. In Spanish.&lt;/p&gt;

&lt;p&gt;Tags: spanish, javier-pastor, age, programmer, career-manager, silicon-valley&lt;/p&gt;

&lt;h2 id=&#34;creating-a-tensorflow-powered-ing-api-client&#34;&gt;Creating a TensorFlow-powered ING API client&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@donflopez/cracking-the-ing-api-with-tensorflow-9681ae7dc249&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Francisco López on how he has implemented a small bot to click the virtual keyboard and connect to the bank website.&lt;/p&gt;

&lt;p&gt;Tags: ing-direct, francisco-lopez, bot, opencv, tensorflow, machine-learning, python, banking, open-banking-data&lt;/p&gt;

&lt;h2 id=&#34;be-a-good-mentor-not-a-dickhead&#34;&gt;Be a good mentor, not a dickhead&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Edaqa Mortoray about traits of a mentor. &lt;a href=&#34;https://dev.to/mortoray/be-a-good-mentor-not-a-dickhead&#34; target=&#34;_blank&#34;&gt;https://dev.to/mortoray/be-a-good-mentor-not-a-dickhead&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: edaqa-mortoray, mentor, trait, skill, mentorship, apprentice, apprenticeship&lt;/p&gt;

&lt;h2 id=&#34;the-largest-git-repo-on-the-planet-https-blogs-msdn-microsoft-com-bharry-2017-05-24-the-largest-git-repo-on-the-planet&#34;&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/bharry/2017/05/24/the-largest-git-repo-on-the-planet/&#34; target=&#34;_blank&#34;&gt;The largest Git repo on the planet&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by  Brian Harry on how Microsoft manages one of its big repositories. Explains how they have virtualized the git folder and the git workspace at Microsoft using gvfs. Explains how they have performed the improvements necessary to make it useful and usable to programmers.&lt;/p&gt;

&lt;p&gt;They have support for clients, but what about Linux?&lt;/p&gt;

&lt;p&gt;Tags:  brian-harry, microsoft, continous-delivery, linux, windows, gvfs, repository, monorepo&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in February 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/02/01/self-study-in-february-2017/</link>
      <pubDate>Wed, 01 Feb 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/02/01/self-study-in-february-2017/</guid>
      <description>

&lt;h2 id=&#34;whatsapp-security-vulnerability&#34;&gt;WhatsApp Security Vulnerability&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.schneier.com/blog/archives/2017/01/whatsapp_securi.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Bruce Schneier on a security defect in whatsapp, where an &amp;lsquo;unconfirmed&amp;rsquo; message can be re-encrypted (with a new key) and resent. This is a vector for some attacks.&lt;/p&gt;

&lt;p&gt;Tags: bruce-schneier, security, whatsapp, encryption, attack-vector&lt;/p&gt;

&lt;h2 id=&#34;encrypted-email-service-once-used-by-edward-snowden-relaunches&#34;&gt;Encrypted email service once used by Edward Snowden relaunches&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://theintercept.com/2017/01/20/encrypted-email-service-once-used-by-edward-snowden-to-relaunch/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, by Kim Zetter, on Lavabit restablishing its service. Explains the company&amp;rsquo;s past and the new services they are offering&lt;/p&gt;

&lt;p&gt;Tags: lavabit, kim-zetter, privacy, encryption, email, mail&lt;/p&gt;

&lt;h2 id=&#34;what-happens-when-you-mix-java-with-a-1960-ibm-mainframe&#34;&gt;What Happens When You Mix Java with a 1960 IBM Mainframe&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/happens-use-java-1960-ibm-mainframe/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Cassel about the legacy infrastructure of hardware that the U.S. government agencies have. How old mainframes are still useful to web applications and how these mainframes can communicate with more modern systems, through APIs&lt;/p&gt;

&lt;p&gt;Tags: mainframe, david-cassel, marianne-bellotti, legacy-hardware, legacy-software, legacy-system, legacy, api&lt;/p&gt;

&lt;h2 id=&#34;systems-we-love-how-the-past-informs-our-present&#34;&gt;Systems We Love: How the Past Informs Our Present&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/systems-we-love/&#34; target=&#34;_blank&#34;&gt;this experience report&lt;/a&gt; by David Cassel about the conference &amp;ldquo;Systems we love&amp;rdquo;: a mix of papers we love and systems that happened at San Francisco in December 2016&lt;/p&gt;

&lt;p&gt;Tags: david-cassel, systems-we-love, papers-we-love, system, conference, experience-report, joyent&lt;/p&gt;

&lt;h2 id=&#34;the-agonizing-death-of-an-astronaut&#34;&gt;The agonizing death of an astronaut&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.javaslang.io/the-agonizing-death-of-an-astronaut/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Daniel Dietrich on why the implementation of the &lt;code&gt;Option&lt;/code&gt; in Javaslang seems to be broken but, in fact, follows the rules of the monads.&lt;/p&gt;

&lt;p&gt;Explains why &lt;code&gt;map&lt;/code&gt; should be used for non-changing contexts and &lt;code&gt;flatmap&lt;/code&gt; should be used for changing it.&lt;/p&gt;

&lt;p&gt;Tags: daniel-dietrich, monad, option, haskell, optional, maybe, scala, javaslang&lt;/p&gt;

&lt;h2 id=&#34;we-reverse-engineered-16k-apps-here-s-what-we-found&#34;&gt;We reverse engineered 16k apps, here’s what we found&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hackernoon.com/we-reverse-engineered-16k-apps-heres-what-we-found-51bdf3b456bb&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Fallible team, in which they describe the analysis of apps. They discovered 2500 apps with key and secret on them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] whenever you hardcode any API key/token in the app, think hard if you really need to hardcode this, understand the API usage and the read/write scope of the tokens before putting it in the apps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: analysis, security, app, key, token, api, fallible&lt;/p&gt;

&lt;h2 id=&#34;oh-the-emails-you-ll-get&#34;&gt;Oh, the emails you’ll get&amp;hellip;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.joelonsoftware.com/2006/11/09/oh-the-emails-youll-get/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joel Spolsky, in which he explains how some companies focus on some metrics for measuring performance, how difficult it is to measure performance.&lt;/p&gt;

&lt;p&gt;Tags: joel-spolsky, performance, management, consulting&lt;/p&gt;

&lt;h2 id=&#34;2002-07-15-measurement&#34;&gt;2002/07/15 - Measurement&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.joelonsoftware.com/2002/07/15/20020715/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joel Spolsky where he explains how measuring performance is difficult, according to  Robert D. Austin in his book Measuring and Managing Performance in Organizations. He gives some examples of that, mainly about paying out bonuses for performance reasons.&lt;/p&gt;

&lt;p&gt;Tags: joel-spolsky, robert-austin, measuring-performance, managing-performance, book, knowledge-worker, bonus, pay, performance, organization&lt;/p&gt;

&lt;h2 id=&#34;the-purpose-of-life-is-not-happiness-it-s-usefulness&#34;&gt;The Purpose Of Life Is Not Happiness: It’s Usefulness&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://dariusforoux.com/happiness-usefulness/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Darius Foroux on what the purpose of life is about: making a difference (even if small) in what you leave behind.&lt;/p&gt;

&lt;p&gt;Tags: psychology, purpose-of-life, usefulness, happiness, darius-foroux&lt;/p&gt;

&lt;h2 id=&#34;the-future-of-user-interfaces&#34;&gt;The Future of User Interfaces&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://brandur.org/interfaces&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brandur on how interfaces are becoming more and more bloated, slow and ridden with animations. All of that is targeted to the beginner user, rather than the proficient one. He suggests some ideas on finding inspiration from the terminal applications&lt;/p&gt;

&lt;p&gt;Tags: brandur, interface, interface-design, ux, ui&lt;/p&gt;

&lt;h2 id=&#34;my-increasing-frustration-with-clojure&#34;&gt;My Increasing Frustration With Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ashtonkemerling.com/blog/2016/06/11/my-increasing-frustration-with-clojure/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ashton Kemerling on the problems he has found working professionally with Clojure and some possible solutions.&lt;/p&gt;

&lt;p&gt;Tags: clojure, language, ashton-kemerling, functional-programming, problem, frustration&lt;/p&gt;

&lt;h2 id=&#34;java-without-if&#34;&gt;Java Without If&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ashtonkemerling.com/blog/2017/01/26/java-without-if/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ashton Kemerling on how he is using a library called &amp;lsquo;lambda&amp;rsquo;, which brings some of the functional programming features to Java.&lt;/p&gt;

&lt;p&gt;Tags: lambda, library, ashton-kemerling, functional-programming, java, palatable, john-napier&lt;/p&gt;

&lt;h2 id=&#34;top-ten-pull-request-review-mistakes&#34;&gt;Top ten pull request review mistakes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.scottnonnenberg.com/top-ten-pull-request-review-mistakes/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Scott Nonnenberg on the most common mistakes while doing a code review in the context of a pull request.&lt;/p&gt;

&lt;p&gt;Tags: scott-nonnenberg, pull-request, code-review, github, diff, listicle&lt;/p&gt;

&lt;h2 id=&#34;shutting-down-simplicity-itself&#34;&gt;Shutting down Simplicity Itself&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://daviddawson.me/blog/2017/02/04/simplicity-itself-shutdown.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Dawson on why he&amp;rsquo;s shutting down his consultancy company, Simplicity Itself, which was mainly focused on microservices.&lt;/p&gt;

&lt;p&gt;Tags: david-dawson, simplicity-itself, shut-down, company, consulting, post-mortem, postmortem&lt;/p&gt;

&lt;h2 id=&#34;turn-off-your-cellphone&#34;&gt;Turn Off Your Cellphone&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://brandur.org/fragments/turn-off-your-cellphone&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brandur on how to get more done by unplugging the notifications&lt;/p&gt;

&lt;p&gt;Tags: brandur, time-management, interruption, phone, notification&lt;/p&gt;

&lt;h2 id=&#34;the-dark-standup&#34;&gt;The Dark Standup&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://18f.gsa.gov/2017/01/19/the-dark-standup/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Alan Brouilette on the steps they took to reduce the amount of hours worked. It started with a few extra questions during the daily standup:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;What didn’t you do today because you stopped working on time?&lt;/li&gt;
&lt;li&gt;What will the impact be on tomorrow because of it?&lt;/li&gt;
&lt;li&gt;How much more time would you have needed to get everything done today?&lt;/li&gt;
&lt;li&gt;What will you do with those hours tonight instead?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;and what they realized after a two-week experiment:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The costs of context switching are much higher than we realized.&lt;/li&gt;
&lt;li&gt;We were spending a lot of time doing things that were urgent but not important, or that didn’t need to have been urgent at all.&lt;/li&gt;
&lt;li&gt;We needed to be a lot more ruthless about saying “No.”&lt;/li&gt;
&lt;li&gt;Some Operations roles are legitimately shorthanded, some of us just needed to impose a little order.&lt;/li&gt;
&lt;li&gt;FOMO WIP (unnecessary work one takes on because one fears missing something) is a real problem, especially as regards to Slack and meetings.&lt;/li&gt;
&lt;li&gt;We worked better in the time we had to work, knowing it was finite.&lt;/li&gt;
&lt;li&gt;Work-life balance improves both work and life. People literally slept better when limiting after-hours exposure to Slack and email. [&amp;hellip;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: dark-standup, quote, limited-time, overtime, team-management, experiment, question, alan-brouilette&lt;/p&gt;

&lt;h2 id=&#34;what-it-means-to-be-a-remote-first-company&#34;&gt;What it Means to be a Remote-First Company&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.stackoverflow.blog/code-for-a-living/what-it-means-to-be-a-remote-first-company&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by  Alyssa Mazzina on what Stack Overflow does to keep its remote employees happy, how they are a remote-first company and small practicalities like tools, holiday gifts and stipends.&lt;/p&gt;

&lt;p&gt;Tags: alyssa-mazzina, team-management, remote, remote-work, stack-overflow, team&lt;/p&gt;

&lt;h2 id=&#34;google-s-not-so-secret-new-os&#34;&gt;Google’s not-so-secret new OS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://techspecs.blog/blog/2017/2/14/googles-not-so-secret-new-os&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; describing the state of Google&amp;rsquo;s new operating system, Fuchsia or Andromeda (the final name is not final yet).&lt;/p&gt;

&lt;p&gt;Tags: google, os, operating-system, daniel-matte, fuchsia, andromeda&lt;/p&gt;

&lt;h2 id=&#34;four-secrets-of-people-who-finish-their-workweeks-on-thursday&#34;&gt;Four Secrets Of People Who Finish Their Workweeks On Thursday&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.fastcompany.com/3068122/work-smart/four-secrets-of-people-who-finish-their-workweeks-on-thursday&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kat Boogaard that includes four tips to finish your week early:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They Schedule Intentionally&lt;/li&gt;
&lt;li&gt;They Focus On Priorities&lt;/li&gt;
&lt;li&gt;They Tune Out Distractions&lt;/li&gt;
&lt;li&gt;They Find Shortcuts&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tags: kat-boogaard, time-management, eisenhower-productivity-matrix, urgent-vs-important, important-vs-urgent, urgent, important, productivity&lt;/p&gt;

&lt;h2 id=&#34;reflecting-on-one-very-very-strange-year-at-uber&#34;&gt;Reflecting On One Very, Very Strange Year At Uber&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Susan J Fowler on some bad HR practices at Uber and how they are part of the reason their low percentage of women (3%) in the engineering team.&lt;/p&gt;

&lt;p&gt;Tags: sexism, uber, susan-fowler, hr, human-resources, women, work-environment, review&lt;/p&gt;

&lt;h2 id=&#34;ni-dioses-ni-reyes-sólo-el-hombre&#34;&gt;Ni dioses ni reyes. Sólo el hombre.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive1.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=860ccae5e2&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; (in Spanish) by David Bonilla on which he talks about the God Mode and how that is implemented in different applications.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also liked this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Los desarrolladores sólo somos herreros que forjan ceros y unos. Construimos herramientas para satisfacer necesidades de nuestros usuarios, sin que eso nos haga mejores que ellos o nos dé el derecho de supervisar y juzgar sus actos. A la hora de diseñar nuevos sistemas y funcionalidades, lo único que nunca deberíamos olvidar es que no somos dioses ni reyes, sólo hombres.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rough translation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We, developers, we are only blacksmiths of the digital era. We build tools to satisfy our user&amp;rsquo;s need, without that fact making us better than they are or without the right to overview what they do or to judge their acts. When designing new systems and features, the only thing we must never forget is that we are neither gods nor kings, just humans.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;las-tres-erres&#34;&gt;Las tres erres&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article (in Spanish) by David Bonilla in which he explains three necessary factors when considering a job offer:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Referentes: es imposible conocer a toda la plantilla de una empresa, pero si conoces a dos o tres empleados clave, podrás hacerte una idea de cómo será el equipo que te vas a encontrar. La gente prefiere trabajar con compañeros que compartan su ética y valores. Yo conocía a casi toda la plantilla de Comalatech tras haber coincidido con unos y otros en distintos eventos… y aún hay gente que se pregunta para qué sirve ir a conferencias técnicas si en Internet “se puede encontrar todo”.&lt;/li&gt;
&lt;li&gt;Referencias: es complicado, pero en el día a día una persona puede ser completamente diferente a la imagen que proyecta públicamente. Me ha pasado. Por eso es importante contar con referencias, terceras personas –antiguos empleados, clientes o proveedores- con las que haya trabajado. Los españoles no solemos pedirlas, pero para los anglosajones son un requisito imprescindible. En el caso de Comala, conseguí las mejores de la mejor fuente posible.&lt;/li&gt;
&lt;li&gt;Retos: los profesionales trabajamos por dinero, pero a partir de cierto nivel de salario, podemos permitirnos el lujo de elegir un trabajo u otro según otros factores. En mi caso, siempre he priorizado por encima de todo el potencial de aprendizaje y, en ese sentido, Comalatech no tenía rival.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: referent, reference, challenge, david-bonilla, bonilista, change-job, job-offer&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in September 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015/</link>
      <pubDate>Tue, 01 Sep 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015/</guid>
      <description>

&lt;h2 id=&#34;the-30-second-habit-with-a-lifelong-impact&#34;&gt;The 30 second habit with a lifelong impact&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.growth.supply/the-30-second-habit-with-a-lifelong-impact-2c3f948ead98&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; list of patterns, by Robyn Scott, in which it is explained why to compress information in a few ideas, investing 30 seconds to condense the article.&lt;/p&gt;

&lt;p&gt;Tags: 30-second, habit, robyn-scott&lt;/p&gt;

&lt;h2 id=&#34;the-strengths-and-weaknesses-of-extreme-programming&#34;&gt;The Strengths and Weaknesses of Extreme Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=LkhLZ7_KZ5w&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; explaining the strengths and weaknesses of extreme programming. By William Matheson&lt;/p&gt;

&lt;p&gt;Tags: extreme-programming, xp, william-matheson, video, strength, weakness&lt;/p&gt;

&lt;h2 id=&#34;poster-de-extreme-programming&#34;&gt;Poster de Extreme Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=4nN6Gh79Yg8&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; introducing eXtreme Programming. By Martín Salías&lt;/p&gt;

&lt;p&gt;Tags: martin-salias, kleer, extreme-programming, xp&lt;/p&gt;

&lt;h2 id=&#34;good-tech-lead-bad-tech-lead&#34;&gt;Good Tech Lead, Bad Tech Lead&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.growth.supply/good-tech-lead-bad-tech-lead-948b2b806d86&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; of good and bad traits in tech leads. By Jason Liszka.&lt;/p&gt;

&lt;p&gt;Explains the differences between good and bad tech leads, even though many of these qualities are shared by plain team members&lt;/p&gt;

&lt;p&gt;Tags: jason-liszka, tech-lead, comparison&lt;/p&gt;

&lt;h2 id=&#34;why-procrastinators-procrastinate&#34;&gt;Why Procrastinators Procrastinate&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://waitbutwhy.com/2013/10/why-procrastinators-procrastinate.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tim Urban on procrastination: this article compares the procrastinator and the non-procrastinator brain with pictures, introducing the Rational part, the Instant Gratification Monkey and the Panic Monster. Shows some reasons why.&lt;/p&gt;

&lt;p&gt;There is more on part 2: &lt;a href=&#34;http://waitbutwhy.com/2013/11/how-to-beat-procrastination.html&#34; target=&#34;_blank&#34;&gt;How to beat procrastination&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: tim-urban, procrastination, rational-part, instant-gratification-monkey, panic-monster, brain, comparison&lt;/p&gt;

&lt;h2 id=&#34;algebraic-data-type&#34;&gt;Algebraic data type&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that explains what this is, a few examples and the theory behind it.&lt;/p&gt;

&lt;p&gt;Tags: wikipedia, data-type, algebraic-data-type&lt;/p&gt;

&lt;h2 id=&#34;recursion&#34;&gt;Recursion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Recursion_(computer_science)&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that explains the recursion basic concepts, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;induction, coinduction&lt;/li&gt;
&lt;li&gt;recursion, corecursion&lt;/li&gt;
&lt;li&gt;implementation details in iterative vs recursive programs:

&lt;ul&gt;
&lt;li&gt;shortcutting recursion (i.e., arm-length&amp;rsquo;s recursion)&lt;/li&gt;
&lt;li&gt;wrapper function&lt;/li&gt;
&lt;li&gt;tail-call optimization, related to tail-recursive functions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;recursion and its relation to data structures&lt;/li&gt;
&lt;li&gt;base case / recursive case and removing the need of the base one in corecursion or in non-strict languages&lt;/li&gt;
&lt;li&gt;types of recursion:

&lt;ul&gt;
&lt;li&gt;direct, indirect, mutual&lt;/li&gt;
&lt;li&gt;generative, structural&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: recursion, corecursion, induction, coinduction, tail-call-optimization, tail-recursion, direct-recursion, indirect-recursion, mutual-recursion, generative-recursion, structural-recursion, arm-length-recursion, iterative-function, recursive-function, base-case, recursive-case, wikipedia, data-structure&lt;/p&gt;

&lt;h2 id=&#34;anonymous-function&#34;&gt;Anonymous function&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Anonymous_function&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that describes what is a lambda expression or an anonymous function. How it can be used (e.g., currying, higher-order function, closures) and gives examples in many languages.&lt;/p&gt;

&lt;p&gt;Cites its invention (Church, 1936, lambda-calculus) and its first implementation (Lisp, 1958)&lt;/p&gt;

&lt;p&gt;Tags: alonzo-church, anonymous-function, lambda-expression, closure, lambda-calculus, lisp, currying, higher-order-function, wikipedia&lt;/p&gt;

&lt;h2 id=&#34;closure&#34;&gt;Closure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Closure_(computer_programming)&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that explains the concept of closures and the usual confusion between closure and lambda. Also some applications.&lt;/p&gt;

&lt;p&gt;Discusses closures as a way of deferring execution and implementing object-oriented (OO) systems&lt;/p&gt;

&lt;p&gt;Tags: wikipedia, closure, object-orientation, lambda-expression&lt;/p&gt;

&lt;h2 id=&#34;zen-story-the-master-archer&#34;&gt;Zen Story: The Master Archer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.thedailyzen.org/2015/06/23/zen-story-the-master-archer/&#34; target=&#34;_blank&#34;&gt;this story&lt;/a&gt; by Charlie Ambler about perfectionism and deep study, exemplified by the general that retires to study archery and the child who draws targets around the arrows.&lt;/p&gt;

&lt;p&gt;Tags: charlie-amber, master, student, zen, story&lt;/p&gt;

&lt;h2 id=&#34;loosely-coupled&#34;&gt;Loosely Coupled&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.bwhaley.com/loosely-coupled&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ben Whaley about how to loosely couple services introducing a queue and the difference in patterns between push and pull communication.&lt;/p&gt;

&lt;p&gt;Tags: ben-whaley, push, pull, coupling, loose-coupling, service, queue, aws&lt;/p&gt;

&lt;h2 id=&#34;being-good-at-programming-competitions-correlates-negatively-with-being-good-on-the-job&#34;&gt;Being good at programming competitions correlates negatively with being good on the job&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched the small video and the discussion about programmers&amp;rsquo; talent at &lt;a href=&#34;http://www.catonmat.net/blog/programming-competitions-work-performance/&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt;. By Peteris Krumins.&lt;/p&gt;

&lt;p&gt;The original video explains that being good at a programming contest correlates negatively with skill at a programming job, even if the company hires them.&lt;/p&gt;

&lt;p&gt;The discussion explains the analogy with height and the NBA and concludes that this parameter should be preponderated with less importance than others.&lt;/p&gt;

&lt;p&gt;Tags: google, peter-norvig, nba, analogy, programming-contest, programming-skill, peteris-krumins&lt;/p&gt;

&lt;h2 id=&#34;on-functors&#34;&gt;On Functors&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.catonmat.net/blog/on-functors/&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; by Peteris Krumins of what the functors are in different languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++: function objects&lt;/li&gt;
&lt;li&gt;Standard ML: generic implementation of interfaces. They allow to compose structures&lt;/li&gt;
&lt;li&gt;Haskell: structure containing zero or more objects that can be converted to another structure containing the other objects. It&amp;rsquo;s an homomorphism between two categories.&lt;/li&gt;
&lt;li&gt;Prolog: built-in predicate for self-inspection and the atom at the start of the structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: peteris-krumins, comparison, haskell, c-plus-plus, standard-ml, prolog, functor&lt;/p&gt;

&lt;h2 id=&#34;recursive-regular-expressions&#34;&gt;Recursive Regular Expressions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.catonmat.net/blog/recursive-regular-expressions/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on recursive regular expressions by Peteris Krumins.&lt;/p&gt;

&lt;p&gt;In it, he lightly describes how a regular expression relates to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Context-free_grammar&#34; target=&#34;_blank&#34;&gt;Context-Free Grammar&lt;/a&gt; and the language support for Perl to include recursive regular expressions. Based on the examples (e.g., &lt;code&gt;0^n1^n&lt;/code&gt;), it really clicked to me that this could be expressed as a recursive function, with its base case and the recursive one. Also that it &amp;ldquo;depends on solutions to smaller instances of the same problem&amp;rdquo; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Recursion_(computer_science)&#34; target=&#34;_blank&#34;&gt;wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Tags: peteris-krumins, regular-expression, recursion, recursive-regular-expression, perl, context-free-grammar, formal-language-theory&lt;/p&gt;

&lt;h2 id=&#34;in-functional-programming-what-is-a-functor&#34;&gt;In Functional Programming, what is a functor?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/2030863/in-functional-programming-what-is-a-functor/2031421#2031421&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt;, by Norman Ramsey, on what is a functor.&lt;/p&gt;

&lt;p&gt;He explains in simple words what the concept is and how a type can belong to the class functor. Examples in haskell.&lt;/p&gt;

&lt;p&gt;Tags: norman-ramsey, functor, stack-overflow, haskell, type-class, class, map, fmap&lt;/p&gt;

&lt;h2 id=&#34;functors&#34;&gt;Functors&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.clojure.net/2013/01/19/Functors/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jim Duey explaining functors in Clojure. He introduces a couple of notes of Haskell but all of the examples are in Clojure. Explains functors, a subset of it called applicatives, and the two libraries he has created.&lt;/p&gt;

&lt;p&gt;Tags: jim-duey, functor, clojure, haskell&lt;/p&gt;

&lt;h2 id=&#34;10-tips-for-proper-application-logging&#34;&gt;10 Tips for Proper Application Logging&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javacodegeeks.com/2011/01/10-tips-proper-application-logging.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tomasz Nurkiewicz about tips on logging:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reduce side effects&lt;/li&gt;
&lt;li&gt;use categories and levels&lt;/li&gt;
&lt;li&gt;connection with external systems&lt;/li&gt;
&lt;li&gt;handling exceptions&lt;/li&gt;
&lt;li&gt;automatically / manually reading logging files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: tomasz-nurkiewicz, logging, sl4j, log4j, tip&lt;/p&gt;

&lt;h2 id=&#34;what-is-duck-typing&#34;&gt;What is &amp;ldquo;duck typing&amp;rdquo;?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ericlippert.com/2014/01/02/what-is-duck-typing/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert about duck typing&lt;/p&gt;

&lt;p&gt;Tags: duck-typing, eric-lippert, type-system, c-sharp&lt;/p&gt;

&lt;h2 id=&#34;yagni&#34;&gt;Yagni&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve reread &lt;a href=&#34;http://martinfowler.com/bliki/Yagni.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Martin Fowler on the cost of developing features that are not needed&lt;/p&gt;

&lt;p&gt;Tags: martin-fowler, yagni, article, misunderstanding&lt;/p&gt;

&lt;h2 id=&#34;learn-haskell&#34;&gt;Learn Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.youtube.com/watch?v=JJlI5FPTbgE&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Jordan Medlock on learning haskell, explaining the basics and how to use the REPL&lt;/p&gt;

&lt;p&gt;Tags: haskell, repl, jordan-medlock, beginner, video&lt;/p&gt;

&lt;h2 id=&#34;learn-haskell-1&#34;&gt;Learn Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.youtube.com/watch?v=JJlI5FPTbgE&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Jordan Medlock on learning haskell, explaining the basics and how to use the REPL&lt;/p&gt;

&lt;p&gt;Tags: haskell, repl, jordan-medlock, beginner, video&lt;/p&gt;

&lt;h2 id=&#34;tmux-the-terminal-multiplexer&#34;&gt;TMUX - The Terminal Multiplexer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read these two parts: (&lt;a href=&#34;http://blog.hawkhost.com/2010/06/28/tmux-the-terminal-multiplexer/&#34; target=&#34;_blank&#34;&gt;one&lt;/a&gt;, &lt;a href=&#34;http://blog.hawkhost.com/2010/07/02/tmux-%E2%80%93-the-terminal-multiplexer-part-2&#34; target=&#34;_blank&#34;&gt;two&lt;/a&gt;) of an introduction guide to &lt;code&gt;tmux&lt;/code&gt; (the unix terminal multiplexer) by Cody from Hawk Host.&lt;/p&gt;

&lt;p&gt;In it, he explains the basics of tmux and the main differences with &lt;code&gt;screen&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Tags: cody, hawk-host, tmux, how-to&lt;/p&gt;

&lt;h2 id=&#34;thermodynamics-and-garbage-collection&#34;&gt;Thermodynamics and Garbage Collection&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pipeline.com/~hbaker1/ThermoGC.html&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; by Henry G. Baker that explains the analogy of the garbage collection (&amp;ldquo;a freezer&amp;rdquo;) and thermodynamics, where the state mutator (th program, also an oven) modifies the garbage heap and introduces / extracts entropy into the system.&lt;/p&gt;

&lt;p&gt;Comparison between entropy and lack of information, using the theories from Shannon, Maxwell-Boltzmann. There&amp;rsquo;s a reference to the knapsack problem and to simulated annealing.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a gentle introduction to thermodynamics in layman terms: heat, temperature, microstates, macrostates, reversability, etc.&lt;/p&gt;

&lt;p&gt;In this paper it is also reflected (in macro vs micro states) that the sum all parts is simpler than the single ones (i.e., Information Hiding)&lt;/p&gt;

&lt;p&gt;Tags: henry-baker, thermodynamics, microstate, macrostate, analogy, simulated-annealing, garbage-collection, shannon, information, maxwell-boltzmann, freezer, oven, entropy&lt;/p&gt;

&lt;h2 id=&#34;how-we-ended-up-with-microservices&#34;&gt;How we ended up with microservices&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://philcalcado.com/2015/09/08/how_we_ended_up_with_microservices.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, by Phil Calçado, where he talks about his stay at SoundCloud:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the value stream map: from X days to Y&lt;/li&gt;
&lt;li&gt;reorganizing teams into service teams&lt;/li&gt;
&lt;li&gt;conway&amp;rsquo;s law and teams being responsible for support. Also, being given full authority&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: phil-calcado, soundcloud, microservice, team-split, value-stream-mapping, conversion, reorganization&lt;/p&gt;

&lt;h2 id=&#34;lisp-is-still-a-secret-weapon&#34;&gt;Lisp is still a secret weapon&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://kep.io/is-lisp-still-a-secret-weapon/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Judd Keppel where he explains it is a good idea that Clojure / ClojureScript continues to be a secret, not known among developers. Cites the article &amp;lsquo;Beating the averages&amp;rsquo; by Paul Graham and the amount of available packages in npm, maven central, etc&lt;/p&gt;

&lt;p&gt;Tags: paul-graham, judd-keppel, clojure, clojurescript, weapon, developer&lt;/p&gt;

&lt;h2 id=&#34;perceptron&#34;&gt;Perceptron&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Perceptron&#34; target=&#34;_blank&#34;&gt;this wikipedia&lt;/a&gt; article that explains the single-layer and multi-layer perceptron. First designed to be a machine (hardware), but later an algorithm for supervised machine learning. Worked by Minsky &amp;amp; Papert and invented by Frank Rosenblatt in 1958.&lt;/p&gt;

&lt;p&gt;Tags: peceptron, artificial-intelligence, machine-learning, frank-rosenblatt, 1958, marvin-minsky, seymour-papert&lt;/p&gt;

&lt;h2 id=&#34;is-c-a-strongly-typed-or-a-weakly-typed-language&#34;&gt;Is C# a strongly typed or a weakly typed language?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ericlippert.com/2012/10/15/is-c-a-strongly-typed-or-a-weakly-typed-language/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, in the form of a dialogue between Eric Lippert and himself about the C# language and its type system.&lt;/p&gt;

&lt;p&gt;Tags: type-system, c-sharp, eric-lippert, dialogue, strongly-typed, weakly-typed, language&lt;/p&gt;

&lt;h2 id=&#34;diseño-por-contratos-construyendo-software-confiable&#34;&gt;Diseño por contratos: construyendo software confiable&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.revista.unam.mx/vol.4/num5/art11/sep_art11.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; that explains design by contract, based on the Hoare triplet, pre-post condition, method and class invariant. With examples in Eiffel, Java about a package sender company. Also explains pre/post with inheritance. By Gerardo Rossel and Andrea Manna. In Spanish.&lt;/p&gt;

&lt;p&gt;Tags: gerardo-rossel, andrea-manna, design-by-contract, unam-mx, eiffel, java, precondition, postcondition, trust, quality, hoare-triplet, method-invariant, class-invariant&lt;/p&gt;

&lt;h2 id=&#34;the-inevitable-return-of-cobol&#34;&gt;The Inevitable Return of COBOL&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.hackerrank.com/the-inevitable-return-of-cobol/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains the current state of COBOL in programming and systems. Written by Ritika Trikha&lt;/p&gt;

&lt;p&gt;Tags: ritika-trikha, cobol, programming-language, retirement, median-age&lt;/p&gt;

&lt;h2 id=&#34;the-risky-eclipse-of-statisticians&#34;&gt;The Risky Eclipse of Statisticians&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.hackerrank.com/the-risky-eclipse-of-statisticians/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; where Ritika Trikha explains the current situation regarding Big Data and the statiscian jobs. How Big Data is in demand but the latter are not and what effects this might have.&lt;/p&gt;

&lt;p&gt;Tags: ritika-trikha, bootcamp, programming, hiring, big-data, analysis, statistics&lt;/p&gt;

&lt;h2 id=&#34;give-it-five-minutes&#34;&gt;Give it five minutes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://signalvnoise.com/posts/3124-give-it-five-minutes&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jason Fried where he explains why we should give ideas time to sink in and marinate, before dismissing them. Ideas are so fragile that it is better to let them live for a while before dismissing them. This also applies for thoughts (other people&amp;rsquo;s or your own).&lt;/p&gt;

&lt;p&gt;Tags: jason-fried, idea, think, startup, blue-hat, thinking-hat,  six-thinking-hats, red-hat&lt;/p&gt;

&lt;h2 id=&#34;reading-clojure-stacktraces&#34;&gt;Reading Clojure Stacktraces&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jayfields.com/2012/06/reading-clojure-stacktraces.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jay Fields on reading clojure stacktraces. Very similar to &amp;ldquo;Clojure Stack Traces for the Uninitiated&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: jay-fields, clojure, stacktrace&lt;/p&gt;

&lt;h2 id=&#34;clojure-stack-traces-for-the-uninitiated&#34;&gt;Clojure Stack Traces for the Uninitiated&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/connor-mendenhall/2014/09/12/clojure-stacktraces.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how to interpret clojure stacktraces. Written by Connor Mendenhall&lt;/p&gt;

&lt;p&gt;Tags: connor-mendenhall, clojure, stacktrace&lt;/p&gt;

&lt;h2 id=&#34;javascript-type-inference&#34;&gt;JavaScript type inference&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve found (and played) with &lt;a href=&#34;http://www.ccs.neu.edu/home/dimvar/jstypes.html&#34; target=&#34;_blank&#34;&gt;this JavaScript type inference engine&lt;/a&gt;. Written in Javascript (and available online). Written by Dimitrios Vardoulakis.&lt;/p&gt;

&lt;p&gt;Tags: javascript-type-inference, type-inference, type-inference-algorithm, dimitrios-vardoulakis, cfa2&lt;/p&gt;

&lt;h2 id=&#34;alternatives-to-boolean-parameters&#34;&gt;Alternatives to boolean parameters&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/dariusz-pasciak/2015/05/28/alternatives-to-boolean-parameters.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining alternatives to sending a boolean parameter to decide on the contents of the function. Written by Dariusz Pasciak&lt;/p&gt;

&lt;p&gt;As I heard some time ago, if a function receives a boolean to decide on what to do, it will for sure have more than one responsibility: one for the false value and one for the true value.&lt;/p&gt;

&lt;p&gt;Tags: dariusz-pasciak, boolean, srp, boolean-parameter&lt;/p&gt;

&lt;h2 id=&#34;why-are-web-uploads-so-painful&#34;&gt;Why Are Web Uploads So Painful?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/why-are-web-uploads-so-painful/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on web uploads being painful. By Jeff Atwood. The screenshots feel old (2007) and some of the problems have already been solved.&lt;/p&gt;

&lt;p&gt;Tags: jeff-atwood, article, upload, browser&lt;/p&gt;

&lt;h2 id=&#34;can-your-team-pass-the-elevator-test&#34;&gt;Can Your Team Pass The Elevator Test?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/can-your-team-pass-the-elevator-test/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the elevator test by Jeff Atwood.&lt;/p&gt;

&lt;p&gt;Tags: jeff-atwood, article, elevator-test, assumption, microsoft-bob, vision, product, feature&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>