<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/book/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/book/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Books read in 2018Q1</title>
      <link>https://alvarogarcia7.github.io/blog/2018/03/31/books-read-2018q1/</link>
      <pubDate>Sat, 31 Mar 2018 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/03/31/books-read-2018q1/</guid>
      <description>&lt;p&gt;Read this quarter:&lt;/p&gt;

&lt;p&gt;Note: re+read means I&amp;rsquo;m re-reading this book. The (+) stands for one-or-more times, as in the regexes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Odessa; Forsyth; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Bogle on mutual funds: new perspectives for the intelligent investor; Bogle; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Perros de la guerra, los; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;avaro y el oro, el; Esopo; non-technical&lt;/li&gt;
&lt;li&gt;Aulularia; Plauto; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Tus zonas erróneas; Dyer; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Alternativa del Diablo, la; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Guía, el; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Pied piper; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Hunt for the Red October, the; Clancy; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Peopleware; DeMarco, Lister (+); own-it&lt;/li&gt;
&lt;li&gt;Time to kill, a; Grisham; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Ética promiscua; Easton, Hardy; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Checklist manifesto, the; Gawande; own-it, non-technical, guillem. How complexity can be managed by the lowest-rung workers by using a simple process: a checklist.  The checklist is not a how-to list, but a list of well-known terms in the user jargon to remind them about actions to be performed.  These recipes are a source of knowledge, therefore can be shared among users&lt;/li&gt;
&lt;li&gt;Team geek (+); guillem, own-it&lt;/li&gt;
&lt;li&gt;Kata de la voluntad; guillem, non-technical&lt;/li&gt;
&lt;li&gt;Phoenix project, the ; Kim, Behr, Spafford; own-it&lt;/li&gt;
&lt;li&gt;Obstacle is the way, the; guillem, non-technical&lt;/li&gt;
&lt;li&gt;Guide to stoicism, a; Stock; own-it, non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- copy-paste the books.md here --&gt;

&lt;p&gt;backlog (partially sorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unsorted V&lt;/li&gt;
&lt;li&gt;The Machine That Changed the World: The Story of Lean Production&lt;/li&gt;
&lt;li&gt;Haskell Programming&lt;/li&gt;
&lt;li&gt;Software Architecture in Practice&lt;/li&gt;
&lt;li&gt;The five disfunctions of a team: a leadership fable; Lencioni&lt;/li&gt;
&lt;li&gt;lucha por la desigualdad, la; Pontón; non-technical&lt;/li&gt;
&lt;li&gt;psicología del dinero, la; Hammond; non-technical&lt;/li&gt;
&lt;li&gt;Invirtiendo a largo plazo; García Paramés; non-technical&lt;/li&gt;
&lt;li&gt;Well-Grounded Java Developer, the; own-it&lt;/li&gt;
&lt;li&gt;Learn You a Haskell for Great Good!; own-it&lt;/li&gt;
&lt;li&gt;camino al 18J, el; Payne; non-technical&lt;/li&gt;
&lt;li&gt;Cartas desde la revolución bolchevique; Sadoul; non-technical&lt;/li&gt;
&lt;li&gt;Java Performance: The Definitive Guide&lt;/li&gt;
&lt;li&gt;Why programmers work at night&lt;/li&gt;
&lt;li&gt;Shogun: The Life of Tokugawa Ieyasu; Sadler; non-technical&lt;/li&gt;
&lt;li&gt;Scrum and XP from the trenches, 2nd edition;&lt;/li&gt;
&lt;li&gt;Els jueus i Catalunya; Villatoro; non-technical&lt;/li&gt;
&lt;li&gt;El problema de los tres cuerpos; Liu; non-technical&lt;/li&gt;
&lt;li&gt;Amazon Web Services in Action; own-it&lt;/li&gt;
&lt;li&gt;Clojure Programming - Practical Lisp for the Java World&lt;/li&gt;
&lt;li&gt;Mature optimization&lt;/li&gt;
&lt;li&gt;XUnit Test Patterns&lt;/li&gt;
&lt;li&gt;Let Over Lambda&lt;/li&gt;
&lt;li&gt;The Haskell Road to Logic, Math and Programming&lt;/li&gt;
&lt;li&gt;Types and Programming Languages&lt;/li&gt;
&lt;li&gt;Fundamentals of Object-oriented Design in UML&lt;/li&gt;
&lt;li&gt;Clojure for the brave and true&lt;/li&gt;
&lt;li&gt;How to Solve It: A New Aspect of Mathematical Method&lt;/li&gt;
&lt;li&gt;Conceptual Mathematics: A First Introduction to Categories&lt;/li&gt;
&lt;li&gt;Understanding Computation: From Simple Machines to Impossible Programs&lt;/li&gt;
&lt;li&gt;Programming in Haskell&lt;/li&gt;
&lt;li&gt;Programming Languages: Application and Interpretation&lt;/li&gt;
&lt;li&gt;Doing Math with Python&lt;/li&gt;
&lt;li&gt;Perfect Software: And Other Illusions about Testing&lt;/li&gt;
&lt;li&gt;Computability and Complexity - From a Programming Perspective&lt;/li&gt;
&lt;li&gt;Thinking Forth: a language and philosophy for solving problems&lt;/li&gt;
&lt;li&gt;Concepts, Techniques, and Models of Computer Programming&lt;/li&gt;
&lt;li&gt;Bridging the Communication Gap; Adzic&lt;/li&gt;
&lt;li&gt;Specification by Example; Adzic&lt;/li&gt;
&lt;li&gt;Cucumber book, the; Adzic&lt;/li&gt;
&lt;li&gt;Software Architecture for Developers; Brown&lt;/li&gt;
&lt;li&gt;Object Design: Roles, Responsibilities, and Collaborations&lt;/li&gt;
&lt;li&gt;RESTful Web APIs&lt;/li&gt;
&lt;li&gt;RESTful Web Services Cookbook&lt;/li&gt;
&lt;li&gt;Building Maintainable Software&lt;/li&gt;
&lt;li&gt;Serverless - Patterns of Modern Application Design Using Microservices (Amazon Web Services Edition)&lt;/li&gt;
&lt;li&gt;A Pattern Language; Alexander&lt;/li&gt;
&lt;li&gt;Types and Programming Languages, TAPL; Pierce; own-it&lt;/li&gt;
&lt;li&gt;Speed Reading Book: Read More, Learn More, Achieve More, the; Buzan&lt;/li&gt;
&lt;li&gt;Cómo crear mapas mentales (Crecimiento personal); Buzan&lt;/li&gt;
&lt;li&gt;First things first; Covey&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s best next; Perman&lt;/li&gt;
&lt;li&gt;problems of philosophy, the; Russell&lt;/li&gt;
&lt;li&gt;Requiem for the American dream; Chomsky&lt;/li&gt;
&lt;li&gt;sun also rises, the; Hemingway&lt;/li&gt;
&lt;li&gt;travels, the; Polo; non-technical&lt;/li&gt;
&lt;li&gt;Homo Deus: A Brief History of Tomorrow; Harari; non-technical&lt;/li&gt;
&lt;li&gt;Books by Aristotle; non-technical&lt;/li&gt;
&lt;li&gt;Books by Plato&lt;/li&gt;
&lt;li&gt;Books by Descartes&lt;/li&gt;
&lt;li&gt;The idea of culture; Eagleton&lt;/li&gt;
&lt;li&gt;Hereditary Intelligence; Galton; non-technical&lt;/li&gt;
&lt;li&gt;Lean Software Development: An Agile Toolkit; Poppendieck&lt;/li&gt;
&lt;li&gt;Chaos Monkeys: Obscene Fortune and Random Failure; Garcia Martinez&lt;/li&gt;
&lt;li&gt;Implementing Lean Software Development: From Concept to Cash; Poppendieck&lt;/li&gt;
&lt;li&gt;Joel on Software; Spolsky&lt;/li&gt;
&lt;li&gt;Death March; Yourdon&lt;/li&gt;
&lt;li&gt;Psychology of Computer Programming, The; Weinberg&lt;/li&gt;
&lt;li&gt;Introduction to General Systems Thinking; Weinberg&lt;/li&gt;
&lt;li&gt;En defensa de los ociosos; Stevenson; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Lao Tzu : Tao Te Ching : A Book About the Way and the Power of the Way; Tzu, Le Guin; non-technical&lt;/li&gt;
&lt;li&gt;Gay Science, the; Nietzsche; non-technical&lt;/li&gt;
&lt;li&gt;Being Geek; Lopp&lt;/li&gt;
&lt;li&gt;Finance for Freelancers; Retallick&lt;/li&gt;
&lt;li&gt;Object-oriented software engineering: a use case driven approach; Jacobson&lt;/li&gt;
&lt;li&gt;Patterns of Enterprise Application Architecture; Fowler; own-it&lt;/li&gt;
&lt;li&gt;Thinking fast and slow; Kahneman; non-technical&lt;/li&gt;
&lt;li&gt;Emotional intelligence; Goleman; non-technical&lt;/li&gt;
&lt;li&gt;Ética a Nicómaco; Aristotle; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Romeo y Julieta; Shakespeare; non-technical&lt;/li&gt;
&lt;li&gt;Computer Systems: A Programmer’s Perspective; Bryant, O&amp;rsquo;Hallaron&lt;/li&gt;
&lt;li&gt;My Journey to Lhasa: The Classic Story of the Only Western Woman Who Succeeded in Entering the Forbidden City; David-Néel; non-technical&lt;/li&gt;
&lt;li&gt;Cathedral and the bazaar, the ; Raymond&lt;/li&gt;
&lt;li&gt;Coding dojo handbook, the; Bache; own-it&lt;/li&gt;
&lt;li&gt;Making software; Oram and Wilson; own-it&lt;/li&gt;
&lt;li&gt;Code complete; McConnell; own-it&lt;/li&gt;
&lt;li&gt;Soft skills; Sonmez; own-it&lt;/li&gt;
&lt;li&gt;DSLs in action; Ghosh; own-it&lt;/li&gt;
&lt;li&gt;Purely functional data structures; Okasaki; own-it&lt;/li&gt;
&lt;li&gt;Working effectively with unit tests; Fields (+); own-it&lt;/li&gt;
&lt;li&gt;First Nazi, the; Ludendorff; non-technical&lt;/li&gt;
&lt;li&gt;Greatest story ever told &amp;hellip; so far; Krauss; non-technical&lt;/li&gt;
&lt;li&gt;Master algorithm, the; Domingos; non-technical&lt;/li&gt;
&lt;li&gt;Invention of Science, the; Wootton; non-technical&lt;/li&gt;
&lt;li&gt;Tesla: Inventor of the electrical age; Bernard Carlson; non-technical&lt;/li&gt;
&lt;li&gt;Psychology in minutes; Weeks; non-technical&lt;/li&gt;
&lt;li&gt;Alan Turing: The Enigma; Hodges; non-technical&lt;/li&gt;
&lt;li&gt;How to think more about sex; de Botton; non-technical&lt;/li&gt;
&lt;li&gt;Piccolo manuale di persuasione; Taylor; non-technical&lt;/li&gt;
&lt;li&gt;arte de la guerra, el; Sun Tzu; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Piccolo manuale di leadership Confuciana; Adair; non-technical&lt;/li&gt;
&lt;li&gt;How to Stop Worrying and Start Living; Carnegie; non-technical&lt;/li&gt;
&lt;li&gt;Uomo - Guida allo stile; Roetzel; non-technical&lt;/li&gt;
&lt;li&gt;Unwritten Laws of Engineering: Revised and Updated Edition; King&lt;/li&gt;
&lt;li&gt;Test-Driven JavaScript Development (Developer&amp;rsquo;s Library); Johansen&lt;/li&gt;
&lt;li&gt;Test Driven Development: By Example; Beck&lt;/li&gt;
&lt;li&gt;Arquitectura Java JPA Domain Driven Design; Alvárez, Peláez&lt;/li&gt;
&lt;li&gt;End of loyalty, the; Wartzman; non-technical&lt;/li&gt;
&lt;li&gt;Basic Economics; Sowell; non-technical&lt;/li&gt;
&lt;li&gt;Introduction to Economic Analysis; McAfee; non-technical&lt;/li&gt;
&lt;li&gt;Patterns of Software; Gabriel&lt;/li&gt;
&lt;li&gt;Coders at work; Seibel&lt;/li&gt;
&lt;li&gt;Clean architecture; Martin&lt;/li&gt;
&lt;li&gt;How to Be a Stoic: Using Ancient Philosophy to Live a Modern Life; Pigliucci; non-technical&lt;/li&gt;
&lt;li&gt;Introduction to Object-Oriented Programming, an; Budd&lt;/li&gt;
&lt;li&gt;Gafas de la felicidad, las; Santandreu; non-technical&lt;/li&gt;
&lt;li&gt;Ser feliz en Alaska; Santandreu; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Mochila para el universo, una; Punset; non-technical&lt;/li&gt;
&lt;li&gt;Gods themselves, the; Asimov; non-technical&lt;/li&gt;
&lt;li&gt;Panamá papers, the; Obermayer, Obermaier; non-technical&lt;/li&gt;
&lt;li&gt;Originals; Grant; non-technical&lt;/li&gt;
&lt;li&gt;Optimism over despair; Chomsky; non-technical&lt;/li&gt;
&lt;li&gt;SCIENCE OF BREATH: A Practical Guide; Ballentine, Hymes; non-technical&lt;/li&gt;
&lt;li&gt;Yoga Explained: A New Step-by-step Approach to Understanding and Practising Yoga; Mehta,‎ Arjunwadkar; non-technical&lt;/li&gt;
&lt;li&gt;Wanderlust: A Modern Yogi&amp;rsquo;s Guide to Discovering Your Best Self; Krasno; non-technical&lt;/li&gt;
&lt;li&gt;How to Think About Money; Clements; non-technical, finance&lt;/li&gt;
&lt;li&gt;By Way of Deception; Ostrovsky; non-technical&lt;/li&gt;
&lt;li&gt;Printemps des sayanim, le; Cohen; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Deep work; Newport; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Hooked: How to Build Habit-Forming Products; Eyal, Hoover; non-technical&lt;/li&gt;
&lt;li&gt;Irresistible: The Rise of Addictive Technology and the Business of Keeping Us Hooked; Alter; non-technical&lt;/li&gt;
&lt;li&gt;The Attention Merchants: The Epic Scramble to Get Inside Our Heads; Wu; non-technical&lt;/li&gt;
&lt;li&gt;Willpower: Why Self-Control is The Secret to Success; Baumeister, Tierney; non-technical&lt;/li&gt;
&lt;li&gt;Principles of Psychology, the; James; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Our mutual friend; Dickens; non-technical&lt;/li&gt;
&lt;li&gt;Crucial Conversations: Tools for Talking When Stakes Are High, Second Edition; Patterson, Grenny, McMillan, Switzler; non-technical&lt;/li&gt;
&lt;li&gt;Amusing Ourselves to Death - Public Discourse in the Age of Show Business; Postman; non-technical&lt;/li&gt;
&lt;li&gt;Mastery; Greene; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Silence in the age of noise; Kagge; non-technical&lt;/li&gt;
&lt;li&gt;Functional programming simplified; Alexander; own-it&lt;/li&gt;
&lt;li&gt;Your money or your life; Dominguez, Robin; non-technical, finance&lt;/li&gt;
&lt;li&gt;Batalla del Ebro, la; Reverte; non-technical&lt;/li&gt;
&lt;li&gt;Historia de la guerra civil española; Rojo; non-technical&lt;/li&gt;
&lt;li&gt;Lucha por el poder, la; Evans; non-technical&lt;/li&gt;
&lt;li&gt;Revolución rusa, la; Pipes; non-technical&lt;/li&gt;
&lt;li&gt;Holocausto, el; Rees; non-technical&lt;/li&gt;
&lt;li&gt;Martín Lutero, renegado y Profeta; Roper; non-technical&lt;/li&gt;
&lt;li&gt;Siglo de la revolución, el ; Fontana; non-technical&lt;/li&gt;
&lt;li&gt;Història de la revolución rusa; Trotsky; non-technical&lt;/li&gt;
&lt;li&gt;Dispossessed, the; Le Guin; non-technical&lt;/li&gt;
&lt;li&gt;Left hand of darkness; Le Guin; non-technical&lt;/li&gt;
&lt;li&gt;Lathe of heaven; Le Guin; non-technical&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Schopenhauer-Cure-Novel-Irvin-Yalom/dp/0060938102/&#34; target=&#34;_blank&#34;&gt;https://www.amazon.com/Schopenhauer-Cure-Novel-Irvin-Yalom/dp/0060938102/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/How-Schopenhauer-Through-Mid-Life-Crisis-ebook/dp/B00QXNB5PC/&#34; target=&#34;_blank&#34;&gt;https://www.amazon.com/How-Schopenhauer-Through-Mid-Life-Crisis-ebook/dp/B00QXNB5PC/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Books in general &amp;ndash; Epstein&lt;/li&gt;
&lt;li&gt;Affluent society, the; Galbraith; non-technical, finance&lt;/li&gt;
&lt;li&gt;Philosophy of the Buddha; Bahm; non-technical&lt;/li&gt;
&lt;li&gt;Tribe of mentors; guillem, non-technical, own-it&lt;/li&gt;
&lt;li&gt;5 dysfunctions of a team; non-technical&lt;/li&gt;
&lt;li&gt;Ziglar&amp;rsquo;s Top Performance; non-technical&lt;/li&gt;
&lt;li&gt;Pragmatic Programmer (+)&lt;/li&gt;
&lt;li&gt;High Output Management; Grove; non-technical&lt;/li&gt;
&lt;li&gt;First Break All the Rules; non-technical&lt;/li&gt;
&lt;li&gt;Managing for happiness; Appelo; non-technical&lt;/li&gt;
&lt;li&gt;How to be a stoic - Pugliucci; non-technical&lt;/li&gt;
&lt;li&gt;Why budism is true; Wright; non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;unfinished (unsorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Effective Java; Bloch; own-it&lt;/li&gt;
&lt;li&gt;Functional Programming Patterns in Scala and Clojure; own-it&lt;/li&gt;
&lt;li&gt;Release It! - Design and Deploy Production-Ready Software; own-it&lt;/li&gt;
&lt;li&gt;Refactoring (+); Fowler; own-it&lt;/li&gt;
&lt;li&gt;Leprechauns of Software Engineering (+), the; Bossavit; own-it&lt;/li&gt;
&lt;li&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software; Vernon (+); own-it&lt;/li&gt;
&lt;li&gt;Pragmatic Thinking and Learning: Refactor Your Wetware; own-it&lt;/li&gt;
&lt;li&gt;Readings in Database Systems, 5th Edition; own-it&lt;/li&gt;
&lt;li&gt;Structure and Interpretation of Computer Programs (SICP); Abelson, Sussmann, Sussmann; own-it&lt;/li&gt;
&lt;li&gt;La Sociedad De Coste Marginal Cero (Estado y Sociedad); Rifkin; non-technical&lt;/li&gt;
&lt;li&gt;Odisea; Homero; non-technical&lt;/li&gt;
&lt;li&gt;Switch: How to Change Things When Change Is Hard; Heath, Heath; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Como leer un libro; Adler, van Doren; non-technical, own-it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;next (2):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Who rules the world?; Chomsky; non-technical&lt;/li&gt;
&lt;li&gt;Working Effectively with Legacy Code (+); Feathers; own-it&lt;/li&gt;
&lt;li&gt;Nonviolent communication (+); Rosenberg; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Introduction to Buddhism: Teachings, History and Practices, an; Harvey; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Meditations; Marcus Aurelius; non-technical, own-it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;wip (2):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Continuous Delivery; Humble, Farley; own-it&lt;/li&gt;
&lt;li&gt;Prince, the; Macchiavello; non-technical, own-it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Senior software developer, the; Copeland; own-it&lt;/li&gt;
&lt;li&gt;Scandal in Bohemia, a; Doyle; own-it&lt;/li&gt;
&lt;li&gt;Getting things done, &amp;hellip;; Allen (+); own-it, non-technical&lt;/li&gt;
&lt;li&gt;Nature of Software Development, the; Jeffries; own-it&lt;/li&gt;
&lt;li&gt;Team Geek; Fitzpatrick, Collins-Sussman; own-it&lt;/li&gt;
&lt;li&gt;Aprendo Yoga; Van Lysebeth; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Clean Coder: A Code of Conduct for Professional Programmers, the; Martin; own-it&lt;/li&gt;
&lt;li&gt;ML for the working programmer, 2nd edition [5th chapter only]; Paulson; own-it&lt;/li&gt;
&lt;li&gt;Lazarillo de Tormes, el; anónimo; non-technical&lt;/li&gt;
&lt;li&gt;Tom Clancy&amp;rsquo;s power plays - Politika; Preisler; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Moon is a harsh mistress, the; Heinlein; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Old man&amp;rsquo;s war; Scalzi; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Nightfall; Asimov, Silverberg; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Interface; Stephenson, George; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Man who sold the moon, the; Heinlein; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Agents of innocence; Ignatius; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Fist of god, the; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Avaro, el; Molière; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Bogleheads’ Guide to Investing, the; Larimore, Lindauer, LeBoeuf; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Lazyperson&amp;rsquo;s guide to investment; Farrell; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Millionaire next door, the; Stanley, Danko; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Little Book of Common Sense Investing; Bogle; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Monje que vendió su Ferrari, el; Sharma; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Siddhartha; Hesse; non-technical, own-it&lt;/li&gt;
&lt;li&gt;If you can: how millenials can get rich slowly; Bernstein; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Odessa; Forsyth; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Bogle on mutual funds: new perspectives for the intelligent investor; Bogle; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Perros de la guerra, los; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;avaro y el oro, el; Esopo; non-technical&lt;/li&gt;
&lt;li&gt;Aulularia; Plauto; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Tus zonas erróneas; Dyer; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Alternativa del Diablo, la; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Guía, el; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Pied piper; Forsyth; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Hunt for the Red October, the; Clancy; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Peopleware; DeMarco, Lister (+); own-it&lt;/li&gt;
&lt;li&gt;Time to kill, a; Grisham; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Ética promiscua; Easton, Hardy; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Checklist manifesto, the; Gawande; own-it, non-technical, guillem&lt;/li&gt;
&lt;li&gt;Team geek (+); guillem, own-it&lt;/li&gt;
&lt;li&gt;Kata de la voluntad; guillem, non-technical&lt;/li&gt;
&lt;li&gt;Phoenix project, the ; Kim, Behr, Spafford; own-it&lt;/li&gt;
&lt;li&gt;Obstacle is the way, the; guillem, non-technical&lt;/li&gt;
&lt;li&gt;Guide to stoicism, a; Stock; own-it, non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;rejected:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stanger in a strange land; Heinlein; own-it, non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;lists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/review/list/246177-rob?shelf=non-fiction-for-humans&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/review/list/246177-rob?shelf=non-fiction-for-humans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/451.Best_Philosophy_Book&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/451.Best_Philosophy_Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/8379.Software_Craftsmanship&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/8379.Software_Craftsmanship&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.ycombinator.com/ycs-2017-summer-reading-list/&#34; target=&#34;_blank&#34;&gt;https://blog.ycombinator.com/ycs-2017-summer-reading-list/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/107321.TI2011_Course&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/107321.TI2011_Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/12287.Fog_Creek_Software_Management_Training_Program&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/12287.Fog_Creek_Software_Management_Training_Program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/12351.Books_on_Stoic_Philosophy&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/12351.Books_on_Stoic_Philosophy&lt;/a&gt;; non-technical&lt;/li&gt;
&lt;li&gt;Tom clancy&amp;rsquo;s power plays&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.thriveglobal.com/stories/17969-11-top-positive-psychology-books-that-will-improve-your-work-and-life&#34; target=&#34;_blank&#34;&gt;https://www.thriveglobal.com/stories/17969-11-top-positive-psychology-books-that-will-improve-your-work-and-life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Investing: &lt;a href=&#34;http://efficientfrontier.com/reading.htm&#34; target=&#34;_blank&#34;&gt;http://efficientfrontier.com/reading.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Investing, personal finance: &lt;a href=&#34;https://www.goodreads.com/review/list/5876938-tyler?shelf=personal-finance&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/review/list/5876938-tyler?shelf=personal-finance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Investing: &lt;a href=&#34;http://lemkingroup.com/ListOfPersonalFinanceBooks.html#SelectedWebSites&#34; target=&#34;_blank&#34;&gt;http://lemkingroup.com/ListOfPersonalFinanceBooks.html#SelectedWebSites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;High performance organizations: &lt;a href=&#34;https://github.com/pdfernhout/High-Performance-Organizations-Reading-List&#34; target=&#34;_blank&#34;&gt;https://github.com/pdfernhout/High-Performance-Organizations-Reading-List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For becoming a manager / team management: &lt;a href=&#34;https://news.ycombinator.com/item?id=16151067&#34; target=&#34;_blank&#34;&gt;https://news.ycombinator.com/item?id=16151067&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Books read in 2017Q4</title>
      <link>https://alvarogarcia7.github.io/blog/2017/12/31/books-read-2017q4/</link>
      <pubDate>Sun, 31 Dec 2017 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/12/31/books-read-2017q4/</guid>
      <description>&lt;p&gt;Read this quarter:&lt;/p&gt;

&lt;p&gt;Note: re+read means I&amp;rsquo;m re-reading this book. The (+) stands for one-or-more times, as in the regexes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lazarillo de Tormes, el; anónimo; non-technical&lt;/li&gt;
&lt;li&gt;Tom Clancy&amp;rsquo;s power plays - Politika; Preisler; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Moon is a harsh mistress, the; Heinlein; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Old man&amp;rsquo;s war; Scalzi; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Nightfall; Asimov, Silverberg; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Interface; Stephenson, George; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Man who sold the moon, the; Heinlein; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Agents of innocence; Ignatius; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Fist of god, the; Forsyth; own-it, non-technical: Synopsis: in a mixture of truth and novel, the author explains the invasion of Kuwait by Iraqi dictator Sadam Hussein. During that war, the development and destruction of some atomic bomb (&amp;lsquo;the fist of god&amp;rsquo;), the spy games played by the Americans and Brits to infiltrate the government at the highest levels.  Explains in laymen&amp;rsquo;s terms how the Israeli Mossad (&amp;lsquo;the institute&amp;rsquo;) works, how the katsa (case officers) work, the sayan(im) (dormant agents) work. How deception is used to extract information from third parties and how that information is sometimes passed, hidden, retransmitted and share among governments, agencies, armies and to the general public.  It is interesting to read this mixture of truth and reality, never knowing which is which but letting the imagination roam freely.&lt;/li&gt;
&lt;li&gt;Avaro, el; Molière; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Bogleheads’ Guide to Investing, the; Larimore, Lindauer, LeBoeuf; own-it, non-technical, finance. Synopsis: this book explains, with plenty of supporting studies and investigation, why index investing is cheaper and more beneficial in the long term for the unsophisticated investor. The authors explain why being a passive investor (i.e., lazy portfolio) is more effective than active investing (i.e., actively managed portfolio), beating 80% of the money managers.  How, for the average investor, the act of investing resembles the game of horseshoes (similar to petanque) more than darts. How it is good enough to approximate the market rather than trying to beat the market.&lt;/li&gt;
&lt;li&gt;Lazyperson&amp;rsquo;s guide to investment; Farrell; own-it, non-technical, finance. Synopsis: this book explains in laymen&amp;rsquo;s terms what lazy portfolios are and how, in average, beat the returns by actively-managed portfolios.  Details a few lazy portfolios, along with their respective past performances.&lt;/li&gt;
&lt;li&gt;Millionaire next door, the; Stanley, Danko; own-it, non-technical, finance. Synopsis: a 1996 study of Accumulators of wealth (under, average, prodigious), detailing how American millionaires behave.  The main conclusion is that PAWs are frugal, have a budget and know exactly how much it is spent in each category and live well below their means.  There is plenty of categories where the authors explain how they behave. There is an important distinction between PAWs and affluent people. The latter acquire &amp;ldquo;signs of wealth&amp;rdquo; (e.g., expensive items) before being rich, the former do it after.  The formula for expected accumulation of wealth is &lt;code&gt;age * total yearly income / 10&lt;/code&gt;.  example: age 45, income 25.000 -&amp;gt; expected wealth = &lt;code&gt;45 * 25000/10&lt;/code&gt; = 112500&lt;/li&gt;
&lt;li&gt;Little Book of Common Sense Investing; Bogle; own-it, non-technical, finance&lt;/li&gt;
&lt;li&gt;Monje que vendió su Ferrari, el; Sharma; own-it, non-technical. Synopsis: explains the transformation of a successful lawyer, that goes to India to learn from the Sivana monks.  Seven techniques, each with a corresponding symbol to represent it, to improve the everyday life&lt;/li&gt;
&lt;li&gt;Siddhartha; Hesse; non-technical, own-it: Synopsis: explains the life of a contemporary of Buddha, altough the story is not really related to Gautama himself, but to the main character, Siddharta.  From a well-off family, abandons his possessions to join a group of ascetics and becomes a samana (or sramana - &lt;a href=&#34;https://en.wikipedia.org/wiki/%C5%9Arama%E1%B9%87a&#34; target=&#34;_blank&#34;&gt;https://en.wikipedia.org/wiki/%C5%9Arama%E1%B9%87a&lt;/a&gt;). After that, both the Siddharta and Govinda (his friend) leave the ascetics, Govinda to join Gautama and Siddharta to go on his path. The latter goes and finds a ferryman (Vasudeva) along the way, with whom creates a friendship. Goes to the city, where he pursues riches (with a merchant, Kamaswami) and pleasure (with a courtesan, Kamala). Still thirsty with an unquenchable thirst, he abandons his current life. On the way back, he finds the ferryman, who teaches him to listen to the river. They live together for a long time until Siddhartha&amp;rsquo;s son &amp;ndash;a son he had with Kamala&amp;ndash; makes an appearance. The son tests Siddhartha&amp;rsquo;s personality.&lt;/li&gt;
&lt;li&gt;If you can: how millenials can get rich slowly; Bernstein; own-it, non-technical, finance
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- copy-paste the books.md here --&gt;

&lt;p&gt;backlog (partially sorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unsorted V&lt;/li&gt;
&lt;li&gt;The Machine That Changed the World: The Story of Lean Production&lt;/li&gt;
&lt;li&gt;Haskell Programming&lt;/li&gt;
&lt;li&gt;Software Architecture in Practice&lt;/li&gt;
&lt;li&gt;The five disfunctions of a team: a leadership fable; Lencioni&lt;/li&gt;
&lt;li&gt;Phoenix project, the ; Kim, Behr, Spafford&lt;/li&gt;
&lt;li&gt;lucha por la desigualdad, la; Pontón; non-technical&lt;/li&gt;
&lt;li&gt;psicología del dinero, la; Hammond; non-technical&lt;/li&gt;
&lt;li&gt;Invirtiendo a largo plazo; García Paramés; non-technical&lt;/li&gt;
&lt;li&gt;Well-Grounded Java Developer, the; own-it&lt;/li&gt;
&lt;li&gt;Quién domina el mundo; Chomsky; non-technical&lt;/li&gt;
&lt;li&gt;Learn You a Haskell for Great Good!; own-it&lt;/li&gt;
&lt;li&gt;camino al 18J, el; Payne; non-technical&lt;/li&gt;
&lt;li&gt;Cartas desde la revolución bolchevique; Sadoul; non-technical&lt;/li&gt;
&lt;li&gt;Java Performance: The Definitive Guide&lt;/li&gt;
&lt;li&gt;Why programmers work at night&lt;/li&gt;
&lt;li&gt;Shogun: The Life of Tokugawa Ieyasu; Sadler; non-technical&lt;/li&gt;
&lt;li&gt;Scrum and XP from the trenches, 2nd edition;&lt;/li&gt;
&lt;li&gt;Els jueus i Catalunya; Villatoro; non-technical&lt;/li&gt;
&lt;li&gt;El problema de los tres cuerpos; Liu; non-technical&lt;/li&gt;
&lt;li&gt;Amazon Web Services in Action; own-it&lt;/li&gt;
&lt;li&gt;Clojure Programming - Practical Lisp for the Java World&lt;/li&gt;
&lt;li&gt;Mature optimization&lt;/li&gt;
&lt;li&gt;XUnit Test Patterns&lt;/li&gt;
&lt;li&gt;Let Over Lambda&lt;/li&gt;
&lt;li&gt;The Haskell Road to Logic, Math and Programming&lt;/li&gt;
&lt;li&gt;Types and Programming Languages&lt;/li&gt;
&lt;li&gt;Fundamentals of Object-oriented Design in UML&lt;/li&gt;
&lt;li&gt;Clojure for the brave and true&lt;/li&gt;
&lt;li&gt;How to Solve It: A New Aspect of Mathematical Method&lt;/li&gt;
&lt;li&gt;Conceptual Mathematics: A First Introduction to Categories&lt;/li&gt;
&lt;li&gt;Understanding Computation: From Simple Machines to Impossible Programs&lt;/li&gt;
&lt;li&gt;Programming in Haskell&lt;/li&gt;
&lt;li&gt;Programming Languages: Application and Interpretation&lt;/li&gt;
&lt;li&gt;Doing Math with Python&lt;/li&gt;
&lt;li&gt;Perfect Software: And Other Illusions about Testing&lt;/li&gt;
&lt;li&gt;Computability and Complexity - From a Programming Perspective&lt;/li&gt;
&lt;li&gt;Thinking Forth: a language and philosophy for solving problems&lt;/li&gt;
&lt;li&gt;Concepts, Techniques, and Models of Computer Programming&lt;/li&gt;
&lt;li&gt;Bridging the Communication Gap; Adzic&lt;/li&gt;
&lt;li&gt;Specification by Example; Adzic&lt;/li&gt;
&lt;li&gt;Cucumber book, the; Adzic&lt;/li&gt;
&lt;li&gt;Software Architecture for Developers; Brown&lt;/li&gt;
&lt;li&gt;Object Design: Roles, Responsibilities, and Collaborations&lt;/li&gt;
&lt;li&gt;RESTful Web APIs&lt;/li&gt;
&lt;li&gt;RESTful Web Services Cookbook&lt;/li&gt;
&lt;li&gt;Building Maintainable Software&lt;/li&gt;
&lt;li&gt;Serverless - Patterns of Modern Application Design Using Microservices (Amazon Web Services Edition)&lt;/li&gt;
&lt;li&gt;A Pattern Language; Alexander&lt;/li&gt;
&lt;li&gt;Types and Programming Languages, TAPL; Pierce; own-it&lt;/li&gt;
&lt;li&gt;Speed Reading Book: Read More, Learn More, Achieve More, the; Buzan&lt;/li&gt;
&lt;li&gt;Cómo crear mapas mentales (Crecimiento personal); Buzan&lt;/li&gt;
&lt;li&gt;First things first; Covey&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s best next; Perman&lt;/li&gt;
&lt;li&gt;problems of philosophy, the; Russell&lt;/li&gt;
&lt;li&gt;Requiem for the American dream; Chomsky&lt;/li&gt;
&lt;li&gt;sun also rises, the; Hemingway&lt;/li&gt;
&lt;li&gt;travels, the; Polo; non-technical&lt;/li&gt;
&lt;li&gt;Homo Deus: A Brief History of Tomorrow; Harari; non-technical&lt;/li&gt;
&lt;li&gt;Books by Aristotle; non-technical&lt;/li&gt;
&lt;li&gt;Books by Plato&lt;/li&gt;
&lt;li&gt;Books by Descartes&lt;/li&gt;
&lt;li&gt;The idea of culture; Eagleton&lt;/li&gt;
&lt;li&gt;Hereditary Intelligence; Galton; non-technical&lt;/li&gt;
&lt;li&gt;Lean Software Development: An Agile Toolkit; Poppendieck&lt;/li&gt;
&lt;li&gt;Peopleware*; De Marco&lt;/li&gt;
&lt;li&gt;Chaos Monkeys: Obscene Fortune and Random Failure; Garcia Martinez&lt;/li&gt;
&lt;li&gt;Implementing Lean Software Development: From Concept to Cash; Poppendieck&lt;/li&gt;
&lt;li&gt;Joel on Software; Spolsky&lt;/li&gt;
&lt;li&gt;Death March; Yourdon&lt;/li&gt;
&lt;li&gt;Psychology of Computer Programming, The; Weinberg&lt;/li&gt;
&lt;li&gt;Introduction to General Systems Thinking; Weinberg&lt;/li&gt;
&lt;li&gt;Lao Tzu : Tao Te Ching : A Book About the Way and the Power of the Way; Tzu, Le Guin; non-technical&lt;/li&gt;
&lt;li&gt;Gay Science, the; Nietzsche; non-technical&lt;/li&gt;
&lt;li&gt;Being Geek; Lopp&lt;/li&gt;
&lt;li&gt;Finance for Freelancers; Retallick&lt;/li&gt;
&lt;li&gt;Object-oriented software engineering: a use case driven approach; Jacobson&lt;/li&gt;
&lt;li&gt;Patterns of Enterprise Application Architecture; Fowler; own-it&lt;/li&gt;
&lt;li&gt;Thinking fast and slow; Kahneman&lt;/li&gt;
&lt;li&gt;Emotional intelligence; Goleman&lt;/li&gt;
&lt;li&gt;Ética a Nicómaco; Aristotle; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Romeo y Julieta; Shakespeare; non-technical&lt;/li&gt;
&lt;li&gt;Computer Systems: A Programmer’s Perspective; Bryant, O&amp;rsquo;Hallaron&lt;/li&gt;
&lt;li&gt;My Journey to Lhasa: The Classic Story of the Only Western Woman Who Succeeded in Entering the Forbidden City; David-Néel; non-technical&lt;/li&gt;
&lt;li&gt;Cathedral and the bazaar, the ; Raymond&lt;/li&gt;
&lt;li&gt;Coding dojo handbook, the; Bache; own-it&lt;/li&gt;
&lt;li&gt;Making software; Oram and Wilson; own-it&lt;/li&gt;
&lt;li&gt;Code complete; McConnell&lt;/li&gt;
&lt;li&gt;Soft skills; Sonmez; own-it&lt;/li&gt;
&lt;li&gt;DSLs in action; Ghosh; own-it&lt;/li&gt;
&lt;li&gt;purely functional data structures; Okasaki; own-it&lt;/li&gt;
&lt;li&gt;Working effectively with unit tests; Fields (+); own-it&lt;/li&gt;
&lt;li&gt;First Nazi, the; Ludendorff&lt;/li&gt;
&lt;li&gt;Greatest story ever told &amp;hellip; so far; Krauss; non-technical&lt;/li&gt;
&lt;li&gt;Master algorithm, the; Domingos; non-technical&lt;/li&gt;
&lt;li&gt;Invention of Science, the; Wootton; non-technical&lt;/li&gt;
&lt;li&gt;Tesla: Inventor of the electrical age; Bernard Carlson; non-technical&lt;/li&gt;
&lt;li&gt;Psychology in minutes; Weeks; non-technical&lt;/li&gt;
&lt;li&gt;Alan Turing: The Enigma; Hodges; non-technical&lt;/li&gt;
&lt;li&gt;How to think more about sex; de Botton; non-technical&lt;/li&gt;
&lt;li&gt;Piccolo manuale di persuasione; Taylor; non-technical&lt;/li&gt;
&lt;li&gt;arte de la guerra, el; Sun Tzu; non-technical&lt;/li&gt;
&lt;li&gt;Piccolo manuale di leadership Confuciana; Adair; non-technical&lt;/li&gt;
&lt;li&gt;How to Stop Worrying and Start Living; Carnegie; non-technical&lt;/li&gt;
&lt;li&gt;Uomo - Guida allo stile; Roetzel; non-technical&lt;/li&gt;
&lt;li&gt;Unwritten Laws of Engineering: Revised and Updated Edition; King&lt;/li&gt;
&lt;li&gt;Test-Driven JavaScript Development (Developer&amp;rsquo;s Library); Johansen&lt;/li&gt;
&lt;li&gt;Test Driven Development: By Example; Beck&lt;/li&gt;
&lt;li&gt;Arquitectura Java JPA Domain Driven Design; Alvárez, Peláez&lt;/li&gt;
&lt;li&gt;End of loyalty, the; Wartzman; non-technical&lt;/li&gt;
&lt;li&gt;Basic Economics; Sowell; non-technical&lt;/li&gt;
&lt;li&gt;Introduction to Economic Analysis; McAfee; non-technical&lt;/li&gt;
&lt;li&gt;Patterns of Software; Gabriel&lt;/li&gt;
&lt;li&gt;Coders at work; Seibel&lt;/li&gt;
&lt;li&gt;Clean architecture; Martin&lt;/li&gt;
&lt;li&gt;How to Be a Stoic: Using Ancient Philosophy to Live a Modern Life; Pigliucci; non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;unfinished (unsorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Release It! - Design and Deploy Production-Ready Software; own-it&lt;/li&gt;
&lt;li&gt;Refactoring (+); Fowler; own-it&lt;/li&gt;
&lt;li&gt;The Leprechauns of Software Engineering; Bossavit (+); own-it&lt;/li&gt;
&lt;li&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software; Vernon (+); own-it&lt;/li&gt;
&lt;li&gt;Pragmatic Thinking and Learning: Refactor Your Wetware; own-it&lt;/li&gt;
&lt;li&gt;Functional Programming Patterns in Scala and Clojure; own-it&lt;/li&gt;
&lt;li&gt;Readings in Database Systems, 5th Edition; own-it&lt;/li&gt;
&lt;li&gt;Structure and Interpretation of Computer Programs (SICP); Abelson, Sussmann, Sussmann; own-it&lt;/li&gt;
&lt;li&gt;La Sociedad De Coste Marginal Cero (Estado y Sociedad); Rifkin; non-technical&lt;/li&gt;
&lt;li&gt;Odisea; Homero; non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;wip (3):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Working Effectively with Legacy Code (+); Feathers; own-it&lt;/li&gt;
&lt;li&gt;Effective Java; Bloch; own-it&lt;/li&gt;
&lt;li&gt;Nonviolent communication; Rosenberg; own-it, non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Senior software developer, the; Copeland; own-it&lt;/li&gt;
&lt;li&gt;Scandal in Bohemia, a; Doyle; own-it&lt;/li&gt;
&lt;li&gt;Getting things done, &amp;hellip;; Allen (+); own-it&lt;/li&gt;
&lt;li&gt;Nature of Software Development, the; Jeffries; own-it&lt;/li&gt;
&lt;li&gt;Team Geek; Fitzpatrick, Collins-Sussman; own-it&lt;/li&gt;
&lt;li&gt;Aprendo Yoga; Van Lysebeth; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Clean Coder: A Code of Conduct for Professional Programmers, the; Martin; own-it&lt;/li&gt;
&lt;li&gt;ML for the working programmer, 2nd edition [5th chapter only]; Paulson; own-it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;lists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/review/list/246177-rob?shelf=non-fiction-for-humans&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/review/list/246177-rob?shelf=non-fiction-for-humans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/451.Best_Philosophy_Book&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/451.Best_Philosophy_Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/8379.Software_Craftsmanship&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/8379.Software_Craftsmanship&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.ycombinator.com/ycs-2017-summer-reading-list/&#34; target=&#34;_blank&#34;&gt;https://blog.ycombinator.com/ycs-2017-summer-reading-list/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/107321.TI2011_Course&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/107321.TI2011_Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/12287.Fog_Creek_Software_Management_Training_Program&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/12287.Fog_Creek_Software_Management_Training_Program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Books read in 2017Q3</title>
      <link>https://alvarogarcia7.github.io/blog/2017/09/30/books-read-2017q3/</link>
      <pubDate>Sat, 30 Sep 2017 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/09/30/books-read-2017q3/</guid>
      <description>&lt;p&gt;Read this quarter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the senior software developer; Copeland, with the &lt;a href=&#34;https://twitter.com/@deaprendices&#34; target=&#34;_blank&#34;&gt;aprendices reading club&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scandal in Bohemia, a; Doyle: a short novel by Sir Arthur Conan Doyle, mentioning Irene Adler and the king of Bohemia&lt;/li&gt;
&lt;li&gt;Getting things done, &amp;hellip;; Allen (+): A book on productivity, where Allen explains his method of GTD and how to apply it. Explains what has worked and not worked for him in his many years of consulting and coaching clients.&lt;/li&gt;
&lt;li&gt;Nature of Software Development, the; Jeffries: Jefrries explains what he sees as &amp;lsquo;the Natural way&amp;rsquo; of software development: agile-based, good technical practices-based, to produce software in an iterative incremental way, with a sustainable pace and not much technical debt.&lt;/li&gt;
&lt;li&gt;Clean Coder: A Code of Conduct for Professional Programmers, the; Martin: a set of principles, values, and practices for the professional programmer (as compared to the 9-5 amateur programmer).&lt;/li&gt;
&lt;li&gt;Team Geek; Fitzpatrick, Collins-Sussman; own-it&lt;/li&gt;
&lt;li&gt;Aprendo Yoga; Van Lysebeth; non-technical, own-it&lt;/li&gt;
&lt;li&gt;ML for the working programmer, 2nd edition [5th chapter only]; Paulson; own-it
Note: re+read means I&amp;rsquo;m re-reading this book. The (+) stands for one-or-more times, as in the regexes.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- copy-paste the books.md here --&gt;

&lt;p&gt;backlog (partially sorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unsorted V&lt;/li&gt;
&lt;li&gt;The Machine That Changed the World: The Story of Lean Production&lt;/li&gt;
&lt;li&gt;Haskell Programming&lt;/li&gt;
&lt;li&gt;Software Architecture in Practice&lt;/li&gt;
&lt;li&gt;The five disfunctions of a team: a leadership fable; Lencioni&lt;/li&gt;
&lt;li&gt;Phoenix project, the ; Kim, Behr, Spafford&lt;/li&gt;
&lt;li&gt;lucha por la desigualdad, la; Pontón; non-technical&lt;/li&gt;
&lt;li&gt;psicología del dinero, la; Hammond; non-technical&lt;/li&gt;
&lt;li&gt;Invirtiendo a largo plazo; García Paramés; non-technical&lt;/li&gt;
&lt;li&gt;Well-Grounded Java Developer, the; own-it&lt;/li&gt;
&lt;li&gt;Quién domina el mundo; Chomsky; non-technical&lt;/li&gt;
&lt;li&gt;Learn You a Haskell for Great Good!; own-it&lt;/li&gt;
&lt;li&gt;camino al 18J, el; Payne; non-technical&lt;/li&gt;
&lt;li&gt;Cartas desde la revolución bolchevique; Sadoul; non-technical&lt;/li&gt;
&lt;li&gt;Java Performance: The Definitive Guide&lt;/li&gt;
&lt;li&gt;Why programmers work at night&lt;/li&gt;
&lt;li&gt;Shogun: The Life of Tokugawa Ieyasu; Sadler; non-technical&lt;/li&gt;
&lt;li&gt;Scrum and XP from the trenches, 2nd edition;&lt;/li&gt;
&lt;li&gt;Els jueus i Catalunya; Villatoro; non-technical&lt;/li&gt;
&lt;li&gt;El problema de los tres cuerpos; Liu; non-technical&lt;/li&gt;
&lt;li&gt;Amazon Web Services in Action; own-it&lt;/li&gt;
&lt;li&gt;Clojure Programming - Practical Lisp for the Java World&lt;/li&gt;
&lt;li&gt;Mature optimization&lt;/li&gt;
&lt;li&gt;XUnit Test Patterns&lt;/li&gt;
&lt;li&gt;Let Over Lambda&lt;/li&gt;
&lt;li&gt;The Haskell Road to Logic, Math and Programming&lt;/li&gt;
&lt;li&gt;Types and Programming Languages&lt;/li&gt;
&lt;li&gt;Fundamentals of Object-oriented Design in UML&lt;/li&gt;
&lt;li&gt;Clojure for the brave and true&lt;/li&gt;
&lt;li&gt;How to Solve It: A New Aspect of Mathematical Method&lt;/li&gt;
&lt;li&gt;Conceptual Mathematics: A First Introduction to Categories&lt;/li&gt;
&lt;li&gt;Understanding Computation: From Simple Machines to Impossible Programs&lt;/li&gt;
&lt;li&gt;Programming in Haskell&lt;/li&gt;
&lt;li&gt;Programming Languages: Application and Interpretation&lt;/li&gt;
&lt;li&gt;Doing Math with Python&lt;/li&gt;
&lt;li&gt;Perfect Software: And Other Illusions about Testing&lt;/li&gt;
&lt;li&gt;Computability and Complexity - From a Programming Perspective&lt;/li&gt;
&lt;li&gt;Thinking Forth: a language and philosophy for solving problems&lt;/li&gt;
&lt;li&gt;Concepts, Techniques, and Models of Computer Programming&lt;/li&gt;
&lt;li&gt;Bridging the Communication Gap; Adzic&lt;/li&gt;
&lt;li&gt;Specification by Example; Adzic&lt;/li&gt;
&lt;li&gt;Cucumber book, the; Adzic&lt;/li&gt;
&lt;li&gt;Software Architecture for Developers; Brown&lt;/li&gt;
&lt;li&gt;Object Design: Roles, Responsibilities, and Collaborations&lt;/li&gt;
&lt;li&gt;RESTful Web APIs&lt;/li&gt;
&lt;li&gt;RESTful Web Services Cookbook&lt;/li&gt;
&lt;li&gt;Building Maintainable Software&lt;/li&gt;
&lt;li&gt;Serverless - Patterns of Modern Application Design Using Microservices (Amazon Web Services Edition)&lt;/li&gt;
&lt;li&gt;A Pattern Language; Alexander&lt;/li&gt;
&lt;li&gt;Types and Programming Languages, TAPL; Pierce; own-it&lt;/li&gt;
&lt;li&gt;Speed Reading Book: Read More, Learn More, Achieve More, the; Buzan&lt;/li&gt;
&lt;li&gt;Cómo crear mapas mentales (Crecimiento personal); Buzan&lt;/li&gt;
&lt;li&gt;First things first; Covey&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s best next; Perman&lt;/li&gt;
&lt;li&gt;problems of philosophy, the; Russell&lt;/li&gt;
&lt;li&gt;Requiem for the American dream; Chomsky&lt;/li&gt;
&lt;li&gt;sun also rises, the; Hemingway&lt;/li&gt;
&lt;li&gt;travels, the; Polo; non-technical&lt;/li&gt;
&lt;li&gt;Homo Deus: A Brief History of Tomorrow; Harari; non-technical&lt;/li&gt;
&lt;li&gt;Books by Aristotle; non-technical&lt;/li&gt;
&lt;li&gt;Books by Plato&lt;/li&gt;
&lt;li&gt;Books by Descartes&lt;/li&gt;
&lt;li&gt;The idea of culture; Eagleton&lt;/li&gt;
&lt;li&gt;Hereditary Intelligence; Galton; non-technical&lt;/li&gt;
&lt;li&gt;Lean Software Development: An Agile Toolkit; Poppendieck&lt;/li&gt;
&lt;li&gt;Peopleware*; De Marco&lt;/li&gt;
&lt;li&gt;Chaos Monkeys: Obscene Fortune and Random Failure; Garcia Martinez&lt;/li&gt;
&lt;li&gt;Implementing Lean Software Development: From Concept to Cash; Poppendieck&lt;/li&gt;
&lt;li&gt;Joel on Software; Spolsky&lt;/li&gt;
&lt;li&gt;Death March; Yourdon&lt;/li&gt;
&lt;li&gt;Psychology of Computer Programming, The; Weinberg&lt;/li&gt;
&lt;li&gt;Introduction to General Systems Thinking; Weinberg&lt;/li&gt;
&lt;li&gt;Lao Tzu : Tao Te Ching : A Book About the Way and the Power of the Way; Tzu, Le Guin; non-technical&lt;/li&gt;
&lt;li&gt;Gay Science, the; Nietzsche; non-technical&lt;/li&gt;
&lt;li&gt;Being Geek; Lopp&lt;/li&gt;
&lt;li&gt;Finance for Freelancers; Retallick&lt;/li&gt;
&lt;li&gt;Object-oriented software engineering: a use case driven approach; Jacobson&lt;/li&gt;
&lt;li&gt;Patterns of Enterprise Application Architecture; Fowler; own-it&lt;/li&gt;
&lt;li&gt;Thinking fast and slow; Kahneman&lt;/li&gt;
&lt;li&gt;Emotional intelligence; Goleman&lt;/li&gt;
&lt;li&gt;Ética a Nicómaco; Aristotle; own-it, non-technical&lt;/li&gt;
&lt;li&gt;Romeo y Julieta; Shakespeare; non-technical&lt;/li&gt;
&lt;li&gt;Computer Systems: A Programmer’s Perspective; Bryant, O&amp;rsquo;Hallaron&lt;/li&gt;
&lt;li&gt;My Journey to Lhasa: The Classic Story of the Only Western Woman Who Succeeded in Entering the Forbidden City; David-Néel; non-technical&lt;/li&gt;
&lt;li&gt;Cathedral and the bazaar, the ; Raymond&lt;/li&gt;
&lt;li&gt;Coding dojo handbook, the; Bache; own-it&lt;/li&gt;
&lt;li&gt;Making software; Oram and Wilson; own-it&lt;/li&gt;
&lt;li&gt;Code complete; McConnell&lt;/li&gt;
&lt;li&gt;Soft skills; Sonmez; own-it&lt;/li&gt;
&lt;li&gt;DSLs in action; Ghosh; own-it&lt;/li&gt;
&lt;li&gt;purely functional data structures; Okasaki; own-it&lt;/li&gt;
&lt;li&gt;Working effectively with unit tests; Fields (+); own-it&lt;/li&gt;
&lt;li&gt;First Nazi, the; Ludendorff&lt;/li&gt;
&lt;li&gt;Greatest story ever told &amp;hellip; so far; Krauss; non-technical&lt;/li&gt;
&lt;li&gt;Master algorithm, the; Domingos; non-technical&lt;/li&gt;
&lt;li&gt;Invention of Science, the; Wootton; non-technical&lt;/li&gt;
&lt;li&gt;Tesla: Inventor of the electrical age; Bernard Carlson; non-technical&lt;/li&gt;
&lt;li&gt;Psychology in minutes; Weeks; non-technical&lt;/li&gt;
&lt;li&gt;Alan Turing: The Enigma; Hodges; non-technical&lt;/li&gt;
&lt;li&gt;How to think more about sex; de Botton; non-technical&lt;/li&gt;
&lt;li&gt;Piccolo manuale di persuasione; Taylor; non-technical&lt;/li&gt;
&lt;li&gt;arte de la guerra, el; Sun Tzu; non-technical&lt;/li&gt;
&lt;li&gt;Piccolo manuale di leadership Confuciana; Adair; non-technical&lt;/li&gt;
&lt;li&gt;How to Stop Worrying and Start Living; Carnegie; non-technical&lt;/li&gt;
&lt;li&gt;Uomo - Guida allo stile; Roetzel; non-technical&lt;/li&gt;
&lt;li&gt;Unwritten Laws of Engineering: Revised and Updated Edition; King&lt;/li&gt;
&lt;li&gt;Test-Driven JavaScript Development (Developer&amp;rsquo;s Library); Johansen&lt;/li&gt;
&lt;li&gt;Test Driven Development: By Example; Beck&lt;/li&gt;
&lt;li&gt;Arquitectura Java JPA Domain Driven Design; Alvárez, Peláez&lt;/li&gt;
&lt;li&gt;End of loyalty, the; Wartzman; non-technical&lt;/li&gt;
&lt;li&gt;Basic Economics; Sowell; non-technical&lt;/li&gt;
&lt;li&gt;Introduction to Economic Analysis; McAfee; non-technical&lt;/li&gt;
&lt;li&gt;Patterns of Software; Gabriel&lt;/li&gt;
&lt;li&gt;Coders at work; Seibel&lt;/li&gt;
&lt;li&gt;Clean architecture; Martin&lt;/li&gt;
&lt;li&gt;How to Be a Stoic: Using Ancient Philosophy to Live a Modern Life; Pigliucci; non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;unfinished (unsorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Release It! - Design and Deploy Production-Ready Software; own-it&lt;/li&gt;
&lt;li&gt;Refactoring (+); Fowler; own-it&lt;/li&gt;
&lt;li&gt;The Leprechauns of Software Engineering; Bossavit (+); own-it&lt;/li&gt;
&lt;li&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software; Vernon (+); own-it&lt;/li&gt;
&lt;li&gt;Pragmatic Thinking and Learning: Refactor Your Wetware; own-it&lt;/li&gt;
&lt;li&gt;Functional Programming Patterns in Scala and Clojure; own-it&lt;/li&gt;
&lt;li&gt;Readings in Database Systems, 5th Edition; own-it&lt;/li&gt;
&lt;li&gt;Structure and Interpretation of Computer Programs (SICP); Abelson, Sussmann, Sussmann; own-it&lt;/li&gt;
&lt;li&gt;La Sociedad De Coste Marginal Cero (Estado y Sociedad); Rifkin; non-technical&lt;/li&gt;
&lt;li&gt;Odisea; Homero; non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;wip (3):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Working Effectively with Legacy Code (+); Feathers; own-it&lt;/li&gt;
&lt;li&gt;Effective Java; Bloch; own-it&lt;/li&gt;
&lt;li&gt;Nonviolent communication; Rosenberg; own-it, non-technical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Senior software developer, the; Copeland; own-it&lt;/li&gt;
&lt;li&gt;Scandal in Bohemia, a; Doyle; own-it&lt;/li&gt;
&lt;li&gt;Getting things done, &amp;hellip;; Allen (+); own-it&lt;/li&gt;
&lt;li&gt;Nature of Software Development, the; Jeffries; own-it&lt;/li&gt;
&lt;li&gt;Team Geek; Fitzpatrick, Collins-Sussman; own-it&lt;/li&gt;
&lt;li&gt;Aprendo Yoga; Van Lysebeth; non-technical, own-it&lt;/li&gt;
&lt;li&gt;Clean Coder: A Code of Conduct for Professional Programmers, the; Martin; own-it&lt;/li&gt;
&lt;li&gt;ML for the working programmer, 2nd edition [5th chapter only]; Paulson; own-it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;lists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/review/list/246177-rob?shelf=non-fiction-for-humans&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/review/list/246177-rob?shelf=non-fiction-for-humans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/451.Best_Philosophy_Book&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/451.Best_Philosophy_Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/8379.Software_Craftsmanship&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/8379.Software_Craftsmanship&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.ycombinator.com/ycs-2017-summer-reading-list/&#34; target=&#34;_blank&#34;&gt;https://blog.ycombinator.com/ycs-2017-summer-reading-list/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/107321.TI2011_Course&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/107321.TI2011_Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/list/show/12287.Fog_Creek_Software_Management_Training_Program&#34; target=&#34;_blank&#34;&gt;https://www.goodreads.com/list/show/12287.Fog_Creek_Software_Management_Training_Program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The Nature of Software Development: Part I</title>
      <link>https://alvarogarcia7.github.io/blog/2017/07/09/nature-software-development-part-1/</link>
      <pubDate>Sun, 09 Jul 2017 13:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/07/09/nature-software-development-part-1/</guid>
      <description>

&lt;h1 id=&#34;the-nature-of-software-development-reading-breadcrumbs-quotes-thoughts&#34;&gt;The Nature of Software development: reading breadcrumbs, quotes, thoughts&lt;/h1&gt;

&lt;h2 id=&#34;preface&#34;&gt;Preface&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The Natural Way serves end users well because it delivers value to them sooner.&lt;/p&gt;

&lt;p&gt;serves the business [&amp;hellip;] because it provides important information quickly, and because it provides the ability to adjust direction as needed.&lt;/p&gt;

&lt;p&gt;serves management [&amp;hellip;] see what’s really going on inside the project so that when action is needed, there will be time to act. And it reduces management’s problems by making information visible [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] easier for developers. [&amp;hellip;] clear direction and allows them freedom to use their skills to build what the organization needs, when it’s needed.&lt;/p&gt;

&lt;p&gt;(p. xv)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;part-i-the-circle-of-value&#34;&gt;Part I: The Circle of Value&lt;/h1&gt;

&lt;h2 id=&#34;chapter-1-the-search-for-value&#34;&gt;Chapter 1: The search for value&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Value.  &amp;ldquo;what you want.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the building blocks of value or to produce value:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Guiding. We produce value by creating teams with responsibility for creating value.&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The value in guiding is not related to creating value in itself, but to help others so they can create value.&lt;/p&gt;

&lt;p&gt;Therefore, the value of guiding depends on the value of the value-producing people&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Organizing [&amp;hellip;] We organize around features, because features give us the ability to plan and build value most rapidly&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;

&lt;p&gt;Planning [&amp;hellip;] selecting the features we need, in the order we need them.&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;

&lt;p&gt;Building [&amp;hellip;] product feature by feature&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;

&lt;p&gt;Slicing [&amp;hellip;] smallest possible value-bearing size&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;

&lt;p&gt;Quality [&amp;hellip;] always has a good design and that it is as nearly defect-free as possible&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-2-value-is-what-we-want&#34;&gt;Chapter 2: Value is What we Want&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;we generally get value by delivering features. Features that have value. Features that we want.&lt;/p&gt;

&lt;p&gt;(p. 7)&lt;/p&gt;

&lt;p&gt;software can save time or money. Software can help us earn money&lt;/p&gt;

&lt;p&gt;(p. 7)&lt;/p&gt;

&lt;p&gt;I think of value as simply what we want [&amp;hellip;] Each choice gives us something we value&lt;/p&gt;

&lt;p&gt;(p. 7)&lt;/p&gt;

&lt;p&gt;A project delivers value only when we ship the software and put it to use&lt;/p&gt;

&lt;p&gt;(p. 8)&lt;/p&gt;

&lt;p&gt;Since most users don’t use all the features, a smaller set of features can provide real value, and provide it sooner.&lt;/p&gt;

&lt;p&gt;(p. 10)&lt;/p&gt;

&lt;p&gt;pieces that make sense to us, and to our users. [&amp;hellip;] minimal marketable features (MMFs)&lt;/p&gt;

&lt;p&gt;(p. 12)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-3-guiding-goes-better-feature-by-feature&#34;&gt;Chapter 3: Guiding Goes Better &amp;ldquo;Feature by Feature&amp;rdquo;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;With a monolithic project, late in the game we can’t do much to cut costs. We have already written requirements for things we’ll never get&lt;/p&gt;

&lt;p&gt;(p. 22)&lt;/p&gt;

&lt;p&gt;We laid out this project with an all-or-nothing mentality.&lt;/p&gt;

&lt;p&gt;(p. 22)&lt;/p&gt;

&lt;p&gt;When our projects grow feature by feature, we can respond to what’s really happening. We can respond to the changing needs and inputs of the business and of management.&lt;/p&gt;

&lt;p&gt;(p. 24)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-4-organizing-by-feature&#34;&gt;Chapter 4: Organizing by Feature&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;To get the work done, different parts require different skills. The work won’t be done [&amp;hellip;] until it has had the attention of people with each needed skill.&lt;/p&gt;

&lt;p&gt;If we organize teams by skill-set, each piece of work will need to be passed around among teams&lt;/p&gt;

&lt;p&gt;(p. 26)&lt;/p&gt;

&lt;p&gt;organize into small teams, each of which builds features that the Product Champions can understand. Make sure that each team has all the people and all the skills necessary to build the entire feature, not just part of it&lt;/p&gt;

&lt;p&gt;(p. 27)&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] we can allocate work across teams easily [&amp;hellip;]  Responsibility and authority are aligned.&lt;/p&gt;

&lt;p&gt;(p. 27)&lt;/p&gt;

&lt;p&gt;the people belong to the feature teams.&lt;/p&gt;

&lt;p&gt;(p. 30)&lt;/p&gt;

&lt;p&gt;You belong to your family; you’re a member of the golf club&lt;/p&gt;

&lt;p&gt;(p. 30)&lt;/p&gt;

&lt;p&gt;A highly paid expert shouldn’t be highly paid just because she’s an expert. She should be highly paid because she is helping other people become experts.&lt;/p&gt;

&lt;p&gt;(p. 30)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-5-planning-feature-by-feature&#34;&gt;Chapter 5: Planning Feature by Feature&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Vision is about big ideas, not tiny bites.&lt;/p&gt;

&lt;p&gt;(p. 32)&lt;/p&gt;

&lt;p&gt;General Eisenhower said, &amp;ldquo;Plans are useless, but planning is indispensable.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;(p. 33)&lt;/p&gt;

&lt;p&gt;We do need to plan. We don’t need a detailed list of what will happen and when&lt;/p&gt;

&lt;p&gt;(p. 33)&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] software people are terrible at estimating, because humans are terrible at estimating.&lt;/p&gt;

&lt;p&gt;(p. 34)&lt;/p&gt;

&lt;p&gt;set a time and money budget; produce the most valuable features first; keep the product ready to ship at any time&lt;/p&gt;

&lt;p&gt;(p. 34)&lt;/p&gt;

&lt;p&gt;It’s not good enough to plan just at the beginning&lt;/p&gt;

&lt;p&gt;(p. 36)&lt;/p&gt;

&lt;p&gt;I don’t recommend working with larger stories and breaking them down into technical items, often called tasks&lt;/p&gt;

&lt;p&gt;(p. 36)&lt;/p&gt;

&lt;p&gt;Stick with stories&lt;/p&gt;

&lt;p&gt;(p. 36)&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] break down stories into smaller stories, each making sense to the business-side people.&lt;/p&gt;

&lt;p&gt;(p. 36)&lt;/p&gt;

&lt;p&gt;the team itself should decide how much work it can accomplish in the next two-week interval&lt;/p&gt;

&lt;p&gt;(p. 37)&lt;/p&gt;

&lt;p&gt;The point isn’t to make good estimates—the point is to do good work at a consistent pace.&lt;/p&gt;

&lt;p&gt;(p. 37)&lt;/p&gt;

&lt;p&gt;There are some serious risks to estimates: we have an almost irresistible desire to &amp;ldquo;improve&amp;rdquo; them, or to compare them. [&amp;hellip;] business and management get the best results by selecting the work to be done and the work to be deferred&lt;/p&gt;

&lt;p&gt;(p. 38)&lt;/p&gt;

&lt;p&gt;Is prediction better than steering?&lt;/p&gt;

&lt;p&gt;(p. 38)&lt;/p&gt;

&lt;p&gt;Planning with &amp;ldquo;stretch goals&amp;rdquo; is destructive.&lt;/p&gt;

&lt;p&gt;[&amp;hellip;]&lt;/p&gt;

&lt;p&gt;Hurrying, they’ll inject more defects. Since defects take longer to fix than they do to prevent, hurrying will slow you down. [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;[&amp;hellip;]&lt;/p&gt;

&lt;p&gt;Dirty code slows you down as well [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;Pressure is destructive. Avoid it.&lt;/p&gt;

&lt;p&gt;(p. 39)&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] estimates are likely to be wrong, and they focus our attention on the cost of things rather than on value.&lt;/p&gt;

&lt;p&gt;(p. 40)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-6-building-the-product-feature-by-feature&#34;&gt;Chapter 6: Building the Product, Feature by Feature&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;We need to sharpen our vision of what the product must do—and what’s just &amp;ldquo;nice to have.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;(p. 45)&lt;/p&gt;

&lt;p&gt;To be sure we’re free of defects, we need to check everything, all the time [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;(p. 48)&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] grow the design as we go. If we design too much, we won’t get as many features, and that will show up. If we design too little, features will be hard to do, we’ll slow down&lt;/p&gt;

&lt;p&gt;(p. 49)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-7-build-features-and-foundation-in-parallel&#34;&gt;Chapter 7: Build Features and Foundation in Parallel&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Each feature needs a solid foundation of design, a solid &amp;ldquo;infrastructure.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;(p.52)&lt;/p&gt;

&lt;p&gt;We need to do as little work as possible to deliver the best possible product by our delivery date&amp;hellip;and we need to do that work as soundly as we can afford.&lt;/p&gt;

&lt;p&gt;(p. 53)&lt;/p&gt;

&lt;p&gt;Developers are often trained to try to design a system up front&lt;/p&gt;

&lt;p&gt;(p. 59)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-8-bug-free-and-well-designed&#34;&gt;Chapter 8: Bug-Free and Well Designed&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Our product is made up of a growing set of correctly working features, built on a growing, evolving foundation of design.&lt;/p&gt;

&lt;p&gt;(p. 61)&lt;/p&gt;

&lt;p&gt;Defects amount to negative features. Progress is uncertain. Eliminate defects to provide clarity on what’s done.&lt;/p&gt;

&lt;p&gt;We’re trying to plan by features, grow by features, and manage by features&lt;/p&gt;

&lt;p&gt;We cannot work effectively in a world of defects.&lt;/p&gt;

&lt;p&gt;(p. 62)&lt;/p&gt;

&lt;p&gt;At the end of every iteration, we need to have the software as close to defect-free as possible. The only way to get there is to test it.&lt;/p&gt;

&lt;p&gt;We test at two levels, with &amp;ldquo;Business&amp;rdquo; tests and &amp;ldquo;Programmer&amp;rdquo; tests.&lt;/p&gt;

&lt;p&gt;(p. 65)&lt;/p&gt;

&lt;p&gt;If we don’t check something, we don’t know whether it works&lt;/p&gt;

&lt;p&gt;(p. 66)&lt;/p&gt;

&lt;p&gt;We need to have a good design at all times. A bad design slows us down, because it is hard to change [&amp;hellip;] We need a high-quality design at every moment.&lt;/p&gt;

&lt;p&gt;(p. 71)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;chapter-9-full-circle&#34;&gt;Chapter 9: Full Circle&lt;/h2&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Value is what we want. Features deliver value. Delivering features early gives us value sooner.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Managing by looking at value works better than managing by dates or artifacts that don’t deliver value.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Planning features is easy enough to do. Estimate if you must. Selecting the work based on Yesterday’s Weather works better.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Building by features requires us to build a small, complete product, every couple of weeks. That product must always work correctly, and it must always be well designed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Development must deliver real working features. The product must be well tested. Business-side people and developers contribute to testing. The product must be well designed. Developers keep the design alive all the time.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[&amp;hellip;] A commitment from the top of the business, down to the individual managers and developers [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;(p. 77)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The Search for Value (a quote)</title>
      <link>https://alvarogarcia7.github.io/blog/2017/07/09/search-for-value-quote-chapter-1/</link>
      <pubDate>Sun, 09 Jul 2017 13:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/07/09/search-for-value-quote-chapter-1/</guid>
      <description>&lt;p&gt;A quote from the book &lt;a href=&#34;https://pragprog.com/book/rjnsd/the-nature-of-software-development&#34; target=&#34;_blank&#34;&gt;The Nature of Software Development&lt;/a&gt; by Ron Jeffries, talking about value (in software) and the building blocks to achieve it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Value. Value, we’ll see, is “what you want.” [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;We’ll tell the story by building up from the bottom of the pyramid, describing how to guide, organize, plan, and build our product, in small slices, with a focus on quality. The value we produce is based on these.&lt;/p&gt;

&lt;p&gt;Guiding. We produce value by creating teams with responsibility for creating value. We make sure they understand what is needed, and understand the time available. We guide them by observing what they actually build.&lt;/p&gt;

&lt;p&gt;Organizing. We organize teams with the ability to get the job done. We organize around features, because features give us the ability to plan and build value most rapidly. We apply good people and help them build their skills.&lt;/p&gt;

&lt;p&gt;Planning. We steer our projects by selecting the features we need, in the order we need them. We produce value in a timely fashion.&lt;/p&gt;

&lt;p&gt;Building. We build up our product feature by feature. This provides frequent delivery of value. We can see how things are progressing early and often.&lt;/p&gt;

&lt;p&gt;Slicing. We slice features down to the smallest possible value-bearing size. We build a capable product as early as possible, and then enhance and grow it as the deadline approaches. We’re always ready to ship.&lt;/p&gt;

&lt;p&gt;Quality. We apply the necessary practices to ensure that our product always has a good design and that it is as nearly defect-free as possible. We’re able to build value continuously, sustainably, indefinitely.&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Books read in 2017Q2</title>
      <link>https://alvarogarcia7.github.io/blog/2017/06/30/books-read-2017q2/</link>
      <pubDate>Fri, 30 Jun 2017 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/06/30/books-read-2017q2/</guid>
      <description>&lt;p&gt;(I&amp;rsquo;ve changed how I organize my books. More, here (TODO))&lt;/p&gt;

&lt;p&gt;Finished:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Russell en 90 minutos, Strathern; non-technical. A quick introduction to Bertrand Russell, his life and his way of thinking and seeing the world.&lt;/li&gt;
&lt;li&gt;Homenaje a Cataluña, Orwell; non-technical. A first-person view of the events during the Spanish Civil War (1936-1939), seen from the perspective of a British citizen that went there voluntarily. Explains the internal fracture of the left political parties and the fracture of the Spanish society.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--
You can delete here and below
--&gt;

&lt;p&gt;backlog (partially sorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unsorted V&lt;/li&gt;
&lt;li&gt;The Machine That Changed the World: The Story of Lean Production&lt;/li&gt;
&lt;li&gt;Haskell Programming&lt;/li&gt;
&lt;li&gt;Software Architecture in Practice&lt;/li&gt;
&lt;li&gt;La lucha por la desigualdad&lt;/li&gt;
&lt;li&gt;La psicología del dinero, Hammond&lt;/li&gt;
&lt;li&gt;Invirtiendo a largo plazo, García Paramés&lt;/li&gt;
&lt;li&gt;The Well-Grounded Java Developer&lt;/li&gt;
&lt;li&gt;Quién domina el mundo, Chomsky&lt;/li&gt;
&lt;li&gt;Learn You a Haskell for Great Good!&lt;/li&gt;
&lt;li&gt;El camino al 18J, Payne&lt;/li&gt;
&lt;li&gt;Cartas desde la revolución bolchevique, Sadoul&lt;/li&gt;
&lt;li&gt;Java Performance: The Definitive Guide&lt;/li&gt;
&lt;li&gt;Functional Programming Patterns in Scala and Clojure&lt;/li&gt;
&lt;li&gt;Why programmers work at night&lt;/li&gt;
&lt;li&gt;Shogun: The Life of Tokugawa Ieyasu, Sadler&lt;/li&gt;
&lt;li&gt;Scrum and XP from the trenches, 2nd edition&lt;/li&gt;
&lt;li&gt;Els jueus i Catalunya, Villatoro&lt;/li&gt;
&lt;li&gt;El problema de los tres cuerpos, Liu&lt;/li&gt;
&lt;li&gt;Amazon Web Services in Action&lt;/li&gt;
&lt;li&gt;Clojure Programming - Practical Lisp for the Java World&lt;/li&gt;
&lt;li&gt;Mature optimization&lt;/li&gt;
&lt;li&gt;XUnit Test Patterns&lt;/li&gt;
&lt;li&gt;Let Over Lambda&lt;/li&gt;
&lt;li&gt;The Haskell Road to Logic, Math and Programming&lt;/li&gt;
&lt;li&gt;Types and Programming Languages&lt;/li&gt;
&lt;li&gt;Fundamentals of Object-oriented Design in UML&lt;/li&gt;
&lt;li&gt;Clojure for the brave and true&lt;/li&gt;
&lt;li&gt;How to Solve It: A New Aspect of Mathematical Method&lt;/li&gt;
&lt;li&gt;Conceptual Mathematics: A First Introduction to Categories&lt;/li&gt;
&lt;li&gt;Understanding Computation: From Simple Machines to Impossible Programs&lt;/li&gt;
&lt;li&gt;Programming in Haskell&lt;/li&gt;
&lt;li&gt;Programming Languages: Application and Interpretation&lt;/li&gt;
&lt;li&gt;Doing Math with Python&lt;/li&gt;
&lt;li&gt;Perfect Software: And Other Illusions about Testing&lt;/li&gt;
&lt;li&gt;Computability and Complexity - From a Programming Perspective&lt;/li&gt;
&lt;li&gt;Thinking Forth: a language and philosophy for solving problems&lt;/li&gt;
&lt;li&gt;Concepts, Techniques, and Models of Computer Programming&lt;/li&gt;
&lt;li&gt;Bridging the Communication Gap&lt;/li&gt;
&lt;li&gt;Specification by Example&lt;/li&gt;
&lt;li&gt;The Cucumber book&lt;/li&gt;
&lt;li&gt;Software Architecture for Developers&lt;/li&gt;
&lt;li&gt;Object Design: Roles, Responsibilities, and Collaborations&lt;/li&gt;
&lt;li&gt;RESTful Web APIs&lt;/li&gt;
&lt;li&gt;RESTful Web Services Cookbook&lt;/li&gt;
&lt;li&gt;Building Maintainable Software&lt;/li&gt;
&lt;li&gt;Serverless - Patterns of Modern Application Design Using Microservices (Amazon Web Services Edition)&lt;/li&gt;
&lt;li&gt;A Pattern Language; Alexander&lt;/li&gt;
&lt;li&gt;Types and Programming Languages, TAPL; Pierce&lt;/li&gt;
&lt;li&gt;The Speed Reading Book: Read More, Learn More, Achieve More; Buzan&lt;/li&gt;
&lt;li&gt;Cómo crear mapas mentales (Crecimiento personal); Buzan&lt;/li&gt;
&lt;li&gt;First things first ; covey&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s best next ; perman&lt;/li&gt;
&lt;li&gt;The problems of philosophy; Russell (1998)&lt;/li&gt;
&lt;li&gt;Rèquiem for the American dream ; chomsky&lt;/li&gt;
&lt;li&gt;The sun also rises; Hemingway&lt;/li&gt;
&lt;li&gt;The travels; Marco polo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;unfinished (unsorted):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Release It! - Design and Deploy Production-Ready Software&lt;/li&gt;
&lt;li&gt;The Leprechauns of Software Engineering; Bossavit (*)&lt;/li&gt;
&lt;li&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software; Vernon (*)&lt;/li&gt;
&lt;li&gt;Pragmatic Thinking and Learning: Refactor Your Wetware&lt;/li&gt;
&lt;li&gt;Readings in Database Systems, 5th Edition&lt;/li&gt;
&lt;li&gt;La Sociedad De Coste Marginal Cero (Estado y Sociedad); Rifkin&lt;/li&gt;
&lt;li&gt;Structure and Interpretation of Computer Programs (SICP); Abelson, Sussmann, Sussmann&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;next (2):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Refactoring (*)&lt;/li&gt;
&lt;li&gt;Working Effectively with Legacy Code (*)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;wip (3):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aprendo Yoga; Van Lysebeth&lt;/li&gt;
&lt;li&gt;Getting things done, &amp;hellip;; Allen (*)&lt;/li&gt;
&lt;li&gt;the senior software developer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Russell en 90 minutos, Strathern&lt;/li&gt;
&lt;li&gt;Homenaje a Cataluña, Orwell&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 9</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-9/</link>
      <pubDate>Sun, 28 May 2017 17:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-9/</guid>
      <description>

&lt;h1 id=&#34;chapter-9-learn-to-write&#34;&gt;Chapter 9: Learn to Write&lt;/h1&gt;

&lt;p&gt;Analogy of TDD to writing.&lt;/p&gt;

&lt;p&gt;Explains how to write good email.
Then, good documentation,
then good API documentation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 8</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</link>
      <pubDate>Sun, 28 May 2017 16:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</guid>
      <description>

&lt;h1 id=&#34;chapter-8-bootstrap-a-greenfield-system&#34;&gt;Chapter 8: Bootstrap a Greenfield System&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Working on a brand new application can be a lot of fun.
There’s no &amp;ldquo;baggage&amp;rdquo; from legacy code, no technical debt,
and there’s a wonderful feeling of freshness when starting
an app from scratch.&lt;/p&gt;

&lt;p&gt;(p. 101)&lt;/p&gt;

&lt;p&gt;The decisions you make [&amp;hellip;] can have a lasting impact&lt;/p&gt;

&lt;p&gt;(p. 101)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-1-overview&#34;&gt;8.1 Overview&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;When given a greenfield project [&amp;hellip;] you have two main goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure everyone involved in the project feels good about the initial direction and decisions being made&lt;/li&gt;
&lt;li&gt;Establish a location for developers to start contributing code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p. 102)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mention of the iteration Zero, that&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] indicates that no direct business value is going
to be delivered initially&lt;/p&gt;

&lt;p&gt;(p. 102)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-2-understand-the-problem&#34;&gt;8.2 Understand the problem&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You do your company a disservice to build an application you don’t think needs to exist.&lt;/p&gt;

&lt;p&gt;To understand why the application should be built, find answers to these questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What business problems will this application solve?&lt;/li&gt;
&lt;li&gt;Why is the proposed application the best solutiont o those problems?&lt;/li&gt;
&lt;li&gt;What other solutions were considered?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p. 104)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mentioning the importance of asking why about these problems, also, whether this decided solution is good / the best.&lt;/p&gt;

&lt;h3 id=&#34;8-3-understand-the-system-s-place-in-the-technical-architecture&#34;&gt;8.3 Understand the System’s Place in the Technical Architecture&lt;/h3&gt;

&lt;p&gt;Mention of the &amp;lsquo;technical architecture&amp;rsquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;existing applications and existing infrastructure&lt;/p&gt;

&lt;p&gt;(p. 105)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-4-choose-technology&#34;&gt;8.4 Choose Technology&lt;/h3&gt;

&lt;h4 id=&#34;using-the-blessed-stack&#34;&gt;Using the Blessed Stack&lt;/h4&gt;

&lt;p&gt;Be prepared to heavily defend your position if you decide to not use
the blessed stack, both to yourself and others. (paraphrased from p. 107)&lt;/p&gt;

&lt;h3 id=&#34;using-a-different-technology&#34;&gt;Using a Different Technology&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You must answer the question “Why shouldn’t I use the blessed stack?”&lt;/p&gt;

&lt;p&gt;[&amp;hellip;]&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] your first duty is to deliver results.&lt;/p&gt;

&lt;p&gt;(p. 108).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also consider these factors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fitness for purpose&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Developer productivity&lt;/li&gt;
&lt;li&gt;Developer happiness - also called developer experience (DX)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(from p. 108)&lt;/p&gt;

&lt;h3 id=&#34;8-5-outline-the-application-s-architecture&#34;&gt;8.5 Outline the Application’s Architecture&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You want your application to ooze consistency&lt;/p&gt;

&lt;p&gt;(p. 111)&lt;/p&gt;

&lt;p&gt;you want to establish a “culture of consistency”&lt;/p&gt;

&lt;p&gt;(p. 113)&lt;/p&gt;

&lt;p&gt;Each developer should be encouraged to establish a convention when
they first face the need to have one.&lt;/p&gt;

&lt;p&gt;(p. 113)&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] considering the political impact [&amp;hellip;] Since it often doesn’t
matter what the decision is, making an unpopular decision can be
little gain for a lot of trouble.&lt;/p&gt;

&lt;p&gt;(p. 114)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-7-create-a-minimum-deployable-system&#34;&gt;8.7 Create a Minimum Deployable System&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I like to think of deployment as the physical act of getting the code up in the production environment and launching as the act of allowing users access.&lt;/p&gt;

&lt;p&gt;(p. 118)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The difference between deploying and launching. This can be enforced
with some techniques to block/allow access, such as enabling/disabling
these features or controlling access to said features.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 7</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/24/senior-software-engineer-chapter-7/</link>
      <pubDate>Wed, 24 May 2017 11:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/24/senior-software-engineer-chapter-7/</guid>
      <description>

&lt;h1 id=&#34;chapter-7-make-technical-decisions&#34;&gt;Chapter 7: Make Technical Decisions&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Opinions like this are often indicators of hidden facts that you have yet to identify&lt;/p&gt;

&lt;p&gt;(p. 90)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 6</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-6/</link>
      <pubDate>Tue, 23 May 2017 07:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-6/</guid>
      <description>

&lt;h1 id=&#34;chapter-6-play-well-with-others&#34;&gt;Chapter 6: Play Well With Others&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;challenges you’ll face as a programmer is to explain what you do,
or how you’ve done it, to someone who is not a programmer&lt;/p&gt;

&lt;p&gt;Translating your work to non-technical people is a skill that
can be more valuable than any specific technical knowledge you have.
It’s what makes a senior developer in the eyes of others.&lt;/p&gt;

&lt;p&gt;(p 77)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;6-1-empathize-with-your-audience&#34;&gt;6.1 Empathize With Your Audience&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;these &amp;ldquo;interested parties&amp;rdquo; understand the problem more deeply than
you, but lack the technical knowledge, skill, or time to solve it directly.&lt;/p&gt;

&lt;p&gt;(p 78)&lt;/p&gt;

&lt;p&gt;Instead of thinking of them as &amp;ldquo;pointy-haired bosses&amp;rdquo;, think of
them as partners. They understand the problem and you know how
to solve it. This &amp;ldquo;division of labor&amp;rdquo; is why teams can achieve
greater things than any individual.&lt;/p&gt;

&lt;p&gt;(p 79)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;6-2-adapt-and-abstract-information&#34;&gt;6.2 Adapt and Abstract Information&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;We want to adapt our terms to theirs, and we want to abstract
away irrelevant information as much as we can.&lt;/p&gt;

&lt;p&gt;(p 80)&lt;/p&gt;

&lt;p&gt;When communicating with others, you need to learn how to speak
the language.&lt;/p&gt;

&lt;p&gt;(p 80)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some tips:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid technical jargon of your own&lt;/li&gt;
&lt;li&gt;Listen carefully and ask questions&lt;/li&gt;
&lt;li&gt;Don’t &amp;ldquo;talk down&amp;rdquo;&lt;/li&gt;
&lt;li&gt;longer descriptive phrases in place of acronyms or other jargon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p 81)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;need to distill your message to its absolute minimum without giving out
false information.&lt;/p&gt;

&lt;p&gt;(p 82)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a conclusion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Being able to &amp;ldquo;talk the talk&amp;rdquo; with others can make you more effective
and more valuable to your company. Being able to briefly summarize
technical details even more so.&lt;/p&gt;

&lt;p&gt;(p 87)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 5</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-5/</link>
      <pubDate>Tue, 23 May 2017 07:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-5/</guid>
      <description>

&lt;h1 id=&#34;chapter-5-deal-with-technical-debt-and-slop&#34;&gt;Chapter 5: Deal With Technical Debt and Slop&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Seeing legacy as tech debt that has been acquired&lt;/li&gt;
&lt;li&gt;Slop as source for sloppy code&lt;/li&gt;
&lt;li&gt;Chapter about understanding the difference between slop and technical debt.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Many developers, if they are feeling pressured to complete their work, would call this an acceptable compromise, promise to fix it later, and ship it&lt;/p&gt;

&lt;p&gt;(p. 70)&lt;/p&gt;

&lt;p&gt;Technical Debt is [&amp;hellip;] used to explain compromises in implementation that save cost now,
at a larger future cost (just like real debt). [&amp;hellip;] technical debt is code written
under certain assumptions that no longer hold.&lt;/p&gt;

&lt;p&gt;(p. 72)&lt;/p&gt;

&lt;p&gt;Although you’ll likely need to pay it off someday, you might not necessarily have to.&lt;/p&gt;

&lt;p&gt;(p. 73)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Uses a marker (&lt;code&gt;TECHDEBT&lt;/code&gt;) to explain what and why has been introduced. Also
serves to find this debt later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 3</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/13/senior-software-engineer-chapter-3/</link>
      <pubDate>Sat, 13 May 2017 13:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/13/senior-software-engineer-chapter-3/</guid>
      <description>

&lt;h1 id=&#34;chapter-3-fix-bugs-efficiently-and-cleanly&#34;&gt;Chapter 3: Fix bugs efficiently and cleanly&lt;/h1&gt;

&lt;p&gt;In the beginning, you will be given tasks that require no in-depth domain knowledge&lt;/p&gt;

&lt;h3 id=&#34;process&#34;&gt;Process&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A process allows you to focus on the right thing at th right time (p. 14)&lt;/p&gt;

&lt;p&gt;It will make your productivity and quality more predictable, which, in turn, will help you estimate and keep more of your promises about your work (paraphrased from p. 14)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;tdd&#34;&gt;TDD&lt;/h3&gt;

&lt;p&gt;Explains some benefits about TDD:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Thinking before coding&lt;/li&gt;
&lt;li&gt;Separating the &amp;lsquo;getting it to work&amp;rsquo; from &amp;lsquo;getting it right&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p. 15)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The latter can be interpreted as &amp;lsquo;building the thing right&amp;rsquo; vs &amp;lsquo;building the right thing&amp;rsquo;: a red test can be seen as question, a green test as an answer. If the question is defined in business terms, you are building the right thing. When refactoring, you are turning the right thing (no matter how it was built) into the thing right&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] senior software engineers don&amp;rsquo;t ask permission to do their job, they just do it&lt;/p&gt;

&lt;p&gt;(p. 20)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- TODO this will turn into a blog post --&gt;
</description>
    </item>
    
    <item>
      <title>Books read in 2017Q1</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/31/books-read-in-2017q1/</link>
      <pubDate>Fri, 31 Mar 2017 21:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/31/books-read-in-2017q1/</guid>
      <description>&lt;p&gt;Books I&amp;rsquo;ve read this quarter&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;Books started, not yet finished (WIP):&lt;/p&gt;

&lt;p&gt;Books I want to finish. Usually come from another quarter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/functional-programming-in-scala&#34; target=&#34;_blank&#34;&gt;Functional Programming in Scala&lt;/a&gt;, by Chiusano and Bjarnason. Doing the exercises with the &lt;a href=&#34;https://twitter.com/@codurance&#34; target=&#34;_blank&#34;&gt;codurance&lt;/a&gt; team&lt;/li&gt;
&lt;li&gt;Gödel, Escher, Bach: An Eternal Golden Braid, Hofstadter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Books that have entered the queue:&lt;/p&gt;

&lt;p&gt;Non-technical that have entered the queue:&lt;/p&gt;

&lt;!--

repository for WIP books:

  * [The Well-Grounded Java Developer](http://www.manning.com/evans/) by Benjamin J. Evans and Martijn Verburg
  * [Learn You a Haskell for Great Good!](http://learnyouahaskell.com/) by Miran Lipovača
  * [Working Effectively with Legacy Code](http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052) by Michael Feathers, again. Blog posts under the tag [wewlc](/categories/wewlc
/)
  * [Haskell Programming](http://haskellbook.com/), By Chris Allen and Julie Moronuki. This book is still in progress and I&#39;m reviewing it
  * [Pragmatic Thinking and Learning: Refactor Your Wetware](https://pragprog.com/book/ahptl/pragmatic-thinking-and-learning) by Andy Hunt  
  
  Books I want to finish:

  * [Refactoring](http://martinfowler.com/books/refactoring.html) by Martin Fowler, with Kent Beck, John Brant, William Opdyke, and Don Roberts
  * [Java Performance: The Definitive Guide](http://shop.oreilly.com/product/0636920028499.do) by Scott Oaks
  * [Scrum and XP from the trenches](http://www.infoq.com/minibooks/scrum-xp-from-the-trenches) by Henrik Kniberg
  * [The Leprechauns of Software Engineering](https://leanpub.com/leprechauns) by Laurent Bossavit, again. [Gift](https://twitter.com/alvarobiz/status/611799849911103488)  
  * [Functional Programming Patterns in Scala and Clojure](https://pragprog.com/book/mbfpp/functional-programming-patterns-in-scala-and-clojure) by Michael Bevilacqua-Linn
  * [Why programmers work at night](https://leanpub.com/nightowls) by Swizec Teller
  * [Readings in Database Systems, 5th Edition](http://www.redbook.io/) by Peter Bailis, Joseph M. Hellerstein, Michael Stonebraker, editors
  * [Domain-Driven Design: Tackling Complexity in the Heart of Software](http://www.amazon.com/exec/obidos/ASIN/0321125215) by Eric Evans, again.
  * [Amazon Web Services in Action](https://www.manning.com/books/amazon-web-services-in-action) by Michael Wittig and Andreas Wittig
  * [Release It! - Design and Deploy Production-Ready Software](https://pragprog.com/book/mnee/release-it), by Michael T. Nygard, with the &#39;[@deAprendices][deaprendices]&#39;s reading club&#39;. Blog posts under the tag [release-it](/categories/release-it
/)
  * [Clojure Programming - Practical Lisp for the Java World](http://shop.oreilly.com/product/0636920013754.do) by Chas Emerick, Brian Carper, Christophe Grand


Books in the queue:

  * [Mature optimization](http://carlos.bueno.org/optimization/mature-optimization.pdf), by Carlos Bueno
  * [XUnit Test Patterns](http://xunitpatterns.com/) by Gerard Meszaros
  * [Let Over Lambda](http://letoverlambda.com/) by Doug Hoyte
  * [The Haskell Road to Logic, Math and Programming](http://fldit-www.cs.uni-dortmund.de/~peter/PS07/HR.pdf) by Kees Doets and Jan van Eijck
  * [Types and Programming Languages](http://www.cis.upenn.edu/~bcpierce/tapl/) by Benjamin C. Pierce
  * [Fundamentals of Object-oriented Design in UML](http://www.amazon.co.uk/dp/020169946X/ref=pe_385721_37038051_TE_3p_dp_1) by Meilir Page-Jones
  * [Clojure for the brave and true](http://www.braveclojure.com/#toc)
  * [How to Solve It: A New Aspect of Mathematical Method](http://press.princeton.edu/titles/669.html) by George Pólya
  * [Conceptual Mathematics: A First Introduction to Categories](http://www.amazon.com/Conceptual-Mathematics-First-Introduction-Categories/dp/052171916X) by Lawvere and Schanuel
  * [Understanding Computation: From Simple Machines to Impossible Programs](http://computationbook.com/) by Tom Stuart
  * [Programming in Haskell](http://www.cambridge.org/wm-ecommerce-web/academic/landingPage/PIHMOOC) by Graham Hutton
  * [Programming Languages: Application and Interpretation](http://cs.brown.edu/~sk/Publications/Books/ProgLangs/2007-04-26/) by Shriram Krishnamurthi
  * [Doing Math with Python](https://www.nostarch.com/doingmathwithpython) by Amit Saha. [Gift from the PyConEs 2015](https://twitter.com/alvarobiz/status/668927802159288322)
  * [Perfect Software: And Other Illusions about Testing](http://www.geraldmweinberg.com/Site/Perfect_Software.html) by Gerald M. Weinberg  
  * [Computability and Complexity - From a Programming Perspective](https://mitpress.mit.edu/books/computability-and-complexity) by Neil Deaton Jones
  * [Thinking Forth: a language and philosophy for solving problems](http://thinking-forth.sourceforge.net/) by Leo Brodie
  * [Concepts, Techniques, and Models of Computer Programming](https://mitpress.mit.edu/index.php?q=books/concepts-techniques-and-models-computer-programming) by Peter Van Roy and Seif Haridi
  * [Bridging the Communication Gap](http://books.gojko.net/bridging-the-communication-gap/) by Gojko Adzic
  * [Specification by Example](http://books.gojko.net/specification-by-example/) by Gojko Adzic
  * [The Cucumber book](https://pragprog.com/book/hwcuc/the-cucumber-book) by Matt Wynne and Aslak Hellesøy
  * [Software Architecture for Developers](https://leanpub.com/software-architecture-for-developers) by Simon Brown
  * [Object Design: Roles, Responsibilities, and Collaborations ](http://www.amazon.com/Object-Design-Roles-Responsibilities-Collaborations/dp/0201379430) by Rebecca Wirfs-Brock and Alan McKean
  * [RESTful Web APIs](http://shop.oreilly.com/product/0636920028468.do) by Leonard Richardson, Mike Amundsen, Sam Ruby
  * [RESTful Web Services Cookbook](http://shop.oreilly.com/product/9780596801694.do) by Subbu Allamaraju
  * [Building Maintainable Software](https://www.sig.eu/en/building-maintainable-software) by Joost Visser
  * [Serverless - Patterns of Modern Application Design Using Microservices (Amazon Web Services Edition)](https://leanpub.com/serverless) by Obie Fernandez 

Non-technical books in the queue:

  - La psicología del dinero, Hammond
  - Invirtiendo a largo plazo, García Paramés
  - Quién domina el mundo, Chomsky
  - Homenaje a Cataluña, Orwell
  - El camino al 18J, Payne
  - Cartas desde la revolución bolchevique, Sadoul
  - Shogun: The Life of Tokugawa Ieyasu, Sadler
  - Els jueus i Catalunya, Villatoro
  - Russell en 90 minutos, Strathern
  - El problema de los tres cuerpos, Liu

Learning paths that have entered the queue:

  * [Software Architecture Fundamentals](http://shop.oreilly.com/category/learning-path/software-architecture-fundamentals.do)
  * [HTML5 Fundamentals](http://shop.oreilly.com/category/learning-path/html5-fundamentals.do)
  * [Designing Web APIs](http://shop.oreilly.com/category/learning-path/designing-web-apis.do)
  * [Dive Deeper into PHP Programming](http://shop.oreilly.com/category/learning-path/dive-deeper-php-programming.do)
  * [Introduction to the Modern Front-End Web](http://shop.oreilly.com/category/learning-path/intro-modern-front-end-web.do)

--&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;The ending date of the quarter is the same as the publication date
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in February 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/02/01/self-study-in-february-2017/</link>
      <pubDate>Wed, 01 Feb 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/02/01/self-study-in-february-2017/</guid>
      <description>

&lt;h2 id=&#34;whatsapp-security-vulnerability&#34;&gt;WhatsApp Security Vulnerability&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.schneier.com/blog/archives/2017/01/whatsapp_securi.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Bruce Schneier on a security defect in whatsapp, where an &amp;lsquo;unconfirmed&amp;rsquo; message can be re-encrypted (with a new key) and resent. This is a vector for some attacks.&lt;/p&gt;

&lt;p&gt;Tags: bruce-schneier, security, whatsapp, encryption, attack-vector&lt;/p&gt;

&lt;h2 id=&#34;encrypted-email-service-once-used-by-edward-snowden-relaunches&#34;&gt;Encrypted email service once used by Edward Snowden relaunches&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://theintercept.com/2017/01/20/encrypted-email-service-once-used-by-edward-snowden-to-relaunch/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, by Kim Zetter, on Lavabit restablishing its service. Explains the company&amp;rsquo;s past and the new services they are offering&lt;/p&gt;

&lt;p&gt;Tags: lavabit, kim-zetter, privacy, encryption, email, mail&lt;/p&gt;

&lt;h2 id=&#34;what-happens-when-you-mix-java-with-a-1960-ibm-mainframe&#34;&gt;What Happens When You Mix Java with a 1960 IBM Mainframe&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/happens-use-java-1960-ibm-mainframe/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Cassel about the legacy infrastructure of hardware that the U.S. government agencies have. How old mainframes are still useful to web applications and how these mainframes can communicate with more modern systems, through APIs&lt;/p&gt;

&lt;p&gt;Tags: mainframe, david-cassel, marianne-bellotti, legacy-hardware, legacy-software, legacy-system, legacy, api&lt;/p&gt;

&lt;h2 id=&#34;systems-we-love-how-the-past-informs-our-present&#34;&gt;Systems We Love: How the Past Informs Our Present&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/systems-we-love/&#34; target=&#34;_blank&#34;&gt;this experience report&lt;/a&gt; by David Cassel about the conference &amp;ldquo;Systems we love&amp;rdquo;: a mix of papers we love and systems that happened at San Francisco in December 2016&lt;/p&gt;

&lt;p&gt;Tags: david-cassel, systems-we-love, papers-we-love, system, conference, experience-report, joyent&lt;/p&gt;

&lt;h2 id=&#34;the-agonizing-death-of-an-astronaut&#34;&gt;The agonizing death of an astronaut&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.javaslang.io/the-agonizing-death-of-an-astronaut/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Daniel Dietrich on why the implementation of the &lt;code&gt;Option&lt;/code&gt; in Javaslang seems to be broken but, in fact, follows the rules of the monads.&lt;/p&gt;

&lt;p&gt;Explains why &lt;code&gt;map&lt;/code&gt; should be used for non-changing contexts and &lt;code&gt;flatmap&lt;/code&gt; should be used for changing it.&lt;/p&gt;

&lt;p&gt;Tags: daniel-dietrich, monad, option, haskell, optional, maybe, scala, javaslang&lt;/p&gt;

&lt;h2 id=&#34;we-reverse-engineered-16k-apps-here-s-what-we-found&#34;&gt;We reverse engineered 16k apps, here’s what we found&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hackernoon.com/we-reverse-engineered-16k-apps-heres-what-we-found-51bdf3b456bb&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Fallible team, in which they describe the analysis of apps. They discovered 2500 apps with key and secret on them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] whenever you hardcode any API key/token in the app, think hard if you really need to hardcode this, understand the API usage and the read/write scope of the tokens before putting it in the apps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: analysis, security, app, key, token, api, fallible&lt;/p&gt;

&lt;h2 id=&#34;oh-the-emails-you-ll-get&#34;&gt;Oh, the emails you’ll get&amp;hellip;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.joelonsoftware.com/2006/11/09/oh-the-emails-youll-get/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joel Spolsky, in which he explains how some companies focus on some metrics for measuring performance, how difficult it is to measure performance.&lt;/p&gt;

&lt;p&gt;Tags: joel-spolsky, performance, management, consulting&lt;/p&gt;

&lt;h2 id=&#34;2002-07-15-measurement&#34;&gt;2002/07/15 - Measurement&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.joelonsoftware.com/2002/07/15/20020715/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joel Spolsky where he explains how measuring performance is difficult, according to  Robert D. Austin in his book Measuring and Managing Performance in Organizations. He gives some examples of that, mainly about paying out bonuses for performance reasons.&lt;/p&gt;

&lt;p&gt;Tags: joel-spolsky, robert-austin, measuring-performance, managing-performance, book, knowledge-worker, bonus, pay, performance, organization&lt;/p&gt;

&lt;h2 id=&#34;the-purpose-of-life-is-not-happiness-it-s-usefulness&#34;&gt;The Purpose Of Life Is Not Happiness: It’s Usefulness&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://dariusforoux.com/happiness-usefulness/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Darius Foroux on what the purpose of life is about: making a difference (even if small) in what you leave behind.&lt;/p&gt;

&lt;p&gt;Tags: psychology, purpose-of-life, usefulness, happiness, darius-foroux&lt;/p&gt;

&lt;h2 id=&#34;the-future-of-user-interfaces&#34;&gt;The Future of User Interfaces&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://brandur.org/interfaces&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brandur on how interfaces are becoming more and more bloated, slow and ridden with animations. All of that is targeted to the beginner user, rather than the proficient one. He suggests some ideas on finding inspiration from the terminal applications&lt;/p&gt;

&lt;p&gt;Tags: brandur, interface, interface-design, ux, ui&lt;/p&gt;

&lt;h2 id=&#34;my-increasing-frustration-with-clojure&#34;&gt;My Increasing Frustration With Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ashtonkemerling.com/blog/2016/06/11/my-increasing-frustration-with-clojure/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ashton Kemerling on the problems he has found working professionally with Clojure and some possible solutions.&lt;/p&gt;

&lt;p&gt;Tags: clojure, language, ashton-kemerling, functional-programming, problem, frustration&lt;/p&gt;

&lt;h2 id=&#34;java-without-if&#34;&gt;Java Without If&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ashtonkemerling.com/blog/2017/01/26/java-without-if/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ashton Kemerling on how he is using a library called &amp;lsquo;lambda&amp;rsquo;, which brings some of the functional programming features to Java.&lt;/p&gt;

&lt;p&gt;Tags: lambda, library, ashton-kemerling, functional-programming, java, palatable, john-napier&lt;/p&gt;

&lt;h2 id=&#34;top-ten-pull-request-review-mistakes&#34;&gt;Top ten pull request review mistakes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.scottnonnenberg.com/top-ten-pull-request-review-mistakes/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Scott Nonnenberg on the most common mistakes while doing a code review in the context of a pull request.&lt;/p&gt;

&lt;p&gt;Tags: scott-nonnenberg, pull-request, code-review, github, diff, listicle&lt;/p&gt;

&lt;h2 id=&#34;shutting-down-simplicity-itself&#34;&gt;Shutting down Simplicity Itself&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://daviddawson.me/blog/2017/02/04/simplicity-itself-shutdown.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Dawson on why he&amp;rsquo;s shutting down his consultancy company, Simplicity Itself, which was mainly focused on microservices.&lt;/p&gt;

&lt;p&gt;Tags: david-dawson, simplicity-itself, shut-down, company, consulting, post-mortem, postmortem&lt;/p&gt;

&lt;h2 id=&#34;turn-off-your-cellphone&#34;&gt;Turn Off Your Cellphone&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://brandur.org/fragments/turn-off-your-cellphone&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brandur on how to get more done by unplugging the notifications&lt;/p&gt;

&lt;p&gt;Tags: brandur, time-management, interruption, phone, notification&lt;/p&gt;

&lt;h2 id=&#34;the-dark-standup&#34;&gt;The Dark Standup&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://18f.gsa.gov/2017/01/19/the-dark-standup/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Alan Brouilette on the steps they took to reduce the amount of hours worked. It started with a few extra questions during the daily standup:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;What didn’t you do today because you stopped working on time?&lt;/li&gt;
&lt;li&gt;What will the impact be on tomorrow because of it?&lt;/li&gt;
&lt;li&gt;How much more time would you have needed to get everything done today?&lt;/li&gt;
&lt;li&gt;What will you do with those hours tonight instead?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;and what they realized after a two-week experiment:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The costs of context switching are much higher than we realized.&lt;/li&gt;
&lt;li&gt;We were spending a lot of time doing things that were urgent but not important, or that didn’t need to have been urgent at all.&lt;/li&gt;
&lt;li&gt;We needed to be a lot more ruthless about saying “No.”&lt;/li&gt;
&lt;li&gt;Some Operations roles are legitimately shorthanded, some of us just needed to impose a little order.&lt;/li&gt;
&lt;li&gt;FOMO WIP (unnecessary work one takes on because one fears missing something) is a real problem, especially as regards to Slack and meetings.&lt;/li&gt;
&lt;li&gt;We worked better in the time we had to work, knowing it was finite.&lt;/li&gt;
&lt;li&gt;Work-life balance improves both work and life. People literally slept better when limiting after-hours exposure to Slack and email. [&amp;hellip;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: dark-standup, quote, limited-time, overtime, team-management, experiment, question, alan-brouilette&lt;/p&gt;

&lt;h2 id=&#34;what-it-means-to-be-a-remote-first-company&#34;&gt;What it Means to be a Remote-First Company&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.stackoverflow.blog/code-for-a-living/what-it-means-to-be-a-remote-first-company&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by  Alyssa Mazzina on what Stack Overflow does to keep its remote employees happy, how they are a remote-first company and small practicalities like tools, holiday gifts and stipends.&lt;/p&gt;

&lt;p&gt;Tags: alyssa-mazzina, team-management, remote, remote-work, stack-overflow, team&lt;/p&gt;

&lt;h2 id=&#34;google-s-not-so-secret-new-os&#34;&gt;Google’s not-so-secret new OS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://techspecs.blog/blog/2017/2/14/googles-not-so-secret-new-os&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; describing the state of Google&amp;rsquo;s new operating system, Fuchsia or Andromeda (the final name is not final yet).&lt;/p&gt;

&lt;p&gt;Tags: google, os, operating-system, daniel-matte, fuchsia, andromeda&lt;/p&gt;

&lt;h2 id=&#34;four-secrets-of-people-who-finish-their-workweeks-on-thursday&#34;&gt;Four Secrets Of People Who Finish Their Workweeks On Thursday&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.fastcompany.com/3068122/work-smart/four-secrets-of-people-who-finish-their-workweeks-on-thursday&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kat Boogaard that includes four tips to finish your week early:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They Schedule Intentionally&lt;/li&gt;
&lt;li&gt;They Focus On Priorities&lt;/li&gt;
&lt;li&gt;They Tune Out Distractions&lt;/li&gt;
&lt;li&gt;They Find Shortcuts&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tags: kat-boogaard, time-management, eisenhower-productivity-matrix, urgent-vs-important, important-vs-urgent, urgent, important, productivity&lt;/p&gt;

&lt;h2 id=&#34;reflecting-on-one-very-very-strange-year-at-uber&#34;&gt;Reflecting On One Very, Very Strange Year At Uber&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Susan J Fowler on some bad HR practices at Uber and how they are part of the reason their low percentage of women (3%) in the engineering team.&lt;/p&gt;

&lt;p&gt;Tags: sexism, uber, susan-fowler, hr, human-resources, women, work-environment, review&lt;/p&gt;

&lt;h2 id=&#34;ni-dioses-ni-reyes-sólo-el-hombre&#34;&gt;Ni dioses ni reyes. Sólo el hombre.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive1.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=860ccae5e2&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; (in Spanish) by David Bonilla on which he talks about the God Mode and how that is implemented in different applications.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also liked this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Los desarrolladores sólo somos herreros que forjan ceros y unos. Construimos herramientas para satisfacer necesidades de nuestros usuarios, sin que eso nos haga mejores que ellos o nos dé el derecho de supervisar y juzgar sus actos. A la hora de diseñar nuevos sistemas y funcionalidades, lo único que nunca deberíamos olvidar es que no somos dioses ni reyes, sólo hombres.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rough translation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We, developers, we are only blacksmiths of the digital era. We build tools to satisfy our user&amp;rsquo;s need, without that fact making us better than they are or without the right to overview what they do or to judge their acts. When designing new systems and features, the only thing we must never forget is that we are neither gods nor kings, just humans.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;las-tres-erres&#34;&gt;Las tres erres&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article (in Spanish) by David Bonilla in which he explains three necessary factors when considering a job offer:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Referentes: es imposible conocer a toda la plantilla de una empresa, pero si conoces a dos o tres empleados clave, podrás hacerte una idea de cómo será el equipo que te vas a encontrar. La gente prefiere trabajar con compañeros que compartan su ética y valores. Yo conocía a casi toda la plantilla de Comalatech tras haber coincidido con unos y otros en distintos eventos… y aún hay gente que se pregunta para qué sirve ir a conferencias técnicas si en Internet “se puede encontrar todo”.&lt;/li&gt;
&lt;li&gt;Referencias: es complicado, pero en el día a día una persona puede ser completamente diferente a la imagen que proyecta públicamente. Me ha pasado. Por eso es importante contar con referencias, terceras personas –antiguos empleados, clientes o proveedores- con las que haya trabajado. Los españoles no solemos pedirlas, pero para los anglosajones son un requisito imprescindible. En el caso de Comala, conseguí las mejores de la mejor fuente posible.&lt;/li&gt;
&lt;li&gt;Retos: los profesionales trabajamos por dinero, pero a partir de cierto nivel de salario, podemos permitirnos el lujo de elegir un trabajo u otro según otros factores. En mi caso, siempre he priorizado por encima de todo el potencial de aprendizaje y, en ese sentido, Comalatech no tenía rival.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: referent, reference, challenge, david-bonilla, bonilista, change-job, job-offer&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Books read in 2016Q4</title>
      <link>https://alvarogarcia7.github.io/blog/2016/12/31/books-read-in-2016q4/</link>
      <pubDate>Sat, 31 Dec 2016 12:49:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/12/31/books-read-in-2016q4/</guid>
      <description>&lt;p&gt;Books I&amp;rsquo;ve read this quarter&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;Books started, not yet finished (WIP):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/functional-programming-in-scala&#34; target=&#34;_blank&#34;&gt;Functional Programming in Scala&lt;/a&gt;, by Chiusano and Bjarnason. Doing the exercises with the &lt;a href=&#34;https://twitter.com/@codurance&#34; target=&#34;_blank&#34;&gt;codurance&lt;/a&gt; team&lt;/li&gt;
&lt;li&gt;Gödel, Escher, Bach: An Eternal Golden Braid, Hofstadter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Books I want to finish. Usually come from another quarter:&lt;/p&gt;

&lt;p&gt;Books that have entered the queue:&lt;/p&gt;

&lt;p&gt;Non-technical that have entered the queue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La psicología del dinero, Hammond&lt;/li&gt;
&lt;li&gt;Invirtiendo a largo plazo, García Paramés&lt;/li&gt;
&lt;li&gt;Quién domina el mundo, Chomsky&lt;/li&gt;
&lt;li&gt;Homenaje a Cataluña, Orwell&lt;/li&gt;
&lt;li&gt;El camino al 18J, Payne&lt;/li&gt;
&lt;li&gt;Cartas desde la revolución bolchevique, Sadoul&lt;/li&gt;
&lt;li&gt;Shogun: The Life of Tokugawa Ieyasu, Sadler&lt;/li&gt;
&lt;li&gt;Els jueus i Catalunya, Villatoro&lt;/li&gt;
&lt;li&gt;Russell en 90 minutos, Strathern&lt;/li&gt;
&lt;li&gt;El problema de los tres cuerpos, Liu&lt;/li&gt;
&lt;/ul&gt;

&lt;!--

repository for WIP books:

  * [The Well-Grounded Java Developer](http://www.manning.com/evans/) by Benjamin J. Evans and Martijn Verburg
  * [Learn You a Haskell for Great Good!](http://learnyouahaskell.com/) by Miran Lipovača
  * [Working Effectively with Legacy Code](http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052) by Michael Feathers, again. Blog posts under the tag [wewlc](/categories/wewlc
/)
  * [Haskell Programming](http://haskellbook.com/), By Chris Allen and Julie Moronuki. This book is still in progress and I&#39;m reviewing it
  * [Pragmatic Thinking and Learning: Refactor Your Wetware](https://pragprog.com/book/ahptl/pragmatic-thinking-and-learning) by Andy Hunt  
  
  Books I want to finish:

  * [Refactoring](http://martinfowler.com/books/refactoring.html) by Martin Fowler, with Kent Beck, John Brant, William Opdyke, and Don Roberts
  * [Java Performance: The Definitive Guide](http://shop.oreilly.com/product/0636920028499.do) by Scott Oaks
  * [Scrum and XP from the trenches](http://www.infoq.com/minibooks/scrum-xp-from-the-trenches) by Henrik Kniberg
  * [The Leprechauns of Software Engineering](https://leanpub.com/leprechauns) by Laurent Bossavit, again. [Gift](https://twitter.com/alvarobiz/status/611799849911103488)  
  * [Functional Programming Patterns in Scala and Clojure](https://pragprog.com/book/mbfpp/functional-programming-patterns-in-scala-and-clojure) by Michael Bevilacqua-Linn
  * [Why programmers work at night](https://leanpub.com/nightowls) by Swizec Teller
  * [Readings in Database Systems, 5th Edition](http://www.redbook.io/) by Peter Bailis, Joseph M. Hellerstein, Michael Stonebraker, editors
  * [Domain-Driven Design: Tackling Complexity in the Heart of Software](http://www.amazon.com/exec/obidos/ASIN/0321125215) by Eric Evans, again.
  * [Amazon Web Services in Action](https://www.manning.com/books/amazon-web-services-in-action) by Michael Wittig and Andreas Wittig
  * [Release It! - Design and Deploy Production-Ready Software](https://pragprog.com/book/mnee/release-it), by Michael T. Nygard, with the &#39;[@deAprendices][deaprendices]&#39;s reading club&#39;. Blog posts under the tag [release-it](/categories/release-it
/)
  * [Clojure Programming - Practical Lisp for the Java World](http://shop.oreilly.com/product/0636920013754.do) by Chas Emerick, Brian Carper, Christophe Grand


Books in the queue:

  * [Mature optimization](http://carlos.bueno.org/optimization/mature-optimization.pdf), by Carlos Bueno
  * [XUnit Test Patterns](http://xunitpatterns.com/) by Gerard Meszaros
  * [Let Over Lambda](http://letoverlambda.com/) by Doug Hoyte
  * [The Haskell Road to Logic, Math and Programming](http://fldit-www.cs.uni-dortmund.de/~peter/PS07/HR.pdf) by Kees Doets and Jan van Eijck
  * [Types and Programming Languages](http://www.cis.upenn.edu/~bcpierce/tapl/) by Benjamin C. Pierce
  * [Fundamentals of Object-oriented Design in UML](http://www.amazon.co.uk/dp/020169946X/ref=pe_385721_37038051_TE_3p_dp_1) by Meilir Page-Jones
  * [Clojure for the brave and true](http://www.braveclojure.com/#toc)
  * [How to Solve It: A New Aspect of Mathematical Method](http://press.princeton.edu/titles/669.html) by George Pólya
  * [Conceptual Mathematics: A First Introduction to Categories](http://www.amazon.com/Conceptual-Mathematics-First-Introduction-Categories/dp/052171916X) by Lawvere and Schanuel
  * [Understanding Computation: From Simple Machines to Impossible Programs](http://computationbook.com/) by Tom Stuart
  * [Programming in Haskell](http://www.cambridge.org/wm-ecommerce-web/academic/landingPage/PIHMOOC) by Graham Hutton
  * [Programming Languages: Application and Interpretation](http://cs.brown.edu/~sk/Publications/Books/ProgLangs/2007-04-26/) by Shriram Krishnamurthi
  * [Doing Math with Python](https://www.nostarch.com/doingmathwithpython) by Amit Saha. [Gift from the PyConEs 2015](https://twitter.com/alvarobiz/status/668927802159288322)
  * [Perfect Software: And Other Illusions about Testing](http://www.geraldmweinberg.com/Site/Perfect_Software.html) by Gerald M. Weinberg  
  * [Computability and Complexity - From a Programming Perspective](https://mitpress.mit.edu/books/computability-and-complexity) by Neil Deaton Jones
  * [Thinking Forth: a language and philosophy for solving problems](http://thinking-forth.sourceforge.net/) by Leo Brodie
  * [Concepts, Techniques, and Models of Computer Programming](https://mitpress.mit.edu/index.php?q=books/concepts-techniques-and-models-computer-programming) by Peter Van Roy and Seif Haridi
  * [Bridging the Communication Gap](http://books.gojko.net/bridging-the-communication-gap/) by Gojko Adzic
  * [Specification by Example](http://books.gojko.net/specification-by-example/) by Gojko Adzic
  * [The Cucumber book](https://pragprog.com/book/hwcuc/the-cucumber-book) by Matt Wynne and Aslak Hellesøy
  * [Software Architecture for Developers](https://leanpub.com/software-architecture-for-developers) by Simon Brown
  * [Object Design: Roles, Responsibilities, and Collaborations ](http://www.amazon.com/Object-Design-Roles-Responsibilities-Collaborations/dp/0201379430) by Rebecca Wirfs-Brock and Alan McKean
  * [RESTful Web APIs](http://shop.oreilly.com/product/0636920028468.do) by Leonard Richardson, Mike Amundsen, Sam Ruby
  * [RESTful Web Services Cookbook](http://shop.oreilly.com/product/9780596801694.do) by Subbu Allamaraju
  * [Building Maintainable Software](https://www.sig.eu/en/building-maintainable-software) by Joost Visser
  * [Serverless - Patterns of Modern Application Design Using Microservices (Amazon Web Services Edition)](https://leanpub.com/serverless) by Obie Fernandez 

Learning paths that have entered the queue:

  * [Software Architecture Fundamentals](http://shop.oreilly.com/category/learning-path/software-architecture-fundamentals.do)
  * [HTML5 Fundamentals](http://shop.oreilly.com/category/learning-path/html5-fundamentals.do)
  * [Designing Web APIs](http://shop.oreilly.com/category/learning-path/designing-web-apis.do)
  * [Dive Deeper into PHP Programming](http://shop.oreilly.com/category/learning-path/dive-deeper-php-programming.do)
  * [Introduction to the Modern Front-End Web](http://shop.oreilly.com/category/learning-path/intro-modern-front-end-web.do)


--&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;The ending date of the quarter is the same as the publication date
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>