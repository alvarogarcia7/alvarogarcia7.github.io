<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jbehave on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/jbehave/</link>
    <description>Recent content in jbehave on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Feb 2015 02:30:38 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/jbehave/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Open discussion: Behaviour-Driven Development</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/15/open-discussion-behaviour-driven-development/</link>
      <pubDate>Sun, 15 Feb 2015 02:30:38 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/15/open-discussion-behaviour-driven-development/</guid>
      <description>This week we had a great discussion about Behavior Driven Development (BDD). We have explained it as a way of developing software based on requirements, via automatically tested specifications. For more information, see the wikipedia&amp;rsquo;s article on the subject
I forgot to mention that this is the perfect start to TDD, as this is usually called the double-loop TDD. See a post on it on coding is like cooking
In this double-loop TDD, the first thing is to create a BDD scenario, run it (red-1), create a unit test that reflects this red (red-2), pass it, refactor; go to red-1 as many times as you need, doing TDD cycles.</description>
    </item>
    
    <item>
      <title>Implementing BDD at a client</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/09/implementing-bdd-at-a-client/</link>
      <pubDate>Mon, 09 Feb 2015 22:23:44 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/09/implementing-bdd-at-a-client/</guid>
      <description>This was a low-hanging fruit as a team member who specialises in QA complained about testing in the last moment during the last sprint&amp;rsquo;s retrospective.
Did the grunt job of connecting the dots and configuring the maven project (using jbehave). Also, got the inspiration from a tutorial.
Announced it only as it was in place and QA approved of it
This grunt job clicked with Sweep the floor
Let&amp;rsquo;s see how the sprint goes and what are the pain points during this sprint</description>
    </item>
    
  </channel>
</rss>
