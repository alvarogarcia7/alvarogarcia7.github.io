<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ruby on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/ruby/</link>
    <description>Recent content in ruby on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Jul 2018 07:03:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Writing safe(r) bash scripts</title>
      <link>https://alvarogarcia7.github.io/blog/2018/07/13/writing-safe-bash-scripts/</link>
      <pubDate>Fri, 13 Jul 2018 07:03:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/07/13/writing-safe-bash-scripts/</guid>
      <description>After writing more and more bash scripts for a client, I&amp;rsquo;ve decided to write down my thoughts about it.
This assumes you have some knowledge about bash, as it is not intended as a beginner&amp;rsquo;s tutorial.
Why bash scripts?  Bash is present in almost every unix/linux-based stack, now some Windows as well. An exception is the &amp;lsquo;alpine&amp;rsquo; docker images, which have a smaller, lighter shell (more on that later) Everything that you can automate, you can do from bash.</description>
    </item>
    
    <item>
      <title>Self-Study in December 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/12/01/self-study-in-december-2016/</link>
      <pubDate>Thu, 01 Dec 2016 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/12/01/self-study-in-december-2016/</guid>
      <description>A Docker Fork: Talk of a Split Is Now on the Table I&amp;rsquo;ve read this article by Alex Williams and Joab Jackson about the possible split in the Docker environment following Docker&amp;rsquo;s and other providers&#39; product roadmaps. Each own has their policies and priorities and they collide in this case
Tags: docker, alex-williams, joab-jackson, container, oci, kubernetes, devops, tool
An Ode to Boring: Creating Open and Stable Container World I&amp;rsquo;ve read this article by Bob Wise, in which he describes the state of the Docker tool and the Docker Engine.</description>
    </item>
    
    <item>
      <title>Self-Study in July 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/07/04/self-study-in-july-2016/</link>
      <pubDate>Mon, 04 Jul 2016 10:47:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/07/04/self-study-in-july-2016/</guid>
      <description>Until the End of the Internet I&amp;rsquo;ve read this article by Jason Zimdars explaining the &amp;ldquo;end of the internet&amp;rdquo; policy at Basecamp: they will make everything possible to keep the services running for existing customer until the end or until the last customer uses it.
Tags: policy, end-of-the-internet, jason-zimdars, basecamp, product
How Agile Principles Can Fund Your Start-Up I&amp;rsquo;ve read this article by Jurgen Appelo explaining how the agile values can help you negotiate funding for your startup: instead of negotiating with each investor, agree on a formula and invest in many small rounds, instead of a big one.</description>
    </item>
    
    <item>
      <title>Self-Study in March 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</link>
      <pubDate>Wed, 02 Mar 2016 12:58:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</guid>
      <description>Learning Programming Isnâ€™t That Hard, Deep Work Is Hard I&amp;rsquo;ve read this article by Benedict Fritz on two types of work (i.e., deep and shallow) and how programming is of the deep type. He links the difficulty of learning to program to the difficulty of practicing deep work.
Tags: analogy, benedict-fritz, deep-work, shallow-work, learn-to-program, psychology
BeCodeWeek by Yeray Darias I&amp;rsquo;ve read this category of posts by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.</description>
    </item>
    
    <item>
      <title>Self-Study in February 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</link>
      <pubDate>Mon, 01 Feb 2016 02:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</guid>
      <description>Software and all that comes with it I&amp;rsquo;ve read these slides about creating software and asking questions to deliver value, by Alberto Brandolini
Tags: alberto-brandolini, software, slide, team-management, agile
Driving your DBA crazy in 3 easy steps I&amp;rsquo;ve read these slides about dealing with the knowledge that is present in the database, not expressed in ubiquitous language and cause of the low bus factor, by Alberto Brandolini
Analogy between the movie The Shining and a model / entities / aggregates.</description>
    </item>
    
    <item>
      <title>Self-Study in December 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</link>
      <pubDate>Wed, 02 Dec 2015 09:50:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</guid>
      <description>Ruby Equality And Object Comparison I&amp;rsquo;ve read this article, written by Alan Skorkin, that explains equality comparisons in ruby:
 equal? is reference equality == is value equality eql? is value and type equality  Tags: ruby, comparison, equality, object, reference, alan-skorkin
Software Folklore I&amp;rsquo;ve watched this PechaKucha by Chris Ford on what are laws and how they relate to creating software. Also talks on what could be an analogy to software creation (says not science, not engineering)</description>
    </item>
    
    <item>
      <title>Functional Implementation Patterns</title>
      <link>https://alvarogarcia7.github.io/blog/2015/11/02/functional-implementation-patterns/</link>
      <pubDate>Mon, 02 Nov 2015 21:26:13 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/11/02/functional-implementation-patterns/</guid>
      <description>Collection of HOFs Select Attribute class Array def select_attribute attr self.map { |unit| unit[attr] } end end usage:
[71] pry(main)&amp;gt; [ {:element =&amp;gt; 1, :even? =&amp;gt; false}, {:element =&amp;gt; 2, :even? =&amp;gt; true}, {:element =&amp;gt; 3, :even? =&amp;gt; false}] .select_attribute :even? =&amp;gt; [false, true, false] Collection of patterns Decorating a collection Introduction You want to materialize properties from a collection
Alternative names  Intermediary Functional decorator Collection Annotation (from Wallingford&amp;rsquo;s Roundabout, especially Interface procedure)  Example [62] pry(main)&amp;gt; [1,2,3] .</description>
    </item>
    
    <item>
      <title>Self-Study in November 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</link>
      <pubDate>Mon, 02 Nov 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</guid>
      <description>Call me maybe: RabbitMQ I&amp;rsquo;ve read this article by Kyle Kingsbury on using RabbitMQ as a lock service. It investigates and gives a counterexample of using it for this purpose.
Uses Knossos to do the testing and surfaces a problem with it. Explains specific problems on locking: at-most-once and at-least-once message delivery
Note: References Jepsen (I guess an inside joke to the song &amp;ldquo;Call me maybe&amp;rdquo; by Carly Rae Jepsen) for at-most-once and at-least-once message delivery.</description>
    </item>
    
    <item>
      <title>Tip: calling all methods in an Object in Ruby</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/12/calling-all-methods-in-a-ruby-object/</link>
      <pubDate>Mon, 12 Oct 2015 11:55:17 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/12/calling-all-methods-in-a-ruby-object/</guid>
      <description>In Ruby, you can query the methods an object accepts:
pry(main)&amp;gt; 1.methods =&amp;gt; [:to_s, :-@, :+, :-, :*, :/, :div, :%, :modulo, :divmod, :fdiv, ... In case you want to call all methods, this can be useful (plus its tests):
def call_all_methods(object, *args) # remove methods that modify the PRY environment or are too verbose success = {} error = {} exclusions = [:pry, :methods, :private_methods, :public_methods, :gem].map { |x| x.</description>
    </item>
    
    <item>
      <title>Recognizing dependencies</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/08/recognizing-dependencies/</link>
      <pubDate>Sat, 08 Aug 2015 14:11:29 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/08/recognizing-dependencies/</guid>
      <description>From the Chapter 3, Managing Dependencies, from the book Practical Object-Oriented Design in Ruby, by Sandi Metz:
 An object has a dependency when it knows:
 The name of another class. [&amp;hellip;] The name of a message that it intends to send to someone other than self. [&amp;hellip;] The arguments that a message requires. [&amp;hellip;] The order of those arguments. [&amp;hellip;]   If an object knows any of these facts about another object, it has dependencies to the other.</description>
    </item>
    
    <item>
      <title>Self-Study in August 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</link>
      <pubDate>Sun, 02 Aug 2015 21:45:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</guid>
      <description>Humble Object I&amp;rsquo;ve read the Humble Object list of patterns, by Gerard Meszaros, including:
 humble dialog humble executable humble transaction controller humble container adapter  Tags: pattern, gerard-meszaros
How you know I&amp;rsquo;ve reread this small essay by Paul Graham on storing information in our heads, based on the context. On the importance of rereading, to add more contexts to the initial one.
Tags: paul-graham, reread, read
Protected Variation: The Importance of Being Closed I&amp;rsquo;ve read this article by Craig Larman in the magazine IEEE Software &amp;gt; Design.</description>
    </item>
    
    <item>
      <title>Practical Object-Oriented Design in Ruby: Chapter 4</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/26/practical-object-oriented-design-in-ruby-chapter-4/</link>
      <pubDate>Sun, 26 Jul 2015 22:40:29 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/26/practical-object-oriented-design-in-ruby-chapter-4/</guid>
      <description>We&amp;rsquo;ve read the fourth chapter from the Practical Object-Oriented Design in Ruby, by Sandi Metz.
These are the concepts and links brought up during the discussion:
 The craftsmanship analogy, as exposed in these tweets Difference between function and method What vs How (also present in the GOOS)  </description>
    </item>
    
    <item>
      <title>Practical Object-Oriented Design in Ruby: Chapter 2</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/12/practical-object-oriented-design-in-ruby-chapter-2/</link>
      <pubDate>Sun, 12 Jul 2015 00:07:29 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/12/practical-object-oriented-design-in-ruby-chapter-2/</guid>
      <description>We&amp;rsquo;ve read the second chapter from the Practical Object-Oriented Design in Ruby, by Sandi Metz.
These are the concepts and links brought up during the discussion:
 Data Clump at the bliki Refactoring with Loops and Collection Pipelines, indirect link to the article by Martin Fowler When Worse Is Better: Incrementally Escaping Local Maxima, indirect link to the article by Kent Beck Getting It Right by Betting on Wrong, indirect link to an article by Sandi Metz  </description>
    </item>
    
    <item>
      <title>Iterate with index in clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/04/iterate-with-index-in-clojure/</link>
      <pubDate>Sat, 04 Jul 2015 14:34:37 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/04/iterate-with-index-in-clojure/</guid>
      <description>Scenario: iterate a sequence (seq) with its index
The lines have an implicit line number (starting by 1, in most editors):
[1] line1 [2] line2 [3] hello When you read it from file to a variable, it is converted to:
(&amp;#34;line1&amp;#34; &amp;#34;line2&amp;#34; &amp;#34;hello&amp;#34;) This implicit line number value is not present, therefore you need to assign them one.
In ruby, you have this construct:
array = [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;] array.each_with_index {|val, index| puts &amp;#34;#{val}=&amp;gt; #{index}&amp;#34; } Source</description>
    </item>
    
    <item>
      <title>Practical Object-Oriented Design in Ruby: Chapter 1</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/29/practical-object-oriented-design-in-ruby-chapter-1/</link>
      <pubDate>Mon, 29 Jun 2015 00:07:29 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/29/practical-object-oriented-design-in-ruby-chapter-1/</guid>
      <description>We&amp;rsquo;ve read the first chapter from the Practical Object-Oriented Design in Ruby, by Sandi Metz.
These are the concepts and links brought up during the discussion:
 Walking on water and developing software from a specification are easy if both are frozen.
Edward V Berard, source is Wikiquote
 Two cited papers on metrics for design:
 A metrics suite for object oriented design by Chidamber and Kemerer A validation of object-oriented design metrics as quality indicators by Basili, Briand and Melo  The video for the &amp;lsquo;churn&amp;rsquo; as a measure:</description>
    </item>
    
    <item>
      <title>Video: Nothing is something</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/04/video-nothing-is-something/</link>
      <pubDate>Mon, 04 May 2015 07:43:14 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/04/video-nothing-is-something/</guid>
      <description>I have seen this video: [Nothing is something][video] by [Sandi Metz][sandimetz], as I saw it recommended [here][recommendation]
In the video, she talks programming in this fashion: (it is a stack, not an unordered list)
 Abstraction seeking Message centric Condition Averse Smalltalk Infected   Not here to change the language but change you
 This is a pattern I&amp;rsquo;ve also heard from [Alvaro Videla][old_sound], where he said that other, more powerful languages can change your mind and help you bring some of those concepts to your own language.</description>
    </item>
    
  </channel>
</rss>
