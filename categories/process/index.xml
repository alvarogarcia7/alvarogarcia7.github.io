<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/process/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/process/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Senior Software Engineer, Chapter 8</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</link>
      <pubDate>Sun, 28 May 2017 16:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</guid>
      <description>

&lt;h1 id=&#34;chapter-8-bootstrap-a-greenfield-system&#34;&gt;Chapter 8: Bootstrap a Greenfield System&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Working on a brand new application can be a lot of fun.
There’s no &amp;ldquo;baggage&amp;rdquo; from legacy code, no technical debt,
and there’s a wonderful feeling of freshness when starting
an app from scratch.&lt;/p&gt;

&lt;p&gt;(p. 101)&lt;/p&gt;

&lt;p&gt;The decisions you make [&amp;hellip;] can have a lasting impact&lt;/p&gt;

&lt;p&gt;(p. 101)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-1-overview&#34;&gt;8.1 Overview&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;When given a greenfield project [&amp;hellip;] you have two main goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure everyone involved in the project feels good about the initial direction and decisions being made&lt;/li&gt;
&lt;li&gt;Establish a location for developers to start contributing code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p. 102)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mention of the iteration Zero, that&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] indicates that no direct business value is going
to be delivered initially&lt;/p&gt;

&lt;p&gt;(p. 102)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-2-understand-the-problem&#34;&gt;8.2 Understand the problem&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You do your company a disservice to build an application you don’t think needs to exist.&lt;/p&gt;

&lt;p&gt;To understand why the application should be built, find answers to these questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What business problems will this application solve?&lt;/li&gt;
&lt;li&gt;Why is the proposed application the best solutiont o those problems?&lt;/li&gt;
&lt;li&gt;What other solutions were considered?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p. 104)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mentioning the importance of asking why about these problems, also, whether this decided solution is good / the best.&lt;/p&gt;

&lt;h3 id=&#34;8-3-understand-the-system-s-place-in-the-technical-architecture&#34;&gt;8.3 Understand the System’s Place in the Technical Architecture&lt;/h3&gt;

&lt;p&gt;Mention of the &amp;lsquo;technical architecture&amp;rsquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;existing applications and existing infrastructure&lt;/p&gt;

&lt;p&gt;(p. 105)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-4-choose-technology&#34;&gt;8.4 Choose Technology&lt;/h3&gt;

&lt;h4 id=&#34;using-the-blessed-stack&#34;&gt;Using the Blessed Stack&lt;/h4&gt;

&lt;p&gt;Be prepared to heavily defend your position if you decide to not use
the blessed stack, both to yourself and others. (paraphrased from p. 107)&lt;/p&gt;

&lt;h3 id=&#34;using-a-different-technology&#34;&gt;Using a Different Technology&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You must answer the question “Why shouldn’t I use the blessed stack?”&lt;/p&gt;

&lt;p&gt;[&amp;hellip;]&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] your first duty is to deliver results.&lt;/p&gt;

&lt;p&gt;(p. 108).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also consider these factors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fitness for purpose&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Developer productivity&lt;/li&gt;
&lt;li&gt;Developer happiness - also called developer experience (DX)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(from p. 108)&lt;/p&gt;

&lt;h3 id=&#34;8-5-outline-the-application-s-architecture&#34;&gt;8.5 Outline the Application’s Architecture&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You want your application to ooze consistency&lt;/p&gt;

&lt;p&gt;(p. 111)&lt;/p&gt;

&lt;p&gt;you want to establish a “culture of consistency”&lt;/p&gt;

&lt;p&gt;(p. 113)&lt;/p&gt;

&lt;p&gt;Each developer should be encouraged to establish a convention when
they first face the need to have one.&lt;/p&gt;

&lt;p&gt;(p. 113)&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] considering the political impact [&amp;hellip;] Since it often doesn’t
matter what the decision is, making an unpopular decision can be
little gain for a lot of trouble.&lt;/p&gt;

&lt;p&gt;(p. 114)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-7-create-a-minimum-deployable-system&#34;&gt;8.7 Create a Minimum Deployable System&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I like to think of deployment as the physical act of getting the code up in the production environment and launching as the act of allowing users access.&lt;/p&gt;

&lt;p&gt;(p. 118)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The difference between deploying and launching. This can be enforced
with some techniques to block/allow access, such as enabling/disabling
these features or controlling access to said features.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in October 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/10/01/self-study-in-october-2016/</link>
      <pubDate>Sat, 01 Oct 2016 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/10/01/self-study-in-october-2016/</guid>
      <description>

&lt;h2 id=&#34;should-engineers-design&#34;&gt;Should Engineers Design?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.capwatkins.com/should-engineers-design&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Cap Watkins where he explains the relationship between designers and programmers and how to get the latter involved in the design / UX / UI process.&lt;/p&gt;

&lt;p&gt;Tags: cap-watkins, design, ux, ui, exchange, cross-functional&lt;/p&gt;

&lt;h2 id=&#34;the-sliding-scale-of-giving-a-fuck&#34;&gt;The Sliding Scale of Giving a Fuck&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.capwatkins.com/the-sliding-scale-of-giving-a-fuck&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Cap Watkins where he explains that different topics have a different importance to each one of us: this topic might be very important for someone else, ergo, it makes mores sense to evaluate their option more carefully. When your importance level is not so high, you can take the other option easily.&lt;/p&gt;

&lt;p&gt;Tags: cap-watkins, sliding-scale, decision-making, discussion, argument, convincing, people&lt;/p&gt;

&lt;h2 id=&#34;nuevos-retos&#34;&gt;Nuevos retos&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.modestosanjuan.com/nuevos-retos/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Modesto San Juan about him leaving Codesai and joining a new adventure. In Spanish.&lt;/p&gt;

&lt;p&gt;Tags: career-change, modesto-san-juan, codesai, carlos-ble, .net&lt;/p&gt;

&lt;h2 id=&#34;muchas-gracias-modesto&#34;&gt;Muchas gracias Modesto&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.codesai.com/2016/10/muchas-gracias-modesto/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, by Carlos Blé and the rest of the Codesai team, saying goodbye to Modesto San Juan, commenting on their experiences working with him.&lt;/p&gt;

&lt;p&gt;Tags: career-change, modesto-san-juan, codesai, carlos-ble, .net&lt;/p&gt;

&lt;h2 id=&#34;introducing-ticket-magpie&#34;&gt;Introducing…Ticket Magpie&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://thetestdoctor.wordpress.com/2016/10/11/introducing-ticket-magpie/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Dan Billing about the a honeypot application he has to teach about security and attacks.&lt;/p&gt;

&lt;p&gt;Tags: david-hatanian, dan-billing, ticket-magpie, honeypot, security, attack&lt;/p&gt;

&lt;h2 id=&#34;destructuring-assignment&#34;&gt;Destructuring assignment&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&#34; target=&#34;_blank&#34;&gt;destructuring assignment page&lt;/a&gt; at MDN&lt;/p&gt;

&lt;p&gt;Tags: javascript, destructuring, mdn&lt;/p&gt;

&lt;h2 id=&#34;10-lessons-i-learned-from-doing-my-first-real-startup&#34;&gt;10 Lessons I Learned from Doing My First Real Startup&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://degoes.net/articles/precog-lessons-learned&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, a post-mortem analysis of his company, precog, with 10 items that he learned from it.&lt;/p&gt;

&lt;p&gt;Tags: john-de-goes, precog, post-mortem, startup, lessons-learned&lt;/p&gt;

&lt;h2 id=&#34;stop-being-nice-and-just-tell-the-fucking-truth-already&#34;&gt;Stop Being &amp;ldquo;Nice&amp;rdquo; and Just Tell the Fucking Truth Already&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://degoes.net/articles/be-nice-not-nice&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about giving honest feedback vs being a nice guy. The author concludes that the former is, in fact, the latter.&lt;/p&gt;

&lt;p&gt;Tags: feedback, honesty, comparison, john-de-goes&lt;/p&gt;

&lt;h2 id=&#34;haskell-s-type-classes-we-can-do-better&#34;&gt;Haskell&amp;rsquo;s Type Classes: We Can Do Better&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://degoes.net/articles/principled-typeclasses&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the abuse of newtype classes in haskell to overcome some language limitations.&lt;/p&gt;

&lt;p&gt;This article has helped me understand better inheritance, in the sections orphans and laws.&lt;/p&gt;

&lt;p&gt;Also suggests that the compiler could check at compile time that the children impose more restrictive (more specific) laws than the parent, given that any children must comply with the inherited rules (liskov substitution principle)&lt;/p&gt;

&lt;p&gt;Tags: inheritance, liskov, lsp, solid, john-de-goes, functional-programming, haskell, type-classes,  newtype-clases, monoid, law&lt;/p&gt;

&lt;h2 id=&#34;introducing-the-three-amigos&#34;&gt;Introducing the Three Amigos&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.scrumalliance.org/community/articles/2013/2013-april/introducing-the-three-amigos&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ryan Thomas Hewitt about the Three Amigos meeting, to better define a feature&lt;/p&gt;

&lt;p&gt;Tags: ryan-hewitt, three-amigos, agile, meeting, process, scrum&lt;/p&gt;

&lt;h2 id=&#34;apple-just-told-the-world-it-has-no-idea-who-the-mac-is-for&#34;&gt;Apple just told the world it has no idea who the Mac is for&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/charged-tech/apple-just-told-the-world-it-has-no-idea-who-the-mac-is-for-722a2438389b&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Owen Williams on the latest presentation by Apple.&lt;/p&gt;

&lt;p&gt;Tags: owen-williams, mac, apple, strategy&lt;/p&gt;

&lt;h2 id=&#34;sigil&#34;&gt;Sigil&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this page for the &lt;a href=&#34;https://en.wikipedia.org/wiki/Sigil_(computer_programming)&#34; target=&#34;_blank&#34;&gt;sigil&lt;/a&gt;, or the symbol attached to the variable. An example is the &lt;code&gt;$&lt;/code&gt; in Perl or the earmuffs in Clojure (&lt;code&gt;*out*&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Tags: sigil, wikipedia, example, computer-science&lt;/p&gt;

&lt;h2 id=&#34;list-of-languages-that-compile-to-js&#34;&gt;List of languages that compile to JS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of programming languages that compile to JS. By Jeremy Ashkenas and the community&lt;/p&gt;

&lt;p&gt;Tags: jeremy-ashkenas, compilation, compiled-language, compiled-to-javascript, compiled-javascript, javascript&lt;/p&gt;

&lt;h2 id=&#34;being-accountable-for-delivering-value&#34;&gt;Being accountable for delivering value&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://niksilver.com/2017/01/17/accountable-for-value/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Nik Silver on how the team should be accountable for delivering value, not accountable for delivering artifacts that produce value.&lt;/p&gt;

&lt;p&gt;Tags: agile, management, nik-silver, accountability, team, value&lt;/p&gt;

&lt;h2 id=&#34;getting-partial-value-from-partial-delivery&#34;&gt;Getting partial value from partial delivery&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://niksilver.com/2015/10/20/partial-value-from-partial-delivery/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Nik Silver on how it is possible to be agile in an environment where the business is not agile.&lt;/p&gt;

&lt;p&gt;Also, introduces the concept of &amp;lsquo;partial delivery&amp;rsquo;, meaning incomplete delivery from development to business.&lt;/p&gt;

&lt;p&gt;Tags: delivery, partial-delivery, management, value, partial-value, change, walkawayability, change, nik-silver&lt;/p&gt;

&lt;h2 id=&#34;hierarchy-of-opinion&#34;&gt;Hierarchy of opinion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://codurance.com/2017/01/16/hierarchy-of-opinion/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mashooq Badar on what are opinions, how important they are and how them impact others.&lt;/p&gt;

&lt;p&gt;Tags: mashooq-badar, opinion, critical-thinking&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in March 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</link>
      <pubDate>Wed, 02 Mar 2016 12:58:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</guid>
      <description>

&lt;h2 id=&#34;learning-programming-isn-t-that-hard-deep-work-is-hard&#34;&gt;Learning Programming Isn’t That Hard, Deep Work Is Hard&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@benedictfritz/learning-programming-isn-t-that-hard-deep-work-is-hard-40a4cf3104f4&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Benedict Fritz on two types of work (i.e., deep and shallow) and how programming is of the deep type. He links the difficulty of learning to program to the difficulty of practicing deep work.&lt;/p&gt;

&lt;p&gt;Tags: analogy, benedict-fritz, deep-work, shallow-work, learn-to-program, psychology&lt;/p&gt;

&lt;h2 id=&#34;becodeweek-by-yeray-darias&#34;&gt;BeCodeWeek by Yeray Darias&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://developerscookbook.blogspot.com.es/search/label/desk-surfing&#34; target=&#34;_blank&#34;&gt;this category of posts&lt;/a&gt; by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.&lt;/p&gt;

&lt;p&gt;Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc&lt;/p&gt;

&lt;p&gt;Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis&lt;/p&gt;

&lt;h2 id=&#34;becodeweek-by-yeray-darias-1&#34;&gt;BeCodeWeek by Yeray Darias&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://developerscookbook.blogspot.com.es/search/label/desk-surfing&#34; target=&#34;_blank&#34;&gt;this category of posts&lt;/a&gt; by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.&lt;/p&gt;

&lt;p&gt;Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc&lt;/p&gt;

&lt;p&gt;Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis&lt;/p&gt;

&lt;h2 id=&#34;tracer-bullets&#34;&gt;Tracer Bullets&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://c2.com/cgi/wiki?TracerBullets&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt; about tracer bullets, an analogy from the military warfare to a software project.&lt;/p&gt;

&lt;p&gt;Serves the purpose of adjusting the aim of the cannon to better reach the target.&lt;/p&gt;

&lt;p&gt;Tags: analogy, metaphor, warfare, management&lt;/p&gt;

&lt;h2 id=&#34;cohesion-the-cornerstone-of-software-design&#34;&gt;Cohesion - the cornerstone of software design&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://codurance.com/2016/03/03/cohesion-cornerstone-software-design/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sandro Mancuso on the topic of cohesion. Describes the 7 types of cohesion, as described in Structured Design&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, from worst to best:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coincidental cohesion&lt;/li&gt;
&lt;li&gt;Logical cohesion&lt;/li&gt;
&lt;li&gt;Temporal cohesion&lt;/li&gt;
&lt;li&gt;Procedural cohesion&lt;/li&gt;
&lt;li&gt;Communicational/informational cohesion&lt;/li&gt;
&lt;li&gt;Sequential cohesion&lt;/li&gt;
&lt;li&gt;Functional cohesion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and about Design-Level Cohesion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coincidental relation (R1)&lt;/li&gt;
&lt;li&gt;Conditional relation (R2)&lt;/li&gt;
&lt;li&gt;Iterative relation (R3)&lt;/li&gt;
&lt;li&gt;Communication relation (R4)&lt;/li&gt;
&lt;li&gt;Sequential relation (R5)&lt;/li&gt;
&lt;li&gt;Functional (R6)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: cohesion, codurance, edward-yourdon, larry-constantine, list, sandro-mancuso, software-design, design-level-cohesion, smc-cohesion, dlc-cohesion&lt;/p&gt;

&lt;h2 id=&#34;etsy-cto-q-a-we-need-software-engineers-not-developers&#34;&gt;Etsy CTO Q&amp;amp;A: We Need Software Engineers, Not Developers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/etsy-cto-qa-need-software-engineers-not-developers/&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt; with John Allspaw, where they explain the onboarding experience for new hires at Etsy, the DevOps philosophy and the need for engineering skills, more than developer skills. This can be exemplified in the need to know more, defining the boundaries of your job and finding the right tool for the job.&lt;/p&gt;

&lt;p&gt;Tags: devops, interview, q-and-a, john-allspaw, etsy, onboarding, hire, team-management, deploy&lt;/p&gt;

&lt;h2 id=&#34;frequency-reduces-difficulty&#34;&gt;Frequency Reduces Difficulty&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://martinfowler.com/bliki/FrequencyReducesDifficulty.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Martin Fowler on why we should repeat things that are difficult for us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perfectioning the technique&lt;/li&gt;
&lt;li&gt;Internalizing the details&lt;/li&gt;
&lt;li&gt;Easing its automation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: martin-fowler, automation, process, perfection, internalizing, technique, detail, process-theory, agile&lt;/p&gt;

&lt;h2 id=&#34;lambdas-are-confusing&#34;&gt;Lambdas are confusing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this video where Coman Hamilton from JAXenter interviews Dr. Heinz Kabutz about Java&amp;rsquo;s lambda syntax. Cites the problem with exceptions, generics, method overloading.&lt;/p&gt;

&lt;p&gt;Tags: java, lambda, coman-hamilton, jaxenter, heinz-kabutz, problem&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WcHom1eVhi4&amp;amp;feature=youtu.be&#34; target=&#34;_blank&#34;&gt;https://www.youtube.com/watch?v=WcHom1eVhi4&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;el-full-stack-developer-en-2016&#34;&gt;El full-stack developer en 2016&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.developerdepueblo.com/development/full-stack-developer-2016/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jose Ignacio Andrés about the job descriptions of 2016.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;El principal valor de un full-stack es poder simplificar el trabajo a los demás miembros del equipo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My translation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The main value of a full-stack developer is to be able to simplify other teammates&amp;rsquo; work&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: teamwork, teammate, fullstack, simplification, work, team-management, jose andres&lt;/p&gt;

&lt;h2 id=&#34;i-am-a-software-craftsman&#34;&gt;I am a software craftsman&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.dirv.me/i-am-a-software-craftsman/index.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Daniel Irvine about calling yourself a craftsman or not. He says that if you adhere to their values, you should.&lt;/p&gt;

&lt;p&gt;Tags: craftsmanship, label, daniel-irvine, craftsman, group-belonging&lt;/p&gt;

&lt;h2 id=&#34;teaching-programming-languages-in-a-post-linnaean-age&#34;&gt;Teaching Programming Languages in a Post-Linnaean Age&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://cs.brown.edu/~sk/Publications/Papers/Published/sk-teach-pl-post-linnaean/paper.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; by Shriram Krishnamurthi where he explains the need for books like &lt;a href=&#34;http://www.plai.org/&#34; target=&#34;_blank&#34;&gt;PLAI&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lack of paradigms in new languages, and its separation (or lack of)&lt;/li&gt;
&lt;li&gt;design of languages cheaper and cheaper these days&lt;/li&gt;
&lt;li&gt;rigor level in publications&lt;/li&gt;
&lt;li&gt;inductive and deductive learning
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;post-Linnaean&lt;/code&gt; refers to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Carl_Linnaeus&#34; target=&#34;_blank&#34;&gt;Carl Linnaeus&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;He is known as the father of modern taxonomy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: inductive-learning, deductive-learning, dsl, domain-specific-language, type-soundness, continuation-style, garbage-collection, reactive-programming, scheme, plai, teaching, programming-language, shriram-krishnamurthi&lt;/p&gt;

&lt;h2 id=&#34;lazy-ruby&#34;&gt;Lazy Ruby&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://sonnym.github.io/2014/04/05/lazy-ruby/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by sonnym about using ruby&amp;rsquo;s lazy (non-strict) features, detailing an example with Fibonacci&amp;rsquo;s sequence.&lt;/p&gt;

&lt;p&gt;Tags: laziness, strictness, non-strictness, ruby, fibonacci, comparison&lt;/p&gt;

&lt;h2 id=&#34;jessica-livingston&#34;&gt;Jessica Livingston&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://paulgraham.com/jessica.html&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Paul Graham about his co-founder at the Y-combinator: Jessica Livingston. She was considered the Social Radar at YC&lt;/p&gt;

&lt;p&gt;The essay also talks about the non-existent separation between working hours and not and about her implication and personality.&lt;/p&gt;

&lt;p&gt;Tags: jessica-livingston, paul-graham, y-combinator, feminism, yc, essay&lt;/p&gt;

&lt;h2 id=&#34;four-laws-of-software-economics-part-1&#34;&gt;Four Laws Of Software Economics (Part 1)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@RichMironov/four-laws-of-software-economics-part-1-e162aa0ea9e5&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Rich Mironov on why the development team will never be big enough (because of economics, because there are more things to be done than time to do them, so we have to prioritize them) and about the communication problems between the dev team and the client(s).&lt;/p&gt;

&lt;p&gt;Also talks about the general personality of clients and devs and task prioritization&lt;/p&gt;

&lt;p&gt;Tags: exclusive-or, magical-thinking, tnstaafl, management, agile, team, capacity, death-march, estj, intp, software-economics, product-strategy, law-of-ruthless-prioritization, law, rich-mironov, slack, myers-briggs-type&lt;/p&gt;

&lt;h2 id=&#34;you-should-take-a-codecation&#34;&gt;You Should Take A Codecation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://robots.thoughtbot.com/you-should-take-a-codecation&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ben Orenstein explaining what is a codecation and what he&amp;rsquo;s done in the two codecations he&amp;rsquo;s taken.&lt;/p&gt;

&lt;p&gt;Tags: codecation, ben-orenstein, vacation, holiday, coding, shipping, in-company&lt;/p&gt;

&lt;h2 id=&#34;giving-up-on-tdd&#34;&gt;Giving Up on TDD&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://iansommerville.com/systems-software-and-technology/giving-up-on-test-first-development/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ian Sommerville about the problems he&amp;rsquo;s found while doing TDD, mainly about design, but also about being conservative in the amount of tests you allow yourself to break while refactoring.&lt;/p&gt;

&lt;p&gt;Tags: tdd, ian-sommerville, refactoring, problem, design-problem, design, giving-up-tdd&lt;/p&gt;

&lt;h2 id=&#34;giving-up-on-tdd-answer&#34;&gt;Giving Up on TDD - answer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.cleancoder.com/uncle-bob/2016/03/19/GivingUpOnTDD.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Robert C. Martin on the common issues for people adopting TDD:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Fragile Test Problem&lt;/li&gt;
&lt;li&gt;The Design Problem&lt;/li&gt;
&lt;li&gt;The Testable Design Problem&lt;/li&gt;
&lt;li&gt;The Magic Bullet Problem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article is an answer to another by Ian Sommerville.&lt;/p&gt;

&lt;p&gt;Tags: tdd, uncle-bob, robert-martin, adoption, ian-sommerville, fragile-test-problem, giving-up-tdd, design-problem, testable-design-problem, magic-bullet-problem&lt;/p&gt;

&lt;h2 id=&#34;seek-out-jobs-with-fast-learning-cycles&#34;&gt;Seek out jobs with fast learning cycles&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@sarahtavel/seek-out-jobs-with-fast-learning-cycles-f923c8d8a4be#.7bxx65a4x&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sarah Tavel on learning on the job and how fast these learning cycles can happen at companies at different stages of maturity.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So if you’re thinking of changing jobs, or taking your first, my advice: find a place with a fast learning cycle, and a steep learning curve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: learning, job, hypothesis, sarah-tavel, learning-cycle, maturity-level, learning-process, product-management&lt;/p&gt;

&lt;h2 id=&#34;clean-code-vs-implementation-patterns&#34;&gt;Clean Code Vs. Implementation Patterns&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.xebia.com/clean-code-vs-implementation-patterns/&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; of Clean Code vs Implementation Pattern books, by Vincent Partington.&lt;/p&gt;

&lt;p&gt;In it, the author explains the differences in style in both books, and how they compare to others.&lt;/p&gt;

&lt;p&gt;Tags: clean-code, implementation-patterns, comparison, book-review, book-comparison, vincent-partington&lt;/p&gt;

&lt;h2 id=&#34;stuck-in-traffic-vlog-103-new-spammer-techniques&#34;&gt;Stuck in Traffic vlog #103 - New Spammer Techniques&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.peerlyst.com/posts/stuck-in-traffic-vlog-103-new-spammer-techniques-j-wolfgang-goerlich&#34; target=&#34;_blank&#34;&gt;this vlog entry&lt;/a&gt; on machines fighting machines (exemplified with the spam producing and filtering) and how some spammers are trying more direct techniques focusing on higher-value targets, sometimes even handcrafting messages and modifying them every few units.&lt;/p&gt;

&lt;p&gt;Tags: wolfgang-goerlich, spam, vlog, spammer, machine-learning&lt;/p&gt;

&lt;h2 id=&#34;becoming-a-finisher&#34;&gt;Becoming A Finisher&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://christopherdbui.com/becoming-a-finisher/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Christopher Bui where he explains that projects that are too ambitious stall your productivity and make you lose your focus.&lt;/p&gt;

&lt;p&gt;Tags: christopher-bui, pomodoro, time-management, productivity, motivation, ambition, paul-graham, quote&lt;/p&gt;

&lt;h2 id=&#34;hanging-around-with-red-black-tree-implementations-the-beginnings&#34;&gt;Hanging around with red-black tree implementations: the beginnings&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.fraixed.es/post/hanging-around-red-black-trees-implementations/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ivan Fraixedes where he details the progress of implementing a red-black tree, and also his motivation for doing it.&lt;/p&gt;

&lt;p&gt;Tags: ivan-fraixedes, red-black-tree, abstract-data-structure, adt, deliberate-practice, pet-project&lt;/p&gt;

&lt;h2 id=&#34;some-tools-for-faster-blogging-in-octopress&#34;&gt;Some Tools for Faster Blogging in Octopress&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://dgmstuart.github.io/blog/2015/03/27/some-tools-for-faster-blogging-in-octopress/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; for tips and tricks on how to blog faster with octopress. Written by Duncan Stuart.&lt;/p&gt;

&lt;p&gt;Tags: duncan-stuart, blog, improvement, meta, octopress, tip-and-trick&lt;/p&gt;

&lt;h2 id=&#34;the-veil-of-ignorance&#34;&gt;The veil of ignorance&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mrmrs.io/writing/2016/03/23/the-veil-of-ignorance/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Adam Morse on how not being on the top of the skills performance can affect your design and your user experience. Also, references the concept of &amp;ldquo;The Veil of Ignorance&amp;rdquo;, a concept by John Rawls.&lt;/p&gt;

&lt;p&gt;Tags: john-rawls, veil-of-ignorance, user-experience, design&lt;/p&gt;

&lt;h2 id=&#34;to-smile-again-recovering-from-the-paralysis-of-burnout&#34;&gt;To Smile Again &amp;ndash; Recovering from the paralysis of burnout&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://m.signalvnoise.com/to-smile-again-ae0ba9f2198c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jamis Buck on his story of burnout, what symptoms had on him and how he got out of it.&lt;/p&gt;

&lt;p&gt;Tags: burnout, jamis-buck, psychology, productivity, personal, story, analogy&lt;/p&gt;

&lt;h2 id=&#34;beyond-email-could-startup-slack-change-the-way-you-work&#34;&gt;Beyond email: could startup Slack change the way you work?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.theguardian.com/technology/2016/mar/25/slack-butterfield-emoji-chat-nasa-harvard-silicon-valley&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on Slack&amp;rsquo;s office culture, with their diversity, policies and values after a high people growth in a short period of time. By Jemima Kiss&lt;/p&gt;

&lt;p&gt;Tags: culture, office-culture, slack, jemima-kiss&lt;/p&gt;

&lt;h2 id=&#34;slack-work-this-way&#34;&gt;Slack: Work This Way&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@iaintait/slack-work-this-way-9221284472dd&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, a response to my above read, about the office culture at Slack.&lt;/p&gt;

&lt;p&gt;Tags: iain-tait, response, slack, office-culture&lt;/p&gt;

&lt;h2 id=&#34;bem-101&#34;&gt;BEM 101&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://css-tricks.com/bem-101/&#34; target=&#34;_blank&#34;&gt;this introduction&lt;/a&gt; to a CSS style called Block, Element, Modifier methodology (BEM).&lt;/p&gt;

&lt;p&gt;In it,&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;a block is a top-level abstraction of a new component&lt;/li&gt;
&lt;li&gt;Child items, or elements, can be placed inside and these are denoted by two underscores following the name of the block [&amp;hellip;].
modifiers can manipulate the block so that we can theme or style that particular component without inflicting changes on a completely unrelated module. This is done by appending two hyphens to the name of the block [&amp;hellip;].&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;By Joe Richardson, Robin Rendle et al.&lt;/p&gt;

&lt;p&gt;Tags: joe-richardson, robin-rendle, bem, css, css-methodology, introduction, css-architecture, sass&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Structured Design: Fundamentals of a Discipline of Computer Program and Systems Design by Yourdon and Constantine.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>