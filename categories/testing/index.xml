<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/testing/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/testing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in March 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/03/01/self-study-march-2019/</link>
      <pubDate>Fri, 01 Mar 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/03/01/self-study-march-2019/</guid>
      <description>

&lt;h2 id=&#34;nodejs-logging-made-right-https-itnext-io-nodejs-logging-made-right-117a19e8b4ce&#34;&gt;&lt;a href=&#34;https://itnext.io/nodejs-logging-made-right-117a19e8b4ce&#34; target=&#34;_blank&#34;&gt;NodeJS logging made right&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Explains logging and tracing in nodejs.&lt;/p&gt;

&lt;p&gt;Usage of thread-local storage, trace id, continuation local storage.&lt;/p&gt;

&lt;p&gt;Tags: nodejs, logging, tracing, thread-local, thread-local-storage, trace-id, continuation-local-storage, cls, tls, proxy, hook&lt;/p&gt;

&lt;p&gt;Id: 5bed4596-3f5b-11e9-83e1-0242ac110005
Read: Tue, 05 Mar 2019 15:28:42 +0000&lt;/p&gt;

&lt;h2 id=&#34;web-design-3-0-when-your-web-design-really-matters-https-nicepage-com-doc-article-20348-web-design-3-0-when-your-web-design-really-matters&#34;&gt;&lt;a href=&#34;https://nicepage.com/doc/article/20348/web-design-3-0-when-your-web-design-really-matters&#34; target=&#34;_blank&#34;&gt;Web Design 3.0: When Your Web Design Really Matters&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In Chapter 1, we will find out how Web Design is changing. Also, you will learn about the birth of the new generation of web designers, who are designing web pages in Web Design 3.0.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Chapter 2, we will talk about website builders that are lagging behind the trends and slowing down the Web Design evolution.&lt;/p&gt;

&lt;p&gt;In Chapter 3, you will learn how to create modern web designs quickly and easily in a new way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Has walk through the different design phases, techniques; both in press (printed) design as in web design.&lt;/p&gt;

&lt;p&gt;Explains some web builders.&lt;/p&gt;

&lt;p&gt;Explains the concept of the web 3.0:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Free positioning.&lt;/li&gt;
&lt;li&gt;Element overlapping.&lt;/li&gt;
&lt;li&gt;Breaking the limitations of Bootstrap-like Grids.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;States the different needs for webmasters and designers:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Web Designers need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free positioning&lt;/li&gt;
&lt;li&gt;Removing table constraints&lt;/li&gt;
&lt;li&gt;Layers&lt;/li&gt;
&lt;li&gt;Property Panel for elements&lt;/li&gt;
&lt;li&gt;Support for Windows and Mac OS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Webmasters need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clean HTML and CSS&lt;/li&gt;
&lt;li&gt;Mobile device support&lt;/li&gt;
&lt;li&gt;WordPress and Joomla support&lt;/li&gt;
&lt;li&gt;Building websites online&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Summary&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Website builders are lagging behind the rapidly changing Web Design world.&lt;/p&gt;

&lt;p&gt;The history of web design tools has involved several transitions. However, progress has stopped. There are numerous signs that the new transition must happen.&lt;/p&gt;

&lt;p&gt;There are separate markets for web designers and webmasters. Popular website builders do not support the main features of Web Design 3.0: free positioning, modern grids, and layers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: comparison, web-design, print-design, web-builder, creativity, metaphor, grid-layout, bootstrap, flexibility, design, web-3.0, web-design-3.0, web-2.0, progression&lt;/p&gt;

&lt;p&gt;Id: 5101ce2e-3f5e-11e9-83d9-0242ac110005
Read: Tue, 05 Mar 2019 15:49:52 +0000&lt;/p&gt;

&lt;h2 id=&#34;gotify-a-self-hosted-push-notifications-service-https-news-ycombinator-com-item-id-19347848&#34;&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=19347848&#34; target=&#34;_blank&#34;&gt;Gotify – a self-hosted push-notifications service&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Tags: gotify, self-hosted, notification, notification-service, android, open-source&lt;/p&gt;

&lt;p&gt;Id: e839c82a-4367-11e9-b34d-0242ac110007
Read: Sun, 10 Mar 2019 19:08:36 +0000&lt;/p&gt;

&lt;h2 id=&#34;ask-hn-how-to-speak-like-a-leader-not-like-an-engineer-https-news-ycombinator-com-item-id-19349676&#34;&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=19349676&#34; target=&#34;_blank&#34;&gt;Ask HN: How to speak like a leader, not like an engineer?&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Links and resources for speaking like a leader&lt;/p&gt;

&lt;p&gt;Tags: leader, engineer, comparison, change, public-speaking, speak, speaking, career-management, career-change, professional-growth, resource:&lt;/p&gt;

&lt;p&gt;Id: 1a478fc8-4368-11e9-b657-0242ac110007
Read: Sun, 10 Mar 2019 19:10:00 +0000&lt;/p&gt;

&lt;h2 id=&#34;archivebox-open-source-self-hosted-web-archive-https-news-ycombinator-com-item-id-19346985&#34;&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=19346985&#34; target=&#34;_blank&#34;&gt;ArchiveBox: Open-source self-hosted web archive&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Tools for archiving purposes. Has links to other sites:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/machawk1/warcreate&#34; target=&#34;_blank&#34;&gt;https://github.com/machawk1/warcreate&lt;/a&gt;
&lt;a href=&#34;https://getpolarized.io/&#34; target=&#34;_blank&#34;&gt;https://getpolarized.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: burtonator, web-archive, polarized, warch, warc, personal-knowledge-base&lt;/p&gt;

&lt;p&gt;Id: 4168161c-436e-11e9-aa0d-0242ac110007
Read: Sun, 10 Mar 2019 19:54:03 +0000&lt;/p&gt;

&lt;h2 id=&#34;ask-hn-as-a-freelancer-what-s-the-best-app-to-track-finances-https-news-ycombinator-com-item-id-19450331&#34;&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=19450331&#34; target=&#34;_blank&#34;&gt;Ask HN: As a freelancer, what&amp;rsquo;s the best app to track finances?&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Describes tools for finance for freelancers. Stresses the importance of time wealth&lt;/p&gt;

&lt;p&gt;Tags: time-management, money-management, freelance, tool, ask-hn, hackernews, finance, time-wealth, money-wealth&lt;/p&gt;

&lt;p&gt;Id: b74a6696-4c83-11e9-99bd-0242ac110005
Read: Fri, 22 Mar 2019 09:20:21 +0000&lt;/p&gt;

&lt;h2 id=&#34;what-i-learned-in-my-first-year-as-a-solo-founder-https-tik-dev-lessons-learned&#34;&gt;&lt;a href=&#34;https://tik.dev/lessons-learned&#34; target=&#34;_blank&#34;&gt;What I Learned in My First Year as a Solo Founder&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Learnings by a solo founder.&lt;/p&gt;

&lt;p&gt;Benefits of having a side project or side hustle&lt;/p&gt;

&lt;p&gt;Tags: side-hustle, side-business, learning, reflection, solo-founder, founder, revenue&lt;/p&gt;

&lt;p&gt;Id: f0dee42c-5142-11e9-9444-0242ac110006
Read: Thu, 28 Mar 2019 10:19:16 +0000&lt;/p&gt;

&lt;h2 id=&#34;write-tests-not-too-many-mostly-integration-https-kentcdodds-com-blog-write-tests&#34;&gt;&lt;a href=&#34;https://kentcdodds.com/blog/write-tests&#34; target=&#34;_blank&#34;&gt;Write tests. Not too many. Mostly integration.&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This is a paraphrasing of some advice for healthy eating: &amp;lsquo;Eat food, not too much, mostly plants.&amp;rsquo; (Pollan)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write tests.&lt;/p&gt;

&lt;p&gt;Often I find myself saving time when I put time in to write tests&lt;/p&gt;

&lt;p&gt;Not too many: you get diminishing returns on your tests as the coverage increases [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;Mostly integration: as you move up the pyramid, the confidence quotient of each form of testing increases&lt;/p&gt;

&lt;p&gt;Integration tests strike a great balance on the trade-offs between confidence and speed/expense&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: unit-test, testing, test-pyramid, healthy-testing, advice, integration-test, quote, kent-c-dodds, analogy&lt;/p&gt;

&lt;p&gt;Id: d148d774-5144-11e9-94d8-0242ac110006
Read: Thu, 28 Mar 2019 10:32:42 +0000&lt;/p&gt;

&lt;h2 id=&#34;7-rules-for-eating-https-www-webmd-com-food-recipes-news-20090323-7-rules-for-eating&#34;&gt;&lt;a href=&#34;https://www.webmd.com/food-recipes/news/20090323/7-rules-for-eating&#34; target=&#34;_blank&#34;&gt;7 Rules for Eating&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In this reference article, Michael Pollan explains his seven rules for eating:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don&amp;rsquo;t eat anything your great grandmother wouldn&amp;rsquo;t recognize as food. &amp;ldquo;When you pick up that box of portable yogurt tubes, or eat something with 15 ingredients you can&amp;rsquo;t pronounce, ask yourself, &amp;ldquo;What are those things doing there?&amp;rdquo; Pollan says.&lt;/li&gt;
&lt;li&gt;Don’t eat anything with more than five ingredients, or ingredients you can&amp;rsquo;t pronounce.&lt;/li&gt;
&lt;li&gt;Stay out of the middle of the supermarket; shop on the perimeter of the store. Real food tends to be on the outer edge of the store near the loading docks, where it can be replaced with fresh foods when it goes bad.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t eat anything that won&amp;rsquo;t eventually rot. &amp;ldquo;There are exceptions &amp;ndash; honey &amp;ndash; but as a rule, things like Twinkies that never go bad aren&amp;rsquo;t food,&amp;rdquo; Pollan says.&lt;/li&gt;
&lt;li&gt;It is not just what you eat but how you eat. &amp;ldquo;Always leave the table a little hungry,&amp;rdquo; Pollan says. &amp;ldquo;Many cultures have rules that you stop eating before you are full. In Japan, they say eat until you are four-fifths full. Islamic culture has a similar rule, and in German culture they say, &amp;lsquo;Tie off the sack before it&amp;rsquo;s full.&amp;rsquo;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Families traditionally ate together, around a table and not a TV, at regular meal times. It&amp;rsquo;s a good tradition. Enjoy meals with the people you love. &amp;ldquo;Remember when eating between meals felt wrong?&amp;rdquo; Pollan asks.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t buy food where you buy your gasoline. In the U.S., 20% of food is eaten in the car.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also, four myths:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Food is a delivery vehicle for nutrients. What really matters isn&amp;rsquo;t broccoli but its fiber and antioxidants. If we get that right, we get our diet right. Foods kind of get in the way.&lt;/li&gt;
&lt;li&gt;We need experts to tell us how to eat. Nutrients are invisible and mysterious. &amp;ldquo;It is a little like religion,&amp;rdquo; Pollan said. &amp;ldquo;If a powerful entity is invisible, you need a priesthood to mediate your relation with food.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;The whole point of eating is to maintain and promote bodily health. &amp;ldquo;You are either improving or ruining your health when you eat &amp;ndash; that is a very American idea,&amp;rdquo; Pollan says. &amp;ldquo;But there are many other reasons to eat food: pleasure, social community, identity, and ritual. Health is not the only thing going on on our plates.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;There are evil foods and good foods. &amp;ldquo;At any given time there is an evil nutrient we try to drive like Satan from the food supply &amp;ndash; first it was saturated fats, then it was trans fat,&amp;rdquo; Pollan says. &amp;ldquo;Then there is the evil nutrient&amp;rsquo;s doppelganger, the blessed nutrient. If we get enough of that we, will be healthy and maybe live forever. It&amp;rsquo;s funny through history how the good and bad guys keep changing.&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This can all be summarized as &amp;ldquo;Eat food, not too much, mostly plants.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: healthy-eating, michael-pollan, rule, advice, myth, analogy&lt;/p&gt;

&lt;p&gt;Id: 30ece1fc-5145-11e9-87de-0242ac110006
Read: Thu, 28 Mar 2019 10:35:22 +0000&lt;/p&gt;

&lt;h2 id=&#34;lean-testing-or-why-unit-tests-are-worse-than-you-think-https-blog-usejournal-com-lean-testing-or-why-unit-tests-are-worse-than-you-think-b6500139a009&#34;&gt;&lt;a href=&#34;https://blog.usejournal.com/lean-testing-or-why-unit-tests-are-worse-than-you-think-b6500139a009&#34; target=&#34;_blank&#34;&gt;Lean Testing or Why Unit Tests are Worse than You Think&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This article puts testing in an economic perspective. Calls it lean testing&lt;/p&gt;

&lt;p&gt;Also references/paraphrases Michael Pollan&amp;rsquo;s Rules for eating ().&lt;/p&gt;

&lt;p&gt;Creates a testing trophy, a figure to explain the best testing pattern, replacing the testing pyramid&lt;/p&gt;

&lt;p&gt;Explains return on investment (ROI) on tests&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;integration tests provide the best balance of cost, speed and confidence&lt;/p&gt;

&lt;p&gt;Integration tests lie somewhere between unit tests and end-to-end tests so they provide the best balance. Therefore, they have the highest ROI.&lt;/p&gt;

&lt;p&gt;The main idea is to just not mock so much&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: economic-perspective, lean-testing, testing-trophy, testing-pyramid, return-on-investment, roi, critical-path, testing, unit-test, anti-architecture, architecture, maintenance&lt;/p&gt;

&lt;p&gt;Id: efe85d00-5147-11e9-87ce-0242ac110006
Read: Thu, 28 Mar 2019 10:55:02 +0000&lt;/p&gt;

&lt;h2 id=&#34;end-user-programming-https-www-inkandswitch-com-end-user-programming-html&#34;&gt;&lt;a href=&#34;https://www.inkandswitch.com/end-user-programming.html&#34; target=&#34;_blank&#34;&gt;End-user programming&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In this article, the writer explains some of the end-user modifications to programs. Examples include: adding download capabilities to instagram, generating backups for files.&lt;/p&gt;

&lt;p&gt;On the other hand, applications (especially mobile) are tightly sealed, not allowing modification or extension. Even FOSS (free, open source software), modification implies the learning curve / entry barrier of having to setup, compile, debug the original program and modifications.&lt;/p&gt;

&lt;p&gt;Gives the example of the UNIX command line, as a programming environment. One that provides (one of) the best REPL examples.&lt;/p&gt;

&lt;p&gt;Characterizes spreadsheets as ad-hoc databases, programs; mostly created by domain experts (aka subject matter experts), than professional software engineers. Take into account that these hats are non-exclusive: a domain expert can also be a professional software engineer.&lt;/p&gt;

&lt;p&gt;The author tries to coin the term &amp;ldquo;end-user programming&amp;rdquo; to differentiate it from programming by professional software developers, who try to build general-purpose apps, to be used by thousands of people.&lt;/p&gt;

&lt;p&gt;This also means, that a professional software developer can be an &amp;ldquo;end-user programmer&amp;rdquo;, when creating solutions for themselves (limited user group), rather than for the general public. Maybe those one-off scripts that we create, are some kind of end-user programs. This is described in the article as well.&lt;/p&gt;

&lt;p&gt;Talks of the chasm the user has to cross in order to customize the behaviour of their software. This is related to working in a framework or a library, in the sense of &amp;lsquo;who keeps the control&amp;rsquo;. In an UNIX, filesystem environment, you keep the control.&lt;/p&gt;

&lt;p&gt;References &amp;ldquo;citizen developers&amp;rdquo; (&lt;a href=&#34;https://www.gartner.com/it-glossary/citizen-developer/&#34; target=&#34;_blank&#34;&gt;https://www.gartner.com/it-glossary/citizen-developer/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Three qualities for end-user programming: embodiment, living systems, and in-place toolchains&lt;/p&gt;

&lt;p&gt;Embodiment: it requires the programmer hold many abstractions in their mind. Related to abstract reasoning. Mentions that many end-users don&amp;rsquo;t have these abstractions in their mind, but are capable of abstract reasoning in their own domains of expertise. Mentions that via visual representations onscreen, we can help the end-user. An example: preview formula results in a spreadsheet; highlight the cells in a spreadsheet.&lt;/p&gt;

&lt;p&gt;Embodiment means, broadly, making elements of the programming experience more concrete and visual&lt;/p&gt;

&lt;p&gt;Living systems: interaction with them. Refers to shortening the feedback cycle&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Live programming gives the programmer immediate feedback on the behavior of a program as it is edited, replacing the edit compile-debug cycle with a fluid programming experience.“&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But only short feedback loops, but also to change the system behaviour from within, such as the LISP compiler reading and compiling the source code from inside a program.&lt;/p&gt;

&lt;p&gt;In-place tool chains&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The user should be able to edit their programs without installing additional tools or programs&lt;/p&gt;

&lt;p&gt;a Unix shell script is just a series of commands saved into a text file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Meaning that the user is already accustomed to issuing those commands. A script is just grouping those commands.&lt;/p&gt;

&lt;p&gt;Gives examples of end-user programming success stories: spreadsheets, SQL, browser dev tools,&lt;/p&gt;

&lt;p&gt;Tags: end-user-programming, programming, extensibility, open-closed-principle, ocp, mofication, user, extension, unix, repl, spreadsheet, reflection, theory, history, review, sql, dev-tools, chasm, abstraction&lt;/p&gt;

&lt;p&gt;Id: 4490792a-514b-11e9-9861-0242ac110006
Read: Thu, 28 Mar 2019 11:18:52 +0000&lt;/p&gt;

&lt;h2 id=&#34;why-developers-consider-agile-development-to-be-nonsense-https-medium-com-web-development-why-developers-consider-agile-development-to-be-nonsense-1eaf28715e66&#34;&gt;&lt;a href=&#34;https://medium.com/@web.development/why-developers-consider-agile-development-to-be-nonsense-1eaf28715e66&#34; target=&#34;_blank&#34;&gt;Why developers consider Agile development to be nonsense&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This article explains how Agile development is apt and indicated for short-term software development, especially for contracting or consulting companies, where the client is external to the team.&lt;/p&gt;

&lt;p&gt;Why it does not make as much sense in products/services where there is a leapfrog solution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don’t give the customer what they ask for; understand them, and revolutionize their world.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: leapfrog-solution, google, agile, agile-development, comparison, project-management, client, consulting, management&lt;/p&gt;

&lt;p&gt;Id: 9035ea3c-514f-11e9-9676-0242ac110006
Read: Thu, 28 Mar 2019 11:49:37 +0000&lt;/p&gt;

&lt;h2 id=&#34;why-bother-with-what-three-words-https-shkspr-mobi-blog-2019-03-why-bother-with-what-three-words&#34;&gt;&lt;a href=&#34;https://shkspr.mobi/blog/2019/03/why-bother-with-what-three-words/&#34; target=&#34;_blank&#34;&gt;Why bother with What Three Words?&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In this article, the author questions why using a closed protocol for translating geo-coordinates to words.&lt;/p&gt;

&lt;p&gt;The author complains that it is masquerading a for-profit, closed algorithm as an open standard.&lt;/p&gt;

&lt;p&gt;Also, that the GPS locations are drifting very quickly in some places, therefore the translated address changes, but the local address (e.g., 1 Wall Street), does not.&lt;/p&gt;

&lt;p&gt;Tags: gps-drift, australia, open-standard, closed-standard, for-profit, protocol, open, closed, what-three-words, w3w, i18n, startup&lt;/p&gt;

&lt;p&gt;Id: 960e6750-5202-11e9-bb40-0242ac110008
Read: Fri, 29 Mar 2019 09:11:07 +0000&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing a component that includes randomness</title>
      <link>https://alvarogarcia7.github.io/blog/2018/06/15/testing-component-randomness/</link>
      <pubDate>Fri, 15 Jun 2018 09:03:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/06/15/testing-component-randomness/</guid>
      <description>

&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;

&lt;p&gt;We have been tasked with designing a component to generate secrets for two-factor authentication (2FA), to ensure that the you also own that other &amp;lsquo;channel&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;It has to be secure enough to pass to verify a user, meaning no other user should be able to impersonating another one by guessing the secret.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;A first solution that he have implemented is to provide a 6-digit pin code.&lt;/p&gt;

&lt;p&gt;The solution (in java) is straightforward: get a &lt;code&gt;Random&lt;/code&gt; to generate &lt;code&gt;int&lt;/code&gt;s for you.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PinCodeFactory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secureRandom&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aNewPinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;secureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1_000_000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: this is not the final solution; it does not include package, imports; might not even compile. Take it as pseudo-code.&lt;/p&gt;

&lt;p&gt;Now that we this &amp;ldquo;&lt;a href=&#34;https://rubyplus.com/articles/521-TDD-Basics-Obvious-Implementation&#34; target=&#34;_blank&#34;&gt;obvious implementation&lt;/a&gt;&amp;rdquo; in mind, how can we test drive it?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with the requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the numbers are always six digits&lt;/li&gt;
&lt;li&gt;they should be pseudo-random&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can test the first by taking one of them and verifying that it has six digits.&lt;/p&gt;

&lt;h3 id=&#34;first-requirement-type-of-pin-code&#34;&gt;First requirement: type of pin code&lt;/h3&gt;

&lt;p&gt;The problem with that is that the SecureRandom gives random data. Now, the test will be passing, but later in the future, the build will break as this implementation has (some) defects. If you keep generating pin codes, you will get one as &amp;ldquo;123&amp;rdquo;, as per the definition of the &lt;code&gt;nextInt&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Easy. You add a base amount to always make it in the six digits. But, are you affecting the distribution of the pseudo-random generator? At this time, I&amp;rsquo;m not even sure. &lt;a href=&#34;https://www.amazon.com/Dont-Make-Think-Revisited-Usability/dp/0321965515&#34; target=&#34;_blank&#34;&gt;Don&amp;rsquo;t make me think&lt;/a&gt; too much. To make it easier, let&amp;rsquo;s pad the numbers with zeros on the left:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;the_numbers_are_left_padded_with_zeros&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;verifyEachOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;the_numbers_do_not_contain_spaces&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;verifyEachOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that these tests are failing, I can focus on finding a simple implementation that satisfies them.&lt;/p&gt;

&lt;p&gt;A passing solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example.Pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.net.URI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.security.SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PinCodeFactory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secureRandom&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aNewPinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;%06d&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1_000_000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But, if you execute these tests long enough, they will fail. Because of the underlaying randomness of the code. We don&amp;rsquo;t want to modify the design of this class, as we started with &amp;ldquo;wishful programming&amp;rdquo; (&lt;a href=&#34;http://blog.adrianbolboaca.ro/2016/04/programming-by-wishful-thinking/&#34; target=&#34;_blank&#34;&gt;reference&lt;/a&gt;, &lt;a href=&#34;https://dsoguy.blogspot.com/2007/01/programming-by-wishful-thinking.html&#34; target=&#34;_blank&#34;&gt;reference&lt;/a&gt;), specifying the desired public API, to later fill the implementation details.&lt;/p&gt;

&lt;p&gt;A possible solution to this randomness is to consider the random a &amp;lsquo;setting&amp;rsquo; &lt;a href=&#34;http://www.mockobjects.com/2006/10/different-kinds-of-collaborators.html&#34; target=&#34;_blank&#34;&gt;aka policy&lt;/a&gt; that I can later override. But only for the test. We don&amp;rsquo;t want to make the API more complicated, so we will offer a &lt;code&gt;protected&lt;/code&gt; method for &amp;lsquo;friends&amp;rsquo; to use, but not for everyone:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example.Pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.net.URI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.security.SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PinCodeFactory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PinCodeFactory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aNewPinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;%06d&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1_000_000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setGenerator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;generator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;generator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Note: this is the final version)&lt;/p&gt;

&lt;p&gt;(Note: in java, the &lt;code&gt;SecureRandom&lt;/code&gt; implements the same API as &lt;code&gt;Random&lt;/code&gt; &amp;ndash;in fact it is a child class&amp;ndash; so we prefer accepting the parent class.)&lt;/p&gt;

&lt;p&gt;In this way, the test can always set the random seed to a fixed value. Therefore, the numbers will be stable and the behavior is no longer random, but controlled.&lt;/p&gt;

&lt;p&gt;This is just one way how you can test components that have randomness: eliminating it without affecting the public API.&lt;/p&gt;

&lt;h3 id=&#34;second-requirement-the-pin-codes-don-t-repeat&#34;&gt;Second requirement: the pin codes don&amp;rsquo;t repeat&lt;/h3&gt;

&lt;p&gt;Even if this requirement cannot be met with enough requests (because with enough requests, you will repeat a six-digit code), finding no repeated codes in 100 consecutive pin codes is enough. The user has to input the exact code they received, so the chance of repetition is quite low.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;there_are_no_repeated_with_the_given_seed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;verifyAll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This test is passing from the beginning with the fixed seed &lt;code&gt;1L&lt;/code&gt;. But, if you enlarge the &lt;code&gt;desiredProofSize&lt;/code&gt; to 1000, it does not pass anymore.&lt;/p&gt;

&lt;h3 id=&#34;a-note-about-process&#34;&gt;A note about process&lt;/h3&gt;

&lt;p&gt;We did not get much value of test-driving (TDD) this code, as the knew the desired API from the beginning, we had a clear implementation in mind and only a few cases left to iron out. Just test-first was enough in this case.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;One way how you can test components that have randomness: eliminating it.&lt;/p&gt;

&lt;p&gt;Do not use TDD (or any other tool) as an end in itself. Use it as a tool.&lt;/p&gt;

&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;

&lt;p&gt;All code can be found &lt;a href=&#34;https://gist.github.com/alvarogarcia7/46917d8d160d46b145de8262e3965670&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a local copy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//File PinCode.java&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;equals&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hashCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;toString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StringBuffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StringBuffer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;PinCode{&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;value=&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;sb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//File PinCodeFactory.java&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example.Pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.net.URI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.security.SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PinCodeFactory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PinCodeFactory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecureRandom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aNewPinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;%06d&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nextInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1_000_000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setGenerator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;generator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;generator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//File PinCodeFactoryTest.java&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.Before&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Collection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.HashSet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.function.Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import static&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.hamcrest.core.Is.is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import static&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.junit.Assert.assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PinCodeFactoryTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCodeFactory&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCodeFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Before&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setUp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pinCodeFactory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PinCodeFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pinCodeFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setGenerator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1L&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;there_are_no_repeated_with_the_given_seed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;verifyAll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;the_numbers_are_left_padded_with_zeros&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;verifyEachOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;the_numbers_do_not_contain_spaces&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;verifyEachOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pinCodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;verifyEachOf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Collection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;assertion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pincode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;verifyAll&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Collection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pincodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;assertion&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pincodes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;


    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pinCodes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pinCodeFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;aNewPinCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;desiredProofSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toSet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in June 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/06/01/self-study-june-2018/</link>
      <pubDate>Fri, 01 Jun 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/06/01/self-study-june-2018/</guid>
      <description>

&lt;h2 id=&#34;don-t-look-don-t-tell&#34;&gt;[Don&amp;rsquo;t look, don&amp;rsquo;t tell]()&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this bonilista by David Bonilla on what strategies companies use to deal with security and defects.&lt;/p&gt;

&lt;p&gt;Explains full disclosure, responsible disclosure and bug bounties.&lt;/p&gt;

&lt;p&gt;Tags: david-bonilla, bonilista, security, full-disclosure, responsible-disclosure, bug-bounty, reporting, hacker, cracker&lt;/p&gt;

&lt;p&gt;Id: a1a6925a-7958-11e8-a87f-0242ac110002
Read: Tue, 26 Jun 2018 15:50:21 +0000&lt;/p&gt;

&lt;h2 id=&#34;la-vida-de-las-ideas&#34;&gt;[La vida de las ideas]()&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this bonilista by David Bonilla about the value of the ideas and what differentiates a good idea from a good execution from a good outcome&lt;/p&gt;

&lt;p&gt;Tags: david-bonilla, idea, startup, execution, value&lt;/p&gt;

&lt;p&gt;Id: c72f3522-7958-11e8-935c-0242ac110002
Read: Tue, 26 Jun 2018 15:51:24 +0000&lt;/p&gt;

&lt;h2 id=&#34;why-re-frame-instead-of-om-next-http-t-dripemail2-com-c-eyjhy2nvdw50x2lkijoimzy1mtcxnyisimrlbgl2zxj5x2lkijoimte1ntgzote5mcisinvybci6imh0dhbzoi8vchvyzwx5znvuy3rpb25hbc50di9hcnrpy2xll3does1yzs1mcmftzs1pbnn0zwfklw9mlw9tlw5lehqvp19fcz1moxa2dmrwc2n0ymluagjxyne2eij9&#34;&gt;&lt;a href=&#34;http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMzY1MTcxNyIsImRlbGl2ZXJ5X2lkIjoiMTE1NTgzOTE5MCIsInVybCI6Imh0dHBzOi8vcHVyZWx5ZnVuY3Rpb25hbC50di9hcnRpY2xlL3doeS1yZS1mcmFtZS1pbnN0ZWFkLW9mLW9tLW5leHQvP19fcz1mOXA2dmRwc2N0YmluaGJxYnE2eiJ9&#34; target=&#34;_blank&#34;&gt;Why re-frame instead of om next&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Eric Normand on why he chose to write a course on clojure front-end framework&lt;/p&gt;

&lt;p&gt;Tags: eric-normand, clojure, david-nolen, frontend, framework, reframe, om-next, comparison, course, mooc&lt;/p&gt;

&lt;p&gt;Id: ea43a380-7959-11e8-bd3b-0242ac110002
Read: Tue, 26 Jun 2018 15:59:32 +0000&lt;/p&gt;

&lt;h2 id=&#34;lexnet-el-software-que-nunca-debió-existir&#34;&gt;[LexNET: el software que nunca debió existir]()&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this bonilista by David Bonilla on the software called LexNET and the scandal around it&lt;/p&gt;

&lt;p&gt;Tags: david-bonilla, lexnet, bonilista, software, scandal, spain&lt;/p&gt;

&lt;p&gt;Id: 1aa20256-795a-11e8-9b39-0242ac110002
Read: Tue, 26 Jun 2018 16:00:53 +0000&lt;/p&gt;

&lt;h2 id=&#34;40&#34;&gt;[40]()&lt;/h2&gt;

&lt;p&gt;I have read this bonilista by David Bonilla explaining some of the things he has learned from 40 years of experience in life. Explains some of his fears and how he has solved them.&lt;/p&gt;

&lt;p&gt;Tags: david-bonilla, bonilista, birthday, reflection, fear, money, money-management&lt;/p&gt;

&lt;p&gt;Id: 296a433e-795a-11e8-981e-0242ac110002
Read: Tue, 26 Jun 2018 16:01:18 +0000&lt;/p&gt;

&lt;h2 id=&#34;la-lucha-por-la-red&#34;&gt;[La lucha por la Red]()&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this bonilista by David Bonilla on the net neutrality in Spain and in the European union.&lt;/p&gt;

&lt;p&gt;Tags: david-bonilla, bonilista, net-neutrality, internet&lt;/p&gt;

&lt;p&gt;Id: 395a8984-795a-11e8-9102-0242ac110002
Read: Tue, 26 Jun 2018 16:01:45 +0000&lt;/p&gt;

&lt;h2 id=&#34;a-machine-has-figured-out-rubik-s-cube-all-by-itself-https-www-technologyreview-com-s-611281-a-machine-has-figured-out-rubiks-cube-all-by-itself&#34;&gt;&lt;a href=&#34;https://www.technologyreview.com/s/611281/a-machine-has-figured-out-rubiks-cube-all-by-itself/&#34; target=&#34;_blank&#34;&gt;A machine has figured out Rubik&amp;rsquo;s Cube all by itself&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article explaining how an AI has solved the rubik cube by itself. The team, including McAleer, has used a technique called &amp;ldquo;autodidactic iteration: a way for the machine to create its own system of rewards.&lt;/p&gt;

&lt;p&gt;Tags: rubik, rubik-cube, ai, autodidactic-iteration, autodidactic, reward, mcaleer, artificial-intelligence, deep-learning, monte-carlo, monte-carlo-tree-search&lt;/p&gt;

&lt;p&gt;Id: 0cb8305c-7a1d-11e8-9823-0242ac110002
Read: Wed, 27 Jun 2018 15:16:22 +0000&lt;/p&gt;

&lt;h2 id=&#34;la-tienda&#34;&gt;[La tienda]()&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this bonilista by David Bonilla on how more and more investors are deciding to do it only on profitable startups rather than a more global strategy&lt;/p&gt;

&lt;p&gt;Tags: david-bonilla, bonilista, investor, startup&lt;/p&gt;

&lt;p&gt;Id: 6735c620-7a1d-11e8-a2e9-0242ac110002
Read: Wed, 27 Jun 2018 15:18:53 +0000&lt;/p&gt;

&lt;h2 id=&#34;i-m-not-a-woman-in-tech-https-communequation-wordpress-com-2017-07-05-im-not-a-woman-in-tech&#34;&gt;&lt;a href=&#34;https://communequation.wordpress.com/2017/07/05/im-not-a-woman-in-tech/&#34; target=&#34;_blank&#34;&gt;I’m not a woman in tech&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Maria Scrivener on how she does not consider herself a woman in tech. She prefers to lose the labels and just be considered her, herself. Advocates for being inclusive rather than exclusive&lt;/p&gt;

&lt;p&gt;Tags: feminism, women-in-tech, maria-scrivener, women, label, equality&lt;/p&gt;

&lt;p&gt;Id: 7e2fbffc-7a1d-11e8-bbd2-0242ac110002
Read: Wed, 27 Jun 2018 15:19:32 +0000&lt;/p&gt;

&lt;h2 id=&#34;password-security-alert-https-blog-8tracks-com-2017-06-27-password-security-alert&#34;&gt;&lt;a href=&#34;https://blog.8tracks.com/2017/06/27/password-security-alert/&#34; target=&#34;_blank&#34;&gt;PASSWORD SECURITY ALERT&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by David Porter in which they alert their users that their database has been leaked, therefore some passwords are at risk.&lt;/p&gt;

&lt;p&gt;The passwords were hashed and salted, not stored in plain text, but those who share a password across services could be at risk.&lt;/p&gt;

&lt;p&gt;The attack has been successful given that a developer didn&amp;rsquo;t have two-factor authentication (2FA) on their github account and the company was using GitHub LFS (git large file system) to store database backups&lt;/p&gt;

&lt;p&gt;Tags: david-porter, backup, storage, configuration, github, 2fa, plain-text, password, security, security-alert, lfs, git-lfs, github-lfs&lt;/p&gt;

&lt;p&gt;Id: 97212f3c-7a1d-11e8-bdcd-0242ac110002
Read: Wed, 27 Jun 2018 15:20:14 +0000&lt;/p&gt;

&lt;h2 id=&#34;matthew-green-https-blog-cryptographyengineering-com-2017-07-02-beyond-public-key-encryption&#34;&gt;&lt;a href=&#34;https://blog.cryptographyengineering.com/2017/07/02/beyond-public-key-encryption/&#34; target=&#34;_blank&#34;&gt;Matthew Green&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Matthew Green on the ideas presented by Shamir in 1984: Identity Based Cryptography (IBE), Attribute Based Cryptography (ABE)&lt;/p&gt;

&lt;p&gt;Tags: rsa, matthew-green, cryptography, identity-based-cryptography, attribute-based-cryptography, shamir, public-key, encryption, private-key&lt;/p&gt;

&lt;p&gt;Id: a942bf96-7a1d-11e8-b122-0242ac110002
Read: Wed, 27 Jun 2018 15:20:44 +0000&lt;/p&gt;

&lt;h2 id=&#34;starbucks-should-really-make-their-apis-public-https-blog-tendigi-com-starbucks-should-really-make-their-apis-public-6b64a1c2e923&#34;&gt;&lt;a href=&#34;https://blog.tendigi.com/starbucks-should-really-make-their-apis-public-6b64a1c2e923&#34; target=&#34;_blank&#34;&gt;Starbucks should really make their APIs public&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Nick Lee in which he explains how he has reverse-engineered the Starbucks API so you can connect to it from another device (not only phones, with the app installed)&lt;/p&gt;

&lt;p&gt;Tags: certificate-pinning, tendigi, nick-lee, security, man-in-the-middle, proxy, api, attribute-fingerprinting, open-api, starbucks&lt;/p&gt;

&lt;p&gt;Id: b3ffb61e-7a1d-11e8-a08c-0242ac110002
Read: Wed, 27 Jun 2018 15:21:02 +0000&lt;/p&gt;

&lt;h2 id=&#34;feature-toggles-are-one-of-the-worst-kinds-of-technical-debt-https-dzone-com-articles-feature-toggles-are-one-worst&#34;&gt;&lt;a href=&#34;https://dzone.com/articles/feature-toggles-are-one-worst&#34; target=&#34;_blank&#34;&gt;Feature Toggles are one of the Worst kinds of Technical Debt&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article on the ups and downs of using feature toggles.&lt;/p&gt;

&lt;p&gt;Especially with long lived branches and feature by abstraction&lt;/p&gt;

&lt;p&gt;Tags: feature-by-abstraction, feature-toggle, canary-test, jim-bird, technical-debt&lt;/p&gt;

&lt;p&gt;Id: dbb1ff46-7a1d-11e8-b40e-0242ac110002
Read: Wed, 27 Jun 2018 15:22:09 +0000&lt;/p&gt;

&lt;h2 id=&#34;testcontainers-making-java-integration-tests-easy-https-zeroturnaround-com-rebellabs-java-integration-testing-with-testcontainers&#34;&gt;&lt;a href=&#34;https://zeroturnaround.com/rebellabs/java-integration-testing-with-testcontainers/&#34; target=&#34;_blank&#34;&gt;TestContainers: making Java integration tests easy&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article on how to start a new docker container from Java code (using a junit @rule).&lt;/p&gt;

&lt;p&gt;Using the library TestContainers&lt;/p&gt;

&lt;p&gt;Tags: testcontainers, rebel-labs, anton-arhipov, test, docker, image, integration-test, testing&lt;/p&gt;

&lt;p&gt;Id: f13f63bc-7a1d-11e8-a6a2-0242ac110002
Read: Wed, 27 Jun 2018 15:22:45 +0000&lt;/p&gt;

&lt;h2 id=&#34;code-health-to-comment-or-not-to-comment-http-testing-googleblog-com-2017-07-code-health-to-comment-or-not-to-comment-html&#34;&gt;&lt;a href=&#34;http://testing.googleblog.com/2017/07/code-health-to-comment-or-not-to-comment.html&#34; target=&#34;_blank&#34;&gt;Code Health: To Comment or Not to Comment?&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article about comments in code: where to use them and when not to&lt;/p&gt;

&lt;p&gt;Tags: dori-reuveni, kevin-bourrillion, comment, clean-code&lt;/p&gt;

&lt;p&gt;Id: 15740b0c-7a1e-11e8-9169-0242ac110002
Read: Wed, 27 Jun 2018 15:23:46 +0000&lt;/p&gt;

&lt;h2 id=&#34;saints-and-traders-the-john-henry-fable-reconsidered-https-www-ribbonfarm-com-2014-06-04-saints-and-traders-the-john-henry-fable-reconsidered&#34;&gt;&lt;a href=&#34;https://www.ribbonfarm.com/2014/06/04/saints-and-traders-the-john-henry-fable-reconsidered/&#34; target=&#34;_blank&#34;&gt;Saints and Traders: The John Henry Fable Reconsidered&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article on the guardian syndrome and the Saint syndrome.&lt;/p&gt;

&lt;p&gt;Explains the story of John Henry, who died right after winning a drilling contest with a machine.&lt;/p&gt;

&lt;p&gt;Explains the finite game and the infinite game.&lt;/p&gt;

&lt;p&gt;Tags: finite-game, infinite-game, saint-syndrome, guardian-syndrome, comparison, philosophy, venkatesh-rao, john-henry&lt;/p&gt;

&lt;p&gt;Id: 5228464e-7a1e-11e8-9125-0242ac110002
Read: Wed, 27 Jun 2018 15:25:28 +0000&lt;/p&gt;

&lt;h2 id=&#34;stacked-pull-requests-keeping-github-diffs-small-https-graysonkoonce-com-stacked-pull-requests-keeping-github-diffs-small&#34;&gt;&lt;a href=&#34;https://graysonkoonce.com/stacked-pull-requests-keeping-github-diffs-small/&#34; target=&#34;_blank&#34;&gt;Stacked Pull Requests: Keeping GitHub Diffs Small&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article on using a technique (stacked pull requests) to keep pull requests small and get more feedback, more comments from teammates, therefore reducing the code review fatigue. By Grayson Koonce&lt;/p&gt;

&lt;p&gt;Tags: grayson-koonce, fatigue, code-fatigue, pull-request, pull-request-fatigue, stacked-pull-request, technique, comment, feedback, teammate, team&lt;/p&gt;

&lt;p&gt;Id: 6e3df860-7a1e-11e8-ba6a-0242ac110002
Read: Wed, 27 Jun 2018 15:26:15 +0000&lt;/p&gt;

&lt;h2 id=&#34;i-hate-almost-all-software-http-tinyclouds-org-rant-html&#34;&gt;&lt;a href=&#34;http://tinyclouds.org/rant.html&#34; target=&#34;_blank&#34;&gt;I hate almost all software&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Ryan Dahl on the focus of the software and the inherent complexity of today&amp;rsquo;s software&lt;/p&gt;

&lt;p&gt;Tags: ryan-dahl, complexity, software, rant&lt;/p&gt;

&lt;p&gt;Id: 7ab3fcd4-7a1e-11e8-9590-0242ac110002
Read: Wed, 27 Jun 2018 15:26:36 +0000&lt;/p&gt;

&lt;h2 id=&#34;the-real-reason-for-developers-salaries-stagnation-https-simpleprogrammer-com-developers-salaries-stagnation&#34;&gt;&lt;a href=&#34;https://simpleprogrammer.com/developers-salaries-stagnation/&#34; target=&#34;_blank&#34;&gt;The Real Reason for Developers’ Salaries Stagnation&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Im this article, the author speaks of developer salaries related to their skills, proficiency, area of interest and role. Also about the real purchasing power stagnation.&lt;/p&gt;

&lt;p&gt;Tags: salary, skill, role, position, money, career, career-management, fiodar-sazanavets&lt;/p&gt;

&lt;p&gt;Id: a4e26bee-7a1e-11e8-ac68-0242ac110002
Read: Wed, 27 Jun 2018 15:27:46 +0000&lt;/p&gt;

&lt;h2 id=&#34;what-is-a-10x-programmer-https-dev-to-nathanepstein-what-is-a-10x-programmer&#34;&gt;&lt;a href=&#34;https://dev.to/nathanepstein/what-is-a-10x-programmer&#34; target=&#34;_blank&#34;&gt;What is a &amp;ldquo;10x&amp;rdquo; Programmer?&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article about makes a good programmer, under the label of the mythical 10x programmer.&lt;/p&gt;

&lt;p&gt;There are two different groups of things in the list: things you are/have (skills) and things you do (actitudes). On the former, writing code (good, business code that is correctly organized, architected, designed), to know a lot. On the latter, ownership for the project (implication, care), teaching and learning from others.&lt;/p&gt;

&lt;p&gt;Tags: 10x, author, productivity, skill, attitude, aptitude, attitude-vs-aptitude, nathan-epstein&lt;/p&gt;

&lt;p&gt;Id: e5d53f46-7a1e-11e8-9097-0242ac110002
Read: Wed, 27 Jun 2018 15:29:35 +0000&lt;/p&gt;

&lt;h2 id=&#34;why-podcasts-have-become-popular-http-www-donnfelker-com-why-podcasts-have-become-popular&#34;&gt;&lt;a href=&#34;http://www.donnfelker.com/why-podcasts-have-become-popular/&#34; target=&#34;_blank&#34;&gt;Why Podcasts Have Become Popular&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Donn Felker on the effect that the Internet is having on consumers: they now decide when to consume the resources, instead of passively waiting for the resources to appear.&lt;/p&gt;

&lt;p&gt;This is the suggested explanation for on-demand video vs television, podcasts vs radio&lt;/p&gt;

&lt;p&gt;Tags: podcast, on-demand, consumer, internet, donn-felker&lt;/p&gt;

&lt;p&gt;Id: f7f8a73a-7a1e-11e8-836d-0242ac110002
Read: Wed, 27 Jun 2018 15:30:06 +0000&lt;/p&gt;

&lt;h2 id=&#34;don-t-know-what-you-want-improve-these-7-universal-skills-self-discipline-get-better-at-ignoring-the-negative-voice-in-your-head-get-out-of-your-bed-go-to-the-gym-don-t-listen-to-i-don-t-want-to&#34;&gt;&lt;a href=&#34;Self-Discipline: Get better at ignoring the negative voice in your head. Get out of your bed. Go to the gym. Don’t listen to “I don’t want to.”&#34; target=&#34;_blank&#34;&gt;Don’t Know What You Want? Improve These 7 Universal Skills&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Personal Effectiveness: Learn how to maximize the results you can get during the 16–18 hours you’re awake. Get more done — effectively.
Communication: We think we’re all master communicators. But the truth is that we suck. Communication is both art and science. And our ability to work with others depends on it.
Negotiation: You negotiate all the time. With your spouse, kids, parents, teachers, friends, co-workers, managers, etc. Learn to get the best deal for all parties.
Persuasion: Learn how to get what you want in an ethical way.
Physical Strength &amp;amp; Stamina: Getting stronger is a skill. Pull your own weight. It’s something every human should be able to do.
Flexibility: Sitting all day long behind your computer or in your car turns you into a stiff being. Learn how to stretch your hips, lower back, hamstrings, and calves — the most common weak points of desk workers.&lt;/p&gt;

&lt;p&gt;Tags:&lt;/p&gt;

&lt;p&gt;Id: 0862fbca-7a1f-11e8-83fb-0242ac110002
Read: Wed, 27 Jun 2018 15:30:33 +0000&lt;/p&gt;

&lt;h2 id=&#34;your-concentration-training-program-11-exercises-that-will-strengthen-your-attention-https-www-artofmanliness-com-2014-01-30-your-concentration-training-program-11-exercises-that-will-strengthen-your-attention&#34;&gt;&lt;a href=&#34;https://www.artofmanliness.com/2014/01/30/your-concentration-training-program-11-exercises-that-will-strengthen-your-attention/&#34; target=&#34;_blank&#34;&gt;Your Concentration Training Program: 11 Exercises That Will Strengthen Your Attention&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Brett &amp;amp; Kate McKay on exercises for training the attention&lt;/p&gt;

&lt;p&gt;Tags: brett-mckay, kate-mckay, training, concentration, exercise, focus, attention&lt;/p&gt;

&lt;p&gt;Id: 14f5e064-7a1f-11e8-be86-0242ac110002
Read: Wed, 27 Jun 2018 15:30:54 +0000&lt;/p&gt;

&lt;h2 id=&#34;the-great-attention-heist-https-lareviewofbooks-org-article-the-great-attention-heist&#34;&gt;&lt;a href=&#34;https://lareviewofbooks.org/article/the-great-attention-heist/&#34; target=&#34;_blank&#34;&gt;The Great Attention Heist&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by John Bell, John Zada on the current war for attention, what they call the &amp;lsquo;attention heist&amp;rsquo;: publishers fight for your attention, selling it to third parties. The more they can lure you to spend your (finite) attention with them, the higher the profits.&lt;/p&gt;

&lt;p&gt;They talk about two kinds of attention: short span and long span. Reading news is the first while reading a book or a long article is the second one.&lt;/p&gt;

&lt;p&gt;They mention unplugging (i.e., a &amp;ldquo;digital sabbath&amp;rdquo;) to help improving the level of concentration&lt;/p&gt;

&lt;p&gt;(this was a book review, of &amp;lsquo;The attention merchants&amp;rsquo;, by Tim Wu)&lt;/p&gt;

&lt;p&gt;Tags: john-bell, john-zada, attention-heist, attention, app, smartphone, book-review, tim-wu, book, sabbath, digital-sabbath, long-article&lt;/p&gt;

&lt;p&gt;Id: 3f41e6ec-7a1f-11e8-85fc-0242ac110002
Read: Wed, 27 Jun 2018 15:32:05 +0000&lt;/p&gt;

&lt;h2 id=&#34;how-to-read-more-books-http-verraes-net-2012-12-2012-12-23-how-to-read-more-books&#34;&gt;&lt;a href=&#34;http://verraes.net/2012/12/2012-12-23-how-to-read-more-books/&#34; target=&#34;_blank&#34;&gt;How to read more books&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Tags: mathias-verraes, reading, tips-and-tricks, self-study, training&lt;/p&gt;

&lt;p&gt;Id: c451a048-7a1f-11e8-82f7-0242ac110002
Read: Wed, 27 Jun 2018 15:35:49 +0000&lt;/p&gt;

&lt;h2 id=&#34;serving-100-gbps-from-an-open-connect-appliance-https-medium-com-netflix-techblog-serving-100-gbps-from-an-open-connect-appliance-cdb51dda3b99&#34;&gt;&lt;a href=&#34;https://medium.com/netflix-techblog/serving-100-gbps-from-an-open-connect-appliance-cdb51dda3b99&#34; target=&#34;_blank&#34;&gt;Serving 100 Gbps from an Open Connect Appliance&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article on how Netflix has optimized their servers to be able to send TLS content at 100 Gbps, using openbsd.&lt;/p&gt;

&lt;p&gt;Tags: netflix, openbsd, performance, optimization, drew-gallatin&lt;/p&gt;

&lt;p&gt;Id: dc8f92dc-7a1f-11e8-818a-0242ac110002
Read: Wed, 27 Jun 2018 15:36:29 +0000&lt;/p&gt;

&lt;h2 id=&#34;rebellabs-developer-productivity-report-2017-why-do-you-use-the-java-tools-you-use-https-zeroturnaround-com-rebellabs-developer-productivity-report-2017-why-do-you-use-java-tools-you-use&#34;&gt;&lt;a href=&#34;https://zeroturnaround.com/rebellabs/developer-productivity-report-2017-why-do-you-use-java-tools-you-use/&#34; target=&#34;_blank&#34;&gt;RebelLabs Developer Productivity Report 2017: Why do you use the Java tools you use?&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Tags: java-ee, spring, kotlin, java, jvm, scala, clojure, productivity, rebel-labs, oleg-shelajev, zero-turnaround, 2017, report, comparison&lt;/p&gt;

&lt;p&gt;Id: 1c603222-7a20-11e8-8f75-0242ac110002
Read: Wed, 27 Jun 2018 15:38:16 +0000&lt;/p&gt;

&lt;h2 id=&#34;why-paper-is-the-real-killer-app-http-www-bbc-com-capital-story-20170120-why-paper-is-the-real-killer-app&#34;&gt;&lt;a href=&#34;http://www.bbc.com/capital/story/20170120-why-paper-is-the-real-killer-app&#34; target=&#34;_blank&#34;&gt;Why paper is the real &amp;lsquo;killer app&amp;rsquo;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Alison Birrane on how working on a low-tech device is different than on a high-tech device (e.g., taking notes on a paper sheet vs on a laptop). On how it stimulates different parts of the brain. The multiple uses of the paper as compared to the narrowness of the apps.&lt;/p&gt;

&lt;p&gt;Tags: alison-birrane, killer-app, comparison, media, social-media, gadget, low-tech, technology, smartphone&lt;/p&gt;

&lt;p&gt;Id: 2ac58bdc-7a20-11e8-a82d-0242ac110002
Read: Wed, 27 Jun 2018 15:38:40 +0000&lt;/p&gt;

&lt;h2 id=&#34;self-study-guide-to-machine-learning-https-machinelearningmastery-com-self-study-guide-to-machine-learning&#34;&gt;&lt;a href=&#34;https://machinelearningmastery.com/self-study-guide-to-machine-learning/&#34; target=&#34;_blank&#34;&gt;Self-Study Guide to Machine Learning&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Tags: self-study, machine-learning, jason-brownlee&lt;/p&gt;

&lt;p&gt;Id: 388125f6-7a20-11e8-aae6-0242ac110002
Read: Wed, 27 Jun 2018 15:39:04 +0000&lt;/p&gt;

&lt;h2 id=&#34;breaking-up-the-behemoth&#34;&gt;[Breaking Up the Behemoth]()&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Sandi Metz explaining how applications evolve, and what we might do if we&amp;rsquo;re unhappy with the results using:  Design Stamina Hypothesis (Fowler), Procedural vs Object-Oriented Code and X.&lt;/p&gt;

&lt;p&gt;Tags: ood, object-orientation, sandi-metz, martin-fowler, design-stamina, quality, behemoth, monolith&lt;/p&gt;

&lt;p&gt;Id: 457003ea-7a20-11e8-a3ff-0242ac110002
Read: Wed, 27 Jun 2018 15:39:25 +0000&lt;/p&gt;

&lt;h2 id=&#34;10-hard-things-to-start-doing-for-yourself-http-www-marcandangel-com-2017-09-24-10-hard-things-to-start-doing-for-yourself&#34;&gt;&lt;a href=&#34;http://www.marcandangel.com/2017/09/24/10-hard-things-to-start-doing-for-yourself/&#34; target=&#34;_blank&#34;&gt;10 Hard Things to Start Doing for Yourself&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this self-help article on how to help yourself by doing hard things:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Start letting go of unnecessary ideals
Start putting your heart and soul into the things you do
Start stretching yourself just beyond the edge of comfort
Start taking more deep breaths, so you can mindfully collect more lessons for the long run
Start side-stepping senseless drama
Start staying true to your values and convictions
Start looking for silver linings
Start focusing inward more often
Start embracing your humanness and giving yourself more credit
Start taking the next small, insignificant step (one at a time, every day).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By Marc Chernoff&lt;/p&gt;

&lt;p&gt;Tags: marc-chernoff, self-help, meditation, breathing, comfort-zone, help&lt;/p&gt;

&lt;p&gt;Id: 53a89846-7a20-11e8-abd1-0242ac110002
Read: Wed, 27 Jun 2018 15:39:49 +0000&lt;/p&gt;

&lt;h2 id=&#34;happiness-is-overrated-finding-deep-meaning-in-life-comes-down-to-4-pillars-http-www-businessinsider-com-emily-esfehani-smith-finding-meaning-life-4-pillars-2017-9&#34;&gt;&lt;a href=&#34;http://www.businessinsider.com/emily-esfehani-smith-finding-meaning-life-4-pillars-2017-9&#34; target=&#34;_blank&#34;&gt;Happiness is overrated — finding deep meaning in life comes down to 4 &amp;lsquo;pillars&amp;rsquo;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article about what life is about: not happiness but four pillars: belonging and purpose, transcendence and storytelling
storytelling helps people create meaning because it allows people to create, edit, and transform the story of their lives&lt;/p&gt;

&lt;p&gt;Tags: happiness, life, fulfillment, pillar, belonging, purpose, flow, transcendence, storytelling,, chris-weller&lt;/p&gt;

&lt;p&gt;Id: 9737002a-7a20-11e8-a864-0242ac110002
Read: Wed, 27 Jun 2018 15:41:42 +0000&lt;/p&gt;

&lt;h2 id=&#34;it-s-time-to-kill-the-web-https-blog-plan99-net-its-time-to-kill-the-web-974a9fe80c89&#34;&gt;&lt;a href=&#34;https://blog.plan99.net/its-time-to-kill-the-web-974a9fe80c89&#34; target=&#34;_blank&#34;&gt;It’s time to kill the web&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article that explains the background of the web and how it wasn&amp;rsquo;t designed to support applications but documents. Explains the downsides and security profile of a webapp as compared to a desktop/native application. By Mike Hearn&lt;/p&gt;

&lt;p&gt;Tags: comparison, web-app, application, app, desktop-app, native-app, mike-hearn, security, html, html5, javascript, web&lt;/p&gt;

&lt;p&gt;Id: a3e1c936-7a20-11e8-8fbe-0242ac110002
Read: Wed, 27 Jun 2018 15:42:04 +0000&lt;/p&gt;

&lt;h2 id=&#34;how-to-stay-focused-when-you-re-working-from-home-https-hbr-org-2017-09-how-to-stay-focused-when-youre-working-from-home-formcheck-bc3e82f422e9567c25d37e403ee877e6&#34;&gt;&lt;a href=&#34;https://hbr.org/2017/09/how-to-stay-focused-when-youre-working-from-home&amp;amp;formCheck=bc3e82f422e9567c25d37e403ee877e6&#34; target=&#34;_blank&#34;&gt;How to Stay Focused When You’re Working from Home&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article on structuring your workday while being at home (remote work).&lt;/p&gt;

&lt;p&gt;Some tips:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Structure for success&lt;/li&gt;
&lt;li&gt;Schedule your day: when it&amp;rsquo;s work-related time and when not&lt;/li&gt;
&lt;li&gt;Set boundaries&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By Elizabeth Grace Saunders&lt;/p&gt;

&lt;p&gt;Tags: remote, remote-work, hbr, harvard-business-review, elizabeth-saunders&lt;/p&gt;

&lt;p&gt;Id: b2ddd326-7a20-11e8-9af5-0242ac110002
Read: Wed, 27 Jun 2018 15:42:29 +0000&lt;/p&gt;

&lt;h2 id=&#34;cognitive-biases-in-programming-https-hackernoon-com-cognitive-biases-in-programming-5e937707c27b&#34;&gt;&lt;a href=&#34;https://hackernoon.com/cognitive-biases-in-programming-5e937707c27b&#34; target=&#34;_blank&#34;&gt;Cognitive Biases in Programming&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article that explains some cognitive biases (prejudices of our mind) while programming:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hyperbolic Discounting: Going for an immediate payoff instead of a delayed larger one&lt;/li&gt;
&lt;li&gt;IKEA Effect:Overvaluing your own solutions to a problem, and thus in contrast undervalue other solutions. Also called the &amp;ldquo;Not-Invented-Here (NIH) Syndrome&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Premature Optimization: Optimizing before you know that you need to.&lt;/li&gt;
&lt;li&gt;Planning Fallacy: Optimistically underestimating the time required to complete a task&lt;/li&gt;
&lt;li&gt;Recency Bias: Placing higher value on recent events than ones that occurred further in the past&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;We can never completely eliminate our biases, by being aware of how it is affecting us, we can somewhat mitigate the problems it causes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By Yash Ranadive&lt;/p&gt;

&lt;p&gt;Tags: yash-ranadive, bias, programming, mind&lt;/p&gt;

&lt;p&gt;Id: c8742b18-7a20-11e8-b36f-0242ac110002
Read: Wed, 27 Jun 2018 15:43:05 +0000&lt;/p&gt;

&lt;h2 id=&#34;keybase-launches-encrypted-git-https-keybase-io-blog-encrypted-git-for-everyone&#34;&gt;&lt;a href=&#34;https://keybase.io/blog/encrypted-git-for-everyone&#34; target=&#34;_blank&#34;&gt;Keybase launches encrypted git&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read how to encrypt git repositories using keybase&lt;/p&gt;

&lt;p&gt;Tags: keybase, git, encryption, security, private-key, public-key, storage, archive&lt;/p&gt;

&lt;p&gt;Id: dcd43756-7a20-11e8-b0ee-0242ac110002
Read: Wed, 27 Jun 2018 15:43:39 +0000&lt;/p&gt;

&lt;h2 id=&#34;general-and-surprising-http-paulgraham-com-sun-html&#34;&gt;&lt;a href=&#34;http://paulgraham.com/sun.html&#34; target=&#34;_blank&#34;&gt;General and Surprising&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article about how information can be classified as general vs specific and surprising vs unsurprising. How it&amp;rsquo;s best to find a small surprising general thing.&lt;/p&gt;

&lt;p&gt;Tags: paul-graham, surprising, general, information, classification&lt;/p&gt;

&lt;p&gt;Id: f611b626-7a20-11e8-8172-0242ac110002
Read: Wed, 27 Jun 2018 15:44:22 +0000&lt;/p&gt;

&lt;h2 id=&#34;i-built-a-server-less-telegram-bot-over-a-weekend-and-here-s-what-i-learned-https-medium-com-moses-soh-how-to-build-a-server-less-telegram-bot-227f842f4706&#34;&gt;&lt;a href=&#34;https://medium.com/@moses.soh/how-to-build-a-server-less-telegram-bot-227f842f4706&#34; target=&#34;_blank&#34;&gt;I built a server-less Telegram bot over a weekend and here’s what I learned&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article on creating a telegram chatbot for a specific purpose. Connects two people (first one subscribes, then the other asks for help and the first is contacted) so the first helps the second. By Moses Soh&lt;/p&gt;

&lt;p&gt;Tags: telegram, chatbot, app, moses-soh, side-project, pet-project, project&lt;/p&gt;

&lt;p&gt;Id: 25b1e5d6-7a21-11e8-a838-0242ac110002
Read: Wed, 27 Jun 2018 15:45:41 +0000&lt;/p&gt;

&lt;h2 id=&#34;reviewing-ethereum-smart-contracts-https-blog-gdssecurity-com-labs-2017-9-27-reviewing-ethereum-smart-contracts-html&#34;&gt;&lt;a href=&#34;https://blog.gdssecurity.com/labs/2017/9/27/reviewing-ethereum-smart-contracts.html&#34; target=&#34;_blank&#34;&gt;Reviewing Ethereum Smart Contracts&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article about how to review ethereum contracts and a concrete example of an attack to a smart contract&lt;/p&gt;

&lt;p&gt;Tags: ethereum, smart-contract, crypto-currency, ico, trustless, security, code-review&lt;/p&gt;

&lt;p&gt;Id: 5d73322c-7a21-11e8-8e1a-0242ac110002
Read: Wed, 27 Jun 2018 15:47:15 +0000&lt;/p&gt;

&lt;h2 id=&#34;keep-calm-and-carry-on-scaling-your-org-with-microservices-https-bridgetkromhout-com-speaking-2017-srecon&#34;&gt;&lt;a href=&#34;https://bridgetkromhout.com/speaking/2017/srecon/&#34; target=&#34;_blank&#34;&gt;Keep Calm and Carry On - Scaling Your Org with Microservices&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the slides of this presentation by Bridget Kromhout and Charity Majors about organizations and microservices: the main problem is the communication&lt;/p&gt;

&lt;p&gt;Tags: charity-majors, bridget-kromhout, microservice, organization, communication, devops&lt;/p&gt;

&lt;p&gt;Id: ea81381c-7a21-11e8-b418-0242ac110002
Read: Wed, 27 Jun 2018 15:51:12 +0000&lt;/p&gt;

&lt;h2 id=&#34;guía-al-movimiento-noestimates-https-jeronimopalacios-com-2016-09-guia-al-movimiento-noestimates&#34;&gt;&lt;a href=&#34;https://jeronimopalacios.com/2016/09/guia-al-movimiento-noestimates/&#34; target=&#34;_blank&#34;&gt;Guía al movimiento #NoEstimates&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Jeronimo Palacios, giving an overview of the no estimates movement.&lt;/p&gt;

&lt;p&gt;Tags: no-estimates, jeronimo-palacios, agile, scrum, estimate, forecast, management&lt;/p&gt;

&lt;p&gt;Id: f6c70a98-7a21-11e8-a896-0242ac110002
Read: Wed, 27 Jun 2018 15:51:32 +0000&lt;/p&gt;

&lt;h2 id=&#34;core-competence-http-www-economist-com-node-12231124&#34;&gt;&lt;a href=&#34;http://www.economist.com/node/12231124&#34; target=&#34;_blank&#34;&gt;Core competence&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article describing what a core competence is and how can we find out if a competence is considered core or not.&lt;/p&gt;

&lt;p&gt;Tags: economy, definition, core-competence, core-business, management, prahalad, gary-hamel&lt;/p&gt;

&lt;p&gt;Id: 01a58660-7a22-11e8-b4f8-0242ac110002
Read: Wed, 27 Jun 2018 15:51:50 +0000&lt;/p&gt;

&lt;h2 id=&#34;how-i-stopped-procrastinating-learned-to-code-and-launched-my-first-product-https-dev-to-lynnetye-how-i-stopped-procrastinating-learned-to-code-and-launched-my-first-product-2i1&#34;&gt;&lt;a href=&#34;https://dev.to/lynnetye/how-i-stopped-procrastinating-learned-to-code-and-launched-my-first-product-2i1&#34; target=&#34;_blank&#34;&gt;How I stopped procrastinating, learned to code, and launched my first product&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article explaining some tips and tricks to launch a side project. By Lynne Tye&lt;/p&gt;

&lt;p&gt;Tags: lynne-tye, tips-and-tricks, product, side-project, launch, business, lean, startup, product-management&lt;/p&gt;

&lt;p&gt;Id: 0e85e3f2-7a22-11e8-b818-0242ac110002
Read: Wed, 27 Jun 2018 15:52:12 +0000&lt;/p&gt;

&lt;h2 id=&#34;when-are-citi-bikes-faster-than-taxis-in-new-york-city-http-toddwschneider-com-posts-taxi-vs-citi-bike-nyc&#34;&gt;&lt;a href=&#34;http://toddwschneider.com/posts/taxi-vs-citi-bike-nyc/&#34; target=&#34;_blank&#34;&gt;When are Citi Bikes Faster than Taxis in New York City?&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Todd Schneider analysing how city bikes compare to taxis in New York city.&lt;/p&gt;

&lt;p&gt;Good analysis, using a Monte Carlo simulation, written in R. Good data visualization.&lt;/p&gt;

&lt;p&gt;Tags: todd-schneider, data-visualization, map, city-bike, taxi, cab, new-york, new-york-city, comparison, data, data-analytics, monte-carlo, simulation, r&lt;/p&gt;

&lt;p&gt;Id: 18bc20c0-7a22-11e8-9209-0242ac110002
Read: Wed, 27 Jun 2018 15:52:29 +0000&lt;/p&gt;

&lt;h2 id=&#34;java-9-and-intellij-idea-https-blog-jetbrains-com-idea-2017-09-java-9-and-intellij-idea&#34;&gt;&lt;a href=&#34;https://blog.jetbrains.com/idea/2017/09/java-9-and-intellij-idea/&#34; target=&#34;_blank&#34;&gt;Java 9 and IntelliJ IDEA&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Trisha Gee about upcoming features to IntelliJ Idea 2017.3, centered around java 9 features&lt;/p&gt;

&lt;p&gt;Tags: trisha-gee, java-9, jdk-9, java, jdk, intellij-idea, ide, ide-support, jetbrains&lt;/p&gt;

&lt;p&gt;Id: 23b8350e-7a22-11e8-a9f3-0242ac110002
Read: Wed, 27 Jun 2018 15:52:48 +0000&lt;/p&gt;

&lt;h2 id=&#34;learn-from-your-attackers-ssh-honeypot-https-www-robertputt-co-uk-learn-from-your-attackers-ssh-honeypot-html&#34;&gt;&lt;a href=&#34;https://www.robertputt.co.uk/learn-from-your-attackers-ssh-honeypot.html&#34; target=&#34;_blank&#34;&gt;Learn from your attackers - SSH HoneyPot&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article on how to setup a honey pot machine using honssh. By Robert Putt&lt;/p&gt;

&lt;p&gt;Tags: robert-putt, honey-pot, security, honeypot, honssh, attacker&lt;/p&gt;

&lt;p&gt;Id: 2e36336e-7a22-11e8-9424-0242ac110002
Read: Wed, 27 Jun 2018 15:53:05 +0000&lt;/p&gt;

&lt;h2 id=&#34;to-type-or-not-to-type-quantifying-detectable-bugs-in-javascript-https-blog-acolyer-org-2017-09-19-to-type-or-not-to-type-quantifying-detectable-bugs-in-javascript&#34;&gt;&lt;a href=&#34;https://blog.acolyer.org/2017/09/19/to-type-or-not-to-type-quantifying-detectable-bugs-in-javascript/&#34; target=&#34;_blank&#34;&gt;To type or not to type: quantifying detectable bugs in JavaScript&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this paper commentary by Adrian Colyer (on a paper by Zheng Gao, Christian Bird, Earl T. Barr) on a study that tries to reproduce fixes for defects based on the dynamic to static typing system.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;both Flow and TypeScript are pretty good, and conservatively either of them can prevent about 15% of the bugs that end up in committed code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s interesting to see these effects quantified:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Running the binomial test on the results shows that, at the confidence level of 95%, the true percentage of detectable bugs for Flow and TypeScript falls into [11.5%, 18.5%] with mean 15%.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, some recommendations for the future: for typescript and flow to be compatible for more gains.&lt;/p&gt;

&lt;p&gt;Original paper: &lt;a href=&#34;http://ttendency.cs.ucl.ac.uk/projects/type_study/documents/type_study.pdf&#34; target=&#34;_blank&#34;&gt;http://ttendency.cs.ucl.ac.uk/projects/type_study/documents/type_study.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: zheng-gao, christian-bird, earl-barr, typescript, javascript, flow, bug, defect, type-system, dynamic-typing, static-typing&lt;/p&gt;

&lt;p&gt;Id: 398cc606-7a22-11e8-b33c-0242ac110002
Read: Wed, 27 Jun 2018 15:53:24 +0000&lt;/p&gt;

&lt;h2 id=&#34;how-artificial-intelligence-can-be-used-for-password-guessing-https-medium-com-heyfebin-how-artificial-intelligence-can-be-used-for-password-guessing-cf4fd4184a46&#34;&gt;&lt;a href=&#34;https://medium.com/@heyfebin/how-artificial-intelligence-can-be-used-for-password-guessing-cf4fd4184a46&#34; target=&#34;_blank&#34;&gt;How Artificial Intelligence Can Be Used For Password Guessing&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Febin John James on how neural networks can learn from the leaked passwords and try to guess passwords for existing users&lt;/p&gt;

&lt;p&gt;Tags: febin-james, ai, artificial-intelligence, generative-adversarial-neural-network, gann, gan, nn, neural-network, guessing, password&lt;/p&gt;

&lt;p&gt;Id: 44fe19ae-7a22-11e8-8e06-0242ac110002
Read: Wed, 27 Jun 2018 15:53:43 +0000&lt;/p&gt;

&lt;h2 id=&#34;chrome-to-force-dev-domains-to-https-via-preloaded-hsts-https-ma-ttias-be-chrome-force-dev-domains-https-via-preloaded-hsts&#34;&gt;&lt;a href=&#34;https://ma.ttias.be/chrome-force-dev-domains-https-via-preloaded-hsts/&#34; target=&#34;_blank&#34;&gt;Chrome to force .dev domains to HTTPS via preloaded HSTS&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Mattias Geniar explaining the having the new Chrome redirecting .dev domains to https means that people using said .dev for local development will have to either provide a https server on their machines or change to another domain&lt;/p&gt;

&lt;p&gt;Tags: mattias-geniar, chrome, http, https, server, development, test, machine&lt;/p&gt;

&lt;p&gt;Id: 509c472c-7a22-11e8-81d7-0242ac110002
Read: Wed, 27 Jun 2018 15:54:03 +0000&lt;/p&gt;

&lt;h2 id=&#34;six-ways-to-functional-fizzbuzz-with-vavr-https-www-sitepoint-com-functional-fizzbuzz-with-vavr&#34;&gt;&lt;a href=&#34;https://www.sitepoint.com/functional-fizzbuzz-with-vavr/&#34; target=&#34;_blank&#34;&gt;Six Ways to Functional FizzBuzz with Vavr&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Gregor Trefs about solving the fizzbuzz kata using vavr, importing some concepts from functional programming&lt;/p&gt;

&lt;p&gt;Tags: functional-programming, gregor-trefs, vavr, case-statement, pattern-matching, functional, kata, fizzbuzz&lt;/p&gt;

&lt;p&gt;Id: 6866497a-7a22-11e8-af91-0242ac110002
Read: Wed, 27 Jun 2018 15:54:43 +0000&lt;/p&gt;

&lt;h2 id=&#34;more-women-take-on-role-of-cfo-at-home-https-paidpost-nytimes-com-northern-trust-more-women-take-on-role-of-cfo-at-home-html&#34;&gt;&lt;a href=&#34;https://paidpost.nytimes.com/northern-trust/more-women-take-on-role-of-cfo-at-home.html&#34; target=&#34;_blank&#34;&gt;More Women Take on Role of CFO — at Home&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article on how women act as CFO of their houses (managing 30% of the world&amp;rsquo;s wealth), how they teach money and meaning to their children.&lt;/p&gt;

&lt;p&gt;Tags: money-management, cfo, women, gender, home, house&lt;/p&gt;

&lt;p&gt;Id: 74f60720-7a22-11e8-a9a3-0242ac110002
Read: Wed, 27 Jun 2018 15:55:04 +0000&lt;/p&gt;

&lt;h2 id=&#34;the-internet-of-things-is-sending-us-back-to-the-middle-ages-https-thenextweb-com-lifestyle-2017-09-13-internet-things-sending-us-back-middle-ages&#34;&gt;&lt;a href=&#34;https://thenextweb.com/lifestyle/2017/09/13/internet-things-sending-us-back-middle-ages/&#34; target=&#34;_blank&#34;&gt;The Internet of Things is sending us back to the Middle Ages&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by JOSHUA A.T. FAIRFIELD on the right-to-own, right-to-repair and property.&lt;/p&gt;

&lt;p&gt;On the difference in the real property of a smartphone vs a car. On the imaginary, they are the same, but in contractual terms, there is a big difference.&lt;/p&gt;

&lt;p&gt;Tags: joshua-fairfield, right-to-repair, bill, law, property, smartphone, eula, license, clause, imaginary&lt;/p&gt;

&lt;p&gt;Id: 80c233ee-7a22-11e8-8743-0242ac110002
Read: Wed, 27 Jun 2018 15:55:24 +0000&lt;/p&gt;

&lt;h2 id=&#34;an-in-depth-guide-to-personal-cybersecurity-https-medium-com-nickrosener-an-in-depth-guide-to-personal-cybersecurity-be98ba47c968&#34;&gt;&lt;a href=&#34;https://medium.com/@nickrosener/an-in-depth-guide-to-personal-cybersecurity-be98ba47c968&#34; target=&#34;_blank&#34;&gt;An In-Depth Guide to Personal Cybersecurity&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this guide to personal security in the net, by Nick Rosener. Examples include 2fa, password management, app security, phone security, etc&lt;/p&gt;

&lt;p&gt;Tags: nick-rosener, 2fa, mfa, password, security, phone&lt;/p&gt;

&lt;p&gt;Id: 92c637d4-7a22-11e8-baba-0242ac110002
Read: Wed, 27 Jun 2018 15:55:54 +0000&lt;/p&gt;

&lt;h2 id=&#34;como-generar-fake-data-en-nuestros-tests-de-aceptación-http-programmeratwork-com-2017-09-06-como-generar-fake-data-en-nuestros-tests-de-aceptacion&#34;&gt;&lt;a href=&#34;http://programmeratwork.com/2017/09/06/Como-generar-fake-data-en-nuestros-tests-de-aceptacion/&#34; target=&#34;_blank&#34;&gt;Como generar &amp;ldquo;fake data&amp;rdquo; en nuestros tests de aceptación&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article (in Spanish) by Ricardo Borillo on using and generating fake data for our tests&lt;/p&gt;

&lt;p&gt;Tags: ricardo-borillo, borillo, fake-data, npm, npm-module, acceptance-testing, test, test-data, spanish&lt;/p&gt;

&lt;p&gt;Id: a0be3cd8-7a22-11e8-a5aa-0242ac110002
Read: Wed, 27 Jun 2018 15:56:17 +0000&lt;/p&gt;

&lt;h2 id=&#34;making-crash-bandicoot-gool-part-9-http-all-things-andy-gavin-com-2011-03-12-making-crash-bandicoot-gool-part-9&#34;&gt;&lt;a href=&#34;http://all-things-andy-gavin.com/2011/03/12/making-crash-bandicoot-gool-part-9/&#34; target=&#34;_blank&#34;&gt;Making Crash Bandicoot – GOOL – part 9&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Andy Gavin on making a lisp for games, an embedded language inside another language.&lt;/p&gt;

&lt;p&gt;GOOL prefers the power and maintainability of a lisp rather than the raw power of a lower-level programming language&lt;/p&gt;

&lt;p&gt;Tags: andy-gavin, lisp, gool, crash-bandicoot, game, game-development&lt;/p&gt;

&lt;p&gt;Id: 46ffc936-7a23-11e8-882f-0242ac110002
Read: Wed, 27 Jun 2018 16:00:56 +0000&lt;/p&gt;

&lt;h2 id=&#34;history-of-symbolics-lisp-machines-rebuttal-to-stallman-s-story-about-the-formation-of-symbolics-and-lmi-https-danluu-com-symbolics-lisp-machines&#34;&gt;&lt;a href=&#34;https://danluu.com/symbolics-lisp-machines/&#34; target=&#34;_blank&#34;&gt;History of Symbolics lisp machines - Rebuttal to Stallman’s Story About The Formation of Symbolics and LMI&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Dan Weinreb on the history of lisp machines, the AI winter and the rebuttal of some stories by Richard M. Stallman&lt;/p&gt;

&lt;p&gt;Tags: dan-weinreb, lisp, symbolics, rms, richard-stallman, lisp-machine, lmi, dan-luu, ai-winter, ai&lt;/p&gt;

&lt;p&gt;Id: 5174beda-7a23-11e8-bf1e-0242ac110002
Read: Wed, 27 Jun 2018 16:01:14 +0000&lt;/p&gt;

&lt;h2 id=&#34;free-for-dev-https-github-com-ripienaar-free-for-dev-blob-master-readme-md&#34;&gt;&lt;a href=&#34;https://github.com/ripienaar/free-for-dev/blob/master/README.md&#34; target=&#34;_blank&#34;&gt;free-for-dev&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this list of (free) resources for programmers&lt;/p&gt;

&lt;p&gt;Tags: free-resource, resource, service, amazon, aws, free-tier, free-trial, github&lt;/p&gt;

&lt;p&gt;Id: 5bd0ece6-7a23-11e8-8014-0242ac110002
Read: Wed, 27 Jun 2018 16:01:31 +0000&lt;/p&gt;

&lt;h2 id=&#34;every-programmer-should-know-https-github-com-mr-mig-every-programmer-should-know&#34;&gt;&lt;a href=&#34;https://github.com/mr-mig/every-programmer-should-know&#34; target=&#34;_blank&#34;&gt;Every Programmer Should Know&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this page on things a programmer should know&lt;/p&gt;

&lt;p&gt;Tags: github, programmer, knowledge&lt;/p&gt;

&lt;p&gt;Id: 67c8032c-7a23-11e8-9ab7-0242ac110002
Read: Wed, 27 Jun 2018 16:01:51 +0000&lt;/p&gt;

&lt;h2 id=&#34;haste-makes-waste-when-you-over-staff-to-achieve-schedule-compression-http-www-qsm-com-risk-02-html&#34;&gt;&lt;a href=&#34;http://www.qsm.com/risk_02.html&#34; target=&#34;_blank&#34;&gt;Haste Makes Waste When You Over-Staff to Achieve Schedule Compression&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Quantitative Software Management (QSM) on how software projects are affected by the size of the team producing it, with charts and based on previous investigation&lt;/p&gt;

&lt;p&gt;Tags: research, meta-research, quality, software, software-quality, qsm, quantitative-software-management&lt;/p&gt;

&lt;p&gt;Id: 72b999a8-7a23-11e8-b831-0242ac110002
Read: Wed, 27 Jun 2018 16:02:10 +0000&lt;/p&gt;

&lt;h2 id=&#34;hacking-back-considered-harmful-https-blog-0day-rocks-hacking-back-considered-harmful-1ea38f882e8f&#34;&gt;&lt;a href=&#34;https://blog.0day.rocks/hacking-back-considered-harmful-1ea38f882e8f&#34; target=&#34;_blank&#34;&gt;Hacking back considered harmful?&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by x0rz, a security researcher, on hacking back&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;active countermeasure that result in limiting the attacker capabilities&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And whether it is ethical to do it, even if it were illegal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ethics is knowing the difference between what you have a right to do and what is right to do. — Potter Stewart&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: x0rz, security, hacking, hacking-back, ethic, legality, law, quote, potter-stewart, countermeasure, attacker&lt;/p&gt;

&lt;p&gt;Id: 7d3d216a-7a23-11e8-8d31-0242ac110002
Read: Wed, 27 Jun 2018 16:02:27 +0000&lt;/p&gt;

&lt;h2 id=&#34;kurt-gödel-separating-truth-from-proof-in-mathematics-http-science-sciencemag-org-content-sci-298-5600-1899-full-pdf-sid-c031062c-8030-4e2c-8716-04409d7abefb&#34;&gt;&lt;a href=&#34;http://science.sciencemag.org/content/sci/298/5600/1899.full.pdf?sid=c031062c-8030-4e2c-8716-04409d7abefb&#34; target=&#34;_blank&#34;&gt;Kurt Gödel—Separating Truth from Proof in Mathematics&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Keith Devlin on Goedel&amp;rsquo;s work, especially on the Incompleteness theorem&lt;/p&gt;

&lt;p&gt;Tags: kurt-godel, kurt-goedel, incompleteness-theorem, bertrand-russell, alfred-north, principia-mathematica, david-hilbert, mathematics, theorem, computability, philosophy&lt;/p&gt;

&lt;p&gt;Id: 8bda1c3c-7a23-11e8-b1cb-0242ac110002
Read: Wed, 27 Jun 2018 16:02:52 +0000&lt;/p&gt;

&lt;h2 id=&#34;ml-for-the-working-programmer-2nd-edition-chapter-5-https-www-cl-cam-ac-uk-lp15-mlbook-pdf-chapter5-pdf&#34;&gt;&lt;a href=&#34;https://www.cl.cam.ac.uk/~lp15/MLbook/PDF/chapter5.pdf&#34; target=&#34;_blank&#34;&gt;ML for the working programmer, 2nd edition - chapter 5&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this chapter, to better understand finite and infinite data structures. Talks about streams (called sequences in ML), HOFs, lambda calculus. The book is by Lawrence Paulson&lt;/p&gt;

&lt;p&gt;Some of my examples are in&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alvarogarcia7/haskell-simple-sessions/blob/master/trees/src/Trees.hs&#34; target=&#34;_blank&#34;&gt;https://github.com/alvarogarcia7/haskell-simple-sessions/blob/master/trees/src/Trees.hs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alvarogarcia7/javascript-simple-sessions/tree/master/streams&#34; target=&#34;_blank&#34;&gt;https://github.com/alvarogarcia7/javascript-simple-sessions/tree/master/streams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: book, chapter, lawrence-paulson, ml, sequence, hof, lambda-calculus, combinator, stream, lazy-list, data-structure, infinite-list, higher-order-function, function-composition&lt;/p&gt;

&lt;p&gt;Id: 97e67a7a-7a23-11e8-bc72-0242ac110002
Read: Wed, 27 Jun 2018 16:03:12 +0000&lt;/p&gt;

&lt;h2 id=&#34;how-to-hack-the-uk-tax-system-i-guess-https-medium-com-zemnmez-how-to-hack-the-uk-tax-system-i-guess-3e84b70f8b&#34;&gt;&lt;a href=&#34;https://medium.com/@Zemnmez/how-to-hack-the-uk-tax-system-i-guess-3e84b70f8b&#34; target=&#34;_blank&#34;&gt;how to hack the uk tax system, i guess&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this investigation of how a security investigator found a security defect in the UK tax system page and the process of reporting it and seeing it fixed&lt;/p&gt;

&lt;p&gt;Tags: zemnmez, open-source, uk, hmrc, responsible-disclosure&lt;/p&gt;

&lt;p&gt;Id: a4263c08-7a23-11e8-86c0-0242ac110002
Read: Wed, 27 Jun 2018 16:03:33 +0000&lt;/p&gt;

&lt;h2 id=&#34;indirect-sale-value-models-http-www-catb-org-esr-writings-magic-cauldron-magic-cauldron-9-html&#34;&gt;&lt;a href=&#34;http://www.catb.org/esr/writings/magic-cauldron/magic-cauldron-9.html&#34; target=&#34;_blank&#34;&gt;Indirect Sale-Value Models&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article on models for selling/monetising open source. By Eric S. Raymond&lt;/p&gt;

&lt;p&gt;Tags: eric-raymond, open-source, monetization&lt;/p&gt;

&lt;p&gt;Id: b0788d3a-7a23-11e8-82df-0242ac110002
Read: Wed, 27 Jun 2018 16:03:53 +0000&lt;/p&gt;

&lt;h2 id=&#34;i-ll-never-bring-my-phone-on-an-international-flight-again-neither-should-you-https-medium-freecodecamp-org-ill-never-bring-my-phone-on-an-international-flight-again-neither-should-you-e9289cde0e5f&#34;&gt;&lt;a href=&#34;https://medium.freecodecamp.org/ill-never-bring-my-phone-on-an-international-flight-again-neither-should-you-e9289cde0e5f&#34; target=&#34;_blank&#34;&gt;I’ll never bring my phone on an international flight again. Neither should you&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Quincy Larson on what happens when you bring your phone over to the US&lt;/p&gt;

&lt;p&gt;Tags: us, phone, privacy, quincy-larson, international-flight, cross-border-flight, flight, device, laptop, burner-phone&lt;/p&gt;

&lt;p&gt;Id: bc93aaf0-7a23-11e8-8ffe-0242ac110002
Read: Wed, 27 Jun 2018 16:04:14 +0000&lt;/p&gt;

&lt;h2 id=&#34;remote-starter-kit-http-www-remotestarterkit-com&#34;&gt;&lt;a href=&#34;http://www.remotestarterkit.com&#34; target=&#34;_blank&#34;&gt; Remote Starter Kit&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this page detailing some tools for a remote position&lt;/p&gt;

&lt;p&gt;Tags: remote, remote-work, remote-tool, tool, starter-kit&lt;/p&gt;

&lt;p&gt;Id: cfe1bdfe-7a23-11e8-b024-0242ac110002
Read: Wed, 27 Jun 2018 16:04:46 +0000&lt;/p&gt;

&lt;h2 id=&#34;moving-java-forward-faster-https-mreinhold-org-blog-forward-faster&#34;&gt;&lt;a href=&#34;https://mreinhold.org/blog/forward-faster&#34; target=&#34;_blank&#34;&gt;Moving Java Forward Faster&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Mark Reinhold, explaining his proposal for a faster java release train, changing from every two years to every six months.&lt;/p&gt;

&lt;p&gt;Tags: release, mark-reinhold, release-management, release-train, java, sun, oracle, brian-goetz, jre, jdk&lt;/p&gt;

&lt;p&gt;Id: dc842498-7a23-11e8-8b35-0242ac110002
Read: Wed, 27 Jun 2018 16:05:07 +0000&lt;/p&gt;

&lt;h2 id=&#34;keeping-a-tidy-life-https-medium-com-ctrlaltjustine-keeping-a-tidy-life-f01bbe2a9b3e&#34;&gt;&lt;a href=&#34;https://medium.com/@ctrlaltjustine/keeping-a-tidy-life-f01bbe2a9b3e&#34; target=&#34;_blank&#34;&gt;Keeping a tidy life&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Justine Arreche on how she manages her productivity tools: calendar, todo list; for all the activities in her life&lt;/p&gt;

&lt;p&gt;Tags: justine-arreche, productivity, management, calendar, todo-list, activity, time-management&lt;/p&gt;

&lt;p&gt;Id: e799c860-7a23-11e8-9f75-0242ac110002
Read: Wed, 27 Jun 2018 16:05:26 +0000&lt;/p&gt;

&lt;h2 id=&#34;to-understand-rising-inequality-consider-the-janitors-at-two-top-companies-then-and-now-https-www-nytimes-com-2017-09-03-upshot-to-understand-rising-inequality-consider-the-janitors-at-two-top-companies-then-and-now-html&#34;&gt;&lt;a href=&#34;https://www.nytimes.com/2017/09/03/upshot/to-understand-rising-inequality-consider-the-janitors-at-two-top-companies-then-and-now.html&#34; target=&#34;_blank&#34;&gt;To Understand Rising Inequality, Consider the Janitors at Two Top Companies, Then and Now&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Neil Irwin on inequality, explaining the professional career of two janitors at two different companies, in a different period of time.&lt;/p&gt;

&lt;p&gt;Tags: neil-irwin, inequality, kodak, apple, janitor, mercer, drucker, management, career-management, career, cto, cio&lt;/p&gt;

&lt;p&gt;Id: f66efafe-7a23-11e8-ae3d-0242ac110002
Read: Wed, 27 Jun 2018 16:05:51 +0000&lt;/p&gt;

&lt;h2 id=&#34;episode-8-interview-with-ryan-dahl-creator-of-node-js-https-www-mappingthejourney-com-single-post-2017-08-31-episode-8-interview-with-ryan-dahl-creator-of-nodejs&#34;&gt;&lt;a href=&#34;https://www.mappingthejourney.com/single-post/2017/08/31/Episode-8-Interview-with-Ryan-Dahl-Creator-of-Nodejs&#34; target=&#34;_blank&#34;&gt;Episode 8: Interview with Ryan Dahl, Creator of Node.js&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read [the transcription of] this interview, to Ryan Dahl.&lt;/p&gt;

&lt;p&gt;In it, he describes his view of Node.js and how it is not well-suited for building massive web servers, but could be appropriate for web applications&lt;/p&gt;

&lt;p&gt;Tags: ryan-dahl, go, microservice, web-app, interview, podcast, web-server, go, golang&lt;/p&gt;

&lt;p&gt;Id: 03cbbfca-7a24-11e8-927a-0242ac110002
Read: Wed, 27 Jun 2018 16:06:13 +0000&lt;/p&gt;

&lt;h2 id=&#34;the-recovering-programmer-http-prog21-dadgum-com-56-html&#34;&gt;&lt;a href=&#34;http://prog21.dadgum.com/56.html&#34; target=&#34;_blank&#34;&gt;The Recovering Programmer&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by James Hague on the user-centric vision and how he faces the problems related to programming&lt;/p&gt;

&lt;p&gt;Tags: programming, user-centric, vision, game, assembler, james-hague, recovering-programmer&lt;/p&gt;

&lt;p&gt;Id: 0db84e2c-7a24-11e8-ac3c-0242ac110002
Read: Wed, 27 Jun 2018 16:06:30 +0000&lt;/p&gt;

&lt;h2 id=&#34;we-who-value-simplicity-have-built-incomprehensible-machines-http-prog21-dadgum-com-139-html&#34;&gt;&lt;a href=&#34;http://prog21.dadgum.com/139.html&#34; target=&#34;_blank&#34;&gt;We Who Value Simplicity Have Built Incomprehensible Machines&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by  James Hague on examples of libraries that went wrong. How we should have said &amp;lsquo;no&amp;rsquo; early on instead of accepting it. A blog post about simplicity&lt;/p&gt;

&lt;p&gt;Tags: james-hague, simplicity, library, complexity, example&lt;/p&gt;

&lt;p&gt;Id: 192eae72-7a24-11e8-bc6c-0242ac110002
Read: Wed, 27 Jun 2018 16:06:49 +0000&lt;/p&gt;

&lt;h2 id=&#34;rapid-release-at-massive-scale-https-code-facebook-com-posts-270314900139291-rapid-release-at-massive-scale&#34;&gt;&lt;a href=&#34;https://code.facebook.com/posts/270314900139291/rapid-release-at-massive-scale/&#34; target=&#34;_blank&#34;&gt;Rapid release at massive scale&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Tags:&lt;/p&gt;

&lt;p&gt;Id: 24c02266-7a24-11e8-bddd-0242ac110002
Read: Wed, 27 Jun 2018 16:07:08 +0000&lt;/p&gt;

&lt;h2 id=&#34;having-a-work-wife-or-work-husband-is-good-for-your-career-https-www-linkedin-com-pulse-having-work-wife-husband-good-your-career-rebecca-holman&#34;&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/having-work-wife-husband-good-your-career-rebecca-holman&#34; target=&#34;_blank&#34;&gt;Having a &amp;ldquo;work wife&amp;rdquo; or &amp;ldquo;work husband&amp;rdquo; is good for your career&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Rebecca Holman explaining what is a work spouse (i.e., a trusted equal to bounce off ideas, discuss, advance together). Not a mentor, not a trusted boss, not someone reporting to you.&lt;/p&gt;

&lt;p&gt;Explains some of the benefits of finding that role.&lt;/p&gt;

&lt;p&gt;Tags: rebecca-holman, work-wife, work-husband, work-spouse, team-management, work, job, pairing, mentor&lt;/p&gt;

&lt;p&gt;Id: 3136db02-7a24-11e8-b84e-0242ac110002
Read: Wed, 27 Jun 2018 16:07:29 +0000&lt;/p&gt;

&lt;h2 id=&#34;rest-apis-are-rest-in-peace-apis-long-live-graphql-https-medium-freecodecamp-org-rest-apis-are-rest-in-peace-apis-long-live-graphql-d412e559d8e4&#34;&gt;&lt;a href=&#34;https://medium.freecodecamp.org/rest-apis-are-rest-in-peace-apis-long-live-graphql-d412e559d8e4&#34; target=&#34;_blank&#34;&gt;REST APIs are REST-in-Peace APIs. Long Live GraphQL.&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article about GraphQL and its comparison to REST APIs&lt;/p&gt;

&lt;p&gt;Tags: graphql, rest, api, data, comparison, samer-buna&lt;/p&gt;

&lt;p&gt;Id: 3df70628-7a24-11e8-9c3c-0242ac110002
Read: Wed, 27 Jun 2018 16:07:51 +0000&lt;/p&gt;

&lt;h2 id=&#34;history-of-lisp-http-www-formal-stanford-edu-jmc-history-lisp-lisp-html&#34;&gt;&lt;a href=&#34;http://www-formal.stanford.edu/jmc/history/lisp/lisp.html&#34; target=&#34;_blank&#34;&gt;History of Lisp&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this paper by John McCarthy explaining the history of lisp&lt;/p&gt;

&lt;p&gt;Tags: john-mccarthy, lisp, invention, language, list-processing, s-expression, m-expression, data, code, lisp-dialect, fortran, ibm&lt;/p&gt;

&lt;p&gt;Id: 492eebb4-7a24-11e8-bcec-0242ac110002
Read: Wed, 27 Jun 2018 16:08:10 +0000&lt;/p&gt;

&lt;h2 id=&#34;software-development-450-words-per-minute-https-www-vincit-fi-en-blog-software-development-450-words-per-minute&#34;&gt;&lt;a href=&#34;https://www.vincit.fi/en/blog/software-development-450-words-per-minute/&#34; target=&#34;_blank&#34;&gt;Software development 450 words per minute&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article in which Tuukka Ojala explains how his tools for a (blind) software developer: the screen reader, the browser, the braille reader&lt;/p&gt;

&lt;p&gt;Tags: tuukka-ojala, blindness, accesibility, browser, screen-reader, braille-reader, braille, disability&lt;/p&gt;

&lt;p&gt;Id: 54e4e076-7a24-11e8-abd6-0242ac110002
Read: Wed, 27 Jun 2018 16:08:29 +0000&lt;/p&gt;

&lt;h2 id=&#34;compare-your-efforts-30-vs-3000-loc-for-very-simple-mean-app-http-blog-allcountjs-com-post-128771961651-compare-efforts&#34;&gt;&lt;a href=&#34;http://blog.allcountjs.com/post/128771961651/compare-efforts&#34; target=&#34;_blank&#34;&gt;Compare your efforts: 30 vs 3000 LOC for very simple MEAN app&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article that explains the difference between business value and technical value: a feature for the business could be very valuable but technically costly; also the other way around: they are independent variables.&lt;/p&gt;

&lt;p&gt;Also explains that some value in development can be obtained quicker by using a framework, such as the tool that allcountjs provides: 30 lines to generate the equivalent business features to 3000 lines&lt;/p&gt;

&lt;p&gt;Tags: allcountjs, mean, comparison, crud, framework, javascript, frontend, productivity, business-value, technical-value, cost&lt;/p&gt;

&lt;p&gt;Id: 5eea69ce-7a24-11e8-8842-0242ac110002
Read: Wed, 27 Jun 2018 16:08:46 +0000&lt;/p&gt;

&lt;h2 id=&#34;github-integration-https-medium-com-leanpub-github-integration-6f6d81847230&#34;&gt;&lt;a href=&#34;https://medium.com/@leanpub/github-integration-6f6d81847230&#34; target=&#34;_blank&#34;&gt;GitHub Integration&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article explaining how to integrate leanpub with github: write your book (e.g., in markdown) and store it in git, then publish automatically to leanpub&lt;/p&gt;

&lt;p&gt;Tags: leanpub, github, integration, self-publishing, publishing, book, tool, toolchain&lt;/p&gt;

&lt;p&gt;Id: 699d067e-7a24-11e8-9962-0242ac110002
Read: Wed, 27 Jun 2018 16:09:04 +0000&lt;/p&gt;

&lt;h2 id=&#34;wysiwtf-https-alistapart-com-column-wysiwtf&#34;&gt;&lt;a href=&#34;https://alistapart.com/column/wysiwtf&#34; target=&#34;_blank&#34;&gt;WYSIWTF&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Karen McGrane explaining the desktop publishing and the difference between writing and formatting for the web. Also, inline editing&lt;/p&gt;

&lt;p&gt;Tags: karen-mcgrane, editing, formatting, desktop-publishing, medium, wysiwyg&lt;/p&gt;

&lt;p&gt;Id: 7b5f342c-7a24-11e8-b858-0242ac110002
Read: Wed, 27 Jun 2018 16:09:34 +0000&lt;/p&gt;

&lt;h2 id=&#34;what-i-m-talking-about-when-i-talk-about-tdd-https-medium-com-ramtop-what-im-talking-about-when-i-talk-about-tdd-546a383468be&#34;&gt;&lt;a href=&#34;https://medium.com/@ramtop/what-im-talking-about-when-i-talk-about-tdd-546a383468be&#34; target=&#34;_blank&#34;&gt;What I’m talking about when I talk about TDD&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Uberto Barbini in which he describes his re-discovery of TDD as a tool to design&lt;/p&gt;

&lt;p&gt;Tags: uberto-barbini, tdd, rediscovery, kent-beck, test-driven-development&lt;/p&gt;

&lt;p&gt;Id: 866b41b2-7a24-11e8-9c54-0242ac110002
Read: Wed, 27 Jun 2018 16:09:52 +0000&lt;/p&gt;

&lt;h2 id=&#34;se-radio-episode-273-steve-mcconnell-on-software-estimation-http-www-se-radio-net-2016-11-se-radio-episode-273-steve-mcconnell-on-software-estimation&#34;&gt;&lt;a href=&#34;http://www.se-radio.net/2016/11/se-radio-episode-273-steve-mcconnell-on-software-estimation/&#34; target=&#34;_blank&#34;&gt;SE-Radio Episode 273: Steve McConnell on Software Estimation&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Sven Johann interviews Steve McConnell about software estimation and planning.&lt;/p&gt;

&lt;p&gt;Talks about intrinsic risk management and extrinsic risk management&lt;/p&gt;

&lt;p&gt;Explains that you should manage the risk so the most uncertain is tackled in the beginning. At the retro (following the demo), you get risk identification (as root cause analysis based on not delivering as expected)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The goal of Agile was not to be able to change all the time, but to adapt to change&lt;/p&gt;

&lt;p&gt;Embrace change&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: cone-of-uncertainty, agile, project-management, risk, sven-johann, steve-mcconnell, iteration, scrum, risk-identification&lt;/p&gt;

&lt;p&gt;Id: 9c543506-7a24-11e8-8c9b-0242ac110002
Read: Wed, 27 Jun 2018 16:10:29 +0000&lt;/p&gt;

&lt;h2 id=&#34;software-psychology-with-bjorn-freeman-benson-https-softwareengineeringdaily-com-2017-03-28-software-psychology-with-bjorn-freeman-benson&#34;&gt;&lt;a href=&#34;https://softwareengineeringdaily.com/2017/03/28/software-psychology-with-bjorn-freeman-benson/&#34; target=&#34;_blank&#34;&gt;Software Psychology with Bjorn Freeman Benson&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve listened to this podcast on psychology&lt;/p&gt;

&lt;p&gt;Tags: software-engineering-daily, bjorn-benson, psychology, walled-garden&lt;/p&gt;

&lt;p&gt;Id: a90cf1ac-7a24-11e8-a69e-0242ac110002
Read: Wed, 27 Jun 2018 16:10:50 +0000&lt;/p&gt;

&lt;h2 id=&#34;using-cqrs-to-make-controllers-lean-with-derek-comartin-https-softwareengineeringdaily-com-2017-03-10-using-cqrs-to-make-controllers-lean-with-derek-comartin&#34;&gt;&lt;a href=&#34;https://softwareengineeringdaily.com/2017/03/10/using-cqrs-to-make-controllers-lean-with-derek-comartin/&#34; target=&#34;_blank&#34;&gt;Using CQRS to Make Controllers Lean with Derek Comartin&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve listened to this podcast on CQRS&lt;/p&gt;

&lt;p&gt;Tags: cqrs, derek-comartin, command-query-responsibility-segregation, greg-young, udi-dahan, red-book, ddd, domain-driven-design, podcast, software-engineering-daily&lt;/p&gt;

&lt;p&gt;Id: b2056db6-7a24-11e8-97d3-0242ac110002
Read: Wed, 27 Jun 2018 16:11:05 +0000&lt;/p&gt;

&lt;h2 id=&#34;elm-in-production-25-000-lines-later-https-functional-works-hub-com-blog-elm-in-production-25-000-lines-later&#34;&gt;&lt;a href=&#34;https://functional.works-hub.com/blog/Elm-In-Production-25-000-Lines-Later&#34; target=&#34;_blank&#34;&gt;Elm In Production: 25,000 Lines Later&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Christian Charukiewicz explaining how he started a new project and a new feature in Elm. How he explained this new technology to his teammates and how it is going now.&lt;/p&gt;

&lt;p&gt;Explains the pros and cons for the language.&lt;/p&gt;

&lt;p&gt;Tags: christian-charukiewicz, elm, compiler, experience-report, frontend, functional-language, functional-programming&lt;/p&gt;

&lt;p&gt;Id: bc6e1190-7a24-11e8-b19a-0242ac110002
Read: Wed, 27 Jun 2018 16:11:23 +0000&lt;/p&gt;

&lt;h2 id=&#34;growing-up-with-alexa-https-www-technologyreview-com-s-608430-growing-up-with-alexa&#34;&gt;&lt;a href=&#34;https://www.technologyreview.com/s/608430/growing-up-with-alexa/&#34; target=&#34;_blank&#34;&gt;Growing Up with Alexa&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Tags:&lt;/p&gt;

&lt;p&gt;Id: c2416c52-7a24-11e8-b692-0242ac110002
Read: Wed, 27 Jun 2018 16:11:33 +0000&lt;/p&gt;

&lt;h2 id=&#34;jony-s-patience-https-medium-com-mkruz-jony-s-patience-670d5a3dc128&#34;&gt;&lt;a href=&#34;https://medium.com/@mkruz/jony-s-patience-670d5a3dc128&#34; target=&#34;_blank&#34;&gt;Jony’s Patience&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Mike Kruzeniski explaining part of John Ive career at Apple and explaining part of the design process the Apple Watch had.&lt;/p&gt;

&lt;p&gt;Tags: ux, design, apple, watch, john-ive, mike-kruzeniski, career, career-management&lt;/p&gt;

&lt;p&gt;Id: cb789e76-7a24-11e8-bdb2-0242ac110002
Read: Wed, 27 Jun 2018 16:11:48 +0000&lt;/p&gt;

&lt;h2 id=&#34;the-four-month-bug-jvm-statistics-cause-garbage-collection-pauses-http-www-evanjones-ca-jvm-mmap-pause-html&#34;&gt;&lt;a href=&#34;http://www.evanjones.ca/jvm-mmap-pause.html&#34; target=&#34;_blank&#34;&gt;The Four Month Bug: JVM statistics cause garbage collection pauses&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this blog post by Evan Jones as an example of unknown unknown&lt;/p&gt;

&lt;p&gt;Tags: evan-jones, unknown-unknown, java, mmap, garbage-collector, pause, unknown&lt;/p&gt;

&lt;p&gt;Id: d4b6a596-7a24-11e8-b245-0242ac110002
Read: Wed, 27 Jun 2018 16:12:04 +0000&lt;/p&gt;

&lt;h2 id=&#34;the-pleasure-of-building-big-things-http-rc3-org-2015-03-24-the-pleasure-of-building-big-things&#34;&gt;&lt;a href=&#34;http://rc3.org/2015/03/24/the-pleasure-of-building-big-things/&#34; target=&#34;_blank&#34;&gt;The pleasure of building big things&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article explaining that big projects take time to be created.&lt;/p&gt;

&lt;p&gt;The temptation is all around us, to accelerate feedback loops, create products more quickly, release earlier. That has the tension of being &amp;lsquo;half-baked&amp;rsquo; products, that have not achieved the minimum level of loveable feature and, thus, not used.&lt;/p&gt;

&lt;p&gt;Tags: time, focus, rafe-colburn, product, lean&lt;/p&gt;

&lt;p&gt;Id: dddee4c6-7a24-11e8-b11f-0242ac110002
Read: Wed, 27 Jun 2018 16:12:19 +0000&lt;/p&gt;

&lt;h2 id=&#34;choose-boring-technology-http-mcfunley-com-choose-boring-technology&#34;&gt;&lt;a href=&#34;http://mcfunley.com/choose-boring-technology/&#34; target=&#34;_blank&#34;&gt;Choose Boring Technology&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Dan McKinley about how choosing boring (i.e., well-proven) technology can help you focus on your company goals and how &amp;lsquo;the best tool for the job&amp;rsquo; is not always the case, as the job depends on who you ask: developers, ops, business.&lt;/p&gt;

&lt;p&gt;Tags: dan-mckinley, boring, technology, proven, production-ready, development, operations, focus, business, goal, best-tool-for-the-job&lt;/p&gt;

&lt;p&gt;Id: e91565cc-7a24-11e8-8849-0242ac110002
Read: Wed, 27 Jun 2018 16:12:38 +0000&lt;/p&gt;

&lt;h2 id=&#34;exclusive-here-s-the-full-10-page-anti-diversity-screed-circulating-internally-at-google-updated-https-gizmodo-com-exclusive-heres-the-full-10-page-anti-diversity-screed-1797564320&#34;&gt;&lt;a href=&#34;https://gizmodo.com/exclusive-heres-the-full-10-page-anti-diversity-screed-1797564320&#34; target=&#34;_blank&#34;&gt;Exclusive: Here&amp;rsquo;s The Full 10-Page Anti-Diversity Screed Circulating Internally at Google [Updated]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I have read this document&lt;/p&gt;

&lt;p&gt;Tags: google, scandal, sexism&lt;/p&gt;

&lt;p&gt;Id: fe723d14-7a24-11e8-ab5c-0242ac110002
Read: Wed, 27 Jun 2018 16:13:14 +0000&lt;/p&gt;

&lt;h2 id=&#34;check-your-work-https-8thlight-com-blog-connor-mendenhall-2013-10-31-check-your-work-html&#34;&gt;&lt;a href=&#34;https://8thlight.com/blog/connor-mendenhall/2013/10/31/check-your-work.html&#34; target=&#34;_blank&#34;&gt;Check Your Work&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Tags:&lt;/p&gt;

&lt;p&gt;Id: 172e94e2-7a25-11e8-86cc-0242ac110002
Read: Wed, 27 Jun 2018 16:13:55 +0000&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in May 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/05/01/self-study/</link>
      <pubDate>Sun, 01 May 2016 00:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/05/01/self-study/</guid>
      <description>

&lt;h2 id=&#34;being-a-developer-after-40&#34;&gt;Being A Developer After 40&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.freecodecamp.com/being-a-developer-after-40-3c5dd112210c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Adrian Kosmaczewski on the required topics to be a developer at age 40 and keep enjoying it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forget The Hype&lt;/li&gt;
&lt;li&gt;Choose Your Galaxy Wisely&lt;/li&gt;
&lt;li&gt;Learn About Software History&lt;/li&gt;
&lt;li&gt;Keep on Learning&lt;/li&gt;
&lt;li&gt;Teach&lt;/li&gt;
&lt;li&gt;Workplaces Suck&lt;/li&gt;
&lt;li&gt;Know Your Worth&lt;/li&gt;
&lt;li&gt;Send The Elevator Down&lt;/li&gt;
&lt;li&gt;LLVM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He references galaxy, the big stack you are positioned (JVM, .net, PHP, etc). He makes a special mention of the LLVM&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Take conscious decisions in your life. Be aware of your actions and their effect. Do not blush or be embarrased for changing your opinions. Say “I’m sorry” when required. Listen. Do not be a hotshot. Have integrity and self-respect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recommends these books:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dealers of Lightning by Michael A. Hiltzik&lt;/li&gt;
&lt;li&gt;Revolution in the Valley by Andy Hertzfeld&lt;/li&gt;
&lt;li&gt;The Cathedral and the Bazaar by Eric S. Raymond&lt;/li&gt;
&lt;li&gt;The Success of Open Source by Steven Weber&lt;/li&gt;
&lt;li&gt;The Old New Thing by Raymond Chen&lt;/li&gt;
&lt;li&gt;The Mythical Man Month by Frederick P. Brooks Jr.&lt;/li&gt;
&lt;li&gt;Peopleware by Tom DeMarco and Tim Lister&lt;/li&gt;
&lt;li&gt;The Psychology of Software Programming by Gerald M. Weinberg&lt;/li&gt;
&lt;li&gt;Facts and Fallacies of Software Engineering by Robert L. Glass&lt;/li&gt;
&lt;li&gt;The Design of Everyday Things by Don Norman&lt;/li&gt;
&lt;li&gt;Agile!: The Good, the Hype and the Ugly by Bertrand Meyer&lt;/li&gt;
&lt;li&gt;Rework by Jason Fried and David Heinemeier Hansson&lt;/li&gt;
&lt;li&gt;Geekonomics by David Rice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: adrian-kosmaczewski, career, profession, age, galaxy, long-term, book&lt;/p&gt;

&lt;h2 id=&#34;firing-people&#34;&gt;Firing people&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://zachholman.com/talk/firing-people&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Zach Holman on firing people at your current work, both from the perspective of the employee (fired), employer, coworker.&lt;/p&gt;

&lt;p&gt;Also explains his personal experience of being fired from Github.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You’ll know the difference between doing far and away your best work, and doing work that is still good, but just nominally better than what you’ve been doing. Once you catch yourself adjusting to that incremental progression… maybe it’s time to leave, to change things up&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: zach-holman, github, team-management, firing, coworker, employee, employer, job, relationship, next&lt;/p&gt;

&lt;h2 id=&#34;10-design-principles-for-developers&#34;&gt;10 design principles — for developers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@nirbenita/the-10-design-heuristics-for-developers-1e70a9dc58a7&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains what are the 10 design principles for programmers, as outlined by Jakob Nielsen. The article itself is by Nir Benita&lt;/p&gt;

&lt;p&gt;Tags: design-principle, ux, jakob-nielsen, nir-benita, usability, testing, list&lt;/p&gt;

&lt;h2 id=&#34;design-patterns-coming-full-circle-part-two&#34;&gt;Design Patterns — Coming Full Circle, Part Two&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/swlh/design-patterns-coming-full-circle-part-two-ced2c69e4724#.x8ud7eeqm&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains how design patterns can be observed and then discovered and shows a list of four patterns dot working with data, by flux.io. Article by Jen Carlile&lt;/p&gt;

&lt;p&gt;Tags: design-pattern, data, pattern, flux, flux-io, pattern-catalog, jen-carlile&lt;/p&gt;

&lt;h2 id=&#34;why-i-m-ending-my-github-streak-after-844-days&#34;&gt;Why I’m Ending my Github Streak after 844 Days&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@karan/why-i-m-ending-my-github-streak-after-844-days-80fd014dc8df&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Karan Goel on the mechanics of following a pattern, of an activity sliced in small parts (1 problem a day or half an hour) and how this can be counterproductive sometimes.&lt;/p&gt;

&lt;p&gt;Discusses ROI of this type of activity at the beginning of your career and later.&lt;/p&gt;

&lt;p&gt;Tags: karan-goel, github, streak, python, code, everyday, practice, deliberate-practice, career, career-management&lt;/p&gt;

&lt;h2 id=&#34;good-lessons-learned-from-past-jobs&#34;&gt;Good lessons learned from past jobs&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.kartones.net/post/good-lessons-learned-from-past-jobs/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Diego &amp;lsquo;Kartones&amp;rsquo; on a synopsis of his work experience, job by job and what he has learned on each job.&lt;/p&gt;

&lt;p&gt;Tags: diego-kartones, job, professional-career, career&lt;/p&gt;

&lt;h2 id=&#34;too-much-work-in-progress&#34;&gt;Too Much Work In Progress&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://monospacedmonologues.com/post/144137568985/too-much-work-in-progress&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Samir Talwar on factors that indicate work in progress.&lt;/p&gt;

&lt;p&gt;Tags: wip, work-in-progress, list, samir-talwar&lt;/p&gt;

&lt;h2 id=&#34;testdouble&#34;&gt;TestDouble&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.martinfowler.com/bliki/TestDouble.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Martin Fowler describing the test doubles that Gerard Meszaros describes in xUnit Test Patterns.&lt;/p&gt;

&lt;p&gt;Tags: test-double, martin-fowler, gerard-meszaros, stub, fake, mock, dummy, spy, xunit, junit, pattern, test-pattern&lt;/p&gt;

&lt;h2 id=&#34;scaling-to-12-million-concurrent-connections-how-migratorydata-did-it&#34;&gt;Scaling to 12 Million Concurrent Connections: How MigratoryData Did It&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://mrotaru.wordpress.com/2013/10/10/scaling-to-12-million-concurrent-connections-how-migratorydata-did-it/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mihai Rotaru on how MigratoryData scaled to 12 million concurrent connections in a 1U server. They explain what optimizations they did in order to achieve this.&lt;/p&gt;

&lt;p&gt;Tags: migratorydata, mihai-rotaru, concurrent-connection, 1u-server, scalability, websocket&lt;/p&gt;

&lt;h2 id=&#34;do-what-you-love&#34;&gt;Do what you love&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/do-what-you-love-jorge-diaz&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jorge Diaz on doing what takes you out of your comfort zone, changing careers, and life-work in general.&lt;/p&gt;

&lt;p&gt;Cites this &lt;a href=&#34;https://www.ted.com/talks/scott_dinsmore_how_to_find_work_you_love/transcript?language=en&#34; target=&#34;_blank&#34;&gt;TED talk: How to find work you love&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: jorge-diaz, work, life, career, comfort-zone, scott-dinsmore, career-management&lt;/p&gt;

&lt;h2 id=&#34;jhipster-the-best-way-to-breed-a-new-app&#34;&gt;JHipster - The best way to breed a new app&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/olbpetersson/jhipster-the-best-way-to-breed-a-new-app&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Ola Petersson, where he describes the architecture and contents of the jHipster, its pros and cons.&lt;/p&gt;

&lt;p&gt;Tags: jhipster, ola petersson, java, code-generation, code-generator, microservice&lt;/p&gt;

&lt;h2 id=&#34;how-going-to-coding-events-helped-me-get-an-awesome-job&#34;&gt;How going to coding events helped me get an awesome job&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.freecodecamp.com/networking-at-meet-ups-getting-hired-f0f7c4f4681a&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Gwendolyn Faraday on how to kickstart a career in web development, attending events, pairing and networking. That netted her some interviews to start programming for a living.&lt;/p&gt;

&lt;p&gt;Tags: networking, gwendolyn-faraday, event, job, learn-to-code&lt;/p&gt;

&lt;h2 id=&#34;maze-generation-algorithm-recap&#34;&gt;Maze Generation: Algorithm Recap&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://weblog.jamisbuck.org/2011/2/7/maze-generation-algorithm-recap&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of maze-generation algorithms by Jamis Buck. Including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;recursive backtracker&lt;/li&gt;
&lt;li&gt;Eller’s algorithm&lt;/li&gt;
&lt;li&gt;Kruskal’s algorithm&lt;/li&gt;
&lt;li&gt;Prim’s algorithm&lt;/li&gt;
&lt;li&gt;recursive division algorithm&lt;/li&gt;
&lt;li&gt;Aldous-Broder algorithm&lt;/li&gt;
&lt;li&gt;Wilson’s algorithm&lt;/li&gt;
&lt;li&gt;Hunt-and-Kill algorithm&lt;/li&gt;
&lt;li&gt;Growing Tree algorithm&lt;/li&gt;
&lt;li&gt;Binary Tree algorithm&lt;/li&gt;
&lt;li&gt;Sidewinder algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: recursive-backtracker,eller-algorithm,kruskal-algorithm,prim-algorithm,recursive-division-algorithm,aldous-broder-algorithm,wilson-algorithm,hunt-and-kill-algorithm,growing-tree-algorithm,binary-tree-algorithm,sidewinder-algorithm, jamis-buck, maze, maze-generation, algorithm, list&lt;/p&gt;

&lt;h2 id=&#34;the-poverty-of-constraints&#34;&gt;The Poverty of Constraints&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://weblog.jamisbuck.org/2016/3/19/poverty-of-constraints.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jamis Buck on interpreting two Korean proverbs in the world of software:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A dutiful son comes from a poor home&lt;/li&gt;
&lt;li&gt;A poor house has many children&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: proverb, korea, philosophy, software, constraint, jamis-buck&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in August 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</link>
      <pubDate>Sun, 02 Aug 2015 21:45:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</guid>
      <description>

&lt;h2 id=&#34;humble-object&#34;&gt;Humble Object&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the &lt;a href=&#34;http://xunitpatterns.com/Humble%20Object.html&#34; target=&#34;_blank&#34;&gt;Humble Object&lt;/a&gt; list of patterns, by Gerard Meszaros, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;humble dialog&lt;/li&gt;
&lt;li&gt;humble executable&lt;/li&gt;
&lt;li&gt;humble transaction controller&lt;/li&gt;
&lt;li&gt;humble container adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: pattern, gerard-meszaros&lt;/p&gt;

&lt;h2 id=&#34;how-you-know&#34;&gt;How you know&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve reread &lt;a href=&#34;http://www.paulgraham.com/know.html&#34; target=&#34;_blank&#34;&gt;this small essay&lt;/a&gt; by Paul Graham on storing information in our heads, based on the context. On the importance of rereading, to add more contexts to the initial one.&lt;/p&gt;

&lt;p&gt;Tags: paul-graham, reread, read&lt;/p&gt;

&lt;h2 id=&#34;protected-variation-the-importance-of-being-closed&#34;&gt;Protected Variation: The Importance of Being Closed&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.martinfowler.com/ieeeSoftware/protectedVariation.pdf&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Craig Larman in the magazine IEEE Software &amp;gt; Design.&lt;/p&gt;

&lt;p&gt;Discusses Information Hiding, Protected Variation and the Open-Closed Principle.&lt;/p&gt;

&lt;p&gt;Tags: craig-larman, ocp, open-closed principle, design, information-hiding, ih, protected-variation, pv,&lt;/p&gt;

&lt;h2 id=&#34;lambda-javascript-micro-services-on-aws&#34;&gt;Lambda, Javascript Micro-Services on AWS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.jayway.com/2014/12/18/lambda-javascript-micro-services-aws/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; explaining how to deploy a microservice on AWS on top of Lambda. Written by Anders Janmyr&lt;/p&gt;

&lt;p&gt;The cool thing is that you get billed by milliseconds!&lt;/p&gt;

&lt;p&gt;Tags: anders-janmyr, devops, microservice, lambda, aws&lt;/p&gt;

&lt;h2 id=&#34;migrating-to-clojure-so-much-fn&#34;&gt;Migrating To Clojure. So Much Fn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=Hv4slaRydRM&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Jan Stępień where he talks about his experience on migrating part of an application to clojure from ruby on rails&lt;/p&gt;

&lt;p&gt;Tags: jan-stepien, clojure, migration, ruby-on-rails, talk, wrocloverb&lt;/p&gt;

&lt;h2 id=&#34;te-recomiendo-escribir-en-un-blog&#34;&gt;Te recomiendo escribir en un blog&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/07/te-recomiendo-escribir-en-un-blog/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; from Carlos Blé in which he recommends writing a blog, on things we discover along the way. (Spanish)&lt;/p&gt;

&lt;p&gt;Tags: carlos-ble, meta, blog, long-way&lt;/p&gt;

&lt;h2 id=&#34;we-need-enough-technical-debt&#34;&gt;We need enough technical debt&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.svpino.com/2015/08/05/we-need-enough-technical-debt&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why we need to accumulate a bit of technical debt, as a way of being less perfectionist and deliver more features / value to our stakeholders. Written by Santiago L. Valdarrama.&lt;/p&gt;

&lt;p&gt;Tags: santiago-valdarrama, technical-debt, perfectionism&lt;/p&gt;

&lt;h2 id=&#34;escribe-mejores-tests-en-javascript&#34;&gt;Escribe mejores tests en Javascript&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://carlosvillu.com/escribe-mejores-tests-en-javascript/&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of tips to write better javascript tests (Spanish). By Carlos Villuendas&lt;/p&gt;

&lt;p&gt;Tags: carlos-villuendas, javascript, test&lt;/p&gt;

&lt;h2 id=&#34;down-the-rabbit-hole&#34;&gt;Down the Rabbit Hole&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole&#34; target=&#34;_blank&#34;&gt;this wiki&lt;/a&gt; page on how to tune some aspects of the server hotspot JVM, by Brett Wooldridge&lt;/p&gt;

&lt;p&gt;Tags: performance, jvm, hotspot, inline, bytecode, brett-wooldridge&lt;/p&gt;

&lt;h2 id=&#34;xp-manchester-lightning-talks-2015-live-broadcast&#34;&gt;XP Manchester Lightning Talks 2015 Live broadcast&lt;/h2&gt;

&lt;p&gt;I have watched the first two &lt;a href=&#34;https://www.youtube.com/watch?v=VD4UEW2i7hU&#34; target=&#34;_blank&#34;&gt;lightning talks&lt;/a&gt; from XP Manchester, edition number 61.&lt;/p&gt;

&lt;p&gt;Tags: lightning-talk, broadcast, simplicity, manchester, 2015&lt;/p&gt;

&lt;h2 id=&#34;counting-hash-collisions-with-the-birthday-paradox&#34;&gt;Counting hash collisions with the birthday paradox&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://matt.might.net/articles/counting-hash-collisions/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the birthday paradox, or the percentage of chance of people sharing the same birthday. This could be applied to hash function, as the title says, but is not included in the article. Written by Matt Might&lt;/p&gt;

&lt;h2 id=&#34;why-i-m-the-best-programmer-in-the-world&#34;&gt;Why I&amp;rsquo;m The Best Programmer In The World*&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/why-im-the-best-programmer-in-the-world/&#34; target=&#34;_blank&#34;&gt;this ironically-titled article&lt;/a&gt; by Jeff Atwood on humility and how to improve as a programmer.&lt;/p&gt;

&lt;p&gt;Tags: jeff-atwood&lt;/p&gt;

&lt;h2 id=&#34;the-key-to-giving-and-receiving-negative-feedback&#34;&gt;The Key to Giving and Receiving Negative Feedback&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/2015/08/the-key-to-giving-and-receiving-negative-feedback?&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joseph Grenny about how to give and receive negative feedback. It is exemplified by the plant manager who was expecting another kind of feedback from his subordinates and was surprised by their negative feedback.&lt;/p&gt;

&lt;p&gt;Tags: joseph-grenny, negative-feedback, feedback, by-example&lt;/p&gt;

&lt;h2 id=&#34;testing-clojure-web-applications-with-kerodon&#34;&gt;Testing Clojure web applications with Kerodon&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://semaphoreci.com/community/tutorials/testing-clojure-web-applications-with-kerodon&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; on how to test compojure-based applications with kerodon. Written by Nebojša Stričević&lt;/p&gt;

&lt;p&gt;Tags: nebojsa-stricevic, compojure, kerodon, clojure, testing, guide&lt;/p&gt;

&lt;h2 id=&#34;using-the-option-type-effectively&#34;&gt;Using The Option Type Effectively&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/uku-taht/2015/04/29/using-the-option-type-effectively.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how to use the &lt;code&gt;Option&lt;/code&gt; type (in rust), similar to &lt;code&gt;Optional&lt;/code&gt; in java or &lt;code&gt;Maybe&lt;/code&gt; in haskell. Written by Uku Taht.&lt;/p&gt;

&lt;p&gt;Tags: uku-taht, option, maybe, optional, rust&lt;/p&gt;

&lt;h2 id=&#34;when-should-you-think&#34;&gt;When Should You Think?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2014/03/11/when-to-think.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Robert C Martin on when to think and the hypothesis that TDD does not allow you to think before coding.&lt;/p&gt;

&lt;p&gt;Tags: tdd, robert-c-martin, design, hypothesis&lt;/p&gt;

&lt;h2 id=&#34;orthogonal-latin-squares-an-application-of-experiment-design-to-compiler-testing&#34;&gt;Orthogonal latin squares: an application of experiment design to compiler testing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://barbie.uta.edu/~mehra/20_an%20application%20of%20experiment%20design%20to%20compiler%20testing.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; by Robert Mandl on techniques that can be applied to reduce the burden of exhaustive testing to compilers. Preferring &amp;ldquo;surely all relevant distinct combinations&amp;rdquo; we can reduce the amount of testing. This paper tries to formalize the concept of &amp;ldquo;near-exhaustive testing&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: latin-square, robert-mandl, compiler, testing, near-exhaustive-testing, optimization, exhaustive-testing&lt;/p&gt;

&lt;p&gt;##  Practical Type System Benefits&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://themonadreader.files.wordpress.com/2014/04/nccb.pdf&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Neil Brown on benefits of the type system, with examples in haskell. He goes on to explore the benefits of involving the type-checker at compile time to remove type errors and ease the programming effort:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I find that several problems in Haskell can be solved by involving the type system
further: The trick is to involve the type system in ways that provide a big benefit
for the cost, but not going so far that the type system gets in the way of code
that you know &amp;ndash;but can’t easily prove to the compiler&amp;ndash; is safe&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve also learned the concept of the quasi-quoter: similar to a preprocessor, executed at compile time and type-checked&lt;/p&gt;

&lt;p&gt;Tags: neil-brown, quote, quasi-quoter, preprocessor, haskell, monad-reader&lt;/p&gt;

&lt;h2 id=&#34;clojurescript-and-the-blub-paradox&#34;&gt;ClojureScript and the Blub Paradox&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article comparing javascript and clojurescript using the fizzbuzz kata. There is a nice example of the pattern matching for the cases (i.e. &amp;ldquo;switch&amp;rdquo;) of the fizz, buzz. Written by Nate Wildermuth&lt;/p&gt;

&lt;p&gt;Tags: clojurescript, javascript, fizzbuzz, kata, nate-wildermuth&lt;/p&gt;

&lt;h2 id=&#34;no-malinterpretes-tu-carrera&#34;&gt;No malinterpretes tu carrera&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2011/02/no-malinterpretes-tu-carrera/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on (not) changing careers from programmer to designer, analyst, team manager. About the programmer&amp;rsquo;s passion and why not to misinterpret your career. Written by Carlos Blé. In Spanish.&lt;/p&gt;

&lt;p&gt;Tags: carlos-ble, career, programming, management, career-change&lt;/p&gt;

&lt;h2 id=&#34;just-haskell-or-nothing&#34;&gt;Just Haskell or Nothing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://cheecheeo.github.io/just_haskell_or_nothing.html&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; on packaging values in (Just a) or Nothing for possibly failed computations in haskell. Written by John Chee&lt;/p&gt;

&lt;p&gt;Tags: john-chee, haskell, just, nothing, maybe, functor&lt;/p&gt;

&lt;h2 id=&#34;tracking-joy-at-work&#34;&gt;Tracking Joy at Work&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://begriffs.com/posts/2015-03-15-tracking-joy-at-work.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about quantifying happiness at the office (or at work). Joe Nelson, the author of the article, uses the quantifying method described int the book &lt;a href=&#34;http://www.amazon.com/Experience-Sampling-Method-Measuring-Everyday/dp/1412925576/&#34; target=&#34;_blank&#34;&gt;Experience Sampling Method&lt;/a&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Experience_sampling_method&#34; target=&#34;_blank&#34;&gt;wikipedia page&lt;/a&gt;) by Hektner, Schmidt, Csikszentmihalyi.&lt;/p&gt;

&lt;p&gt;The last one, not coincidentally is the author of &lt;a href=&#34;http://www.amazon.com/Flow-The-Psychology-Optimal-Experience/dp/0061339202&#34; target=&#34;_blank&#34;&gt;Flow: The Psychology of Optimal Experience&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tags: mihaly-csikszentmihalyi, flow, quantification, data, experience-sampling, article, joe-nelson&lt;/p&gt;

&lt;h2 id=&#34;going-write-only&#34;&gt;Going &amp;ldquo;Write-Only&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://begriffs.com/posts/2015-04-20-going-write-only.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joe Nelson on going &amp;ldquo;write-only&amp;rdquo; on social media, blogs, news, etc, as opposed to read-only (only consuming media) or read-write (consuming and producing). He cites another programmer, &lt;a href=&#34;http://joey.hess.usesthis.com/&#34; target=&#34;_blank&#34;&gt;Joey Hess&lt;/a&gt; and about the quality and durability of your work.&lt;/p&gt;

&lt;p&gt;Tags: article, joe-nelson, write-only, social-media, reading, philosophy, thoreau, nietzsche, joey-hess&lt;/p&gt;

&lt;h2 id=&#34;create-a-static-site-with-hakyll-github-and-travis-ci&#34;&gt;Create a static site with Hakyll, Github and Travis CI&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://begriffs.com/posts/2014-08-12-create-static-site-with-hakyll-github.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how to create your blog with hakyll and travis ci. Written by Joe Nelson&lt;/p&gt;

&lt;p&gt;Travis ci is used to do continuous integration and automatically deploy each commit to production (github pages).&lt;/p&gt;

&lt;p&gt;Tags: hakyll, haskell, joe-nelson, meta, blog, continuous-deployment, github, github-pages, travis-ci&lt;/p&gt;

&lt;h2 id=&#34;falling-in-love-with-computer-science&#34;&gt;Falling in Love with Computer Science&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=haxusGuUyt4&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Kathy Pham, an American that discovered her passion, her love to computer science a few years ago. She tells the events around computer science from the beginning of college to the current moment.&lt;/p&gt;

&lt;p&gt;Tags: kathy-pham, passion, love, computer-science, autobiography, time-lapse, google-developers&lt;/p&gt;

&lt;h2 id=&#34;duck-typing&#34;&gt;Duck Typing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=h0rTF__RNo4&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Dan Grossman, part of the &lt;a href=&#34;https://www.coursera.org/course/proglang&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Programming Languages&amp;rdquo; MOOC&lt;/a&gt;, in which he explains what is a Duck Type and how to use (and abuse) them in ruby.&lt;/p&gt;

&lt;p&gt;Tags: ruby, dan-grossman, mooc, mooc-programming-languages&lt;/p&gt;

&lt;h2 id=&#34;not-so-private-clojure-functions&#34;&gt;Not-So-Private Clojure Functions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://christophermaier.name/blog/2011/04/30/not-so-private-clojure-functions&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining how to bypass private functions in clojure: either create a lambda or create a different namespace. Written by Christopher Maier&lt;/p&gt;

&lt;p&gt;Tags: private-variable, clojure, testing, joy-of-clojure, christopher-maier, private-function, namespace&lt;/p&gt;

&lt;h2 id=&#34;frege-and-clojure&#34;&gt;Frege (and Clojure)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://seancorfield.github.io/blog/2015/02/13/frege-and-clojure/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that tells the Pragmatic Programmer&amp;rsquo;s advice to learn a new language every year and the author (Sean Corfield) explains his trajectory learning them. He also cites the Lein plugin he&amp;rsquo;s built: &lt;code&gt;lein-fregec&lt;/code&gt; and how to connect clojure and frege (a.k.a JVM&amp;rsquo;s haskell).&lt;/p&gt;

&lt;p&gt;Tags: haskell, frege, jvm, clojure, ffi, pragmatic-programmer, advice, lein-fregec,  sean-corfield, comparison&lt;/p&gt;

&lt;h2 id=&#34;two-months-early-300k-under-budget&#34;&gt;Two months early. 300k under budget&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://thoughtworks.github.io/p2/issue09/two-months-early/&#34; target=&#34;_blank&#34;&gt;the tale&lt;/a&gt; of a Thoughtworks Project Manager who convinced his client to start using clojure to deliver a custom-made CMS. Written by Dave Elliman.&lt;/p&gt;

&lt;p&gt;Tags: dave-elliman, thoughtworks, project-manager, clojure, cms, microservice&lt;/p&gt;

&lt;h2 id=&#34;convince-your-boss-to-use-clojure&#34;&gt;Convince your boss to use Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.lispcast.com/convince-your-boss-to-use-clojure&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; by Eric Normand on how to convince your boss or your company to start using clojure.&lt;/p&gt;

&lt;p&gt;Tags: company, clojure, eric-normand, how-to, guide&lt;/p&gt;

&lt;h2 id=&#34;a-brief-introduction-to-prolog&#34;&gt;A brief introduction to Prolog&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://docs.google.com/presentation/d/1NAUo8nWLfNvvW3Wb7HJMunljjDJbzu7mo-5twKeGDvc/edit#slide=id.g63daf4745_0_56&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about a brief introduction to prolog and how to do web development in it. By Jaelle Scheuerman&lt;/p&gt;

&lt;p&gt;Tags: jaelle-scheuerman, prolog, web-development, rest, slide&lt;/p&gt;

&lt;h2 id=&#34;arrayzing-the-javascript-array-cheatsheet&#34;&gt;Arrayzing - The JavaScript array cheatsheet&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://gist.github.com/ourmaninamsterdam/1be9a5590c9cf4a0ab42&#34; target=&#34;_blank&#34;&gt;this cheatsheet&lt;/a&gt; for javascript arrays. Written by Justin Perry&lt;/p&gt;

&lt;p&gt;Tags: cheatsheet, array, javascript, gist, justin-perry&lt;/p&gt;

&lt;h2 id=&#34;some-words-on-lazy-evaluation-and-sharing&#34;&gt;Some words on lazy evaluation and sharing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://pseudo.fixme.fi/~opqdonut/blog/Some_words_on_lazy_evaluation_and_sharing.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; comparing the &lt;code&gt;fix&lt;/code&gt; definition with a hand-made one and its &amp;ldquo;sharing&amp;rdquo; problems. Written by Joel E. Kaasinen&lt;/p&gt;

&lt;p&gt;Tags: joel-kaasinen, haskell, fix, sharing, non-strictness, lazy-evaluation&lt;/p&gt;

&lt;h2 id=&#34;hammock-driven-development&#34;&gt;Hammock Driven Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=f84n5oFoZBc&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Rich Hickey. A few notes:&lt;/p&gt;

&lt;p&gt;A: identifying a problem that we&amp;rsquo;re trying to solve&lt;/p&gt;

&lt;p&gt;D: assessing if the proposed solution solves the problem&lt;/p&gt;

&lt;p&gt;the union of the features is not the purpose of the product / is not the product&lt;/p&gt;

&lt;p&gt;proramming is not completing features&lt;/p&gt;

&lt;p&gt;avoiding problems /= solving problems&lt;/p&gt;

&lt;p&gt;book: how to solve it - G. Polya. Practices &amp;amp; techniques for solving mathematic problems&lt;/p&gt;

&lt;p&gt;How to solve the problem&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;state the problem&lt;/li&gt;
&lt;li&gt;understand the problem:

&lt;ul&gt;
&lt;li&gt;what do you know: facts, context, constraints.&lt;/li&gt;
&lt;li&gt;what do you don&amp;rsquo;t know&lt;/li&gt;
&lt;li&gt;are there related problems? solutions to related problems. find an analogy: starting from scratch vs incremental step&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;be discerning&lt;/li&gt;
&lt;li&gt;more input, better output:

&lt;ul&gt;
&lt;li&gt;read about your domain problem, research papers (maybe ACM)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;tradeoffs:

&lt;ul&gt;
&lt;li&gt;find at least two options (ups and downs) to compare before taking a decision&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Focus time for programmers like alone time for kids. Hammock time is important mind&amp;rsquo;s eye time&lt;/p&gt;

&lt;p&gt;Waking mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;critical thinking&lt;/li&gt;
&lt;li&gt;analysis&lt;/li&gt;
&lt;li&gt;tactics&lt;/li&gt;
&lt;li&gt;prone to local maxima&lt;/li&gt;
&lt;li&gt;feed work to background mind&lt;/li&gt;
&lt;li&gt;analyze its products&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Background mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;making connections&lt;/li&gt;
&lt;li&gt;synthesis&lt;/li&gt;
&lt;li&gt;strategy&lt;/li&gt;
&lt;li&gt;abstracts, analogies&lt;/li&gt;
&lt;li&gt;solves most non-trivial problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;loading it: work it hard in the waking mind to be included in the background mind&lt;/p&gt;

&lt;p&gt;abstraction = software strategy&lt;/p&gt;

&lt;p&gt;tip: small answer is better than big answer (occam&amp;rsquo;s razor?)​&lt;/p&gt;

&lt;p&gt;Tags: rich-hickey, hammock-driven-development, background-mind, waking-mind, solve-problem, george-polya, book, analysis, design, talk&lt;/p&gt;

&lt;h2 id=&#34;parallelism-concurrency&#34;&gt;Parallelism /= Concurrency&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ghcmutterings.wordpress.com/2009/10/06/parallelism-concurrency/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the differences between parallelism and concurrency, with examples in the haskell compiler GHC. Written by &lt;a href=&#34;https://ghcmutterings.wordpress.com/author/simonmar/&#34; target=&#34;_blank&#34;&gt;simonmar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: haskell, concurrency, parallelism, ghc, simonmar, comparison&lt;/p&gt;

&lt;h2 id=&#34;parallelism-vs-concurrency&#34;&gt;Parallelism vs. Concurrency&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://wiki.haskell.org/Parallelism_vs._Concurrency&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt; from the haskell wiki.&lt;/p&gt;

&lt;p&gt;Tags: haskell, concurrency, parallelism, ghc, comparison&lt;/p&gt;

&lt;h2 id=&#34;writing-code-that-writes-code-with-hack-codegen&#34;&gt;Writing code that writes code — with Hack Codegen&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://code.facebook.com/posts/1624644147776541/writing-code-that-writes-code-with-hack-codegen/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about metaprogramming (code that generates code) in PHP. Written by Alejandro Marcu.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve arrived to this from this tweet:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-cards=&#34;hidden&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;This is what happens when your programming language doesn&amp;#39;t have macros &lt;a href=&#34;https://t.co/ZfsEe2EJIj&#34;&gt;https://t.co/ZfsEe2EJIj&lt;/a&gt;. Yuck.&lt;/p&gt;&amp;mdash; David Nolen (@swannodette) &lt;a href=&#34;https://twitter.com/swannodette/status/634495099607613440&#34;&gt;August 20, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Tags: alejandro-marcu, metaprogramming, php, macro, lisp, clojure&lt;/p&gt;

&lt;h2 id=&#34;how-katas-can-help-you-learn&#34;&gt;How katas can help you learn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://codurance.com/2015/08/18/How-katas-can-help-you-learn/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on learning from katas, with the example of the Roman Numerals kata in Objective-C. Written by Sandro Mancuso.&lt;/p&gt;

&lt;p&gt;Tags: sandro-mancuso, kata, learning, roman-numeral, objective-c&lt;/p&gt;

&lt;h2 id=&#34;java-8-definitive-guide-to-completablefuture&#34;&gt;Java 8: Definitive guide to CompletableFuture&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.nurkiewicz.com/2013/05/java-8-definitive-guide-to.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about Java 8&amp;rsquo;s feature, the &lt;code&gt;CompletableFeature&lt;/code&gt;. Written by Tomasz Nurkiewicz&lt;/p&gt;

&lt;p&gt;Tags: tomasz-nurkiewicz, java-8, completable-future, future, non-blocking, reactive-programming&lt;/p&gt;

&lt;h2 id=&#34;are-you-making-these-10-ddd-mistakes&#34;&gt;Are You Making These 10 DDD Mistakes?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://danielwhittaker.me/2015/07/05/are-you-making-these-10-ddd-mistakes/#&#34; target=&#34;_blank&#34;&gt;this infographic&lt;/a&gt; on 10 DDD common mistakes, by Daniel Whittaker.&lt;/p&gt;

&lt;p&gt;Tags: ddd, daniel-whittaker, bounded-context, ubiquitous-language, infographic&lt;/p&gt;

&lt;h2 id=&#34;haste-full-stack-haskell-for-non-phd-candidates&#34;&gt;Haste: Full-Stack Haskell for Non-PhD Candidates&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=3v03NFcyvzc&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; at the Strange Loop Conference 2014 about Haste language, a haskell version that compiles to javascript, therefore letting you write haskell in the browser. By Erin Swenson-Healey and James Cooper&lt;/p&gt;

&lt;p&gt;In this talk they recommend the &lt;a href=&#34;http://www.seas.upenn.edu/~cis194/lectures.html&#34; target=&#34;_blank&#34;&gt;CIS194 course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: haste, haskell, james-cooper, erin-swenson-healey, strange-loop, 2014, talk&lt;/p&gt;

&lt;h2 id=&#34;a-year-of-haskell&#34;&gt;A Year of Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=wZ0RQG3mFPw&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; about experiences using haskell professionally, by the American Justin Leitgeb in a Equatorian company in Quito, Stack Builders. He goes on to explain the haskell language in comparison to ruby on rails, what he mostly used with his clients.&lt;/p&gt;

&lt;p&gt;Also explains what sells and doesn&amp;rsquo;t (mostly productivity, not security) and gives pointer for applying it to a company&lt;/p&gt;

&lt;p&gt;Tags: justin-leitgeb, ecuador, haskell, stack-builders, lambda-days, 2015, client, professional, consulting, consultancy&lt;/p&gt;

&lt;h2 id=&#34;a-taste-of-haskell&#34;&gt;A Taste of Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched a lesson by Simon Peyton-Jones, that introduces haskell to experienced programmers, not in the language but in programming in general. At the conference OSCON 2007&lt;/p&gt;

&lt;p&gt;Links: &lt;a href=&#34;https://www.youtube.com/watch?v=jLj1QV11o9g&#34; target=&#34;_blank&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=IqXTUbdLig0&#34; target=&#34;_blank&#34;&gt;part 2&lt;/a&gt;, &lt;a href=&#34;http://www.slideshare.net/oscon2007/os-peytonjones&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: oscon, 2007, haskell, introduction, lesson, simon-peyton-jones&lt;/p&gt;

&lt;h2 id=&#34;programming-why-haskell-is-great&#34;&gt;Programming - Why Haskell is Great&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.youtube.com/watch?v=RqvCNb7fKsg&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; introducing some features of haskell. The most basic features, the REPL,  function composition. By FrungyKing&lt;/p&gt;

&lt;p&gt;Tags: haskell, introduction, video, screencast, repl, frungyking&lt;/p&gt;

&lt;h2 id=&#34;history-of-haskell-being-lazy-with-class&#34;&gt;History of Haskell: being lazy with class&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=3bjXGrycMhQ&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Simon Peyton-Jones at the &amp;ldquo;History of Programming Languages Conference III&amp;rdquo; which explains how the language was designed and written, a language timeline, what options they took, how they decided about monadic IO, etc.&lt;/p&gt;

&lt;p&gt;Tags: simon-peyton-jones, 2007, history-of-programming-languages-conference, haskell, talk&lt;/p&gt;

&lt;h2 id=&#34;the-humble-programmer&#34;&gt;The Humble Programmer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.cs.utexas.edu/users/EWD/transcriptions/EWD03xx/EWD340.html&#34; target=&#34;_blank&#34;&gt;this EWD&lt;/a&gt; about the necessary humbleness for being a programmer and the slow expansion of the trade, as compared to hardware engineers.&lt;/p&gt;

&lt;p&gt;He cites six reasons for preferring to be a humble programmer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the programmer only needs to manage simple programs&lt;/li&gt;
&lt;li&gt;simple programs imply reducing the search space&lt;/li&gt;
&lt;li&gt;construct a program from a mathematical proof instead of test its properties after building the software. see quote below&lt;/li&gt;
&lt;li&gt;a good abstraction can hide much complexity and difficulty&lt;/li&gt;
&lt;li&gt;the importance of the used tool in the final product&lt;/li&gt;
&lt;li&gt;&amp;ldquo;the only problems we can satisfactory solve are the ones that admit a factored solution&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this essay I&amp;rsquo;ve found the idea of&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Testing shows the presence, not the absence of bugs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That &lt;a href=&#34;https://en.wikiquote.org/wiki/Edsger_W._Dijkstra&#34; target=&#34;_blank&#34;&gt;Wikiquote&lt;/a&gt; attributes to an earlier paper (in 1969). In this paper, the verbatim quote is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;program testing can be a very effective way to show the presence of bugs, but is hopelessly inadequate for showing their absence.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This idea also connects to the &amp;ldquo;lower bounds&amp;rdquo; and &amp;ldquo;upper bounds&amp;rdquo; of program correctness expressed in the article &lt;a href=&#34;https://cdsmith.wordpress.com/2011/01/09/an-old-article-i-wrote/&#34; target=&#34;_blank&#34;&gt;An Old Article I Wrote&lt;/a&gt; which is about static types, by Cdsmith. Admittedly, much later, in 2008, so this idea could be inspired by the Dijkstra&amp;rsquo;s article.&lt;/p&gt;

&lt;p&gt;Tags: edsger-dijkstra, ewd, dijkstra, humble-programmer, essay, comparison, absence-of-bugs, quote&lt;/p&gt;

&lt;h2 id=&#34;building-a-link-shortener-with-snaplets&#34;&gt;Building a Link Shortener with Snaplets&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://vimeo.com/59109358&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; of how to build a link shortener webapp in haskell with the framework snap. By Ryan Trinkle. Found it in the &lt;a href=&#34;http://snapframework.com/docs&#34; target=&#34;_blank&#34;&gt;snap docs&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;Tags: snap, haskell, link-shortener, talk, webapp, framework, ryan-trinkle&lt;/p&gt;

&lt;h2 id=&#34;comparing-haskell-web-frameworks&#34;&gt;Comparing Haskell Web Frameworks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.edofic.com/posts/2014-02-23-haskell-web.html&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; of haskell web frameworks, by Andraz Bajt (a.k.a, edofic)&lt;/p&gt;

&lt;p&gt;Tags: andraz-bajt, edofic, haskell, web-framework, framework, comparison&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Internal training: Testing is hard - just do it</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it/</link>
      <pubDate>Tue, 05 May 2015 23:00:17 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/05/internal-training-testing-is-hard-just-do-it/</guid>
      <description>

&lt;p&gt;At a client, last week I&amp;rsquo;ve organized an internal training, in the form of a discussion about this article: &lt;a href=&#34;http://davidsouther.com/#/posts/2013/10/30/testing-its-hard-just-do-it/&#34; target=&#34;_blank&#34;&gt;Testing is hard - just do it&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;our-thoughts&#34;&gt;Our thoughts&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;When a bug is found, prove it exists with a test&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This immediately reduces defect rate: the same regression cannot be introduced again&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;fix a bug a second time&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If fixing a bug (having defects in your code) was &amp;lsquo;waste&amp;rsquo;, as defined by lean methodologies, it also is wast fixing it for the following times&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;testing requires discipline&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Agree. See quote by Larry Wall (this same article)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[Three requirements for a good test suite]:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The tests need to be easier to write&lt;/li&gt;
&lt;li&gt;The test suite must run, and pass, before any code is allowed out the door&lt;/li&gt;
&lt;li&gt;Support from the project&amp;rsquo;s leadership&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Agree.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Programming is like drawing water from a well&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good analogy&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m going to assume you are smarter than me [&amp;hellip;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is related to &amp;lsquo;doing clever things&amp;rsquo;: when I write &amp;lsquo;clever code&amp;rsquo;, that has neither comments, nor it is massaged to be Clean Code, it will cost me many times more to modify / understand in the future vs massage it a little bit.&lt;/p&gt;

&lt;p&gt;For me, an example of clever code are certain bitwise operations. Even though these operations are publicly available on websites and books, you must know about them before understanding the code.&lt;/p&gt;

&lt;p&gt;Another example of clever code is taking assumptions, even if they are valid. Example: always return the second element because the first one is the header&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;vs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;selectFirstValidLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;validElements&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;skipHeader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;validElements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;open-questions-other-ideas&#34;&gt;Open questions / other ideas&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There are tests that are more important than others. Is there a tool to assign them weights and inform about which preponderation of the codebase is broken? The same (i.e., more importance) can happen for production code.&lt;/li&gt;
&lt;li&gt;Is SCRUM apt for junior developers? In the sense of the increased autonomy, more decisions, more required technical skills / values, etc&lt;/li&gt;
&lt;li&gt;We discussed what differentiates a project with a shorter deadline from one with a longer deadline. The consensus was: you should do tests for any kind of project, the shorter deadline project won&amp;rsquo;t allow as much time for refactoring&lt;/li&gt;
&lt;li&gt;Tests iff (i.e., if and only if) working code&lt;/li&gt;
&lt;li&gt;Tests do not guarantee lack of defects&lt;/li&gt;
&lt;li&gt;Bijectiveness between tests and features (production code)
&lt;!--
Expand on this bijectiveness
--&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>