<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/senior-software-engineer/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/senior-software-engineer/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Senior Software Engineer, Chapter 8</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</link>
      <pubDate>Sun, 28 May 2017 16:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</guid>
      <description>

&lt;h1 id=&#34;chapter-8-bootstrap-a-greenfield-system&#34;&gt;Chapter 8: Bootstrap a Greenfield System&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Working on a brand new application can be a lot of fun.
There’s no &amp;ldquo;baggage&amp;rdquo; from legacy code, no technical debt,
and there’s a wonderful feeling of freshness when starting
an app from scratch.&lt;/p&gt;

&lt;p&gt;(p. 101)&lt;/p&gt;

&lt;p&gt;The decisions you make [&amp;hellip;] can have a lasting impact&lt;/p&gt;

&lt;p&gt;(p. 101)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-1-overview&#34;&gt;8.1 Overview&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;When given a greenfield project [&amp;hellip;] you have two main goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure everyone involved in the project feels good about the initial direction and decisions being made&lt;/li&gt;
&lt;li&gt;Establish a location for developers to start contributing code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p. 102)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mention of the iteration Zero, that&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] indicates that no direct business value is going
to be delivered initially&lt;/p&gt;

&lt;p&gt;(p. 102)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-2-understand-the-problem&#34;&gt;8.2 Understand the problem&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You do your company a disservice to build an application you don’t think needs to exist.&lt;/p&gt;

&lt;p&gt;To understand why the application should be built, find answers to these questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What business problems will this application solve?&lt;/li&gt;
&lt;li&gt;Why is the proposed application the best solutiont o those problems?&lt;/li&gt;
&lt;li&gt;What other solutions were considered?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p. 104)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mentioning the importance of asking why about these problems, also, whether this decided solution is good / the best.&lt;/p&gt;

&lt;h3 id=&#34;8-3-understand-the-system-s-place-in-the-technical-architecture&#34;&gt;8.3 Understand the System’s Place in the Technical Architecture&lt;/h3&gt;

&lt;p&gt;Mention of the &amp;lsquo;technical architecture&amp;rsquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;existing applications and existing infrastructure&lt;/p&gt;

&lt;p&gt;(p. 105)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-4-choose-technology&#34;&gt;8.4 Choose Technology&lt;/h3&gt;

&lt;h4 id=&#34;using-the-blessed-stack&#34;&gt;Using the Blessed Stack&lt;/h4&gt;

&lt;p&gt;Be prepared to heavily defend your position if you decide to not use
the blessed stack, both to yourself and others. (paraphrased from p. 107)&lt;/p&gt;

&lt;h3 id=&#34;using-a-different-technology&#34;&gt;Using a Different Technology&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You must answer the question “Why shouldn’t I use the blessed stack?”&lt;/p&gt;

&lt;p&gt;[&amp;hellip;]&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] your first duty is to deliver results.&lt;/p&gt;

&lt;p&gt;(p. 108).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also consider these factors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fitness for purpose&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Developer productivity&lt;/li&gt;
&lt;li&gt;Developer happiness - also called developer experience (DX)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(from p. 108)&lt;/p&gt;

&lt;h3 id=&#34;8-5-outline-the-application-s-architecture&#34;&gt;8.5 Outline the Application’s Architecture&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You want your application to ooze consistency&lt;/p&gt;

&lt;p&gt;(p. 111)&lt;/p&gt;

&lt;p&gt;you want to establish a “culture of consistency”&lt;/p&gt;

&lt;p&gt;(p. 113)&lt;/p&gt;

&lt;p&gt;Each developer should be encouraged to establish a convention when
they first face the need to have one.&lt;/p&gt;

&lt;p&gt;(p. 113)&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] considering the political impact [&amp;hellip;] Since it often doesn’t
matter what the decision is, making an unpopular decision can be
little gain for a lot of trouble.&lt;/p&gt;

&lt;p&gt;(p. 114)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-7-create-a-minimum-deployable-system&#34;&gt;8.7 Create a Minimum Deployable System&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I like to think of deployment as the physical act of getting the code up in the production environment and launching as the act of allowing users access.&lt;/p&gt;

&lt;p&gt;(p. 118)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The difference between deploying and launching. This can be enforced
with some techniques to block/allow access, such as enabling/disabling
these features or controlling access to said features.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 7</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/24/senior-software-engineer-chapter-7/</link>
      <pubDate>Wed, 24 May 2017 11:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/24/senior-software-engineer-chapter-7/</guid>
      <description>

&lt;h1 id=&#34;chapter-7-make-technical-decisions&#34;&gt;Chapter 7: Make Technical Decisions&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Opinions like this are often indicators of hidden facts that you have yet to identify&lt;/p&gt;

&lt;p&gt;(p. 90)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 6</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-6/</link>
      <pubDate>Tue, 23 May 2017 07:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-6/</guid>
      <description>

&lt;h1 id=&#34;chapter-6-play-well-with-others&#34;&gt;Chapter 6: Play Well With Others&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;challenges you’ll face as a programmer is to explain what you do,
or how you’ve done it, to someone who is not a programmer&lt;/p&gt;

&lt;p&gt;Translating your work to non-technical people is a skill that
can be more valuable than any specific technical knowledge you have.
It’s what makes a senior developer in the eyes of others.&lt;/p&gt;

&lt;p&gt;(p 77)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;6-1-empathize-with-your-audience&#34;&gt;6.1 Empathize With Your Audience&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;these &amp;ldquo;interested parties&amp;rdquo; understand the problem more deeply than
you, but lack the technical knowledge, skill, or time to solve it directly.&lt;/p&gt;

&lt;p&gt;(p 78)&lt;/p&gt;

&lt;p&gt;Instead of thinking of them as &amp;ldquo;pointy-haired bosses&amp;rdquo;, think of
them as partners. They understand the problem and you know how
to solve it. This &amp;ldquo;division of labor&amp;rdquo; is why teams can achieve
greater things than any individual.&lt;/p&gt;

&lt;p&gt;(p 79)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;6-2-adapt-and-abstract-information&#34;&gt;6.2 Adapt and Abstract Information&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;We want to adapt our terms to theirs, and we want to abstract
away irrelevant information as much as we can.&lt;/p&gt;

&lt;p&gt;(p 80)&lt;/p&gt;

&lt;p&gt;When communicating with others, you need to learn how to speak
the language.&lt;/p&gt;

&lt;p&gt;(p 80)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some tips:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid technical jargon of your own&lt;/li&gt;
&lt;li&gt;Listen carefully and ask questions&lt;/li&gt;
&lt;li&gt;Don’t &amp;ldquo;talk down&amp;rdquo;&lt;/li&gt;
&lt;li&gt;longer descriptive phrases in place of acronyms or other jargon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p 81)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;need to distill your message to its absolute minimum without giving out
false information.&lt;/p&gt;

&lt;p&gt;(p 82)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a conclusion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Being able to &amp;ldquo;talk the talk&amp;rdquo; with others can make you more effective
and more valuable to your company. Being able to briefly summarize
technical details even more so.&lt;/p&gt;

&lt;p&gt;(p 87)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 5</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-5/</link>
      <pubDate>Tue, 23 May 2017 07:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-5/</guid>
      <description>

&lt;h1 id=&#34;chapter-5-deal-with-technical-debt-and-slop&#34;&gt;Chapter 5: Deal With Technical Debt and Slop&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Seeing legacy as tech debt that has been acquired&lt;/li&gt;
&lt;li&gt;Slop as source for sloppy code&lt;/li&gt;
&lt;li&gt;Chapter about understanding the difference between slop and technical debt.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Many developers, if they are feeling pressured to complete their work, would call this an acceptable compromise, promise to fix it later, and ship it&lt;/p&gt;

&lt;p&gt;(p. 70)&lt;/p&gt;

&lt;p&gt;Technical Debt is [&amp;hellip;] used to explain compromises in implementation that save cost now,
at a larger future cost (just like real debt). [&amp;hellip;] technical debt is code written
under certain assumptions that no longer hold.&lt;/p&gt;

&lt;p&gt;(p. 72)&lt;/p&gt;

&lt;p&gt;Although you’ll likely need to pay it off someday, you might not necessarily have to.&lt;/p&gt;

&lt;p&gt;(p. 73)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Uses a marker (&lt;code&gt;TECHDEBT&lt;/code&gt;) to explain what and why has been introduced. Also
serves to find this debt later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 3</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/13/senior-software-engineer-chapter-3/</link>
      <pubDate>Sat, 13 May 2017 13:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/13/senior-software-engineer-chapter-3/</guid>
      <description>

&lt;h1 id=&#34;chapter-3-fix-bugs-efficiently-and-cleanly&#34;&gt;Chapter 3: Fix bugs efficiently and cleanly&lt;/h1&gt;

&lt;p&gt;In the beginning, you will be given tasks that require no in-depth domain knowledge&lt;/p&gt;

&lt;h3 id=&#34;process&#34;&gt;Process&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A process allows you to focus on the right thing at th right time (p. 14)&lt;/p&gt;

&lt;p&gt;It will make your productivity and quality more predictable, which, in turn, will help you estimate and keep more of your promises about your work (paraphrased from p. 14)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;tdd&#34;&gt;TDD&lt;/h3&gt;

&lt;p&gt;Explains some benefits about TDD:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Thinking before coding&lt;/li&gt;
&lt;li&gt;Separating the &amp;lsquo;getting it to work&amp;rsquo; from &amp;lsquo;getting it right&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p. 15)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The latter can be interpreted as &amp;lsquo;building the thing right&amp;rsquo; vs &amp;lsquo;building the right thing&amp;rsquo;: a red test can be seen as question, a green test as an answer. If the question is defined in business terms, you are building the right thing. When refactoring, you are turning the right thing (no matter how it was built) into the thing right&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] senior software engineers don&amp;rsquo;t ask permission to do their job, they just do it&lt;/p&gt;

&lt;p&gt;(p. 20)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- TODO this will turn into a blog post --&gt;
</description>
    </item>
    
  </channel>
</rss>