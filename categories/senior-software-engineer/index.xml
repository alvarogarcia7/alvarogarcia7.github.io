<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>senior-software-engineer on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/senior-software-engineer/</link>
    <description>Recent content in senior-software-engineer on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 May 2017 17:12:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/senior-software-engineer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Senior Software Engineer, Chapter 9</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-9/</link>
      <pubDate>Sun, 28 May 2017 17:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-9/</guid>
      <description>Chapter 9: Learn to Write Analogy of TDD to writing.
Explains how to write good email. Then, good documentation, then good API documentation</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 8</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</link>
      <pubDate>Sun, 28 May 2017 16:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</guid>
      <description>Chapter 8: Bootstrap a Greenfield System  Working on a brand new application can be a lot of fun. There’s no &amp;ldquo;baggage&amp;rdquo; from legacy code, no technical debt, and there’s a wonderful feeling of freshness when starting an app from scratch.
(p. 101)
  The decisions you make [&amp;hellip;] can have a lasting impact
(p. 101)
 8.1 Overview  When given a greenfield project [&amp;hellip;] you have two main goals:</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 7</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/24/senior-software-engineer-chapter-7/</link>
      <pubDate>Wed, 24 May 2017 11:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/24/senior-software-engineer-chapter-7/</guid>
      <description>Chapter 7: Make Technical Decisions  Opinions like this are often indicators of hidden facts that you have yet to identify
(p. 90)
 </description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 6</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-6/</link>
      <pubDate>Tue, 23 May 2017 07:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-6/</guid>
      <description>Chapter 6: Play Well With Others  challenges you’ll face as a programmer is to explain what you do, or how you’ve done it, to someone who is not a programmer
Translating your work to non-technical people is a skill that can be more valuable than any specific technical knowledge you have. It’s what makes a senior developer in the eyes of others.
(p 77)
 6.1 Empathize With Your Audience  these &amp;ldquo;interested parties&amp;rdquo; understand the problem more deeply than you, but lack the technical knowledge, skill, or time to solve it directly.</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 5</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-5/</link>
      <pubDate>Tue, 23 May 2017 07:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-5/</guid>
      <description>Chapter 5: Deal With Technical Debt and Slop  Seeing legacy as tech debt that has been acquired Slop as source for sloppy code Chapter about understanding the difference between slop and technical debt.   Many developers, if they are feeling pressured to complete their work, would call this an acceptable compromise, promise to fix it later, and ship it
(p. 70)
  Technical Debt is [&amp;hellip;] used to explain compromises in implementation that save cost now, at a larger future cost (just like real debt).</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 3</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/13/senior-software-engineer-chapter-3/</link>
      <pubDate>Sat, 13 May 2017 13:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/13/senior-software-engineer-chapter-3/</guid>
      <description>Chapter 3: Fix bugs efficiently and cleanly In the beginning, you will be given tasks that require no in-depth domain knowledge
Process  A process allows you to focus on the right thing at th right time (p. 14)
It will make your productivity and quality more predictable, which, in turn, will help you estimate and keep more of your promises about your work (paraphrased from p. 14)
 TDD Explains some benefits about TDD:</description>
    </item>
    
  </channel>
</rss>
