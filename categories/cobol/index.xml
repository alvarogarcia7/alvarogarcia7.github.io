<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/cobol/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/cobol/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in June 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/06/01/self-study-june-2017/</link>
      <pubDate>Thu, 01 Jun 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/06/01/self-study-june-2017/</guid>
      <description>

&lt;h2 id=&#34;so-hey-you-should-stop-using-texts-for-two-factor-authentication&#34;&gt;So Hey You Should Stop Using Texts for Two-Factor Authentication&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.wired.com/2016/06/hey-stop-using-texts-two-factor-authentication/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining why messages over SMS should not be used for the &amp;lsquo;what you own&amp;rsquo; in 2FA.&lt;/p&gt;

&lt;p&gt;Tags: andy-greenberg, 2fa, sms, security, warning&lt;/p&gt;

&lt;h2 id=&#34;why-i-d-never-work-for-google-twitter-or-facebook&#34;&gt;Why I&amp;rsquo;d never work for Google, Twitter, or Facebook&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://naildrivin5.com/blog/2011/08/01/why-i-wont-work-for-google-twitter-facebook.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Bryant Copeland on why he would never work for these three companies: he doesn&amp;rsquo;t share the principles and values from these companies.&lt;/p&gt;

&lt;p&gt;Tags: david-copeland, google, twitter, facebook, job-satisfaction, commitment&lt;/p&gt;

&lt;h2 id=&#34;design-thinking-needs-to-think-bigger&#34;&gt;Design Thinking Needs To Think Bigger&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.fastcodesign.com/90112320/design-thinking-needs-to-think-bigger&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by STEVE VASSALLO on systems thinking and design thinking.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What makes a system a system rather than just a collection of parts is that the components are interconnected and interdependent&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: steve-vassallo, design-thinking, system-thinking, mental-model, emergence-point, leverage-point, iceberg-model&lt;/p&gt;

&lt;h2 id=&#34;cobol-is-everywhere-who-will-maintain-it&#34;&gt;COBOL Is Everywhere. Who Will Maintain It?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://thenewstack.io/cobol-everywhere-will-maintain/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Cassel explaining the state of the COBOL systems at some banks and the difficulty of finding young COBOL programmers.&lt;/p&gt;

&lt;p&gt;Tags: david-cassel, cobol, youth, team-management, hiring, bank, java, mainframe, legacy-system&lt;/p&gt;

&lt;h2 id=&#34;you-re-too-busy-you-need-a-shultz-hour&#34;&gt;You’re Too Busy. You Need a ‘Shultz Hour.’&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.nytimes.com/2017/04/18/opinion/youre-too-busy-you-need-a-shultz-hour.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Leonhardt, about the Shultz Hour: time set aside to not be busy, so you can set aside the tactical topics and focus on the strategic topics.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“You waste years by not being able to waste hours.”&lt;/p&gt;

&lt;p&gt;Amos Tversky  (as Michael Lewis describes in his THE UNDOING PROJECT)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: david-leonhardt, busyness, time-management, shultz-hour, connectedness, social-media, quote&lt;/p&gt;

&lt;h1 id=&#34;avoid-these-35-habits-that-lead-to-unmaintainable-code&#34;&gt;Avoid these 35 habits that lead to unmaintainable code&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/avoid-35-habits-lead-unmaintainable-code-christian-maioli-mackeprang&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about habits that make writing software more difficult:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Saying “I’ll fix it later”, and never doing it&lt;/li&gt;
&lt;li&gt;Insisting on a one-liner solution&lt;/li&gt;
&lt;li&gt;Making pointless optimizations&lt;/li&gt;
&lt;li&gt;Convincing yourself that styling issues are not that important&lt;/li&gt;
&lt;li&gt;Sweeping things under the rug&lt;/li&gt;
&lt;li&gt;Using names that don’t add information&lt;/li&gt;
&lt;li&gt;Ignoring proven best practices&lt;/li&gt;
&lt;li&gt;Abandoning plans too early&lt;/li&gt;
&lt;li&gt;Insisting on a plan that has little chance of working&lt;/li&gt;
&lt;li&gt;Working on your own all the time&lt;/li&gt;
&lt;li&gt;Refusing to write bad code&lt;/li&gt;
&lt;li&gt;Blaming others&lt;/li&gt;
&lt;li&gt;Not sharing with your team what you’ve learned&lt;/li&gt;
&lt;li&gt;Being too slow on giving feedback to managers/clients&lt;/li&gt;
&lt;li&gt;Not using Google enough&lt;/li&gt;
&lt;li&gt;Overvaluing your personal style&lt;/li&gt;
&lt;li&gt;Having a personal attachment to your code&lt;/li&gt;
&lt;li&gt;Not knowing how to optimize&lt;/li&gt;
&lt;li&gt;Using the wrong tool for the job&lt;/li&gt;
&lt;li&gt;Not bothering with mastering your tools and IDE&lt;/li&gt;
&lt;li&gt;Ignoring error messages&lt;/li&gt;
&lt;li&gt;Romanticizing your developer toolkit&lt;/li&gt;
&lt;li&gt;Hardcoding values instead of making them configurable&lt;/li&gt;
&lt;li&gt;Reinventing the wheel all the time&lt;/li&gt;
&lt;li&gt;Blindly copy/pasting code&lt;/li&gt;
&lt;li&gt;Not taking the time to learn how things really work&lt;/li&gt;
&lt;li&gt;Having excessive confidence in your own code&lt;/li&gt;
&lt;li&gt;Not thinking about the trade-offs of each design, solution, or library&lt;/li&gt;
&lt;li&gt;Not getting help when you’re stuck&lt;/li&gt;
&lt;li&gt;Writing tests to pass&lt;/li&gt;
&lt;li&gt;Disregarding performance testing for critical cases&lt;/li&gt;
&lt;li&gt;Not checking that your build works&lt;/li&gt;
&lt;li&gt;Pushing large changes late, or leaving after making a large push&lt;/li&gt;
&lt;li&gt;Disowning code you wrote&lt;/li&gt;
&lt;li&gt;Ignoring the nonfunctional requirements&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: christian-maioli-mackeprang, maintanability, code, listicle, habit&lt;/p&gt;

&lt;h2 id=&#34;javascript-a-first-class-language-at-last&#34;&gt;JavaScript — A First-Class Language At Last&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/javascript-first-class-language-atlast-tom-goldenberg&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tom Goldenberg defending javascript, citing sources on why it is a first-class language,
the amount of job offers, and the state of the art in NodeJS.&lt;/p&gt;

&lt;p&gt;Tags: tom-goldenberg, javascript, java, comparison, first-class, language, analysis&lt;/p&gt;

&lt;h2 id=&#34;why-the-8-hour-workday-doesn-t-work&#34;&gt;Why the 8-Hour Workday Doesn&amp;rsquo;t Work&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/why-8-hour-workday-doesnt-work-dr-travis-bradberry&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; defending the removal of the 8-hour workday, preferring the division of time in slots.
In the article, 52 minutes of highly focused work then 17 minutes of rest.&lt;/p&gt;

&lt;p&gt;The key idea is the work-rest, no matter how big those slots are.&lt;/p&gt;

&lt;p&gt;Gives tips on how to separate both, some other tips for improving your performance.&lt;/p&gt;

&lt;p&gt;By Travis Bradberry&lt;/p&gt;

&lt;p&gt;Tags: time-management, pomodoro-technique, travis-bradberry, time, workday&lt;/p&gt;

&lt;h2 id=&#34;the-dark-side-of-extreme-productivity-and-how-to-steer-back-toward-the-light-https-medium-freecodecamp-com-the-dark-side-of-extreme-productivity-2a31ff7a4cd2&#34;&gt;&lt;a href=&#34;https://medium.freecodecamp.com/the-dark-side-of-extreme-productivity-2a31ff7a4cd2&#34; target=&#34;_blank&#34;&gt;The dark side of extreme productivity, and how to steer back toward the light&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Beau Carnes on how productivity can have a downside, how it can affect your healthy lifestyle.
Explains effective vs efficient, productivity, silent retreat, prayer or meditation&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The key is not to prioritize what’s on your schedule, but to schedule your priorities&lt;/p&gt;

&lt;p&gt;Stephen Covey&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: beau-carnes, productivity, quote, stephen-covey, sustainable-pace&lt;/p&gt;

&lt;h2 id=&#34;dejé-de-leer&#34;&gt;Dejé de leer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://culto.latercera.com/2017/03/15/deje-de-leer/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Catalina Bu on the tsundoku and how to read more. (In Spanish)&lt;/p&gt;

&lt;p&gt;Tags: catalina-bu, tsundoku, reading, time-management, spanish&lt;/p&gt;

&lt;h2 id=&#34;hacked-in-translation-from-subtitles-to-complete-takeover&#34;&gt;Hacked in Translation – from Subtitles to Complete Takeover&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.checkpoint.com/2017/05/23/hacked-in-translation/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about a vector to getting to user&amp;rsquo;s machines through the video player, using subtitle files.
by Check Point Research Team.&lt;/p&gt;

&lt;p&gt;Tags: check-point-research-team, security, vulnerability, vector, attack, subtitle, video-player&lt;/p&gt;

&lt;h2 id=&#34;8-teamwork-myths-to-tackle-at-your-office&#34;&gt;8 Teamwork Myths To Tackle At Your Office&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.trello.com/8-teamwork-myths-to-tackle-at-your-office&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Leah Ryder on remote work myths.&lt;/p&gt;

&lt;p&gt;Tags: leah-ryder, productivity, myth, remote, remote-work&lt;/p&gt;

&lt;h2 id=&#34;why-i-think-elm-is-the-future-of-front-end-development&#34;&gt;Why I think Elm is the Future of Front End Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@rgoomar/why-i-think-elm-is-the-future-of-front-end-development-21e9b091fa05&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Rishi Goomar comparing reactredux to elm, comparing javascript to elm.&lt;/p&gt;

&lt;p&gt;Tags: rishi-goomar, comparison, elm, javascript, react, redux, javascript-fatigue&lt;/p&gt;

&lt;h2 id=&#34;los-viejos-programadores-nunca-mueren-y-silicon-valley-se-está-dando-cuenta-de-ello&#34;&gt;Los viejos programadores nunca mueren, y Silicon Valley se está dando cuenta de ello&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://m.xataka.com/empresas-y-economia/los-viejos-programadores-nunca-mueren-y-silicon-valley-se-esta-dando-cuenta-de-ello&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Javier Pastor on the age of the programmers in Silicon Valley. In Spanish.&lt;/p&gt;

&lt;p&gt;Tags: spanish, javier-pastor, age, programmer, career-manager, silicon-valley&lt;/p&gt;

&lt;h2 id=&#34;creating-a-tensorflow-powered-ing-api-client&#34;&gt;Creating a TensorFlow-powered ING API client&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@donflopez/cracking-the-ing-api-with-tensorflow-9681ae7dc249&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Francisco López on how he has implemented a small bot to click the virtual keyboard and connect to the bank website.&lt;/p&gt;

&lt;p&gt;Tags: ing-direct, francisco-lopez, bot, opencv, tensorflow, machine-learning, python, banking, open-banking-data&lt;/p&gt;

&lt;h2 id=&#34;be-a-good-mentor-not-a-dickhead&#34;&gt;Be a good mentor, not a dickhead&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Edaqa Mortoray about traits of a mentor. &lt;a href=&#34;https://dev.to/mortoray/be-a-good-mentor-not-a-dickhead&#34; target=&#34;_blank&#34;&gt;https://dev.to/mortoray/be-a-good-mentor-not-a-dickhead&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: edaqa-mortoray, mentor, trait, skill, mentorship, apprentice, apprenticeship&lt;/p&gt;

&lt;h2 id=&#34;the-largest-git-repo-on-the-planet-https-blogs-msdn-microsoft-com-bharry-2017-05-24-the-largest-git-repo-on-the-planet&#34;&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/bharry/2017/05/24/the-largest-git-repo-on-the-planet/&#34; target=&#34;_blank&#34;&gt;The largest Git repo on the planet&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by  Brian Harry on how Microsoft manages one of its big repositories. Explains how they have virtualized the git folder and the git workspace at Microsoft using gvfs. Explains how they have performed the improvements necessary to make it useful and usable to programmers.&lt;/p&gt;

&lt;p&gt;They have support for clients, but what about Linux?&lt;/p&gt;

&lt;p&gt;Tags:  brian-harry, microsoft, continous-delivery, linux, windows, gvfs, repository, monorepo&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in November 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</link>
      <pubDate>Mon, 02 Nov 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</guid>
      <description>

&lt;h2 id=&#34;call-me-maybe-rabbitmq&#34;&gt;Call me maybe: RabbitMQ&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://aphyr.com/posts/315-call-me-maybe-rabbitmq&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kyle Kingsbury on using RabbitMQ as a lock service. It investigates and gives a counterexample of using it for this purpose.&lt;/p&gt;

&lt;p&gt;Uses Knossos to do the testing and surfaces a problem with it. Explains specific problems on locking: at-most-once and at-least-once message delivery&lt;/p&gt;

&lt;p&gt;Note: References Jepsen (I guess an inside joke to the song &amp;ldquo;Call me maybe&amp;rdquo; by Carly Rae Jepsen) for at-most-once and at-least-once message delivery.&lt;/p&gt;

&lt;p&gt;Tags: rabbitmq, kyle-kingsbury, lock, cap-theorem, distributed-system, jepsen, knossos, at-most-once-delivery, at-least-once-delivery, counterexample, mutex&lt;/p&gt;

&lt;h2 id=&#34;everyone-is-potentially-a-teacher&#34;&gt;Everyone is potentially a teacher&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/09/everyone-is-potentially-a-teacher&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Carlos Blé where he explains that everyone can have ideas worth spreading and that the knowledge not only comes from others but also from the relationships that tie you to other people.&lt;/p&gt;

&lt;p&gt;Tags: carlos-ble, teaching, pedagogy, idea, teacher, relationship&lt;/p&gt;

&lt;h2 id=&#34;ragel-state-machine-compiler&#34;&gt;Ragel State Machine Compiler&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.colm.net/open-source/ragel/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining what the Ragel project is about: a code generator from regex to code in languages such as C#, Java, etc. It is limited to finite state machines (FSM), with determinism. It can also handle some indeterminism. Written by Adrian D. Thurston&lt;/p&gt;

&lt;p&gt;Tags: adrian-thurston, fsm, state-machine, finite-state-machine, code-generation, ragel&lt;/p&gt;

&lt;h2 id=&#34;http-is-obsolete-it-s-time-for-the-distributed-permanent-web&#34;&gt;HTTP is obsolete. It&amp;rsquo;s time for the distributed, permanent web&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ipfs.io/ipfs/QmNhFJjGcMPqpuYfxL62VVB9528NXqDNMFXiqN5bgFYiZ1/its-time-for-the-permanent-web.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kyle Drake explaining the need for a permanent, distributed web archive.&lt;/p&gt;

&lt;p&gt;Using a distributed file system (IPFS) and software similar to Bitcoin, they can host parts of the web locally, making it immutable and distributed&lt;/p&gt;

&lt;p&gt;Tags: kyle-drake, web-archive, centralization, decentralization, distribution, permanent-web, ipfs, federation,&lt;/p&gt;

&lt;h2 id=&#34;recovering-from-the-integrated-tests-scam&#34;&gt;Recovering From the Integrated Tests Scam&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive1.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=42e61e203e&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; from J. B. Rainsberger on the integrated test scam and how to solve it: refactoring.&lt;/p&gt;

&lt;p&gt;Tags: jbrains, tdd, integrated-test, integration-test, j-rainsberger&lt;/p&gt;

&lt;h2 id=&#34;broken-windows-theory&#34;&gt;Broken windows theory&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Broken_windows_theory&#34; target=&#34;_blank&#34;&gt;this wikipedia article&lt;/a&gt; that talks about the broken windows theory, that states that controlling and monitoring public spaces leads to lowering the serious crimes.&lt;/p&gt;

&lt;p&gt;Cites three causes for this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Social norms and conformity&lt;/li&gt;
&lt;li&gt;Lack of routing monitoring&lt;/li&gt;
&lt;li&gt;Social signaling and signal crime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also discusses examples in the US and in the Netherlands, as well as criticisms.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve read it to better understand how to apply this theory to software development, on a day-to-day basis.&lt;/p&gt;

&lt;p&gt;Tags: wikipedia, theory, broken-window&lt;/p&gt;

&lt;h2 id=&#34;scsh&#34;&gt;Scsh&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Scsh&#34; target=&#34;_blank&#34;&gt;the wikipedia page&lt;/a&gt; for Scsh, the Scheme shell.&lt;/p&gt;

&lt;h2 id=&#34;why-is-scala-s-type-inference-not-as-powerful-as-haskell-s&#34;&gt;Why is Scala&amp;rsquo;s type inference not as powerful as Haskell&amp;rsquo;s?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the reasoning why Haskell supports other type inferences that are not present in Scala, in &lt;a href=&#34;http://stackoverflow.com/questions/7234095/why-is-scalas-type-inference-not-as-powerful-as-haskells&#34; target=&#34;_blank&#34;&gt;this StackOverflow question&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: scala, haskell, type-inference, hindley-milner, type-inference-algorithm&lt;/p&gt;

&lt;h2 id=&#34;the-future-of-the-lispm&#34;&gt;The Future of the LispM&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://arrdem.com/2014/11/28/the_future_of_the_lispm/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining the past and current situation in the Lisp world: from Lisp, to LispM, to the MIT and Symbolics Inc., to Clojure and Scheme.&lt;/p&gt;

&lt;p&gt;Also talks about integration with the operating system and its execution in the microprocessor. Written by Reid McKenzie&lt;/p&gt;

&lt;p&gt;Tags: reid-mckenzie, lisp, lispm, clojure, scheme, symbolics&lt;/p&gt;

&lt;h2 id=&#34;the-lisp-curse&#34;&gt;The Lisp Curse&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.winestockwebdesign.com/Essays/Lisp_Curse.html&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Rudolf Winestock, where he explains the low barrier (or low cost) for people in powerful languages (such as Lisp) to not accept the status quo in their project and fork / start their own.&lt;/p&gt;

&lt;p&gt;It also compares languages and the people attracted to them. Cites Mark Tarver&amp;rsquo;s essays several times, including the Brilliant Bipolar Mind (BBM) in &lt;a href=&#34;https://web.archive.org/web/20150308085419/http://www.lambdassociates.org/blog/bipolar.htm&#34; target=&#34;_blank&#34;&gt;this other&lt;/a&gt; essay (from WebArchive). Compares the BBM and the normal worker in usefulness to companies.&lt;/p&gt;

&lt;p&gt;Cites the Pareto principle (80-20 rule): a single hacker will port 80% the library from another language, leaving it buggy, undocumented and only understandable by the original author (assuming this is only 20% of the work). The rest (e.g., documentation, bugfixing, maintenance) are dropped and never taken care of.&lt;/p&gt;

&lt;p&gt;Cites that this could be somewhat based on the facility of creating new features for the language. A small effort implies small implementation time, leaving no margin for thinking it through and seeing other corner cases. Also, a single person working on the project means no code review. The style might be coherent (always the same one), but might not be idiomatic, understandable by others, maintainable, etc.&lt;/p&gt;

&lt;p&gt;Closes the essay with this quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The expressive power of Lisp has drawbacks. There is no such thing as a free lunch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: rudolf-winestock, essay, pareto-principle, hacking, one-man-band, lisp, no-free-lunch, quote&lt;/p&gt;

&lt;h2 id=&#34;the-bipolar-lisp-programmer&#34;&gt;The Bipolar Lisp Programmer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://web.archive.org/web/20150308085419/http://www.lambdassociates.org/blog/bipolar.htm&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Mark Tarver on the Bipolar Lisp programmmer or the koan of Lisp.&lt;/p&gt;

&lt;p&gt;It explains the history of the Brilliant Bipolar Mind (BBM) when they attend high school and college. The freedom they&amp;rsquo;re given, exactly the same as in Lisp, as you don&amp;rsquo;t need to mix and socialize with others to create a good-enough solution.&lt;/p&gt;

&lt;p&gt;In this fashion, he says, most of the projects are 80% finished, not documented, not maintained. The same problems that worry enterprises.&lt;/p&gt;

&lt;p&gt;Cites the article &amp;ldquo;Lisp: Good News, Bad News, How to Win Big&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: essay, mark-tarver, bipolar-lisp-programmer, lisp-programmer, programmer, brillian-bipolar-mind, blp, bbm, koan&lt;/p&gt;

&lt;p&gt;Note: this article was no longer present on its original site. Fetched it from the Web Archive (WayBack Machine).&lt;/p&gt;

&lt;h2 id=&#34;writing-readable-clojure-code&#34;&gt;Writing readable Clojure code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/jiriknesl/writing-readable-clojure-code&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Jiří Knesl, that explains how to write better clojure code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Macros&lt;/li&gt;
&lt;li&gt;HOFs&lt;/li&gt;
&lt;li&gt;left-to-right vs right-to-left code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: clojure, jiri-knesl, macro, hof, thread, slide&lt;/p&gt;

&lt;h2 id=&#34;how-can-i-get-a-reference-to-a-method&#34;&gt;How can I get a reference to a method?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/485151/how-can-i-get-a-reference-to-a-method&#34; target=&#34;_blank&#34;&gt;this question&lt;/a&gt;, &lt;a href=&#34;http://stackoverflow.com/questions/4294485/how-do-i-reference-a-function-in-ruby&#34; target=&#34;_blank&#34;&gt;another question&lt;/a&gt; from StackOverflow&lt;/p&gt;

&lt;p&gt;Tags: stackoverflow, question, ruby, functional-programming, method-reference&lt;/p&gt;

&lt;h2 id=&#34;implicit-and-explicit-blocks&#34;&gt;Implicit and Explicit Blocks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/18-blocks/lessons/55-new-lesson&#34; target=&#34;_blank&#34;&gt;this lesson from rubyMonk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: rubymonk, lesson, block, ruby&lt;/p&gt;

&lt;h2 id=&#34;what-s-point-free-programing&#34;&gt;What&amp;rsquo;s Point-free Programing?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://xahlee.info/comp/point-free_programing.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Xah Lee explaining point-free programming, which requires a glance at function decomposition (currying)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] “point-free programing” is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is about a particular &lt;strong&gt;syntax&lt;/strong&gt; for &lt;strong&gt;function definition&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;strong&gt;defining a function&lt;/strong&gt;, no symbol is used for function parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;oracle-s-planned-obsolescence-for-java&#34;&gt;Oracle’s “planned obsolescence” for Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://jaxenter.com/oracle-and-javas-planned-obsolescence-121144.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Coman Hamilton on the possible Java&amp;rsquo;s planned obsolescence by Oracle.&lt;/p&gt;

&lt;p&gt;Discusses features pushed to future releases, comparing it to other legacy languages.&lt;/p&gt;

&lt;p&gt;Tags: obsolescence, legacy-language, planned-obsolescence, java, java-ee, oracle, fortran, cobol, coman-hamilton&lt;/p&gt;

&lt;h2 id=&#34;your-first-ruby-native-extension-c&#34;&gt;Your first Ruby native extension: C&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.jcoglan.com/2012/07/29/your-first-ruby-native-extension-c/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about writing a native extension for ruby. Written by James Coglan&lt;/p&gt;

&lt;p&gt;Tags: james-coglan, ruby, c, native-extension&lt;/p&gt;

&lt;h2 id=&#34;what-s-the-difference-between-equal-eql-and&#34;&gt;What&amp;rsquo;s the difference between equal?, eql?, ===, and ==?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/7156955/whats-the-difference-between-equal-eql-and&#34; target=&#34;_blank&#34;&gt;this stackoverflow&lt;/a&gt; question regarding Ruby operators: equal?, eql?, ===, ==:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;==: generic equality&lt;/li&gt;
&lt;li&gt;===: case equality (for case - when)&lt;/li&gt;
&lt;li&gt;eql?: hash equality&lt;/li&gt;
&lt;li&gt;equal?: identity comparison (pointer comparison)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: comparison, stackoverflow, ruby, equal, eq, ==, ===, question, answer, jtbandes&lt;/p&gt;

&lt;h2 id=&#34;kanban&#34;&gt;Kanban&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://es.wikipedia.org/wiki/Kanban&#34; target=&#34;_blank&#34;&gt;the wikipedia page&lt;/a&gt; for Kanban (Spanish)&lt;/p&gt;

&lt;p&gt;Tags: wikipedia, kanban, agile-methodology, management&lt;/p&gt;

&lt;h2 id=&#34;is-your-scrum-team-agile&#34;&gt;Is your Scrum team Agile?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.thesoftwarecraft.com/2014/04/is-your-scrum-team-agile.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by  Bart Bakker where he discusses some common patterns in Agile implementations (in software companies)&lt;/p&gt;

&lt;p&gt;Tags: scrum, team, agile, scrum-implementation, bart-bakker&lt;/p&gt;

&lt;h2 id=&#34;mejora-tu-trabajo-en-equipo-con-el-método-kanban&#34;&gt;Mejora tu trabajo en equipo con el método Kanban&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://hipertextual.com/archivo/2013/11/que-es-kanban/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains then kanban management framework, with its principles and its values. Written by Jose López (in Spanish)&lt;/p&gt;

&lt;p&gt;Tags: kanban, management, agile-methodology, management-framework, principle, value, jose-lopez&lt;/p&gt;

&lt;h2 id=&#34;qué-es-el-método-kanban-para-la-gestión-de-proyectos&#34;&gt;¿Qué es el método Kanban para la gestión de proyectos?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javiergarzas.com/2011/11/kanban.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; (Spanish) written by Javier Garzás where it is explained the kanban methodology and three of its main rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;visualize workflow&lt;/li&gt;
&lt;li&gt;limit WIP&lt;/li&gt;
&lt;li&gt;measure {lead, cycle} time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: kanban, management, agile-methodology, management-framework, principle, value, javier-garzas&lt;/p&gt;

&lt;h2 id=&#34;describe-vs-context-in-rspec&#34;&gt;describe vs. context in rspec&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lmws.net/describe-vs-context-in-rspec&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains the (lack of) functional difference between RSpec&amp;rsquo;s &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; methods. The difference is contextual (i.e., the amount of information they convey). Written by LM&lt;/p&gt;

&lt;p&gt;Tags: rspec, ruby, describe, context, difference&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in September 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015/</link>
      <pubDate>Tue, 01 Sep 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015/</guid>
      <description>

&lt;h2 id=&#34;the-30-second-habit-with-a-lifelong-impact&#34;&gt;The 30 second habit with a lifelong impact&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.growth.supply/the-30-second-habit-with-a-lifelong-impact-2c3f948ead98&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; list of patterns, by Robyn Scott, in which it is explained why to compress information in a few ideas, investing 30 seconds to condense the article.&lt;/p&gt;

&lt;p&gt;Tags: 30-second, habit, robyn-scott&lt;/p&gt;

&lt;h2 id=&#34;the-strengths-and-weaknesses-of-extreme-programming&#34;&gt;The Strengths and Weaknesses of Extreme Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=LkhLZ7_KZ5w&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; explaining the strengths and weaknesses of extreme programming. By William Matheson&lt;/p&gt;

&lt;p&gt;Tags: extreme-programming, xp, william-matheson, video, strength, weakness&lt;/p&gt;

&lt;h2 id=&#34;poster-de-extreme-programming&#34;&gt;Poster de Extreme Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=4nN6Gh79Yg8&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; introducing eXtreme Programming. By Martín Salías&lt;/p&gt;

&lt;p&gt;Tags: martin-salias, kleer, extreme-programming, xp&lt;/p&gt;

&lt;h2 id=&#34;good-tech-lead-bad-tech-lead&#34;&gt;Good Tech Lead, Bad Tech Lead&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.growth.supply/good-tech-lead-bad-tech-lead-948b2b806d86&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; of good and bad traits in tech leads. By Jason Liszka.&lt;/p&gt;

&lt;p&gt;Explains the differences between good and bad tech leads, even though many of these qualities are shared by plain team members&lt;/p&gt;

&lt;p&gt;Tags: jason-liszka, tech-lead, comparison&lt;/p&gt;

&lt;h2 id=&#34;why-procrastinators-procrastinate&#34;&gt;Why Procrastinators Procrastinate&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://waitbutwhy.com/2013/10/why-procrastinators-procrastinate.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tim Urban on procrastination: this article compares the procrastinator and the non-procrastinator brain with pictures, introducing the Rational part, the Instant Gratification Monkey and the Panic Monster. Shows some reasons why.&lt;/p&gt;

&lt;p&gt;There is more on part 2: &lt;a href=&#34;http://waitbutwhy.com/2013/11/how-to-beat-procrastination.html&#34; target=&#34;_blank&#34;&gt;How to beat procrastination&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: tim-urban, procrastination, rational-part, instant-gratification-monkey, panic-monster, brain, comparison&lt;/p&gt;

&lt;h2 id=&#34;algebraic-data-type&#34;&gt;Algebraic data type&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that explains what this is, a few examples and the theory behind it.&lt;/p&gt;

&lt;p&gt;Tags: wikipedia, data-type, algebraic-data-type&lt;/p&gt;

&lt;h2 id=&#34;recursion&#34;&gt;Recursion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Recursion_(computer_science)&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that explains the recursion basic concepts, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;induction, coinduction&lt;/li&gt;
&lt;li&gt;recursion, corecursion&lt;/li&gt;
&lt;li&gt;implementation details in iterative vs recursive programs:

&lt;ul&gt;
&lt;li&gt;shortcutting recursion (i.e., arm-length&amp;rsquo;s recursion)&lt;/li&gt;
&lt;li&gt;wrapper function&lt;/li&gt;
&lt;li&gt;tail-call optimization, related to tail-recursive functions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;recursion and its relation to data structures&lt;/li&gt;
&lt;li&gt;base case / recursive case and removing the need of the base one in corecursion or in non-strict languages&lt;/li&gt;
&lt;li&gt;types of recursion:

&lt;ul&gt;
&lt;li&gt;direct, indirect, mutual&lt;/li&gt;
&lt;li&gt;generative, structural&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: recursion, corecursion, induction, coinduction, tail-call-optimization, tail-recursion, direct-recursion, indirect-recursion, mutual-recursion, generative-recursion, structural-recursion, arm-length-recursion, iterative-function, recursive-function, base-case, recursive-case, wikipedia, data-structure&lt;/p&gt;

&lt;h2 id=&#34;anonymous-function&#34;&gt;Anonymous function&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Anonymous_function&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that describes what is a lambda expression or an anonymous function. How it can be used (e.g., currying, higher-order function, closures) and gives examples in many languages.&lt;/p&gt;

&lt;p&gt;Cites its invention (Church, 1936, lambda-calculus) and its first implementation (Lisp, 1958)&lt;/p&gt;

&lt;p&gt;Tags: alonzo-church, anonymous-function, lambda-expression, closure, lambda-calculus, lisp, currying, higher-order-function, wikipedia&lt;/p&gt;

&lt;h2 id=&#34;closure&#34;&gt;Closure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Closure_(computer_programming)&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that explains the concept of closures and the usual confusion between closure and lambda. Also some applications.&lt;/p&gt;

&lt;p&gt;Discusses closures as a way of deferring execution and implementing object-oriented (OO) systems&lt;/p&gt;

&lt;p&gt;Tags: wikipedia, closure, object-orientation, lambda-expression&lt;/p&gt;

&lt;h2 id=&#34;zen-story-the-master-archer&#34;&gt;Zen Story: The Master Archer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.thedailyzen.org/2015/06/23/zen-story-the-master-archer/&#34; target=&#34;_blank&#34;&gt;this story&lt;/a&gt; by Charlie Ambler about perfectionism and deep study, exemplified by the general that retires to study archery and the child who draws targets around the arrows.&lt;/p&gt;

&lt;p&gt;Tags: charlie-amber, master, student, zen, story&lt;/p&gt;

&lt;h2 id=&#34;loosely-coupled&#34;&gt;Loosely Coupled&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.bwhaley.com/loosely-coupled&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ben Whaley about how to loosely couple services introducing a queue and the difference in patterns between push and pull communication.&lt;/p&gt;

&lt;p&gt;Tags: ben-whaley, push, pull, coupling, loose-coupling, service, queue, aws&lt;/p&gt;

&lt;h2 id=&#34;being-good-at-programming-competitions-correlates-negatively-with-being-good-on-the-job&#34;&gt;Being good at programming competitions correlates negatively with being good on the job&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched the small video and the discussion about programmers&amp;rsquo; talent at &lt;a href=&#34;http://www.catonmat.net/blog/programming-competitions-work-performance/&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt;. By Peteris Krumins.&lt;/p&gt;

&lt;p&gt;The original video explains that being good at a programming contest correlates negatively with skill at a programming job, even if the company hires them.&lt;/p&gt;

&lt;p&gt;The discussion explains the analogy with height and the NBA and concludes that this parameter should be preponderated with less importance than others.&lt;/p&gt;

&lt;p&gt;Tags: google, peter-norvig, nba, analogy, programming-contest, programming-skill, peteris-krumins&lt;/p&gt;

&lt;h2 id=&#34;on-functors&#34;&gt;On Functors&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.catonmat.net/blog/on-functors/&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; by Peteris Krumins of what the functors are in different languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++: function objects&lt;/li&gt;
&lt;li&gt;Standard ML: generic implementation of interfaces. They allow to compose structures&lt;/li&gt;
&lt;li&gt;Haskell: structure containing zero or more objects that can be converted to another structure containing the other objects. It&amp;rsquo;s an homomorphism between two categories.&lt;/li&gt;
&lt;li&gt;Prolog: built-in predicate for self-inspection and the atom at the start of the structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: peteris-krumins, comparison, haskell, c-plus-plus, standard-ml, prolog, functor&lt;/p&gt;

&lt;h2 id=&#34;recursive-regular-expressions&#34;&gt;Recursive Regular Expressions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.catonmat.net/blog/recursive-regular-expressions/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on recursive regular expressions by Peteris Krumins.&lt;/p&gt;

&lt;p&gt;In it, he lightly describes how a regular expression relates to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Context-free_grammar&#34; target=&#34;_blank&#34;&gt;Context-Free Grammar&lt;/a&gt; and the language support for Perl to include recursive regular expressions. Based on the examples (e.g., &lt;code&gt;0^n1^n&lt;/code&gt;), it really clicked to me that this could be expressed as a recursive function, with its base case and the recursive one. Also that it &amp;ldquo;depends on solutions to smaller instances of the same problem&amp;rdquo; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Recursion_(computer_science)&#34; target=&#34;_blank&#34;&gt;wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Tags: peteris-krumins, regular-expression, recursion, recursive-regular-expression, perl, context-free-grammar, formal-language-theory&lt;/p&gt;

&lt;h2 id=&#34;in-functional-programming-what-is-a-functor&#34;&gt;In Functional Programming, what is a functor?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/2030863/in-functional-programming-what-is-a-functor/2031421#2031421&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt;, by Norman Ramsey, on what is a functor.&lt;/p&gt;

&lt;p&gt;He explains in simple words what the concept is and how a type can belong to the class functor. Examples in haskell.&lt;/p&gt;

&lt;p&gt;Tags: norman-ramsey, functor, stack-overflow, haskell, type-class, class, map, fmap&lt;/p&gt;

&lt;h2 id=&#34;functors&#34;&gt;Functors&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.clojure.net/2013/01/19/Functors/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jim Duey explaining functors in Clojure. He introduces a couple of notes of Haskell but all of the examples are in Clojure. Explains functors, a subset of it called applicatives, and the two libraries he has created.&lt;/p&gt;

&lt;p&gt;Tags: jim-duey, functor, clojure, haskell&lt;/p&gt;

&lt;h2 id=&#34;10-tips-for-proper-application-logging&#34;&gt;10 Tips for Proper Application Logging&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javacodegeeks.com/2011/01/10-tips-proper-application-logging.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tomasz Nurkiewicz about tips on logging:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reduce side effects&lt;/li&gt;
&lt;li&gt;use categories and levels&lt;/li&gt;
&lt;li&gt;connection with external systems&lt;/li&gt;
&lt;li&gt;handling exceptions&lt;/li&gt;
&lt;li&gt;automatically / manually reading logging files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: tomasz-nurkiewicz, logging, sl4j, log4j, tip&lt;/p&gt;

&lt;h2 id=&#34;what-is-duck-typing&#34;&gt;What is &amp;ldquo;duck typing&amp;rdquo;?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ericlippert.com/2014/01/02/what-is-duck-typing/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert about duck typing&lt;/p&gt;

&lt;p&gt;Tags: duck-typing, eric-lippert, type-system, c-sharp&lt;/p&gt;

&lt;h2 id=&#34;yagni&#34;&gt;Yagni&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve reread &lt;a href=&#34;http://martinfowler.com/bliki/Yagni.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Martin Fowler on the cost of developing features that are not needed&lt;/p&gt;

&lt;p&gt;Tags: martin-fowler, yagni, article, misunderstanding&lt;/p&gt;

&lt;h2 id=&#34;learn-haskell&#34;&gt;Learn Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.youtube.com/watch?v=JJlI5FPTbgE&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Jordan Medlock on learning haskell, explaining the basics and how to use the REPL&lt;/p&gt;

&lt;p&gt;Tags: haskell, repl, jordan-medlock, beginner, video&lt;/p&gt;

&lt;h2 id=&#34;learn-haskell-1&#34;&gt;Learn Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.youtube.com/watch?v=JJlI5FPTbgE&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Jordan Medlock on learning haskell, explaining the basics and how to use the REPL&lt;/p&gt;

&lt;p&gt;Tags: haskell, repl, jordan-medlock, beginner, video&lt;/p&gt;

&lt;h2 id=&#34;tmux-the-terminal-multiplexer&#34;&gt;TMUX - The Terminal Multiplexer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read these two parts: (&lt;a href=&#34;http://blog.hawkhost.com/2010/06/28/tmux-the-terminal-multiplexer/&#34; target=&#34;_blank&#34;&gt;one&lt;/a&gt;, &lt;a href=&#34;http://blog.hawkhost.com/2010/07/02/tmux-%E2%80%93-the-terminal-multiplexer-part-2&#34; target=&#34;_blank&#34;&gt;two&lt;/a&gt;) of an introduction guide to &lt;code&gt;tmux&lt;/code&gt; (the unix terminal multiplexer) by Cody from Hawk Host.&lt;/p&gt;

&lt;p&gt;In it, he explains the basics of tmux and the main differences with &lt;code&gt;screen&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Tags: cody, hawk-host, tmux, how-to&lt;/p&gt;

&lt;h2 id=&#34;thermodynamics-and-garbage-collection&#34;&gt;Thermodynamics and Garbage Collection&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pipeline.com/~hbaker1/ThermoGC.html&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; by Henry G. Baker that explains the analogy of the garbage collection (&amp;ldquo;a freezer&amp;rdquo;) and thermodynamics, where the state mutator (th program, also an oven) modifies the garbage heap and introduces / extracts entropy into the system.&lt;/p&gt;

&lt;p&gt;Comparison between entropy and lack of information, using the theories from Shannon, Maxwell-Boltzmann. There&amp;rsquo;s a reference to the knapsack problem and to simulated annealing.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a gentle introduction to thermodynamics in layman terms: heat, temperature, microstates, macrostates, reversability, etc.&lt;/p&gt;

&lt;p&gt;In this paper it is also reflected (in macro vs micro states) that the sum all parts is simpler than the single ones (i.e., Information Hiding)&lt;/p&gt;

&lt;p&gt;Tags: henry-baker, thermodynamics, microstate, macrostate, analogy, simulated-annealing, garbage-collection, shannon, information, maxwell-boltzmann, freezer, oven, entropy&lt;/p&gt;

&lt;h2 id=&#34;how-we-ended-up-with-microservices&#34;&gt;How we ended up with microservices&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://philcalcado.com/2015/09/08/how_we_ended_up_with_microservices.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, by Phil Calçado, where he talks about his stay at SoundCloud:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the value stream map: from X days to Y&lt;/li&gt;
&lt;li&gt;reorganizing teams into service teams&lt;/li&gt;
&lt;li&gt;conway&amp;rsquo;s law and teams being responsible for support. Also, being given full authority&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: phil-calcado, soundcloud, microservice, team-split, value-stream-mapping, conversion, reorganization&lt;/p&gt;

&lt;h2 id=&#34;lisp-is-still-a-secret-weapon&#34;&gt;Lisp is still a secret weapon&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://kep.io/is-lisp-still-a-secret-weapon/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Judd Keppel where he explains it is a good idea that Clojure / ClojureScript continues to be a secret, not known among developers. Cites the article &amp;lsquo;Beating the averages&amp;rsquo; by Paul Graham and the amount of available packages in npm, maven central, etc&lt;/p&gt;

&lt;p&gt;Tags: paul-graham, judd-keppel, clojure, clojurescript, weapon, developer&lt;/p&gt;

&lt;h2 id=&#34;perceptron&#34;&gt;Perceptron&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Perceptron&#34; target=&#34;_blank&#34;&gt;this wikipedia&lt;/a&gt; article that explains the single-layer and multi-layer perceptron. First designed to be a machine (hardware), but later an algorithm for supervised machine learning. Worked by Minsky &amp;amp; Papert and invented by Frank Rosenblatt in 1958.&lt;/p&gt;

&lt;p&gt;Tags: peceptron, artificial-intelligence, machine-learning, frank-rosenblatt, 1958, marvin-minsky, seymour-papert&lt;/p&gt;

&lt;h2 id=&#34;is-c-a-strongly-typed-or-a-weakly-typed-language&#34;&gt;Is C# a strongly typed or a weakly typed language?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ericlippert.com/2012/10/15/is-c-a-strongly-typed-or-a-weakly-typed-language/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, in the form of a dialogue between Eric Lippert and himself about the C# language and its type system.&lt;/p&gt;

&lt;p&gt;Tags: type-system, c-sharp, eric-lippert, dialogue, strongly-typed, weakly-typed, language&lt;/p&gt;

&lt;h2 id=&#34;diseño-por-contratos-construyendo-software-confiable&#34;&gt;Diseño por contratos: construyendo software confiable&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.revista.unam.mx/vol.4/num5/art11/sep_art11.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; that explains design by contract, based on the Hoare triplet, pre-post condition, method and class invariant. With examples in Eiffel, Java about a package sender company. Also explains pre/post with inheritance. By Gerardo Rossel and Andrea Manna. In Spanish.&lt;/p&gt;

&lt;p&gt;Tags: gerardo-rossel, andrea-manna, design-by-contract, unam-mx, eiffel, java, precondition, postcondition, trust, quality, hoare-triplet, method-invariant, class-invariant&lt;/p&gt;

&lt;h2 id=&#34;the-inevitable-return-of-cobol&#34;&gt;The Inevitable Return of COBOL&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.hackerrank.com/the-inevitable-return-of-cobol/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains the current state of COBOL in programming and systems. Written by Ritika Trikha&lt;/p&gt;

&lt;p&gt;Tags: ritika-trikha, cobol, programming-language, retirement, median-age&lt;/p&gt;

&lt;h2 id=&#34;the-risky-eclipse-of-statisticians&#34;&gt;The Risky Eclipse of Statisticians&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.hackerrank.com/the-risky-eclipse-of-statisticians/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; where Ritika Trikha explains the current situation regarding Big Data and the statiscian jobs. How Big Data is in demand but the latter are not and what effects this might have.&lt;/p&gt;

&lt;p&gt;Tags: ritika-trikha, bootcamp, programming, hiring, big-data, analysis, statistics&lt;/p&gt;

&lt;h2 id=&#34;give-it-five-minutes&#34;&gt;Give it five minutes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://signalvnoise.com/posts/3124-give-it-five-minutes&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jason Fried where he explains why we should give ideas time to sink in and marinate, before dismissing them. Ideas are so fragile that it is better to let them live for a while before dismissing them. This also applies for thoughts (other people&amp;rsquo;s or your own).&lt;/p&gt;

&lt;p&gt;Tags: jason-fried, idea, think, startup, blue-hat, thinking-hat,  six-thinking-hats, red-hat&lt;/p&gt;

&lt;h2 id=&#34;reading-clojure-stacktraces&#34;&gt;Reading Clojure Stacktraces&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jayfields.com/2012/06/reading-clojure-stacktraces.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jay Fields on reading clojure stacktraces. Very similar to &amp;ldquo;Clojure Stack Traces for the Uninitiated&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: jay-fields, clojure, stacktrace&lt;/p&gt;

&lt;h2 id=&#34;clojure-stack-traces-for-the-uninitiated&#34;&gt;Clojure Stack Traces for the Uninitiated&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/connor-mendenhall/2014/09/12/clojure-stacktraces.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how to interpret clojure stacktraces. Written by Connor Mendenhall&lt;/p&gt;

&lt;p&gt;Tags: connor-mendenhall, clojure, stacktrace&lt;/p&gt;

&lt;h2 id=&#34;javascript-type-inference&#34;&gt;JavaScript type inference&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve found (and played) with &lt;a href=&#34;http://www.ccs.neu.edu/home/dimvar/jstypes.html&#34; target=&#34;_blank&#34;&gt;this JavaScript type inference engine&lt;/a&gt;. Written in Javascript (and available online). Written by Dimitrios Vardoulakis.&lt;/p&gt;

&lt;p&gt;Tags: javascript-type-inference, type-inference, type-inference-algorithm, dimitrios-vardoulakis, cfa2&lt;/p&gt;

&lt;h2 id=&#34;alternatives-to-boolean-parameters&#34;&gt;Alternatives to boolean parameters&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/dariusz-pasciak/2015/05/28/alternatives-to-boolean-parameters.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining alternatives to sending a boolean parameter to decide on the contents of the function. Written by Dariusz Pasciak&lt;/p&gt;

&lt;p&gt;As I heard some time ago, if a function receives a boolean to decide on what to do, it will for sure have more than one responsibility: one for the false value and one for the true value.&lt;/p&gt;

&lt;p&gt;Tags: dariusz-pasciak, boolean, srp, boolean-parameter&lt;/p&gt;

&lt;h2 id=&#34;why-are-web-uploads-so-painful&#34;&gt;Why Are Web Uploads So Painful?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/why-are-web-uploads-so-painful/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on web uploads being painful. By Jeff Atwood. The screenshots feel old (2007) and some of the problems have already been solved.&lt;/p&gt;

&lt;p&gt;Tags: jeff-atwood, article, upload, browser&lt;/p&gt;

&lt;h2 id=&#34;can-your-team-pass-the-elevator-test&#34;&gt;Can Your Team Pass The Elevator Test?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/can-your-team-pass-the-elevator-test/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the elevator test by Jeff Atwood.&lt;/p&gt;

&lt;p&gt;Tags: jeff-atwood, article, elevator-test, assumption, microsoft-bob, vision, product, feature&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>