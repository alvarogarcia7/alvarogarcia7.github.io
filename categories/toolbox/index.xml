<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/toolbox/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/toolbox/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>On private but leaked information in a SaaS</title>
      <link>https://alvarogarcia7.github.io/blog/2019/11/04/private-leaked-information-saas/</link>
      <pubDate>Mon, 04 Nov 2019 10:22:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/11/04/private-leaked-information-saas/</guid>
      <description>

&lt;p&gt;This is another tool for your toolbox: how to uncorrelate public and private information.&lt;/p&gt;

&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;

&lt;p&gt;Context: there are clients who have sensitive information. Some is just &amp;lsquo;companies being stealth&amp;rsquo; (e.g., don&amp;rsquo;t want to make public until launching), some is just protected by a Non-Disclosure Agreement (NDA), some are protected by security clearance. The more sensitive, the greater protection needed. This tool applies to all sensitive information, regardless of where it&amp;rsquo;s stored or how it is used.&lt;/p&gt;

&lt;p&gt;More context: there are applications (i.e., SaaS) better installed in the cloud (e.g., expensive or impossible to install on-premise).&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Having sensitive information on the cloud is delicate. There is a fine balance needed to achieve the perfect equilibrium between security, confort, data privacy, cost (among others). Even when using private resources, there is information leaking to the public (i.e., people not included in the designated circle).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take an example: we create a git repository in an organization, on an online git vendor. For that, we choose the strictest security measures available (e.g. private repositories; private organization details &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;). Even then, there&amp;rsquo;s an overlooked piece of information that many times cannot be hidden: the URL.&lt;/p&gt;

&lt;p&gt;See:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://gitvendor.com/organization/repository
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both &lt;code&gt;organization&lt;/code&gt; and &lt;code&gt;repository&lt;/code&gt; can be leaked to the public. Even if they&amp;rsquo;re not published (i.e., only available with a link), you can check whether this has been registered or not. Should you have a exposed-enough profile, when there are rumours that your company will launch a new product, people can investigate whether this domain/repo/organization has been registered.&lt;/p&gt;

&lt;p&gt;This is one reason why, in the past, projects are designed to use a &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_Microsoft_codenames&#34; target=&#34;_blank&#34;&gt;codename&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;We can use &amp;ndash;at least&amp;ndash; two techniques for uncorrelating private information from public information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alias: choose a catchy name as a codename. Such as Utopia for Microsoft Bob, Longhorn for Windows Vista&lt;/li&gt;
&lt;li&gt;Random data: choose a randomly-generated id (e.g., UUID), that is sufficiently random not to be guessed by chance, that does not relate in any way to the project. The downside to this is that it actually bears no relation to the thing, therefore making it more difficult to remember.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: *nix-like systems can generate uuid with &lt;code&gt;uuidgen&lt;/code&gt; (&lt;a href=&#34;http://man7.org/linux/man-pages/man1/uuidgen.1.html&#34; target=&#34;_blank&#34;&gt;man page&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Make a wise choice of where to put your sensitive information.&lt;/p&gt;

&lt;p&gt;When you can choose a SaaS solution, keep information private as needed. Be careful with the information you leak. When you are forced to use something public, you can use a codename or random data.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;This is not available in all git vendors that I&amp;rsquo;ve reviewed.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Also, because the final project name has not been decided yet (e.g., removes choosing the project name from the critical path to start a project).
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Automatically keeping the intermediate history of your work using git</title>
      <link>https://alvarogarcia7.github.io/blog/2019/05/29/keeping-intermediate-history-work-git/</link>
      <pubDate>Wed, 29 May 2019 22:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/05/29/keeping-intermediate-history-work-git/</guid>
      <description>

&lt;p&gt;This is another tool for your toolbox: using git to automatically document your development process (special cases only.)&lt;/p&gt;

&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;

&lt;p&gt;When I&amp;rsquo;m spiking a feature, I usually get in the zone (e.g., Csikszentmihalyi&amp;rsquo;s Flow), and I can forget my good engineering practices, searching for that desired answer. After a few of those bouts of coding, you realize you&amp;rsquo;re wandering. You circle around, get lost, get back on track, then get lost again. You might or might not reach your goal.&lt;/p&gt;

&lt;p&gt;I sometimes lose the path that took me to the solution. This is helpful when you want to get back on your tracks (e.g., you broke something along the way). But I forget to commit as often as I should.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;To document, I came up with a (very) simple tool to document the path:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
  date
  git add .
  git commit -am &lt;span class=&#34;s2&#34;&gt;&amp;quot;Automatic: Save progress&amp;quot;&lt;/span&gt;
  sleep &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will create automatic (i.e., meaningless) commits every 10 seconds. It covers the need of &amp;ldquo;not forgetting to save the progress&amp;rdquo;. This script is so small, that there is no point in creating a tool around it. Type it as a one-liner when you need it.&lt;/p&gt;

&lt;p&gt;When you create meaningful increments (e.g., a milestone), when you decide that you should save your progress, you can commit as well. The downside is that the automatic commits will pollute your log, and the diff will not represent the full delta. For that, you can create a marker (i.e., one that does not have any diff - use the &lt;code&gt;allow-empty&lt;/code&gt; parameter). That kind of commit is like a &lt;a href=&#34;https://en.wikipedia.org/wiki/Marker_interface_pattern&#34; target=&#34;_blank&#34;&gt;Marker Interface Pattern&lt;/a&gt;, to pinpoint a specific delta:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;git commit -am &lt;span class=&#34;s2&#34;&gt;&amp;quot;Marker: Completed the ....&amp;quot;&lt;/span&gt; --allow-empty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you want to see all the changes, &lt;code&gt;git diff&lt;/code&gt; between two commits (e.g., Markers) or you can rebase with squash (&lt;code&gt;git rebase --interactive&lt;/code&gt;) into another branch (so you keep this history).&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automatic commits to save your progress. To save the progress.&lt;/li&gt;
&lt;li&gt;Manual commits to pinpoint milestones. To document.&lt;/li&gt;
&lt;li&gt;Tools help you be more productive&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>