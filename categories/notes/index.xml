<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/notes/</link>
    <description>Recent content in Notes on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Mar 2015 22:44:42 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Open Space: Code reviews</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews/</link>
      <pubDate>Mon, 16 Mar 2015 22:44:42 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews/</guid>
      <description>

&lt;p&gt;Today we&amp;rsquo;ve discussed about code reviews on &lt;a href=&#34;http://www.meetup.com/Barcelona-Software-Craftsmanship/events/220293683/&#34; target=&#34;_blank&#34;&gt;this open space&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;

&lt;p&gt;These are my notes, in no particular order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reduce information silos all around the company, as everyone [technical] can participate in these events&lt;/li&gt;
&lt;li&gt;raise the &amp;ldquo;just arrived&amp;rdquo; people&amp;rsquo;s knowledge [Difficult to hit the ground up and running, but these code review sessions can help]&lt;/li&gt;
&lt;li&gt;invest one person as &amp;lsquo;sheriff&amp;rsquo; for the sprint: they will take care of static analysis tools (such as sonar) and continuous integration (CI; such as jenkins). They will make sure others follow the working agreements&lt;/li&gt;
&lt;li&gt;In the academic environment, some teams do share their patches via mailing lists and this makes it much slower to adapt and review changes [As compared to an on-line sharing system - like web-based interfaces to distributed version control systems] As this team doesn&amp;rsquo;t have a CI tool, they must test it / try it manually before reviewing the code.&lt;/li&gt;
&lt;li&gt;Pair programming does not remove the need for code review [This has been surfaced twice]&lt;/li&gt;
&lt;li&gt;Your work is not more important than your team members&amp;rsquo; one. [Related to not having time to code review]&lt;/li&gt;
&lt;li&gt;Do code reviews include architecture? [We&amp;rsquo;ve agreed that the architecture to some degree should be discussed before code reviews]&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Troll review&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Anyone can veto pull requests [By opening a question; do not allow for pull requests to be closed with open questions]&lt;/li&gt;
&lt;li&gt;A 15-minute time slot everyday to code review [As code hygiene; Done right after lunch,  breakfast or just before leaving, when you&amp;rsquo;re tired]&lt;/li&gt;
&lt;li&gt;Code review tasks have higher priority than other tasks [Do not take other tasks if there are code reviews to do]&lt;/li&gt;
&lt;li&gt;Code reviews put a lot of pressure so people learn and the knowledge level equalizes across the team&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;My conclusions, even though some of them were not shared by everyone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most of the people approve of code review practices: either they are doing them or are trying to apply them at their clients. (Warning: this was a code review meetup, so there&amp;rsquo;s a bias: people not interested in them won&amp;rsquo;t come). No one was against doing them.&lt;/li&gt;
&lt;li&gt;Code reviews have a cost, although it is beneficial to do them&lt;/li&gt;
&lt;li&gt;Should your teammates not want to participate in the code review after agreeing on doing them, appeal to their professionalism / accountability, then to their time (stated before), then troll them: after a few (healthy) trolling code review sessions, people will feel more comfortable reviewing and being reviewed. Special mention to Miguel who coined (?)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; the term: troll review.&lt;/li&gt;
&lt;li&gt;Great way of equalizing the (technical) knowledge level within the team&lt;/li&gt;
&lt;li&gt;Great way of reduce information silos across the whole company&lt;/li&gt;
&lt;li&gt;They can be fun if you do them properly&lt;/li&gt;
&lt;li&gt;The need for code reviews do not disappear when pair programming: as long as you have a personal attachment to the code, you might not see its defects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;your-own&#34;&gt;Your own&lt;/h2&gt;

&lt;p&gt;Should you have any conclusions to share, please add a pull request to this &lt;a href=&#34;https://github.com/alvarogarcia7/blog_source&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt; or do it as a comment.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;after searching some ten minutes on the internet, there are only a couple of questions on meta.codereview stackoverflow, but not related to this. &lt;strong&gt;Update&lt;/strong&gt;: In &lt;a href=&#34;https://twitter.com/mallyvai/status/314260072798752768&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;, Vaibhav Mallya talks about a #trollReview, related to code. So, unfortunately, Miguel, you&amp;rsquo;re not the first one. But there are fewer than 10 results on twitter.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Talk: &#39;Is TDD Dead? Of course not! But what´s all the fuzz about then?&#39; by Emily Bache</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-but-whats-all-the-fuzz-about-then-by-emily-bache/</link>
      <pubDate>Tue, 06 Jan 2015 15:47:47 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-but-whats-all-the-fuzz-about-then-by-emily-bache/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve just seen this talk: &lt;a href=&#34;https://www.youtube.com/watch?v=PCEHRFHKZSk&#34; target=&#34;_blank&#34;&gt;Is TDD dead? Of course not! But what´s all the fuzz about then?&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/emilybache&#34; target=&#34;_blank&#34;&gt;Emily Bache&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###My notes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;deliberate vs accidental learning (around minute 19)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;do not be an evangelist for tdd but rather &amp;ldquo;come learn tdd, come at a dojo with us!&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;points to &lt;a href=&#34;https://twitter.com/tastapod&#34; target=&#34;_blank&#34;&gt;Dan North&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;www.youtube.com/watch?v=SPj-23z-hQA&#34; target=&#34;_blank&#34;&gt;talk&lt;/a&gt; (at the same foo café)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;points to her book - &lt;a href=&#34;https://leanpub.com/codingdojohandbook&#34; target=&#34;_blank&#34;&gt;The Coding Dojo Handbook&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;points to &lt;a href=&#34;http://cyber-dojo.org/&#34; target=&#34;_blank&#34;&gt;cyber dojo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;design is hard whether you do TDD or not&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/dhh&#34; target=&#34;_blank&#34;&gt;dhh&lt;/a&gt;: too much focus on unit test.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;I thought we got rid of best practices in agile&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;different kinds of advice for each kind of target (eg, based on experience level)&lt;/li&gt;
&lt;li&gt;points to self-testing code (by &lt;a href=&#34;https://twitter.com/martinfowler&#34; target=&#34;_blank&#34;&gt;Martin Fowler&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;problem: the test suite is no longer in sync with the production code&lt;/li&gt;
&lt;li&gt;points to approval testing:

&lt;ul&gt;
&lt;li&gt;code kata &amp;ldquo;minesweeper&amp;rdquo;&lt;/li&gt;
&lt;li&gt;test data + code produces output data&lt;/li&gt;
&lt;li&gt;I approve the data&lt;/li&gt;
&lt;li&gt;Useful for full features&lt;/li&gt;
&lt;li&gt;Useful for asserting on difficult parts like images&lt;/li&gt;
&lt;li&gt;realistic users to generate tests&lt;/li&gt;
&lt;li&gt;tool to manage these &amp;ldquo;approval tests&amp;rdquo;. Easy way of managing tests cases&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://texttest.org&#34; target=&#34;_blank&#34;&gt;TextTest&lt;/a&gt; is one of these tools&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###Her conclusions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Watch out the fundamentalism&lt;/li&gt;
&lt;li&gt;TDD might take you to too many layers of indirection&lt;/li&gt;
&lt;li&gt;The share of each test (end to end, integration, unit) depends on each project / part&lt;/li&gt;
&lt;li&gt;Many TDD pieces of advice is directed to novices. When you&amp;rsquo;re not, you should know when to stop listening&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PS: I&amp;rsquo;ve first seen this video in &lt;a href=&#34;http://garajeando.blogspot.com/2015/01/interesting-talk-is-tdd-dead-of-course.html&#34; target=&#34;_blank&#34;&gt;garajeando&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>