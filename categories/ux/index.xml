<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/ux/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/ux/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in December 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/12/01/self-study-in-december-2016/</link>
      <pubDate>Thu, 01 Dec 2016 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/12/01/self-study-in-december-2016/</guid>
      <description>

&lt;h2 id=&#34;a-docker-fork-talk-of-a-split-is-now-on-the-table&#34;&gt;A Docker Fork: Talk of a Split Is Now on the Table&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/docker-fork-talk-split-now-table/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Alex Williams and Joab Jackson about the possible split in the Docker environment following Docker&amp;rsquo;s and other providers&amp;rsquo; product roadmaps. Each own has their policies and priorities and they collide in this case&lt;/p&gt;

&lt;p&gt;Tags: docker, alex-williams, joab-jackson, container, oci, kubernetes, devops, tool&lt;/p&gt;

&lt;h2 id=&#34;an-ode-to-boring-creating-open-and-stable-container-world&#34;&gt;An Ode to Boring: Creating Open and Stable Container World&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Bob Wise, in which he describes the state of the Docker tool and the Docker Engine. Asks for some kind of Docker long-time support (LTS - like Ubuntu does, for example) and to create a boring environment so applications on top of the containers itself can thrive.&lt;/p&gt;

&lt;p&gt;The difference here is that application creators want some boring infrastructure because their product is the application on top, not the container themselves. Docker&amp;rsquo;s product, on the other hand, is the containers and the Engine.&lt;/p&gt;

&lt;p&gt;Tags: ode, bob-wise, devops, tool, request, kubernetes, docker-swarm&lt;/p&gt;

&lt;h2 id=&#34;how-to-use-npm-link&#34;&gt;How to use &amp;lsquo;npm link&amp;rsquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://tobyret.github.io/NPM-Link/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Toby Retallick about using npm link.&lt;/p&gt;

&lt;p&gt;Tags: npm, tool, npm-link, toby-retallick&lt;/p&gt;

&lt;h2 id=&#34;valve-s-flat-management-structure-like-high-school&#34;&gt;Valve&amp;rsquo;s flat management structure &amp;lsquo;like high school&amp;rsquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.wired.co.uk/article/valve-management-jeri-ellsworth&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Philippa Warr on the flat management hierarchy at Valve (a company cited as having some Teal practices) and its shortcomings.&lt;/p&gt;

&lt;p&gt;Tags:  philippa-warr, teal, teal-organization, valve, management, flat-hierarchy&lt;/p&gt;

&lt;h2 id=&#34;the-hazards-of-going-on-autopilot&#34;&gt;The hazards of going on autopilot&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.newyorker.com/science/maria-konnikova/hazards-automation&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Maria Konnikova on how pilots get distracted (their minds drift off) when not stimulated.&lt;/p&gt;

&lt;p&gt;The article introduces the idea of human-centric automation and letting the computer check what the human is doing (to tell when it is wrong), rather than the human what the computer is doing wrong.&lt;/p&gt;

&lt;p&gt;Tags: maria-konnikova, automation, autopilot, complacency&lt;/p&gt;

&lt;h2 id=&#34;the-cobra-effect-that-is-disabling-paste-on-password-fields&#34;&gt;The “Cobra Effect” that is disabling paste on password fields&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.troyhunt.com/the-cobra-effect-that-is-disabling/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on disabling paste on password fields, how that forces using a weaker password. Also names the &amp;lsquo;Cobra Effect&amp;rsquo;. By Troy Hunt&lt;/p&gt;

&lt;p&gt;Tags: troy-hunt, copy-paste, paste, password-field, cobra-effect, disable-paste, usability, ux&lt;/p&gt;

&lt;h2 id=&#34;of-course-smart-homes-are-targets-for-hackers&#34;&gt;Of course smart homes are targets for hackers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mjg59.dreamwidth.org/45483.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matthew Garrett on how the security of Internet of Things devices is as important as traditional devices and what rules should a consumer follow to decide whether a device is secure or not.&lt;/p&gt;

&lt;p&gt;Tags: matthew-garrett, security, internet-of-things, iot, hacker&lt;/p&gt;

&lt;h2 id=&#34;open-salaries-outcomes&#34;&gt;Open Salaries: Outcomes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.lunarlogic.io/2016/open-salaries-outcomes&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Paweł Brodziński on how the open salaries has affected them in their company (Lunar Logic):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;removing the bottleneck for salary reviews&lt;/li&gt;
&lt;li&gt;making more often and better the feedback process&lt;/li&gt;
&lt;li&gt;people more involved in running the company&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: teal, company, salary, teal-organization, company-practice, open-salary, pawel-brodzinski&lt;/p&gt;

&lt;h2 id=&#34;one-more-vote-for-functional-languages&#34;&gt;One more vote for functional languages&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.simeonov.com/2013/03/04/one-more-vote-for-functional-languages/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Simeon Simeonov in which he describes how setting a watch expression can cause a side effect (e.g. VBA, Ruby).&lt;/p&gt;

&lt;p&gt;Tags: immutability, simeon-simeonov, watch-expression&lt;/p&gt;

&lt;h2 id=&#34;the-fastest-way-to-learn-a-new-programming-language&#34;&gt;The fastest way to learn a new programming language&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.simeonov.com/2013/02/11/the-fastest-way-to-learn-a-new-programming-language/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; the ways the author (Simeon Simeonov) goes while learning a new language:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Curious George. During this phase, which usually lasts only a few hours and involves semi-random exploration of tutorials, reference manuals, blog posts and StackOverflow posts, I get my bearings straight, find analogies between the new language and ones I’m more familiar with and choose my initial tooling.&lt;/li&gt;
&lt;li&gt;Mario Bros. -&amp;gt; Super Mario Bros. In this phase, which usually lasts several days, I try to bring the meta-patterns I’m comfortable working with from familiar environments (the sewers of New York) to the new environment (the Mushroom Kingdom). It involves diving head first into advanced language features and building various utilities that I find lacking in the environment, e.g., debugging tools, all in the context of early prototypes of whatever it is that I need to work on.&lt;/li&gt;
&lt;li&gt;Bull in a china shop. This is the phase where my noble goal of bending the language to the way I solve problems meets the harsh reality of me being a neophyte in its intricacies. The observable attributes of this phase are lower velocity, increased use of expletives and more time on StackOverflow. The amount of time in this phase varies. The “Eureka!” moments are fun but overall it’s a dip in the experience curve.&lt;/li&gt;
&lt;li&gt;Singin’ in the Rain. With newly acquired knowledge and improved language-specific testing/debugging skills, the bull gently transforms into Fred Astaire. Coding is a lot of fun again. It’s time to go to production.&lt;/li&gt;
&lt;li&gt;Obi-Wan Kenobi. Over time, the interaction with the new language improves the meta-patterns I use for problem solving. I tend to use less and simpler code using natural language idioms as opposed to generalized utilities &amp;amp; abstractions. It’s like changing from using the Force to allowing the Force to do things through you. It takes a long time to get here. More often than not, I never do.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;He also describes several (advanced) techniques that helped him better understand programming:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;In C++ template, meta-programming [&amp;hellip;]&lt;/li&gt;
&lt;li&gt;In Java, dynamic bytecode generation [&amp;hellip;]&lt;/li&gt;
&lt;li&gt;In Python [&amp;hellip;] stateful decorators [&amp;hellip;]&lt;/li&gt;
&lt;li&gt;In Ruby, metaprogramming  [&amp;hellip;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: simeon-simeonov, metaprogramming, ruby, decorator, python, bytecode-generation, java, cpp, learning-programming-language, programming-language, curious-georde, mario-bros, bull-in-a-china-shop, singing-in-the-rain, obi-wan-kenobi, eureka, learning&lt;/p&gt;

&lt;h2 id=&#34;the-marvellously-mysterious-javascript-maybe-monad&#34;&gt;The marvellously mysterious javascript Maybe monad&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://jrsinclair.com/articles/2016/marvellously-mysterious-javascript-maybe-monad/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by James Sinclair in which he tries to explain monads in javascript, explaining how promises work, then establishing the parallellism between a promise and a type of monad.&lt;/p&gt;

&lt;p&gt;Tags: monad, javascript, promise, james-sinclair, analogy, functional-programming, monad-explanation&lt;/p&gt;

&lt;h2 id=&#34;debug-trace&#34;&gt;Debug.Trace&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read both &lt;a href=&#34;https://hackage.haskell.org/package/base-4.9.0.0/docs/Debug-Trace.html&#34; target=&#34;_blank&#34;&gt;the documentation&lt;/a&gt; and the source code for &lt;code&gt;Debug.Trace&lt;/code&gt;, a haskell module that contains functions to trace a program execution. It is interesting to see how a function performs side effects and its signature seems to be pure.&lt;/p&gt;

&lt;p&gt;The main trick is to use &lt;code&gt;unsafePerformIO&lt;/code&gt;, which points to &lt;code&gt;unsafeDupablePerformIO&lt;/code&gt;, which performs a side effect on the Real World (&lt;code&gt;runRW#&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Tags: haskell, debug, monitoring, source-code, real-world&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in October 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/10/01/self-study-in-october-2016/</link>
      <pubDate>Sat, 01 Oct 2016 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/10/01/self-study-in-october-2016/</guid>
      <description>

&lt;h2 id=&#34;should-engineers-design&#34;&gt;Should Engineers Design?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.capwatkins.com/should-engineers-design&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Cap Watkins where he explains the relationship between designers and programmers and how to get the latter involved in the design / UX / UI process.&lt;/p&gt;

&lt;p&gt;Tags: cap-watkins, design, ux, ui, exchange, cross-functional&lt;/p&gt;

&lt;h2 id=&#34;the-sliding-scale-of-giving-a-fuck&#34;&gt;The Sliding Scale of Giving a Fuck&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.capwatkins.com/the-sliding-scale-of-giving-a-fuck&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Cap Watkins where he explains that different topics have a different importance to each one of us: this topic might be very important for someone else, ergo, it makes mores sense to evaluate their option more carefully. When your importance level is not so high, you can take the other option easily.&lt;/p&gt;

&lt;p&gt;Tags: cap-watkins, sliding-scale, decision-making, discussion, argument, convincing, people&lt;/p&gt;

&lt;h2 id=&#34;nuevos-retos&#34;&gt;Nuevos retos&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.modestosanjuan.com/nuevos-retos/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Modesto San Juan about him leaving Codesai and joining a new adventure. In Spanish.&lt;/p&gt;

&lt;p&gt;Tags: career-change, modesto-san-juan, codesai, carlos-ble, .net&lt;/p&gt;

&lt;h2 id=&#34;muchas-gracias-modesto&#34;&gt;Muchas gracias Modesto&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.codesai.com/2016/10/muchas-gracias-modesto/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, by Carlos Blé and the rest of the Codesai team, saying goodbye to Modesto San Juan, commenting on their experiences working with him.&lt;/p&gt;

&lt;p&gt;Tags: career-change, modesto-san-juan, codesai, carlos-ble, .net&lt;/p&gt;

&lt;h2 id=&#34;introducing-ticket-magpie&#34;&gt;Introducing…Ticket Magpie&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://thetestdoctor.wordpress.com/2016/10/11/introducing-ticket-magpie/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Dan Billing about the a honeypot application he has to teach about security and attacks.&lt;/p&gt;

&lt;p&gt;Tags: david-hatanian, dan-billing, ticket-magpie, honeypot, security, attack&lt;/p&gt;

&lt;h2 id=&#34;destructuring-assignment&#34;&gt;Destructuring assignment&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&#34; target=&#34;_blank&#34;&gt;destructuring assignment page&lt;/a&gt; at MDN&lt;/p&gt;

&lt;p&gt;Tags: javascript, destructuring, mdn&lt;/p&gt;

&lt;h2 id=&#34;10-lessons-i-learned-from-doing-my-first-real-startup&#34;&gt;10 Lessons I Learned from Doing My First Real Startup&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://degoes.net/articles/precog-lessons-learned&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, a post-mortem analysis of his company, precog, with 10 items that he learned from it.&lt;/p&gt;

&lt;p&gt;Tags: john-deo-goes, precog, post-mortem, startup, lessons-learned&lt;/p&gt;

&lt;h2 id=&#34;stop-being-nice-and-just-tell-the-fucking-truth-already&#34;&gt;Stop Being &amp;ldquo;Nice&amp;rdquo; and Just Tell the Fucking Truth Already&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://degoes.net/articles/be-nice-not-nice&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about giving honest feedback vs being a nice guy. The author concludes that the former is, in fact, the latter.&lt;/p&gt;

&lt;p&gt;Tags: feedback, honesty, comparison, john-de-goes&lt;/p&gt;

&lt;h2 id=&#34;haskell-s-type-classes-we-can-do-better&#34;&gt;Haskell&amp;rsquo;s Type Classes: We Can Do Better&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://degoes.net/articles/principled-typeclasses&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the abuse of newtype classes in haskell to overcome some language limitations.&lt;/p&gt;

&lt;p&gt;This article has helped me understand better inheritance, in the sections orphans and laws.&lt;/p&gt;

&lt;p&gt;Also suggests that the compiler could check at compile time that the children impose more restrictive (more specific) laws than the parent, given that any children must comply with the inherited rules (liskov substitution principle)&lt;/p&gt;

&lt;p&gt;Tags: inheritance, liskov, lsp, solid, john-de-goes, functional-programming, haskell, type-classes,  newtype-clases, monoid, law&lt;/p&gt;

&lt;h2 id=&#34;introducing-the-three-amigos&#34;&gt;Introducing the Three Amigos&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.scrumalliance.org/community/articles/2013/2013-april/introducing-the-three-amigos&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ryan Thomas Hewitt about the Three Amigos meeting, to better define a feature&lt;/p&gt;

&lt;p&gt;Tags: ryan-hewitt, three-amigos, agile, meeting, process, scrum&lt;/p&gt;

&lt;h2 id=&#34;apple-just-told-the-world-it-has-no-idea-who-the-mac-is-for&#34;&gt;Apple just told the world it has no idea who the Mac is for&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/charged-tech/apple-just-told-the-world-it-has-no-idea-who-the-mac-is-for-722a2438389b&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Owen Williams on the latest presentation by Apple.&lt;/p&gt;

&lt;p&gt;Tags: owen-williams, mac, apple, strategy&lt;/p&gt;

&lt;h2 id=&#34;sigil&#34;&gt;Sigil&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this page for the &lt;a href=&#34;https://en.wikipedia.org/wiki/Sigil_(computer_programming)&#34; target=&#34;_blank&#34;&gt;sigil&lt;/a&gt;, or the symbol attached to the variable. An example is the &lt;code&gt;$&lt;/code&gt; in Perl or the earmuffs in Clojure (&lt;code&gt;*out*&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Tags: sigil, wikipedia, example, computer-science&lt;/p&gt;

&lt;h2 id=&#34;list-of-languages-that-compile-to-js&#34;&gt;List of languages that compile to JS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of programming languages that compile to JS. By Jeremy Ashkenas and the community&lt;/p&gt;

&lt;p&gt;Tags: jeremy-ashkenas, compilation, compiled-language, compiled-to-javascript, compiled-javascript, javascript&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in May 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/05/01/self-study/</link>
      <pubDate>Sun, 01 May 2016 00:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/05/01/self-study/</guid>
      <description>

&lt;h2 id=&#34;being-a-developer-after-40&#34;&gt;Being A Developer After 40&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.freecodecamp.com/being-a-developer-after-40-3c5dd112210c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Adrian Kosmaczewski on the required topics to be a developer at age 40 and keep enjoying it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forget The Hype&lt;/li&gt;
&lt;li&gt;Choose Your Galaxy Wisely&lt;/li&gt;
&lt;li&gt;Learn About Software History&lt;/li&gt;
&lt;li&gt;Keep on Learning&lt;/li&gt;
&lt;li&gt;Teach&lt;/li&gt;
&lt;li&gt;Workplaces Suck&lt;/li&gt;
&lt;li&gt;Know Your Worth&lt;/li&gt;
&lt;li&gt;Send The Elevator Down&lt;/li&gt;
&lt;li&gt;LLVM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He references galaxy, the big stack you are positioned (JVM, .net, PHP, etc). He makes a special mention of the LLVM&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Take conscious decisions in your life. Be aware of your actions and their effect. Do not blush or be embarrased for changing your opinions. Say “I’m sorry” when required. Listen. Do not be a hotshot. Have integrity and self-respect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recommends these books:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dealers of Lightning by Michael A. Hiltzik&lt;/li&gt;
&lt;li&gt;Revolution in the Valley by Andy Hertzfeld&lt;/li&gt;
&lt;li&gt;The Cathedral and the Bazaar by Eric S. Raymond&lt;/li&gt;
&lt;li&gt;The Success of Open Source by Steven Weber&lt;/li&gt;
&lt;li&gt;The Old New Thing by Raymond Chen&lt;/li&gt;
&lt;li&gt;The Mythical Man Month by Frederick P. Brooks Jr.&lt;/li&gt;
&lt;li&gt;Peopleware by Tom DeMarco and Tim Lister&lt;/li&gt;
&lt;li&gt;The Psychology of Software Programming by Gerald M. Weinberg&lt;/li&gt;
&lt;li&gt;Facts and Fallacies of Software Engineering by Robert L. Glass&lt;/li&gt;
&lt;li&gt;The Design of Everyday Things by Don Norman&lt;/li&gt;
&lt;li&gt;Agile!: The Good, the Hype and the Ugly by Bertrand Meyer&lt;/li&gt;
&lt;li&gt;Rework by Jason Fried and David Heinemeier Hansson&lt;/li&gt;
&lt;li&gt;Geekonomics by David Rice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: adrian-kosmaczewski, career, profession, age, galaxy, long-term, book&lt;/p&gt;

&lt;h2 id=&#34;firing-people&#34;&gt;Firing people&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://zachholman.com/talk/firing-people&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Zach Holman on firing people at your current work, both from the perspective of the employee (fired), employer, coworker.&lt;/p&gt;

&lt;p&gt;Also explains his personal experience of being fired from Github.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You’ll know the difference between doing far and away your best work, and doing work that is still good, but just nominally better than what you’ve been doing. Once you catch yourself adjusting to that incremental progression… maybe it’s time to leave, to change things up&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: zach-holman, github, team-management, firing, coworker, employee, employer, job, relationship, next&lt;/p&gt;

&lt;h2 id=&#34;10-design-principles-for-developers&#34;&gt;10 design principles — for developers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@nirbenita/the-10-design-heuristics-for-developers-1e70a9dc58a7&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains what are the 10 design principles for programmers, as outlined by Jakob Nielsen. The article itself is by Nir Benita&lt;/p&gt;

&lt;p&gt;Tags: design-principle, ux, jakob-nielsen, nir-benita, usability, testing, list&lt;/p&gt;

&lt;h2 id=&#34;design-patterns-coming-full-circle-part-two&#34;&gt;Design Patterns — Coming Full Circle, Part Two&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/swlh/design-patterns-coming-full-circle-part-two-ced2c69e4724#.x8ud7eeqm&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains how design patterns can be observed and then discovered and shows a list of four patterns dot working with data, by flux.io. Article by Jen Carlile&lt;/p&gt;

&lt;p&gt;Tags: design-pattern, data, pattern, flux, flux-io, pattern-catalog, jen-carlile&lt;/p&gt;

&lt;h2 id=&#34;why-i-m-ending-my-github-streak-after-844-days&#34;&gt;Why I’m Ending my Github Streak after 844 Days&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@karan/why-i-m-ending-my-github-streak-after-844-days-80fd014dc8df&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Karan Goel on the mechanics of following a pattern, of an activity sliced in small parts (1 problem a day or half an hour) and how this can be counterproductive sometimes.&lt;/p&gt;

&lt;p&gt;Discusses ROI of this type of activity at the beginning of your career and later.&lt;/p&gt;

&lt;p&gt;Tags: karan-goel, github, streak, python, code, everyday, practice, deliberate-practice, career, career-management&lt;/p&gt;

&lt;h2 id=&#34;good-lessons-learned-from-past-jobs&#34;&gt;Good lessons learned from past jobs&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.kartones.net/post/good-lessons-learned-from-past-jobs/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Diego &amp;lsquo;Kartones&amp;rsquo; on a synopsis of his work experience, job by job and what he has learned on each job.&lt;/p&gt;

&lt;p&gt;Tags: diego-kartones, job, professional-career, career&lt;/p&gt;

&lt;h2 id=&#34;too-much-work-in-progress&#34;&gt;Too Much Work In Progress&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://monospacedmonologues.com/post/144137568985/too-much-work-in-progress&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Samir Talwar on factors that indicate work in progress.&lt;/p&gt;

&lt;p&gt;Tags: wip, work-in-progress, list, samir-talwar&lt;/p&gt;

&lt;h2 id=&#34;testdouble&#34;&gt;TestDouble&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.martinfowler.com/bliki/TestDouble.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Martin Fowler describing the test doubles that Gerard Meszaros describes in xUnit Test Patterns.&lt;/p&gt;

&lt;p&gt;Tags: test-double, martin-fowler, gerard-meszaros, stub, fake, mock, dummy, spy, xunit, junit, pattern, test-pattern&lt;/p&gt;

&lt;h2 id=&#34;scaling-to-12-million-concurrent-connections-how-migratorydata-did-it&#34;&gt;Scaling to 12 Million Concurrent Connections: How MigratoryData Did It&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://mrotaru.wordpress.com/2013/10/10/scaling-to-12-million-concurrent-connections-how-migratorydata-did-it/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mihai Rotaru on how MigratoryData scaled to 12 million concurrent connections in a 1U server. They explain what optimizations they did in order to achieve this.&lt;/p&gt;

&lt;p&gt;Tags: migratorydata, mihai-rotaru, concurrent-connection, 1u-server, scalability, websocket&lt;/p&gt;

&lt;h2 id=&#34;do-what-you-love&#34;&gt;Do what you love&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/do-what-you-love-jorge-diaz&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jorge Diaz on doing what takes you out of your comfort zone, changing careers, and life-work in general.&lt;/p&gt;

&lt;p&gt;Cites this &lt;a href=&#34;https://www.ted.com/talks/scott_dinsmore_how_to_find_work_you_love/transcript?language=en&#34; target=&#34;_blank&#34;&gt;TED talk: How to find work you love&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: jorge-diaz, work, life, career, comfort-zone, scott-dinsmore, career-management&lt;/p&gt;

&lt;h2 id=&#34;jhipster-the-best-way-to-breed-a-new-app&#34;&gt;JHipster - The best way to breed a new app&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/olbpetersson/jhipster-the-best-way-to-breed-a-new-app&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Ola Petersson, where he describes the architecture and contents of the jHipster, its pros and cons.&lt;/p&gt;

&lt;p&gt;Tags: jhipster, ola petersson, java, code-generation, code-generator, microservice&lt;/p&gt;

&lt;h2 id=&#34;how-going-to-coding-events-helped-me-get-an-awesome-job&#34;&gt;How going to coding events helped me get an awesome job&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.freecodecamp.com/networking-at-meet-ups-getting-hired-f0f7c4f4681a&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Gwendolyn Faraday on how to kickstart a career in web development, attending events, pairing and networking. That netted her some interviews to start programming for a living.&lt;/p&gt;

&lt;p&gt;Tags: networking, gwendolyn-faraday, event, job, learn-to-code&lt;/p&gt;

&lt;h2 id=&#34;maze-generation-algorithm-recap&#34;&gt;Maze Generation: Algorithm Recap&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://weblog.jamisbuck.org/2011/2/7/maze-generation-algorithm-recap&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of maze-generation algorithms by Jamis Buck. Including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;recursive backtracker&lt;/li&gt;
&lt;li&gt;Eller’s algorithm&lt;/li&gt;
&lt;li&gt;Kruskal’s algorithm&lt;/li&gt;
&lt;li&gt;Prim’s algorithm&lt;/li&gt;
&lt;li&gt;recursive division algorithm&lt;/li&gt;
&lt;li&gt;Aldous-Broder algorithm&lt;/li&gt;
&lt;li&gt;Wilson’s algorithm&lt;/li&gt;
&lt;li&gt;Hunt-and-Kill algorithm&lt;/li&gt;
&lt;li&gt;Growing Tree algorithm&lt;/li&gt;
&lt;li&gt;Binary Tree algorithm&lt;/li&gt;
&lt;li&gt;Sidewinder algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: recursive-backtracker,eller-algorithm,kruskal-algorithm,prim-algorithm,recursive-division-algorithm,aldous-broder-algorithm,wilson-algorithm,hunt-and-kill-algorithm,growing-tree-algorithm,binary-tree-algorithm,sidewinder-algorithm, jamis-buck, maze, maze-generation, algorithm, list&lt;/p&gt;

&lt;h2 id=&#34;the-poverty-of-constraints&#34;&gt;The Poverty of Constraints&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://weblog.jamisbuck.org/2016/3/19/poverty-of-constraints.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jamis Buck on interpreting two Korean proverbs in the world of software:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A dutiful son comes from a poor home&lt;/li&gt;
&lt;li&gt;A poor house has many children&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: proverb, korea, philosophy, software, constraint, jamis-buck&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>