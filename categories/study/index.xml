<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>study on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/study/</link>
    <description>Recent content in study on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jul 2024 10:03:01 +0400</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/study/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python 3 Boilerplate for Non-Productive environments (e.g., Kata, Study)</title>
      <link>https://alvarogarcia7.github.io/blog/2024/07/28/python-3-boilerplate/</link>
      <pubDate>Sun, 28 Jul 2024 10:03:01 +0400</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2024/07/28/python-3-boilerplate/</guid>
      <description>I have created a Python 3 boilerplate for non-productive environments. It can be found here: https://github.com/alvarogarcia7/python-boilerplate
Main features Its main features are:
 It can be run locally (local python) or in a docker container (official docker image) It has a Makefile with the most common commands to drive the project. Also, other makefiles in this folder Batteries included: mypy, pytest, pre-commit. Permissive license: MIT. The updated version is here Currently, it is using python 3.</description>
    </item>
    
    <item>
      <title>Comparing options for parametrized testing in javascript</title>
      <link>https://alvarogarcia7.github.io/blog/2017/02/26/comparing-options-for-parametrized-testing-in-javascript/</link>
      <pubDate>Sun, 26 Feb 2017 15:42:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/02/26/comparing-options-for-parametrized-testing-in-javascript/</guid>
      <description>We explore how to use parametrized tests (example in java, example in c#)
The tests are written using mocha syntax: describe, it. Using chai for expectations: assert.
Note: the example used below (adding to an array) is simple enough to be understood by everybody, without having to explain the domain. The real tests can have a more complicated environment or domain. This is just an example.
Using a custom syntax This is just an example of some possible syntax, not using any (currently) existing framework.</description>
    </item>
    
  </channel>
</rss>
