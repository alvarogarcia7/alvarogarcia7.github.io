<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/monad/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/monad/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in January 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/01/01/self-study-in-january-2017/</link>
      <pubDate>Sun, 01 Jan 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/01/01/self-study-in-january-2017/</guid>
      <description>

&lt;h2 id=&#34;translation-from-haskell-to-javascript-of-selected-portions-of-the-best-introduction-to-monads-i-ve-ever-read&#34;&gt;Translation from Haskell to JavaScript of selected portions of the best introduction to monads I’ve ever read&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.jcoglan.com/2011/03/05/translation-from-haskell-to-javascript-of-selected-portions-of-the-best-introduction-to-monads-ive-ever-read/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by James Coglan, introducing monads.&lt;/p&gt;

&lt;p&gt;About composability:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The symmetry of the argument and return types is what makes these functions composable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;symmetric input and output types&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Guide to basic monadic functions:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;lift, which converts a &amp;lsquo;simple’ function into a debuggable function
bind, which converts a debuggable function into a composable form
unit, which converts a simple value into the format required for debugging, by placing it in a container&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The basic definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So what is a monad? Well, it’s a design pattern. It says that whenever you have a class of functions that accept one type of thing and return another type of thing, there are two functions that can be applied across this class to make them composable:&lt;/p&gt;

&lt;p&gt;There is a &lt;code&gt;bind&lt;/code&gt; function that transforms any function so that accepts the same type as it returns, making it composable
There is a &lt;code&gt;unit&lt;/code&gt; function that wraps a value in the type accepted by the composable functions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[I]t’s a very useful design pattern to be aware of because it helps you spot accidental complexity: code that isn’t dealing directly with the problem at hand, but which is dealing with glueing data types together&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: monad, monad-explanation, haskell, javascript, james-coglan, bind, unit, lift&lt;/p&gt;

&lt;h2 id=&#34;you-could-have-invented-monads-and-maybe-you-already-have&#34;&gt;You Could Have Invented Monads! (And Maybe You Already Have.)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html&#34; target=&#34;_blank&#34;&gt;this tutorial&lt;/a&gt; by Dan Piponi, in which he slowly introduces monads, using examples from everyday life.&lt;/p&gt;

&lt;p&gt;Tags: dan-piponi, monad, monad-explanation, haskell&lt;/p&gt;

&lt;h2 id=&#34;monads-part-one&#34;&gt;Monads, part one&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/02/21/monads-part-one/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes monads as a design pattern that &amp;ldquo;can sneak up on you&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-two&#34;&gt;Monads, part two&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/02/25/monads-part-two/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes monad examples in the C# code. Also describes what an &amp;lsquo;amplifier&amp;rsquo; is. I relate it to composing behavior.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An &amp;ldquo;amplifier&amp;rdquo; is something that increases the representational power of their &amp;ldquo;underlying&amp;rdquo; type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming, amplifier&lt;/p&gt;

&lt;h2 id=&#34;monads-part-three&#34;&gt;Monads, part three&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/02/28/monads-part-three/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes how to wrap a value in a monadic wrapper (&lt;code&gt;unit&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-four&#34;&gt;Monads, part four&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/04/monads-part-four/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he explains the second function (&lt;code&gt;bind&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-five&#34;&gt;Monads, part five&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/07/monads-part-five/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he explains the three laws, which are later compressed into two (&lt;code&gt;unit&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-six&#34;&gt;Monads, part six&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/11/monads-part-six/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he explains the logical identity of applying the function inside a monad and outside a monad.&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-seven&#34;&gt;Monads, part seven&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/14/monads-part-seven/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he states the three laws of monads:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Applying the construction function to a given instance of the monad produces a logically identical instance of the monad.&lt;/li&gt;
&lt;li&gt;Applying a function to the result of the construction function on a value, and applying that function to the value directly, produces two logically identical instances of the monad.&lt;/li&gt;
&lt;li&gt;Applying to a value a first function followed by applying to the result a second function, and applying to the original value a third function that is the composition of the first and second functions, produces two logically identical instances of the monad.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-eight&#34;&gt;Monads, part eight&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/18/monads-part-eight/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes the monad terms he was using other, more common names (&lt;code&gt;unit&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-nine&#34;&gt;Monads, part nine&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/21/monads-part-nine/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he creates a &lt;code&gt;Tainted&lt;/code&gt; monad, which is basically a &lt;code&gt;Nullable&lt;/code&gt; or &lt;code&gt;Maybe&lt;/code&gt; monad&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-ten&#34;&gt;Monads, part ten&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/25/monads-part-ten/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes &lt;code&gt;Where&lt;/code&gt; (as the query syntax form) using the &lt;code&gt;bind&lt;/code&gt; signature&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-eleven&#34;&gt;Monads, part eleven&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/28/monads-part-eleven/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes the &amp;ldquo;additive monad&amp;rdquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;There is a zero value of every construction of the monadic type.&lt;/li&gt;
&lt;li&gt;There is a way to add two monads with the same underlying type together.&lt;/li&gt;
&lt;li&gt;The zero value is the identity of the add operation.&lt;/li&gt;
&lt;li&gt;Using bind to apply any function to the zero produces the zero.&lt;/li&gt;
&lt;li&gt;Using bind to apply the function a=&amp;gt;zero to any M&amp;lt;A&amp;gt; produces the zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming, additive-monad&lt;/p&gt;

&lt;h2 id=&#34;monads-part-twelve&#34;&gt;Monads, part twelve&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/04/02/monads-part-twelve/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he explains how the &lt;code&gt;SelectMany&lt;/code&gt; could be implemented (but it is not implemented in practice)&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-thirteen&#34;&gt;Monads, part thirteen&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/04/03/monads-part-thirteen/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he suggests reading a similar article on the Task comonad&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming, comonad&lt;/p&gt;

&lt;h2 id=&#34;tasks-monads-and-linq&#34;&gt;Tasks, Monads, and LINQ&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blogs.msdn.microsoft.com/pfxteam/2013/04/03/tasks-monads-and-linq/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Stephen Toub in which he explains the comonad &lt;code&gt;Task&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A comonad:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] dual of a monad, a triple consisting of the type and two operators: &lt;code&gt;Extract&lt;/code&gt; (the flip of &lt;code&gt;Unit&lt;/code&gt;/&lt;code&gt;Return&lt;/code&gt;) and &lt;code&gt;Extend&lt;/code&gt; (the flip of &lt;code&gt;Bind&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: comonad, monad, monad-explanation, stephen-toub, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;5-questions-every-unit-test-must-answer&#34;&gt;5 Questions Every Unit Test Must Answer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/javascript-scene/what-every-unit-test-needs-f6cd34d9836d&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; (titled as a listicle) by Eric Elliot about unit tests:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;What are you testing?&lt;/li&gt;
&lt;li&gt;What should it do?&lt;/li&gt;
&lt;li&gt;What is the actual output?&lt;/li&gt;
&lt;li&gt;What is the expected output?&lt;/li&gt;
&lt;li&gt;How can the test be reproduced?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: eric-elliott, javascript, unit-test, test&lt;/p&gt;

&lt;h2 id=&#34;why-you-should-be-planning-for-2018-not-2017&#34;&gt;Why You Should be Planning for 2018, Not 2017.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/the-mission/why-you-should-be-planning-for-2018-not-2017-7c8fea3e2e52&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Benjamin P. Hardy on motivation, planning and designing your life.&lt;/p&gt;

&lt;p&gt;Some quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] having the power to make choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The right to choice&lt;/li&gt;
&lt;li&gt;The responsibility to choose&lt;/li&gt;
&lt;li&gt;The results of choice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[&amp;hellip;] hope reflects your perceptions regarding your capacity to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clearly conceptualize goals&lt;/li&gt;
&lt;li&gt;develop the specific strategies to reach those goals (i.e., pathways thinking)&lt;/li&gt;
&lt;li&gt;initiate and sustain the motivation for using those strategies (i.e., agency thinking).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[&amp;hellip;] motivation involves three components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the value you place on your goal&lt;/li&gt;
&lt;li&gt;your belief that specific behaviors will actually facilitate the outcomes you desire&lt;/li&gt;
&lt;li&gt;your belief in your own ability to successfully execute the behaviors requisite to achieving your goals&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: benjamin-hardy, motivation, life, planning, long-term-plans&lt;/p&gt;

&lt;h2 id=&#34;get-5-better&#34;&gt;Get 5% Better&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.farnamstreetblog.com/2016/03/five-percent-better/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, in which the author explains how compound interest does not only apply to investing and saving but also personal improvement.&lt;/p&gt;

&lt;p&gt;Tags: kaizen, personal-improvement, compound-interest&lt;/p&gt;

&lt;h2 id=&#34;hunter-s-thompson-s-letter-on-finding-your-purpose-and-living-a-meaningful-life&#34;&gt;Hunter S. Thompson’s Letter on Finding Your Purpose and Living a Meaningful Life&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.farnamstreetblog.com/2014/05/hunter-s-thompson-to-hume-logan/&#34; target=&#34;_blank&#34;&gt;this letter&lt;/a&gt; from Hunter S. Thompson to his friend Hume Logan, containing advice on living your own life: must find your own way, decide between floating or swimming to your goal and strive to be yourself.&lt;/p&gt;

&lt;p&gt;Tags: hunter-thompson, hume-logan, advice, psychology, life&lt;/p&gt;

&lt;h2 id=&#34;the-japanese-philosophy-of-kaizen-offers-an-effective-manageable-way-to-achieve-long-term-goals&#34;&gt;The Japanese philosophy of Kaizen offers an effective, manageable way to achieve long-term goals&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://qz.com/867711/the-japanese-philosophy-of-kaizen-offers-an-effective-manageable-way-to-achieve-long-term-goals/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Thomas Oppong on kaizen, or continuous improvement, and how it applies like compound interest to your life.&lt;/p&gt;

&lt;p&gt;Tags: kaizen, continous-improvement, thomas-oppong, compound-interest, life, psychology&lt;/p&gt;

&lt;h2 id=&#34;preparing-for-a-software-interview&#34;&gt;Preparing for a Software Interview&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://42hire.com/preparing-for-a-software-interview-6d0392a3d72c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Alvaro Videla on interviewing technical people.&lt;/p&gt;

&lt;p&gt;Tags: recruitement, interviewing, interview, alvaro-videla&lt;/p&gt;

&lt;h2 id=&#34;why-recursive-data-structures&#34;&gt;Why Recursive Data Structures?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://raganwald.com/2016/12/27/recursive-data-structures.html&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Reginald “Raganwald” Braithwaite, on which he introduces the relationship between data structures and algorithms. Explains how the algorithm can be split into parts, following the data structure.&lt;/p&gt;

&lt;p&gt;Uses a library containing a function called &amp;lsquo;multirec&amp;rsquo; for recursion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/multirec&#34; target=&#34;_blank&#34;&gt;a candidate&lt;/a&gt; library, in haskell&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lazutkin.com/blog/2008/06/30/using-recursion-combinators-javascript/&#34; target=&#34;_blank&#34;&gt;another candidate&lt;/a&gt; library, in javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: reginald-braithwaite, recursive-data-structure, quadtree, javascript, functional-programming, essay, data-structure, isomorphic, tree, multirec, linrec, tailrec, haskell&lt;/p&gt;

&lt;h2 id=&#34;leading-by-example&#34;&gt;Leading by Example&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.codinghorror.com/leading-by-example/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jeff Atwood on how the best leadership comes from doing, rather than telling how to do it. From being a leader rather than being a boss.&lt;/p&gt;

&lt;p&gt;Suggests further reads.&lt;/p&gt;

&lt;p&gt;Tags: leadership, team-lead, leading-by-example, jeff-atwood, gerald-weinberg&lt;/p&gt;

&lt;h2 id=&#34;discipline-makes-strong-developers&#34;&gt;Discipline Makes Strong Developers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.codinghorror.com/discipline-makes-strong-developers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jeff Atwood on a project sucess should not be attributed to a language or framework, but to the team&amp;rsquo;s and individuals&amp;rsquo; discipline.&lt;/p&gt;

&lt;p&gt;Also explains how small projects require different levels of discipline than large projects.&lt;/p&gt;

&lt;p&gt;Tags: leadership, discipline, nasa, code-complete, coding-horror, jeff-atwood&lt;/p&gt;

&lt;h2 id=&#34;effectively-integrating-into-software-development-teams&#34;&gt;Effectively Integrating Into Software Development Teams&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://dennisforbes.ca/index.php/2006/01/29/effectively-integrating-into-software-development-teams/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Dennis Forbes about authority and discipline in a team.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One organization’s Enterprise solution is another organization’s short sighted mistake.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: shiny, dennis-forbes, discipline, authority, psychology, politics&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in December 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/12/01/self-study-in-december-2016/</link>
      <pubDate>Thu, 01 Dec 2016 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/12/01/self-study-in-december-2016/</guid>
      <description>

&lt;h2 id=&#34;a-docker-fork-talk-of-a-split-is-now-on-the-table&#34;&gt;A Docker Fork: Talk of a Split Is Now on the Table&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/docker-fork-talk-split-now-table/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Alex Williams and Joab Jackson about the possible split in the Docker environment following Docker&amp;rsquo;s and other providers&amp;rsquo; product roadmaps. Each own has their policies and priorities and they collide in this case&lt;/p&gt;

&lt;p&gt;Tags: docker, alex-williams, joab-jackson, container, oci, kubernetes, devops, tool&lt;/p&gt;

&lt;h2 id=&#34;an-ode-to-boring-creating-open-and-stable-container-world&#34;&gt;An Ode to Boring: Creating Open and Stable Container World&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Bob Wise, in which he describes the state of the Docker tool and the Docker Engine. Asks for some kind of Docker long-time support (LTS - like Ubuntu does, for example) and to create a boring environment so applications on top of the containers itself can thrive.&lt;/p&gt;

&lt;p&gt;The difference here is that application creators want some boring infrastructure because their product is the application on top, not the container themselves. Docker&amp;rsquo;s product, on the other hand, is the containers and the Engine.&lt;/p&gt;

&lt;p&gt;Tags: ode, bob-wise, devops, tool, request, kubernetes, docker-swarm&lt;/p&gt;

&lt;h2 id=&#34;how-to-use-npm-link&#34;&gt;How to use &amp;lsquo;npm link&amp;rsquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://tobyret.github.io/NPM-Link/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Toby Retallick about using npm link.&lt;/p&gt;

&lt;p&gt;Tags: npm, tool, npm-link, toby-retallick&lt;/p&gt;

&lt;h2 id=&#34;valve-s-flat-management-structure-like-high-school&#34;&gt;Valve&amp;rsquo;s flat management structure &amp;lsquo;like high school&amp;rsquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.wired.co.uk/article/valve-management-jeri-ellsworth&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Philippa Warr on the flat management hierarchy at Valve (a company cited as having some Teal practices) and its shortcomings.&lt;/p&gt;

&lt;p&gt;Tags:  philippa-warr, teal, teal-organization, valve, management, flat-hierarchy&lt;/p&gt;

&lt;h2 id=&#34;the-hazards-of-going-on-autopilot&#34;&gt;The hazards of going on autopilot&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.newyorker.com/science/maria-konnikova/hazards-automation&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Maria Konnikova on how pilots get distracted (their minds drift off) when not stimulated.&lt;/p&gt;

&lt;p&gt;The article introduces the idea of human-centric automation and letting the computer check what the human is doing (to tell when it is wrong), rather than the human what the computer is doing wrong.&lt;/p&gt;

&lt;p&gt;Tags: maria-konnikova, automation, autopilot, complacency&lt;/p&gt;

&lt;h2 id=&#34;the-cobra-effect-that-is-disabling-paste-on-password-fields&#34;&gt;The “Cobra Effect” that is disabling paste on password fields&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.troyhunt.com/the-cobra-effect-that-is-disabling/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on disabling paste on password fields, how that forces using a weaker password. Also names the &amp;lsquo;Cobra Effect&amp;rsquo;. By Troy Hunt&lt;/p&gt;

&lt;p&gt;Tags: troy-hunt, copy-paste, paste, password-field, cobra-effect, disable-paste, usability, ux&lt;/p&gt;

&lt;h2 id=&#34;of-course-smart-homes-are-targets-for-hackers&#34;&gt;Of course smart homes are targets for hackers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mjg59.dreamwidth.org/45483.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matthew Garrett on how the security of Internet of Things devices is as important as traditional devices and what rules should a consumer follow to decide whether a device is secure or not.&lt;/p&gt;

&lt;p&gt;Tags: matthew-garrett, security, internet-of-things, iot, hacker&lt;/p&gt;

&lt;h2 id=&#34;open-salaries-outcomes&#34;&gt;Open Salaries: Outcomes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.lunarlogic.io/2016/open-salaries-outcomes&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Paweł Brodziński on how the open salaries has affected them in their company (Lunar Logic):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;removing the bottleneck for salary reviews&lt;/li&gt;
&lt;li&gt;making more often and better the feedback process&lt;/li&gt;
&lt;li&gt;people more involved in running the company&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: teal, company, salary, teal-organization, company-practice, open-salary, pawel-brodzinski&lt;/p&gt;

&lt;h2 id=&#34;one-more-vote-for-functional-languages&#34;&gt;One more vote for functional languages&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.simeonov.com/2013/03/04/one-more-vote-for-functional-languages/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Simeon Simeonov in which he describes how setting a watch expression can cause a side effect (e.g. VBA, Ruby).&lt;/p&gt;

&lt;p&gt;Tags: immutability, simeon-simeonov, watch-expression&lt;/p&gt;

&lt;h2 id=&#34;the-fastest-way-to-learn-a-new-programming-language&#34;&gt;The fastest way to learn a new programming language&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.simeonov.com/2013/02/11/the-fastest-way-to-learn-a-new-programming-language/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; the ways the author (Simeon Simeonov) goes while learning a new language:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Curious George. During this phase, which usually lasts only a few hours and involves semi-random exploration of tutorials, reference manuals, blog posts and StackOverflow posts, I get my bearings straight, find analogies between the new language and ones I’m more familiar with and choose my initial tooling.&lt;/li&gt;
&lt;li&gt;Mario Bros. -&amp;gt; Super Mario Bros. In this phase, which usually lasts several days, I try to bring the meta-patterns I’m comfortable working with from familiar environments (the sewers of New York) to the new environment (the Mushroom Kingdom). It involves diving head first into advanced language features and building various utilities that I find lacking in the environment, e.g., debugging tools, all in the context of early prototypes of whatever it is that I need to work on.&lt;/li&gt;
&lt;li&gt;Bull in a china shop. This is the phase where my noble goal of bending the language to the way I solve problems meets the harsh reality of me being a neophyte in its intricacies. The observable attributes of this phase are lower velocity, increased use of expletives and more time on StackOverflow. The amount of time in this phase varies. The “Eureka!” moments are fun but overall it’s a dip in the experience curve.&lt;/li&gt;
&lt;li&gt;Singin’ in the Rain. With newly acquired knowledge and improved language-specific testing/debugging skills, the bull gently transforms into Fred Astaire. Coding is a lot of fun again. It’s time to go to production.&lt;/li&gt;
&lt;li&gt;Obi-Wan Kenobi. Over time, the interaction with the new language improves the meta-patterns I use for problem solving. I tend to use less and simpler code using natural language idioms as opposed to generalized utilities &amp;amp; abstractions. It’s like changing from using the Force to allowing the Force to do things through you. It takes a long time to get here. More often than not, I never do.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;He also describes several (advanced) techniques that helped him better understand programming:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;In C++ template, meta-programming [&amp;hellip;]&lt;/li&gt;
&lt;li&gt;In Java, dynamic bytecode generation [&amp;hellip;]&lt;/li&gt;
&lt;li&gt;In Python [&amp;hellip;] stateful decorators [&amp;hellip;]&lt;/li&gt;
&lt;li&gt;In Ruby, metaprogramming  [&amp;hellip;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: simeon-simeonov, metaprogramming, ruby, decorator, python, bytecode-generation, java, cpp, learning-programming-language, programming-language, curious-georde, mario-bros, bull-in-a-china-shop, singing-in-the-rain, obi-wan-kenobi, eureka, learning&lt;/p&gt;

&lt;h2 id=&#34;the-marvellously-mysterious-javascript-maybe-monad&#34;&gt;The marvellously mysterious javascript Maybe monad&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://jrsinclair.com/articles/2016/marvellously-mysterious-javascript-maybe-monad/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by James Sinclair in which he tries to explain monads in javascript, explaining how promises work, then establishing the parallellism between a promise and a type of monad.&lt;/p&gt;

&lt;p&gt;Tags: monad, javascript, promise, james-sinclair, analogy, functional-programming, monad-explanation&lt;/p&gt;

&lt;h2 id=&#34;debug-trace&#34;&gt;Debug.Trace&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read both &lt;a href=&#34;https://hackage.haskell.org/package/base-4.9.0.0/docs/Debug-Trace.html&#34; target=&#34;_blank&#34;&gt;the documentation&lt;/a&gt; and the source code for &lt;code&gt;Debug.Trace&lt;/code&gt;, a haskell module that contains functions to trace a program execution. It is interesting to see how a function performs side effects and its signature seems to be pure.&lt;/p&gt;

&lt;p&gt;The main trick is to use &lt;code&gt;unsafePerformIO&lt;/code&gt;, which points to &lt;code&gt;unsafeDupablePerformIO&lt;/code&gt;, which performs a side effect on the Real World (&lt;code&gt;runRW#&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Tags: haskell, debug, monitoring, source-code, real-world&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in November 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/11/01/self-study-in-november-2016/</link>
      <pubDate>Tue, 01 Nov 2016 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/11/01/self-study-in-november-2016/</guid>
      <description>

&lt;h2 id=&#34;advice-for-white-men&#34;&gt;Advice for white men&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.catehuston.com/blog/2016/01/28/advice-for-white-men/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Cate Huston about how advice affects different people.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But here are some things to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Advice on failure is different for people who are judged on performance rather than potential.&lt;/li&gt;
&lt;li&gt;Advice on saying no is different for people who aren’t appreciated for doing work for the collective… but who are punished if they don’t.&lt;/li&gt;
&lt;li&gt;Advice on negotiation is different for people who are perceived negatively when they do negotiate.&lt;/li&gt;
&lt;li&gt;Advice on choosing a new job is different for people who disproportionately experience harassment (it’s another factor to consider).&lt;/li&gt;
&lt;li&gt;Advice on raising your profile is different for people who are recognized for their advocacy more than their work.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: cate-huston, management, advice, psychology&lt;/p&gt;

&lt;h2 id=&#34;on-1-1s&#34;&gt;On 1:1s&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.catehuston.com/blog/2016/11/05/on-11s/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Cate Huston about one-on-ones (1:1s), that includes how she handles and the purpose of them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For me, 1:1s were about active relationship building, with a focus on the important-but-not urgent. But having built a relationships where we talked regularly and I listened, that created space for conversations to happen outside of the 1:1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: cate-huston, management, psychology, one-on-one&lt;/p&gt;

&lt;h2 id=&#34;microsoft-i-forgive-you&#34;&gt;Microsoft, I forgive you!&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://m.signalvnoise.com/microsoft-i-forgive-you-2fb6d6061a2c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Heinemeier Hansson (DHH) on why Microsoft has changed and why the author has forgiven past beefs.&lt;/p&gt;

&lt;p&gt;Tags: dhh, david-heinemeier-hansson, microsoft&lt;/p&gt;

&lt;h2 id=&#34;stop-writing-rambling-commit-messages&#34;&gt;Stop writing rambling commit messages&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stopwritingramblingcommitmessages.com/&#34; target=&#34;_blank&#34;&gt;this rant&lt;/a&gt; by Tim Pope on commit messages&lt;/p&gt;

&lt;p&gt;Tags: rant, commit-message, tim-pope, commit&lt;/p&gt;

&lt;h2 id=&#34;a-note-about-git-commit-messages&#34;&gt;A Note About Git Commit Messages&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tim Pope on git commits and tools to normalize the text and apply the rules he describes&lt;/p&gt;

&lt;p&gt;Tags: commit-message, tim-pope, commit, tool&lt;/p&gt;

&lt;h2 id=&#34;purely-functional-i-o&#34;&gt;Purely Functional I/O&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.infoq.com/presentations/io-functional-side-effects&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Runar Bjarnason on purely functional IO. In the first part, he introduces functional programming, referential transparency and functional IO. In the second part, he explains the types for IO and both the implementation in haskell and in scala.&lt;/p&gt;

&lt;p&gt;Tags: runar-bjarnason, haskell, scala, talk, video, functional-programming, functional-io, io&lt;/p&gt;

&lt;h2 id=&#34;12-signs-you-re-working-in-a-feature-factory&#34;&gt;12 Signs You’re Working in a Feature Factory&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hackernoon.com/12-signs-youre-working-in-a-feature-factory-44a5b938d6a2&#34; target=&#34;_blank&#34;&gt;this listicle&lt;/a&gt; by John Cutler on signs that a company is very centered in features rather than value.&lt;/p&gt;

&lt;p&gt;Tags: john-cutler, feature, value, product-management, product-development&lt;/p&gt;

&lt;h2 id=&#34;3-a-the-tao-of-monad&#34;&gt;3.a The Tao of Monad&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.schoolofhaskell.com/school/starting-with-haskell/basics-of-haskell/the-tao-of-monad&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Bartosz Milewski explaining the Monad under another lens.&lt;/p&gt;

&lt;p&gt;He draws some inspiration from Lao Tzu, in Tao Te Ching: TE as virtue, laziness.&lt;/p&gt;

&lt;p&gt;Tags: bartosz-milewski, monad, haskell, school-of-haskell, tao-te-ching, tao&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in February 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</link>
      <pubDate>Mon, 01 Feb 2016 02:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</guid>
      <description>

&lt;h2 id=&#34;software-and-all-that-comes-with-it&#34;&gt;Software and all that comes with it&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lanyrd.com/2011/fromthefront/sgfgw/&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about creating software and asking questions to deliver value, by Alberto Brandolini&lt;/p&gt;

&lt;p&gt;Tags: alberto-brandolini, software, slide, team-management, agile&lt;/p&gt;

&lt;h2 id=&#34;driving-your-dba-crazy-in-3-easy-steps&#34;&gt;Driving your DBA crazy in 3 easy steps&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lanyrd.com/2011/ddd-day-it/shzym&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about dealing with the knowledge that is present in the database, not expressed in ubiquitous language and cause of the low bus factor, by Alberto Brandolini&lt;/p&gt;

&lt;p&gt;Analogy between the movie The Shining and a model / entities / aggregates.&lt;/p&gt;

&lt;p&gt;Tags: ddd, model, entity, aggregate, team-management, dba, agile, ubiquitous-language, alberto-brandolini, bus-factor, slide&lt;/p&gt;

&lt;h2 id=&#34;shorter-feedback-is-not-always-bett&#34;&gt;Shorter Feedback is not Always Bett&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://facebook.com/notes/kent-beck/shorter-feedback-is-not-always-bett/1097086386990891&#34; target=&#34;_blank&#34;&gt;this note&lt;/a&gt; from Kent Beck on why shorter feedback loops might not always be better. I.e., why some processes take time to set in and results are not observable until that time.&lt;/p&gt;

&lt;p&gt;Tags:  kent-beck, feedback-loops, open-question, analogy&lt;/p&gt;

&lt;h2 id=&#34;la-regla-del-triple-check-para-ir-a-eventos&#34;&gt;La Regla del Triple Check para ir a eventos&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.bonillaware.com/regla-triple-check-para-ir-a-eventos&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Bonilla about a rule to help you decide attendance to events, in Spanish&lt;/p&gt;

&lt;p&gt;Tags: rule, time-management, david-bonilla, event, spanish, triple-check&lt;/p&gt;

&lt;h2 id=&#34;an-interview-with-charles-wetherell&#34;&gt;An interview with Charles Wetherell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://demin.ws/blog/english/2012/08/25/interview-with-charles-wetherell/&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt; by Alexander Demin about the interviewee&amp;rsquo;s book &amp;ldquo;Etudes for Programmers&amp;rdquo;. In it, they talk about the origin of the études, the author&amp;rsquo;s research interests and activities. Also about the book (written in 1978) and how computer science has changed since then.&lt;/p&gt;

&lt;p&gt;When asked about three things a programmer should know:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some ability to do formal mathematics. The level necessary to understand Hopcroft and Ullman combined with a little graph theory is enough. Discrete mathematics is essential; calculus is only necessary for folks working in special application areas.&lt;/p&gt;

&lt;p&gt;Some ability to write clearly in their native language. Dijkstra said that if a person couldn’t write their own language, they couldn’t write a correct program. (Well, that’s what I hope Dijkstra said!). Writing programs is essentially the same as writing a non-fiction essay. If you can’t make the step-by-step connections clearly in your own language, why would we think you could in C, for example?&lt;/p&gt;

&lt;p&gt;Remember that a program is primarily for communication with humans, not computers. When you write a program, the computer will do whatever you say. You must convince the humans who read the program that what you have asked the computer to do is the correct thing to do. Remember, the computer doesn’t care about correctness.&lt;/p&gt;

&lt;p&gt;The answer to the last question means that programs should always have the form of paragraphs of comments that describe the intention of the program followed by paragraphs of code that implement that intention. All of the formatting should be designed to make readers as able as possible to read the code easily; the compiler doesn’t care. In particular, follow conventions of mathematics and your native language, not those you found in some random language manual. Write the comments first and then write the code, not the other way around. If you don’t know what you want to achieve and why, any code you write is, by definition, incorrect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: charles-wetherell, alexander-demin, interview, book, etude, etudes-for-programmers, practice, ability, skill, list&lt;/p&gt;

&lt;h2 id=&#34;how-to-fix-javascript-maybe&#34;&gt;How to fix Javascript… maybe&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@wob/how-to-fix-javascript-maybe-8857819bfa16&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Drew Hamlett about the lack of style guide for javascript and how this affects the adoption of the language and the sprout of similar libraries.&lt;/p&gt;

&lt;p&gt;Suggests the creation of a standard style guide for javascript.&lt;/p&gt;

&lt;p&gt;Tags: drew-hamlett, javascript, style-guide, analysis&lt;/p&gt;

&lt;h2 id=&#34;isomorphic-javascript-devbeat-master-class&#34;&gt;Isomorphic JavaScript: #DevBeat Master Class&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/spikebrehm/a-28174727&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Spike Brehm on Isomorphic JavaScript and why it&amp;rsquo;s important: initial pageload and speed, reducing effort and duplication, SEO (crawlability).&lt;/p&gt;

&lt;p&gt;Tags: isomorphic-javascript, isomorphism, javascript, seo, crawler, frontend, app, application, fat-client, fat-server, thin-client, thin-server, ria-spike-brehm, slide&lt;/p&gt;

&lt;h2 id=&#34;open-sourcing-our-docker-images&#34;&gt;Open-sourcing our docker images&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.modulus.io/open-sourcing-our-docker-images&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brandon Cannaday about the Docker images that they have.&lt;/p&gt;

&lt;p&gt;Tags: docker, brandon-annaday, open-ource, image, container, modulus&lt;/p&gt;

&lt;h2 id=&#34;growing-up-in-an-open-source-world&#34;&gt;growing up in an open source world&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://fiveisprime.me/2015/02/18/growing-up-in-open-source/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matt Hernandez where he explains that fixing the style guide can limit your creativity and how the software is written in enterprise and open-source environments.&lt;/p&gt;

&lt;p&gt;Also about how developers grow when exposed to different style guides.&lt;/p&gt;

&lt;p&gt;Tags: style-guide, matt-hernandez, creativity, dreyfus-model, enterprise, open-source, programming&lt;/p&gt;

&lt;h2 id=&#34;hanlon-s-razor-and-working-with-young-engineers&#34;&gt;Hanlon&amp;rsquo;s Razor and working with young engineers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://fiveisprime.me/2013/07/27/young-engineers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matt Hernandez on the importance of understanding (and empathising) towards others&amp;rsquo; positions and worries.&lt;/p&gt;

&lt;p&gt;Cites the Hanlon Razor:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Never attribute to malice that which is adequately explained by ignorance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags:  hanlon-razor, empathy, team-management, ignorance, malice, matt-hernandez&lt;/p&gt;

&lt;h2 id=&#34;intro-to-sails-js&#34;&gt;Intro to sails.js&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://youtu.be/GK-tFvpIR7c&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt;, an introduction to the sails.js framework: a realtime nodejs server for creating REST APIs, inspired by Ruby on Rails.&lt;/p&gt;

&lt;p&gt;Tags: sailsjs, ruby-on-rails, ror, framework, video, introduction, mvc, rest-api, realtime, nodejs,&lt;/p&gt;

&lt;h2 id=&#34;node-js-and-hapi-creating-a-rest-api&#34;&gt;Node.js and hapi - creating a rest api&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.modulus.io/nodejs-and-hapi-create-rest-api&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about creating a REST API using &lt;a href=&#34;http://hapijs.com/&#34; target=&#34;_blank&#34;&gt;Hapi&lt;/a&gt;, a nodejs framework. Written by Matt Hernandez&lt;/p&gt;

&lt;p&gt;Tags: matt-hernandez, rest-api, nodejs, hapi, framework&lt;/p&gt;

&lt;h2 id=&#34;introducing-pokedex-org-a-progressive-webapp-for-pokémon-fans&#34;&gt;Introducing Pokedex.org: a progressive webapp for Pokémon fans&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Nolan Lawson about the challenge of having a 60 fps application on a mobile device, making it offline.&lt;/p&gt;

&lt;p&gt;Uses Angular 2, javascript 7, PouchDB as well as LocalForage for storage. All processing on WebWorkers, except for DOM manipulation.&lt;/p&gt;

&lt;p&gt;Tags: angular-2, javascript-7, angular, javascript, pouchdb, localforage, cloudant, 60fps, mobile, app, offline-first, offline, pokemon, api, nolan-lawson, web-worker, flip-technique, css, progressive, pokedex, svgomg, frontend&lt;/p&gt;

&lt;h2 id=&#34;lambdaconf-2015-how-to-learn-haskell-in-less-than-5-years-chris-allen&#34;&gt;LambdaConf 2015 - How to Learn Haskell in Less Than 5 Years Chris Allen&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=Bg9ccYzMbxc&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Chris Allen on how to learn haskell, what are some common pitfalls while learning it and how learning and teaching (it) are different.&lt;/p&gt;

&lt;p&gt;Talks about his (with a coauthor) book, focused on not reducing the readers that make it to the end and, finally, increasing the amount of haskell users.&lt;/p&gt;

&lt;p&gt;References &lt;a href=&#34;https://yow.eventer.com/yow-2014-1222/stop-treading-water-learning-to-learn-by-edward-kmett-1750&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Kmett.&lt;/p&gt;

&lt;p&gt;Tags: chris-allen, haskell, learning-to-learn, meta-learning, lambda-conf, talk&lt;/p&gt;

&lt;h2 id=&#34;extreme-continuous-delivery-at-unruly&#34;&gt;Extreme Continuous Delivery - at Unruly&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.xpdays.de/2014/downloads/002-extreme-continuous-delivery-at-unruly/cd_javaone.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about how the company Unruly does continuous delivery (CD), maximizing business value, minimizing time to market (TTM). Also describes how they do deployments and how to organize teams.&lt;/p&gt;

&lt;p&gt;References: Extreme Programming Explained (Beck), Continuous Delivery (Humble &amp;amp; Farley)&lt;/p&gt;

&lt;p&gt;Tags: silo, team-management, culture, continuous-delivery, tdd, nagdd, shared-infrastructure, acceptance-testing, module-testing, conway-law, cross-pollination, continuous-investment, slide&lt;/p&gt;

&lt;h2 id=&#34;building-chat-applications-and-robots-for-skype&#34;&gt;Building chat applications and robots for Skype&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://opensourcehacker.com/2013/03/28/building-chat-applications-and-robots-for-skype/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on building robots for skype. By Mikko Ohtamaa&lt;/p&gt;

&lt;p&gt;Tags: skype, robot, bot, mikko-ohtamaa, slack, integration, api&lt;/p&gt;

&lt;h2 id=&#34;why-i-never-wrote-down-our-company-values&#34;&gt;Why I never wrote down our company values&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/swlh/why-i-never-wrote-down-our-company-values-8143520497e8&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mikael Cho on the subject of having company values, preaching or writing them down. Also, what happens when hard times come, regarding your values.&lt;/p&gt;

&lt;p&gt;Tags: mikael-cho, value, company-value, analogy&lt;/p&gt;

&lt;h2 id=&#34;interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-protocol-design&#34;&gt;Interview with Jesper Louis Andersen about Erlang, Haskell, OCaml, Go, Idris, the JVM, software and protocol design &lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this interview (&lt;a href=&#34;https://medium.com/this-is-not-a-monad-tutorial/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-b0de06440fbd&#34; target=&#34;_blank&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;https://medium.com/this-is-not-a-monad-tutorial/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-5628fe591295&#34; target=&#34;_blank&#34;&gt;part 2&lt;/a&gt;) to Jesper Louis Andersen, interviewed by Federico Carrone.&lt;/p&gt;

&lt;p&gt;The first part is about a comparison of languages, what/why he uses them, and protocol design. The second is more about the Erlang language, the BEAM VM, and some experiences.&lt;/p&gt;

&lt;p&gt;Tags: federico-carrone, erlang, interview, jesper-andersen, jesper-louis-andersen, haskell, ocaml, go, idris, the-jvm, protocol-design, software-design, language, functional-programming, protocol, land-of-lisp, northern-war&lt;/p&gt;

&lt;h2 id=&#34;migrating-to-hugo-from-octopress&#34;&gt;Migrating to Hugo From Octopress&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://nathanleclaire.com/blog/2014/12/22/migrating-to-hugo-from-octopress/&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; by Nathan LeClaire on migrating the blog from Octopress to Hugo&lt;/p&gt;

&lt;p&gt;Tags: static-site-generator, hugo, go, octopress, ruby, jekyll, nathan-leclaire, migration, blog, meta&lt;/p&gt;

&lt;h2 id=&#34;dynamic-static-site-generators-strategies&#34;&gt;Dynamic Static Site Generators strategies&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://timnash.co.uk/dynamic-static-site-generators-strategies/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining what are static site generators, and an example with Jekyll. By Tim Nash&lt;/p&gt;

&lt;p&gt;Tags: tim-nash, static-site-generator, jekyll, strategy, explanation, comparison&lt;/p&gt;

&lt;h2 id=&#34;blog-like-a-confused-hacker&#34;&gt;Blog like a confused hacker&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://timnash.co.uk/using-wordpress-static-site-generator/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tim Nash on what tools he recomends for static site generation.&lt;/p&gt;

&lt;p&gt;Tags: tim-nash, static-site-generator, jekyll, hide, strategy, explanation, comparison, sublime, wordpress, amazon-s3, cdn&lt;/p&gt;

&lt;h2 id=&#34;resolving-the-frontend-backend-api-design-conflict&#34;&gt;Resolving the Frontend/Backend API Design Conflict&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://launchany.com/resolving-the-frontendbackend-api-design-conflict/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains the &amp;ldquo;Backend for Frontend&amp;rdquo; (BFF) pattern, for solving the different needs of data depending on each device / client. By James Higginbotham&lt;/p&gt;

&lt;p&gt;Tags: james-higginbotham, bff, pattern, backend-for-frontend, api, soa, microservice, frontend, backend, architecture&lt;/p&gt;

&lt;h2 id=&#34;what-if-we-forget-to-write-the-tests&#34;&gt;What If We Forget To Write The Tests?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=f70f14b644&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on the trust issues related to starting to use a new methodology (TDD in this case) and how to see what impacts it might have in your day to day.&lt;/p&gt;

&lt;p&gt;Tags: j-b-rainsberger, j-brains, rainsberger, tdd, motivation, team-management&lt;/p&gt;

&lt;h2 id=&#34;api-microservices-the-unix-philosophy-and-the-richardson-maturity-model-a-practical-perspective&#34;&gt;API microservices, the Unix philosophy, and the Richardson Maturity Model - a practical perspective&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@chrstphrhrt/microservices-the-unix-philosophy-and-the-richardson-maturity-model-425abed44826&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Chris Hart on why startups and companies alike should be careful when choosing th latest technology and how this applies to microservices.&lt;/p&gt;

&lt;p&gt;Tags: microservice, chris-hart, startup, analysis, company, technical-debt, bounded-context, ddd, rest-api&lt;/p&gt;

&lt;h2 id=&#34;effective-programming&#34;&gt;Effective programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@sebas5384/effective-programming-d7e5bb2f3b80&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sebastian Ferrari on the importance of clean code, systems thinking and functional programming.&lt;/p&gt;

&lt;p&gt;Specifies the important difference between effectiveness and efficiency.&lt;/p&gt;

&lt;p&gt;Links to this talk by &lt;a href=&#34;https://youtu.be/OqEeIG8aPPk&#34; target=&#34;_blank&#34;&gt;Russ Ackoff&lt;/a&gt;. States the difference between &amp;ldquo;the right thing&amp;rdquo; and &amp;ldquo;the thing right&amp;rdquo;, by Drucker.&lt;/p&gt;

&lt;p&gt;Tags: drucker, thing-right, right-thing, sebastian-ferrari, system-thinking, russ-ackoff, video, ted, difference, clean-code, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;learning-how-to-learn&#34;&gt;Learning how to learn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@thejameskyle/learning-how-to-learn-7f04d6f42c1e&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by James Kyle about the &amp;ldquo;how to learn&amp;rdquo; as one important skill for programmers and how having the solution at a few keystrokes limits / handicaps this ability.&lt;/p&gt;

&lt;p&gt;Tags: programmer, learn-to-learn, james-kyle, stack-overflow, skill&lt;/p&gt;

&lt;h2 id=&#34;why-do-some-functional-programmers-criticize-design-patterns-in-oop-languages-as-a-sign-of-language-deficiency-while-monad-is-also-a-design-pattern&#34;&gt;Why do some functional programmers criticize design patterns in OOP languages as a sign of language deficiency, while Monad is also a design pattern?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.quora.com/Why-do-some-functional-programmers-criticize-design-patterns-in-OOP-languages-as-a-sign-of-language-deficiency-while-Monad-is-also-a-design-pattern/answer/Edward-Kmett?srid=hVnO&amp;amp;share=12410d1e&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt; by Edward Kmett comparing the design patterns in OOP to the design patterns in functional languages.&lt;/p&gt;

&lt;p&gt;Tags: functional-language, object-oriented-language, edward-kmett, oop, pattern, monad, interface, quora, answer&lt;/p&gt;

&lt;h2 id=&#34;should-we-even-debate-refactoring-with-stakeholders&#34;&gt;Should We Even Debate Refactoring With Stakeholders?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=215f7f649b&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on the power balance between stakeholders and programmers and how it can be inclined to a &amp;lsquo;more trust&amp;rsquo; / &amp;lsquo;less trust&amp;rsquo; by following some actions. The analogy is to a trade you cannot understand, therefore you have to hope that the taken decisions are in your best interest.&lt;/p&gt;

&lt;p&gt;Tags: j-b-rainsberger, j-brains, rainsberger, refactor, business-need, communication, stakeholder&lt;/p&gt;

&lt;h2 id=&#34;the-eternal-struggle-between-business-and-programmers&#34;&gt;The Eternal Struggle Between Business and Programmers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.thecodewhisperer.com/permalink/the-eternal-struggle-between-business-and-programmers&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on the discussion between business (&amp;lsquo;we want more features, now&amp;rsquo;) and the programmers (&amp;lsquo;we want more refactoring, now&amp;rsquo;). Concludes that both players need each other, in a symbiotic fashion, to keep their jobs at the company.&lt;/p&gt;

&lt;p&gt;He suggests that Scrum cannot work without the XP practices and that we need to refactor aggressively after having finished our initial design, to keep the costs down. In fact, agreeing with both parts in this discussion.&lt;/p&gt;

&lt;p&gt;References one of his own videos, at Oredev&amp;rsquo;13, &amp;ldquo;Fundamental Theorem of Agile Software Development&amp;rdquo;, where he describes the relationship between accidental / essential complexity in the cost of a feature, attributing most of it to accidental (&amp;lsquo;we&amp;rsquo;re not good at our jobs&amp;rsquo;) and describing the need for more design / refactor after the initial design.&lt;/p&gt;

&lt;p&gt;Tags: j-b-rainsberger, j-brains, rainsberger, refactor, business-need, design, oredev, talk, agile, xp, scrum, software-development, accidental-complexity, essential-complexity, mythical-man-month&lt;/p&gt;

&lt;h2 id=&#34;turning-code-to-cash-how-to-make-money-as-a-web-developer-and-live-to-tell-the-tale&#34;&gt;Turning code to cash — How to make money as a Web Developer and live to tell the tale.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@kurtrohlandt/turning-code-to-cash-how-to-make-money-as-a-web-developer-and-live-to-tell-the-tale-f5eedc557b3e&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kurt Rohlandt with a list of items to check while dealing with clients as a freelancer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nothing is simple&lt;/li&gt;
&lt;li&gt;Know your skill set — and let your client know it&lt;/li&gt;
&lt;li&gt;Be clear about what they are buying&lt;/li&gt;
&lt;li&gt;Learn to use the best tool for the job&lt;/li&gt;
&lt;li&gt;To your client you’re more than just a developer&lt;/li&gt;
&lt;li&gt;Sign off your jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: freelancer, kurt-rohlandt, list, tip, client&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>