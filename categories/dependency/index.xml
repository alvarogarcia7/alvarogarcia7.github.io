<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dependency on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/dependency/</link>
    <description>Recent content in dependency on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Aug 2019 10:32:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/dependency/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self-Study in August 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/08/01/self-study-august-2019/</link>
      <pubDate>Thu, 01 Aug 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/08/01/self-study-august-2019/</guid>
      <description>List the local NPM link packages npm ls -g &amp;ndash;depth=0 &amp;ndash;link=true
Tags: npm, npm-link, node, link, global-dependency
Id: c01a0efa-b832-11e9-87be-0242ac110003 Read: Tue, 06 Aug 2019 10:12:52 +0000
Mutation testing tool for java / jvm This is a mutation testing tool for the JVM / java
Tags: pitest, pit, mutation-testing, testing, test, tool, jvm, java, mutation
Id: 02d29d3e-b833-11e9-b785-0242ac110003 Read: Tue, 06 Aug 2019 10:14:44 +0000
Ugly trivia kata, using mutation testing This is a kata I&amp;rsquo;ve practiced, then shown at the Software Crafters meetup (at Softonic).</description>
    </item>
    
    <item>
      <title>Self-Study in July 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/07/01/self-study-july-2018/</link>
      <pubDate>Sun, 01 Jul 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/07/01/self-study-july-2018/</guid>
      <description>The Haskell Pyramid I&amp;rsquo;ve read this article on how the productivity for Haskell is achieved: not using the topics discussed on social networks (monads, functors, laws, lenses, etc) but using more basic tools
Tags: haskell, productivity, lucas-di-cioccio, learning, development, tool, monad, hype, pyramid, productive-haskell-bar, bar
Id: 454f53fc-7dd6-11e8-8208-0242ac110003 Read: Mon, 02 Jul 2018 08:59:47 +0000
El verde m√°s verde I&amp;rsquo;ve read this article on how to structure creative projects (e.g., UX, programming) by professionals, as told by David Bonilla.</description>
    </item>
    
    <item>
      <title>Recognizing dependencies</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/08/recognizing-dependencies/</link>
      <pubDate>Sat, 08 Aug 2015 14:11:29 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/08/recognizing-dependencies/</guid>
      <description>From the Chapter 3, Managing Dependencies, from the book Practical Object-Oriented Design in Ruby, by Sandi Metz:
 An object has a dependency when it knows:
 The name of another class. [&amp;hellip;] The name of a message that it intends to send to someone other than self. [&amp;hellip;] The arguments that a message requires. [&amp;hellip;] The order of those arguments. [&amp;hellip;]   If an object knows any of these facts about another object, it has dependencies to the other.</description>
    </item>
    
    <item>
      <title>What defines a dependency</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/13/what-defines-a-dependency/</link>
      <pubDate>Mon, 13 Jul 2015 07:48:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/13/what-defines-a-dependency/</guid>
      <description>A friend and I were arguing about this code (fragment):
public void register (final String userName) { try { registeredUsers.add(new User(userName)); } catch (AlreadyRegisteredUserException e) { resultListener.alreadyRegistered(userName); } } I would have said that resultListener is a dependency as, first, it was injected by the constructor, second, it is necessary for the execution (negative case).
He suggested that:
 being injected through the constructor is usually what happens with dependencies, but does not make it one (i.</description>
    </item>
    
    <item>
      <title>Object Peer Stereotypes</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/13/object-peer-stereotypes/</link>
      <pubDate>Mon, 13 Jul 2015 07:36:14 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/13/object-peer-stereotypes/</guid>
      <description>We categorize an object&amp;rsquo;s peers (loosely) into three types of relationship. An object might have:
 Dependencies: Services that the object requires from its peers so it can perform its responsibilities. The object cannot function without these services. It should not be possible to create the object without them. For example, a graphics package will need something like a screen or canvas to draw on&amp;ndash;it doesn&amp;rsquo;t make sense without one.</description>
    </item>
    
  </channel>
</rss>
