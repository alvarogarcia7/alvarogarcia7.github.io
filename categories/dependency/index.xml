<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/dependency/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/dependency/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in July 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/07/01/self-study-july-2018/</link>
      <pubDate>Sun, 01 Jul 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/07/01/self-study-july-2018/</guid>
      <description>

&lt;h2 id=&#34;the-haskell-pyramid-https-patrickmn-com-software-the-haskell-pyramid&#34;&gt;&lt;a href=&#34;https://patrickmn.com/software/the-haskell-pyramid/&#34; target=&#34;_blank&#34;&gt;The Haskell Pyramid&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article on how the productivity for Haskell is achieved: not using the topics discussed on social networks (monads, functors, laws, lenses, etc) but using more basic tools&lt;/p&gt;

&lt;p&gt;Tags: haskell, productivity, lucas-di-cioccio, learning, development, tool, monad, hype, pyramid, productive-haskell-bar, bar&lt;/p&gt;

&lt;p&gt;Id: 454f53fc-7dd6-11e8-8208-0242ac110003
Read: Mon, 02 Jul 2018 08:59:47 +0000&lt;/p&gt;

&lt;h2 id=&#34;el-verde-más-verde-https-mailchi-mp-bonillaware-verde-mas-verde-e-68e22b460d&#34;&gt;&lt;a href=&#34;https://mailchi.mp/bonillaware/verde-mas-verde?e=68e22b460d&#34; target=&#34;_blank&#34;&gt;El verde más verde&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article on how to structure creative projects (e.g., UX, programming) by professionals, as told by David Bonilla.&lt;/p&gt;

&lt;p&gt;Tags: david-bonilla, bonilista, project-management, slack-time, sabbatical, vertical-slice&lt;/p&gt;

&lt;p&gt;Id: ef00176e-7ddc-11e8-a33b-0242ac110003
Read: Mon, 02 Jul 2018 09:47:29 +0000&lt;/p&gt;

&lt;h2 id=&#34;how-to-fix-burnout-as-a-developer-https-dev-to-lewismenelaws-how-to-fix-burnout-as-a-developer-4opl&#34;&gt;&lt;a href=&#34;https://dev.to/lewismenelaws/how-to-fix-burnout-as-a-developer--4opl&#34; target=&#34;_blank&#34;&gt;How to Fix Burnout as a Developer&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article on burnout and how to fix it:
Stop working so much.
Prioritize your health.
Try something new.
Patience is key.
Talk to your loved ones.&lt;/p&gt;

&lt;p&gt;Tags: lewis-menelaws, burnout, burn-out, productivity, listicle, career, psychology, management, time-management, career-management, health&lt;/p&gt;

&lt;p&gt;Id: 40d68542-7dff-11e8-89f2-0242ac110003
Read: Mon, 02 Jul 2018 13:53:09 +0000&lt;/p&gt;

&lt;h2 id=&#34;ask-hn-what-is-the-first-thing-you-implement-at-a-new-company-https-news-ycombinator-com-item-id-17353854&#34;&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=17353854&#34; target=&#34;_blank&#34;&gt;Ask HN: What is the first thing you implement at a new company?&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article on the first things that people do when joining a new client.
Mentions the Chesterton&amp;rsquo;s fence: You don’t want to change something until you understand why it’s there in the first place.&lt;/p&gt;

&lt;p&gt;Tags: chesterton-fence, hacker-news, contractor, client, onboarding, fix&lt;/p&gt;

&lt;p&gt;Id: 9003a91a-7dff-11e8-a366-0242ac110003
Read: Mon, 02 Jul 2018 13:55:22 +0000&lt;/p&gt;

&lt;h2 id=&#34;the-fallacy-of-chesterton-s-fence-https-abovethelaw-com-2014-01-the-fallacy-of-chestertons-fence&#34;&gt;&lt;a href=&#34;https://abovethelaw.com/2014/01/the-fallacy-of-chestertons-fence/&#34; target=&#34;_blank&#34;&gt;The Fallacy Of Chesterton&amp;rsquo;s Fence&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article on the Chesterton&amp;rsquo;s fence.
&amp;gt; don’t ever take a fence down until you know the reason why it was put up&lt;/p&gt;

&lt;p&gt;The author explains that the walls (or contracts, or clauses, or practices) were put in place to cover for a specific need. Do not assume that this need does not exist now, before understanding what the need was in the first place.&lt;/p&gt;

&lt;p&gt;Tags: chesterton-fence, keith-lee, consulting, tip, analogy, discovery, process, people&lt;/p&gt;

&lt;p&gt;Id: 736e269e-7e00-11e8-ac4a-0242ac110003
Read: Mon, 02 Jul 2018 14:01:43 +0000&lt;/p&gt;

&lt;h2 id=&#34;a-brief-history-of-the-uuid-https-segment-com-blog-a-brief-history-of-the-uuid&#34;&gt;&lt;a href=&#34;https://segment.com/blog/a-brief-history-of-the-uuid/&#34; target=&#34;_blank&#34;&gt;A brief history of the UUID&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;A brief history of UUID: of how it was developed, why, and a new library in go called ksuid
Explains the origins of networked computers (as opposed to personal computers without any networking) in the 1980s.
Also explains the origins of the UUID, some algorithms for generating them.&lt;/p&gt;

&lt;p&gt;Tags: ksuid, uuid, golang, go, rick-branson, history&lt;/p&gt;

&lt;p&gt;Id: c20e6ac4-8fe5-11e8-b54e-0242ac110003
Read: Wed, 25 Jul 2018 08:36:00 +0000&lt;/p&gt;

&lt;h2 id=&#34;delivering-billions-of-messages-exactly-once-https-segment-com-blog-exactly-once-delivery&#34;&gt;&lt;a href=&#34;https://segment.com/blog/exactly-once-delivery/&#34; target=&#34;_blank&#34;&gt;Delivering billions of messages exactly once&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Explains how this company (segment) has solved the problem of delivering the messages once and only once (OAOO), using RocksDB, Kafka, UUIDs. Deployed to AWS, lowers the cost of the previous system (memcached-based).
Impressive numbers: 1.5 TB worth of keys stored on disk in RocksDB
a 4-week window of de-duplication before aging out old keys
approximately 60B keys stored inside our RocksDB instances
200B messages passed through the dedupe system
Also explains in depth how RocksDB works&lt;/p&gt;

&lt;p&gt;Tags: rocksdb, facebook, database, once-and-only-once, oaoo, message, exactly-once-delivery, delivery, message-delivery, kafka, uuid, client, aws, segment, topic, cloud-scale&lt;/p&gt;

&lt;p&gt;Id: 962c0c26-8fe6-11e8-bf2c-0242ac110003
Read: Wed, 25 Jul 2018 08:41:55 +0000&lt;/p&gt;

&lt;h2 id=&#34;object-collaboration-stereotypes-http-www-mockobjects-com-2006-10-different-kinds-of-collaborators-html&#34;&gt;&lt;a href=&#34;http://www.mockobjects.com/2006/10/different-kinds-of-collaborators.html&#34; target=&#34;_blank&#34;&gt;Object Collaboration Stereotypes&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This post describes the relationships between two objects:
Dependencies are services that the object needs from its environment so that it can fulfil its responsibilities.
Notifications are other parts of the system that need to know when the object changes state or performs an action.
Policies are objects that tweak or adapt the object&amp;rsquo;s behaviour to the needs of the system.
Parts are components in the implementation that are not controlled from outside the object after being set.&lt;/p&gt;

&lt;p&gt;Tags: dependency, notification, policy, part, collaborator, relationship, steve-freeman, goos, growing-object-oriented-software&lt;/p&gt;

&lt;p&gt;Id: f7e738c8-8fe6-11e8-89be-0242ac110003
Read: Wed, 25 Jul 2018 08:44:39 +0000&lt;/p&gt;

&lt;h2 id=&#34;mocks-fakes-stubs-and-dummies-http-xunitpatterns-com-mocks-20fakes-20stubs-20and-20dummies-html&#34;&gt;&lt;a href=&#34;http://xunitpatterns.com/Mocks,%20Fakes,%20Stubs%20and%20Dummies.html&#34; target=&#34;_blank&#34;&gt;Mocks, Fakes, Stubs and Dummies&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Bibliography for mocks, stubs, fakes, dummies, spies.&lt;/p&gt;

&lt;p&gt;Tags: mock, stub, test-double, dummy, xunit, xunit-pattern, gerard-meszaros, xunitpatterns&lt;/p&gt;

&lt;p&gt;Id: ea7281ee-9012-11e8-bd95-0242ac110003
Read: Wed, 25 Jul 2018 13:59:15 +0000&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recognizing dependencies</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/08/recognizing-dependencies/</link>
      <pubDate>Sat, 08 Aug 2015 14:11:29 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/08/recognizing-dependencies/</guid>
      <description>&lt;p&gt;From the Chapter 3, Managing Dependencies, from the book Practical Object-Oriented Design in Ruby, by Sandi Metz:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An object has a dependency when it knows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The name of another class. [&amp;hellip;]&lt;/li&gt;
&lt;li&gt;The name of a message that it intends to send to someone other than self. [&amp;hellip;]&lt;/li&gt;
&lt;li&gt;The arguments that a message requires. [&amp;hellip;]&lt;/li&gt;
&lt;li&gt;The order of those arguments. [&amp;hellip;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If an object knows any of these facts about another object, it has dependencies to the other.&lt;/p&gt;

&lt;p&gt;This is not to say that having dependencies to others is bad, as&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A single object cannot know everything, so inevitably it will have to talk to another object.
Chapter 3, Managing Dependencies, Introduction&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For this latter purpose, there is the section &amp;ldquo;Writing loosely coupled code&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What defines a dependency</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/13/what-defines-a-dependency/</link>
      <pubDate>Mon, 13 Jul 2015 07:48:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/13/what-defines-a-dependency/</guid>
      <description>&lt;p&gt;A friend and I were arguing about this code (&lt;a href=&#34;https://github.com/alvarogarcia7/cos/blob/7bf866bdfb9006d73a0124e00152e55c520d98a4/src/main/java/users/Registry.java&#34; target=&#34;_blank&#34;&gt;fragment&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;userName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;registeredUsers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AlreadyRegisteredUserException&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;resultListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;alreadyRegistered&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I would have said that &lt;code&gt;resultListener&lt;/code&gt; is a dependency as, first, it was injected by the constructor, second, it is necessary for the execution (negative case).&lt;/p&gt;

&lt;p&gt;He suggested that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;being injected through  the constructor is usually what happens with dependencies, but does not make it one (i.e., something can be injected by the constructor and not be a dependency)&lt;/li&gt;
&lt;li&gt;what defines a dependency is related to the business: if this behavior is mandatory for the business, then it is a dependency.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a conclusion, &lt;code&gt;resultListener&lt;/code&gt; would be a notification, as business does not require it.&lt;/p&gt;

&lt;p&gt;On a later commit, we decided to inject it to &lt;code&gt;registeredUsers&lt;/code&gt; (&lt;a href=&#34;https://github.com/alvarogarcia7/cos/blob/c89bec1a2de388165676f095c2218afeb1321374/src/main/java/users/InMemoryRegisteredUsers.java&#34; target=&#34;_blank&#34;&gt;fragment&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RegistryResultListener&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resultListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;resultListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;alreadyRegistered&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;resultListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;successfullyRegistered&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: for cases when no one needs to be informed about the users being registered or not, a null-object pattern will suffice, as there is no check for null reference in the parameter &lt;code&gt;resultListener&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note: more information on object stereotypes can be found &lt;a href=&#34;../../../../2015/07/13/object-peer-stereotypes/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Object Peer Stereotypes</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/13/object-peer-stereotypes/</link>
      <pubDate>Mon, 13 Jul 2015 07:36:14 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/13/object-peer-stereotypes/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;We categorize an object&amp;rsquo;s peers (loosely) into three types of relationship. An object might have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dependencies: Services that the object requires from its peers so it can perform its responsibilities. The object cannot function without these services. It should not be possible to create the object without them. For example, a graphics package will need something like a screen or canvas to draw on&amp;ndash;it doesn&amp;rsquo;t make sense without one.&lt;/li&gt;
&lt;li&gt;Notifications: Peers that need to be kept up to date with the object&amp;rsquo;s activity. The object will notify interested peers whenever it changes state or performs a significant action. Notifications are &amp;ldquo;fire and forget&amp;rdquo;; the object neither knows nor cares which peers are listening. Notifications are so useful because they decouple objects from each other. For example, in a user interface system, a button component promises to notify any registered listeners when it&amp;rsquo;s clicked, but does not know what those listeners will do. Similarly, the listeners expect to be called but know nothing of the way the user interface dispatches its events.&lt;/li&gt;
&lt;li&gt;Adjustments: Peers that adjust the object&amp;rsquo;s behavior to the wider needs of the system. This includes policy objects that make decisions on the object&amp;rsquo;s behalf (the Strategy pattern in [Gamma94]) and component parts of the object if it&amp;rsquo;s a composite. For example, a Swing JTable will ask a TableCellRenderer to draw a cell&amp;rsquo;s value, perhaps as RGB (Red, Green, Blue) values for a color. If we change the renderer, the table will change its presentation, now displaying the HSB (Hue, Saturation, Brightness) values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source is Growing Object-Oriented Software, Guided by Tests &amp;gt; Chapter 6, Object-Oriented Style &amp;gt; Object Peer Stereotypes, page 52&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>