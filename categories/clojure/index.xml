<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clojure on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/clojure/</link>
    <description>Recent content in clojure on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Jul 2023 16:38:28 +0400</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/clojure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Threading Macro (clojure) equivalent in Python</title>
      <link>https://alvarogarcia7.github.io/articles/2023/07/22/threading-macro-equivalent-python/</link>
      <pubDate>Sat, 22 Jul 2023 16:38:28 +0400</pubDate>
      
      <guid>https://alvarogarcia7.github.io/articles/2023/07/22/threading-macro-equivalent-python/</guid>
      <description>Introduction In any programming language, it is common to compose functions by pipelining functions: h = g ∘ f such that h(x) = g(f(x)).
The function f is applied first, then g, then the following. 1
For me, it would be more comfortable and easy to understand to write it f COMPOSE_THEN g, indicating that this function composition is not the usual, but a different operation.
Introduction in Clojure This function composition can be written in Clojure by pipelining or chaining functions:</description>
    </item>
    
    <item>
      <title>Self-Study in June 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/06/01/self-study-june-2018/</link>
      <pubDate>Fri, 01 Jun 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/06/01/self-study-june-2018/</guid>
      <description>Don&amp;rsquo;t look, don&amp;rsquo;t tell I&amp;rsquo;ve read this bonilista by David Bonilla on what strategies companies use to deal with security and defects.
Explains full disclosure, responsible disclosure and bug bounties.
Tags: david-bonilla, bonilista, security, full-disclosure, responsible-disclosure, bug-bounty, reporting, hacker, cracker
Id: a1a6925a-7958-11e8-a87f-0242ac110002 Read: Tue, 26 Jun 2018 15:50:21 +0000
La vida de las ideas I&amp;rsquo;ve read this bonilista by David Bonilla about the value of the ideas and what differentiates a good idea from a good execution from a good outcome</description>
    </item>
    
    <item>
      <title>Self-Study in February 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/02/01/self-study-in-february-2017/</link>
      <pubDate>Wed, 01 Feb 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/02/01/self-study-in-february-2017/</guid>
      <description>WhatsApp Security Vulnerability I&amp;rsquo;ve read this article by Bruce Schneier on a security defect in whatsapp, where an &amp;lsquo;unconfirmed&amp;rsquo; message can be re-encrypted (with a new key) and resent. This is a vector for some attacks.
Tags: bruce-schneier, security, whatsapp, encryption, attack-vector
Encrypted email service once used by Edward Snowden relaunches I&amp;rsquo;ve read this article, by Kim Zetter, on Lavabit restablishing its service. Explains the company&amp;rsquo;s past and the new services they are offering</description>
    </item>
    
    <item>
      <title>A common misunderstanding about `reduce`</title>
      <link>https://alvarogarcia7.github.io/blog/2016/12/14/a-common-misunderstanding-about-reduce/</link>
      <pubDate>Wed, 14 Dec 2016 18:48:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/12/14/a-common-misunderstanding-about-reduce/</guid>
      <description>Misconception I&amp;rsquo;ve read in several places that reduce reduces an array1 of values to a single one. The main characteristic of this function is not to reduce to a &amp;lsquo;smaller element&amp;rsquo; / &amp;lsquo;single element&amp;rsquo;, but to have access to the accumulated results and the elements, one by one. Quoting Mozilla Developer Network&amp;rsquo;s (MDN) Javascript reference:
 The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.</description>
    </item>
    
    <item>
      <title>Self-Study in July 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/07/04/self-study-in-july-2016/</link>
      <pubDate>Mon, 04 Jul 2016 10:47:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/07/04/self-study-in-july-2016/</guid>
      <description>Until the End of the Internet I&amp;rsquo;ve read this article by Jason Zimdars explaining the &amp;ldquo;end of the internet&amp;rdquo; policy at Basecamp: they will make everything possible to keep the services running for existing customer until the end or until the last customer uses it.
Tags: policy, end-of-the-internet, jason-zimdars, basecamp, product
How Agile Principles Can Fund Your Start-Up I&amp;rsquo;ve read this article by Jurgen Appelo explaining how the agile values can help you negotiate funding for your startup: instead of negotiating with each investor, agree on a formula and invest in many small rounds, instead of a big one.</description>
    </item>
    
    <item>
      <title>Self-Study in January 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</link>
      <pubDate>Fri, 01 Jan 2016 16:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</guid>
      <description>Test cases in inner classes with JUnit I&amp;rsquo;ve read this answer in stackoverflow about nested test runners in JUnit
Tags: junit, stackoverflow, answer, nested-runner
Recording a Great Coding Screencast I&amp;rsquo;ve read this article by John Lindquist where he explains how he sets up the recording environment for egghead.
Tags: john-lindquist, record, screencast, egghead, code-screencast, record-video, video
React Testing Course I&amp;rsquo;ve watched the full course by Trevor D. Miller on how to test react components and the libraries to make it possible.</description>
    </item>
    
    <item>
      <title>Validating CSV data in clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/15/validating-data-clojure/</link>
      <pubDate>Tue, 15 Dec 2015 11:52:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/15/validating-data-clojure/</guid>
      <description>At a client, we have CSVs of data that can be simplified to this 1:
(def data [ [&amp;#34;total&amp;#34; 6 8 13] [&amp;#34;0&amp;#34; 1 2 3] [&amp;#34;0&amp;#34; 2 0 4] [&amp;#34;0&amp;#34; 3 0 6] ]) In this case, some of the row named total is the sum of the rest of the rows, but only for some columns (second and fourth). We do not want to get rid of the columns, as they need to be printed at the end.</description>
    </item>
    
    <item>
      <title>Clojure and the macro and</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/08/clojure-and-the-macro-and/</link>
      <pubDate>Tue, 08 Dec 2015 17:37:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/08/clojure-and-the-macro-and/</guid>
      <description>While on the REPL, I tried this:
simple.core=&amp;gt; (reduce and true [true]) CompilerException java.lang.RuntimeException: Can&amp;#39;t take value of a macro: #&amp;#39;clojure.core/and, compiling:(form-init7116694665186998245.clj:1:1) Reading the clojuredocs for and, you can find this:
 Note add is a macro, so you cannot apply it. For example, there is a vector of some Boolean values [true true false true], which you want to test to see if they are all true. The code below will not work:</description>
    </item>
    
    <item>
      <title>Self-Study in December 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</link>
      <pubDate>Wed, 02 Dec 2015 09:50:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</guid>
      <description>Ruby Equality And Object Comparison I&amp;rsquo;ve read this article, written by Alan Skorkin, that explains equality comparisons in ruby:
 equal? is reference equality == is value equality eql? is value and type equality  Tags: ruby, comparison, equality, object, reference, alan-skorkin
Software Folklore I&amp;rsquo;ve watched this PechaKucha by Chris Ford on what are laws and how they relate to creating software. Also talks on what could be an analogy to software creation (says not science, not engineering)</description>
    </item>
    
    <item>
      <title>Self-Study in November 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</link>
      <pubDate>Mon, 02 Nov 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</guid>
      <description>Call me maybe: RabbitMQ I&amp;rsquo;ve read this article by Kyle Kingsbury on using RabbitMQ as a lock service. It investigates and gives a counterexample of using it for this purpose.
Uses Knossos to do the testing and surfaces a problem with it. Explains specific problems on locking: at-most-once and at-least-once message delivery
Note: References Jepsen (I guess an inside joke to the song &amp;ldquo;Call me maybe&amp;rdquo; by Carly Rae Jepsen) for at-most-once and at-least-once message delivery.</description>
    </item>
    
    <item>
      <title>Self-Study in October 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</link>
      <pubDate>Thu, 01 Oct 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</guid>
      <description>Blazing Fast HTML: Virtual DOM in Elm I&amp;rsquo;ve read this article explaining how Elm works in relation to the virtual DOM. By Evan Czaplicki.
Tags: elm, dom, virtual-dom, comparison, speed, haskell, evan-czaplicki
Why you should never, ever, ever use MongoDB I&amp;rsquo;ve read this article stating the downsides of using MongoDB. Written by Sven Slootweg
Tags: mongodb, downside, sven-slootweg, json, document-store, postgresql, acid
Do you really get classloaders? I&amp;rsquo;ve watched this video by Jevgeny Kabanov on classloaders: what they are, how they work nad some tips to solve common issues.</description>
    </item>
    
    <item>
      <title>Brown Bag Session: Clojure&#39;s Data and Code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/23/brown-bag-session-clojures-data-and-code/</link>
      <pubDate>Wed, 23 Sep 2015 21:24:58 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/23/brown-bag-session-clojures-data-and-code/</guid>
      <description>Today, at a client, I&amp;rsquo;ve facilitated the brown-bag session on Clojure, introducing Lisp&amp;rsquo;s homoiconicity.
Session Structure The session was designed as a kata, first introducing participants in the problem, letting some time to read the initial version and to think about possible solutions.
Then, I structured the rest of the time as a prepared kata, where I was explaining in the beamer our current problems (day-to-day tasks) and possible solutions in Clojure.</description>
    </item>
    
    <item>
      <title>Self-Study in September 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015/</link>
      <pubDate>Tue, 01 Sep 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015/</guid>
      <description>The 30 second habit with a lifelong impact I&amp;rsquo;ve read this article list of patterns, by Robyn Scott, in which it is explained why to compress information in a few ideas, investing 30 seconds to condense the article.
Tags: 30-second, habit, robyn-scott
The Strengths and Weaknesses of Extreme Programming I&amp;rsquo;ve watched this video explaining the strengths and weaknesses of extreme programming. By William Matheson
Tags: extreme-programming, xp, william-matheson, video, strength, weakness</description>
    </item>
    
    <item>
      <title>The language was prepared for that</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/10/the-language-was-prepared-for-that/</link>
      <pubDate>Mon, 10 Aug 2015 00:58:33 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/10/the-language-was-prepared-for-that/</guid>
      <description>Many times I&amp;rsquo;ve written this function:
public boolean between(int lowerBound, int n, int upperBound){ return lowerBound &amp;lt;= n &amp;amp;&amp;amp; n &amp;lt;= upperBound; } It may depend on the case, whether it is [], [), (] or (), to use mathematical terms.
When the two comparisons are the same ([] and ()), there is duplication in the comparisons.
Investigating a little bit on this in clojure, I&amp;rsquo;ve found this function:
&amp;lt;= And its clojuredocs: Returns non-nil if nums are in monotonically non-decreasing order, otherwise false.</description>
    </item>
    
    <item>
      <title>Brown-bag session and Dojo: Beginning Clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/05/brown-bag-session-and-dojo-beginning-clojure/</link>
      <pubDate>Wed, 05 Aug 2015 01:14:14 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/05/brown-bag-session-and-dojo-beginning-clojure/</guid>
      <description>At a client, today I&amp;rsquo;ve facilitated a brown-bag session introducing the Clojure language to a group of java programmers.
I&amp;rsquo;ve started hands-on, live coding on a REPL. To make things easier, I&amp;rsquo;ve created a maven project that imports the clojure jar and lets you obtain dependencies from clojars. The repo is here. This repo wouldn&amp;rsquo;t have been possible without the clojure maven plugin, written by Mark Derricutt.
I&amp;rsquo;ve more or less followed this guide</description>
    </item>
    
    <item>
      <title>Self-Study in August 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</link>
      <pubDate>Sun, 02 Aug 2015 21:45:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</guid>
      <description>Humble Object I&amp;rsquo;ve read the Humble Object list of patterns, by Gerard Meszaros, including:
 humble dialog humble executable humble transaction controller humble container adapter  Tags: pattern, gerard-meszaros
How you know I&amp;rsquo;ve reread this small essay by Paul Graham on storing information in our heads, based on the context. On the importance of rereading, to add more contexts to the initial one.
Tags: paul-graham, reread, read
Protected Variation: The Importance of Being Closed I&amp;rsquo;ve read this article by Craig Larman in the magazine IEEE Software &amp;gt; Design.</description>
    </item>
    
    <item>
      <title>Iterate with index in clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/04/iterate-with-index-in-clojure/</link>
      <pubDate>Sat, 04 Jul 2015 14:34:37 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/04/iterate-with-index-in-clojure/</guid>
      <description>Scenario: iterate a sequence (seq) with its index
The lines have an implicit line number (starting by 1, in most editors):
[1] line1 [2] line2 [3] hello When you read it from file to a variable, it is converted to:
(&amp;#34;line1&amp;#34; &amp;#34;line2&amp;#34; &amp;#34;hello&amp;#34;) This implicit line number value is not present, therefore you need to assign them one.
In ruby, you have this construct:
array = [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;] array.each_with_index {|val, index| puts &amp;#34;#{val}=&amp;gt; #{index}&amp;#34; } Source</description>
    </item>
    
    <item>
      <title>Self-study in July 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/</link>
      <pubDate>Wed, 01 Jul 2015 01:08:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/</guid>
      <description>I&amp;rsquo;ve grouped all small posts related to the self-study from July 2015 into a single post
Clojure made simple I&amp;rsquo;ve watched this talk by Rich Hickey at the Java One. It references the talk Easy made simple
 polymorphism without inheritance; single dispatch on the first parameter  Productive pair programming I&amp;rsquo;ve read this article about pair programming, using the driver &amp;amp; copilot technique, written by Carlos Blé
Building Automated REST APIs with Python Investigating QA automation for REST APIs, I&amp;rsquo;ve read these slides about it</description>
    </item>
    
    <item>
      <title>Self-study in June 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/</link>
      <pubDate>Wed, 03 Jun 2015 13:13:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/</guid>
      <description>Update: I&amp;rsquo;ve grouped all small posts related to the self-study from June 2015 into a single post
Le monitoring de flux par l’exemple I&amp;rsquo;ve read this article about monitoring, in the way of &amp;ldquo;by example&amp;rdquo;, by Cédrick Lunven and Julien Kirch (French)
The First Micro-service Architecture I&amp;rsquo;ve read this article about microservices and how they were implemented many years ago by Robert C. Martin
How I Learned to Balance My Life With Remote Work I&amp;rsquo;ve read this article about balancing life and work, either physical or remote by Michael Erasmus</description>
    </item>
    
    <item>
      <title>Talk: Simplicity matters</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/18/talk-simplicity-matters/</link>
      <pubDate>Sat, 18 Apr 2015 14:44:06 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/18/talk-simplicity-matters/</guid>
      <description>I&amp;rsquo;ve seen this video by Rich Hickey: &amp;ldquo;Simplicity matters&amp;rdquo;, taken from Manuel Rivero&amp;rsquo;s google plus&#39; site
here are my notes:
 the software is the elephant do more, do it differently, do it better complexity of the elephant is going to dominate what you can do your ability to reason about your program is critical design is about pulling things apart become familiar by learning, trying &amp;ldquo;We can be creating the exact same programs out of significantly simpler components&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Inserting clojure code in octopress</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/14/inserting-clojure-code-in-octopress/</link>
      <pubDate>Tue, 14 Apr 2015 23:48:27 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/14/inserting-clojure-code-in-octopress/</guid>
      <description>Inserting this code in the blog:
```clojure (defn all-access[k] (let [{:keys [a b] :as k}] (do a) (do (:b k)))) ```  the octopress processor throws the error:
Error: Pygments can&#39;t parse unknown language: clojure Error: Run jekyll build --trace for more information.  A solution would be to include it as lisp code:
```lisp (defn all-access[k] (let [{:keys [a b] :as k}] (do a) (do (:b k)))) ```  this is an example:</description>
    </item>
    
    <item>
      <title>Destructuring as a refactor in Clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure/</link>
      <pubDate>Tue, 14 Apr 2015 23:36:23 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure/</guid>
      <description>Manuel has taught us today about the default value while destructuring:
 The following example illustrates the use of an :as directive to bind a local with the entire map.
 user=&amp;gt; (def point {:x 5 :y 7}) #&#39;user/point (let [{:keys [x y] :as the-point} point] (println &amp;quot;x:&amp;quot; x &amp;quot;y:&amp;quot; y &amp;quot;point:&amp;quot; the-point)) x: 5 y: 7 point: {:x 5, :y 7}  We&amp;rsquo;ve now seen the :as directive used for both vectors and maps.</description>
    </item>
    
    <item>
      <title>Kata: Mars Rover in Clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/05/kata-mars-rover-in-clojure/</link>
      <pubDate>Thu, 05 Mar 2015 00:33:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/05/kata-mars-rover-in-clojure/</guid>
      <description>Yesterday at the clojure meetup we1 did the mars rover in clojure and today I&amp;rsquo;ve tried my hand at it again. Original, from the three of us here and my results here
  Jorge Ávila, Jesús Díez and I &amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
  </channel>
</rss>
