<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/benjamin-hardy/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/benjamin-hardy/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in March 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/01/self-study-in-march-2017/</link>
      <pubDate>Wed, 01 Mar 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/01/self-study-in-march-2017/</guid>
      <description>

&lt;h2 id=&#34;volver&#34;&gt;¿Volver?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://raulavila.com/2017/01/volver/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Raul Avila comparing the options between working in the UK and in Spain (where he&amp;rsquo;s originally from). Inspired by other professionals (e.g., David Bonilla, Jerónimo Palacios).&lt;/p&gt;

&lt;p&gt;Tags: spanish, jeronimo-palacios, david-bonilla, expat, comparison, raul-avila, united-kingdom, spain&lt;/p&gt;

&lt;h2 id=&#34;donkey-code&#34;&gt;Donkey code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://einarwh.wordpress.com/2017/01/21/donkey-code/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Einar W. Høst in which he introduces the concept of a &amp;lsquo;missing domain term&amp;rsquo; with the example of a donkey being &amp;lsquo;closely related to a horse, though not exactly the same&amp;rsquo;&lt;/p&gt;

&lt;p&gt;Tags: einar-host, donkey-code, ddd, domain-driven-development, domain, abstraction, missing-abstraction, business-logic&lt;/p&gt;

&lt;h2 id=&#34;10-habits-that-change-boys-into-men&#34;&gt;10 Habits That Change Boys Into Men&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/the-mission/10-habits-that-change-boys-into-men-b103c47d47e0&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Benjamin P. Hardy on why some men are still boys (e.g., expectations from society) and what can boys do to turn into men.&lt;/p&gt;

&lt;p&gt;Tags: benjamin-hardy, psychology, learning, evolution&lt;/p&gt;

&lt;h2 id=&#34;on-sabbaticals&#34;&gt;On Sabbaticals&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://indecorous.com/sabbaticals/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about sabbaticals by Ian Malpass. In it, he explains why we need sabbaticals, how to take them, and some details about them.&lt;/p&gt;

&lt;p&gt;Some principles:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;If you think you can’t take a sabbatical, you need to take your sabbatical.&lt;/li&gt;
&lt;li&gt;Day-to-day work pushes us to think tactically; sabbaticals push us to think strategically. Both are valuable.&lt;/li&gt;
&lt;li&gt;Do the work to gain confidence that you can be away, and then trust that that the mechanisms you put in place are good.&lt;/li&gt;
&lt;li&gt;Just because your team can function without you, doesn’t mean they want to.&lt;/li&gt;
&lt;li&gt;There is rarely a good time to leave work for an extended period of time - don’t let this stop you.&lt;/li&gt;
&lt;li&gt;Allow room for serendipity, the unexpected, and exploration.&lt;/li&gt;
&lt;li&gt;Plan for your return before you leave, to avoid worry.&lt;/li&gt;
&lt;li&gt;The sabbatical process doesn’t end after six weeks.&lt;/li&gt;
&lt;li&gt;You don’t have to be unhappy or frustrated in your work to go on sabbatical.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: sabbatical, ian-malpass, team-management, career&lt;/p&gt;

&lt;h2 id=&#34;my-favorite-command-line-utilities&#34;&gt;My favorite command-line utilities&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hackernoon.com/macbook-my-command-line-utilities-f8a121c3b019#.3hpq7suhj&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Vitaly Belman in which he explains his curated list of utilities for the terminal&lt;/p&gt;

&lt;p&gt;Tags: vitaly-belman, terminal, cli, application, utility, tig, git&lt;/p&gt;

&lt;h2 id=&#34;three-common-mistakes-of-the-first-time-tech-lead&#34;&gt;Three Common Mistakes of the First Time Tech Lead&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.thoughtworks.com/insights/blog/three-common-mistakes-first-time-tech-lead&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Patrick Kua, in which he explains what are the anti-patterns (or mistakes) of a tech lead. They do not only apply to first timers, but more experienced ones as well.&lt;/p&gt;

&lt;p&gt;I especially like a comment:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Take all blame and give all credit: I ensure I always take the blame from the stakeholders when something is broken but when they praise, I say its all my teams efforts and I am just guiding them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://disqus.com/by/ravensnowbird/&#34; target=&#34;_blank&#34;&gt;ravensnowbird&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: patrick-kua, tech-lead, leadership, team-management, mistake&lt;/p&gt;

&lt;h2 id=&#34;sentimental-versioning&#34;&gt;Sentimental Versioning&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://sentimentalversioning.org/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; (unknown author) on alternatives to semver (semantic versioning).&lt;/p&gt;

&lt;p&gt;Tags: semver, semantic-versioning, sentimental-versioning, humor, parody&lt;/p&gt;

&lt;h2 id=&#34;devoxx-2015-how-to-become-a-java-champion&#34;&gt;Devoxx 2015: How to Become a Java Champion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;http//www.youtube.com/watch?v=otMc_3Dz3hU&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt; to Arun Gupta in which he explains what is a Java champion and how to become one.&lt;/p&gt;

&lt;p&gt;Tags: interview, arun-gupta, java-champion, devoxx&lt;/p&gt;

&lt;h2 id=&#34;how-can-i-become-a-champion-programmer&#34;&gt;How Can I Become a Champion Programmer?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javaspecialists.eu/archive/Issue227.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Heinz M. Kabutz on how to become a java champion&lt;/p&gt;

&lt;p&gt;Tags: heinz-kabutz, java-champion&lt;/p&gt;

&lt;h2 id=&#34;the-myth-of-using-scala-as-a-better-java&#34;&gt;The myth of using Scala as a better Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://appliedscala.com/blog/2017/myth-of-scala-as-better-java/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Denis Kalinin disproving &amp;lsquo;Java as a better Scala&amp;rsquo;. He covers dependency injection, database access, serialization.&lt;/p&gt;

&lt;p&gt;Tags: scala, java, comparison, orm, denis-kalinin, macwire, dependency-injection, serialization, database, myth&lt;/p&gt;

&lt;h2 id=&#34;the-eigenvector-of-why-we-moved-from-language-x-to-language-y&#34;&gt;The eigenvector of &amp;ldquo;Why we moved from language X to language Y&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://erikbern.com/2017/03/15/the-eigenvector-of-why-we-moved-from-language-x-to-language-y.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Erik Bern on the statistical analysis (based on people writing blog posts) of moving from language X to language Y.&lt;/p&gt;

&lt;p&gt;This can help predict which languages will be more prevalent in the future.&lt;/p&gt;

&lt;p&gt;Tags: eigenvector, statistic, erik-bern, language, programming-language, java, c, cplusplus, go, python&lt;/p&gt;

&lt;h2 id=&#34;facebook-s-code-quality-problem&#34;&gt;Facebook’s code quality problem&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.darkcoding.net/software/facebooks-code-quality-problem/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Graham King on the problems that Facebook is facing, at the code level, and how they solve some of them&lt;/p&gt;

&lt;p&gt;Tags: graham-king, facebook, quality, architecture, code-quality&lt;/p&gt;

&lt;h2 id=&#34;the-key-lesson-from-our-serverless-migration&#34;&gt;The key lesson from our serverless migration&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive1.com/?u=abe09ce689751513abf6f095f&amp;amp;id=6ecb59a937&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Gojko Adzic on serverless, a kind of lessons learned. Explains that their system can take 50% more users at 50% of the original cost.&lt;/p&gt;

&lt;p&gt;Also explains three ways of authenticating users: use IAM users, use Cognito, pre-sign URLs&lt;/p&gt;

&lt;p&gt;Tags: lessons-learned, gojko-adzic, serverless, paas, platform-as-a-service, retrospective, money, total-cost-of-ownership, tco,&lt;/p&gt;

&lt;h2 id=&#34;when-automation-goes-horribly-wrong&#34;&gt;When automation goes horribly wrong&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Gojko Adzic on a story of a manual process that was automated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Because it focused too much on replacing humans instead of assisting them, MiDAS actually made it more difficult for clerks to access the data they needed for review&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This reminded me of the framework vs library discussion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in frameworks you relinquish the control, putting your code into the allocated holes.&lt;/li&gt;
&lt;li&gt;using the automated system, you can only check the claim at a certain spot, where the system lets you do.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The system and the framework have been designed to take control of the situation. Both successful at what they do&lt;/p&gt;

&lt;p&gt;Tags: gojko-adzic, automation, framework, library, framework-vs-library, comparison, analogy&lt;/p&gt;

&lt;h2 id=&#34;how-i-store-my-1-s-and-0-s-zfs-bargain-hp-microserver-joy&#34;&gt;How I Store My 1’s and 0’s: ZFS  Bargain HP Microserver = JOY&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://mocko.org.uk/b/2012/06/17/how-i-store-my-1s-and-0s-zfs-bargain-hp-microserver-joy/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how Alex stores his backups, using a microserver&lt;/p&gt;

&lt;p&gt;Tags: backup, microserver, raid, zfs, backup-strategy&lt;/p&gt;

&lt;h2 id=&#34;meeting-policy&#34;&gt;Meeting policy&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/ueno/meeting-policy-9b04593d1b28&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by the Ueno team on how they handle meetings. Interesting that they require manager approval for meetings over a certain threshold (more than four people or more than half an hour).&lt;/p&gt;

&lt;p&gt;Tags: ueno, meeting-policy, meeting, approval&lt;/p&gt;

&lt;h2 id=&#34;a-brief-history-of-random-numbers&#34;&gt;A Brief History of Random Numbers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.freecodecamp.com/a-brief-history-of-random-numbers-9498737f5b6c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Carl Tashian on how random numbers have evolved (from dice to pseudo random number generator and random number generators). Explain how some companies that need true randomness (e.g., certificates company) generate them.&lt;/p&gt;

&lt;p&gt;Tags: carl-tashian, dice, random-number, randomness, prng, pseudo-random-number-generator, random-number-generator, number-generator, true-random-number-generator&lt;/p&gt;

&lt;h2 id=&#34;unlock-honest-feedback-with-this-one-word&#34;&gt;Unlock honest feedback with this one word&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://m.signalvnoise.com/unlock-honest-feedback-with-this-one-word-dcaf3839e7ee&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Claire Lew, in which she suggests to ask for &amp;lsquo;advice&amp;rsquo; instead of asking for &amp;lsquo;feedback&amp;rsquo; as a way of getting more honest and better responses.&lt;/p&gt;

&lt;p&gt;Tags: claire-lew, advice, feedback, feedback-process, improvement&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in January 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/01/01/self-study-in-january-2017/</link>
      <pubDate>Sun, 01 Jan 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/01/01/self-study-in-january-2017/</guid>
      <description>

&lt;h2 id=&#34;translation-from-haskell-to-javascript-of-selected-portions-of-the-best-introduction-to-monads-i-ve-ever-read&#34;&gt;Translation from Haskell to JavaScript of selected portions of the best introduction to monads I’ve ever read&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.jcoglan.com/2011/03/05/translation-from-haskell-to-javascript-of-selected-portions-of-the-best-introduction-to-monads-ive-ever-read/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by James Coglan, introducing monads.&lt;/p&gt;

&lt;p&gt;About composability:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The symmetry of the argument and return types is what makes these functions composable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;symmetric input and output types&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Guide to basic monadic functions:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;lift, which converts a &amp;lsquo;simple’ function into a debuggable function
bind, which converts a debuggable function into a composable form
unit, which converts a simple value into the format required for debugging, by placing it in a container&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The basic definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So what is a monad? Well, it’s a design pattern. It says that whenever you have a class of functions that accept one type of thing and return another type of thing, there are two functions that can be applied across this class to make them composable:&lt;/p&gt;

&lt;p&gt;There is a &lt;code&gt;bind&lt;/code&gt; function that transforms any function so that accepts the same type as it returns, making it composable
There is a &lt;code&gt;unit&lt;/code&gt; function that wraps a value in the type accepted by the composable functions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[I]t’s a very useful design pattern to be aware of because it helps you spot accidental complexity: code that isn’t dealing directly with the problem at hand, but which is dealing with glueing data types together&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: monad, monad-explanation, haskell, javascript, james-coglan, bind, unit, lift&lt;/p&gt;

&lt;h2 id=&#34;you-could-have-invented-monads-and-maybe-you-already-have&#34;&gt;You Could Have Invented Monads! (And Maybe You Already Have.)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html&#34; target=&#34;_blank&#34;&gt;this tutorial&lt;/a&gt; by Dan Piponi, in which he slowly introduces monads, using examples from everyday life.&lt;/p&gt;

&lt;p&gt;Tags: dan-piponi, monad, monad-explanation, haskell&lt;/p&gt;

&lt;h2 id=&#34;monads-part-one&#34;&gt;Monads, part one&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/02/21/monads-part-one/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes monads as a design pattern that &amp;ldquo;can sneak up on you&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-two&#34;&gt;Monads, part two&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/02/25/monads-part-two/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes monad examples in the C# code. Also describes what an &amp;lsquo;amplifier&amp;rsquo; is. I relate it to composing behavior.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An &amp;ldquo;amplifier&amp;rdquo; is something that increases the representational power of their &amp;ldquo;underlying&amp;rdquo; type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming, amplifier&lt;/p&gt;

&lt;h2 id=&#34;monads-part-three&#34;&gt;Monads, part three&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/02/28/monads-part-three/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes how to wrap a value in a monadic wrapper (&lt;code&gt;unit&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-four&#34;&gt;Monads, part four&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/04/monads-part-four/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he explains the second function (&lt;code&gt;bind&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-five&#34;&gt;Monads, part five&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/07/monads-part-five/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he explains the three laws, which are later compressed into two (&lt;code&gt;unit&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-six&#34;&gt;Monads, part six&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/11/monads-part-six/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he explains the logical identity of applying the function inside a monad and outside a monad.&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-seven&#34;&gt;Monads, part seven&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/14/monads-part-seven/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he states the three laws of monads:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Applying the construction function to a given instance of the monad produces a logically identical instance of the monad.&lt;/li&gt;
&lt;li&gt;Applying a function to the result of the construction function on a value, and applying that function to the value directly, produces two logically identical instances of the monad.&lt;/li&gt;
&lt;li&gt;Applying to a value a first function followed by applying to the result a second function, and applying to the original value a third function that is the composition of the first and second functions, produces two logically identical instances of the monad.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-eight&#34;&gt;Monads, part eight&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/18/monads-part-eight/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes the monad terms he was using other, more common names (&lt;code&gt;unit&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-nine&#34;&gt;Monads, part nine&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/21/monads-part-nine/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he creates a &lt;code&gt;Tainted&lt;/code&gt; monad, which is basically a &lt;code&gt;Nullable&lt;/code&gt; or &lt;code&gt;Maybe&lt;/code&gt; monad&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-ten&#34;&gt;Monads, part ten&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/25/monads-part-ten/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes &lt;code&gt;Where&lt;/code&gt; (as the query syntax form) using the &lt;code&gt;bind&lt;/code&gt; signature&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-eleven&#34;&gt;Monads, part eleven&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/03/28/monads-part-eleven/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he describes the &amp;ldquo;additive monad&amp;rdquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;There is a zero value of every construction of the monadic type.&lt;/li&gt;
&lt;li&gt;There is a way to add two monads with the same underlying type together.&lt;/li&gt;
&lt;li&gt;The zero value is the identity of the add operation.&lt;/li&gt;
&lt;li&gt;Using bind to apply any function to the zero produces the zero.&lt;/li&gt;
&lt;li&gt;Using bind to apply the function &lt;code&gt;a=&amp;gt;zero&lt;/code&gt; to any &lt;code&gt;M&amp;lt;A&amp;gt;&lt;/code&gt; produces the zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming, additive-monad&lt;/p&gt;

&lt;h2 id=&#34;monads-part-twelve&#34;&gt;Monads, part twelve&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/04/02/monads-part-twelve/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he explains how the &lt;code&gt;SelectMany&lt;/code&gt; could be implemented (but it is not implemented in practice)&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;monads-part-thirteen&#34;&gt;Monads, part thirteen&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ericlippert.com/2013/04/03/monads-part-thirteen/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert, in which he suggests reading a similar article on the Task comonad&lt;/p&gt;

&lt;p&gt;Tags: eric-lippert, monad, monad-explanation, c-sharp, functional-programming, comonad&lt;/p&gt;

&lt;h2 id=&#34;tasks-monads-and-linq&#34;&gt;Tasks, Monads, and LINQ&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blogs.msdn.microsoft.com/pfxteam/2013/04/03/tasks-monads-and-linq/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Stephen Toub in which he explains the comonad &lt;code&gt;Task&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A comonad:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] dual of a monad, a triple consisting of the type and two operators: &lt;code&gt;Extract&lt;/code&gt; (the flip of &lt;code&gt;Unit&lt;/code&gt;/&lt;code&gt;Return&lt;/code&gt;) and &lt;code&gt;Extend&lt;/code&gt; (the flip of &lt;code&gt;Bind&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: comonad, monad, monad-explanation, stephen-toub, c-sharp, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;5-questions-every-unit-test-must-answer&#34;&gt;5 Questions Every Unit Test Must Answer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/javascript-scene/what-every-unit-test-needs-f6cd34d9836d&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; (titled as a listicle) by Eric Elliot about unit tests:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;What are you testing?&lt;/li&gt;
&lt;li&gt;What should it do?&lt;/li&gt;
&lt;li&gt;What is the actual output?&lt;/li&gt;
&lt;li&gt;What is the expected output?&lt;/li&gt;
&lt;li&gt;How can the test be reproduced?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: eric-elliott, javascript, unit-test, test&lt;/p&gt;

&lt;h2 id=&#34;why-you-should-be-planning-for-2018-not-2017&#34;&gt;Why You Should be Planning for 2018, Not 2017.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/the-mission/why-you-should-be-planning-for-2018-not-2017-7c8fea3e2e52&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Benjamin P. Hardy on motivation, planning and designing your life.&lt;/p&gt;

&lt;p&gt;Some quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] having the power to make choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The right to choice&lt;/li&gt;
&lt;li&gt;The responsibility to choose&lt;/li&gt;
&lt;li&gt;The results of choice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[&amp;hellip;] hope reflects your perceptions regarding your capacity to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clearly conceptualize goals&lt;/li&gt;
&lt;li&gt;develop the specific strategies to reach those goals (i.e., pathways thinking)&lt;/li&gt;
&lt;li&gt;initiate and sustain the motivation for using those strategies (i.e., agency thinking).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[&amp;hellip;] motivation involves three components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the value you place on your goal&lt;/li&gt;
&lt;li&gt;your belief that specific behaviors will actually facilitate the outcomes you desire&lt;/li&gt;
&lt;li&gt;your belief in your own ability to successfully execute the behaviors requisite to achieving your goals&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: benjamin-hardy, motivation, life, planning, long-term-plans&lt;/p&gt;

&lt;h2 id=&#34;get-5-better&#34;&gt;Get 5% Better&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.farnamstreetblog.com/2016/03/five-percent-better/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, in which the author explains how compound interest does not only apply to investing and saving but also personal improvement.&lt;/p&gt;

&lt;p&gt;Tags: kaizen, personal-improvement, compound-interest&lt;/p&gt;

&lt;h2 id=&#34;hunter-s-thompson-s-letter-on-finding-your-purpose-and-living-a-meaningful-life&#34;&gt;Hunter S. Thompson’s Letter on Finding Your Purpose and Living a Meaningful Life&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.farnamstreetblog.com/2014/05/hunter-s-thompson-to-hume-logan/&#34; target=&#34;_blank&#34;&gt;this letter&lt;/a&gt; from Hunter S. Thompson to his friend Hume Logan, containing advice on living your own life: must find your own way, decide between floating or swimming to your goal and strive to be yourself.&lt;/p&gt;

&lt;p&gt;Tags: hunter-thompson, hume-logan, advice, psychology, life&lt;/p&gt;

&lt;h2 id=&#34;the-japanese-philosophy-of-kaizen-offers-an-effective-manageable-way-to-achieve-long-term-goals&#34;&gt;The Japanese philosophy of Kaizen offers an effective, manageable way to achieve long-term goals&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://qz.com/867711/the-japanese-philosophy-of-kaizen-offers-an-effective-manageable-way-to-achieve-long-term-goals/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Thomas Oppong on kaizen, or continuous improvement, and how it applies like compound interest to your life.&lt;/p&gt;

&lt;p&gt;Tags: kaizen, continous-improvement, thomas-oppong, compound-interest, life, psychology&lt;/p&gt;

&lt;h2 id=&#34;preparing-for-a-software-interview&#34;&gt;Preparing for a Software Interview&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://42hire.com/preparing-for-a-software-interview-6d0392a3d72c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Alvaro Videla on interviewing technical people.&lt;/p&gt;

&lt;p&gt;Tags: recruitement, interviewing, interview, alvaro-videla&lt;/p&gt;

&lt;h2 id=&#34;why-recursive-data-structures&#34;&gt;Why Recursive Data Structures?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://raganwald.com/2016/12/27/recursive-data-structures.html&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Reginald “Raganwald” Braithwaite, on which he introduces the relationship between data structures and algorithms. Explains how the algorithm can be split into parts, following the data structure.&lt;/p&gt;

&lt;p&gt;Uses a library containing a function called &lt;code&gt;multirec&lt;/code&gt; for recursion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/multirec&#34; target=&#34;_blank&#34;&gt;a candidate&lt;/a&gt; library, in haskell&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lazutkin.com/blog/2008/06/30/using-recursion-combinators-javascript/&#34; target=&#34;_blank&#34;&gt;another candidate&lt;/a&gt; library, in javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: reginald-braithwaite, recursive-data-structure, quadtree, javascript, functional-programming, essay, data-structure, isomorphic, tree, multirec, linrec, tailrec, haskell&lt;/p&gt;

&lt;h2 id=&#34;leading-by-example&#34;&gt;Leading by Example&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.codinghorror.com/leading-by-example/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jeff Atwood on how the best leadership comes from doing, rather than telling how to do it. From being a leader rather than being a boss.&lt;/p&gt;

&lt;p&gt;Suggests further reads.&lt;/p&gt;

&lt;p&gt;Tags: leadership, team-lead, leading-by-example, jeff-atwood, gerald-weinberg&lt;/p&gt;

&lt;h2 id=&#34;discipline-makes-strong-developers&#34;&gt;Discipline Makes Strong Developers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.codinghorror.com/discipline-makes-strong-developers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jeff Atwood on a project sucess should not be attributed to a language or framework, but to the team&amp;rsquo;s and individuals&amp;rsquo; discipline.&lt;/p&gt;

&lt;p&gt;Also explains how small projects require different levels of discipline than large projects.&lt;/p&gt;

&lt;p&gt;Tags: leadership, discipline, nasa, code-complete, coding-horror, jeff-atwood&lt;/p&gt;

&lt;h2 id=&#34;effectively-integrating-into-software-development-teams&#34;&gt;Effectively Integrating Into Software Development Teams&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://dennisforbes.ca/index.php/2006/01/29/effectively-integrating-into-software-development-teams/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Dennis Forbes about authority and discipline in a team.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One organization’s Enterprise solution is another organization’s short sighted mistake.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: shiny, dennis-forbes, discipline, authority, psychology, politics&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>