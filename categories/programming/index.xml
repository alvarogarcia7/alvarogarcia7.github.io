<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/programming/</link>
    <description>Recent content in Programming on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Apr 2016 00:08:19 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in April 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/01/self-study-in-april-2016/</link>
      <pubDate>Fri, 01 Apr 2016 00:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/01/self-study-in-april-2016/</guid>
      <description>

&lt;h2 id=&#34;deliberate-practice-what-it-is-and-why-you-need-it&#34;&gt;Deliberate Practice: What It Is and Why You Need It&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Corbett Barr on what is deliberate practice and why it is needed to become an expert in a given domain field.&lt;/p&gt;

&lt;p&gt;The four essential components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Motivation&lt;/li&gt;
&lt;li&gt;Tailored (practice)&lt;/li&gt;
&lt;li&gt;Feedback&lt;/li&gt;
&lt;li&gt;Repetion
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: corbett-barr, deliberate-practice, expert, practice, anders-ericsson, talent, professional-development, career&lt;/p&gt;

&lt;h2 id=&#34;10-features-i-wish-java-would-steal-from-the-kotlin-language&#34;&gt;10 Features I Wish Java Would Steal From the Kotlin Language&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jooq.org/2016/03/31/10-features-i-wish-java-would-steal-from-the-kotlin-language/&#34; target=&#34;_blank&#34;&gt;this list of features&lt;/a&gt; that the Kotlin Language has that would be an improvement for the Java language. By Lukas Eder&lt;/p&gt;

&lt;p&gt;Tags: list, lukas-eder, kotlin, java, comparison, language, jooq&lt;/p&gt;

&lt;h2 id=&#34;how-we-built-uber-engineering-s-highest-query-per-second-service-using-go&#34;&gt;How we built Uber engineering&amp;rsquo;s highest query per second service using Go&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://eng.uber.com/go-geofence/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Kai Wei on a microservice they&amp;rsquo;ve built using Go.&lt;/p&gt;

&lt;p&gt;Explains the reasons for choosing that algorithm for geofencing, the performance they&amp;rsquo;re achieving, and the architecture.&lt;/p&gt;

&lt;p&gt;Tags: uber, go, microservice, performance, geofence, geofencing, rps, go-memory-model, kai-wei&lt;/p&gt;

&lt;h2 id=&#34;unwinding-uber-s-most-efficient-service&#34;&gt;Unwinding Uber&amp;rsquo;s Most Efficient Service&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@buckhx/unwinding-uber-s-most-efficient-service-406413c5871d&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Buck Heroux commenting on the decisions of Uber for building the geofencing microservice (above read).&lt;/p&gt;

&lt;p&gt;Explains the different alternatives for algorithms in this problem space and has implemented them in go. Provides a benchmark for comparing those, including a profiling session.&lt;/p&gt;

&lt;p&gt;Tags: s2, quadtree, rtree, brute-force, geofence, geofencing, uber, comment, buck-heroux, go, read-on-read, meta-read&lt;/p&gt;

&lt;h2 id=&#34;lawful-hacking-and-continuing-vulnerabilities&#34;&gt;Lawful Hacking and Continuing Vulnerabilities&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.schneier.com/blog/archives/2016/03/lawful_hacking_.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Bruce Schneier on the stance the FBI is taking in regards to vulnerabilities discovered in Apple&amp;rsquo;s devices.&lt;/p&gt;

&lt;p&gt;Tags: bruce-schneier, apple, security, fbi, vulnerability, exploit, law, hacking&lt;/p&gt;

&lt;h2 id=&#34;a-side-project-helped-jumpstart-my-career-life-learning&#34;&gt;A Side Project Helped Jumpstart My Career — Life Learning&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/life-learning/a-side-project-helped-jumpstart-my-career-7cd6f8e9b07f&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Dave Gerhardt on how making a side project happen affected his life and his skills.&lt;/p&gt;

&lt;p&gt;Some of the reasons for doing it include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It forces you to figure stuff out&lt;/li&gt;
&lt;li&gt;The only way to learn is by doing&lt;/li&gt;
&lt;li&gt;It gets your brain working on something other than your job&lt;/li&gt;
&lt;li&gt;You have to create your own network&lt;/li&gt;
&lt;li&gt;You are the CEO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: long-life-learning, continuous-learning, side-project, dave-gerhardt, drift, professional-development, personal-development, business, career&lt;/p&gt;

&lt;h2 id=&#34;fun-jekyll-tricks&#34;&gt;Fun Jekyll Tricks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.madebymarket.com/blog/dev/fun-jekyll-tricks.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brian Knapp where he explains some tips and tricks of jekyll (in which octopress is based on): speed, deployment, subcategories inside the blog, _data, _includes.&lt;/p&gt;

&lt;p&gt;Tags: brian-knapp, jekyll, octopress, tip-and-trick, improvement, subcategory, meta, automation, deployment&lt;/p&gt;

&lt;h2 id=&#34;la-ola-que-llega&#34;&gt;La ola que llega&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=f8a8ee92cc&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; by David Bonilla, where he explains (in Spanish) the &amp;lsquo;contractor&amp;rsquo; phenomenon arriving to Spain, 2-3 years after being in other countries and the effects that this could have both for workers and companies.&lt;/p&gt;

&lt;p&gt;Tags: bonilista, david-bonilla, contractor&lt;/p&gt;

&lt;h2 id=&#34;10-razones-por-las-que-este-sábado-deberías-ir-a-un-code-retreat&#34;&gt;10 razones por las que este sábado deberías ir a un code retreat&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://francho.org/2015/11/10/10-razones-para-ir-a-un-coderetreat/&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of reasons for attending a code retreat, by Francho Joven, who I met in the Global Day Of Code Retreat (GDCR) &amp;lsquo;15 in Zaragoza&lt;/p&gt;

&lt;p&gt;Tags: francho-joven, list, zaragoza, code-retreat, gdcr&lt;/p&gt;

&lt;h2 id=&#34;meaningful-work-through-passion-not-genius&#34;&gt;Meaningful Work through Passion, not Genius&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=pIYUMwxKFzo&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; on the importance of hard work and how it can be mistaken as genious. By Malcolm Gladwell&lt;/p&gt;

&lt;p&gt;Tags: malcolm-gladwell, passion, genius, work, time-management, productivity, career, mastery-autonomy-purpose&lt;/p&gt;

&lt;h2 id=&#34;how-to-ask-your-wife-for-permission-to-spend-250-000-on-a-domain-name&#34;&gt;How to ask your wife for permission to spend $250,000 on a domain name&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@Stockphoto.com/how-to-ask-your-wife-for-permission-to-spend-250-000-on-a-domain-name-c27a3c2852e1&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jon Yau on how they started StockPhoto.com, buying a $250,000 domain name.&lt;/p&gt;

&lt;p&gt;Tags: startup, domain, stockphoto, jon-yau&lt;/p&gt;

&lt;h2 id=&#34;sorry-developer-bootcamps-i-was-wrong&#34;&gt;Sorry, developer bootcamps: I was wrong&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@dillonforrest/sorry-developer-bootcamps-i-was-wrong-ea37fcc5572c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Dillon Forrest on the topic of developer bootcamps. Explains why developers should not be threatened by recent graduates of these programs and describes how people pursuing these programs usually are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intelligence&lt;/li&gt;
&lt;li&gt;Risk appetite&lt;/li&gt;
&lt;li&gt;Resilience&lt;/li&gt;
&lt;li&gt;Self-investment&lt;/li&gt;
&lt;li&gt;Entrepreneurship&lt;/li&gt;
&lt;li&gt;Growth trajectory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: bootcamp, developer-bootcamp, dev-bootcamp, dillon-forrest, intelligence, risk-appetite, resilience, self-investment, entrepreneurship, growth-trajectory&lt;/p&gt;

&lt;h2 id=&#34;the-jvm-and-java-garbage-collection&#34;&gt;The JVM and Java Garbage Collection&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=DoJr5QQYsl8&#34; target=&#34;_blank&#34;&gt;this webcast&lt;/a&gt; about how the JVM garbage collection works. By Michael W Williams&lt;/p&gt;

&lt;p&gt;Tags: michael-williams, oracle, webcast, jvm, garbage-collection, gc,&lt;/p&gt;

&lt;h2 id=&#34;files-are-hard&#34;&gt;Files Are Hard&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://danluu.com/file-consistency/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why software that writes on files is difficult, based on the different filesystems that are below, and the operating system. Written by Dan Luu.&lt;/p&gt;

&lt;p&gt;Uses software product to find bugs in filesystems&lt;/p&gt;

&lt;p&gt;Tags: filesystem, file, dan-luu, analysis&lt;/p&gt;

&lt;h2 id=&#34;contrata-a-un-fracasado-con-ilusión-inquebrantable&#34;&gt;Contrata a un fracasado con ilusión inquebrantable&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.contunegocio.es/tecnologia/contrata-a-un-fracasado-con-ilusion-inquebrantable/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Alberto Mena (in Spanish) on what are the qualities that define a good programmer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;humility&lt;/li&gt;
&lt;li&gt;failure&lt;/li&gt;
&lt;li&gt;illusion&lt;/li&gt;
&lt;li&gt;hard work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: alberto-mena, spanish, team-management, success, developer, quality, developer-quality&lt;/p&gt;

&lt;h2 id=&#34;don-t-react&#34;&gt;Don&amp;rsquo;t react&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://journal.avdi.org/2016/04/14/dont-react/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Avdi Grimm on how the action vs reaction attitude. Why to prefer the former.&lt;/p&gt;

&lt;p&gt;Tags: action, reaction, social-media, avdi-grimm, productivity&lt;/p&gt;

&lt;h2 id=&#34;ftp-is-so-90-s-let-s-deploy-via-git-instead&#34;&gt;FTP is so 90&amp;rsquo;s. Let&amp;rsquo;s deploy via Git instead!&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://coderwall.com/p/xczkaq/ftp-is-so-90-s-let-s-deploy-via-git-instead&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; on how to deploy using git. By Kerrick Long&lt;/p&gt;

&lt;p&gt;Tags: kerrick-long, git, deployment, webapp, application, devops&lt;/p&gt;

&lt;h2 id=&#34;job-vs-career-10-key-differences-you-need-to-understand&#34;&gt;Job vs Career: 10 Key Differences You Need To Understand&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.officevibe.com/blog/job-vs-career&#34; target=&#34;_blank&#34;&gt;the infographic and the article&lt;/a&gt; by Jacob Shriar on what differentiates a job from a career&lt;/p&gt;

&lt;p&gt;Tags: jacob-shriar, infographic, job-vs-career, comparison, job, career&lt;/p&gt;

&lt;h2 id=&#34;the-secret-to-employee-motivation&#34;&gt;The Secret To Employee Motivation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.officevibe.com/blog/secret-employee-motivation-infographic&#34; target=&#34;_blank&#34;&gt;the infographic and the article&lt;/a&gt; by Jacob Shriar on what motivates employess: mastery, autonomy and purpose. A direct reference to Dan Pink&amp;rsquo;s &amp;ldquo;The puzzle of motivation&amp;rdquo; TED talk.&lt;/p&gt;

&lt;p&gt;Tags: jacob-shriar, motivation, employee, infographic, mastery, autonomy, purpose&lt;/p&gt;

&lt;h2 id=&#34;the-puzzle-of-motivation&#34;&gt;The puzzle of motivation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.ted.com/talks/dan_pink_on_motivation&#34; target=&#34;_blank&#34;&gt;this TED talk&lt;/a&gt; by Dan Pink on what motivates us: intrinsic vs extrinsic motivation.&lt;/p&gt;

&lt;p&gt;Also about the gap that exists between what science knows and what businesses propose.&lt;/p&gt;

&lt;p&gt;Tags: ted, ted-talk, video, dan-pink, mastery, autonomy, purpose&lt;/p&gt;

&lt;h2 id=&#34;applying-a-ceiling-to-the-bug-count&#34;&gt;Applying a ceiling to the bug count&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://techblog.king.com/applying-a-ceiling-to-the-bug-count/&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt;, written by Susanna Berg, on how King has reduced the amount of bugs in their backlog using an agile technique, measuring and setting a limit.&lt;/p&gt;

&lt;p&gt;Tags: susanna-berg, king, agile, bug, bug-count, defect, defect-count, per-malmen&lt;/p&gt;

&lt;h2 id=&#34;coming-up-in-2016-spring-framework-4-3-5-0&#34;&gt;Coming up in 2016: Spring Framework 4.3 &amp;amp; 5.0&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://spring.io/blog/2015/08/03/coming-up-in-2016-spring-framework-4-3-5-0&#34; target=&#34;_blank&#34;&gt;this announcement&lt;/a&gt; of Spring&amp;rsquo;s new release, 5.0, which will require java 8 and will turn most of the features into the reactive programming paradigm. By Juergen Hoeller.&lt;/p&gt;

&lt;p&gt;Tags: juergen-hoeller, spring, reactive-programming, release, announcement&lt;/p&gt;

&lt;h2 id=&#34;why-offices-are-where-work-goes-to-die&#34;&gt;Why offices are where work goes to die&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://swizec.com/blog/why-offices-are-where-work-goes-to-die/swizec/6695&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Swizec Teller explaining the downsides of working in an office as compared to working remotely.&lt;/p&gt;

&lt;p&gt;Tags: swizec-teller, remote, home-office, office, comparison, time-management&lt;/p&gt;

&lt;h2 id=&#34;the-myth-of-the-passionate-developer&#34;&gt;The Myth of the Passionate Developer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@bm2yogi/the-myth-of-the-passionate-developer-76a41d457304&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Ibarra on what are the implications of being a passionate developer, how it affects your tasks and what are the factors to a job.&lt;/p&gt;

&lt;p&gt;Tags: michael-ibarra, passion, development, job, motivation, myth&lt;/p&gt;

&lt;h2 id=&#34;mossack-fonseca-breach-wordpress-revolution-slider-plugin-possible-cause&#34;&gt;Mossack Fonseca Breach – WordPress Revolution Slider Plugin Possible Cause&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.wordfence.com/blog/2016/04/mossack-fonseca-breach-vulnerable-slider-revolution/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mark Maunder, which describes an hypothesis on how the Mossack Fonseca breach could have happened. Also describes and shows how to breach a Wordpress installation with a vulnerable Revolution Slider plugin.&lt;/p&gt;

&lt;p&gt;Tags: mark-maunder, security, breach, mossack-fonseca-breach, mossack-fonseca, hypothesis, attack, plugin, revolution-slider, wordpress&lt;/p&gt;

&lt;h2 id=&#34;tim-urban-inside-the-mind-of-a-master-procrastinator&#34;&gt;Tim Urban: Inside the mind of a master procrastinator&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.ted.com/talks/tim_urban_inside_the_mind_of_a_master_procrastinator&#34; target=&#34;_blank&#34;&gt;this TED talk&lt;/a&gt; from Tim Urban on how the procrastinator&amp;rsquo;s mind works, exemplified by his own career.&lt;/p&gt;

&lt;p&gt;Tags: procrastinator, procrastination, mind, time-management, tim-urban&lt;/p&gt;

&lt;h2 id=&#34;pep-20-the-zen-of-python&#34;&gt;PEP 20 &amp;ndash; The Zen of Python&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.python.org/dev/peps/pep-0020/&#34; target=&#34;_blank&#34;&gt;the PEP20&lt;/a&gt;, the zen of python, with special attention to this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Explicit is better than implicit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: pep-20, pep, python, zen&lt;/p&gt;

&lt;h2 id=&#34;why-i-switched-from-octopress-2-to-hugo&#34;&gt;Why I switched from Octopress 2 to Hugo&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://conscientiousprogrammer.com/blog/2015/05/31/why-i-switched-from-octopress-2-to-hugo/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Franklin Chen on the change he made on the static site generator (SSG) he used. He considered hakyll, octopress, jekyll, hugo. Was decided between hakyll and hugo for their speed but, finally, decided to use hugo for their bigger community.&lt;/p&gt;

&lt;p&gt;Tags: franklin-chen, comparison, ssg, static-site-generator, hakyll, octopress, jekyll, hugo, change, speed, statically-typed, dynamically-typed, golang, performance&lt;/p&gt;

&lt;h2 id=&#34;why-incremental-regeneration-in-jekyll-3-0-is-such-a-big-deal&#34;&gt;Why incremental regeneration in Jekyll 3.0 is such a big deal&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://idratherbewriting.com/2015/11/04/jekyll-30-released-incremental-regeneration-rocks/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tom Johnson on one of the new features that jekyll 3.0 brings: incremental generation. How this can speed up the generation&lt;/p&gt;

&lt;p&gt;Tags: tom-johnson, incremental-generation, speed, performance, octopress-2, octopress-3, jekyll-3&lt;/p&gt;

&lt;h2 id=&#34;hugo-s3-travis-ci-oh-boy&#34;&gt;Hugo, S3, Travis CI, oh boy!&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://continuousfailure.com/post/s3_blog/&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; by Alan Scherger on how to set up a specific stack for developing and deploying a static site blog.&lt;/p&gt;

&lt;p&gt;Tags: alan-scherger, static-site-generator, ssg, travis, hugo, s3&lt;/p&gt;

&lt;h2 id=&#34;deploy-your-blog-to-github-pages-automatically-using-hugo-and-travis&#34;&gt;Deploy your blog to github pages automatically using Hugo and Travis&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://rcoedo.com/post/hugo-static-site-generator/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Roman Coedo on how to deploy a hugo blog to github pages, using travis.&lt;/p&gt;

&lt;p&gt;Tags: roman-coedo, travis, hugo, github, github-pages, ssg, static-site-generator&lt;/p&gt;

&lt;h2 id=&#34;improve-octopress-with-advanced-tweaks-tips&#34;&gt;Improve Octopress with Advanced Tweaks &amp;amp; Tips&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.narga.net/improve-octopress-advanced-tweaks-tips/&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of tips on how to improve the octopress (2) installation. By Nguyễn Đình Quân.&lt;/p&gt;

&lt;p&gt;Tags: nguyen-dinh-quan, octopress-2, tip, tweak&lt;/p&gt;

&lt;h2 id=&#34;laboratorios&#34;&gt;Laboratorios&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.presionblogosferica.com/2014/11/12/laboratorios/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ángel Medinilla, about laboratories to use a percentage of company time to investigate, innovate, learn and improve.&lt;/p&gt;

&lt;p&gt;Tags: angel-medinilla, team-management, time-management, innovation, strategy, improvement, kaizen, laboratory, craftsmanship, spanish&lt;/p&gt;

&lt;h2 id=&#34;what-refactoring-is-and-what-it-isn-t&#34;&gt;What Refactoring is, and what it isn’t&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://swreflections.blogspot.com/2012/04/what-refactoring-is-and-what-it-isnt.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jim Bird, where he splits some practices into refactoring and not refactoring. Draws the line between these two different activities.&lt;/p&gt;

&lt;p&gt;Also cites scratch refactoring.&lt;/p&gt;

&lt;p&gt;Tags: jim-bird, scratch-refactoring, refactoring, martin-fowler, kent-beck, definition, quote, design&lt;/p&gt;

&lt;h2 id=&#34;pitfalls-of-unlimited-vacations&#34;&gt;Pitfalls of Unlimited Vacations&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://haacked.com/archive/2016/02/18/unlimited-vaction-pitfalls/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Phil Haack on the github, travis and netflix policies about unlimited vacations and the effects they have on the employees.&lt;/p&gt;

&lt;p&gt;Also about minimum vacation periods, (paternity) paid leave.&lt;/p&gt;

&lt;p&gt;Tags: phil-haack, unlimited-vacation, holiday, vacation, team-management, burnout, github, travis, netflix, policy&lt;/p&gt;

&lt;h2 id=&#34;cultura-corporativa&#34;&gt;Cultura Corporativa&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.presionblogosferica.com/2011/02/06/cultura-corporativa/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ángel Medinilla about the corporate culture, and how &amp;ldquo;hanging a highly interchangeable sentence on a wall&amp;rdquo; does not represent it.&lt;/p&gt;

&lt;p&gt;Tags: angel-medinilla, corporate culture, spanish&lt;/p&gt;

&lt;h2 id=&#34;what-it-s-really-like-to-learn-to-code&#34;&gt;What It’s Really Like to Learn to Code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@sandjar/what-it-s-really-like-to-learn-to-code-53f6d9156a32&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains firsthand how it is to learn programming for a novice student,even with a strong financial background and having completed a university degree. By Sandjar Kozubaev&lt;/p&gt;

&lt;p&gt;Tags: sandjar-kozubaev, learning, programming, student, firsthand, coding, story&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in February 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</link>
      <pubDate>Mon, 01 Feb 2016 02:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</guid>
      <description>

&lt;h2 id=&#34;software-and-all-that-comes-with-it&#34;&gt;Software and all that comes with it&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lanyrd.com/2011/fromthefront/sgfgw/&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about creating software and asking questions to deliver value, by Alberto Brandolini&lt;/p&gt;

&lt;p&gt;Tags: alberto-brandolini, software, slide, team-management, agile&lt;/p&gt;

&lt;h2 id=&#34;driving-your-dba-crazy-in-3-easy-steps&#34;&gt;Driving your DBA crazy in 3 easy steps&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lanyrd.com/2011/ddd-day-it/shzym&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about dealing with the knowledge that is present in the database, not expressed in ubiquitous language and cause of the low bus factor, by Alberto Brandolini&lt;/p&gt;

&lt;p&gt;Analogy between the movie The Shining and a model / entities / aggregates.&lt;/p&gt;

&lt;p&gt;Tags: ddd, model, entity, aggregate, team-management, dba, agile, ubiquitous-language, alberto-brandolini, bus-factor, slide&lt;/p&gt;

&lt;h2 id=&#34;shorter-feedback-is-not-always-bett&#34;&gt;Shorter Feedback is not Always Bett&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://facebook.com/notes/kent-beck/shorter-feedback-is-not-always-bett/1097086386990891&#34; target=&#34;_blank&#34;&gt;this note&lt;/a&gt; from Kent Beck on why shorter feedback loops might not always be better. I.e., why some processes take time to set in and results are not observable until that time.&lt;/p&gt;

&lt;p&gt;Tags:  kent-beck, feedback-loops, open-question, analogy&lt;/p&gt;

&lt;h2 id=&#34;la-regla-del-triple-check-para-ir-a-eventos&#34;&gt;La Regla del Triple Check para ir a eventos&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.bonillaware.com/regla-triple-check-para-ir-a-eventos&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Bonilla about a rule to help you decide attendance to events, in Spanish&lt;/p&gt;

&lt;p&gt;Tags: rule, time-management, david-bonilla, event, spanish, triple-check&lt;/p&gt;

&lt;h2 id=&#34;an-interview-with-charles-wetherell&#34;&gt;An interview with Charles Wetherell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://demin.ws/blog/english/2012/08/25/interview-with-charles-wetherell/&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt; by Alexander Demin about the interviewee&amp;rsquo;s book &amp;ldquo;Etudes for Programmers&amp;rdquo;. In it, they talk about the origin of the études, the author&amp;rsquo;s research interests and activities. Also about the book (written in 1978) and how computer science has changed since then.&lt;/p&gt;

&lt;p&gt;When asked about three things a programmer should know:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some ability to do formal mathematics. The level necessary to understand Hopcroft and Ullman combined with a little graph theory is enough. Discrete mathematics is essential; calculus is only necessary for folks working in special application areas.&lt;/p&gt;

&lt;p&gt;Some ability to write clearly in their native language. Dijkstra said that if a person couldn’t write their own language, they couldn’t write a correct program. (Well, that’s what I hope Dijkstra said!). Writing programs is essentially the same as writing a non-fiction essay. If you can’t make the step-by-step connections clearly in your own language, why would we think you could in C, for example?&lt;/p&gt;

&lt;p&gt;Remember that a program is primarily for communication with humans, not computers. When you write a program, the computer will do whatever you say. You must convince the humans who read the program that what you have asked the computer to do is the correct thing to do. Remember, the computer doesn’t care about correctness.&lt;/p&gt;

&lt;p&gt;The answer to the last question means that programs should always have the form of paragraphs of comments that describe the intention of the program followed by paragraphs of code that implement that intention. All of the formatting should be designed to make readers as able as possible to read the code easily; the compiler doesn’t care. In particular, follow conventions of mathematics and your native language, not those you found in some random language manual. Write the comments first and then write the code, not the other way around. If you don’t know what you want to achieve and why, any code you write is, by definition, incorrect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: charles-wetherell, alexander-demin, interview, book, etude, etudes-for-programmers, practice, ability, skill, list&lt;/p&gt;

&lt;h2 id=&#34;how-to-fix-javascript-maybe&#34;&gt;How to fix Javascript… maybe&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@wob/how-to-fix-javascript-maybe-8857819bfa16&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Drew Hamlett about the lack of style guide for javascript and how this affects the adoption of the language and the sprout of similar libraries.&lt;/p&gt;

&lt;p&gt;Suggests the creation of a standard style guide for javascript.&lt;/p&gt;

&lt;p&gt;Tags: drew-hamlett, javascript, style-guide, analysis&lt;/p&gt;

&lt;h2 id=&#34;isomorphic-javascript-devbeat-master-class&#34;&gt;Isomorphic JavaScript: #DevBeat Master Class&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/spikebrehm/a-28174727&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Spike Brehm on Isomorphic JavaScript and why it&amp;rsquo;s important: initial pageload and speed, reducing effort and duplication, SEO (crawlability).&lt;/p&gt;

&lt;p&gt;Tags: isomorphic-javascript, isomorphism, javascript, seo, crawler, frontend, app, application, fat-client, fat-server, thin-client, thin-server, ria-spike-brehm, slide&lt;/p&gt;

&lt;h2 id=&#34;open-sourcing-our-docker-images&#34;&gt;Open-sourcing our docker images&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.modulus.io/open-sourcing-our-docker-images&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brandon Cannaday about the Docker images that they have.&lt;/p&gt;

&lt;p&gt;Tags: docker, brandon-annaday, open-ource, image, container, modulus&lt;/p&gt;

&lt;h2 id=&#34;growing-up-in-an-open-source-world&#34;&gt;growing up in an open source world&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://fiveisprime.me/2015/02/18/growing-up-in-open-source/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matt Hernandez where he explains that fixing the style guide can limit your creativity and how the software is written in enterprise and open-source environments.&lt;/p&gt;

&lt;p&gt;Also about how developers grow when exposed to different style guides.&lt;/p&gt;

&lt;p&gt;Tags: style-guide, matt-hernandez, creativity, dreyfus-model, enterprise, open-source, programming&lt;/p&gt;

&lt;h2 id=&#34;hanlon-s-razor-and-working-with-young-engineers&#34;&gt;Hanlon&amp;rsquo;s Razor and working with young engineers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://fiveisprime.me/2013/07/27/young-engineers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matt Hernandez on the importance of understanding (and empathising) towards others&amp;rsquo; positions and worries.&lt;/p&gt;

&lt;p&gt;Cites the Hanlon Razor:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Never attribute to malice that which is adequately explained by ignorance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags:  hanlon-razor, empathy, team-management, ignorance, malice, matt-hernandez&lt;/p&gt;

&lt;h2 id=&#34;intro-to-sails-js&#34;&gt;Intro to sails.js&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://youtu.be/GK-tFvpIR7c&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt;, an introduction to the sails.js framework: a realtime nodejs server for creating REST APIs, inspired by Ruby on Rails.&lt;/p&gt;

&lt;p&gt;Tags: sailsjs, ruby-on-rails, ror, framework, video, introduction, mvc, rest-api, realtime, nodejs,&lt;/p&gt;

&lt;h2 id=&#34;node-js-and-hapi-creating-a-rest-api&#34;&gt;Node.js and hapi - creating a rest api&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.modulus.io/nodejs-and-hapi-create-rest-api&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about creating a REST API using &lt;a href=&#34;http://hapijs.com/&#34; target=&#34;_blank&#34;&gt;Hapi&lt;/a&gt;, a nodejs framework. Written by Matt Hernandez&lt;/p&gt;

&lt;p&gt;Tags: matt-hernandez, rest-api, nodejs, hapi, framework&lt;/p&gt;

&lt;h2 id=&#34;introducing-pokedex-org-a-progressive-webapp-for-pokémon-fans&#34;&gt;Introducing Pokedex.org: a progressive webapp for Pokémon fans&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Nolan Lawson about the challenge of having a 60 fps application on a mobile device, making it offline.&lt;/p&gt;

&lt;p&gt;Uses Angular 2, javascript 7, PouchDB as well as LocalForage for storage. All processing on WebWorkers, except for DOM manipulation.&lt;/p&gt;

&lt;p&gt;Tags: angular-2, javascript-7, angular, javascript, pouchdb, localforage, cloudant, 60fps, mobile, app, offline-first, offline, pokemon, api, nolan-lawson, web-worker, flip-technique, css, progressive, pokedex, svgomg, frontend&lt;/p&gt;

&lt;h2 id=&#34;lambdaconf-2015-how-to-learn-haskell-in-less-than-5-years-chris-allen&#34;&gt;LambdaConf 2015 - How to Learn Haskell in Less Than 5 Years Chris Allen&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=Bg9ccYzMbxc&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Chris Allen on how to learn haskell, what are some common pitfalls while learning it and how learning and teaching (it) are different.&lt;/p&gt;

&lt;p&gt;Talks about his (with a coauthor) book, focused on not reducing the readers that make it to the end and, finally, increasing the amount of haskell users.&lt;/p&gt;

&lt;p&gt;References &lt;a href=&#34;https://yow.eventer.com/yow-2014-1222/stop-treading-water-learning-to-learn-by-edward-kmett-1750&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Kmett.&lt;/p&gt;

&lt;p&gt;Tags: chris-allen, haskell, learning-to-learn, meta-learning, lambda-conf, talk&lt;/p&gt;

&lt;h2 id=&#34;extreme-continuous-delivery-at-unruly&#34;&gt;Extreme Continuous Delivery - at Unruly&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.xpdays.de/2014/downloads/002-extreme-continuous-delivery-at-unruly/cd_javaone.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about how the company Unruly does continuous delivery (CD), maximizing business value, minimizing time to market (TTM). Also describes how they do deployments and how to organize teams.&lt;/p&gt;

&lt;p&gt;References: Extreme Programming Explained (Beck), Continuous Delivery (Humble &amp;amp; Farley)&lt;/p&gt;

&lt;p&gt;Tags: silo, team-management, culture, continuous-delivery, tdd, nagdd, shared-infrastructure, acceptance-testing, module-testing, conway-law, cross-pollination, continuous-investment, slide&lt;/p&gt;

&lt;h2 id=&#34;building-chat-applications-and-robots-for-skype&#34;&gt;Building chat applications and robots for Skype&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://opensourcehacker.com/2013/03/28/building-chat-applications-and-robots-for-skype/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on building robots for skype. By Mikko Ohtamaa&lt;/p&gt;

&lt;p&gt;Tags: skype, robot, bot, mikko-ohtamaa, slack, integration, api&lt;/p&gt;

&lt;h2 id=&#34;why-i-never-wrote-down-our-company-values&#34;&gt;Why I never wrote down our company values&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/swlh/why-i-never-wrote-down-our-company-values-8143520497e8&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mikael Cho on the subject of having company values, preaching or writing them down. Also, what happens when hard times come, regarding your values.&lt;/p&gt;

&lt;p&gt;Tags: mikael-cho, value, company-value, analogy&lt;/p&gt;

&lt;h2 id=&#34;interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-protocol-design&#34;&gt;Interview with Jesper Louis Andersen about Erlang, Haskell, OCaml, Go, Idris, the JVM, software and protocol design &lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this interview (&lt;a href=&#34;https://medium.com/this-is-not-a-monad-tutorial/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-b0de06440fbd&#34; target=&#34;_blank&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;https://medium.com/this-is-not-a-monad-tutorial/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-5628fe591295&#34; target=&#34;_blank&#34;&gt;part 2&lt;/a&gt;) to Jesper Louis Andersen, interviewed by Federico Carrone.&lt;/p&gt;

&lt;p&gt;The first part is about a comparison of languages, what/why he uses them, and protocol design. The second is more about the Erlang language, the BEAM VM, and some experiences.&lt;/p&gt;

&lt;p&gt;Tags: federico-carrone, erlang, interview, jesper-andersen, jesper-louis-andersen, haskell, ocaml, go, idris, the-jvm, protocol-design, software-design, language, functional-programming, protocol, land-of-lisp, northern-war&lt;/p&gt;

&lt;h2 id=&#34;migrating-to-hugo-from-octopress&#34;&gt;Migrating to Hugo From Octopress&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://nathanleclaire.com/blog/2014/12/22/migrating-to-hugo-from-octopress/&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; by Nathan LeClaire on migrating the blog from Octopress to Hugo&lt;/p&gt;

&lt;p&gt;Tags: static-site-generator, hugo, go, octopress, ruby, jekyll, nathan-leclaire, migration, blog, meta&lt;/p&gt;

&lt;h2 id=&#34;dynamic-static-site-generators-strategies&#34;&gt;Dynamic Static Site Generators strategies&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://timnash.co.uk/dynamic-static-site-generators-strategies/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining what are static site generators, and an example with Jekyll. By Tim Nash&lt;/p&gt;

&lt;p&gt;Tags: tim-nash, static-site-generator, jekyll, strategy, explanation, comparison&lt;/p&gt;

&lt;h2 id=&#34;blog-like-a-confused-hacker&#34;&gt;Blog like a confused hacker&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://timnash.co.uk/using-wordpress-static-site-generator/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tim Nash on what tools he recomends for static site generation.&lt;/p&gt;

&lt;p&gt;Tags: tim-nash, static-site-generator, jekyll, hide, strategy, explanation, comparison, sublime, wordpress, amazon-s3, cdn&lt;/p&gt;

&lt;h2 id=&#34;resolving-the-frontend-backend-api-design-conflict&#34;&gt;Resolving the Frontend/Backend API Design Conflict&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://launchany.com/resolving-the-frontendbackend-api-design-conflict/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains the &amp;ldquo;Backend for Frontend&amp;rdquo; (BFF) pattern, for solving the different needs of data depending on each device / client. By James Higginbotham&lt;/p&gt;

&lt;p&gt;Tags: james-higginbotham, bff, pattern, backend-for-frontend, api, soa, microservice, frontend, backend, architecture&lt;/p&gt;

&lt;h2 id=&#34;what-if-we-forget-to-write-the-tests&#34;&gt;What If We Forget To Write The Tests?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=f70f14b644&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on the trust issues related to starting to use a new methodology (TDD in this case) and how to see what impacts it might have in your day to day.&lt;/p&gt;

&lt;p&gt;Tags: j-b-rainsberger, j-brains, rainsberger, tdd, motivation, team-management&lt;/p&gt;

&lt;h2 id=&#34;api-microservices-the-unix-philosophy-and-the-richardson-maturity-model-a-practical-perspective&#34;&gt;API microservices, the Unix philosophy, and the Richardson Maturity Model - a practical perspective&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@chrstphrhrt/microservices-the-unix-philosophy-and-the-richardson-maturity-model-425abed44826&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Chris Hart on why startups and companies alike should be careful when choosing th latest technology and how this applies to microservices.&lt;/p&gt;

&lt;p&gt;Tags: microservice, chris-hart, startup, analysis, company, technical-debt, bounded-context, ddd, rest-api&lt;/p&gt;

&lt;h2 id=&#34;effective-programming&#34;&gt;Effective programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@sebas5384/effective-programming-d7e5bb2f3b80&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sebastian Ferrari on the importance of clean code, systems thinking and functional programming.&lt;/p&gt;

&lt;p&gt;Specifies the important difference between effectiveness and efficiency.&lt;/p&gt;

&lt;p&gt;Links to this talk by &lt;a href=&#34;https://youtu.be/OqEeIG8aPPk&#34; target=&#34;_blank&#34;&gt;Russ Ackoff&lt;/a&gt;. States the difference between &amp;ldquo;the right thing&amp;rdquo; and &amp;ldquo;the thing right&amp;rdquo;, by Drucker.&lt;/p&gt;

&lt;p&gt;Tags: drucker, thing-right, right-thing, sebastian-ferrari, system-thinking, russ-ackoff, video, ted, difference, clean-code, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;learning-how-to-learn&#34;&gt;Learning how to learn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@thejameskyle/learning-how-to-learn-7f04d6f42c1e&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by James Kyle about the &amp;ldquo;how to learn&amp;rdquo; as one important skill for programmers and how having the solution at a few keystrokes limits / handicaps this ability.&lt;/p&gt;

&lt;p&gt;Tags: programmer, learn-to-learn, james-kyle, stack-overflow, skill&lt;/p&gt;

&lt;h2 id=&#34;why-do-some-functional-programmers-criticize-design-patterns-in-oop-languages-as-a-sign-of-language-deficiency-while-monad-is-also-a-design-pattern&#34;&gt;Why do some functional programmers criticize design patterns in OOP languages as a sign of language deficiency, while Monad is also a design pattern?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.quora.com/Why-do-some-functional-programmers-criticize-design-patterns-in-OOP-languages-as-a-sign-of-language-deficiency-while-Monad-is-also-a-design-pattern/answer/Edward-Kmett?srid=hVnO&amp;amp;share=12410d1e&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt; by Edward Kmett comparing the design patterns in OOP to the design patterns in functional languages.&lt;/p&gt;

&lt;p&gt;Tags: functional-language, object-oriented-language, edward-kmett, oop, pattern, monad, interface, quora, answer&lt;/p&gt;

&lt;h2 id=&#34;should-we-even-debate-refactoring-with-stakeholders&#34;&gt;Should We Even Debate Refactoring With Stakeholders?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=215f7f649b&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on the power balance between stakeholders and programmers and how it can be inclined to a &amp;lsquo;more trust&amp;rsquo; / &amp;lsquo;less trust&amp;rsquo; by following some actions. The analogy is to a trade you cannot understand, therefore you have to hope that the taken decisions are in your best interest.&lt;/p&gt;

&lt;p&gt;Tags: j-b-rainsberger, j-brains, rainsberger, refactor, business-need, communication, stakeholder&lt;/p&gt;

&lt;h2 id=&#34;the-eternal-struggle-between-business-and-programmers&#34;&gt;The Eternal Struggle Between Business and Programmers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.thecodewhisperer.com/permalink/the-eternal-struggle-between-business-and-programmers&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on the discussion between business (&amp;lsquo;we want more features, now&amp;rsquo;) and the programmers (&amp;lsquo;we want more refactoring, now&amp;rsquo;). Concludes that both players need each other, in a symbiotic fashion, to keep their jobs at the company.&lt;/p&gt;

&lt;p&gt;He suggests that Scrum cannot work without the XP practices and that we need to refactor aggressively after having finished our initial design, to keep the costs down. In fact, agreeing with both parts in this discussion.&lt;/p&gt;

&lt;p&gt;References one of his own videos, at Oredev&amp;rsquo;13, &amp;ldquo;Fundamental Theorem of Agile Software Development&amp;rdquo;, where he describes the relationship between accidental / essential complexity in the cost of a feature, attributing most of it to accidental (&amp;lsquo;we&amp;rsquo;re not good at our jobs&amp;rsquo;) and describing the need for more design / refactor after the initial design.&lt;/p&gt;

&lt;p&gt;Tags: j-b-rainsberger, j-brains, rainsberger, refactor, business-need, design, oredev, talk, agile, xp, scrum, software-development, accidental-complexity, essential-complexity, mythical-man-month&lt;/p&gt;

&lt;h2 id=&#34;turning-code-to-cash-how-to-make-money-as-a-web-developer-and-live-to-tell-the-tale&#34;&gt;Turning code to cash — How to make money as a Web Developer and live to tell the tale.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@kurtrohlandt/turning-code-to-cash-how-to-make-money-as-a-web-developer-and-live-to-tell-the-tale-f5eedc557b3e&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kurt Rohlandt with a list of items to check while dealing with clients as a freelancer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nothing is simple&lt;/li&gt;
&lt;li&gt;Know your skill set — and let your client know it&lt;/li&gt;
&lt;li&gt;Be clear about what they are buying&lt;/li&gt;
&lt;li&gt;Learn to use the best tool for the job&lt;/li&gt;
&lt;li&gt;To your client you’re more than just a developer&lt;/li&gt;
&lt;li&gt;Sign off your jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: freelancer, kurt-rohlandt, list, tip, client&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in September 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015/</link>
      <pubDate>Tue, 01 Sep 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015/</guid>
      <description>

&lt;h2 id=&#34;the-30-second-habit-with-a-lifelong-impact&#34;&gt;The 30 second habit with a lifelong impact&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.growth.supply/the-30-second-habit-with-a-lifelong-impact-2c3f948ead98&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; list of patterns, by Robyn Scott, in which it is explained why to compress information in a few ideas, investing 30 seconds to condense the article.&lt;/p&gt;

&lt;p&gt;Tags: 30-second, habit, robyn-scott&lt;/p&gt;

&lt;h2 id=&#34;the-strengths-and-weaknesses-of-extreme-programming&#34;&gt;The Strengths and Weaknesses of Extreme Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=LkhLZ7_KZ5w&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; explaining the strengths and weaknesses of extreme programming. By William Matheson&lt;/p&gt;

&lt;p&gt;Tags: extreme-programming, xp, william-matheson, video, strength, weakness&lt;/p&gt;

&lt;h2 id=&#34;poster-de-extreme-programming&#34;&gt;Poster de Extreme Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=4nN6Gh79Yg8&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; introducing eXtreme Programming. By Martín Salías&lt;/p&gt;

&lt;p&gt;Tags: martin-salias, kleer, extreme-programming, xp&lt;/p&gt;

&lt;h2 id=&#34;good-tech-lead-bad-tech-lead&#34;&gt;Good Tech Lead, Bad Tech Lead&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.growth.supply/good-tech-lead-bad-tech-lead-948b2b806d86&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; of good and bad traits in tech leads. By Jason Liszka.&lt;/p&gt;

&lt;p&gt;Explains the differences between good and bad tech leads, even though many of these qualities are shared by plain team members&lt;/p&gt;

&lt;p&gt;Tags: jason-liszka, tech-lead, comparison&lt;/p&gt;

&lt;h2 id=&#34;why-procrastinators-procrastinate&#34;&gt;Why Procrastinators Procrastinate&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://waitbutwhy.com/2013/10/why-procrastinators-procrastinate.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tim Urban on procrastination: this article compares the procrastinator and the non-procrastinator brain with pictures, introducing the Rational part, the Instant Gratification Monkey and the Panic Monster. Shows some reasons why.&lt;/p&gt;

&lt;p&gt;There is more on part 2: &lt;a href=&#34;http://waitbutwhy.com/2013/11/how-to-beat-procrastination.html&#34; target=&#34;_blank&#34;&gt;How to beat procrastination&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: tim-urban, procrastination, rational-part, instant-gratification-monkey, panic-monster, brain, comparison&lt;/p&gt;

&lt;h2 id=&#34;algebraic-data-type&#34;&gt;Algebraic data type&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that explains what this is, a few examples and the theory behind it.&lt;/p&gt;

&lt;p&gt;Tags: wikipedia, data-type, algebraic-data-type&lt;/p&gt;

&lt;h2 id=&#34;recursion&#34;&gt;Recursion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Recursion_(computer_science)&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that explains the recursion basic concepts, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;induction, coinduction&lt;/li&gt;
&lt;li&gt;recursion, corecursion&lt;/li&gt;
&lt;li&gt;implementation details in iterative vs recursive programs:

&lt;ul&gt;
&lt;li&gt;shortcutting recursion (i.e., arm-length&amp;rsquo;s recursion)&lt;/li&gt;
&lt;li&gt;wrapper function&lt;/li&gt;
&lt;li&gt;tail-call optimization, related to tail-recursive functions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;recursion and its relation to data structures&lt;/li&gt;
&lt;li&gt;base case / recursive case and removing the need of the base one in corecursion or in non-strict languages&lt;/li&gt;
&lt;li&gt;types of recursion:

&lt;ul&gt;
&lt;li&gt;direct, indirect, mutual&lt;/li&gt;
&lt;li&gt;generative, structural&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: recursion, corecursion, induction, coinduction, tail-call-optimization, tail-recursion, direct-recursion, indirect-recursion, mutual-recursion, generative-recursion, structural-recursion, arm-length-recursion, iterative-function, recursive-function, base-case, recursive-case, wikipedia, data-structure&lt;/p&gt;

&lt;h2 id=&#34;anonymous-function&#34;&gt;Anonymous function&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Anonymous_function&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that describes what is a lambda expression or an anonymous function. How it can be used (e.g., currying, higher-order function, closures) and gives examples in many languages.&lt;/p&gt;

&lt;p&gt;Cites its invention (Church, 1936, lambda-calculus) and its first implementation (Lisp, 1958)&lt;/p&gt;

&lt;p&gt;Tags: alonzo-church, anonymous-function, lambda-expression, closure, lambda-calculus, lisp, currying, higher-order-function, wikipedia&lt;/p&gt;

&lt;h2 id=&#34;closure&#34;&gt;Closure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Closure_(computer_programming)&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that explains the concept of closures and the usual confusion between closure and lambda. Also some applications.&lt;/p&gt;

&lt;p&gt;Discusses closures as a way of deferring execution and implementing object-oriented (OO) systems&lt;/p&gt;

&lt;p&gt;Tags: wikipedia, closure, object-orientation, lambda-expression&lt;/p&gt;

&lt;h2 id=&#34;zen-story-the-master-archer&#34;&gt;Zen Story: The Master Archer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.thedailyzen.org/2015/06/23/zen-story-the-master-archer/&#34; target=&#34;_blank&#34;&gt;this story&lt;/a&gt; by Charlie Ambler about perfectionism and deep study, exemplified by the general that retires to study archery and the child who draws targets around the arrows.&lt;/p&gt;

&lt;p&gt;Tags: charlie-amber, master, student, zen, story&lt;/p&gt;

&lt;h2 id=&#34;loosely-coupled&#34;&gt;Loosely Coupled&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.bwhaley.com/loosely-coupled&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ben Whaley about how to loosely couple services introducing a queue and the difference in patterns between push and pull communication.&lt;/p&gt;

&lt;p&gt;Tags: ben-whaley, push, pull, coupling, loose-coupling, service, queue, aws&lt;/p&gt;

&lt;h2 id=&#34;being-good-at-programming-competitions-correlates-negatively-with-being-good-on-the-job&#34;&gt;Being good at programming competitions correlates negatively with being good on the job&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched the small video and the discussion about programmers&amp;rsquo; talent at &lt;a href=&#34;http://www.catonmat.net/blog/programming-competitions-work-performance/&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt;. By Peteris Krumins.&lt;/p&gt;

&lt;p&gt;The original video explains that being good at a programming contest correlates negatively with skill at a programming job, even if the company hires them.&lt;/p&gt;

&lt;p&gt;The discussion explains the analogy with height and the NBA and concludes that this parameter should be preponderated with less importance than others.&lt;/p&gt;

&lt;p&gt;Tags: google, peter-norvig, nba, analogy, programming-contest, programming-skill, peteris-krumins&lt;/p&gt;

&lt;h2 id=&#34;on-functors&#34;&gt;On Functors&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.catonmat.net/blog/on-functors/&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; by Peteris Krumins of what the functors are in different languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++: function objects&lt;/li&gt;
&lt;li&gt;Standard ML: generic implementation of interfaces. They allow to compose structures&lt;/li&gt;
&lt;li&gt;Haskell: structure containing zero or more objects that can be converted to another structure containing the other objects. It&amp;rsquo;s an homomorphism between two categories.&lt;/li&gt;
&lt;li&gt;Prolog: built-in predicate for self-inspection and the atom at the start of the structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: peteris-krumins, comparison, haskell, c-plus-plus, standard-ml, prolog, functor&lt;/p&gt;

&lt;h2 id=&#34;recursive-regular-expressions&#34;&gt;Recursive Regular Expressions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.catonmat.net/blog/recursive-regular-expressions/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on recursive regular expressions by Peteris Krumins.&lt;/p&gt;

&lt;p&gt;In it, he lightly describes how a regular expression relates to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Context-free_grammar&#34; target=&#34;_blank&#34;&gt;Context-Free Grammar&lt;/a&gt; and the language support for Perl to include recursive regular expressions. Based on the examples (e.g., &lt;code&gt;0^n1^n&lt;/code&gt;), it really clicked to me that this could be expressed as a recursive function, with its base case and the recursive one. Also that it &amp;ldquo;depends on solutions to smaller instances of the same problem&amp;rdquo; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Recursion_(computer_science)&#34; target=&#34;_blank&#34;&gt;wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Tags: peteris-krumins, regular-expression, recursion, recursive-regular-expression, perl, context-free-grammar, formal-language-theory&lt;/p&gt;

&lt;h2 id=&#34;in-functional-programming-what-is-a-functor&#34;&gt;In Functional Programming, what is a functor?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/2030863/in-functional-programming-what-is-a-functor/2031421#2031421&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt;, by Norman Ramsey, on what is a functor.&lt;/p&gt;

&lt;p&gt;He explains in simple words what the concept is and how a type can belong to the class functor. Examples in haskell.&lt;/p&gt;

&lt;p&gt;Tags: norman-ramsey, functor, stack-overflow, haskell, type-class, class, map, fmap&lt;/p&gt;

&lt;h2 id=&#34;functors&#34;&gt;Functors&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.clojure.net/2013/01/19/Functors/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jim Duey explaining functors in Clojure. He introduces a couple of notes of Haskell but all of the examples are in Clojure. Explains functors, a subset of it called applicatives, and the two libraries he has created.&lt;/p&gt;

&lt;p&gt;Tags: jim-duey, functor, clojure, haskell&lt;/p&gt;

&lt;h2 id=&#34;10-tips-for-proper-application-logging&#34;&gt;10 Tips for Proper Application Logging&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javacodegeeks.com/2011/01/10-tips-proper-application-logging.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tomasz Nurkiewicz about tips on logging:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reduce side effects&lt;/li&gt;
&lt;li&gt;use categories and levels&lt;/li&gt;
&lt;li&gt;connection with external systems&lt;/li&gt;
&lt;li&gt;handling exceptions&lt;/li&gt;
&lt;li&gt;automatically / manually reading logging files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: tomasz-nurkiewicz, logging, sl4j, log4j, tip&lt;/p&gt;

&lt;h2 id=&#34;what-is-duck-typing&#34;&gt;What is &amp;ldquo;duck typing&amp;rdquo;?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ericlippert.com/2014/01/02/what-is-duck-typing/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert about duck typing&lt;/p&gt;

&lt;p&gt;Tags: duck-typing, eric-lippert, type-system, c-sharp&lt;/p&gt;

&lt;h2 id=&#34;yagni&#34;&gt;Yagni&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve reread &lt;a href=&#34;http://martinfowler.com/bliki/Yagni.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Martin Fowler on the cost of developing features that are not needed&lt;/p&gt;

&lt;p&gt;Tags: martin-fowler, yagni, article, misunderstanding&lt;/p&gt;

&lt;h2 id=&#34;learn-haskell&#34;&gt;Learn Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.youtube.com/watch?v=JJlI5FPTbgE&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Jordan Medlock on learning haskell, explaining the basics and how to use the REPL&lt;/p&gt;

&lt;p&gt;Tags: haskell, repl, jordan-medlock, beginner, video&lt;/p&gt;

&lt;h2 id=&#34;learn-haskell-1&#34;&gt;Learn Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.youtube.com/watch?v=JJlI5FPTbgE&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Jordan Medlock on learning haskell, explaining the basics and how to use the REPL&lt;/p&gt;

&lt;p&gt;Tags: haskell, repl, jordan-medlock, beginner, video&lt;/p&gt;

&lt;h2 id=&#34;tmux-the-terminal-multiplexer&#34;&gt;TMUX - The Terminal Multiplexer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read these two parts: (&lt;a href=&#34;http://blog.hawkhost.com/2010/06/28/tmux-the-terminal-multiplexer/&#34; target=&#34;_blank&#34;&gt;one&lt;/a&gt;, &lt;a href=&#34;http://blog.hawkhost.com/2010/07/02/tmux-%E2%80%93-the-terminal-multiplexer-part-2&#34; target=&#34;_blank&#34;&gt;two&lt;/a&gt;) of an introduction guide to &lt;code&gt;tmux&lt;/code&gt; (the unix terminal multiplexer) by Cody from Hawk Host.&lt;/p&gt;

&lt;p&gt;In it, he explains the basics of tmux and the main differences with &lt;code&gt;screen&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Tags: cody, hawk-host, tmux, how-to&lt;/p&gt;

&lt;h2 id=&#34;thermodynamics-and-garbage-collection&#34;&gt;Thermodynamics and Garbage Collection&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pipeline.com/~hbaker1/ThermoGC.html&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; by Henry G. Baker that explains the analogy of the garbage collection (&amp;ldquo;a freezer&amp;rdquo;) and thermodynamics, where the state mutator (th program, also an oven) modifies the garbage heap and introduces / extracts entropy into the system.&lt;/p&gt;

&lt;p&gt;Comparison between entropy and lack of information, using the theories from Shannon, Maxwell-Boltzmann. There&amp;rsquo;s a reference to the knapsack problem and to simulated annealing.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a gentle introduction to thermodynamics in layman terms: heat, temperature, microstates, macrostates, reversability, etc.&lt;/p&gt;

&lt;p&gt;In this paper it is also reflected (in macro vs micro states) that the sum all parts is simpler than the single ones (i.e., Information Hiding)&lt;/p&gt;

&lt;p&gt;Tags: henry-baker, thermodynamics, microstate, macrostate, analogy, simulated-annealing, garbage-collection, shannon, information, maxwell-boltzmann, freezer, oven, entropy&lt;/p&gt;

&lt;h2 id=&#34;how-we-ended-up-with-microservices&#34;&gt;How we ended up with microservices&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://philcalcado.com/2015/09/08/how_we_ended_up_with_microservices.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, by Phil Calçado, where he talks about his stay at SoundCloud:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the value stream map: from X days to Y&lt;/li&gt;
&lt;li&gt;reorganizing teams into service teams&lt;/li&gt;
&lt;li&gt;conway&amp;rsquo;s law and teams being responsible for support. Also, being given full authority&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: phil-calcado, soundcloud, microservice, team-split, value-stream-mapping, conversion, reorganization&lt;/p&gt;

&lt;h2 id=&#34;lisp-is-still-a-secret-weapon&#34;&gt;Lisp is still a secret weapon&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://kep.io/is-lisp-still-a-secret-weapon/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Judd Keppel where he explains it is a good idea that Clojure / ClojureScript continues to be a secret, not known among developers. Cites the article &amp;lsquo;Beating the averages&amp;rsquo; by Paul Graham and the amount of available packages in npm, maven central, etc&lt;/p&gt;

&lt;p&gt;Tags: paul-graham, judd-keppel, clojure, clojurescript, weapon, developer&lt;/p&gt;

&lt;h2 id=&#34;perceptron&#34;&gt;Perceptron&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Perceptron&#34; target=&#34;_blank&#34;&gt;this wikipedia&lt;/a&gt; article that explains the single-layer and multi-layer perceptron. First designed to be a machine (hardware), but later an algorithm for supervised machine learning. Worked by Minsky &amp;amp; Papert and invented by Frank Rosenblatt in 1958.&lt;/p&gt;

&lt;p&gt;Tags: peceptron, artificial-intelligence, machine-learning, frank-rosenblatt, 1958, marvin-minsky, seymour-papert&lt;/p&gt;

&lt;h2 id=&#34;is-c-a-strongly-typed-or-a-weakly-typed-language&#34;&gt;Is C# a strongly typed or a weakly typed language?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ericlippert.com/2012/10/15/is-c-a-strongly-typed-or-a-weakly-typed-language/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, in the form of a dialogue between Eric Lippert and himself about the C# language and its type system.&lt;/p&gt;

&lt;p&gt;Tags: type-system, c-sharp, eric-lippert, dialogue, strongly-typed, weakly-typed, language&lt;/p&gt;

&lt;h2 id=&#34;diseño-por-contratos-construyendo-software-confiable&#34;&gt;Diseño por contratos: construyendo software confiable&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.revista.unam.mx/vol.4/num5/art11/sep_art11.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; that explains design by contract, based on the Hoare triplet, pre-post condition, method and class invariant. With examples in Eiffel, Java about a package sender company. Also explains pre/post with inheritance. By Gerardo Rossel and Andrea Manna. In Spanish.&lt;/p&gt;

&lt;p&gt;Tags: gerardo-rossel, andrea-manna, design-by-contract, unam-mx, eiffel, java, precondition, postcondition, trust, quality, hoare-triplet, method-invariant, class-invariant&lt;/p&gt;

&lt;h2 id=&#34;the-inevitable-return-of-cobol&#34;&gt;The Inevitable Return of COBOL&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.hackerrank.com/the-inevitable-return-of-cobol/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains the current state of COBOL in programming and systems. Written by Ritika Trikha&lt;/p&gt;

&lt;p&gt;Tags: ritika-trikha, cobol, programming-language, retirement, median-age&lt;/p&gt;

&lt;h2 id=&#34;the-risky-eclipse-of-statisticians&#34;&gt;The Risky Eclipse of Statisticians&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.hackerrank.com/the-risky-eclipse-of-statisticians/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; where Ritika Trikha explains the current situation regarding Big Data and the statiscian jobs. How Big Data is in demand but the latter are not and what effects this might have.&lt;/p&gt;

&lt;p&gt;Tags: ritika-trikha, bootcamp, programming, hiring, big-data, analysis, statistics&lt;/p&gt;

&lt;h2 id=&#34;give-it-five-minutes&#34;&gt;Give it five minutes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://signalvnoise.com/posts/3124-give-it-five-minutes&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jason Fried where he explains why we should give ideas time to sink in and marinate, before dismissing them. Ideas are so fragile that it is better to let them live for a while before dismissing them. This also applies for thoughts (other people&amp;rsquo;s or your own).&lt;/p&gt;

&lt;p&gt;Tags: jason-fried, idea, think, startup, blue-hat, thinking-hat,  six-thinking-hats, red-hat&lt;/p&gt;

&lt;h2 id=&#34;reading-clojure-stacktraces&#34;&gt;Reading Clojure Stacktraces&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jayfields.com/2012/06/reading-clojure-stacktraces.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jay Fields on reading clojure stacktraces. Very similar to &amp;ldquo;Clojure Stack Traces for the Uninitiated&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: jay-fields, clojure, stacktrace&lt;/p&gt;

&lt;h2 id=&#34;clojure-stack-traces-for-the-uninitiated&#34;&gt;Clojure Stack Traces for the Uninitiated&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/connor-mendenhall/2014/09/12/clojure-stacktraces.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how to interpret clojure stacktraces. Written by Connor Mendenhall&lt;/p&gt;

&lt;p&gt;Tags: connor-mendenhall, clojure, stacktrace&lt;/p&gt;

&lt;h2 id=&#34;javascript-type-inference&#34;&gt;JavaScript type inference&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve found (and played) with &lt;a href=&#34;http://www.ccs.neu.edu/home/dimvar/jstypes.html&#34; target=&#34;_blank&#34;&gt;this JavaScript type inference engine&lt;/a&gt;. Written in Javascript (and available online). Written by Dimitrios Vardoulakis.&lt;/p&gt;

&lt;p&gt;Tags: javascript-type-inference, type-inference, type-inference-algorithm, dimitrios-vardoulakis, cfa2&lt;/p&gt;

&lt;h2 id=&#34;alternatives-to-boolean-parameters&#34;&gt;Alternatives to boolean parameters&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/dariusz-pasciak/2015/05/28/alternatives-to-boolean-parameters.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining alternatives to sending a boolean parameter to decide on the contents of the function. Written by Dariusz Pasciak&lt;/p&gt;

&lt;p&gt;As I heard some time ago, if a function receives a boolean to decide on what to do, it will for sure have more than one responsibility: one for the false value and one for the true value.&lt;/p&gt;

&lt;p&gt;Tags: dariusz-pasciak, boolean, srp, boolean-parameter&lt;/p&gt;

&lt;h2 id=&#34;why-are-web-uploads-so-painful&#34;&gt;Why Are Web Uploads So Painful?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/why-are-web-uploads-so-painful/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on web uploads being painful. By Jeff Atwood. The screenshots feel old (2007) and some of the problems have already been solved.&lt;/p&gt;

&lt;p&gt;Tags: jeff-atwood, article, upload, browser&lt;/p&gt;

&lt;h2 id=&#34;can-your-team-pass-the-elevator-test&#34;&gt;Can Your Team Pass The Elevator Test?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/can-your-team-pass-the-elevator-test/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the elevator test by Jeff Atwood.&lt;/p&gt;

&lt;p&gt;Tags: jeff-atwood, article, elevator-test, assumption, microsoft-bob, vision, product, feature&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in August 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</link>
      <pubDate>Sun, 02 Aug 2015 21:45:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</guid>
      <description>

&lt;h2 id=&#34;humble-object&#34;&gt;Humble Object&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the &lt;a href=&#34;http://xunitpatterns.com/Humble%20Object.html&#34; target=&#34;_blank&#34;&gt;Humble Object&lt;/a&gt; list of patterns, by Gerard Meszaros, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;humble dialog&lt;/li&gt;
&lt;li&gt;humble executable&lt;/li&gt;
&lt;li&gt;humble transaction controller&lt;/li&gt;
&lt;li&gt;humble container adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: pattern, gerard-meszaros&lt;/p&gt;

&lt;h2 id=&#34;how-you-know&#34;&gt;How you know&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve reread &lt;a href=&#34;http://www.paulgraham.com/know.html&#34; target=&#34;_blank&#34;&gt;this small essay&lt;/a&gt; by Paul Graham on storing information in our heads, based on the context. On the importance of rereading, to add more contexts to the initial one.&lt;/p&gt;

&lt;p&gt;Tags: paul-graham, reread, read&lt;/p&gt;

&lt;h2 id=&#34;protected-variation-the-importance-of-being-closed&#34;&gt;Protected Variation: The Importance of Being Closed&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.martinfowler.com/ieeeSoftware/protectedVariation.pdf&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Craig Larman in the magazine IEEE Software &amp;gt; Design.&lt;/p&gt;

&lt;p&gt;Discusses Information Hiding, Protected Variation and the Open-Closed Principle.&lt;/p&gt;

&lt;p&gt;Tags: craig-larman, ocp, open-closed principle, design, information-hiding, ih, protected-variation, pv,&lt;/p&gt;

&lt;h2 id=&#34;lambda-javascript-micro-services-on-aws&#34;&gt;Lambda, Javascript Micro-Services on AWS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.jayway.com/2014/12/18/lambda-javascript-micro-services-aws/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; explaining how to deploy a microservice on AWS on top of Lambda. Written by Anders Janmyr&lt;/p&gt;

&lt;p&gt;The cool thing is that you get billed by milliseconds!&lt;/p&gt;

&lt;p&gt;Tags: anders-janmyr, devops, microservice, lambda, aws&lt;/p&gt;

&lt;h2 id=&#34;migrating-to-clojure-so-much-fn&#34;&gt;Migrating To Clojure. So Much Fn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=Hv4slaRydRM&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Jan Stępień where he talks about his experience on migrating part of an application to clojure from ruby on rails&lt;/p&gt;

&lt;p&gt;Tags: jan-stepien, clojure, migration, ruby-on-rails, talk, wrocloverb&lt;/p&gt;

&lt;h2 id=&#34;te-recomiendo-escribir-en-un-blog&#34;&gt;Te recomiendo escribir en un blog&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/07/te-recomiendo-escribir-en-un-blog/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; from Carlos Blé in which he recommends writing a blog, on things we discover along the way. (Spanish)&lt;/p&gt;

&lt;p&gt;Tags: carlos-ble, meta, blog, long-way&lt;/p&gt;

&lt;h2 id=&#34;we-need-enough-technical-debt&#34;&gt;We need enough technical debt&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.svpino.com/2015/08/05/we-need-enough-technical-debt&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why we need to accumulate a bit of technical debt, as a way of being less perfectionist and deliver more features / value to our stakeholders. Written by Santiago L. Valdarrama.&lt;/p&gt;

&lt;p&gt;Tags: santiago-valdarrama, technical-debt, perfectionism&lt;/p&gt;

&lt;h2 id=&#34;escribe-mejores-tests-en-javascript&#34;&gt;Escribe mejores tests en Javascript&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://carlosvillu.com/escribe-mejores-tests-en-javascript/&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of tips to write better javascript tests (Spanish). By Carlos Villuendas&lt;/p&gt;

&lt;p&gt;Tags: carlos-villuendas, javascript, test&lt;/p&gt;

&lt;h2 id=&#34;down-the-rabbit-hole&#34;&gt;Down the Rabbit Hole&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole&#34; target=&#34;_blank&#34;&gt;this wiki&lt;/a&gt; page on how to tune some aspects of the server hotspot JVM, by Brett Wooldridge&lt;/p&gt;

&lt;p&gt;Tags: performance, jvm, hotspot, inline, bytecode, brett-wooldridge&lt;/p&gt;

&lt;h2 id=&#34;xp-manchester-lightning-talks-2015-live-broadcast&#34;&gt;XP Manchester Lightning Talks 2015 Live broadcast&lt;/h2&gt;

&lt;p&gt;I have watched the first two &lt;a href=&#34;https://www.youtube.com/watch?v=VD4UEW2i7hU&#34; target=&#34;_blank&#34;&gt;lightning talks&lt;/a&gt; from XP Manchester, edition number 61.&lt;/p&gt;

&lt;p&gt;Tags: lightning-talk, broadcast, simplicity, manchester, 2015&lt;/p&gt;

&lt;h2 id=&#34;counting-hash-collisions-with-the-birthday-paradox&#34;&gt;Counting hash collisions with the birthday paradox&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://matt.might.net/articles/counting-hash-collisions/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the birthday paradox, or the percentage of chance of people sharing the same birthday. This could be applied to hash function, as the title says, but is not included in the article. Written by Matt Might&lt;/p&gt;

&lt;h2 id=&#34;why-i-m-the-best-programmer-in-the-world&#34;&gt;Why I&amp;rsquo;m The Best Programmer In The World*&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/why-im-the-best-programmer-in-the-world/&#34; target=&#34;_blank&#34;&gt;this ironically-titled article&lt;/a&gt; by Jeff Atwood on humility and how to improve as a programmer.&lt;/p&gt;

&lt;p&gt;Tags: jeff-atwood&lt;/p&gt;

&lt;h2 id=&#34;the-key-to-giving-and-receiving-negative-feedback&#34;&gt;The Key to Giving and Receiving Negative Feedback&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/2015/08/the-key-to-giving-and-receiving-negative-feedback?&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joseph Grenny about how to give and receive negative feedback. It is exemplified by the plant manager who was expecting another kind of feedback from his subordinates and was surprised by their negative feedback.&lt;/p&gt;

&lt;p&gt;Tags: joseph-grenny, negative-feedback, feedback, by-example&lt;/p&gt;

&lt;h2 id=&#34;testing-clojure-web-applications-with-kerodon&#34;&gt;Testing Clojure web applications with Kerodon&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://semaphoreci.com/community/tutorials/testing-clojure-web-applications-with-kerodon&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; on how to test compojure-based applications with kerodon. Written by Nebojša Stričević&lt;/p&gt;

&lt;p&gt;Tags: nebojsa-stricevic, compojure, kerodon, clojure, testing, guide&lt;/p&gt;

&lt;h2 id=&#34;using-the-option-type-effectively&#34;&gt;Using The Option Type Effectively&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/uku-taht/2015/04/29/using-the-option-type-effectively.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how to use the &lt;code&gt;Option&lt;/code&gt; type (in rust), similar to &lt;code&gt;Optional&lt;/code&gt; in java or &lt;code&gt;Maybe&lt;/code&gt; in haskell. Written by Uku Taht.&lt;/p&gt;

&lt;p&gt;Tags: uku-taht, option, maybe, optional, rust&lt;/p&gt;

&lt;h2 id=&#34;when-should-you-think&#34;&gt;When Should You Think?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2014/03/11/when-to-think.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Robert C Martin on when to think and the hypothesis that TDD does not allow you to think before coding.&lt;/p&gt;

&lt;p&gt;Tags: tdd, robert-c-martin, design, hypothesis&lt;/p&gt;

&lt;h2 id=&#34;orthogonal-latin-squares-an-application-of-experiment-design-to-compiler-testing&#34;&gt;Orthogonal latin squares: an application of experiment design to compiler testing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://barbie.uta.edu/~mehra/20_an%20application%20of%20experiment%20design%20to%20compiler%20testing.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; by Robert Mandl on techniques that can be applied to reduce the burden of exhaustive testing to compilers. Preferring &amp;ldquo;surely all relevant distinct combinations&amp;rdquo; we can reduce the amount of testing. This paper tries to formalize the concept of &amp;ldquo;near-exhaustive testing&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: latin-square, robert-mandl, compiler, testing, near-exhaustive-testing, optimization, exhaustive-testing&lt;/p&gt;

&lt;p&gt;##  Practical Type System Benefits&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://themonadreader.files.wordpress.com/2014/04/nccb.pdf&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Neil Brown on benefits of the type system, with examples in haskell. He goes on to explore the benefits of involving the type-checker at compile time to remove type errors and ease the programming effort:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I find that several problems in Haskell can be solved by involving the type system
further: The trick is to involve the type system in ways that provide a big benefit
for the cost, but not going so far that the type system gets in the way of code
that you know &amp;ndash;but can’t easily prove to the compiler&amp;ndash; is safe&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve also learned the concept of the quasi-quoter: similar to a preprocessor, executed at compile time and type-checked&lt;/p&gt;

&lt;p&gt;Tags: neil-brown, quote, quasi-quoter, preprocessor, haskell, monad-reader&lt;/p&gt;

&lt;h2 id=&#34;clojurescript-and-the-blub-paradox&#34;&gt;ClojureScript and the Blub Paradox&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article comparing javascript and clojurescript using the fizzbuzz kata. There is a nice example of the pattern matching for the cases (i.e. &amp;ldquo;switch&amp;rdquo;) of the fizz, buzz. Written by Nate Wildermuth&lt;/p&gt;

&lt;p&gt;Tags: clojurescript, javascript, fizzbuzz, kata, nate-wildermuth&lt;/p&gt;

&lt;h2 id=&#34;no-malinterpretes-tu-carrera&#34;&gt;No malinterpretes tu carrera&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2011/02/no-malinterpretes-tu-carrera/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on (not) changing careers from programmer to designer, analyst, team manager. About the programmer&amp;rsquo;s passion and why not to misinterpret your career. Written by Carlos Blé. In Spanish.&lt;/p&gt;

&lt;p&gt;Tags: carlos-ble, career, programming, management, career-change&lt;/p&gt;

&lt;h2 id=&#34;just-haskell-or-nothing&#34;&gt;Just Haskell or Nothing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://cheecheeo.github.io/just_haskell_or_nothing.html&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; on packaging values in (Just a) or Nothing for possibly failed computations in haskell. Written by John Chee&lt;/p&gt;

&lt;p&gt;Tags: john-chee, haskell, just, nothing, maybe, functor&lt;/p&gt;

&lt;h2 id=&#34;tracking-joy-at-work&#34;&gt;Tracking Joy at Work&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://begriffs.com/posts/2015-03-15-tracking-joy-at-work.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about quantifying happiness at the office (or at work). Joe Nelson, the author of the article, uses the quantifying method described int the book &lt;a href=&#34;http://www.amazon.com/Experience-Sampling-Method-Measuring-Everyday/dp/1412925576/&#34; target=&#34;_blank&#34;&gt;Experience Sampling Method&lt;/a&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Experience_sampling_method&#34; target=&#34;_blank&#34;&gt;wikipedia page&lt;/a&gt;) by Hektner, Schmidt, Csikszentmihalyi.&lt;/p&gt;

&lt;p&gt;The last one, not coincidentally is the author of &lt;a href=&#34;http://www.amazon.com/Flow-The-Psychology-Optimal-Experience/dp/0061339202&#34; target=&#34;_blank&#34;&gt;Flow: The Psychology of Optimal Experience&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tags: mihaly-csikszentmihalyi, flow, quantification, data, experience-sampling, article, joe-nelson&lt;/p&gt;

&lt;h2 id=&#34;going-write-only&#34;&gt;Going &amp;ldquo;Write-Only&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://begriffs.com/posts/2015-04-20-going-write-only.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joe Nelson on going &amp;ldquo;write-only&amp;rdquo; on social media, blogs, news, etc, as opposed to read-only (only consuming media) or read-write (consuming and producing). He cites another programmer, &lt;a href=&#34;http://joey.hess.usesthis.com/&#34; target=&#34;_blank&#34;&gt;Joey Hess&lt;/a&gt; and about the quality and durability of your work.&lt;/p&gt;

&lt;p&gt;Tags: article, joe-nelson, write-only, social-media, reading, philosophy, thoreau, nietzsche, joey-hess&lt;/p&gt;

&lt;h2 id=&#34;create-a-static-site-with-hakyll-github-and-travis-ci&#34;&gt;Create a static site with Hakyll, Github and Travis CI&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://begriffs.com/posts/2014-08-12-create-static-site-with-hakyll-github.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how to create your blog with hakyll and travis ci. Written by Joe Nelson&lt;/p&gt;

&lt;p&gt;Travis ci is used to do continuous integration and automatically deploy each commit to production (github pages).&lt;/p&gt;

&lt;p&gt;Tags: hakyll, haskell, joe-nelson, meta, blog, continuous-deployment, github, github-pages, travis-ci&lt;/p&gt;

&lt;h2 id=&#34;falling-in-love-with-computer-science&#34;&gt;Falling in Love with Computer Science&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=haxusGuUyt4&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Kathy Pham, an American that discovered her passion, her love to computer science a few years ago. She tells the events around computer science from the beginning of college to the current moment.&lt;/p&gt;

&lt;p&gt;Tags: kathy-pham, passion, love, computer-science, autobiography, time-lapse, google-developers&lt;/p&gt;

&lt;h2 id=&#34;duck-typing&#34;&gt;Duck Typing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=h0rTF__RNo4&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Dan Grossman, part of the &lt;a href=&#34;https://www.coursera.org/course/proglang&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Programming Languages&amp;rdquo; MOOC&lt;/a&gt;, in which he explains what is a Duck Type and how to use (and abuse) them in ruby.&lt;/p&gt;

&lt;p&gt;Tags: ruby, dan-grossman, mooc, mooc-programming-languages&lt;/p&gt;

&lt;h2 id=&#34;not-so-private-clojure-functions&#34;&gt;Not-So-Private Clojure Functions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://christophermaier.name/blog/2011/04/30/not-so-private-clojure-functions&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining how to bypass private functions in clojure: either create a lambda or create a different namespace. Written by Christopher Maier&lt;/p&gt;

&lt;p&gt;Tags: private-variable, clojure, testing, joy-of-clojure, christopher-maier, private-function, namespace&lt;/p&gt;

&lt;h2 id=&#34;frege-and-clojure&#34;&gt;Frege (and Clojure)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://seancorfield.github.io/blog/2015/02/13/frege-and-clojure/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that tells the Pragmatic Programmer&amp;rsquo;s advice to learn a new language every year and the author (Sean Corfield) explains his trajectory learning them. He also cites the Lein plugin he&amp;rsquo;s built: &lt;code&gt;lein-fregec&lt;/code&gt; and how to connect clojure and frege (a.k.a JVM&amp;rsquo;s haskell).&lt;/p&gt;

&lt;p&gt;Tags: haskell, frege, jvm, clojure, ffi, pragmatic-programmer, advice, lein-fregec,  sean-corfield, comparison&lt;/p&gt;

&lt;h2 id=&#34;two-months-early-300k-under-budget&#34;&gt;Two months early. 300k under budget&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://thoughtworks.github.io/p2/issue09/two-months-early/&#34; target=&#34;_blank&#34;&gt;the tale&lt;/a&gt; of a Thoughtworks Project Manager who convinced his client to start using clojure to deliver a custom-made CMS. Written by Dave Elliman.&lt;/p&gt;

&lt;p&gt;Tags: dave-elliman, thoughtworks, project-manager, clojure, cms, microservice&lt;/p&gt;

&lt;h2 id=&#34;convince-your-boss-to-use-clojure&#34;&gt;Convince your boss to use Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.lispcast.com/convince-your-boss-to-use-clojure&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; by Eric Normand on how to convince your boss or your company to start using clojure.&lt;/p&gt;

&lt;p&gt;Tags: company, clojure, eric-normand, how-to, guide&lt;/p&gt;

&lt;h2 id=&#34;a-brief-introduction-to-prolog&#34;&gt;A brief introduction to Prolog&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://docs.google.com/presentation/d/1NAUo8nWLfNvvW3Wb7HJMunljjDJbzu7mo-5twKeGDvc/edit#slide=id.g63daf4745_0_56&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about a brief introduction to prolog and how to do web development in it. By Jaelle Scheuerman&lt;/p&gt;

&lt;p&gt;Tags: jaelle-scheuerman, prolog, web-development, rest, slide&lt;/p&gt;

&lt;h2 id=&#34;arrayzing-the-javascript-array-cheatsheet&#34;&gt;Arrayzing - The JavaScript array cheatsheet&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://gist.github.com/ourmaninamsterdam/1be9a5590c9cf4a0ab42&#34; target=&#34;_blank&#34;&gt;this cheatsheet&lt;/a&gt; for javascript arrays. Written by Justin Perry&lt;/p&gt;

&lt;p&gt;Tags: cheatsheet, array, javascript, gist, justin-perry&lt;/p&gt;

&lt;h2 id=&#34;some-words-on-lazy-evaluation-and-sharing&#34;&gt;Some words on lazy evaluation and sharing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://pseudo.fixme.fi/~opqdonut/blog/Some_words_on_lazy_evaluation_and_sharing.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; comparing the &lt;code&gt;fix&lt;/code&gt; definition with a hand-made one and its &amp;ldquo;sharing&amp;rdquo; problems. Written by Joel E. Kaasinen&lt;/p&gt;

&lt;p&gt;Tags: joel-kaasinen, haskell, fix, sharing, non-strictness, lazy-evaluation&lt;/p&gt;

&lt;h2 id=&#34;hammock-driven-development&#34;&gt;Hammock Driven Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=f84n5oFoZBc&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Rich Hickey. A few notes:&lt;/p&gt;

&lt;p&gt;A: identifying a problem that we&amp;rsquo;re trying to solve&lt;/p&gt;

&lt;p&gt;D: assessing if the proposed solution solves the problem&lt;/p&gt;

&lt;p&gt;the union of the features is not the purpose of the product / is not the product&lt;/p&gt;

&lt;p&gt;proramming is not completing features&lt;/p&gt;

&lt;p&gt;avoiding problems /= solving problems&lt;/p&gt;

&lt;p&gt;book: how to solve it - G. Polya. Practices &amp;amp; techniques for solving mathematic problems&lt;/p&gt;

&lt;p&gt;How to solve the problem&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;state the problem&lt;/li&gt;
&lt;li&gt;understand the problem:

&lt;ul&gt;
&lt;li&gt;what do you know: facts, context, constraints.&lt;/li&gt;
&lt;li&gt;what do you don&amp;rsquo;t know&lt;/li&gt;
&lt;li&gt;are there related problems? solutions to related problems. find an analogy: starting from scratch vs incremental step&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;be discerning&lt;/li&gt;
&lt;li&gt;more input, better output:

&lt;ul&gt;
&lt;li&gt;read about your domain problem, research papers (maybe ACM)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;tradeoffs:

&lt;ul&gt;
&lt;li&gt;find at least two options (ups and downs) to compare before taking a decision&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Focus time for programmers like alone time for kids. Hammock time is important mind&amp;rsquo;s eye time&lt;/p&gt;

&lt;p&gt;Waking mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;critical thinking&lt;/li&gt;
&lt;li&gt;analysis&lt;/li&gt;
&lt;li&gt;tactics&lt;/li&gt;
&lt;li&gt;prone to local maxima&lt;/li&gt;
&lt;li&gt;feed work to background mind&lt;/li&gt;
&lt;li&gt;analyze its products&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Background mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;making connections&lt;/li&gt;
&lt;li&gt;synthesis&lt;/li&gt;
&lt;li&gt;strategy&lt;/li&gt;
&lt;li&gt;abstracts, analogies&lt;/li&gt;
&lt;li&gt;solves most non-trivial problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;loading it: work it hard in the waking mind to be included in the background mind&lt;/p&gt;

&lt;p&gt;abstraction = software strategy&lt;/p&gt;

&lt;p&gt;tip: small answer is better than big answer (occam&amp;rsquo;s razor?)​&lt;/p&gt;

&lt;p&gt;Tags: rich-hickey, hammock-driven-development, background-mind, waking-mind, solve-problem, george-polya, book, analysis, design, talk&lt;/p&gt;

&lt;h2 id=&#34;parallelism-concurrency&#34;&gt;Parallelism /= Concurrency&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ghcmutterings.wordpress.com/2009/10/06/parallelism-concurrency/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the differences between parallelism and concurrency, with examples in the haskell compiler GHC. Written by &lt;a href=&#34;https://ghcmutterings.wordpress.com/author/simonmar/&#34; target=&#34;_blank&#34;&gt;simonmar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: haskell, concurrency, parallelism, ghc, simonmar, comparison&lt;/p&gt;

&lt;h2 id=&#34;parallelism-vs-concurrency&#34;&gt;Parallelism vs. Concurrency&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://wiki.haskell.org/Parallelism_vs._Concurrency&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt; from the haskell wiki.&lt;/p&gt;

&lt;p&gt;Tags: haskell, concurrency, parallelism, ghc, comparison&lt;/p&gt;

&lt;h2 id=&#34;writing-code-that-writes-code-with-hack-codegen&#34;&gt;Writing code that writes code — with Hack Codegen&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://code.facebook.com/posts/1624644147776541/writing-code-that-writes-code-with-hack-codegen/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about metaprogramming (code that generates code) in PHP. Written by Alejandro Marcu.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve arrived to this from this tweet:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-cards=&#34;hidden&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;This is what happens when your programming language doesn&amp;#39;t have macros &lt;a href=&#34;https://t.co/ZfsEe2EJIj&#34;&gt;https://t.co/ZfsEe2EJIj&lt;/a&gt;. Yuck.&lt;/p&gt;&amp;mdash; David Nolen (@swannodette) &lt;a href=&#34;https://twitter.com/swannodette/status/634495099607613440&#34;&gt;August 20, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Tags: alejandro-marcu, metaprogramming, php, macro, lisp, clojure&lt;/p&gt;

&lt;h2 id=&#34;how-katas-can-help-you-learn&#34;&gt;How katas can help you learn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://codurance.com/2015/08/18/How-katas-can-help-you-learn/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on learning from katas, with the example of the Roman Numerals kata in Objective-C. Written by Sandro Mancuso.&lt;/p&gt;

&lt;p&gt;Tags: sandro-mancuso, kata, learning, roman-numeral, objective-c&lt;/p&gt;

&lt;h2 id=&#34;java-8-definitive-guide-to-completablefuture&#34;&gt;Java 8: Definitive guide to CompletableFuture&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.nurkiewicz.com/2013/05/java-8-definitive-guide-to.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about Java 8&amp;rsquo;s feature, the &lt;code&gt;CompletableFeature&lt;/code&gt;. Written by Tomasz Nurkiewicz&lt;/p&gt;

&lt;p&gt;Tags: tomasz-nurkiewicz, java-8, completable-future, future, non-blocking, reactive-programming&lt;/p&gt;

&lt;h2 id=&#34;are-you-making-these-10-ddd-mistakes&#34;&gt;Are You Making These 10 DDD Mistakes?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://danielwhittaker.me/2015/07/05/are-you-making-these-10-ddd-mistakes/#&#34; target=&#34;_blank&#34;&gt;this infographic&lt;/a&gt; on 10 DDD common mistakes, by Daniel Whittaker.&lt;/p&gt;

&lt;p&gt;Tags: ddd, daniel-whittaker, bounded-context, ubiquitous-language, infographic&lt;/p&gt;

&lt;h2 id=&#34;haste-full-stack-haskell-for-non-phd-candidates&#34;&gt;Haste: Full-Stack Haskell for Non-PhD Candidates&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=3v03NFcyvzc&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; at the Strange Loop Conference 2014 about Haste language, a haskell version that compiles to javascript, therefore letting you write haskell in the browser. By Erin Swenson-Healey and James Cooper&lt;/p&gt;

&lt;p&gt;In this talk they recommend the &lt;a href=&#34;http://www.seas.upenn.edu/~cis194/lectures.html&#34; target=&#34;_blank&#34;&gt;CIS194 course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: haste, haskell, james-cooper, erin-swenson-healey, strange-loop, 2014, talk&lt;/p&gt;

&lt;h2 id=&#34;a-year-of-haskell&#34;&gt;A Year of Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=wZ0RQG3mFPw&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; about experiences using haskell professionally, by the American Justin Leitgeb in a Equatorian company in Quito, Stack Builders. He goes on to explain the haskell language in comparison to ruby on rails, what he mostly used with his clients.&lt;/p&gt;

&lt;p&gt;Also explains what sells and doesn&amp;rsquo;t (mostly productivity, not security) and gives pointer for applying it to a company&lt;/p&gt;

&lt;p&gt;Tags: justin-leitgeb, ecuador, haskell, stack-builders, lambda-days, 2015, client, professional, consulting, consultancy&lt;/p&gt;

&lt;h2 id=&#34;a-taste-of-haskell&#34;&gt;A Taste of Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched a lesson by Simon Peyton-Jones, that introduces haskell to experienced programmers, not in the language but in programming in general. At the conference OSCON 2007&lt;/p&gt;

&lt;p&gt;Links: &lt;a href=&#34;https://www.youtube.com/watch?v=jLj1QV11o9g&#34; target=&#34;_blank&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=IqXTUbdLig0&#34; target=&#34;_blank&#34;&gt;part 2&lt;/a&gt;, &lt;a href=&#34;http://www.slideshare.net/oscon2007/os-peytonjones&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: oscon, 2007, haskell, introduction, lesson, simon-peyton-jones&lt;/p&gt;

&lt;h2 id=&#34;programming-why-haskell-is-great&#34;&gt;Programming - Why Haskell is Great&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.youtube.com/watch?v=RqvCNb7fKsg&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; introducing some features of haskell. The most basic features, the REPL,  function composition. By FrungyKing&lt;/p&gt;

&lt;p&gt;Tags: haskell, introduction, video, screencast, repl, frungyking&lt;/p&gt;

&lt;h2 id=&#34;history-of-haskell-being-lazy-with-class&#34;&gt;History of Haskell: being lazy with class&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=3bjXGrycMhQ&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Simon Peyton-Jones at the &amp;ldquo;History of Programming Languages Conference III&amp;rdquo; which explains how the language was designed and written, a language timeline, what options they took, how they decided about monadic IO, etc.&lt;/p&gt;

&lt;p&gt;Tags: simon-peyton-jones, 2007, history-of-programming-languages-conference, haskell, talk&lt;/p&gt;

&lt;h2 id=&#34;the-humble-programmer&#34;&gt;The Humble Programmer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.cs.utexas.edu/users/EWD/transcriptions/EWD03xx/EWD340.html&#34; target=&#34;_blank&#34;&gt;this EWD&lt;/a&gt; about the necessary humbleness for being a programmer and the slow expansion of the trade, as compared to hardware engineers.&lt;/p&gt;

&lt;p&gt;He cites six reasons for preferring to be a humble programmer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the programmer only needs to manage simple programs&lt;/li&gt;
&lt;li&gt;simple programs imply reducing the search space&lt;/li&gt;
&lt;li&gt;construct a program from a mathematical proof instead of test its properties after building the software. see quote below&lt;/li&gt;
&lt;li&gt;a good abstraction can hide much complexity and difficulty&lt;/li&gt;
&lt;li&gt;the importance of the used tool in the final product&lt;/li&gt;
&lt;li&gt;&amp;ldquo;the only problems we can satisfactory solve are the ones that admit a factored solution&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this essay I&amp;rsquo;ve found the idea of&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Testing shows the presence, not the absence of bugs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That &lt;a href=&#34;https://en.wikiquote.org/wiki/Edsger_W._Dijkstra&#34; target=&#34;_blank&#34;&gt;Wikiquote&lt;/a&gt; attributes to an earlier paper (in 1969). In this paper, the verbatim quote is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;program testing can be a very effective way to show the presence of bugs, but is hopelessly inadequate for showing their absence.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This idea also connects to the &amp;ldquo;lower bounds&amp;rdquo; and &amp;ldquo;upper bounds&amp;rdquo; of program correctness expressed in the article &lt;a href=&#34;https://cdsmith.wordpress.com/2011/01/09/an-old-article-i-wrote/&#34; target=&#34;_blank&#34;&gt;An Old Article I Wrote&lt;/a&gt; which is about static types, by Cdsmith. Admittedly, much later, in 2008, so this idea could be inspired by the Dijkstra&amp;rsquo;s article.&lt;/p&gt;

&lt;p&gt;Tags: edsger-dijkstra, ewd, dijkstra, humble-programmer, essay, comparison, absence-of-bugs, quote&lt;/p&gt;

&lt;h2 id=&#34;building-a-link-shortener-with-snaplets&#34;&gt;Building a Link Shortener with Snaplets&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://vimeo.com/59109358&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; of how to build a link shortener webapp in haskell with the framework snap. By Ryan Trinkle. Found it in the &lt;a href=&#34;http://snapframework.com/docs&#34; target=&#34;_blank&#34;&gt;snap docs&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;Tags: snap, haskell, link-shortener, talk, webapp, framework, ryan-trinkle&lt;/p&gt;

&lt;h2 id=&#34;comparing-haskell-web-frameworks&#34;&gt;Comparing Haskell Web Frameworks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.edofic.com/posts/2014-02-23-haskell-web.html&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; of haskell web frameworks, by Andraz Bajt (a.k.a, edofic)&lt;/p&gt;

&lt;p&gt;Tags: andraz-bajt, edofic, haskell, web-framework, framework, comparison&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>