<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notification on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/notification/</link>
    <description>Recent content in Notification on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Oct 2015 11:06:58 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/notification/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tool: Building a local pipeline</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/10/tool_building_local_pipeline/</link>
      <pubDate>Sat, 10 Oct 2015 11:06:58 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/10/tool_building_local_pipeline/</guid>
      <description>

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;At a client, one of the projects has a long building process and the tests are mostly slow, so I use a local building &lt;a href=&#34;https://en.wikipedia.org/wiki/Pipeline_(software)&#34; target=&#34;_blank&#34;&gt;pipeline&lt;/a&gt;, an example of the &lt;a href=&#34;https://msdn.microsoft.com/library/dn568100.aspx&#34; target=&#34;_blank&#34;&gt;Pipes and Filters&lt;/a&gt; pattern.&lt;/p&gt;

&lt;p&gt;This allows for executing manually only the fast unit tests, then automatically (no user intervention, no time spent) executing the rest of them before pushing. In case the latter fails, it is possible to do &lt;code&gt;git push -f&lt;/code&gt; to the &lt;code&gt;pipeline&lt;/code&gt; without corrupting the central repository (&lt;code&gt;origin&lt;/code&gt;) history, possibly disturbing others.&lt;/p&gt;

&lt;p&gt;This strategy also allows for parallel modification of sources: you can continue working on your IDE while the compiler is working on the other working directory. Should you introduce any syntax / logical error on your working code, the compiler is not affected, as it has a working copy just for itself.&lt;/p&gt;

&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;This requires two git repositories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;local&lt;/code&gt; or working copy. Configure it so it has a remote called &lt;code&gt;pipeline&lt;/code&gt; and the &lt;code&gt;origin&lt;/code&gt;, the repository you cloned from. This is a non-bare repository.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipeline&lt;/code&gt;, used for building. This also is a non-bare repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;code&gt;local&lt;/code&gt; you can do the development and local commits.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re done, instead of&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git push origin &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;ranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;do&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git push pipeline &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;ranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After the git hook is installed, this will trigger the pipeline execution.&lt;/p&gt;

&lt;h3 id=&#34;git-hook&#34;&gt;Git hook&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;pipeline&lt;/code&gt;, in the &lt;code&gt;.git/hooks/post-receive&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#!/bin/bash&lt;/span&gt;
chmod +x pipeline.sh
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; oldrev newrev refname
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# whatever you want to execute&lt;/span&gt;
   &lt;span class=&#34;nv&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;git rev-parse --symbolic --abbrev-ref $refname&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
  ./pipeline.sh &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;ranch
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above script, we&amp;rsquo;re telling git to execute the &lt;code&gt;pipeline.sh&lt;/code&gt; with the received branch as argument.&lt;/p&gt;

&lt;h3 id=&#34;pipeline-executor&#34;&gt;Pipeline executor&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;pipeline&lt;/code&gt; repository, in &lt;code&gt;.git/pipeline.sh&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -e
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -o pipefail

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; cleanup &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  git checkout develop
  git pull develop
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# upon failure, tell the user&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; err &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  cleanup
  growlnotify &lt;span class=&#34;s2&#34;&gt;&amp;quot;pipeline fails&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# trap signal ERR, executing function &amp;#39;err&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;trap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;err&amp;quot;&lt;/span&gt; ERR

&lt;span class=&#34;nv&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; -z &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;ranch &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;need to specify a branch&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; -1
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

git checkout &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;ranch
mvn clean install &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tee output.log
git push --set-upstream origin &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;ranch
cleanup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;pipeline-executor-explanation&#34;&gt;Pipeline executor explanation&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We prepare the bash environment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;: fail the script when a command fails&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o pipefail&lt;/code&gt;: fail the script when some command fails in a pipe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;err&lt;/code&gt; and &lt;code&gt;trap&lt;/code&gt;: create a hook to be executed when the signal is trapped&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We require a branch to execute this script.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Checkout to that branch&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clean, compile &amp;amp; execute tests&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push to origin&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clean up&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In case this fails, the script will stop and notify the user with &lt;code&gt;growl&lt;/code&gt; and clean up.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Clean up: checkout to develop (or any other branch that always exists), leaving the system prepared to execute again.&lt;/p&gt;

&lt;h3 id=&#34;notifications-telling-the-user&#34;&gt;Notifications: telling the user&lt;/h3&gt;

&lt;p&gt;The program &lt;code&gt;growlnotify&lt;/code&gt; is a &lt;a href=&#34;http://www.growlforwindows.com/gfw/help/growlnotify.aspx&#34; target=&#34;_blank&#34;&gt;CLI notifier&lt;/a&gt; to &lt;code&gt;growl&lt;/code&gt; (&lt;a href=&#34;http://www.growlforwindows.com/gfw/default.aspx&#34; target=&#34;_blank&#34;&gt;windows&lt;/a&gt;, &lt;a href=&#34;http://mattn.github.io/growl-for-linux/&#34; target=&#34;_blank&#34;&gt;linux&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Ideally, the tests should be faster, and executing them locally should always be possible, maybe in the &lt;code&gt;pre-commit&lt;/code&gt; hook. Whenever this is not possible, a local pipeline can reduce the time spent waiting for test execution and remove the lock on the working directory while the compiler is working.&lt;/p&gt;

&lt;p&gt;This pipeline aims to be simple, without many customizations and being single-user. For more complex workflows and other restrictions, it might be better to drop this project and start investigating continuous integration (CI) tools such as e.g., &lt;a href=&#34;https://jenkins-ci.org/&#34; target=&#34;_blank&#34;&gt;Jenkins&lt;/a&gt;, &lt;a href=&#34;https://travis-ci.org/&#34; target=&#34;_blank&#34;&gt;Travis&lt;/a&gt;, &lt;a href=&#34;https://atlassian.com/software/bamboo&#34; target=&#34;_blank&#34;&gt;Bamboo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;further-work&#34;&gt;Further work&lt;/h2&gt;

&lt;p&gt;The jobs in the &lt;code&gt;pipeline&lt;/code&gt; could be queued, so it is possible to push to the pipeline before the previous job has started. See reference below.&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_12_02.html&#34; target=&#34;_blank&#34;&gt;Trap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html#The-Set-Builtin&#34; target=&#34;_blank&#34;&gt;Set Builtin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://idolinux.blogspot.com/2008/08/bash-script-error-handling.html&#34; target=&#34;_blank&#34;&gt;Sample bash error handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://superuser.com/questions/220364/how-to-run-commands-as-in-a-queue&#34; target=&#34;_blank&#34;&gt;Queuing bash jobs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;

&lt;p&gt;This script will push to the pipeline:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#!/bin/bash&lt;/span&gt;

git push pipeline  2&amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &amp;gt; /dev/null &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>What defines a dependency</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/13/what-defines-a-dependency/</link>
      <pubDate>Mon, 13 Jul 2015 07:48:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/13/what-defines-a-dependency/</guid>
      <description>&lt;p&gt;A friend and I were arguing about this code (&lt;a href=&#34;https://github.com/alvarogarcia7/cos/blob/7bf866bdfb9006d73a0124e00152e55c520d98a4/src/main/java/users/Registry.java&#34; target=&#34;_blank&#34;&gt;fragment&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;register&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;userName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;registeredUsers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AlreadyRegisteredUserException&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;resultListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;alreadyRegistered&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I would have said that &lt;code&gt;resultListener&lt;/code&gt; is a dependency as, first, it was injected by the constructor, second, it is necessary for the execution (negative case).&lt;/p&gt;

&lt;p&gt;He suggested that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;being injected through  the constructor is usually what happens with dependencies, but does not make it one (i.e., something can be injected by the constructor and not be a dependency)&lt;/li&gt;
&lt;li&gt;what defines a dependency is related to the business: if this behavior is mandatory for the business, then it is a dependency.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a conclusion, &lt;code&gt;resultListener&lt;/code&gt; would be a notification, as business does not require it.&lt;/p&gt;

&lt;p&gt;On a later commit, we decided to inject it to &lt;code&gt;registeredUsers&lt;/code&gt; (&lt;a href=&#34;https://github.com/alvarogarcia7/cos/blob/c89bec1a2de388165676f095c2218afeb1321374/src/main/java/users/InMemoryRegisteredUsers.java&#34; target=&#34;_blank&#34;&gt;fragment&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RegistryResultListener&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resultListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;resultListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;alreadyRegistered&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;resultListener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;successfullyRegistered&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: for cases when no one needs to be informed about the users being registered or not, a null-object pattern will suffice, as there is no check for null reference in the parameter &lt;code&gt;resultListener&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note: more information on object stereotypes can be found &lt;a href=&#34;../../../../2015/07/13/object-peer-stereotypes/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Object Peer Stereotypes</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/13/object-peer-stereotypes/</link>
      <pubDate>Mon, 13 Jul 2015 07:36:14 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/13/object-peer-stereotypes/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;We categorize an object&amp;rsquo;s peers (loosely) into three types of relationship. An object might have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dependencies: Services that the object requires from its peers so it can perform its responsibilities. The object cannot function without these services. It should not be possible to create the object without them. For example, a graphics package will need something like a screen or canvas to draw on&amp;ndash;it doesn&amp;rsquo;t make sense without one.&lt;/li&gt;
&lt;li&gt;Notifications: Peers that need to be kept up to date with the object&amp;rsquo;s activity. The object will notify interested peers whenever it changes state or performs a significant action. Notifications are &amp;ldquo;fire and forget&amp;rdquo;; the object neither knows nor cares which peers are listening. Notifications are so useful because they decouple objects from each other. For example, in a user interface system, a button component promises to notify any registered listeners when it&amp;rsquo;s clicked, but does not know what those listeners will do. Similarly, the listeners expect to be called but know nothing of the way the user interface dispatches its events.&lt;/li&gt;
&lt;li&gt;Adjustments: Peers that adjust the object&amp;rsquo;s behavior to the wider needs of the system. This includes policy objects that make decisions on the object&amp;rsquo;s behalf (the Strategy pattern in [Gamma94]) and component parts of the object if it&amp;rsquo;s a composite. For example, a Swing JTable will ask a TableCellRenderer to draw a cell&amp;rsquo;s value, perhaps as RGB (Red, Green, Blue) values for a color. If we change the renderer, the table will change its presentation, now displaying the HSB (Hue, Saturation, Brightness) values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source is Growing Object-Oriented Software, Guided by Tests &amp;gt; Chapter 6, Object-Oriented Style &amp;gt; Object Peer Stereotypes, page 52&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>