<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/sample/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/sample/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tool to Find Duplicate values in Constants</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/30/tool-to-find-duplicate-values-in-constants/</link>
      <pubDate>Thu, 30 Jul 2015 13:42:44 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/30/tool-to-find-duplicate-values-in-constants/</guid>
      <description>&lt;p&gt;Imagine having this java class:&lt;/p&gt;
private static class RepeatedConstants {
    public static final String A = &#34;A&#34;;
    public static final String A_1 = A;
    public static final String A_2 = &#34;A&#34;;

    public static final Integer _3 = 3;
    public static final Integer THREE = 3;
}

&lt;p&gt;I wanted to remove the repeated values in the constants, in an automatic way, because the file was big (&amp;gt; 4000 constants). A way of doing this is basing the differences on the values, directly. To do this, remove all text that is not a value:&lt;/p&gt;

&lt;p&gt;find what, regex mode: &lt;code&gt;^.*=\s*(.*);&lt;/code&gt;
replace with: $1&lt;/p&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^.*=\s*&lt;/code&gt;: any character before the equal sign. Any whitespace right after it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(.*);&lt;/code&gt;: capture everything that is before the semicolon (;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You end up with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;A&amp;quot;
A
&amp;quot;A&amp;quot;

3
3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy it to &lt;code&gt;a.txt&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt; it and &lt;code&gt;uniq&lt;/code&gt; it (to remove duplication):&lt;/p&gt;
cat a.txt | sort | uniq &gt; uniq.txt

&lt;p&gt;then sort the non-uniq version:&lt;/p&gt;
cat a.txt | sort &gt; sorted.txt

&lt;p&gt;and diff among them, to find the repeated values:&lt;/p&gt;
diff sorted.txt uniq.txt

3,4d2
&lt; &#34;A&#34;
&lt; 3

&lt;p&gt;These are the repeated values. The variable &lt;code&gt;public static final String A_1 = A;&lt;/code&gt; was not caught by this as it only has the same value in execution, not staticly.&lt;/p&gt;

&lt;p&gt;For this, at Gmaur, we have developed a small &lt;a href=&#34;https://github.com/GMaur/java-duplicates-detector&#34; target=&#34;_blank&#34;&gt;module to detect duplicates&lt;/a&gt;. The main code is this:&lt;/p&gt;
public class RepeatedFinder {

  private final Class aClass;

  public RepeatedFinder(Class aClass) {
    this.aClass = aClass;
  }

  public MultiMap findDuplicates() throws IllegalAccessException {
    return generateMapFromValueToVariables(aClass).valuesWithMoreThanOneVariable();
  }

  private ValueToNameRepository generateMapFromValueToVariables(Class&lt;?&gt; clazz) throws IllegalAccessException {
    ValueToNameRepository valueToNames = new ValueToNameRepository();
    Field[] fields = clazz.getDeclaredFields();
    Object object = new Object();
    for (Field field : fields) {
      Object value = field.get(object);
      valueToNames.add(value, field.getName());
    }
    return valueToNames;
  }

&lt;p&gt;The tests and the source code can be found here: &lt;a href=&#34;https://github.com/GMaur/java-duplicates-detector&#34; target=&#34;_blank&#34;&gt;https://github.com/GMaur/java-duplicates-detector&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you enjoy it, as much as we have enjoyed writing it!&lt;/p&gt;

&lt;p&gt;Any feedback is welcome.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tip: Use the same Import Order in IntelliJ IDEA as Eclipse&#39;s</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/30/tip-use-the-same-import-order-in-intellij-idea-as-eclipses/</link>
      <pubDate>Thu, 30 Jul 2015 13:22:44 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/30/tip-use-the-same-import-order-in-intellij-idea-as-eclipses/</guid>
      <description>&lt;p&gt;Organize IntelliJ IDEA&amp;rsquo;s import as Eclipse ones:&lt;/p&gt;

&lt;p&gt;While working at a client, where everyone is using eclipse, while I&amp;rsquo;m using IntelliJ IDEA, there are subtle formatting differences. One of them is in the order of the imports.&lt;/p&gt;

&lt;p&gt;To solve it, see &lt;a href=&#34;http://stackoverflow.com/questions/14716283/is-it-possible-for-intellij-to-organize-imports-the-same-way-as-in-eclipse&#34; target=&#34;_blank&#34;&gt;this link&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tip: massively reverting local changes</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/08/tip-massively-reverting-local-changes/</link>
      <pubDate>Wed, 08 Jul 2015 02:40:24 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/08/tip-massively-reverting-local-changes/</guid>
      <description>&lt;p&gt;I was changing a massive amount of files (&amp;gt;1000) for a repeated code. The search and replace query was not too exact and it broke many tests in the system. For that, I preferred reverting those tests.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how to do it automatically:&lt;/p&gt;

&lt;p&gt;Copy all the failing tests to a text editor:&lt;/p&gt;

&lt;p&gt;Input:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;testSearchXMLDocument(io.company.controller.dms.DocumentControllerTest)
testCreateXMLDocument(io.company.controller.dms.DocumentControllerTest)
testUpdateXFPageMetadata(io.company.controller.dms.DocumentControllerTest)
testCreateDocumentCrop(io.company.controller.dms.DocumentControllerTest)
testUpdateCropMetadata(io.company.controller.dms.DocumentControllerTest)
testDeleteDocument(io.company.controller.dms.DocumentControllerTest)
testUpdateXmlDocumentMetadata(io.company.controller.dms.DocumentControllerTest)
testUpdateXML(io.company.controller.dms.DocumentControllerTest)
testSearchXFPage(io.company.controller.dms.DocumentControllerTest)
testCreateXFPage(io.company.controller.dms.DocumentControllerTest)
testUpdatePage(io.company.controller.dms.DocumentControllerTest)
testSearchCrop(io.company.controller.dms.DocumentControllerTest)
testUpdateCrop(io.company.controller.dms.DocumentControllerTest)
testMoveDocument(io.company.controller.dms.DocumentControllerTest)
testGetDocument(io.company.controller.dms.DocumentControllerTest)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;regex:&lt;/p&gt;

&lt;p&gt;(tested in Sublime 3, build 3083, Windows 64)&lt;/p&gt;

&lt;p&gt;find what: &lt;code&gt;^[^(]+\([a-Z.]*\.(.*)\)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;replace with: &lt;code&gt;$1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Regex explanation for &lt;code&gt;^[^(]+\([a-Z.]*\.(.*)\)&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt;: beginning of line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[^(]+&lt;/code&gt;: every character except parenthesis, one or more times&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\([a-Z.]*&lt;/code&gt;: start with one parenthesis, any number of a-z, A-Z&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\.&lt;/code&gt;`: a dot, as I&amp;rsquo;m using regex replacement&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(.*)&lt;/code&gt;: any character, zero or more times, captured in group &lt;code&gt;$1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\)&lt;/code&gt;: closing parenthesis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
DocumentControllerTest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;copy that to file &lt;code&gt;a.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Revert all the changes in these files:&lt;/p&gt;
for i in $(cat a.txt | uniq); do
  git checkout -- *$i*
done
</description>
    </item>
    
    <item>
      <title>Iterate with index in clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/04/iterate-with-index-in-clojure/</link>
      <pubDate>Sat, 04 Jul 2015 14:34:37 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/04/iterate-with-index-in-clojure/</guid>
      <description>&lt;p&gt;Scenario: iterate a sequence (&lt;code&gt;seq&lt;/code&gt;) with its index&lt;/p&gt;

&lt;p&gt;The lines have an implicit line number (starting by 1, in most editors):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1] line1
[2] line2
[3] hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you read it from file to a variable, it is converted to:&lt;/p&gt;
(&#34;line1&#34; &#34;line2&#34; &#34;hello&#34;)

&lt;p&gt;This implicit line number value is not present, therefore you need to assign them one.&lt;/p&gt;

&lt;p&gt;In ruby, you have this construct:&lt;/p&gt;
array = [&#34;A&#34;, &#34;B&#34;, &#34;C&#34;]
array.each_with_index {|val, index| puts &#34;#{val} =&gt; #{index}&#34; }

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/310634/what-is-the-right-way-to-iterate-through-an-array-in-ruby/310638#310638&#34; target=&#34;_blank&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In clojure, there is a similar function:&lt;/p&gt;
(map-indexed (fn [idx itm] [idx itm]) &#39;(:f :o))
; ([0 &#34;line1&#34;] [1 &#34;line2&#34;] [2 &#34;hello&#34;])

&lt;p&gt;If you want to shift the collection to the right so it starts with 1 (for the REPL):&lt;/p&gt;
(def lines &#39;(&#34;line1&#34; &#34;line2&#34; &#34;hello&#34;))
; (&#34;line1&#34; &#34;line2&#34; &#34;hello&#34;)

(defn shift-one [lines] 
  (cons &#34;&#34; lines))
(def lines (shift-one lines))
lines
; (&#34;&#34; &#34;line1&#34; &#34;line2&#34; &#34;hello&#34;)

(map-indexed (fn [idx itm] [idx itm])
  lines)  
; ([0 &#34;&#34;] [1 &#34;line1&#34;] [2 &#34;line2&#34;] [3 &#34;hello&#34;])

&lt;p&gt;&lt;a href=&#34;https://clojuredocs.org/clojure.core/map-indexed&#34; target=&#34;_blank&#34;&gt;Source&lt;/a&gt;, especially &lt;a href=&#34;https://clojuredocs.org/clojure.core/map-indexed#example-542692cdc026201cdc326d25&#34; target=&#34;_blank&#34;&gt;this one&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if you only need to get the lines at certain indexes, it is also possible to get the values directly, using &lt;code&gt;map&lt;/code&gt; on the sequence of desired indexes:&lt;/p&gt;
lines
; (&#34;&#34; &#34;line1&#34; &#34;line2&#34; &#34;hello&#34;)

(defn get-all [lines indexes]
  (map #(nth lines %) indexes))
(get-all lines &#39;(1 2))
; (&#34;line1&#34; &#34;line2&#34;)

(get-all lines &#39;(1 1))
; (&#34;line1&#34; &#34;line1&#34;)

&lt;p&gt;Note: the original source code for this post is &lt;a href=&#34;https://github.com/alvarogarcia7/clojure-simple-sessions/blob/master/test/simple/iterate-with-index.clj&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What to developers think about</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/02/what-to-developers-think-about/</link>
      <pubDate>Thu, 02 Jul 2015 10:58:28 +0200</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/02/what-to-developers-think-about/</guid>
      <description>&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Junior programmer&amp;#39;s bookshelf: 90% APIs and programming languages; Senior programmer&amp;#39;s bookshelf: 80% applied psychology.&lt;/p&gt;&amp;mdash; ☕ J. B. Rainsberger (@jbrains) &lt;a href=&#34;https://twitter.com/jbrains/status/616228270841962496&#34;&gt;July 1, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/jbrains&#34;&gt;@jbrains&lt;/a&gt; &lt;a href=&#34;https://twitter.com/natpryce&#34;&gt;@natpryce&lt;/a&gt; I&amp;#39;ve been suggesting psychology, sociology, or anthropology as a minor or second major to incoming CS students for years.&lt;/p&gt;&amp;mdash; wallingf (@wallingf) &lt;a href=&#34;https://twitter.com/wallingf/status/616243999171481600&#34;&gt;July 1, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/wallingf&#34;&gt;@wallingf&lt;/a&gt; &lt;a href=&#34;https://twitter.com/jbrains&#34;&gt;@jbrains&lt;/a&gt; &lt;a href=&#34;https://twitter.com/natpryce&#34;&gt;@natpryce&lt;/a&gt; psychology certainly. I’ve found it a real challenge over the years working with people rather than code.&lt;/p&gt;&amp;mdash; Andy Longshaw (@andylongshaw) &lt;a href=&#34;https://twitter.com/andylongshaw/status/616332235524993024&#34;&gt;July 1, 2015&lt;/a&gt;&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>