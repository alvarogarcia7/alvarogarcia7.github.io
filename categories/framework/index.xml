<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Framework on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/framework/</link>
    <description>Recent content in Framework on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Feb 2016 02:55:19 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/framework/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in February 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</link>
      <pubDate>Mon, 01 Feb 2016 02:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</guid>
      <description>

&lt;h2 id=&#34;software-and-all-that-comes-with-it&#34;&gt;Software and all that comes with it&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lanyrd.com/2011/fromthefront/sgfgw/&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about creating software and asking questions to deliver value, by Alberto Brandolini&lt;/p&gt;

&lt;p&gt;Tags: alberto-brandolini, software, slide, team-management, agile&lt;/p&gt;

&lt;h2 id=&#34;driving-your-dba-crazy-in-3-easy-steps&#34;&gt;Driving your DBA crazy in 3 easy steps&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lanyrd.com/2011/ddd-day-it/shzym&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about dealing with the knowledge that is present in the database, not expressed in ubiquitous language and cause of the low bus factor, by Alberto Brandolini&lt;/p&gt;

&lt;p&gt;Analogy between the movie The Shining and a model / entities / aggregates.&lt;/p&gt;

&lt;p&gt;Tags: ddd, model, entity, aggregate, team-management, dba, agile, ubiquitous-language, alberto-brandolini, bus-factor, slide&lt;/p&gt;

&lt;h2 id=&#34;shorter-feedback-is-not-always-bett&#34;&gt;Shorter Feedback is not Always Bett&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://facebook.com/notes/kent-beck/shorter-feedback-is-not-always-bett/1097086386990891&#34; target=&#34;_blank&#34;&gt;this note&lt;/a&gt; from Kent Beck on why shorter feedback loops might not always be better. I.e., why some processes take time to set in and results are not observable until that time.&lt;/p&gt;

&lt;p&gt;Tags:  kent-beck, feedback-loops, open-question, analogy&lt;/p&gt;

&lt;h2 id=&#34;la-regla-del-triple-check-para-ir-a-eventos&#34;&gt;La Regla del Triple Check para ir a eventos&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.bonillaware.com/regla-triple-check-para-ir-a-eventos&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Bonilla about a rule to help you decide attendance to events, in Spanish&lt;/p&gt;

&lt;p&gt;Tags: rule, time-management, david-bonilla, event, spanish, triple-check&lt;/p&gt;

&lt;h2 id=&#34;an-interview-with-charles-wetherell&#34;&gt;An interview with Charles Wetherell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://demin.ws/blog/english/2012/08/25/interview-with-charles-wetherell/&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt; by Alexander Demin about the interviewee&amp;rsquo;s book &amp;ldquo;Etudes for Programmers&amp;rdquo;. In it, they talk about the origin of the études, the author&amp;rsquo;s research interests and activities. Also about the book (written in 1978) and how computer science has changed since then.&lt;/p&gt;

&lt;p&gt;When asked about three things a programmer should know:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some ability to do formal mathematics. The level necessary to understand Hopcroft and Ullman combined with a little graph theory is enough. Discrete mathematics is essential; calculus is only necessary for folks working in special application areas.&lt;/p&gt;

&lt;p&gt;Some ability to write clearly in their native language. Dijkstra said that if a person couldn’t write their own language, they couldn’t write a correct program. (Well, that’s what I hope Dijkstra said!). Writing programs is essentially the same as writing a non-fiction essay. If you can’t make the step-by-step connections clearly in your own language, why would we think you could in C, for example?&lt;/p&gt;

&lt;p&gt;Remember that a program is primarily for communication with humans, not computers. When you write a program, the computer will do whatever you say. You must convince the humans who read the program that what you have asked the computer to do is the correct thing to do. Remember, the computer doesn’t care about correctness.&lt;/p&gt;

&lt;p&gt;The answer to the last question means that programs should always have the form of paragraphs of comments that describe the intention of the program followed by paragraphs of code that implement that intention. All of the formatting should be designed to make readers as able as possible to read the code easily; the compiler doesn’t care. In particular, follow conventions of mathematics and your native language, not those you found in some random language manual. Write the comments first and then write the code, not the other way around. If you don’t know what you want to achieve and why, any code you write is, by definition, incorrect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: charles-wetherell, alexander-demin, interview, book, etude, etudes-for-programmers, practice, ability, skill, list&lt;/p&gt;

&lt;h2 id=&#34;how-to-fix-javascript-maybe&#34;&gt;How to fix Javascript… maybe&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@wob/how-to-fix-javascript-maybe-8857819bfa16&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Drew Hamlett about the lack of style guide for javascript and how this affects the adoption of the language and the sprout of similar libraries.&lt;/p&gt;

&lt;p&gt;Suggests the creation of a standard style guide for javascript.&lt;/p&gt;

&lt;p&gt;Tags: drew-hamlett, javascript, style-guide, analysis&lt;/p&gt;

&lt;h2 id=&#34;isomorphic-javascript-devbeat-master-class&#34;&gt;Isomorphic JavaScript: #DevBeat Master Class&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/spikebrehm/a-28174727&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Spike Brehm on Isomorphic JavaScript and why it&amp;rsquo;s important: initial pageload and speed, reducing effort and duplication, SEO (crawlability).&lt;/p&gt;

&lt;p&gt;Tags: isomorphic-javascript, isomorphism, javascript, seo, crawler, frontend, app, application, fat-client, fat-server, thin-client, thin-server, ria-spike-brehm, slide&lt;/p&gt;

&lt;h2 id=&#34;open-sourcing-our-docker-images&#34;&gt;Open-sourcing our docker images&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.modulus.io/open-sourcing-our-docker-images&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brandon Cannaday about the Docker images that they have.&lt;/p&gt;

&lt;p&gt;Tags: docker, brandon-annaday, open-ource, image, container, modulus&lt;/p&gt;

&lt;h2 id=&#34;growing-up-in-an-open-source-world&#34;&gt;growing up in an open source world&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://fiveisprime.me/2015/02/18/growing-up-in-open-source/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matt Hernandez where he explains that fixing the style guide can limit your creativity and how the software is written in enterprise and open-source environments.&lt;/p&gt;

&lt;p&gt;Also about how developers grow when exposed to different style guides.&lt;/p&gt;

&lt;p&gt;Tags: style-guide, matt-hernandez, creativity, dreyfus-model, enterprise, open-source, programming&lt;/p&gt;

&lt;h2 id=&#34;hanlon-s-razor-and-working-with-young-engineers&#34;&gt;Hanlon&amp;rsquo;s Razor and working with young engineers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://fiveisprime.me/2013/07/27/young-engineers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matt Hernandez on the importance of understanding (and empathising) towards others&amp;rsquo; positions and worries.&lt;/p&gt;

&lt;p&gt;Cites the Hanlon Razor:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Never attribute to malice that which is adequately explained by ignorance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags:  hanlon-razor, empathy, team-management, ignorance, malice, matt-hernandez&lt;/p&gt;

&lt;h2 id=&#34;intro-to-sails-js&#34;&gt;Intro to sails.js&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://youtu.be/GK-tFvpIR7c&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt;, an introduction to the sails.js framework: a realtime nodejs server for creating REST APIs, inspired by Ruby on Rails.&lt;/p&gt;

&lt;p&gt;Tags: sailsjs, ruby-on-rails, ror, framework, video, introduction, mvc, rest-api, realtime, nodejs,&lt;/p&gt;

&lt;h2 id=&#34;node-js-and-hapi-creating-a-rest-api&#34;&gt;Node.js and hapi - creating a rest api&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.modulus.io/nodejs-and-hapi-create-rest-api&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about creating a REST API using &lt;a href=&#34;http://hapijs.com/&#34; target=&#34;_blank&#34;&gt;Hapi&lt;/a&gt;, a nodejs framework. Written by Matt Hernandez&lt;/p&gt;

&lt;p&gt;Tags: matt-hernandez, rest-api, nodejs, hapi, framework&lt;/p&gt;

&lt;h2 id=&#34;introducing-pokedex-org-a-progressive-webapp-for-pokémon-fans&#34;&gt;Introducing Pokedex.org: a progressive webapp for Pokémon fans&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Nolan Lawson about the challenge of having a 60 fps application on a mobile device, making it offline.&lt;/p&gt;

&lt;p&gt;Uses Angular 2, javascript 7, PouchDB as well as LocalForage for storage. All processing on WebWorkers, except for DOM manipulation.&lt;/p&gt;

&lt;p&gt;Tags: angular-2, javascript-7, angular, javascript, pouchdb, localforage, cloudant, 60fps, mobile, app, offline-first, offline, pokemon, api, nolan-lawson, web-worker, flip-technique, css, progressive, pokedex, svgomg, frontend&lt;/p&gt;

&lt;h2 id=&#34;lambdaconf-2015-how-to-learn-haskell-in-less-than-5-years-chris-allen&#34;&gt;LambdaConf 2015 - How to Learn Haskell in Less Than 5 Years Chris Allen&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=Bg9ccYzMbxc&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Chris Allen on how to learn haskell, what are some common pitfalls while learning it and how learning and teaching (it) are different.&lt;/p&gt;

&lt;p&gt;Talks about his (with a coauthor) book, focused on not reducing the readers that make it to the end and, finally, increasing the amount of haskell users.&lt;/p&gt;

&lt;p&gt;References &lt;a href=&#34;https://yow.eventer.com/yow-2014-1222/stop-treading-water-learning-to-learn-by-edward-kmett-1750&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Kmett.&lt;/p&gt;

&lt;p&gt;Tags: chris-allen, haskell, learning-to-learn, meta-learning, lambda-conf, talk&lt;/p&gt;

&lt;h2 id=&#34;extreme-continuous-delivery-at-unruly&#34;&gt;Extreme Continuous Delivery - at Unruly&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.xpdays.de/2014/downloads/002-extreme-continuous-delivery-at-unruly/cd_javaone.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about how the company Unruly does continuous delivery (CD), maximizing business value, minimizing time to market (TTM). Also describes how they do deployments and how to organize teams.&lt;/p&gt;

&lt;p&gt;References: Extreme Programming Explained (Beck), Continuous Delivery (Humble &amp;amp; Farley)&lt;/p&gt;

&lt;p&gt;Tags: silo, team-management, culture, continuous-delivery, tdd, nagdd, shared-infrastructure, acceptance-testing, module-testing, conway-law, cross-pollination, continuous-investment, slide&lt;/p&gt;

&lt;h2 id=&#34;building-chat-applications-and-robots-for-skype&#34;&gt;Building chat applications and robots for Skype&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://opensourcehacker.com/2013/03/28/building-chat-applications-and-robots-for-skype/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on building robots for skype. By Mikko Ohtamaa&lt;/p&gt;

&lt;p&gt;Tags: skype, robot, bot, mikko-ohtamaa, slack, integration, api&lt;/p&gt;

&lt;h2 id=&#34;why-i-never-wrote-down-our-company-values&#34;&gt;Why I never wrote down our company values&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/swlh/why-i-never-wrote-down-our-company-values-8143520497e8&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mikael Cho on the subject of having company values, preaching or writing them down. Also, what happens when hard times come, regarding your values.&lt;/p&gt;

&lt;p&gt;Tags: mikael-cho, value, company-value, analogy&lt;/p&gt;

&lt;h2 id=&#34;interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-protocol-design&#34;&gt;Interview with Jesper Louis Andersen about Erlang, Haskell, OCaml, Go, Idris, the JVM, software and protocol design &lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this interview (&lt;a href=&#34;https://medium.com/this-is-not-a-monad-tutorial/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-b0de06440fbd&#34; target=&#34;_blank&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;https://medium.com/this-is-not-a-monad-tutorial/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-5628fe591295&#34; target=&#34;_blank&#34;&gt;part 2&lt;/a&gt;) to Jesper Louis Andersen, interviewed by Federico Carrone.&lt;/p&gt;

&lt;p&gt;The first part is about a comparison of languages, what/why he uses them, and protocol design. The second is more about the Erlang language, the BEAM VM, and some experiences.&lt;/p&gt;

&lt;p&gt;Tags: federico-carrone, erlang, interview, jesper-andersen, jesper-louis-andersen, haskell, ocaml, go, idris, the-jvm, protocol-design, software-design, language, functional-programming, protocol, land-of-lisp, northern-war&lt;/p&gt;

&lt;h2 id=&#34;migrating-to-hugo-from-octopress&#34;&gt;Migrating to Hugo From Octopress&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://nathanleclaire.com/blog/2014/12/22/migrating-to-hugo-from-octopress/&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; by Nathan LeClaire on migrating the blog from Octopress to Hugo&lt;/p&gt;

&lt;p&gt;Tags: static-site-generator, hugo, go, octopress, ruby, jekyll, nathan-leclaire, migration, blog, meta&lt;/p&gt;

&lt;h2 id=&#34;dynamic-static-site-generators-strategies&#34;&gt;Dynamic Static Site Generators strategies&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://timnash.co.uk/dynamic-static-site-generators-strategies/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining what are static site generators, and an example with Jekyll. By Tim Nash&lt;/p&gt;

&lt;p&gt;Tags: tim-nash, static-site-generator, jekyll, strategy, explanation, comparison&lt;/p&gt;

&lt;h2 id=&#34;blog-like-a-confused-hacker&#34;&gt;Blog like a confused hacker&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://timnash.co.uk/using-wordpress-static-site-generator/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tim Nash on what tools he recomends for static site generation.&lt;/p&gt;

&lt;p&gt;Tags: tim-nash, static-site-generator, jekyll, hide, strategy, explanation, comparison, sublime, wordpress, amazon-s3, cdn&lt;/p&gt;

&lt;h2 id=&#34;resolving-the-frontend-backend-api-design-conflict&#34;&gt;Resolving the Frontend/Backend API Design Conflict&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://launchany.com/resolving-the-frontendbackend-api-design-conflict/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains the &amp;ldquo;Backend for Frontend&amp;rdquo; (BFF) pattern, for solving the different needs of data depending on each device / client. By James Higginbotham&lt;/p&gt;

&lt;p&gt;Tags: james-higginbotham, bff, pattern, backend-for-frontend, api, soa, microservice, frontend, backend, architecture&lt;/p&gt;

&lt;h2 id=&#34;what-if-we-forget-to-write-the-tests&#34;&gt;What If We Forget To Write The Tests?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=f70f14b644&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on the trust issues related to starting to use a new methodology (TDD in this case) and how to see what impacts it might have in your day to day.&lt;/p&gt;

&lt;p&gt;Tags: j-b-rainsberger, j-brains, rainsberger, tdd, motivation, team-management&lt;/p&gt;

&lt;h2 id=&#34;api-microservices-the-unix-philosophy-and-the-richardson-maturity-model-a-practical-perspective&#34;&gt;API microservices, the Unix philosophy, and the Richardson Maturity Model - a practical perspective&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@chrstphrhrt/microservices-the-unix-philosophy-and-the-richardson-maturity-model-425abed44826&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Chris Hart on why startups and companies alike should be careful when choosing th latest technology and how this applies to microservices.&lt;/p&gt;

&lt;p&gt;Tags: microservice, chris-hart, startup, analysis, company, technical-debt, bounded-context, ddd, rest-api&lt;/p&gt;

&lt;h2 id=&#34;effective-programming&#34;&gt;Effective programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@sebas5384/effective-programming-d7e5bb2f3b80&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sebastian Ferrari on the importance of clean code, systems thinking and functional programming.&lt;/p&gt;

&lt;p&gt;Specifies the important difference between effectiveness and efficiency.&lt;/p&gt;

&lt;p&gt;Links to this talk by &lt;a href=&#34;https://youtu.be/OqEeIG8aPPk&#34; target=&#34;_blank&#34;&gt;Russ Ackoff&lt;/a&gt;. States the difference between &amp;ldquo;the right thing&amp;rdquo; and &amp;ldquo;the thing right&amp;rdquo;, by Drucker.&lt;/p&gt;

&lt;p&gt;Tags: drucker, thing-right, right-thing, sebastian-ferrari, system-thinking, russ-ackoff, video, ted, difference, clean-code, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;learning-how-to-learn&#34;&gt;Learning how to learn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@thejameskyle/learning-how-to-learn-7f04d6f42c1e&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by James Kyle about the &amp;ldquo;how to learn&amp;rdquo; as one important skill for programmers and how having the solution at a few keystrokes limits / handicaps this ability.&lt;/p&gt;

&lt;p&gt;Tags: programmer, learn-to-learn, james-kyle, stack-overflow, skill&lt;/p&gt;

&lt;h2 id=&#34;why-do-some-functional-programmers-criticize-design-patterns-in-oop-languages-as-a-sign-of-language-deficiency-while-monad-is-also-a-design-pattern&#34;&gt;Why do some functional programmers criticize design patterns in OOP languages as a sign of language deficiency, while Monad is also a design pattern?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.quora.com/Why-do-some-functional-programmers-criticize-design-patterns-in-OOP-languages-as-a-sign-of-language-deficiency-while-Monad-is-also-a-design-pattern/answer/Edward-Kmett?srid=hVnO&amp;amp;share=12410d1e&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt; by Edward Kmett comparing the design patterns in OOP to the design patterns in functional languages.&lt;/p&gt;

&lt;p&gt;Tags: functional-language, object-oriented-language, edward-kmett, oop, pattern, monad, interface, quora, answer&lt;/p&gt;

&lt;h2 id=&#34;should-we-even-debate-refactoring-with-stakeholders&#34;&gt;Should We Even Debate Refactoring With Stakeholders?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=215f7f649b&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on the power balance between stakeholders and programmers and how it can be inclined to a &amp;lsquo;more trust&amp;rsquo; / &amp;lsquo;less trust&amp;rsquo; by following some actions. The analogy is to a trade you cannot understand, therefore you have to hope that the taken decisions are in your best interest.&lt;/p&gt;

&lt;p&gt;Tags: j-b-rainsberger, j-brains, rainsberger, refactor, business-need, communication, stakeholder&lt;/p&gt;

&lt;h2 id=&#34;the-eternal-struggle-between-business-and-programmers&#34;&gt;The Eternal Struggle Between Business and Programmers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.thecodewhisperer.com/permalink/the-eternal-struggle-between-business-and-programmers&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on the discussion between business (&amp;lsquo;we want more features, now&amp;rsquo;) and the programmers (&amp;lsquo;we want more refactoring, now&amp;rsquo;). Concludes that both players need each other, in a symbiotic fashion, to keep their jobs at the company.&lt;/p&gt;

&lt;p&gt;He suggests that Scrum cannot work without the XP practices and that we need to refactor aggressively after having finished our initial design, to keep the costs down. In fact, agreeing with both parts in this discussion.&lt;/p&gt;

&lt;p&gt;References one of his own videos, at Oredev&amp;rsquo;13, &amp;ldquo;Fundamental Theorem of Agile Software Development&amp;rdquo;, where he describes the relationship between accidental / essential complexity in the cost of a feature, attributing most of it to accidental (&amp;lsquo;we&amp;rsquo;re not good at our jobs&amp;rsquo;) and describing the need for more design / refactor after the initial design.&lt;/p&gt;

&lt;p&gt;Tags: j-b-rainsberger, j-brains, rainsberger, refactor, business-need, design, oredev, talk, agile, xp, scrum, software-development, accidental-complexity, essential-complexity, mythical-man-month&lt;/p&gt;

&lt;h2 id=&#34;turning-code-to-cash-how-to-make-money-as-a-web-developer-and-live-to-tell-the-tale&#34;&gt;Turning code to cash — How to make money as a Web Developer and live to tell the tale.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@kurtrohlandt/turning-code-to-cash-how-to-make-money-as-a-web-developer-and-live-to-tell-the-tale-f5eedc557b3e&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kurt Rohlandt with a list of items to check while dealing with clients as a freelancer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nothing is simple&lt;/li&gt;
&lt;li&gt;Know your skill set — and let your client know it&lt;/li&gt;
&lt;li&gt;Be clear about what they are buying&lt;/li&gt;
&lt;li&gt;Learn to use the best tool for the job&lt;/li&gt;
&lt;li&gt;To your client you’re more than just a developer&lt;/li&gt;
&lt;li&gt;Sign off your jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: freelancer, kurt-rohlandt, list, tip, client&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in October 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</link>
      <pubDate>Thu, 01 Oct 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</guid>
      <description>

&lt;h2 id=&#34;blazing-fast-html-virtual-dom-in-elm&#34;&gt;Blazing Fast HTML: Virtual DOM in Elm&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://elm-lang.org/blog/blazing-fast-html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining how Elm works in relation to the virtual DOM. By Evan Czaplicki.&lt;/p&gt;

&lt;p&gt;Tags: elm, dom, virtual-dom, comparison, speed, haskell, evan-czaplicki&lt;/p&gt;

&lt;h2 id=&#34;why-you-should-never-ever-ever-use-mongodb&#34;&gt;Why you should never, ever, ever use MongoDB&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; stating the downsides of using MongoDB. Written by Sven Slootweg&lt;/p&gt;

&lt;p&gt;Tags: mongodb, downside, sven-slootweg, json, document-store, postgresql, acid&lt;/p&gt;

&lt;h2 id=&#34;do-you-really-get-classloaders&#34;&gt;Do you really get classloaders?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;http://zeroturnaround.com/rebellabs/rebel-labs-tutorial-do-you-really-get-classloaders/&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Jevgeny Kabanov on classloaders: what they are, how they work nad some tips to solve common issues.&lt;/p&gt;

&lt;p&gt;My notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the classloading is lazy: the resources are not loaded until they are mentioned&lt;/li&gt;
&lt;li&gt;every classloader has a parent&lt;/li&gt;
&lt;li&gt;every class has a classloader associated with it&lt;/li&gt;
&lt;li&gt;every object has a class associated with it&lt;/li&gt;
&lt;li&gt;classloading delegation: the parent is consulted before loading a class. if it has it, it will load it. If not, I will delegate it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also &lt;a href=&#34;http://www.javaworld.com/article/2074396/core-java/javaone-2011--do-you-really-get-classloaders-.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the same video&lt;/p&gt;

&lt;p&gt;Tags: jevgeny-kabanov, classloader, java,&lt;/p&gt;

&lt;h2 id=&#34;truth-table&#34;&gt;Truth table&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Truth_table&#34; target=&#34;_blank&#34;&gt;the wikipedia article&lt;/a&gt; about the truth table and the 16 possible binary boolean operators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Contradiction&lt;/li&gt;
&lt;li&gt;NOR&lt;/li&gt;
&lt;li&gt;Converse nonimplication&lt;/li&gt;
&lt;li&gt;Negation (of p)&lt;/li&gt;
&lt;li&gt;Material nonimplication&lt;/li&gt;
&lt;li&gt;Negation (of q)&lt;/li&gt;
&lt;li&gt;XOR (exclusive disjunction)&lt;/li&gt;
&lt;li&gt;NAND&lt;/li&gt;
&lt;li&gt;AND (conjunction)&lt;/li&gt;
&lt;li&gt;XNOR (biconditional)&lt;/li&gt;
&lt;li&gt;Projection (of p)&lt;/li&gt;
&lt;li&gt;Implication&lt;/li&gt;
&lt;li&gt;Projection (of q)&lt;/li&gt;
&lt;li&gt;Converse implication&lt;/li&gt;
&lt;li&gt;OR (disjunction)&lt;/li&gt;
&lt;li&gt;Tautology&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-lines-of-code-3-minutes-implement-a-programming-language-from-scratch&#34;&gt;7 lines of code, 3 minutes: Implement a programming language from scratch&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://matt.might.net/articles/implementing-a-programming-language/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matt Might about the benefits of implementing a language (from scratch but on top of another existing language used as framework). Chooses lambda calculus as the desired DSL&lt;/p&gt;

&lt;p&gt;Tags: matt-might, lambda-calculus, racket, domain-specific-language&lt;/p&gt;

&lt;h2 id=&#34;turing-completeness&#34;&gt;Turing completeness&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing_completeness&#34; target=&#34;_blank&#34;&gt;this wikipedia article&lt;/a&gt; (both main and discussion) about this subject.&lt;/p&gt;

&lt;p&gt;It has sounded strange to me the reference to S-expressions:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Data languages
The notion of Turing-completeness does not apply to languages such as XML, HTML, JSON, YAML and S-expressions because they are typically used to represent structured data, not describe computation [&amp;hellip;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If data (S-expression) is represented as the same format as code (e.g., Lisp&amp;rsquo;s S-expression) and the latter is used to represent a computation, shouldn&amp;rsquo;t be &amp;ldquo;data languages that also are used as computation languages&amp;rdquo; excluded from that list?&lt;/p&gt;

&lt;p&gt;As a side note, Lisp is Turing Complete (see &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing_completeness#Examples&#34; target=&#34;_blank&#34;&gt;Turing Complete#Examples&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;the-prize-is-won-the-simplest-universal-turing-machine-is-proved&#34;&gt;The Prize Is Won; The Simplest Universal Turing Machine Is Proved&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.wolfram.com/2007/10/24/the-prize-is-won-the-simplest-universal-turing-machine-is-proved/?year=2007&amp;amp;monthnum=10&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Stephen Wolfram about the proof of a Turing Machine 2,3 being universal by Alex Smith.&lt;/p&gt;

&lt;p&gt;Tags: stephen-wolfram, turing-machine, universal-turing-machine, proof, paper, alex-smith&lt;/p&gt;

&lt;h2 id=&#34;making-a-successful-commitment-in-each-sprint&#34;&gt;Making a successful commitment in each Sprint&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://succeeding-with-agile.blogspot.com/2015/07/making-successful-commitment-in-each.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Nikolaos Raptis on committing to work in each sprint.&lt;/p&gt;

&lt;p&gt;Tags: nikolaos-raptis, sprint, agile, commitment&lt;/p&gt;

&lt;h2 id=&#34;no-increment-operator-in-ruby&#34;&gt;No increment operator (++) in Ruby?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/3717519/no-increment-operator-in-ruby&#34; target=&#34;_blank&#34;&gt;this stackoverflow&lt;/a&gt; question about the lack of post-increment operator (i++) in Ruby:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;++ and &amp;ndash; are NOT reserved operator in Ruby.&lt;/p&gt;

&lt;p&gt;Mailing list from &lt;a href=&#34;http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/2710&#34; target=&#34;_blank&#34;&gt;Yukihiro Matsumoto aka matz&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;code-is-data-data-is-code&#34;&gt;Code is Data, Data is Code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blogs.mulesoft.com/dev/news-dev/code-is-data-data-is-code/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by James Donelan on the equivalence of code and data in homoiconic languages, including Clojure.&lt;/p&gt;

&lt;p&gt;The article talks about homoiconicity, manually creating Abstract Syntax Trees (AST) out of data and the macro environment. Also, compares the difference between macros and functions.&lt;/p&gt;

&lt;p&gt;Tags: code=data, data=code, james-donelan, clojure, homoiconicity, abstract-syntax-tree, ast, macro, function&lt;/p&gt;

&lt;h2 id=&#34;agile-in-practice-test-driven-development&#34;&gt;Agile in Practice: Test Driven Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=uGaNkTahrIw&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; introducing TDD by the Agile Academy. Explains its motivations and the basic cyclical fashion.&lt;/p&gt;

&lt;p&gt;Tags: agile-academy, video, tdd, introduction&lt;/p&gt;

&lt;h2 id=&#34;agile-in-practice-pair-programming&#34;&gt;Agile in Practice: Pair Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=ET3Q6zNK3Io&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Agile Academy on practicing pair programming. Explains the destination and how to get there.&lt;/p&gt;

&lt;p&gt;Tags: agile-academy, pair-programming, video, introduction&lt;/p&gt;

&lt;h2 id=&#34;a-low-cost-approach-to-working-on-side-projects&#34;&gt;A low cost approach to working on side projects&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://practicingruby.com/articles/low-cost-approach-to-side-projects&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Gregory Brown on how to apply the MVP and Lean Startup principles to side projects (a.k.a. pet projects). Try to start with a brainstorming session of all the features you want your product to have, then prioritise, picking the most important ones.&lt;/p&gt;

&lt;p&gt;Most projects&amp;rsquo; needs can be solved with a minimal version, in the form of a script that took half an hour to develop.&lt;/p&gt;

&lt;p&gt;Tags: gregory-brown, mvp, lean-startup, script, proof-of-concept, priority, backlog, side-project, pet-project, low-cost, cost-reduction&lt;/p&gt;

&lt;h2 id=&#34;extreme-programming&#34;&gt;Extreme Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=kFM2Vcu-BRo&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by STAR Videos on the basic principles behind Extreme Programming and how to use it to improve software quality&lt;/p&gt;

&lt;p&gt;Tags: star-videos, extreme-programming, xp, software-quality&lt;/p&gt;

&lt;h2 id=&#34;disruptor-high-performance-alternative-to-bounded-queues-for-exchanging-data-between-concurrent-threads&#34;&gt;Disruptor: High performance alternative to bounded queues for exchanging data between concurrent threads&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lmax-exchange.github.io/disruptor/files/Disruptor-1.0.pdf&#34; target=&#34;_blank&#34;&gt;this white paper&lt;/a&gt; describing the disruptor framework: a way of exchanging data between concurrent threads.&lt;/p&gt;

&lt;p&gt;It uses a ring buffer and other techniques to eliminate write contention, reduce read contention and produces good results. It was developed for a financial exchange environment but it&amp;rsquo;s general purpose.&lt;/p&gt;

&lt;p&gt;Tags: martin-thompson, dave-farley, michael-barker, patricia-gee, andrew-stewart, trisha-gee, disruptor, contention, framework, concurrency, parallelism, white-paper, comparison, arrayblockingqueue, concurrentlinkedqueue, doug-lea, benchmark, lmax, low-level-optimization, optimization&lt;/p&gt;

&lt;h2 id=&#34;dissecting-the-disruptor-what-s-so-special-about-a-ring-buffer&#34;&gt;Dissecting the Disruptor: What&amp;rsquo;s so special about a ring buffer?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mechanitis.blogspot.com.es/2011/06/dissecting-disruptor-whats-so-special.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the ring buffer data structure. A FIFO data structure where elements get overwritten to reduce pressure on the garbage collector. Every message gets sent to every consumer.&lt;/p&gt;

&lt;p&gt;Tags: patricia-gee, trisha-gee, disruptor, ring-buffer, data-structure&lt;/p&gt;

&lt;h2 id=&#34;the-dependency-inversion-principle&#34;&gt;The Dependency Inversion Principle&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.objectmentor.com/resources/articles/dip.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; about the Dependency Inversion Principle (DIP) written Robert C. Martin.&lt;/p&gt;

&lt;p&gt;It explains the theory, philosophy behind it. Also, creates an example with a copy buffer and different output locations&lt;/p&gt;

&lt;p&gt;Tags: robert-martin, dependency-inversion-principle, dip, example, comparison, object-oriented, principle, solid, design-principle&lt;/p&gt;

&lt;h2 id=&#34;dip-in-the-wild&#34;&gt;DIP in the Wild&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://martinfowler.com/articles/dipInTheWild.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the Dependency Inversion Principle (DIP) written by Brett L. Schuchert.&lt;/p&gt;

&lt;p&gt;It is explained non-canonical representations of this principle, how in other cases he has solved it and conclusions of using it day to day.&lt;/p&gt;

&lt;p&gt;Tags: brett-l.-schuchert, dependency-inversion-principle, dip, example, object-oriented, solid, design-principle&lt;/p&gt;

&lt;h2 id=&#34;the-new-new-product-development-game&#34;&gt;The New New Product Development Game&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/1986/01/the-new-new-product-development-game&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; about the holistic approach to product development, considered seminal for Scrum and other Agile methodologies. Written by Hirotaka Takeuchi and Ikujiro Nonaka&lt;/p&gt;

&lt;p&gt;In it, they describe how teams are distributed, the responsibilities for each one, and the degrees of freedom.&lt;/p&gt;

&lt;p&gt;Cites the six basic characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;built-in instability&lt;/li&gt;
&lt;li&gt;self-organizing project teams&lt;/li&gt;
&lt;li&gt;overlapping development phases&lt;/li&gt;
&lt;li&gt;multilearning&lt;/li&gt;
&lt;li&gt;subtle control&lt;/li&gt;
&lt;li&gt;organizational transfer of learning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: hirotaka-takeuchi, ikujiro-nonaka, scrum, agile, product-development, management, 1986&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in August 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</link>
      <pubDate>Sun, 02 Aug 2015 21:45:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</guid>
      <description>

&lt;h2 id=&#34;humble-object&#34;&gt;Humble Object&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the &lt;a href=&#34;http://xunitpatterns.com/Humble%20Object.html&#34; target=&#34;_blank&#34;&gt;Humble Object&lt;/a&gt; list of patterns, by Gerard Meszaros, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;humble dialog&lt;/li&gt;
&lt;li&gt;humble executable&lt;/li&gt;
&lt;li&gt;humble transaction controller&lt;/li&gt;
&lt;li&gt;humble container adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: pattern, gerard-meszaros&lt;/p&gt;

&lt;h2 id=&#34;how-you-know&#34;&gt;How you know&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve reread &lt;a href=&#34;http://www.paulgraham.com/know.html&#34; target=&#34;_blank&#34;&gt;this small essay&lt;/a&gt; by Paul Graham on storing information in our heads, based on the context. On the importance of rereading, to add more contexts to the initial one.&lt;/p&gt;

&lt;p&gt;Tags: paul-graham, reread, read&lt;/p&gt;

&lt;h2 id=&#34;protected-variation-the-importance-of-being-closed&#34;&gt;Protected Variation: The Importance of Being Closed&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.martinfowler.com/ieeeSoftware/protectedVariation.pdf&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Craig Larman in the magazine IEEE Software &amp;gt; Design.&lt;/p&gt;

&lt;p&gt;Discusses Information Hiding, Protected Variation and the Open-Closed Principle.&lt;/p&gt;

&lt;p&gt;Tags: craig-larman, ocp, open-closed principle, design, information-hiding, ih, protected-variation, pv,&lt;/p&gt;

&lt;h2 id=&#34;lambda-javascript-micro-services-on-aws&#34;&gt;Lambda, Javascript Micro-Services on AWS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.jayway.com/2014/12/18/lambda-javascript-micro-services-aws/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; explaining how to deploy a microservice on AWS on top of Lambda. Written by Anders Janmyr&lt;/p&gt;

&lt;p&gt;The cool thing is that you get billed by milliseconds!&lt;/p&gt;

&lt;p&gt;Tags: anders-janmyr, devops, microservice, lambda, aws&lt;/p&gt;

&lt;h2 id=&#34;migrating-to-clojure-so-much-fn&#34;&gt;Migrating To Clojure. So Much Fn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=Hv4slaRydRM&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Jan Stępień where he talks about his experience on migrating part of an application to clojure from ruby on rails&lt;/p&gt;

&lt;p&gt;Tags: jan-stepien, clojure, migration, ruby-on-rails, talk, wrocloverb&lt;/p&gt;

&lt;h2 id=&#34;te-recomiendo-escribir-en-un-blog&#34;&gt;Te recomiendo escribir en un blog&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/07/te-recomiendo-escribir-en-un-blog/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; from Carlos Blé in which he recommends writing a blog, on things we discover along the way. (Spanish)&lt;/p&gt;

&lt;p&gt;Tags: carlos-ble, meta, blog, long-way&lt;/p&gt;

&lt;h2 id=&#34;we-need-enough-technical-debt&#34;&gt;We need enough technical debt&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.svpino.com/2015/08/05/we-need-enough-technical-debt&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why we need to accumulate a bit of technical debt, as a way of being less perfectionist and deliver more features / value to our stakeholders. Written by Santiago L. Valdarrama.&lt;/p&gt;

&lt;p&gt;Tags: santiago-valdarrama, technical-debt, perfectionism&lt;/p&gt;

&lt;h2 id=&#34;escribe-mejores-tests-en-javascript&#34;&gt;Escribe mejores tests en Javascript&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://carlosvillu.com/escribe-mejores-tests-en-javascript/&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of tips to write better javascript tests (Spanish). By Carlos Villuendas&lt;/p&gt;

&lt;p&gt;Tags: carlos-villuendas, javascript, test&lt;/p&gt;

&lt;h2 id=&#34;down-the-rabbit-hole&#34;&gt;Down the Rabbit Hole&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole&#34; target=&#34;_blank&#34;&gt;this wiki&lt;/a&gt; page on how to tune some aspects of the server hotspot JVM, by Brett Wooldridge&lt;/p&gt;

&lt;p&gt;Tags: performance, jvm, hotspot, inline, bytecode, brett-wooldridge&lt;/p&gt;

&lt;h2 id=&#34;xp-manchester-lightning-talks-2015-live-broadcast&#34;&gt;XP Manchester Lightning Talks 2015 Live broadcast&lt;/h2&gt;

&lt;p&gt;I have watched the first two &lt;a href=&#34;https://www.youtube.com/watch?v=VD4UEW2i7hU&#34; target=&#34;_blank&#34;&gt;lightning talks&lt;/a&gt; from XP Manchester, edition number 61.&lt;/p&gt;

&lt;p&gt;Tags: lightning-talk, broadcast, simplicity, manchester, 2015&lt;/p&gt;

&lt;h2 id=&#34;counting-hash-collisions-with-the-birthday-paradox&#34;&gt;Counting hash collisions with the birthday paradox&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://matt.might.net/articles/counting-hash-collisions/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the birthday paradox, or the percentage of chance of people sharing the same birthday. This could be applied to hash function, as the title says, but is not included in the article. Written by Matt Might&lt;/p&gt;

&lt;h2 id=&#34;why-i-m-the-best-programmer-in-the-world&#34;&gt;Why I&amp;rsquo;m The Best Programmer In The World*&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/why-im-the-best-programmer-in-the-world/&#34; target=&#34;_blank&#34;&gt;this ironically-titled article&lt;/a&gt; by Jeff Atwood on humility and how to improve as a programmer.&lt;/p&gt;

&lt;p&gt;Tags: jeff-atwood&lt;/p&gt;

&lt;h2 id=&#34;the-key-to-giving-and-receiving-negative-feedback&#34;&gt;The Key to Giving and Receiving Negative Feedback&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/2015/08/the-key-to-giving-and-receiving-negative-feedback?&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joseph Grenny about how to give and receive negative feedback. It is exemplified by the plant manager who was expecting another kind of feedback from his subordinates and was surprised by their negative feedback.&lt;/p&gt;

&lt;p&gt;Tags: joseph-grenny, negative-feedback, feedback, by-example&lt;/p&gt;

&lt;h2 id=&#34;testing-clojure-web-applications-with-kerodon&#34;&gt;Testing Clojure web applications with Kerodon&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://semaphoreci.com/community/tutorials/testing-clojure-web-applications-with-kerodon&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; on how to test compojure-based applications with kerodon. Written by Nebojša Stričević&lt;/p&gt;

&lt;p&gt;Tags: nebojsa-stricevic, compojure, kerodon, clojure, testing, guide&lt;/p&gt;

&lt;h2 id=&#34;using-the-option-type-effectively&#34;&gt;Using The Option Type Effectively&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/uku-taht/2015/04/29/using-the-option-type-effectively.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how to use the &lt;code&gt;Option&lt;/code&gt; type (in rust), similar to &lt;code&gt;Optional&lt;/code&gt; in java or &lt;code&gt;Maybe&lt;/code&gt; in haskell. Written by Uku Taht.&lt;/p&gt;

&lt;p&gt;Tags: uku-taht, option, maybe, optional, rust&lt;/p&gt;

&lt;h2 id=&#34;when-should-you-think&#34;&gt;When Should You Think?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2014/03/11/when-to-think.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Robert C Martin on when to think and the hypothesis that TDD does not allow you to think before coding.&lt;/p&gt;

&lt;p&gt;Tags: tdd, robert-c-martin, design, hypothesis&lt;/p&gt;

&lt;h2 id=&#34;orthogonal-latin-squares-an-application-of-experiment-design-to-compiler-testing&#34;&gt;Orthogonal latin squares: an application of experiment design to compiler testing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://barbie.uta.edu/~mehra/20_an%20application%20of%20experiment%20design%20to%20compiler%20testing.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; by Robert Mandl on techniques that can be applied to reduce the burden of exhaustive testing to compilers. Preferring &amp;ldquo;surely all relevant distinct combinations&amp;rdquo; we can reduce the amount of testing. This paper tries to formalize the concept of &amp;ldquo;near-exhaustive testing&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: latin-square, robert-mandl, compiler, testing, near-exhaustive-testing, optimization, exhaustive-testing&lt;/p&gt;

&lt;p&gt;##  Practical Type System Benefits&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://themonadreader.files.wordpress.com/2014/04/nccb.pdf&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Neil Brown on benefits of the type system, with examples in haskell. He goes on to explore the benefits of involving the type-checker at compile time to remove type errors and ease the programming effort:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I find that several problems in Haskell can be solved by involving the type system
further: The trick is to involve the type system in ways that provide a big benefit
for the cost, but not going so far that the type system gets in the way of code
that you know &amp;ndash;but can’t easily prove to the compiler&amp;ndash; is safe&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve also learned the concept of the quasi-quoter: similar to a preprocessor, executed at compile time and type-checked&lt;/p&gt;

&lt;p&gt;Tags: neil-brown, quote, quasi-quoter, preprocessor, haskell, monad-reader&lt;/p&gt;

&lt;h2 id=&#34;clojurescript-and-the-blub-paradox&#34;&gt;ClojureScript and the Blub Paradox&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article comparing javascript and clojurescript using the fizzbuzz kata. There is a nice example of the pattern matching for the cases (i.e. &amp;ldquo;switch&amp;rdquo;) of the fizz, buzz. Written by Nate Wildermuth&lt;/p&gt;

&lt;p&gt;Tags: clojurescript, javascript, fizzbuzz, kata, nate-wildermuth&lt;/p&gt;

&lt;h2 id=&#34;no-malinterpretes-tu-carrera&#34;&gt;No malinterpretes tu carrera&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2011/02/no-malinterpretes-tu-carrera/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on (not) changing careers from programmer to designer, analyst, team manager. About the programmer&amp;rsquo;s passion and why not to misinterpret your career. Written by Carlos Blé. In Spanish.&lt;/p&gt;

&lt;p&gt;Tags: carlos-ble, career, programming, management, career-change&lt;/p&gt;

&lt;h2 id=&#34;just-haskell-or-nothing&#34;&gt;Just Haskell or Nothing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://cheecheeo.github.io/just_haskell_or_nothing.html&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; on packaging values in (Just a) or Nothing for possibly failed computations in haskell. Written by John Chee&lt;/p&gt;

&lt;p&gt;Tags: john-chee, haskell, just, nothing, maybe, functor&lt;/p&gt;

&lt;h2 id=&#34;tracking-joy-at-work&#34;&gt;Tracking Joy at Work&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://begriffs.com/posts/2015-03-15-tracking-joy-at-work.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about quantifying happiness at the office (or at work). Joe Nelson, the author of the article, uses the quantifying method described int the book &lt;a href=&#34;http://www.amazon.com/Experience-Sampling-Method-Measuring-Everyday/dp/1412925576/&#34; target=&#34;_blank&#34;&gt;Experience Sampling Method&lt;/a&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Experience_sampling_method&#34; target=&#34;_blank&#34;&gt;wikipedia page&lt;/a&gt;) by Hektner, Schmidt, Csikszentmihalyi.&lt;/p&gt;

&lt;p&gt;The last one, not coincidentally is the author of &lt;a href=&#34;http://www.amazon.com/Flow-The-Psychology-Optimal-Experience/dp/0061339202&#34; target=&#34;_blank&#34;&gt;Flow: The Psychology of Optimal Experience&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tags: mihaly-csikszentmihalyi, flow, quantification, data, experience-sampling, article, joe-nelson&lt;/p&gt;

&lt;h2 id=&#34;going-write-only&#34;&gt;Going &amp;ldquo;Write-Only&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://begriffs.com/posts/2015-04-20-going-write-only.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joe Nelson on going &amp;ldquo;write-only&amp;rdquo; on social media, blogs, news, etc, as opposed to read-only (only consuming media) or read-write (consuming and producing). He cites another programmer, &lt;a href=&#34;http://joey.hess.usesthis.com/&#34; target=&#34;_blank&#34;&gt;Joey Hess&lt;/a&gt; and about the quality and durability of your work.&lt;/p&gt;

&lt;p&gt;Tags: article, joe-nelson, write-only, social-media, reading, philosophy, thoreau, nietzsche, joey-hess&lt;/p&gt;

&lt;h2 id=&#34;create-a-static-site-with-hakyll-github-and-travis-ci&#34;&gt;Create a static site with Hakyll, Github and Travis CI&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://begriffs.com/posts/2014-08-12-create-static-site-with-hakyll-github.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how to create your blog with hakyll and travis ci. Written by Joe Nelson&lt;/p&gt;

&lt;p&gt;Travis ci is used to do continuous integration and automatically deploy each commit to production (github pages).&lt;/p&gt;

&lt;p&gt;Tags: hakyll, haskell, joe-nelson, meta, blog, continuous-deployment, github, github-pages, travis-ci&lt;/p&gt;

&lt;h2 id=&#34;falling-in-love-with-computer-science&#34;&gt;Falling in Love with Computer Science&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=haxusGuUyt4&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Kathy Pham, an American that discovered her passion, her love to computer science a few years ago. She tells the events around computer science from the beginning of college to the current moment.&lt;/p&gt;

&lt;p&gt;Tags: kathy-pham, passion, love, computer-science, autobiography, time-lapse, google-developers&lt;/p&gt;

&lt;h2 id=&#34;duck-typing&#34;&gt;Duck Typing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=h0rTF__RNo4&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Dan Grossman, part of the &lt;a href=&#34;https://www.coursera.org/course/proglang&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Programming Languages&amp;rdquo; MOOC&lt;/a&gt;, in which he explains what is a Duck Type and how to use (and abuse) them in ruby.&lt;/p&gt;

&lt;p&gt;Tags: ruby, dan-grossman, mooc, mooc-programming-languages&lt;/p&gt;

&lt;h2 id=&#34;not-so-private-clojure-functions&#34;&gt;Not-So-Private Clojure Functions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://christophermaier.name/blog/2011/04/30/not-so-private-clojure-functions&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining how to bypass private functions in clojure: either create a lambda or create a different namespace. Written by Christopher Maier&lt;/p&gt;

&lt;p&gt;Tags: private-variable, clojure, testing, joy-of-clojure, christopher-maier, private-function, namespace&lt;/p&gt;

&lt;h2 id=&#34;frege-and-clojure&#34;&gt;Frege (and Clojure)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://seancorfield.github.io/blog/2015/02/13/frege-and-clojure/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that tells the Pragmatic Programmer&amp;rsquo;s advice to learn a new language every year and the author (Sean Corfield) explains his trajectory learning them. He also cites the Lein plugin he&amp;rsquo;s built: &lt;code&gt;lein-fregec&lt;/code&gt; and how to connect clojure and frege (a.k.a JVM&amp;rsquo;s haskell).&lt;/p&gt;

&lt;p&gt;Tags: haskell, frege, jvm, clojure, ffi, pragmatic-programmer, advice, lein-fregec,  sean-corfield, comparison&lt;/p&gt;

&lt;h2 id=&#34;two-months-early-300k-under-budget&#34;&gt;Two months early. 300k under budget&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://thoughtworks.github.io/p2/issue09/two-months-early/&#34; target=&#34;_blank&#34;&gt;the tale&lt;/a&gt; of a Thoughtworks Project Manager who convinced his client to start using clojure to deliver a custom-made CMS. Written by Dave Elliman.&lt;/p&gt;

&lt;p&gt;Tags: dave-elliman, thoughtworks, project-manager, clojure, cms, microservice&lt;/p&gt;

&lt;h2 id=&#34;convince-your-boss-to-use-clojure&#34;&gt;Convince your boss to use Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.lispcast.com/convince-your-boss-to-use-clojure&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; by Eric Normand on how to convince your boss or your company to start using clojure.&lt;/p&gt;

&lt;p&gt;Tags: company, clojure, eric-normand, how-to, guide&lt;/p&gt;

&lt;h2 id=&#34;a-brief-introduction-to-prolog&#34;&gt;A brief introduction to Prolog&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://docs.google.com/presentation/d/1NAUo8nWLfNvvW3Wb7HJMunljjDJbzu7mo-5twKeGDvc/edit#slide=id.g63daf4745_0_56&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about a brief introduction to prolog and how to do web development in it. By Jaelle Scheuerman&lt;/p&gt;

&lt;p&gt;Tags: jaelle-scheuerman, prolog, web-development, rest, slide&lt;/p&gt;

&lt;h2 id=&#34;arrayzing-the-javascript-array-cheatsheet&#34;&gt;Arrayzing - The JavaScript array cheatsheet&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://gist.github.com/ourmaninamsterdam/1be9a5590c9cf4a0ab42&#34; target=&#34;_blank&#34;&gt;this cheatsheet&lt;/a&gt; for javascript arrays. Written by Justin Perry&lt;/p&gt;

&lt;p&gt;Tags: cheatsheet, array, javascript, gist, justin-perry&lt;/p&gt;

&lt;h2 id=&#34;some-words-on-lazy-evaluation-and-sharing&#34;&gt;Some words on lazy evaluation and sharing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://pseudo.fixme.fi/~opqdonut/blog/Some_words_on_lazy_evaluation_and_sharing.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; comparing the &lt;code&gt;fix&lt;/code&gt; definition with a hand-made one and its &amp;ldquo;sharing&amp;rdquo; problems. Written by Joel E. Kaasinen&lt;/p&gt;

&lt;p&gt;Tags: joel-kaasinen, haskell, fix, sharing, non-strictness, lazy-evaluation&lt;/p&gt;

&lt;h2 id=&#34;hammock-driven-development&#34;&gt;Hammock Driven Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=f84n5oFoZBc&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Rich Hickey. A few notes:&lt;/p&gt;

&lt;p&gt;A: identifying a problem that we&amp;rsquo;re trying to solve&lt;/p&gt;

&lt;p&gt;D: assessing if the proposed solution solves the problem&lt;/p&gt;

&lt;p&gt;the union of the features is not the purpose of the product / is not the product&lt;/p&gt;

&lt;p&gt;proramming is not completing features&lt;/p&gt;

&lt;p&gt;avoiding problems /= solving problems&lt;/p&gt;

&lt;p&gt;book: how to solve it - G. Polya. Practices &amp;amp; techniques for solving mathematic problems&lt;/p&gt;

&lt;p&gt;How to solve the problem&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;state the problem&lt;/li&gt;
&lt;li&gt;understand the problem:

&lt;ul&gt;
&lt;li&gt;what do you know: facts, context, constraints.&lt;/li&gt;
&lt;li&gt;what do you don&amp;rsquo;t know&lt;/li&gt;
&lt;li&gt;are there related problems? solutions to related problems. find an analogy: starting from scratch vs incremental step&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;be discerning&lt;/li&gt;
&lt;li&gt;more input, better output:

&lt;ul&gt;
&lt;li&gt;read about your domain problem, research papers (maybe ACM)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;tradeoffs:

&lt;ul&gt;
&lt;li&gt;find at least two options (ups and downs) to compare before taking a decision&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Focus time for programmers like alone time for kids. Hammock time is important mind&amp;rsquo;s eye time&lt;/p&gt;

&lt;p&gt;Waking mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;critical thinking&lt;/li&gt;
&lt;li&gt;analysis&lt;/li&gt;
&lt;li&gt;tactics&lt;/li&gt;
&lt;li&gt;prone to local maxima&lt;/li&gt;
&lt;li&gt;feed work to background mind&lt;/li&gt;
&lt;li&gt;analyze its products&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Background mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;making connections&lt;/li&gt;
&lt;li&gt;synthesis&lt;/li&gt;
&lt;li&gt;strategy&lt;/li&gt;
&lt;li&gt;abstracts, analogies&lt;/li&gt;
&lt;li&gt;solves most non-trivial problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;loading it: work it hard in the waking mind to be included in the background mind&lt;/p&gt;

&lt;p&gt;abstraction = software strategy&lt;/p&gt;

&lt;p&gt;tip: small answer is better than big answer (occam&amp;rsquo;s razor?)​&lt;/p&gt;

&lt;p&gt;Tags: rich-hickey, hammock-driven-development, background-mind, waking-mind, solve-problem, george-polya, book, analysis, design, talk&lt;/p&gt;

&lt;h2 id=&#34;parallelism-concurrency&#34;&gt;Parallelism /= Concurrency&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ghcmutterings.wordpress.com/2009/10/06/parallelism-concurrency/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the differences between parallelism and concurrency, with examples in the haskell compiler GHC. Written by &lt;a href=&#34;https://ghcmutterings.wordpress.com/author/simonmar/&#34; target=&#34;_blank&#34;&gt;simonmar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: haskell, concurrency, parallelism, ghc, simonmar, comparison&lt;/p&gt;

&lt;h2 id=&#34;parallelism-vs-concurrency&#34;&gt;Parallelism vs. Concurrency&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://wiki.haskell.org/Parallelism_vs._Concurrency&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt; from the haskell wiki.&lt;/p&gt;

&lt;p&gt;Tags: haskell, concurrency, parallelism, ghc, comparison&lt;/p&gt;

&lt;h2 id=&#34;writing-code-that-writes-code-with-hack-codegen&#34;&gt;Writing code that writes code — with Hack Codegen&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://code.facebook.com/posts/1624644147776541/writing-code-that-writes-code-with-hack-codegen/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about metaprogramming (code that generates code) in PHP. Written by Alejandro Marcu.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve arrived to this from this tweet:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-cards=&#34;hidden&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;This is what happens when your programming language doesn&amp;#39;t have macros &lt;a href=&#34;https://t.co/ZfsEe2EJIj&#34;&gt;https://t.co/ZfsEe2EJIj&lt;/a&gt;. Yuck.&lt;/p&gt;&amp;mdash; David Nolen (@swannodette) &lt;a href=&#34;https://twitter.com/swannodette/status/634495099607613440&#34;&gt;August 20, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Tags: alejandro-marcu, metaprogramming, php, macro, lisp, clojure&lt;/p&gt;

&lt;h2 id=&#34;how-katas-can-help-you-learn&#34;&gt;How katas can help you learn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://codurance.com/2015/08/18/How-katas-can-help-you-learn/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on learning from katas, with the example of the Roman Numerals kata in Objective-C. Written by Sandro Mancuso.&lt;/p&gt;

&lt;p&gt;Tags: sandro-mancuso, kata, learning, roman-numeral, objective-c&lt;/p&gt;

&lt;h2 id=&#34;java-8-definitive-guide-to-completablefuture&#34;&gt;Java 8: Definitive guide to CompletableFuture&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.nurkiewicz.com/2013/05/java-8-definitive-guide-to.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about Java 8&amp;rsquo;s feature, the &lt;code&gt;CompletableFeature&lt;/code&gt;. Written by Tomasz Nurkiewicz&lt;/p&gt;

&lt;p&gt;Tags: tomasz-nurkiewicz, java-8, completable-future, future, non-blocking, reactive-programming&lt;/p&gt;

&lt;h2 id=&#34;are-you-making-these-10-ddd-mistakes&#34;&gt;Are You Making These 10 DDD Mistakes?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://danielwhittaker.me/2015/07/05/are-you-making-these-10-ddd-mistakes/#&#34; target=&#34;_blank&#34;&gt;this infographic&lt;/a&gt; on 10 DDD common mistakes, by Daniel Whittaker.&lt;/p&gt;

&lt;p&gt;Tags: ddd, daniel-whittaker, bounded-context, ubiquitous-language, infographic&lt;/p&gt;

&lt;h2 id=&#34;haste-full-stack-haskell-for-non-phd-candidates&#34;&gt;Haste: Full-Stack Haskell for Non-PhD Candidates&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=3v03NFcyvzc&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; at the Strange Loop Conference 2014 about Haste language, a haskell version that compiles to javascript, therefore letting you write haskell in the browser. By Erin Swenson-Healey and James Cooper&lt;/p&gt;

&lt;p&gt;In this talk they recommend the &lt;a href=&#34;http://www.seas.upenn.edu/~cis194/lectures.html&#34; target=&#34;_blank&#34;&gt;CIS194 course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: haste, haskell, james-cooper, erin-swenson-healey, strange-loop, 2014, talk&lt;/p&gt;

&lt;h2 id=&#34;a-year-of-haskell&#34;&gt;A Year of Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=wZ0RQG3mFPw&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; about experiences using haskell professionally, by the American Justin Leitgeb in a Equatorian company in Quito, Stack Builders. He goes on to explain the haskell language in comparison to ruby on rails, what he mostly used with his clients.&lt;/p&gt;

&lt;p&gt;Also explains what sells and doesn&amp;rsquo;t (mostly productivity, not security) and gives pointer for applying it to a company&lt;/p&gt;

&lt;p&gt;Tags: justin-leitgeb, ecuador, haskell, stack-builders, lambda-days, 2015, client, professional, consulting, consultancy&lt;/p&gt;

&lt;h2 id=&#34;a-taste-of-haskell&#34;&gt;A Taste of Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched a lesson by Simon Peyton-Jones, that introduces haskell to experienced programmers, not in the language but in programming in general. At the conference OSCON 2007&lt;/p&gt;

&lt;p&gt;Links: &lt;a href=&#34;https://www.youtube.com/watch?v=jLj1QV11o9g&#34; target=&#34;_blank&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=IqXTUbdLig0&#34; target=&#34;_blank&#34;&gt;part 2&lt;/a&gt;, &lt;a href=&#34;http://www.slideshare.net/oscon2007/os-peytonjones&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: oscon, 2007, haskell, introduction, lesson, simon-peyton-jones&lt;/p&gt;

&lt;h2 id=&#34;programming-why-haskell-is-great&#34;&gt;Programming - Why Haskell is Great&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.youtube.com/watch?v=RqvCNb7fKsg&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; introducing some features of haskell. The most basic features, the REPL,  function composition. By FrungyKing&lt;/p&gt;

&lt;p&gt;Tags: haskell, introduction, video, screencast, repl, frungyking&lt;/p&gt;

&lt;h2 id=&#34;history-of-haskell-being-lazy-with-class&#34;&gt;History of Haskell: being lazy with class&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=3bjXGrycMhQ&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Simon Peyton-Jones at the &amp;ldquo;History of Programming Languages Conference III&amp;rdquo; which explains how the language was designed and written, a language timeline, what options they took, how they decided about monadic IO, etc.&lt;/p&gt;

&lt;p&gt;Tags: simon-peyton-jones, 2007, history-of-programming-languages-conference, haskell, talk&lt;/p&gt;

&lt;h2 id=&#34;the-humble-programmer&#34;&gt;The Humble Programmer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.cs.utexas.edu/users/EWD/transcriptions/EWD03xx/EWD340.html&#34; target=&#34;_blank&#34;&gt;this EWD&lt;/a&gt; about the necessary humbleness for being a programmer and the slow expansion of the trade, as compared to hardware engineers.&lt;/p&gt;

&lt;p&gt;He cites six reasons for preferring to be a humble programmer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the programmer only needs to manage simple programs&lt;/li&gt;
&lt;li&gt;simple programs imply reducing the search space&lt;/li&gt;
&lt;li&gt;construct a program from a mathematical proof instead of test its properties after building the software. see quote below&lt;/li&gt;
&lt;li&gt;a good abstraction can hide much complexity and difficulty&lt;/li&gt;
&lt;li&gt;the importance of the used tool in the final product&lt;/li&gt;
&lt;li&gt;&amp;ldquo;the only problems we can satisfactory solve are the ones that admit a factored solution&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this essay I&amp;rsquo;ve found the idea of&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Testing shows the presence, not the absence of bugs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That &lt;a href=&#34;https://en.wikiquote.org/wiki/Edsger_W._Dijkstra&#34; target=&#34;_blank&#34;&gt;Wikiquote&lt;/a&gt; attributes to an earlier paper (in 1969). In this paper, the verbatim quote is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;program testing can be a very effective way to show the presence of bugs, but is hopelessly inadequate for showing their absence.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This idea also connects to the &amp;ldquo;lower bounds&amp;rdquo; and &amp;ldquo;upper bounds&amp;rdquo; of program correctness expressed in the article &lt;a href=&#34;https://cdsmith.wordpress.com/2011/01/09/an-old-article-i-wrote/&#34; target=&#34;_blank&#34;&gt;An Old Article I Wrote&lt;/a&gt; which is about static types, by Cdsmith. Admittedly, much later, in 2008, so this idea could be inspired by the Dijkstra&amp;rsquo;s article.&lt;/p&gt;

&lt;p&gt;Tags: edsger-dijkstra, ewd, dijkstra, humble-programmer, essay, comparison, absence-of-bugs, quote&lt;/p&gt;

&lt;h2 id=&#34;building-a-link-shortener-with-snaplets&#34;&gt;Building a Link Shortener with Snaplets&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://vimeo.com/59109358&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; of how to build a link shortener webapp in haskell with the framework snap. By Ryan Trinkle. Found it in the &lt;a href=&#34;http://snapframework.com/docs&#34; target=&#34;_blank&#34;&gt;snap docs&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;Tags: snap, haskell, link-shortener, talk, webapp, framework, ryan-trinkle&lt;/p&gt;

&lt;h2 id=&#34;comparing-haskell-web-frameworks&#34;&gt;Comparing Haskell Web Frameworks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.edofic.com/posts/2014-02-23-haskell-web.html&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; of haskell web frameworks, by Andraz Bajt (a.k.a, edofic)&lt;/p&gt;

&lt;p&gt;Tags: andraz-bajt, edofic, haskell, web-framework, framework, comparison&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>