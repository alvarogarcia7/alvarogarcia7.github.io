<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Experience Report on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/experience-report/</link>
    <description>Recent content in Experience Report on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Mar 2016 12:58:19 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/experience-report/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in March 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</link>
      <pubDate>Wed, 02 Mar 2016 12:58:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</guid>
      <description>

&lt;h2 id=&#34;learning-programming-isn-t-that-hard-deep-work-is-hard&#34;&gt;Learning Programming Isn’t That Hard, Deep Work Is Hard&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@benedictfritz/learning-programming-isn-t-that-hard-deep-work-is-hard-40a4cf3104f4&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Benedict Fritz on two types of work (i.e., deep and shallow) and how programming is of the deep type. He links the difficulty of learning to program to the difficulty of practicing deep work.&lt;/p&gt;

&lt;p&gt;Tags: analogy, benedict-fritz, deep-work, shallow-work, learn-to-program, psychology&lt;/p&gt;

&lt;h2 id=&#34;becodeweek-by-yeray-darias&#34;&gt;BeCodeWeek by Yeray Darias&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://developerscookbook.blogspot.com.es/search/label/desk-surfing&#34; target=&#34;_blank&#34;&gt;this category of posts&lt;/a&gt; by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.&lt;/p&gt;

&lt;p&gt;Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc&lt;/p&gt;

&lt;p&gt;Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis&lt;/p&gt;

&lt;h2 id=&#34;becodeweek-by-yeray-darias-1&#34;&gt;BeCodeWeek by Yeray Darias&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://developerscookbook.blogspot.com.es/search/label/desk-surfing&#34; target=&#34;_blank&#34;&gt;this category of posts&lt;/a&gt; by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.&lt;/p&gt;

&lt;p&gt;Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc&lt;/p&gt;

&lt;p&gt;Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis&lt;/p&gt;

&lt;h2 id=&#34;tracer-bullets&#34;&gt;Tracer Bullets&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://c2.com/cgi/wiki?TracerBullets&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt; about tracer bullets, an analogy from the military warfare to a software project.&lt;/p&gt;

&lt;p&gt;Serves the purpose of adjusting the aim of the cannon to better reach the target.&lt;/p&gt;

&lt;p&gt;Tags: analogy, metaphor, warfare, management&lt;/p&gt;

&lt;h2 id=&#34;cohesion-the-cornerstone-of-software-design&#34;&gt;Cohesion - the cornerstone of software design&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://codurance.com/2016/03/03/cohesion-cornerstone-software-design/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sandro Mancuso on the topic of cohesion. Describes the 7 types of cohesion, as described in Structured Design&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, from worst to best:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coincidental cohesion&lt;/li&gt;
&lt;li&gt;Logical cohesion&lt;/li&gt;
&lt;li&gt;Temporal cohesion&lt;/li&gt;
&lt;li&gt;Procedural cohesion&lt;/li&gt;
&lt;li&gt;Communicational/informational cohesion&lt;/li&gt;
&lt;li&gt;Sequential cohesion&lt;/li&gt;
&lt;li&gt;Functional cohesion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and about Design-Level Cohesion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coincidental relation (R1)&lt;/li&gt;
&lt;li&gt;Conditional relation (R2)&lt;/li&gt;
&lt;li&gt;Iterative relation (R3)&lt;/li&gt;
&lt;li&gt;Communication relation (R4)&lt;/li&gt;
&lt;li&gt;Sequential relation (R5)&lt;/li&gt;
&lt;li&gt;Functional (R6)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: cohesion, codurance, edward-yourdon, larry-constantine, list, sandro-mancuso, software-design, design-level-cohesion, smc-cohesion, dlc-cohesion&lt;/p&gt;

&lt;h2 id=&#34;etsy-cto-q-a-we-need-software-engineers-not-developers&#34;&gt;Etsy CTO Q&amp;amp;A: We Need Software Engineers, Not Developers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/etsy-cto-qa-need-software-engineers-not-developers/&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt; with John Allspaw, where they explain the onboarding experience for new hires at Etsy, the DevOps philosophy and the need for engineering skills, more than developer skills. This can be exemplified in the need to know more, defining the boundaries of your job and finding the right tool for the job.&lt;/p&gt;

&lt;p&gt;Tags: devops, interview, q-and-a, john-allspaw, etsy, onboarding, hire, team-management, deploy&lt;/p&gt;

&lt;h2 id=&#34;frequency-reduces-difficulty&#34;&gt;Frequency Reduces Difficulty&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://martinfowler.com/bliki/FrequencyReducesDifficulty.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Martin Fowler on why we should repeat things that are difficult for us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perfectioning the technique&lt;/li&gt;
&lt;li&gt;Internalizing the details&lt;/li&gt;
&lt;li&gt;Easing its automation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: martin-fowler, automation, process, perfection, internalizing, technique, detail, process-theory, agile&lt;/p&gt;

&lt;h2 id=&#34;lambdas-are-confusing&#34;&gt;Lambdas are confusing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this video where Coman Hamilton from JAXenter interviews Dr. Heinz Kabutz about Java&amp;rsquo;s lambda syntax. Cites the problem with exceptions, generics, method overloading.&lt;/p&gt;

&lt;p&gt;Tags: java, lambda, coman-hamilton, jaxenter, heinz-kabutz, problem&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WcHom1eVhi4&amp;amp;feature=youtu.be&#34; target=&#34;_blank&#34;&gt;https://www.youtube.com/watch?v=WcHom1eVhi4&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;el-full-stack-developer-en-2016&#34;&gt;El full-stack developer en 2016&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.developerdepueblo.com/development/full-stack-developer-2016/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jose Ignacio Andrés about the job descriptions of 2016.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;El principal valor de un full-stack es poder simplificar el trabajo a los demás miembros del equipo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My translation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The main value of a full-stack developer is to be able to simplify other teammates&amp;rsquo; work&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: teamwork, teammate, fullstack, simplification, work, team-management, jose andres&lt;/p&gt;

&lt;h2 id=&#34;i-am-a-software-craftsman&#34;&gt;I am a software craftsman&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.dirv.me/i-am-a-software-craftsman/index.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Daniel Irvine about calling yourself a craftsman or not. He says that if you adhere to their values, you should.&lt;/p&gt;

&lt;p&gt;Tags: craftsmanship, label, daniel-irvine, craftsman, group-belonging&lt;/p&gt;

&lt;h2 id=&#34;teaching-programming-languages-in-a-post-linnaean-age&#34;&gt;Teaching Programming Languages in a Post-Linnaean Age&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://cs.brown.edu/~sk/Publications/Papers/Published/sk-teach-pl-post-linnaean/paper.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; by Shriram Krishnamurthi where he explains the need for books like &lt;a href=&#34;http://www.plai.org/&#34; target=&#34;_blank&#34;&gt;PLAI&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lack of paradigms in new languages, and its separation (or lack of)&lt;/li&gt;
&lt;li&gt;design of languages cheaper and cheaper these days&lt;/li&gt;
&lt;li&gt;rigor level in publications&lt;/li&gt;
&lt;li&gt;inductive and deductive learning
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;post-Linnaean&lt;/code&gt; refers to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Carl_Linnaeus&#34; target=&#34;_blank&#34;&gt;Carl Linnaeus&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;He is known as the father of modern taxonomy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: inductive-learning, deductive-learning, dsl, domain-specific-language, type-soundness, continuation-style, garbage-collection, reactive-programming, scheme, plai, teaching, programming-language, shriram-krishnamurthi&lt;/p&gt;

&lt;h2 id=&#34;lazy-ruby&#34;&gt;Lazy Ruby&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://sonnym.github.io/2014/04/05/lazy-ruby/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by sonnym about using ruby&amp;rsquo;s lazy (non-strict) features, detailing an example with Fibonacci&amp;rsquo;s sequence.&lt;/p&gt;

&lt;p&gt;Tags: laziness, strictness, non-strictness, ruby, fibonacci, comparison&lt;/p&gt;

&lt;h2 id=&#34;jessica-livingston&#34;&gt;Jessica Livingston&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://paulgraham.com/jessica.html&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Paul Graham about his co-founder at the Y-combinator: Jessica Livingston. She was considered the Social Radar at YC&lt;/p&gt;

&lt;p&gt;The essay also talks about the non-existent separation between working hours and not and about her implication and personality.&lt;/p&gt;

&lt;p&gt;Tags: jessica-livingston, paul-graham, y-combinator, feminism, yc, essay&lt;/p&gt;

&lt;h2 id=&#34;four-laws-of-software-economics-part-1&#34;&gt;Four Laws Of Software Economics (Part 1)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@RichMironov/four-laws-of-software-economics-part-1-e162aa0ea9e5&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Rich Mironov on why the development team will never be big enough (because of economics, because there are more things to be done than time to do them, so we have to prioritize them) and about the communication problems between the dev team and the client(s).&lt;/p&gt;

&lt;p&gt;Also talks about the general personality of clients and devs and task prioritization&lt;/p&gt;

&lt;p&gt;Tags: exclusive-or, magical-thinking, tnstaafl, management, agile, team, capacity, death-march, estj, intp, software-economics, product-strategy, law-of-ruthless-prioritization, law, rich-mironov, slack, myers-briggs-type&lt;/p&gt;

&lt;h2 id=&#34;you-should-take-a-codecation&#34;&gt;You Should Take A Codecation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://robots.thoughtbot.com/you-should-take-a-codecation&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ben Orenstein explaining what is a codecation and what he&amp;rsquo;s done in the two codecations he&amp;rsquo;s taken.&lt;/p&gt;

&lt;p&gt;Tags: codecation, ben-orenstein, vacation, holiday, coding, shipping, in-company&lt;/p&gt;

&lt;h2 id=&#34;giving-up-on-tdd&#34;&gt;Giving Up on TDD&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://iansommerville.com/systems-software-and-technology/giving-up-on-test-first-development/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ian Sommerville about the problems he&amp;rsquo;s found while doing TDD, mainly about design, but also about being conservative in the amount of tests you allow yourself to break while refactoring.&lt;/p&gt;

&lt;p&gt;Tags: tdd, ian-sommerville, refactoring, problem, design-problem, design, giving-up-tdd&lt;/p&gt;

&lt;h2 id=&#34;giving-up-on-tdd-answer&#34;&gt;Giving Up on TDD - answer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.cleancoder.com/uncle-bob/2016/03/19/GivingUpOnTDD.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Robert C. Martin on the common issues for people adopting TDD:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Fragile Test Problem&lt;/li&gt;
&lt;li&gt;The Design Problem&lt;/li&gt;
&lt;li&gt;The Testable Design Problem&lt;/li&gt;
&lt;li&gt;The Magic Bullet Problem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article is an answer to another by Ian Sommerville.&lt;/p&gt;

&lt;p&gt;Tags: tdd, uncle-bob, robert-martin, adoption, ian-sommerville, fragile-test-problem, giving-up-tdd, design-problem, testable-design-problem, magic-bullet-problem&lt;/p&gt;

&lt;h2 id=&#34;seek-out-jobs-with-fast-learning-cycles&#34;&gt;Seek out jobs with fast learning cycles&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@sarahtavel/seek-out-jobs-with-fast-learning-cycles-f923c8d8a4be#.7bxx65a4x&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sarah Tavel on learning on the job and how fast these learning cycles can happen at companies at different stages of maturity.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So if you’re thinking of changing jobs, or taking your first, my advice: find a place with a fast learning cycle, and a steep learning curve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: learning, job, hypothesis, sarah-tavel, learning-cycle, maturity-level, learning-process, product-management&lt;/p&gt;

&lt;h2 id=&#34;clean-code-vs-implementation-patterns&#34;&gt;Clean Code Vs. Implementation Patterns&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.xebia.com/clean-code-vs-implementation-patterns/&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; of Clean Code vs Implementation Pattern books, by Vincent Partington.&lt;/p&gt;

&lt;p&gt;In it, the author explains the differences in style in both books, and how they compare to others.&lt;/p&gt;

&lt;p&gt;Tags: clean-code, implementation-patterns, comparison, book-review, book-comparison, vincent-partington&lt;/p&gt;

&lt;h2 id=&#34;stuck-in-traffic-vlog-103-new-spammer-techniques&#34;&gt;Stuck in Traffic vlog #103 - New Spammer Techniques&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.peerlyst.com/posts/stuck-in-traffic-vlog-103-new-spammer-techniques-j-wolfgang-goerlich&#34; target=&#34;_blank&#34;&gt;this vlog entry&lt;/a&gt; on machines fighting machines (exemplified with the spam producing and filtering) and how some spammers are trying more direct techniques focusing on higher-value targets, sometimes even handcrafting messages and modifying them every few units.&lt;/p&gt;

&lt;p&gt;Tags: wolfgang-goerlich, spam, vlog, spammer, machine-learning&lt;/p&gt;

&lt;h2 id=&#34;becoming-a-finisher&#34;&gt;Becoming A Finisher&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://christopherdbui.com/becoming-a-finisher/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Christopher Bui where he explains that projects that are too ambitious stall your productivity and make you lose your focus.&lt;/p&gt;

&lt;p&gt;Tags: christopher-bui, pomodoro, time-management, productivity, motivation, ambition, paul-graham, quote&lt;/p&gt;

&lt;h2 id=&#34;hanging-around-with-red-black-tree-implementations-the-beginnings&#34;&gt;Hanging around with red-black tree implementations: the beginnings&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.fraixed.es/post/hanging-around-red-black-trees-implementations/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ivan Fraixedes where he details the progress of implementing a red-black tree, and also his motivation for doing it.&lt;/p&gt;

&lt;p&gt;Tags: ivan-fraixedes, red-black-tree, abstract-data-structure, adt, deliberate-practice, pet-project&lt;/p&gt;

&lt;h2 id=&#34;some-tools-for-faster-blogging-in-octopress&#34;&gt;Some Tools for Faster Blogging in Octopress&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://dgmstuart.github.io/blog/2015/03/27/some-tools-for-faster-blogging-in-octopress/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; for tips and tricks on how to blog faster with octopress. Written by Duncan Stuart.&lt;/p&gt;

&lt;p&gt;Tags: duncan-stuart, blog, improvement, meta, octopress, tip-and-trick&lt;/p&gt;

&lt;h2 id=&#34;the-veil-of-ignorance&#34;&gt;The veil of ignorance&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mrmrs.io/writing/2016/03/23/the-veil-of-ignorance/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Adam Morse on how not being on the top of the skills performance can affect your design and your user experience. Also, references the concept of &amp;ldquo;The Veil of Ignorance&amp;rdquo;, a concept by John Rawls.&lt;/p&gt;

&lt;p&gt;Tags: john-rawls, veil-of-ignorance, user-experience, design&lt;/p&gt;

&lt;h2 id=&#34;to-smile-again-recovering-from-the-paralysis-of-burnout&#34;&gt;To Smile Again &amp;ndash; Recovering from the paralysis of burnout&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://m.signalvnoise.com/to-smile-again-ae0ba9f2198c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jamis Buck on his story of burnout, what symptoms had on him and how he got out of it.&lt;/p&gt;

&lt;p&gt;Tags: burnout, jamis-buck, psychology, productivity, personal, story, analogy&lt;/p&gt;

&lt;h2 id=&#34;beyond-email-could-startup-slack-change-the-way-you-work&#34;&gt;Beyond email: could startup Slack change the way you work?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.theguardian.com/technology/2016/mar/25/slack-butterfield-emoji-chat-nasa-harvard-silicon-valley&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on Slack&amp;rsquo;s office culture, with their diversity, policies and values after a high people growth in a short period of time. By Jemima Kiss&lt;/p&gt;

&lt;p&gt;Tags: culture, office-culture, slack, jemima-kiss&lt;/p&gt;

&lt;h2 id=&#34;slack-work-this-way&#34;&gt;Slack: Work This Way&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@iaintait/slack-work-this-way-9221284472dd&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, a response to my above read, about the office culture at Slack.&lt;/p&gt;

&lt;p&gt;Tags: iain-tait, response, slack, office-culture&lt;/p&gt;

&lt;h2 id=&#34;bem-101&#34;&gt;BEM 101&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://css-tricks.com/bem-101/&#34; target=&#34;_blank&#34;&gt;this introduction&lt;/a&gt; to a CSS style called Block, Element, Modifier methodology (BEM).&lt;/p&gt;

&lt;p&gt;In it,&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;a block is a top-level abstraction of a new component&lt;/li&gt;
&lt;li&gt;Child items, or elements, can be placed inside and these are denoted by two underscores following the name of the block [&amp;hellip;].
modifiers can manipulate the block so that we can theme or style that particular component without inflicting changes on a completely unrelated module. This is done by appending two hyphens to the name of the block [&amp;hellip;].&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;By Joe Richardson, Robin Rendle et al.&lt;/p&gt;

&lt;p&gt;Tags: joe-richardson, robin-rendle, bem, css, css-methodology, introduction, css-architecture, sass&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Structured Design: Fundamentals of a Discipline of Computer Program and Systems Design by Yourdon and Constantine.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in January 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</link>
      <pubDate>Fri, 01 Jan 2016 16:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</guid>
      <description>

&lt;h2 id=&#34;test-cases-in-inner-classes-with-junit&#34;&gt;Test cases in inner classes with JUnit&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/8758294/test-cases-in-inner-classes-with-junit&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt; in stackoverflow about nested test runners in JUnit&lt;/p&gt;

&lt;p&gt;Tags: junit, stackoverflow, answer, nested-runner&lt;/p&gt;

&lt;h2 id=&#34;recording-a-great-coding-screencast&#34;&gt;Recording a Great Coding Screencast&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://egghead.io/articles/recording-a-great-coding-screencast&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by John Lindquist where he explains how he sets up the recording environment for egghead.&lt;/p&gt;

&lt;p&gt;Tags: john-lindquist, record, screencast, egghead, code-screencast, record-video, video&lt;/p&gt;

&lt;h2 id=&#34;react-testing-course&#34;&gt;React Testing Course&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://egghead.io/lessons/react-testing-jsx-error-diffs&#34; target=&#34;_blank&#34;&gt;the full course&lt;/a&gt; by Trevor D. Miller on how to test react components and the libraries to make it possible.&lt;/p&gt;

&lt;p&gt;Tags: trevor-miller, online-course, screencast, mooc, react, flux, egghead&lt;/p&gt;

&lt;h2 id=&#34;what-is-functional-programming&#34;&gt;What Is Functional Programming?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jenkster.com/2015/12/what-is-functional-programming.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kris Jenkins where the author describes functional programming from an input &amp;amp; output point of view.&lt;/p&gt;

&lt;p&gt;Describes state of the system (maybe global or local) is input &amp;amp; output of the function&lt;/p&gt;

&lt;p&gt;Produced state changes are called side effects. the author calls the state inputs as &amp;ldquo;side causes&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Side effects and causes are called complexity iceberg, as they are not visible under the water level (surface)&lt;/p&gt;

&lt;p&gt;Also what a pure function is: one with no side causes or side effects; e.g., all its inputs are declared inputs (i.e., parameters) and all outputs are declared outputs (i.e., return value).&lt;/p&gt;

&lt;p&gt;notes on jobbing programmer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.safaribooksonline.com/library/view/becoming-a-better/9781491905562/ch32.html&#34; target=&#34;_blank&#34;&gt;at Becoming a Better Programmer&lt;/a&gt;, by Pete Goodliffe&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://books.google.es/books?id=P-09CgAAQBAJ&amp;amp;pg=PA67&amp;amp;lpg=PA67&amp;amp;dq=%22jobbing+programmer%22&amp;amp;source=bl&amp;amp;ots=U6Gvi9OSda&amp;amp;sig=J4qWDUtnk768SMjAK3yuEeWUv5Y&amp;amp;hl=es&amp;amp;sa=X&amp;amp;ved=0ahUKEwjz58K615DKAhUFVRQKHfyhAZAQ6AEIOTAE#v=onepage&amp;amp;q=%22jobbing%20programmer%22&amp;amp;f=false&#34; target=&#34;_blank&#34;&gt;at Mastering Julia&lt;/a&gt;, by Malcolm Sherrington&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://joshsymonds.com/blog/2013/11/03/what-makes-a-good-programmer-good/&#34; target=&#34;_blank&#34;&gt;at What Makes a Good Programmer Good?&lt;/a&gt; by Josh Symonds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: kris-jenkins, functional-programming, input, output, function, complexity-iceberg, pure-function, impure-function, side-effect, side-cause&lt;/p&gt;

&lt;h2 id=&#34;which-programming-languages-are-functional&#34;&gt;Which Programming Languages Are Functional?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jenkster.com/2015/12/which-programming-languages-are-functional.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kris Jenkins where the author analyses languages, determining whether they are functional or not.&lt;/p&gt;

&lt;p&gt;Describes how functional languages deal with side effects and side causes, and to identify them (was also explained in part one&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;

&lt;!--
    FOOTNOTES are at the beginning
--&gt;

&lt;p&gt;Tags: kris-jenkins, functional-programming, side-effect, side-cause, comparison, haskell, clojure, python, perl, javascript, java, map, reduce, hof, scala, moc&lt;/p&gt;

&lt;h2 id=&#34;argument-from-the-real-world&#34;&gt;Argument from the &amp;ldquo;Real World&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ronjeffries.com/xprog/articles/argument-from-the-real-world/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ron Jeffries that dismantles the &amp;ldquo;real world&amp;rdquo;, as an excuse to use good practices: as in &amp;ldquo;we could use that, but we live in the real world&amp;rdquo;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] our job is to create the “real world” and not to imagine that our present situation is the only situation there is&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is exactly our day to day task, to imagine a real world solution to present problems, maybe involving software in between.&lt;/p&gt;

&lt;p&gt;Can&amp;rsquo;t we do this for product and team management?&lt;/p&gt;

&lt;p&gt;Tags: ron-jeffries, agile, scrum, tdd, bdd, incremental-iterative-development, product-management, team-management&lt;/p&gt;

&lt;h2 id=&#34;self-contained-systems&#34;&gt;Self-Contained Systems&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/rstrangh/self-contained-systems-1&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about a self-contained system (SCS), an architecture choice to split monolithic systems in parts. It includes the use of microservices in the business logic to solve domain specific problems. Written by Roman Stranghöner&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;development, operation and maintenance [&amp;hellip;] by a single team&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: big-bang-release, roman-stranghoner, self-contained-system, scs, microservice, monolith, monolithic-system, architecture&lt;/p&gt;

&lt;h2 id=&#34;what-makes-a-good-programmer-good&#34;&gt;What Makes a Good Programmer Good?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://joshsymonds.com/blog/2013/11/03/what-makes-a-good-programmer-good/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Josh Symonds on the characteristics that differentiate a good programmer from the jobbing programmers, the list of skills to be a good programmer.&lt;/p&gt;

&lt;p&gt;Explains what factors are related and not related to being a good one&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;knowing that most programming problems have already been solved. You have to know where to look for the solution&lt;/li&gt;
&lt;li&gt;not to be afraid to dig deep into problems: detect a problem and be eager to solve it; figure out what is wrong&lt;/li&gt;
&lt;li&gt;go to the source: use the source as a fact, as analysis needs to be based on facts, not beliefs&lt;/li&gt;
&lt;li&gt;just do it: to be driven to act&lt;/li&gt;
&lt;li&gt;instinctively tackle problems head-on, grabbing the bull by the horns instead of waiting for it to be solved automagically; start solving the problem&lt;/li&gt;
&lt;li&gt;excited about grabbing problems, about facing the cutting edge&lt;/li&gt;
&lt;li&gt;taking the time to reflect and understand it before moving one to the next one&lt;/li&gt;
&lt;li&gt;communicate well: succintly and eloquently expressing your thoughts. The author thinks this might be the most important aspect of all.&lt;/li&gt;
&lt;li&gt;to be truly caring about what you do: not just a job, but a hobby, an interest, even a fascination; great programmers are always programming&lt;/li&gt;
&lt;li&gt;thinking of programming of a way to shape the world, not just a money-making activity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: jobbing-programmer, good-programmer, career, career-management, skill, josh-symonds, quote&lt;/p&gt;

&lt;h2 id=&#34;the-best-programming-language-or-how-to-stop-worrying-and-love-the-code&#34;&gt;The Best Programming Language (or How to Stop Worrying and Love the Code)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.fourthbit.com/2014/03/01/the-best-programming-language-or-how-to-stop-worrying-and-love-the-code&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Álvaro Castro-Castilla analysing different programming languages and what to choose each of them.&lt;/p&gt;

&lt;p&gt;Tags: alvaro-castro-castilla, programming-language, language, analysis, comparison&lt;/p&gt;

&lt;h2 id=&#34;tomates-en-el-campo&#34;&gt;Tomates en el campo&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.presionblogosferica.com/2011/02/20/tomates-en-el-campo/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ángel Medinilla, about how to cultivate teams, instead of creating or building them. Talks about the mandatory conditions, necessary factors and how to enable it, not guaranteeing success.&lt;/p&gt;

&lt;p&gt;Tags: angel-medinilla, team-management, spanish, team, analogy&lt;/p&gt;

&lt;h2 id=&#34;default-constructors-in-java&#34;&gt;Default constructors in Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/17068389/default-constructors-in-java&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt; in stackoverflow about extending a java class that has a private constructor.&lt;/p&gt;

&lt;p&gt;Tags: stackoverflow, answer, java, constructor, syntax&lt;/p&gt;

&lt;h2 id=&#34;what-s-so-great-about-reducers&#34;&gt;What&amp;rsquo;s So Great About Reducers?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.guillermowinkler.com/blog/2013/12/01/whats-so-great-about-reducers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Guillermo Winkler explaining reducers, a type of divide and conquer strategy clojure.&lt;/p&gt;

&lt;p&gt;Tags: guillermo-winkler, reducer, clojure, parallelism, concurrency&lt;/p&gt;

&lt;h2 id=&#34;don-t-use-slack&#34;&gt;Don’t use Slack?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/hacker-daily/don-t-use-slack-8e70452f3eed&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Christian Heilmann about the relation between open / closed software and accessibility.&lt;/p&gt;

&lt;p&gt;Tags: slack, christian-heilmann, accessibility, open-source, propietary-software, closed-source&lt;/p&gt;

&lt;h2 id=&#34;towards-an-understanding-of-technical-debt&#34;&gt;Towards an understanding of technical debt&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@kellan/towards-an-understanding-of-technical-debt-ae0f97cc0553&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kellan Elliott-McCrea about some definitions of technical debt and why taking care of it matters for the future.&lt;/p&gt;

&lt;p&gt;Talks about the way of inheriting projects by other teams and the paradox of &amp;ldquo;investing more time to fix the problem than originally invested in coding it.&amp;rdquo; Also about judgement.&lt;/p&gt;

&lt;p&gt;I find it related to the &amp;ldquo;theory building&amp;rdquo; by Naur.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are at least 5 distinct things we mean we say “technical debt”.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Maintenance work: buying breathing room&lt;/li&gt;
&lt;li&gt;Features of the codebase that resist change&lt;/li&gt;
&lt;li&gt;Operability choices that resist change&lt;/li&gt;
&lt;li&gt;Code choices that suck the will to live&lt;/li&gt;
&lt;li&gt;Dependencies that resist upgrading&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: kellan-elliott-mccrea, kellan, technical-debt, list, definition, quote&lt;/p&gt;

&lt;h2 id=&#34;lifetimes-of-cryptographic-hash-functions&#34;&gt;Lifetimes of cryptographic hash functions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://valerieaurora.org/hash.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Valerie Aurora where she explains the lifetimes of cryptographic hash functions up to 2012.&lt;/p&gt;

&lt;p&gt;Tags: hash-function, valerie-aurora&lt;/p&gt;

&lt;h2 id=&#34;collisions-for-hash-functions-md4-md5-haval-128-and-ripemd&#34;&gt;Collisions for Hash Functions - MD4, MD5, HAVAL-128 and RIPEMD&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://eprint.iacr.org/2004/199.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; that explains some collisions found for MD4, MD5, HAVAL-128 and RIPEMD. By Xiaoyun Wang, Dengguo Feng, Xuejia Lai, Hongbo Yu.&lt;/p&gt;

&lt;p&gt;Tags: collision, hash-function, xiaoyun-wang, dengguo-feng, xuejia-lai, hongbo-yu, paper&lt;/p&gt;

&lt;h2 id=&#34;the-future-is-parallel-what-s-a-programmer-to-do&#34;&gt;The future is parallel: What&amp;rsquo;s a programmer to do?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://groups.csail.mit.edu/mac/users/gjs/6.945/readings/MITApril2009Steele.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Guy Steele about the differences in linear vs parallel computing and about the old habits that we still have.&lt;/p&gt;

&lt;p&gt;Some quotes:&lt;/p&gt;

&lt;h3 id=&#34;motivation&#34;&gt;Motivation&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Good sequential code minimizes total number of operations.

&lt;ul&gt;
&lt;li&gt;Clever tricks to reuse previously computed results.&lt;/li&gt;
&lt;li&gt;Good parallel code often performs redundant operations to reduce communication.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Good sequential algorithms minimize space usage.

&lt;ul&gt;
&lt;li&gt;Clever tricks to reuse storage.&lt;/li&gt;
&lt;li&gt;Good parallel code often requires extra space to permit temporal decoupling.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Sequential idioms stress linear problem decomposition.

&lt;ul&gt;
&lt;li&gt;Process one thing at a time and accumulate results.&lt;/li&gt;
&lt;li&gt;Good parallel code usually requires multiway problem decomposition and multiway aggregation of results.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;a-new-mindset&#34;&gt;A New Mindset&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;DO loops are so 1950s! (Literally: Fortran is now 50 years old.)&lt;/li&gt;
&lt;li&gt;So are linear linked lists! (Literally: Lisp is now 50 years old.)&lt;/li&gt;
&lt;li&gt;Java-style iterators are so last millennium!&lt;/li&gt;
&lt;li&gt;Even arrays are suspect!&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;As soon as you say &lt;code&gt;first, SUM = 0&lt;/code&gt; you are hosed. Accumulators are BAD.&lt;/li&gt;
&lt;li&gt;If you say, “process subproblems in order,” you lose.&lt;/li&gt;
&lt;li&gt;The great tricks of the sequential past DON’T WORK.&lt;/li&gt;
&lt;li&gt;The programming idioms that have become second nature to us as everyday tools DON’T WORK.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;the-parallel-future&#34;&gt;The Parallel Future&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;We need new strategies for problem decomposition.&lt;/li&gt;
&lt;li&gt;Data structure design/object relationships&lt;/li&gt;
&lt;li&gt;Algorithmic organization&lt;/li&gt;
&lt;li&gt;Don’t split a problem into “the first” and “the rest.”&lt;/li&gt;
&lt;li&gt;Do split a problem into roughly equal pieces. Then figure out how to combine general subsolutions.&lt;/li&gt;
&lt;li&gt;Often this makes combining the results a bit harder.&lt;/li&gt;
&lt;li&gt;We need programming languages and runtime implementations that support parallel strategies and hybrid sequential/parallel strategies.&lt;/li&gt;
&lt;li&gt;We must learn to manage new space-time tradeoffs&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A program organized according to linear problem decomposition principles can be really hard to parallelize.&lt;/li&gt;
&lt;li&gt;A program organized according to parallel problem decomposition principles is easily run either in parallel or sequentially, according to available resources.&lt;/li&gt;
&lt;li&gt;The new strategy has costs and overheads. They will be reduced over time but will not disappear.&lt;/li&gt;
&lt;li&gt;In a world of parallel computers of wildly varying sizes, this is our only hope for program portability in the future.&lt;/li&gt;
&lt;li&gt;Better language design can encourage better parallel programming.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: representation, computation, catamorphism, list, associativity
commutativity, idempotency, abstract-data-type, slide, operator, mapreduce, mindset, comparison, parallel, guy-steele,  linear-computing, parallel-computing&lt;/p&gt;

&lt;h2 id=&#34;surviving-being-senior-tech-management&#34;&gt;Surviving being senior (tech) management.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@kellan/surviving-being-senior-tech-management-aa6654efd027&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kellan Elliott-McCrea about the basic things to do as management to retain the best performance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;exercise&lt;/li&gt;
&lt;li&gt;someone to talk to&lt;/li&gt;
&lt;li&gt;discuss with peers, in petit commité&lt;/li&gt;
&lt;li&gt;personal mastery project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: kellan-elliott-mccrea, kellan, list, management, tip, exercise, pet-project&lt;/p&gt;

&lt;h2 id=&#34;you-don-t-need-more-free-time&#34;&gt;You Don’t Need More Free Time&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.nytimes.com/2016/01/10/opinion/sunday/you-dont-need-more-free-time.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the quality of life, work-life balance by Cristobal Young on why the time where we have more fun is spent together, in company.&lt;/p&gt;

&lt;p&gt;Tags: cristobal-young, time-management, work-life-balance&lt;/p&gt;

&lt;h2 id=&#34;taking-longer-to-reach-the-top-has-its-benefits&#34;&gt;Taking Longer to Reach the Top Has Its Benefits&lt;/h2&gt;

&lt;p&gt;​I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/2015/12/taking-longer-to-reach-the-top-has-its-benefits&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains how having work life balance and preventing burn out syndrome, aided by a patient career, can help with reaching a higher destination on your career. By Karen Firestone&lt;/p&gt;

&lt;p&gt;Tags: career-management, patience, burnout, burn-out, ceo, karen-firestone, professional-career, improvement&lt;/p&gt;

&lt;h2 id=&#34;all-bugs-lead-to-rome&#34;&gt;All bugs lead to Rome&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@nickbaum/all-bugs-lead-to-rome-505a1205bb9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains how the author tracks down a bug present in mail communication, just for a handful of client. By Nick Baum&lt;/p&gt;

&lt;p&gt;Tags: track-down, bug, defect, mailgun, rot13, nick-baum&lt;/p&gt;

&lt;h2 id=&#34;design-patterns-coming-full-circle&#34;&gt;Design Patterns — Coming Full Circle&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/swlh/design-patterns-coming-full-circle-d8292e261dc6&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains what a design pattern is, where does it come from, the figure of Christopher Alexander and the architecture design patterns. By Jen Carlile&lt;/p&gt;

&lt;p&gt;Tags: design-pattern, christopher-alexander, jen-carlile, comparison, example, proxy, command, observer&lt;/p&gt;

&lt;h2 id=&#34;react-performance&#34;&gt;React + Performance = ?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://aerotwist.com/blog/react-plus-performance-equals-what/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Paul Lewis comparing the performance and developer experience of react.js and vanilla js.&lt;/p&gt;

&lt;p&gt;Conclusion: under his measurements, react is too slow once the amount of elements is big on mobile devices&lt;/p&gt;

&lt;p&gt;Tags: paul-lewis, comparison, javascript, react, mobile, perfomance, jsperf, js-perf, vanilla-javascript&lt;/p&gt;

&lt;h2 id=&#34;full-speed-then-stop-gracefully&#34;&gt;Full speed, then stop, gracefully&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://sethgodin.typepad.com/seths_blog/2015/12/full-speed-then-stop.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about how to end professional relationships with an employer or a team.&lt;/p&gt;

&lt;p&gt;Makes an analogy to the hockey sport attitude: &amp;ldquo;full speed, then stop&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: seth-godin, professional, employer, team-management, team, analogy&lt;/p&gt;

&lt;h2 id=&#34;por-qué-tendrás-que-facturar-55-000-para-cobrar-una-nómina-de-26-000&#34;&gt;Por qué tendrás que facturar 55.000€ para cobrar una nómina de 26.000€&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive1.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=7e79a27689&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; by David Bonilla on why freelancers need to bill more to clients to achieve the same (economic) results as being hired by a company.&lt;/p&gt;

&lt;p&gt;Tags: david-bonilla, bonilista, freelancer, contractor, employee&lt;/p&gt;

&lt;h2 id=&#34;principles-of-microservices&#34;&gt;Principles Of Microservices&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://vimeo.com/131632250&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Sam Newman on microservices at the NDC 2015 at Oslo&lt;/p&gt;

&lt;p&gt;Describes a microservice as a small, autonomous services that work together, modelled around a business domain&lt;/p&gt;

&lt;p&gt;Microservices can mix technology, persistence stack, idioms, options&lt;/p&gt;

&lt;p&gt;reference to the twelve factors (by heroku).&lt;/p&gt;

&lt;p&gt;At a client:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Design and delivery practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;standard http/rest&lt;/li&gt;
&lt;li&gt;encapsulate legacy&lt;/li&gt;
&lt;li&gt;eliminate integration databases&lt;/li&gt;
&lt;li&gt;consolidate and cleanse data&lt;/li&gt;
&lt;li&gt;published integration model&lt;/li&gt;
&lt;li&gt;small independent devices&lt;/li&gt;
&lt;li&gt;continous deployment&lt;/li&gt;
&lt;li&gt;minimal customization of COTS/SAAS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Architectural principles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reduce inertia&lt;/li&gt;
&lt;li&gt;eliminate accidential complexity&lt;/li&gt;
&lt;li&gt;consistent interfaces and data flows&lt;/li&gt;
&lt;li&gt;no silver bullets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Strategic goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;enable scalable businesses&lt;/li&gt;
&lt;li&gt;support entry into new markets&lt;/li&gt;
&lt;li&gt;support innovation in existing markets&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Principles of microservices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;modelled around a business domain&lt;/li&gt;
&lt;li&gt;culture of automation&lt;/li&gt;
&lt;li&gt;hide implementation details&lt;/li&gt;
&lt;li&gt;decentralise all the things&lt;/li&gt;
&lt;li&gt;deploy independently&lt;/li&gt;
&lt;li&gt;consumer first&lt;/li&gt;
&lt;li&gt;isolate failure&lt;/li&gt;
&lt;li&gt;highly observable&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;p&gt;the business domain changes more slowly. find these boundaries (reference to IDDD)&lt;/p&gt;

&lt;p&gt;bounded contexts is about concepts which are shared and others who are hidden&lt;/p&gt;

&lt;p&gt;consumer driven contracts as a way to express to consumer expectations, written as tests. this is a high-trust pattern (requires it). reduces end to end testing, considerably. Using tools as &lt;a href=&#34;http://github.com/realestate&#34; target=&#34;_blank&#34;&gt;pact&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;parallel change for endpoints (or APIs) for avoiding lock step release (expand contract pattern). high cost to change an API: apply upfront thought to it.&lt;/p&gt;

&lt;p&gt;explains about a case writing a strangler application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;circuit breakers&lt;/li&gt;
&lt;li&gt;one thread pool per application&lt;/li&gt;
&lt;li&gt;bulkhead downstream connections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the book &amp;ldquo;Release It!&amp;rdquo;&lt;/li&gt;
&lt;li&gt;the book &amp;ldquo;Implementing Domain-Driven Design (IDDD)&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;p&gt;correlation ids, parent and child ids
extracting information from logs (e.g., kibana, splunk, new relic)
see how services connect to each other based on logs instead of based on documentation&lt;/p&gt;

&lt;p&gt;Tags: lock-step-release, autonomy, sam-newman, consumer-driven-contract, team, zookeper, etcd, consul, service-discovery, distributed-consensus, talk, ndc, humane-registry, bulkhead-pattern, circuit-breaker&lt;/p&gt;

&lt;h2 id=&#34;the-website-obesity-crisis&#34;&gt;The Website Obesity Crisis&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://idlewords.com/talks/website_obesity.htm&#34; target=&#34;_blank&#34;&gt;this transcription&lt;/a&gt; of &lt;a href=&#34;http://www.webdirections.org/blog/the-website-obesity-crisis/&#34; target=&#34;_blank&#34;&gt;this presentation&lt;/a&gt; about the increase of weight of websites and how this connects with new needs for automation and other services. How the solution is to keep the pages lightweight and open for everybody to use and learn; without invading our privacy. By Maciej Ceglowski&lt;/p&gt;

&lt;p&gt;Tags: obesity, fat-page, slide, transcription, slide-transcription, maciej-ceglowski, simplicity, speed&lt;/p&gt;

&lt;h2 id=&#34;command-line-tools-can-be-235x-faster-than-your-hadoop-cluster&#34;&gt;Command-line tools can be 235x faster than your Hadoop cluster&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://aadrake.com/command-line-tools-can-be-235x-faster-than-your-hadoop-cluster.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how using command-line based (&lt;code&gt;find&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;) can have a better performance as compared to Hadoop for a specific case, which is analyzing 2 million chess games. By Adam Drake&lt;/p&gt;

&lt;p&gt;Tags: adam-drake, chess, comparison, performance, cli-commands, unix, nix, hadoop, awk&lt;/p&gt;

&lt;h2 id=&#34;the-serializable-isolation-level&#34;&gt;The Serializable Isolation Level&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://sqlperformance.com/2014/04/t-sql-queries/the-serializable-isolation-level&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Paul White about the serializable isolation level and how it is implemented in some databases.&lt;/p&gt;

&lt;p&gt;Tags: serializable, isolation level, paul-white, oracle, mssql, database, sql&lt;/p&gt;

&lt;h2 id=&#34;academic-writing-with-markdown-pandoc-and-emacs&#34;&gt;Academic Writing With Markdown, Pandoc and Emacs&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://milinda.svbtle.com/academic-writing-with-markdown-pandoc-and-emacs&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Milinda Pathirage that explains an alternative way of writing LaTeX in a user-friendly manner, writing markdown then converting it to the output format (he provides &lt;a href=&#34;https://gist.github.com/milinda/d9272e67711d324f18ba&#34; target=&#34;_blank&#34;&gt;such a script&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Tags: latex, milinda-pathirage, academia, research, paper, markdown, script&lt;/p&gt;

&lt;h2 id=&#34;rest-ddd-layers-jsf-microservices-sizing-a-umejug-conversation&#34;&gt;Rest, DDD, layers, JSF, microservices sizing a Umejug conversation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;http://www.adam-bien.com/roller/abien/entry/rest_ddd_layers_jsf_a&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Adam Bien on topics related to microservices and architecture. Discusses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What do you think a typical web application should look like? How should it be built?&lt;/li&gt;
&lt;li&gt;When using REST, which level of REST is appropriate when, is HATEOAS something to strive for, how to implement it?&lt;/li&gt;
&lt;li&gt;Which patterns do you recommend, hexagonal architecture, layers, &amp;hellip;?&lt;/li&gt;
&lt;li&gt;What do you think of the DDD strategic and tactical patterns?&lt;/li&gt;
&lt;li&gt;Microservices vs right-sized services, is transactions over several services always a bad idea?&lt;/li&gt;
&lt;li&gt;When use JSF? Is it still useful?&lt;/li&gt;
&lt;li&gt;Entity-Control-Boundary Pattern (ECB) (around &lt;a href=&#34;https://youtu.be/VkcLpRs0i0g?t=995&#34; target=&#34;_blank&#34;&gt;16:37&lt;/a&gt;). &lt;a href=&#34;http://www.cs.sjsu.edu/~pearce/modules/patterns/enterprise/ecb/ecb.htm&#34; target=&#34;_blank&#34;&gt;More info&lt;/a&gt; on the pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: hateoas, rest, microservice, pattern, architecture, umejug, hexagonal-architecture, ddd, adam-bien, ecb-pattern, mvc-pattern&lt;/p&gt;

&lt;h2 id=&#34;how-to-go-remote&#34;&gt;How To Go Remote&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://workdifferent.com/how-to-remote/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sebastian Kade that explains how to go remote: where the possibility of working anywhere is a luxury, even if it is in an office.&lt;/p&gt;

&lt;p&gt;Explains the case of Automattic, some examples of communication, culture. Suggests using some tools to accomplish this cultural change.&lt;/p&gt;

&lt;p&gt;Tags: remote-work, sebastian-kade, remote, work, asynchronous-communication, communication, automattic, tool, culture, team-management&lt;/p&gt;

&lt;h2 id=&#34;why-your-company-should-have-a-creed&#34;&gt;Why Your Company Should Have a Creed&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ma.tt/2011/09/automattic-creed/&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Matt Mullenweg about the importance of having a company creed (a belief system, ethos), which ideally would be shared by the colleagues. These should be the values that help deciding, when in doubt, so everyone is aligned.&lt;/p&gt;

&lt;p&gt;At Automattic, this is theirs (as of September 19th, 2011):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I will never stop learning. I won’t just work on things that are assigned to me. I know there’s no such thing as a status quo. I will build our business sustainably through passionate and loyal customers. I will never pass up an opportunity to help out a colleague, and I’ll remember the days before I knew everything. I am more motivated by impact than money, and I know that Open Source is one of the most powerful ideas of our generation. I will communicate as much as possible, because it’s the oxygen of a distributed company. I am in a marathon, not a sprint, and no matter how far away the goal is, the only way to get there is by putting one foot in front of another every day. Given time, there is no problem that’s insurmountable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: quote, matt-mullenweg, automattic, creed, ethos, learning, team-management, startup, communication, essay&lt;/p&gt;

&lt;h2 id=&#34;mob-programming-the-unruly-experience&#34;&gt;Mob Programming: The Unruly Experience&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://wirfs-brock.com/blog/2015/06/05/mob-programming/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Rebecca Wirfs-Brock on mob programming and the experience report (+ &lt;a href=&#34;http://www.xp2015.org/wp-content/uploads/2015/06/TH2.3_Wilson.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;) at the company called Unruly.&lt;/p&gt;

&lt;p&gt;She explains what works for them and what does not.&lt;/p&gt;

&lt;p&gt;Also, she makes a difference on complex vs complicated work:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;complex work (where there is the potential for errors) over complicated work (where the solution is known, but is merely time consuming)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Explains some characteristics of learning organizations:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Teams in learning organizations perform ongoing experiments. While they settle on a core set of practices, they also try to build upon them. They keep innovating, improving, and reflecting. And how they work continues to evolve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: learning, learning-organization, xp, rebecca-wirfs-brock, mob-programming, pair-programming, complex-work, complicated-work, experience-report, unruly, team-management, team-building, team-dysfunction, comparison&lt;/p&gt;

&lt;h2 id=&#34;what-you-re-hiding-from-when-you-constantly-check-your-phone&#34;&gt;What You’re Hiding from When You Constantly Check Your Phone&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/2016/01/what-youre-hiding-from-when-you-constantly-check-your-phone&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Charlotte Lieberman where she explains the technology-stress paradox and the fact of replacing one addiction with another, as some addictions are more socially than others.&lt;/p&gt;

&lt;p&gt;Explains that the constant connection to social media allow us to avoid ourselves, and the connection to mindfulness.&lt;/p&gt;

&lt;p&gt;On the paradox:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;technology-stress paradox: we share the desire for greater freedom from our devices, and yet that very freedom itself causes anxiety&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the work-life balance:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;work-life balance [is]  [&amp;hellip;] about noticing those moments in which you really don&amp;rsquo;t want to deal with yourself&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: charlotte-lieberman, paradox, quote, social-media, mindfulness, technology-stress-paradox, stress, addiction, time-management&lt;/p&gt;

&lt;h2 id=&#34;testing-myth-1-writing-tests-slows-you-down&#34;&gt;Testing myth #1: Writing tests slows you down&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://arhohuttunen.fi/testing/testing-myth-1-writing-tests-slows-you-down/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Arho Huttunen on an excuse to not test: there is no time.&lt;/p&gt;

&lt;p&gt;In the article, he explains the false assumptions based on that reason and the gains (short term and long term) from doing it.&lt;/p&gt;

&lt;p&gt;Tags: arho-huttunen, test, excuse&lt;/p&gt;

&lt;h2 id=&#34;becodeweek-by-josé-manuel-beas&#34;&gt;BeCodeWeek by José Manuel Beas&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jmbeas.es/category/becodeweek/&#34; target=&#34;_blank&#34;&gt;this category of posts&lt;/a&gt; by José Manuel Beas about his BeCodeWeek, a desk-surfing experience at BeCode.&lt;/p&gt;

&lt;p&gt;Analyses facts and publishes one entry per day detailing his activities.&lt;/p&gt;

&lt;p&gt;Tags: becodeweek, jmbeas, jose-manuel-beas, desk-surfing, experience, experience-report, analysis&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;code&gt;What Is Functional Programming?&lt;/code&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;many of these fragments are quotes or paraphrased quotes
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in December 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</link>
      <pubDate>Wed, 02 Dec 2015 09:50:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</guid>
      <description>

&lt;h2 id=&#34;ruby-equality-and-object-comparison&#34;&gt;Ruby Equality And Object Comparison&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.skorks.com/2009/09/ruby-equality-and-object-comparison/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, written by Alan Skorkin, that explains equality comparisons in ruby:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;equal? is reference equality&lt;/li&gt;
&lt;li&gt;== is value equality&lt;/li&gt;
&lt;li&gt;eql? is value and type equality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: ruby, comparison, equality, object, reference, alan-skorkin&lt;/p&gt;

&lt;h2 id=&#34;software-folklore&#34;&gt;Software Folklore&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.thoughtworks.com/insights/blog/software-folklore&#34; target=&#34;_blank&#34;&gt;this PechaKucha&lt;/a&gt; by Chris Ford on what are laws and how they relate to creating software. Also talks on what could be an analogy to software creation (says not science, not engineering)&lt;/p&gt;

&lt;p&gt;Tags: folklore, chris-ford, analogy, computer-science, pechakucha, software-engineering, software-creation, law&lt;/p&gt;

&lt;h2 id=&#34;3-things-java-programmers-can-steal-from-clojure&#34;&gt;3 Things Java Programmers Can Steal from Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.lispcast.com/3-things-java-can-steal-from-clojure&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Normand, where he explains 3 clojure things that can be applied to your day to day java:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Persistent Data Structures&lt;/li&gt;
&lt;li&gt;Software Transactional Memory&lt;/li&gt;
&lt;li&gt;Extensible Data Notation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tags: clojure, java, eric-normand, stm, edn&lt;/p&gt;

&lt;h2 id=&#34;2-features-of-clojure-editors-professionals-won-t-do-without&#34;&gt;2 Features of Clojure Editors Professionals Won&amp;rsquo;t Do Without&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.lispcast.com/clojure-editors&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Normand, where he explains the most necessary features for a clojure editor:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;REPL Integration&lt;/li&gt;
&lt;li&gt;Structural Editing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tags: clojure, java, eric-normand, stm, edn&lt;/p&gt;

&lt;h2 id=&#34;how-to-read-more-books&#34;&gt;How to read more books&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://verraes.net/2012/12/how-to-read-more-books/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mathias Verraes on tips to read more books:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Negative things to stop doing&lt;/li&gt;
&lt;li&gt;Positive things to start doing&lt;/li&gt;
&lt;li&gt;Habits to form&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: mathias-verraes, reading, book&lt;/p&gt;

&lt;h2 id=&#34;effective-learning-strategies-for-programmers&#34;&gt;Effective Learning Strategies for Programmers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://akaptur.com/blog/2015/10/10/effective-learning-strategies-for-programmers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Allison Kaptur on fixed vs growth mindset and the need for having the latter for being a programmer.&lt;/p&gt;

&lt;p&gt;Especially interesting is the provided example of the confusion in the documentation, that can hinder productivity&lt;/p&gt;

&lt;p&gt;(Note: this entry is also present in this same month)&lt;/p&gt;

&lt;p&gt;Tags: allison-kaptur, fixed-mindset, growth-mindset, research, learning-strategy, recurse-center, carol-dweck, mindset&lt;/p&gt;

&lt;h2 id=&#34;code-a-fully-functional-web-app-in-14-days-challenge-accepted&#34;&gt;Code a fully-functional web app in 14 days… - Challenge Accepted&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@OggimusPrime/code-a-fully-functional-web-app-in-14-days-e247f536772d&#34; target=&#34;_blank&#34;&gt;this experience report&lt;/a&gt; on how Ryan Haase and Benjamin Hoffman built an MVP in 14 days. They describe their stack choices, gotchas and key points.&lt;/p&gt;

&lt;p&gt;Tags: ryan-haase, benjamin-hoffman, mvp, angular, firebase, challenge&lt;/p&gt;

&lt;h2 id=&#34;writing-clear-code-not-clever-code&#34;&gt;Writing-Clear-Code, Not-Clever-Code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve-read &lt;a href=&#34;https://medium.com/@mikesherov/writing-clear-code-not-clever-code-d6b90353a3c5&#34; target=&#34;_blank&#34;&gt;this-article&lt;/a&gt; by-Mike-Sherov-where-he-explains-the-reflection-he-did-since-his-team-members-were-asking-too-much-about-his-code. His-conclusion-was-to-stop-reducing-the-size-of-the-code-to-improve-readability.&lt;/p&gt;

&lt;p&gt;Tags: mike-sherov, clean-code,clear-code, clever-code, reflection, team, code&lt;/p&gt;

&lt;h2 id=&#34;en-vez-de-un-scrum-por-proyecto-mejor-un-scrum-por-equipo&#34;&gt;En vez de “un Scrum por proyecto” mejor un “Scrum por equipo”&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javiergarzas.com/2015/12/alejate-del-concepto-proyecto-si-quieres-usar-bien-scrum-22-adaptar-scrum-segun-cada-proyecto.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; where Javier Garzás explains scrum by teams or by projects and why the former should be preferred (in Spanish).&lt;/p&gt;

&lt;p&gt;Tags:  javier-garzas, scrum, project-management, team, agile&lt;/p&gt;

&lt;h2 id=&#34;application-gateways-an-example-in-clojure&#34;&gt;Application gateways: an example in Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.obliquo.eu/post/134421923177/application-gateways-an-example-in-clojure&#34; target=&#34;_blank&#34;&gt;this example&lt;/a&gt; that Cristobal Garcia prepared for me after asking for it at the local Barcelona Software Craftsmanship community (Many thanks!).&lt;/p&gt;

&lt;p&gt;He describes what an application gateway is, giving an example in clojure. In this case, the application gateway is used to cache and forward/deny requests to another webservice.&lt;/p&gt;

&lt;p&gt;Tags: cristobal-garcia, application-gateway, clojure, example, level-7-firewall, barcelona-software-craftsmanship, scbcn, gift&lt;/p&gt;

&lt;h2 id=&#34;habits-for-effective-refactoring&#34;&gt;Habits For Effective Refactoring&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=THw8t7ePlsc&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Jason Gorman about techniques for effective and sustainable refactoring. Among them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;check the tests, the coverage to make sure that the refactored code has a good safety net&lt;/li&gt;
&lt;li&gt;set a refactoring goal: decide what you want to refactor at this time and when you&amp;rsquo;ll be done&lt;/li&gt;
&lt;li&gt;know your code smells&lt;/li&gt;
&lt;li&gt;only refactor on green&lt;/li&gt;
&lt;li&gt;use automated refactoring steps whenever possible: for the benefits of transactionability and undo are huge and the risk of messing it up decreases&lt;/li&gt;
&lt;li&gt;commit after achieving the refactoring goal: allows to create a checkpoint to revert to&lt;/li&gt;
&lt;li&gt;bottle the code smells for faster/better learning (in the commit message, he uses a hashtag for searching)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: jason-gorman, refactoring, video, technique, refactor, tutorial, code-smell&lt;/p&gt;

&lt;h2 id=&#34;key-to-oeis-org-poster-n-15&#34;&gt;Key to &amp;ldquo;OEIS.org&amp;rdquo; Poster, n. 15&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://oeisf.org/Poster15a_key.pdf&#34; target=&#34;_blank&#34;&gt;the 15th &amp;ldquo;poster and its key&amp;rdquo;&lt;/a&gt; by the OEIS, published by N. J. A. Sloane.&lt;/p&gt;

&lt;p&gt;Tags: sloane, oeis, poster-and-key, neil-sloane&lt;/p&gt;

&lt;h2 id=&#34;the-clojure-style-guide&#34;&gt;The Clojure Style Guide&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/bbatsov/clojure-style-guide&#34; target=&#34;_blank&#34;&gt;this style guide&lt;/a&gt; to clojure, by Bozhidar Batsov&lt;/p&gt;

&lt;p&gt;Tags: bozhidar-batsov, clojure, style-guide&lt;/p&gt;

&lt;h2 id=&#34;marick-s-midje-information&#34;&gt;Marick&amp;rsquo;s Midje information&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marick/Midje/wiki/Writing-your-own-checkers&#34; target=&#34;_blank&#34;&gt;Custom checkers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marick/Midje/wiki/Two-words-you-need-to-know&#34; target=&#34;_blank&#34;&gt;Domain concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marick/Midje/wiki/Top-down-testing&#34; target=&#34;_blank&#34;&gt;Top-down testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marick/Midje/wiki/Nested-checkers&#34; target=&#34;_blank&#34;&gt;Nested checkers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;clusterware-11gr2-setting-up-an-active-passive-failover-configuration&#34;&gt;Clusterware 11gR2 – Setting up an Active/Passive failover configuration&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blogs.oracle.com/xpsoluxdb/entry/clusterware_11gr2_setting_up_an_activepassive_failover_configuration&#34; target=&#34;_blank&#34;&gt;this how-to guide&lt;/a&gt; by Gilles Haro on how to create an Active/Passive failover configuration for Oracle.&lt;/p&gt;

&lt;p&gt;Tags: failover, high-availability, oracle, gilles-haro, active-passive, database&lt;/p&gt;

&lt;h2 id=&#34;old-stuff-that-rocks&#34;&gt;Old stuff that rocks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://wincent.com/blog/old-stuff-that-rocks&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of old technologies that still rock, according to Greg Hurrell.&lt;/p&gt;

&lt;p&gt;Tags: list, old-stuff, greg-hurrell&lt;/p&gt;

&lt;h2 id=&#34;do-not-underestimate-credentials-leaks&#34;&gt;Do not underestimate credentials leaks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/ChALkeR/notes/blob/master/Do-not-underestimate-credentials-leaks.md&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that describes how credentials are usually accidentally leaked and a guide on what to do about it. By Сковорода Никита Андреевич.&lt;/p&gt;

&lt;p&gt;Tags: credential, leak, guide, how-to&lt;/p&gt;

&lt;h2 id=&#34;clojure-for-the-brave-and-true-chapter-8-writing-macros&#34;&gt;Clojure for the brave and true: chapter 8 - Writing Macros&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.braveclojure.com/writing-macros&#34; target=&#34;_blank&#34;&gt;this chapter&lt;/a&gt; from Daniel Higginbotham about macros in clojure. In it, he explains common gotchas (e.g., double execution, variable capture), splicing, quoting and unquoting.&lt;/p&gt;

&lt;p&gt;Tags: daniel-higginbotham, clojure, macro, chapter, quoting, unquoting, splicing&lt;/p&gt;

&lt;h2 id=&#34;the-telescoping-constructor-anti-pattern&#34;&gt;The Telescoping Constructor (Anti)Pattern&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.captaindebug.com/2011/05/telescoping-constructor-antipattern.html#.ViF57eztmkp&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Roger Hughes on the telescoping constructor, with the example in java. The discussion is whether to apply this or not and whether this is a pattern or an anti-pattern&lt;/p&gt;

&lt;p&gt;Tags: roger-hughes, telescoping-constructor, java, pattern, antipattern&lt;/p&gt;

&lt;h2 id=&#34;ruby-for-newbies-testing-with-rspec&#34;&gt;Ruby for Newbies: Testing with Rspec&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://code.tutsplus.com/tutorials/ruby-for-newbies-testing-with-rspec--net-21297&#34; target=&#34;_blank&#34;&gt;this tutorial&lt;/a&gt; on how to make write tests with RSpec in Ruby. Written by Andrew Burgess&lt;/p&gt;

&lt;p&gt;Tags: andrew-burgess, ruby, rspec, test, tutorial&lt;/p&gt;

&lt;h2 id=&#34;ruby-dynamic-method-calling&#34;&gt;Ruby dynamic method calling&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.khd.me/ruby/ruby-dynamic-method-calling/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about dynamically calling methods and a benchmark on three ways of doing it in Ruby:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;call&lt;/li&gt;
&lt;li&gt;send&lt;/li&gt;
&lt;li&gt;eval&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: khell, metaprogramming, comparison, benchmark, ruby, evaluation, dynamic&lt;/p&gt;

&lt;h2 id=&#34;becoming-a-cto&#34;&gt;Becoming a CTO&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article []&lt;a href=&#34;https://medium.com/@juokaz/becoming-a-cto-337dc1a9c6ae&#34; target=&#34;_blank&#34;&gt;becoming-a-cto&lt;/a&gt; by Juozas Kaziukėnas about the profile and the abilities of a CTO. Talks about the limiting factors for being one (e.g., stop programming, attend many meetings) and the type of work you are supposed to do (e.g., face business people, communicate the strategy, make yourself respectable).&lt;/p&gt;

&lt;p&gt;Tags: juozas-kaziukenas, cto, career-change, technology, career, programmer, title, job&lt;/p&gt;

&lt;h2 id=&#34;4-stages-of-team-development&#34;&gt;4 Stages of Team Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?feature=player_embedded&amp;amp;v=7NouiH2ZT8w&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by the Glenn Smith &amp;ldquo;Growth Coach Houston&amp;rdquo; about the four stages of team development: forming, norming, storming, performing and how to get through them.&lt;/p&gt;

&lt;p&gt;Tags: tuckman, forming, norming, storming, performing, glenn-smith, video, team-management, team&lt;/p&gt;

&lt;h2 id=&#34;time-hacking-for-college-students&#34;&gt;Time Hacking for College Students&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://goel.io/time-hacking/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Karan Goel about techniques for finding time for important things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prioritizing&lt;/li&gt;
&lt;li&gt;waking up early&lt;/li&gt;
&lt;li&gt;automate&lt;/li&gt;
&lt;li&gt;keep learning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: karan-goel, time-management, important-vs-urgent, prioritization&lt;/p&gt;

&lt;h2 id=&#34;clojure-at-a-real-estate-portal&#34;&gt;Clojure at a Real Estate Portal&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pitheringabout.com/?p=1069&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jon Pither, where he does a post-mortem analysis of a real-estate project with a fixed deadline (TV ads) with around ten months of development time. They brought in an external company, JUXT, who with 6 seasoned developers were able to finish the project on time and on budget.&lt;/p&gt;

&lt;p&gt;Their stack was:  Ring, Compojure, Bidi, and http-kit for our Clojure web-apps, mixing in Friend and Liberator.&lt;/p&gt;

&lt;p&gt;Tags: ring, compojure, bidi, http-kit, clojure, fixed-deadline, project, success-story, post-mortem, jon-pither&lt;/p&gt;

&lt;h2 id=&#34;musing-on-tdd-impulsive-developers-and-aesthetics&#34;&gt;Musing on TDD, Impulsive Developers and Aesthetics&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Jon Pither on why TDD can be harmful sometimes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;limits the amount of lateral thinking&lt;/li&gt;
&lt;li&gt;forces a technology&lt;/li&gt;
&lt;li&gt;limits the solution space given a fixed problem space&lt;/li&gt;
&lt;li&gt;limits creativity and freedom when performing large / aggressive refactorings&lt;/li&gt;
&lt;li&gt;sterile place&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;while he agrees that can be useful sometimes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mostly in OOP&lt;/li&gt;
&lt;li&gt;to keep you on the rails and focused&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: tdd, jon-pither, senior-developer, junior-developer, aesthetics, lateral-thinking&lt;/p&gt;

&lt;h2 id=&#34;fred-george-on-programmer-anarchy&#34;&gt;Fred George On Programmer Anarchy&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.infoq.com/news/2012/02/programmer-anarchy&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Roopesh Shenoy on a talk by Fred George: &amp;ldquo;Programmer Anarchy&amp;rdquo;, where programmers make business decisions based on business metrics set by clients, among other things.&lt;/p&gt;

&lt;p&gt;Tags: roopesh-shenoy, fred-george, programmer-anarchy, analogy, anarchy, business-metric, client, agile, methodology&lt;/p&gt;

&lt;h2 id=&#34;programmer-anarchy&#34;&gt;Programmer Anarchy&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/fredgeorge/programmer-anarchy-chinese&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Fred George about programmer&amp;rsquo;s anarchy. Commented in the article above&lt;/p&gt;

&lt;p&gt;Tags: slide, fred-george, programmer-anarchy, analogy, anarchy, business-metric, client, agile, methodology&lt;/p&gt;

&lt;h2 id=&#34;what-is-programmer-anarchy-and-does-it-have-a-future&#34;&gt;What is Programmer Anarchy and does it have a future?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://martinjeeblog.com/2012/11/20/what-is-programmer-anarchy-and-does-it-have-a-future/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Martin Jee explaining what is programmer anarchy and how it compares to an agile team. Compares the division of labor structure in anarchist and agile teams, using Marxist terms.&lt;/p&gt;

&lt;p&gt;He finishes saying that what is a powerful idea in this methodology is the taking of personal responsibilities by the programmers.&lt;/p&gt;

&lt;p&gt;Tags: fred-george, programmer-anarchy, analogy, anarchy, martin-jee, agile, methodology&lt;/p&gt;

&lt;h2 id=&#34;agile-is-the-new-black&#34;&gt;Agile is the New Black&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/fredgeorge/agile-is-thenewblack&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Fred George where compares xp/agile development in 1999, 2006 and 2011.&lt;/p&gt;

&lt;p&gt;Tags: fred-george, agile, methodology, comparison, slide&lt;/p&gt;

&lt;h2 id=&#34;show-how-don-t-tell-what-a-management-style&#34;&gt;Show How, Don&amp;rsquo;t Tell What - A Management Style&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://2ndscale.com/rtomayko/2012/management-style&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ryan Tomayko about the management style they apply at github:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;instead of telling them what to do, show people how to plan, build, and ship product together.&lt;/p&gt;

&lt;p&gt;I’ve never actually told anyone what to do here. In fact, I vehemently refuse to tell people what to do. Here are just a couple reasons why:&lt;/p&gt;

&lt;p&gt;I don’t scale. If I tell someone what to do and they do it, then what? Do I have to tell them another thing to do? What happens when I have to decide what to do for 20 people?&lt;/p&gt;

&lt;p&gt;Telling people what to do is lazy. Instead, try to convince them with argument. This is how humans interact when there’s no artificial authority structure and it works great. If you can’t convince people through argument then maybe you shouldn’t be doing it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;about managers:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s often cited that GitHub doesn’t have managers. In my opinion, a better way to describe the phenomenon would be to say that everyone at GitHub is a manager&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: ryan-tomayko, management, management-style, team-management, github&lt;/p&gt;

&lt;h2 id=&#34;clojure-for-the-brave-and-true-chapter-7-clojure-alchemy-reading-evaluation-and-macros&#34;&gt;Clojure for the brave and true: chapter 7 - Clojure Alchemy: Reading, Evaluation, and Macros&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.braveclojure.com/read-and-eval/&#34; target=&#34;_blank&#34;&gt;this chapter&lt;/a&gt; from Daniel Higginbotham about the essential concepts for macros: the reader, the evaluator, their relative order and independence. How to use clojure to extend itself and an example: the thread (&lt;code&gt;-&amp;gt;&lt;/code&gt;) macro&lt;/p&gt;

&lt;p&gt;Tags: daniel-higginbotham, clojure, macro, chapter, reader, evaluator&lt;/p&gt;

&lt;h2 id=&#34;team-bus-factors-how-to-reduce-them-and-how-to-prevent-them&#34;&gt;Team Bus Factors: How to Reduce Them and How to Prevent Them&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://5whys.com/blog/team-bus-factors-how-to-reduce-them-and-how-to-prevent-them.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Roy Osherove on the bus factor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what is it&lt;/li&gt;
&lt;li&gt;how to reduce them&lt;/li&gt;
&lt;li&gt;how to prevent them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also talks about examples of bus-factor people&lt;/p&gt;

&lt;p&gt;Tags: bus-factor, roy-osherove, team-management, prevention, reduction, definition&lt;/p&gt;

&lt;h2 id=&#34;hambre-de-programar&#34;&gt;Hambre de programar&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@xav1uzz/hambre-de-programar-166aeae3b525&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; (in Spanish) by Xavi Gost where he analyses the Barcelona Software Craftsmanship 2015: the events, the relationships and the passion that it has injected to attendees&lt;/p&gt;

&lt;p&gt;Tags: xavi-gost, barcelona-software-craftsmanship, 2015, experience-report, scbcn15&lt;/p&gt;

&lt;h2 id=&#34;software-craftsmanship-barcelona-2015&#34;&gt;Software Craftsmanship Barcelona 2015&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.idealista.com/labs/blog/idealista/software-craftsmanship-barcelona-2015/&#34; target=&#34;_blank&#34;&gt;this analysis&lt;/a&gt; of the Barcelona Software Craftsmanship 2015 by the Idealista R&amp;amp;D team.&lt;/p&gt;

&lt;p&gt;Tags: jaime-perera, barcelona-software-craftsmanship, 2015, idealista, experience-report, scbcn15&lt;/p&gt;

&lt;h2 id=&#34;jvmls-2015-compilers-are-databases&#34;&gt;JVMLS 2015 - Compilers are Databases&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=48js0H6ooBY&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Martin Odersky on why compilers resemble databases and explains how a functional compiler works on the inside.&lt;/p&gt;

&lt;p&gt;Explains the notion of a Type, Reference, Symbol, Denotation (and Multi-Denotation) living in the Abstract Syntax Tree (AST)&lt;/p&gt;

&lt;p&gt;Also explains the need for a reading compiler (e.g., for quick validation in the IDE), single-pass and multi-pass compiler.&lt;/p&gt;

&lt;p&gt;They have built phases to transform the source code into bytecode, but to better use the cache locality, they programmatically mix phases using Java Reflection (metaprogramming) to traverse the tree (AST) once for these selected phases.&lt;/p&gt;

&lt;p&gt;Tags: type, reference, symbol, denotation, abstract-syntax-tree, ast, compiler, functional-compiler, scalac, dotty, martin-odersky, analogy, database&lt;/p&gt;

&lt;h2 id=&#34;in-functional-programming-what-is-a-functor&#34;&gt;In Functional Programming, what is a functor?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/2030863/in-functional-programming-what-is-a-functor/2031421#2031421&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt; of what is a functor&lt;/p&gt;

&lt;p&gt;Tags: stack-overflow, functor, answer, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;ten-habits-of-a-good-programmer&#34;&gt;Ten Habits of a Good Programmer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://hintjens.com/blog:98&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of good habits of good programmers by Pieter Hintjens:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If it works and is still useful, don&amp;rsquo;t throw it out.&lt;/li&gt;
&lt;li&gt;Never solve the same problem twice in parallel.&lt;/li&gt;
&lt;li&gt;Solve the same problem often in serial.&lt;/li&gt;
&lt;li&gt;Write code, and repeat, until you are fluent in your language.&lt;/li&gt;
&lt;li&gt;Learn to use code generators.&lt;/li&gt;
&lt;li&gt;Work with others.&lt;/li&gt;
&lt;li&gt;Technology is a tool, not a tribal affiliation.&lt;/li&gt;
&lt;li&gt;Aim for this cycle: learn, play, work, teach.&lt;/li&gt;
&lt;li&gt;Get your edit-compile-run-fail cycles down to seconds.&lt;/li&gt;
&lt;li&gt;If you need debuggers, you&amp;rsquo;re doing it wrong.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tags: pieter-hintjens, list, habit, good-programmer&lt;/p&gt;

&lt;h2 id=&#34;beginning-clojure-cursive&#34;&gt;Beginning Clojure: Cursive&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://potetm.github.io/2015/10/04/beginning-clojure-cursive.html&#34; target=&#34;_blank&#34;&gt;this tutorial&lt;/a&gt; on installing Cursive, IntelliJ Idea&amp;rsquo;s plugin for working with Clojure. Written by Tim Pote&lt;/p&gt;

&lt;p&gt;Tags: cursive, clojure, intellij-idea, plugin, tutorial, tim-pote&lt;/p&gt;

&lt;h2 id=&#34;nodejs-a-quick-optimization-advice&#34;&gt;#NodeJS : A quick optimization advice&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://top.fse.guru/nodejs-a-quick-optimization-advice-7353b820c92e&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the limit for inlining for the NodeJS optimizing compiler (Crankshaft), that includes both source code and comments. Written Julien Crouzet&lt;/p&gt;

&lt;p&gt;Tags: nodejs, comment, julien-crouzet, crankshaft, optimizer, inline, function-inline&lt;/p&gt;

&lt;h2 id=&#34;specification-pattern&#34;&gt;Specification Pattern&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Specification_pattern&#34; target=&#34;_blank&#34;&gt;this wikipedia&lt;/a&gt; page on the specification pattern&lt;/p&gt;

&lt;p&gt;Tags: eric-evans, martin-fowler, specification-pattern, pattern, design-pattern, dsl, domain-specific-language&lt;/p&gt;

&lt;h2 id=&#34;el-recruiting-está-roto-bonilista&#34;&gt;El recruiting está ROTO #Bonilista&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=539364dde4&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; where David Bonilla explains why the recruitment sector for technical people in Spain is broken. Article is in Spanish.&lt;/p&gt;

&lt;p&gt;Tags: david-bonilla, bonilista, recruitment, job, career&lt;/p&gt;

&lt;h2 id=&#34;bddon-t-the-practice-and-the-tools&#34;&gt;BDDon’t: The practice and the tools&lt;/h2&gt;

&lt;p&gt;​I&amp;rsquo;ve  read &lt;a href=&#34;https://www.thoughtworks.com/p2magazine/issue12/bdd-dont/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kevin Dishman that explains what is BDD and how it I  usually used. Also the common downsides and what to do about it&lt;/p&gt;

&lt;p&gt;Suggests using a faster tool, lower on the test pyramid that can bring the same business value at a lower cost&lt;/p&gt;

&lt;p&gt;Tags: kevin-dishman, downside, test-pyramid, bdd, test, unit-test, functional-test, acceptance-test&lt;/p&gt;

&lt;h2 id=&#34;cómo-usan-git-en-github-scbcn&#34;&gt;Cómo usan #Git en GitHub – #scbcn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;http://codely.tv/screencasts/como-usan-git-en-github/&#34; target=&#34;_blank&#34;&gt;this screencast&lt;/a&gt; on the talk we organized yesterday about github.&lt;/p&gt;

&lt;p&gt;Tags: javier-ferrer, codely-tv, codely, event, scbcn, alain-helaili, screencast&lt;/p&gt;

&lt;h2 id=&#34;trying-to-speed-up-binary-search&#34;&gt;Trying to speed up Binary Search&lt;/h2&gt;

&lt;p&gt;I have read &lt;a href=&#34;http://databasearchitects.blogspot.com.es/2015/09/trying-to-speed-up-binary-search.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how the binary search is implemented and what other algorithms are possible to speed up the search in large datasets, especially common in databases.&lt;/p&gt;

&lt;p&gt;Tags: optimization, branch-misprediction, clang, o3, gpp, c, database, binary-search, thomas-neumann&lt;/p&gt;

&lt;h2 id=&#34;scrum-3-0-and-organization-4-0-impressions-from-a-great-evening-with-boris-gloger-at-immobilienscout24&#34;&gt;Scrum 3.0 and Organization 4.0 - impressions from a great evening with Boris Gloger at ImmobilienScout24&lt;/h2&gt;

&lt;p&gt;I have read &lt;a href=&#34;http://www.ontheagilepath.net/2015/12/scrum-30-and-organization-40.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by  Sebastian Radics that compares the different ways of doing scrum: 1 2 3, most comments on other strategies or management methodologies like no estimates.&lt;/p&gt;

&lt;p&gt;Compares the importance of focusing on the process or on the final product, the role of the scrum master, the role of the product owner, and the team itself.&lt;/p&gt;

&lt;p&gt;Tags: management, agile, scrum, team-management, sebastian-radics, scrum30&lt;/p&gt;

&lt;h2 id=&#34;trucos-para-trabajar-con-equipos-remotos&#34;&gt;Trucos para trabajar con equipos remotos&lt;/h2&gt;

&lt;p&gt;I have read &lt;a href=&#34;http://thinkingwithyou.com/2015/11/trucos-para-trabajar-con-equipos-remotos/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Israel Alcázar (Spanish). Explains how this company organized their product development process. explains tools for working with a remote team.&lt;/p&gt;

&lt;p&gt;give three pieces of advice for improving it, and further resources to read&lt;/p&gt;

&lt;p&gt;Tags: remote, remote-first, isra-alcazar, israel-alcazar, team-management, advice&lt;/p&gt;

&lt;h2 id=&#34;introducing-new-open-source-tools-for-the-elixir-community&#34;&gt;Introducing new open-source tools for the Elixir community&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://engineering.pinterest.com/blog/introducing-new-open-source-tools-elixir-community&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Steve Cohen that explains what the actor model is and what is the spirit of the elixir language: user friendlier syntax for erlang&lt;/p&gt;

&lt;p&gt;They also explain that they have implemented and ad server and access control using elixir. For this matter, they rely on two tools that are now open source&lt;/p&gt;

&lt;p&gt;Tags: elixir, microsecond, latency, erlang, actor-model, language-syntax, open-source, steve-cohen&lt;/p&gt;

&lt;h2 id=&#34;cuánto-pagas-por-tus-herramientas-de-trabajo&#34;&gt;¿Cuánto pagas por tus herramientas de trabajo?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=12ed2d6eb0&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; about how much programmers invest in buying their tools (and honing them). By David Bonilla, in Spanish&lt;/p&gt;

&lt;p&gt;Tags: david-bonilla, bonilista, tool, investment&lt;/p&gt;

&lt;h2 id=&#34;clojure-at-a-bank-freeing-the-rules&#34;&gt;Clojure at a Bank – Freeing the Rules&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pitheringabout.com/?p=830&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jon Pither about converting OO business rules into Clojure and using the homoiconicity for increasing the power: when code is data, the rules themselves become searchable (using a search engine), visualizable and analyzable. This wasn&amp;rsquo;t possible before when code was not data.&lt;/p&gt;

&lt;p&gt;They have also build further tools to analyze rules with larger sets of data, rather than unit tests, to see if they conflict among each other.&lt;/p&gt;

&lt;p&gt;Tags: jon-pither, clojure, homoiconicity, code=data, data=code, rule, rule-engine, bank, business-rule, code-analysis&lt;/p&gt;

&lt;h2 id=&#34;five-reasons-to-learn-clojure-and-emacs-together&#34;&gt;Five reasons to learn Clojure and Emacs together&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pitheringabout.com/?p=849&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jon Pither advocating the learning of Clojure and Emacs at the same time. The main reasons are: liberation, change, support, simplicity, mass adoption.&lt;/p&gt;

&lt;p&gt;Cites that being hard to learn a new editor is a good idea to separate those who are willing to invest the time in learning (both an editor and a new language) from those who don&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Tags: clojure, emacs, jon-pither, learning, liberation, change, support, simplicity, mass-adoption&lt;/p&gt;

&lt;h2 id=&#34;pull-requests-maintainers-won-t-hate&#34;&gt;Pull Requests Maintainers Won&amp;rsquo;t Hate&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this &lt;a href=&#34;https://www.booleanknot.com/blog/2013/09/07/pull-requests.html&#34; target=&#34;_blank&#34;&gt;list of tips&lt;/a&gt; by James Reeves on improving the pull requests
Tags: pull-request, james-reeves, tip, list&lt;/p&gt;

&lt;h2 id=&#34;how-to-get-rich-in-tech-guaranteed&#34;&gt;How to get rich in tech, guaranteed.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://startupljackson.com/post/135800367395/how-to-get-rich-in-tech-guaranteed&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that describes what is a way to make good money and retire rich why working for a company.&lt;/p&gt;

&lt;p&gt;It also explains about entering the startup market, what questions should be asked, what&amp;rsquo;s your real value, what are the benefits of doing it, known limitations and other questions&lt;/p&gt;

&lt;p&gt;Tags: startup, career, career-management, work, professional-career, value, money&lt;/p&gt;

&lt;h2 id=&#34;modern-perl-4th-edition-a-review&#34;&gt;Modern Perl 4th edition, a review&lt;/h2&gt;

&lt;p&gt;I have read &lt;a href=&#34;http://perltricks.com/article/205/2015/12/21/Modern-Perl-4th-edition--a-review&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains how this new book covers the syntax, idioms and the rest of the Perl language.&lt;/p&gt;

&lt;p&gt;In this 4th edition, parts of  the text have completely been rewritten, a New formatting applied to ease and improve the reading comprehension&lt;/p&gt;

&lt;p&gt;Tags: book-review, review, david-farrell, perl, reedition, modern-perl&lt;/p&gt;

&lt;h2 id=&#34;8-characteristics-of-agile-software-developers&#34;&gt;8 Characteristics of Agile Software Developers&lt;/h2&gt;

&lt;p&gt;​I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@pm_loop/8-characteristics-of-successful-agile-software-developers-ab2c43abb959&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that describes what characteristics are common in companies practicing an agile methodology, as revealed by a study (that even though it&amp;rsquo;s not cited, can be tracked back to &lt;a href=&#34;http://productdevelopmentsuccess.com/study&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Suggests ideas for teams that change in a changing environment and what to do about it.&lt;/p&gt;

&lt;p&gt;Written by Keela Robison.&lt;/p&gt;

&lt;p&gt;Tags: keela-robison, agile, team-management&lt;/p&gt;

&lt;h2 id=&#34;this-is-why-you-never-end-up-hiring-good-developers&#34;&gt;This is why you never end up hiring good developers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://qz.com/258066/this-is-why-you-dont-hire-good-developers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains what to look for in a strong, stronger, strongest (software) developer&lt;/p&gt;

&lt;p&gt;The main idea is to find a good person that fits the job, without inflicting pain in the team morale and can learn to perform the specific tasks in the future, as (paraprasing) the pool of people that know what you need is much smaller than the people who can learn it.&lt;/p&gt;

&lt;p&gt;The article specifies what to look and not look for in a candidate.&lt;/p&gt;

&lt;p&gt;Some quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;grasp of complex topics and the ability to clearly communicate about them, which are the two jobs of the working engineer.&lt;/p&gt;

&lt;p&gt;track record of learning new skills and applying them successfully&lt;/p&gt;

&lt;p&gt;TL;DR:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Many interview techniques test skills that are at best irrelevant to real working life;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;you want somebody who knows enough to do the job right now;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;or somebody smart and motivated enough that they can learn the job quickly;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;you want somebody who keeps getting better at what they do;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;your interview should be a collaborative conversations, not a combative interrogation;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;you also want somebody who you will enjoy working with;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;it’s important to separate “enjoy working with” from “enjoy hanging out with;”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;don’t hire assholes, no matter how good they are;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if your team isn’t diverse, your team is worse than it needed to be;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;accept that hiring takes a really long time and is really, really hard.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;effective-learning-strategies-for-programmers-1&#34;&gt;Effective Learning Strategies for Programmers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve (re-)read &lt;a href=&#34;http://akaptur.com/blog/2015/10/10/effective-learning-strategies-for-programmers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Allison Kaptur on fixed vs growth mindset and the need for having the latter for being a programmer.&lt;/p&gt;

&lt;p&gt;The fixed mindset is present in the 10x-engineer, and the worshipping of heroes.&lt;/p&gt;

&lt;p&gt;It also includes a recipe for changing from a fixed-mindset to a growth-mindset.&lt;/p&gt;

&lt;p&gt;(Note: this entry is also present in this same month)&lt;/p&gt;

&lt;p&gt;Tags: allison-kaptur, fixed-mindset, growth-mindset, research, learning-strategy, recurse-center, carol-dweck, mindset, 10x-engineer, impostor-syndrome&lt;/p&gt;

&lt;h2 id=&#34;doctor-please-fix-my-agile&#34;&gt;Doctor! Please fix my agile!&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://dl.dropboxusercontent.com/u/59614769/Presentations/Doctor%20please%20fix%20my%20Agile.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Ville Törmälä on what is agile, organizational problems and the distinction between efficiency and effectiveness. Also talks about the distribution of time and the organization of the environment (what calls)&lt;/p&gt;

&lt;p&gt;Tags: slide, agile, efficiency, effectiveness, tip, organization, ville-tormala, project-thinking, team-thinking&lt;/p&gt;

&lt;h2 id=&#34;wolf-narrative-considered-harmful-also-biologically-unlikely&#34;&gt;“Wolf” narrative considered harmful (also biologically unlikely)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://laughingmeme.org/2014/09/02/wolf-narrative-considered-harmful-also-biologically-unlikely/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains what the &amp;ldquo;lone wolf&amp;rdquo; archetype is, among programmers, and possible outcomings for those profiles. Written by Kellan Elliott-McCrea.&lt;/p&gt;

&lt;p&gt;Describes some craftsmanship ideas for these roles, based on their proficiency with their tools, that will generate tools for the rest of the team and make the rest more effective. Also discusses the non-management advancement career.&lt;/p&gt;

&lt;p&gt;Tags: analogy, wolf, lone-wolf, archetype, programmer, programmer-analogy, profile, team-management, kellan-elliott-mccrea&lt;/p&gt;

&lt;h2 id=&#34;the-wolf-dictating-their-own-terms&#34;&gt;The Wolf - dictating their own terms&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://randsinrepose.com/archives/the-wolf/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Lopp about the &lt;code&gt;wolf&lt;/code&gt; position as a person or in a team. He describes their characteristics and his own experiences working with them.&lt;/p&gt;

&lt;p&gt;Tags: management, wolf, team-management, analogy, michael-lopp&lt;/p&gt;

&lt;h2 id=&#34;volkswagen-and-cheating-software&#34;&gt;Volkswagen and Cheating Software&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.schneier.com/crypto-gram/archives/2015/1015.html#1&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Bruce Schneier on cheating software, using as an example the Volkswagen case, but especially centered on software that is made do cheat in an undetectable fashion. Or that could be attributed to a programming mistake. The later, says the author, is so common that there could be already intentional or unintentional errors hiding cheating.&lt;/p&gt;

&lt;p&gt;The author cites the Internet of Things of new opportunities for companies to use / produce cheating software and about a possible solution: transparency and oversight of the software that more and more reigns our lives.&lt;/p&gt;

&lt;p&gt;Other (opinion) articles I&amp;rsquo;ve read on the issue are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nytimes.com/2015/09/24/opinion/volkswagen-and-the-era-of-cheating-software.html&#34; target=&#34;_blank&#34;&gt;Volkswagen and the Era of Cheating Software&lt;/a&gt; by Zeynep Tufekci&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fusion.net/story/202867/volkswagen-software-deception-ai/&#34; target=&#34;_blank&#34;&gt;Volkswagen isn’t the first company to use software to break the law and it won’t be the last&lt;/a&gt; by Daniela Hernandez&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slate.com/articles/technology/future_tense/2015/09/volkswagen_s_cheating_emissions_software_and_the_threat_of_black_boxes.html&#34; target=&#34;_blank&#34;&gt;Harry Potter and the Mysterious Defeat Device&lt;/a&gt; by James Grimmelmann&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: cryptogram, bruce Schneier, volkswagen, mistake, quality, transparency, oversight, iot, essay, cheating, cheating software&lt;/p&gt;

&lt;h2 id=&#34;please-java-do-finally-support-multiline-string-literals&#34;&gt;Please, Java. Do Finally Support Multiline String Literals&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jooq.org/2015/12/29/please-java-do-finally-support-multiline-strings/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining the need for multi-line string literal in java.&lt;/p&gt;

&lt;p&gt;Tags: java, syntax, string, feature, multi-line string&lt;/p&gt;

&lt;h2 id=&#34;the-silver-bullet-syndrome&#34;&gt;The Silver Bullet Syndrome&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=3wyd6J3yjcs&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Hadi Hariri about chasing the next silver bullet.&lt;/p&gt;

&lt;p&gt;He explains this with javascript and nodejs, but it could be exemplified with other technologies / promises as well.&lt;/p&gt;

&lt;p&gt;Note: ABC stands for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A = address&lt;/li&gt;
&lt;li&gt;B = binding&lt;/li&gt;
&lt;li&gt;C = contract&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: hadi-hariri, silver-bullet, talk, devoxx&lt;/p&gt;

&lt;h2 id=&#34;writing-clean-tests-small-is-beautiful&#34;&gt;Writing Clean Tests – Small Is Beautiful&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.petrikainulainen.net/programming/testing/writing-clean-tests-small-is-beautiful/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Petri Kainulainen on writing BDD style tests with JUnit in java.&lt;/p&gt;

&lt;p&gt;There is &lt;a href=&#34;https://github.com/NitorCreations/CoreComponents/tree/master/junit-runners&#34; target=&#34;_blank&#34;&gt;a tool&lt;/a&gt;, created by Nitor Creations that allows you to write nested classes in JUnit, allowing for test specialization.&lt;/p&gt;

&lt;p&gt;Tags: junit, runner, bdd, test, nitor-creations, petri-kainulainen, tdd&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brown-bag session: Refactoring legacy code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</link>
      <pubDate>Tue, 23 Jun 2015 19:19:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</guid>
      <description>&lt;p&gt;Today I have facilitated a brown bag session about refactoring legacy code applications, as this is the case with one of the applications we maintain and add new features to.&lt;/p&gt;

&lt;p&gt;The contents of the session:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Briefly exposing the problem to the team, me taking the role of the Product Owner (PO)&lt;/li&gt;
&lt;li&gt;Ask the dev team to add an easy feature&lt;/li&gt;
&lt;li&gt;Do it without tests, as it was so simple that they thought they could do it (using mob programming)&lt;/li&gt;
&lt;li&gt;Ask if they were satisfied by the patch / fix. Answer was yes.&lt;/li&gt;
&lt;li&gt;Point out that there are regressions in the few lines of the patch&lt;/li&gt;
&lt;li&gt;Repeat the session, starting with adding tests to guarantee the behavior is preserved  (using mob programming)&lt;/li&gt;
&lt;li&gt;Explain the technique of the golden master&lt;/li&gt;
&lt;li&gt;Some more programming, until they start to see the light at the end of the tunnel&lt;/li&gt;
&lt;li&gt;Small retrospective, including:

&lt;ul&gt;
&lt;li&gt;asking them their feelings when dealing with legacy code. The contents of this is pretty similar to the concepts that appear in the retrospectives, when talking about the legacy project / submodule.&lt;/li&gt;
&lt;li&gt;what could I improve as facilitator or for the structure of the session
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The repo can be found &lt;a href=&#34;https://github.com/alvarogarcia7/trivia-kata-spike&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I prepared a small script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
  git add --all&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  git commit --all -m &lt;span class=&#34;s2&#34;&gt;&amp;quot;save process - uknown state&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  sleep 120&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;that saves the process and the progress, without disturbing the attendees. This allows you to follow the progress without any distraction. This idea was taken from a similar one from  &lt;a href=&#34;http://twitter.com/@xav1uzz&#34; target=&#34;_blank&#34;&gt;Xavi Gost&lt;/a&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This same idea was also cited by someone else, if I recall correctly by Sandro Mancuso, saying that it would be a good idea to have a background git repository while working. IntelliJ IDEA already does something similar (and saves the events, e.g., when the tests are run, either red or green)&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Cannot find the source, it was about having a script to commit automatically each time you run the tests; if it was red while refactoring, it would do git checkout (to revert); Was related to the noFlopSquad
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Experience report: Test-driven development intensive, by Jason Gorman</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/12/experience-report-test-driven-development-intensive-by-jason-gorman/</link>
      <pubDate>Sun, 12 Apr 2015 20:13:45 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/12/experience-report-test-driven-development-intensive-by-jason-gorman/</guid>
      <description>

&lt;p&gt;This is an experience report on &lt;a href=&#34;http://twitter.com/@jasongorman&#34; target=&#34;_blank&#34;&gt;Jason Gorman&lt;/a&gt;&amp;rsquo;s &amp;ldquo;&lt;a href=&#34;http://www.codemanship.co.uk/tdd.html&#34; target=&#34;_blank&#34;&gt;Test-driven development intensive workshop&lt;/a&gt;&amp;rdquo; on the April 11th, 2015&lt;/p&gt;

&lt;p&gt;I attended this training in the &lt;a href=&#34;http://www.grenfell-housing.co.uk/&#34; target=&#34;_blank&#34;&gt;Greenfell housing &amp;amp; training&lt;/a&gt; in South Wimbledon, London SW19 1JZ. The training spanned from 10:00 to 17:00 with a half an hour for lunch plus three or four 10-15 minute pauses. (7 - ,5 - 4 * 12/60 = ~5.7hours = 5 hours 45 minutes)&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;There were 23 of us, including me. We spent some half hour introducing ourselves before the training started. I remember about a tester that came to the workshop &amp;ldquo;wanting to know more about this testing methodology&amp;rdquo;. Jason&amp;rsquo;s answer was priceless: &amp;ldquo;I&amp;rsquo;m sorry but you came to the wrong place: this is not about testing&amp;rdquo;.
&lt;!--
(See more on this topic [here][tdd-is-not-a-good-name])
--&gt;&lt;/p&gt;

&lt;p&gt;At 10:00 sharp, he started a set of slides explaining what TDD is about, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;productivity:

&lt;ul&gt;
&lt;li&gt;no company is willing to give you a &amp;ldquo;get out of jail free&amp;rdquo; card to get out of the productivity zone&lt;/li&gt;
&lt;li&gt;a drop in the productivity, at least for the first weeks&lt;/li&gt;
&lt;li&gt;you have to find a time slot in your schedule to practice TDD, otherwise it&amp;rsquo;s like learning to swim while crossing the Atlantic Ocean&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You have to feel uncomfortable not doing TDD&lt;/li&gt;
&lt;li&gt;triangulation:

&lt;ul&gt;
&lt;li&gt;how each problem is different&lt;/li&gt;
&lt;li&gt;you can only learn it by doing&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;TDD styles:

&lt;ul&gt;
&lt;li&gt;Chicago style by Kent Beck. Reference book would be &amp;ldquo;&lt;a href=&#34;http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530&#34; target=&#34;_blank&#34;&gt;TDD by example&lt;/a&gt;&amp;ldquo;&lt;/li&gt;
&lt;li&gt;London school or Mockist style by Steve Freeman and Nat Pryce. Reference book would be &lt;a href=&#34;http://www.growing-object-oriented-software.com/&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Growing object oriented software, guided by tests&lt;/a&gt;&amp;ldquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;13 good habits for a sustainable test-driven development way&lt;/li&gt;
&lt;li&gt;The basic TDD cycle:

&lt;ul&gt;
&lt;li&gt;an executable specification, encoded in a failing test&lt;/li&gt;
&lt;li&gt;pass the test in the simplest way&lt;/li&gt;
&lt;li&gt;refactor&lt;/li&gt;
&lt;li&gt;(talking with another attendee, he described to me a new TDD phase called redesign. Maybe another post will explain this in deeper detail level)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Some ideas about &lt;a href=&#34;http://www.extremeprogramming.org/rules/simple.html&#34; target=&#34;_blank&#34;&gt;Simple design, simple development, simplicity&lt;/a&gt; (&lt;a href=&#34;http://www.extremeprogramming.org&#34; target=&#34;_blank&#34;&gt;XP&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Shown a wrong example of mixing assertions (state) and verifications (interactions)&lt;/li&gt;
&lt;li&gt;More than one reason to go wrong makes the code non-trivial anymore. Non-trivial code requires tests&lt;/li&gt;
&lt;li&gt;You want to see the test failing for the right reason: remove / finish code that does not compile, fix null pointers, array out of bounds exceptions, etc. See it fail with &amp;ldquo;was &lt;X&gt; but expected &lt;Y&gt;&amp;rdquo; or &amp;ldquo;NoInteractionException&amp;rdquo; (hamcrest error and mockito error, respectively; both java)&lt;/li&gt;
&lt;li&gt;Duplication as a sign of design smell&lt;/li&gt;
&lt;li&gt;Process of generalizing code: discover the need for patterns&lt;/li&gt;
&lt;li&gt;The most difficult skill in TDD is refactoring [and design; note is mine]. The TDD cycle is very easy.

&lt;ul&gt;
&lt;li&gt;TDD is much more in demand than refactoring, even though the former includes the latter&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Refactor until you&amp;rsquo;re happy with the code, until you stand by it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;crc-cards&#34;&gt;CRC Cards&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&#34;http://en.wikipedia.org/wiki/Class-responsibility-collaboration_card&#34; target=&#34;_blank&#34;&gt;Class-responsibility-collaboration card&lt;/a&gt; is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;top: class name&lt;/li&gt;
&lt;li&gt;half left: responsibilities&lt;/li&gt;
&lt;li&gt;half right: collaborations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notes from the slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;each then is an outcome

&lt;ul&gt;
&lt;li&gt;do not mix outcomes and implications. An example: after winning the lottery, the money should be transferred to my bank account and I can buy a yacht. The former is an outcome (change in state) and the latter an implication (a new action that is now enabled)&lt;/li&gt;
&lt;li&gt;an outcome is mapped to an assertion, while a collaboration is mapped to an interaction (verify in mockito)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Given / When / Then is not enough to implement an executable specification. We need examples, detail&lt;/li&gt;
&lt;li&gt;OO: send messages to distribute responsibility.

&lt;ul&gt;
&lt;li&gt;A Then is an unique responsibility&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Topmost object: no one connects with it&lt;/li&gt;
&lt;li&gt;Put the work where the data is&lt;/li&gt;
&lt;li&gt;Tell, don&amp;rsquo;t ask &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; vs data driven design (tell a collaborator what to do vs ask for values and do the work yourself)&lt;/li&gt;
&lt;li&gt;You want as few interactions as possible (related to the tell, don&amp;rsquo;t ask)&lt;/li&gt;
&lt;li&gt;More objects than outcomes is a bad thing (design smell) (?)&lt;/li&gt;
&lt;li&gt;CRC is a very mechanical exercise, do not over think it&lt;/li&gt;
&lt;li&gt;Describe outcomes as changes in OO (new, destroy, relationships, modify fields / state)&lt;/li&gt;
&lt;li&gt;Continuous integration is not necessarily about shipping the code at each commit but having it shippable at each commit, as always having a product that is ready for its production phase&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;

&lt;p&gt;All exercises were done in pairs, always switching one half of the pair. He asked for someone in the pair to raise, especially if you were not a programmer (e.g., tester, manager)&lt;/p&gt;

&lt;h3 id=&#34;first-exercise-banking&#34;&gt;First exercise: Banking&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a program that is capable of transferring money from an account to another&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A chance to practice arrange, act, assert&lt;/p&gt;

&lt;p&gt;Later, he did it some live coding to develop the same kata, practicing &amp;ldquo;&lt;a href=&#34;http://www.infoq.com/presentations/TDD-as-if-You-Meant-It&#34; target=&#34;_blank&#34;&gt;TDD as if you meant it&lt;/a&gt;&amp;rdquo; (&lt;a href=&#34;https://twitter.com/keithb_b&#34; target=&#34;_blank&#34;&gt;Keith Braithwaite&lt;/a&gt;&amp;rsquo;s original idea). We discovered together the &amp;ldquo;primitive obsession&amp;rdquo; and &amp;ldquo;feature envy&amp;rdquo; smells. We tried doing as few decisions as possible.&lt;/p&gt;

&lt;h3 id=&#34;second-exercise-fibonacci-sequence-generator&#34;&gt;Second exercise: Fibonacci sequence generator&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a program that is capable of generating Fibonacci sequences, no shorter that 8 and no longer than 50&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A chance to practice baby steps.&lt;/p&gt;

&lt;p&gt;My pair and I had the chance of discovering the importance of understanding correctly the requirements before writing a line of code. Also, I learned about the different ways of doing TDD. In this case, my pair executed the tests via a main (java class) and saw the failures on the console. When proposed to do it in the JUnit runner the IDE has, he said he preferred it in his own ways.&lt;/p&gt;

&lt;p&gt;Jason did some live coding to show how he approached and triangulated this exercise.&lt;/p&gt;

&lt;p&gt;I really liked some of what he said: I like to make the API correct from the first moment so I will ask questions that are correct but only check answers for things that I have already implemented. Example:&lt;/p&gt;

&lt;p&gt;As the generated sequence can only have &lt;code&gt;8 &amp;lt;= x &amp;lt;= 50&lt;/code&gt; elements, a list returning a single element would not be correct. So&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//class FibonacciTests&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;theFirstElementIsOne&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;assertThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FibonacciSequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;third-exercise-fizzbuzz&#34;&gt;Third exercise: FizzBuzz&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a program that is capable of returning a string with all numbers less than 100 that are using the FizzBuzz pattern. This FizzBuzz pattern converts the divisors of 3 to &amp;lsquo;fizz&amp;rsquo;, divisors of 5 to &amp;lsquo;buzz&amp;rsquo; and divisors to both to &amp;lsquo;fizzbuzz&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I discovered that this FizzBuzz is a drinking game in the UK.&lt;/p&gt;

&lt;h3 id=&#34;fourth-exercise-crc-cards&#34;&gt;Fourth exercise: CRC cards&lt;/h3&gt;

&lt;p&gt;Before this exercise there was a short introduction on &lt;a href=&#34;http://en.wikipedia.org/wiki/Class-responsibility-collaboration_card&#34; target=&#34;_blank&#34;&gt;Class-responsibility-collaboration card&lt;/a&gt;, explained above&lt;/p&gt;

&lt;p&gt;Following an example about a movie library, there were six user stories, described at high level, without acceptance criteria.&lt;/p&gt;

&lt;p&gt;We had to create an acceptance criteria for this user story. Later create a set of CRC cards and finally partially implement said feature.&lt;/p&gt;

&lt;p&gt;Very interesting exercise, such a pity that there wasn&amp;rsquo;t more time to complete this exercise or see him doing it&lt;/p&gt;

&lt;h2 id=&#34;knowledge-pearls&#34;&gt;Knowledge pearls&lt;/h2&gt;

&lt;p&gt;He dropped some knowledge pearls (that I&amp;rsquo;m going to use myself):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Q: When are you done with TDD?
A: When you can not think of more tests for your suite
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Q: What do we do after TDD?
A: (No answer)
Q: Starts with &amp;quot;T&amp;quot;. Any idea?
A: Testing. Test for the purpose of testing, not TDD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Close concepts interested in responsibilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conceptual diagram and class diagram&lt;/li&gt;
&lt;li&gt;Instance diagram&lt;/li&gt;
&lt;li&gt;Knowledge map and tag cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regarding legacy code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Isolate big balls of mud into parts and test these as end-to-end. Also connected to isolating groups of nodes into the class graph&lt;/li&gt;
&lt;li&gt;Understand what the code does, not the architecture&lt;/li&gt;
&lt;li&gt;Do not use a mock to help you test legacy code, use it just as a design tool. (It might be a good idea to use it temporarily while you refactor, but remove it afterwards)&lt;/li&gt;
&lt;li&gt;Tests with mocks double down on the design: if it is broken, it will be a drag more than help&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Test on the boundaries. Many times we test in the middle of the algorithm but forget the boundaries, where many special cases hide&lt;/p&gt;

&lt;p&gt;The GOOS book is pronounced like the goose animal (&amp;ldquo;/gús/&amp;rdquo;) in English&lt;/p&gt;

&lt;p&gt;He said he never copy pastes &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This is a two day workshop condensed on a single day. It shows. In my opinion, it would be better to do fewer exercises and dig deeper in them rather than try so many approaches / exercises&lt;/li&gt;
&lt;li&gt;The CRC exercise was well thought and really massaged. It touches the right spots and makes you want to learn more about the subject&lt;/li&gt;
&lt;li&gt;Promiscuously pairing is always a good idea, as you don&amp;rsquo;t know what level have your attendees. Get stuck for the whole day with someone who has a (very) different knowledge level than you might spoil the workshop&lt;/li&gt;
&lt;li&gt;I don&amp;rsquo;t see the benefit of doing the fizzbuzz kata after having done the Fibonacci sequence one&lt;/li&gt;
&lt;li&gt;In my opinion, there were too many breaks. Doing a break in the morning (10-15 mins), lunch (30 mins) and afternoon (10-15 mins) is enough&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On a personal note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is not enough to attend the workshop. You have to take notes and study them at home later. (Thanks &lt;a href=&#34;http://spines.me&#34; target=&#34;_blank&#34;&gt;spines&lt;/a&gt; for this lesson)&lt;/li&gt;
&lt;li&gt;I really had a great time, learned a lot, even though I already know something about TDD&lt;/li&gt;
&lt;li&gt;Met very interesting people&lt;/li&gt;
&lt;li&gt;Would attend to the workshop again
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, I&amp;rsquo;d like to thank Jason and the other attendees for making this workshop possible. I had a blast there.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;As described by &lt;a href=&#34;http://martinfowler.com/bliki/TellDontAsk.html&#34; target=&#34;_blank&#34;&gt;Martin Fowler&lt;/a&gt; and the &lt;a href=&#34;https://pragprog.com/articles/tell-dont-ask&#34; target=&#34;_blank&#34;&gt;Pragmatic Bookshelf&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Copy pasting this post&amp;rsquo;s structure resulted in a wrong title that had to be fixed. Maybe the extra effort of not copy pasting has a good ROI, as long as you do not copy paste by typing the text you&amp;rsquo;re reading from somewhere else
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Open Space: Code reviews</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews/</link>
      <pubDate>Mon, 16 Mar 2015 22:44:42 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews/</guid>
      <description>

&lt;p&gt;Today we&amp;rsquo;ve discussed about code reviews on &lt;a href=&#34;http://www.meetup.com/Barcelona-Software-Craftsmanship/events/220293683/&#34; target=&#34;_blank&#34;&gt;this open space&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;

&lt;p&gt;These are my notes, in no particular order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reduce information silos all around the company, as everyone [technical] can participate in these events&lt;/li&gt;
&lt;li&gt;raise the &amp;ldquo;just arrived&amp;rdquo; people&amp;rsquo;s knowledge [Difficult to hit the ground up and running, but these code review sessions can help]&lt;/li&gt;
&lt;li&gt;invest one person as &amp;lsquo;sheriff&amp;rsquo; for the sprint: they will take care of static analysis tools (such as sonar) and continuous integration (CI; such as jenkins). They will make sure others follow the working agreements&lt;/li&gt;
&lt;li&gt;In the academic environment, some teams do share their patches via mailing lists and this makes it much slower to adapt and review changes [As compared to an on-line sharing system - like web-based interfaces to distributed version control systems] As this team doesn&amp;rsquo;t have a CI tool, they must test it / try it manually before reviewing the code.&lt;/li&gt;
&lt;li&gt;Pair programming does not remove the need for code review [This has been surfaced twice]&lt;/li&gt;
&lt;li&gt;Your work is not more important than your team members&amp;rsquo; one. [Related to not having time to code review]&lt;/li&gt;
&lt;li&gt;Do code reviews include architecture? [We&amp;rsquo;ve agreed that the architecture to some degree should be discussed before code reviews]&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Troll review&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Anyone can veto pull requests [By opening a question; do not allow for pull requests to be closed with open questions]&lt;/li&gt;
&lt;li&gt;A 15-minute time slot everyday to code review [As code hygiene; Done right after lunch,  breakfast or just before leaving, when you&amp;rsquo;re tired]&lt;/li&gt;
&lt;li&gt;Code review tasks have higher priority than other tasks [Do not take other tasks if there are code reviews to do]&lt;/li&gt;
&lt;li&gt;Code reviews put a lot of pressure so people learn and the knowledge level equalizes across the team&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;My conclusions, even though some of them were not shared by everyone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most of the people approve of code review practices: either they are doing them or are trying to apply them at their clients. (Warning: this was a code review meetup, so there&amp;rsquo;s a bias: people not interested in them won&amp;rsquo;t come). No one was against doing them.&lt;/li&gt;
&lt;li&gt;Code reviews have a cost, although it is beneficial to do them&lt;/li&gt;
&lt;li&gt;Should your teammates not want to participate in the code review after agreeing on doing them, appeal to their professionalism / accountability, then to their time (stated before), then troll them: after a few (healthy) trolling code review sessions, people will feel more comfortable reviewing and being reviewed. Special mention to Miguel who coined (?)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; the term: troll review.&lt;/li&gt;
&lt;li&gt;Great way of equalizing the (technical) knowledge level within the team&lt;/li&gt;
&lt;li&gt;Great way of reduce information silos across the whole company&lt;/li&gt;
&lt;li&gt;They can be fun if you do them properly&lt;/li&gt;
&lt;li&gt;The need for code reviews do not disappear when pair programming: as long as you have a personal attachment to the code, you might not see its defects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;your-own&#34;&gt;Your own&lt;/h2&gt;

&lt;p&gt;Should you have any conclusions to share, please add a pull request to this &lt;a href=&#34;https://github.com/alvarogarcia7/blog_source&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt; or do it as a comment.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;after searching some ten minutes on the internet, there are only a couple of questions on meta.codereview stackoverflow, but not related to this. &lt;strong&gt;Update&lt;/strong&gt;: In &lt;a href=&#34;https://twitter.com/mallyvai/status/314260072798752768&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;, Vaibhav Mallya talks about a #trollReview, related to code. So, unfortunately, Miguel, you&amp;rsquo;re not the first one. But there are fewer than 10 results on twitter.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>TDD Meetup Retrospective</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/16/tdd-meetup-retrospective/</link>
      <pubDate>Mon, 16 Mar 2015 05:42:44 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/16/tdd-meetup-retrospective/</guid>
      <description>

&lt;p&gt;Yesterday we organized a TDD meetup at the &lt;a href=&#34;http://www.fib.upc.edu/fib.html&#34; target=&#34;_blank&#34;&gt;FIB - Barcelona School of Informatics UPC&lt;/a&gt;, within &lt;a href=&#34;http://www.meetup.com/Barcelona-Software-Craftsmanship/&#34; target=&#34;_blank&#34;&gt;Barcelona Software Craftsmanship&lt;/a&gt; sponsored by the &lt;a href=&#34;http://jediupc.com/&#34; target=&#34;_blank&#34;&gt;Junior Empresa d&amp;rsquo;Informàtica&lt;/a&gt;. The meetup started at 9:00 until 18:00, with a one-hour pause in the middle.&lt;/p&gt;

&lt;h2 id=&#34;where&#34;&gt;Where&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Please make sure the meetup space (e.g., classroom, meeting room) is available and ready to be used at least 15 minutes before the meetup starts&lt;/li&gt;
&lt;li&gt;The organizer and the event host should be there in advance to prepare the physical environment (chairs, wifi, beamer, etc) as well as mentally: getting comfortable with the space, loading the presentation, prepare the speaker notes, etc.&lt;/li&gt;
&lt;li&gt;Plan for the worse and hope for the best: in this particular meetup, the beamer was not available, so the host gracefully lent us some 23 inch screen as a second monitor.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what&#34;&gt;What&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The speaker should have had already decided what they are going to cover on the meetup and not deviate much from this. Leave some empty buffer space at the end because you will cumulate some deviation during the day.&lt;/li&gt;
&lt;li&gt;Of course, have the slides ready if you plan on using them&lt;/li&gt;
&lt;li&gt;I prefer having more conversations during the meetup rather than a masterclass-style one. The organizer(s) should act as conversation moderators, often guiding the conversation where (they think) it is most useful. Sometimes, it is a good idea to interrupt the conversation when someone is getting bored or losing focus&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Be prepared to ask to your attendees what do they want: they are your target&lt;/li&gt;
&lt;li&gt;Please ask to your attendees to bring their laptop with git, dependency manager, IDE / editor, test double framework installed. Otherwise, most of the first session is invested in downloading / configuring these.&lt;/li&gt;
&lt;li&gt;Please try to be communicative / funny in some way. This makes the slides easier to understand&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;meetup-details&#34;&gt;Meetup details&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We did two sessions of slides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction to TDD&lt;/li&gt;
&lt;li&gt;TDD on a daily basis: learn TDD for a greater good&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We did three katas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LinkedList: &lt;a href=&#34;http://codekata.com/kata/kata21-simple-lists/&#34; target=&#34;_blank&#34;&gt;source&lt;/a&gt;. Originally by &lt;a href=&#34;http://twitter.com/@pragdave&#34; target=&#34;_blank&#34;&gt;Dave &amp;ldquo;Pragmatic Dave&amp;rdquo; Thomas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Password: &lt;a href=&#34;https://gist.github.com/trikitrok/c031d6b621f28b85ce0d&#34; target=&#34;_blank&#34;&gt;source&lt;/a&gt;. Taken from &lt;a href=&#34;http://twitter.com/@trikitrok&#34; target=&#34;_blank&#34;&gt;Manuel Rivero&lt;/a&gt;, also seen on a &lt;a href=&#34;http://twitter.com/@carlosble&#34; target=&#34;_blank&#34;&gt;Carlos Blé&lt;/a&gt; workshop&lt;/li&gt;
&lt;li&gt;Bank Kata: &lt;a href=&#34;https://github.com/sandromancuso/Bank-kata&#34; target=&#34;_blank&#34;&gt;source&lt;/a&gt;. Originally from &lt;a href=&#34;http://twitter.com/@sandromancuso&#34; target=&#34;_blank&#34;&gt;Sandro Mancuso&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The format was this: the first set of slides, the two first katas, some discussion, then lunch; coffee (mandatory); the second set of slides, the third kata (done by them), later done by me at the beamer, explaining the situation and my mental process.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;useful-feedback&#34;&gt;Useful feedback&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;About the event:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One 8-hour event is much more effective / efficient that 4 2-hour ones&lt;/li&gt;
&lt;li&gt;No one complained about the lack of beamer. So don&amp;rsquo;t worry too much if your host doesn&amp;rsquo;t have one, as long as everybody can get close to the (big) screen.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;About the LinkedList kata:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This, as a first TDD example was too complex. Getting into TDD with classes, and serveral functions at the same time might be difficult.&lt;/li&gt;
&lt;li&gt;Too academic. This is an example you will usually never implement yourself, as there are libraries who provide it. Therefore, not applicable.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;About the Password kata:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They graded this kata easier than the linkedList&lt;/li&gt;
&lt;li&gt;Start with this as it is only a function&lt;/li&gt;
&lt;li&gt;This has didactic value as there are some gotchas with this kata&lt;/li&gt;
&lt;li&gt;More likely to be implemented by yourself, as most systems require some kind of user authentication&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;About the Bank kata:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More resembling of a day-to-day problem&lt;/li&gt;
&lt;li&gt;This is a difficult kata if you haven&amp;rsquo;t learned about mocks / test doubles&lt;/li&gt;
&lt;li&gt;Interesting interactions between objects&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They liked both the format and the speaker (a.k.a., me)&lt;/li&gt;
&lt;li&gt;They thought this meetup was well prepared in advance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;My own feedback:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is difficult to ask the attendees to rate their own level or for you to rate it. I thought the linkedlist example would be so easy they would finish it in half the allowed time&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, but it wasn&amp;rsquo;t this way&lt;/li&gt;
&lt;li&gt;The productivity level varies hugely from person to person. There were some pairs that dug thoroughly on the problem and others who got stuck (sometimes with the language). Even though both types of pairs were working hard on the proposed problem&lt;/li&gt;
&lt;li&gt;We still haven&amp;rsquo;t solved the problem with reservations: many people book a seat on the event but later won&amp;rsquo;t come. This makes other (interested) attendees to not have a seat.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Should you want to, please share your feedback / comments via the comments section below or sending a pull request to this &lt;a href=&#34;https://github.com/alvarogarcia7/blog_source&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;a good indicator of this is body language or position and whether they are doodling on a paper sheet.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;I did prepare against this adding more possible requirements to the kata, although we finally didn&amp;rsquo;t use them
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Global Day of Code Retreat 2014</title>
      <link>https://alvarogarcia7.github.io/blog/2014/12/18/global-day-of-code-retreat-2014/</link>
      <pubDate>Thu, 18 Dec 2014 07:33:59 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2014/12/18/global-day-of-code-retreat-2014/</guid>
      <description>

&lt;p&gt;One month ago (on November 15th) I facilitated my first &lt;a href=&#34;http://globalday.coderetreat.org/&#34; target=&#34;_blank&#34;&gt;Global Day of Code Retreat&lt;/a&gt; at &lt;a href=&#34;http://www.ebayenterprise.com/contact/locations.php&#34; target=&#34;_blank&#34;&gt;eBay Enterprise International&lt;/a&gt; and had such a blast. &lt;a href=&#34;http://www.meetup.com/Agile-Barcelona-Meetup/events/218211672/&#34; target=&#34;_blank&#34;&gt;Link to the event (Spanish)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;some-thoughts&#34;&gt;Some thoughts&lt;/h2&gt;

&lt;p&gt;After a month of thinking about it, here are some thoughts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This year&amp;rsquo;s GDCR was quite different that last one&amp;rsquo;s:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It&amp;rsquo;s OK: do not strive for repeating the same each year&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Heat map (in several dimensions): TDD x language&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Usually meetups have a clear goal, for the limited amount of time they run (see another bullet point).&lt;/p&gt;

&lt;p&gt;This single goal can span across multiple skill sets (e.g., TDD and language specific), therefore we did a two-dimensional heat map: first dimension is TDD skill level and second dimension (discreet) would be language you master&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1LRmjLbvFEtqDskDwb3gVBKDfXckqDylAMJA7HB6ZLC8/edit&#34; target=&#34;_blank&#34;&gt;Example can be found here&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;As a facilitator, have a clear goal for the meetup, even though you don&amp;rsquo;t need to share it with the assistants&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Mine was to have fun and introduce some people to TDD&lt;/p&gt;

&lt;p&gt;I shared the goal with the attendants because I wanted to explain the purpose of that day to newcomers.&lt;/p&gt;

&lt;p&gt;Also, as a result of that day, I&amp;rsquo;ve discovered some very motivated people in our host (eBay). Personally, I&amp;rsquo;d like to continue doing meetups with their developers.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You need a mix of more seasoned attendants and more unexperienced ones.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This way, the knowledge is being transferred both ways; not only about the language but about strategies, patterns, shortcuts &amp;amp; editors, languages, etc&lt;/p&gt;

&lt;p&gt;If doing TDD in these events, it&amp;rsquo;s even more important to mix people, as it&amp;rsquo;s difficult for an unexperienced pair to start doing TDD for themselves.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You should only do your job as facilitator&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let others discuss, ask and answer questions. Your job should be as thin as possible. Don&amp;rsquo;t try to answer too many questions&lt;/p&gt;

&lt;p&gt;There will be attendants with more experience / expertise than you (most of them were in my case), so don&amp;rsquo;t strive to teach them but to manage the discussions to the right place&lt;/p&gt;

&lt;p&gt;Be strict about timing but find the balance. Sometimes it&amp;rsquo;s useful to invest more time (~5 minutes) to a rich discussion and then reduce the next iteration.&lt;/p&gt;

&lt;p&gt;Many people will complain about having to delete their code the first time. Explain to them that&amp;rsquo;s part of the game and don&amp;rsquo;t give in. The following iterations most of the people won&amp;rsquo;t complain anymore&lt;/p&gt;

&lt;p&gt;Last but not least, have fun!&lt;/p&gt;

&lt;h2 id=&#34;some-critiques&#34;&gt;Some critiques&lt;/h2&gt;

&lt;p&gt;We organized the event a little bit late&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The difference from last year (&lt;a href=&#34;http://www.meetup.com/Agile-Barcelona-Meetup/events/153967432/&#34; target=&#34;_blank&#34;&gt;December&lt;/a&gt;) vs this year (&lt;a href=&#34;http://www.meetup.com/Agile-Barcelona-Meetup/events/218211672/&#34; target=&#34;_blank&#34;&gt;November&lt;/a&gt;) was relevant. We were expecting to do it later so it surprised us.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Due to that, many people couldn&amp;rsquo;t come and I&amp;rsquo;m sorry for it&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We totally, definitely should do this more often.&lt;/p&gt;

&lt;p&gt;You need to reinvent yourself for every global day or people will stop coming&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>