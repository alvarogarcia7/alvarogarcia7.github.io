<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>solution on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/solution/</link>
    <description>Recent content in solution on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 May 2019 22:32:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/solution/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automatically keeping the intermediate history of your work using git</title>
      <link>https://alvarogarcia7.github.io/blog/2019/05/29/keeping-intermediate-history-work-git/</link>
      <pubDate>Wed, 29 May 2019 22:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/05/29/keeping-intermediate-history-work-git/</guid>
      <description>This is another tool for your toolbox: using git to automatically document your development process (special cases only.)
Context When I&amp;rsquo;m spiking a feature, I usually get in the zone (e.g., Csikszentmihalyi&amp;rsquo;s Flow), and I can forget my good engineering practices, searching for that desired answer. After a few of those bouts of coding, you realize you&amp;rsquo;re wandering. You circle around, get lost, get back on track, then get lost again.</description>
    </item>
    
    <item>
      <title>Questioning the existing choices</title>
      <link>https://alvarogarcia7.github.io/blog/2018/07/04/questioning-existing-choices/</link>
      <pubDate>Wed, 04 Jul 2018 07:03:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/07/04/questioning-existing-choices/</guid>
      <description>Context For a client, we have worked on a service that works with files (containing sensitive data) that get corrupted very often.
The use case is generally:
 Two/Three file opens per day One modification per 10 file opens One corruption per 100 file opens  Initial solution The initial solution was just to copy the file (file.txt) before opening, after closing. This results in two files (YYY-MM-DDTHH-mm-ss_before_file.txt, YYY-MM-DDTHH-mm-ss_after_file.txt).
As this solution quickly became unmaintainable, the client developed a solution to hash the contents of the file and to remove the duplicated files.</description>
    </item>
    
  </channel>
</rss>
