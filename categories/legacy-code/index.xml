<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Legacy Code on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/legacy-code/</link>
    <description>Recent content in Legacy Code on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Apr 2016 00:56:54 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/legacy-code/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Quote: Characterization tests</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/18/quote-characterization-tests/</link>
      <pubDate>Mon, 18 Apr 2016 00:56:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/18/quote-characterization-tests/</guid>
      <description>&lt;p&gt;In Working effectively with legacy code, Michael Feathers talks a type of tests to define or characterize the current behavior of the legacy system:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In nearly every legacy system, what the system does is more important than what it is supposed to do.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;characterization test&lt;/em&gt; is a test that characterizes the actual behavior of a piece of code. [&amp;hellip;] The test document the actual current behavior of the system. Here is a little algorithm for writing algorithm for writing characterization tests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use a piece of code in a test harness&lt;/li&gt;
&lt;li&gt;Write an assertion that you know will fail&lt;/li&gt;
&lt;li&gt;Let the failure tell you what the behavior is.&lt;/li&gt;
&lt;li&gt;Change the test so that it expects the behavior that the code produces&lt;/li&gt;
&lt;li&gt;Repeat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;M Feathers, in the chapter 13&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, section &amp;ldquo;Characterization tests&amp;rdquo; of Working effectively with legacy code. Actual page, 186.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Later on, he goes to describe them in a bigger environment:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Characterization tests record the actual behavior of a piece of code. If we find something unexpected when we write them, it pays to get some clarification. It could be a bu. That doesn&amp;rsquo;t mean that we don&amp;rsquo;t include the test in our test suite; instead, we should mark it as suspicious an find out what th effect would be of fixing it.&lt;/p&gt;

&lt;p&gt;M Feathers, in the chapter 13&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, section &amp;ldquo;Characterization tests&amp;rdquo; of Working effectively with legacy code. Actual page, 188.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Chapter 13, &amp;ldquo;I need to make a change, but I don&amp;rsquo;t know what tests to write&amp;rdquo;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Chapter 13, &amp;ldquo;I need to make a change, but I don&amp;rsquo;t know what tests to write&amp;rdquo;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Brownish Greenfield Gilded Rose Kata</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/18/brownish-greenfield-gilded-rose-kata/</link>
      <pubDate>Mon, 18 Apr 2016 00:44:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/18/brownish-greenfield-gilded-rose-kata/</guid>
      <description>

&lt;p&gt;(This formulation has been copied and adapted from &lt;a href=&#34;https://twitter.com/NotMyself&#34; target=&#34;_blank&#34;&gt;Bobby Johnson&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/TerryHughes&#34; target=&#34;_blank&#34;&gt;Terry Hughes&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://github.com/NotMyself/GildedRose&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;formulation&#34;&gt;Formulation&lt;/h2&gt;

&lt;p&gt;Hi and welcome to team Gilded Rose. As you know, we are a small inn with a prime location in a prominent city ran by a friendly innkeeper named Allison. We also buy and sell only the finest goods.&lt;/p&gt;

&lt;p&gt;Unfortunately, our goods are constantly degrading in quality as they approach their sell by date. We have a system in place that updates our inventory for us. It was developed by a no-nonsense type named Leeroy, who has moved on to new adventures.&lt;/p&gt;

&lt;p&gt;Your task is to rewrite the system using an old class, that already exists.
First an introduction to our system:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All items have a &lt;code&gt;SellIn&lt;/code&gt; value which denotes the number of days we have to sell the item&lt;/li&gt;
&lt;li&gt;All items have a &lt;code&gt;Quality&lt;/code&gt; value which denotes how valuable the item is&lt;/li&gt;
&lt;li&gt;At the end of each day our system lowers both values for every item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pretty simple, right? Well this is where it gets interesting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once the sell by date has passed, &lt;code&gt;Quality&lt;/code&gt; degrades twice as fast&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Quality&lt;/code&gt; of an item is never negative&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Aged Brie&amp;rdquo; actually increases in &lt;code&gt;Quality&lt;/code&gt; the older it gets&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Sulfuras&amp;rdquo;, being a legendary item, never has to be sold or decreases in &lt;code&gt;Quality&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Quality&lt;/code&gt; of an item is never more than 50, however &amp;ldquo;Sulfuras&amp;rdquo; is a legendary item and as such its &lt;code&gt;Quality&lt;/code&gt; is 80 and it never alters.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Backstage passes&amp;rdquo;, like aged brie, increases in &lt;code&gt;Quality&lt;/code&gt; as it&amp;rsquo;s &lt;code&gt;SellIn&lt;/code&gt; value approaches; &lt;code&gt;Quality&lt;/code&gt; increases by 2 when there are 10 days or less and by 3 when there are 5 days or less but &lt;code&gt;Quality&lt;/code&gt; drops to 0 after the concert&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Conjured&amp;rdquo; items degrade in &lt;code&gt;Quality&lt;/code&gt; twice as fast as normal items&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your task is to create the system from scratch, with only a restriction: you must use the class &lt;code&gt;Item&lt;/code&gt; that Leeroy developed. This class is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unmodifiable, if you do, a goblin in the corner who will insta-rage and one-shot you as he doesn&amp;rsquo;t believe in shared code ownership. This prohibition applies to modifying it, deleting it, adding new methods, deleting methodts, changing visibility of stuff, etc&lt;/li&gt;
&lt;li&gt;cannot be inherited, if you do, a goblin in the corner who will insta-rage and one-shot you as he doesn&amp;rsquo;t believe in code inheritance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;Item&lt;/code&gt; class can be found in many programming languages in &lt;a href=&#34;https://github.com/emilybache/GildedRose-Refactoring-Kata&#34; target=&#34;_blank&#34;&gt;Emily Bache&amp;rsquo;s repository&lt;/a&gt;. You are looking for the class / type &lt;code&gt;Item&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Happy katas and happy koding. Please be careful with the goblin!&lt;/p&gt;

&lt;h2 id=&#34;how-to-start&#34;&gt;How to start&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create a new repo&lt;/li&gt;
&lt;li&gt;Find the class &lt;code&gt;Item&lt;/code&gt; in &lt;a href=&#34;https://github.com/emilybache/GildedRose-Refactoring-Kata&#34; target=&#34;_blank&#34;&gt;this repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use TDD to develop the functionality. Remember, &lt;code&gt;Item&lt;/code&gt; will stay as it is.&lt;/li&gt;
&lt;li&gt;Have fun&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/@trikitrok&#34; target=&#34;_blank&#34;&gt;@trikitrok&lt;/a&gt; for the idea, &lt;a href=&#34;https://twitter.com/NotMyself&#34; target=&#34;_blank&#34;&gt;Bobby Johnson&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/TerryHughes&#34; target=&#34;_blank&#34;&gt;Terry Hughes&lt;/a&gt; for allowing me to copy and modify their kata.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brown-bag session: refactoring legacy code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/01/brown-bag-session-refactoring-legacy-code/</link>
      <pubDate>Wed, 01 Jul 2015 13:18:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/01/brown-bag-session-refactoring-legacy-code/</guid>
      <description>&lt;p&gt;Today I have done a brown bag session about refactoring legacy code. It includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;legacy code definition. There is no agreement about this in the team.&lt;/li&gt;
&lt;li&gt;the legacy code change algorithm (source is Feathers, Working effectively with legacy code). Plus an example about it.&lt;/li&gt;
&lt;li&gt;working with legacy code&lt;/li&gt;
&lt;li&gt;experience with it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The slides are available &lt;a href=&#34;https://alvarogarcia7.github.io/{{site.category_dir}}/../uploads/refactoring-legacy-code-slides.pdf&#34;&gt;here&lt;/a&gt; (PDF format)&lt;/p&gt;

&lt;p&gt;We also did a practical session, whose experience report is &lt;a href=&#34;../../../../2015/06/23/brown-bag-session-refactoring-legacy-code/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brown-bag session: Refactoring legacy code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</link>
      <pubDate>Tue, 23 Jun 2015 19:19:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</guid>
      <description>&lt;p&gt;Today I have facilitated a brown bag session about refactoring legacy code applications, as this is the case with one of the applications we maintain and add new features to.&lt;/p&gt;

&lt;p&gt;The contents of the session:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Briefly exposing the problem to the team, me taking the role of the Product Owner (PO)&lt;/li&gt;
&lt;li&gt;Ask the dev team to add an easy feature&lt;/li&gt;
&lt;li&gt;Do it without tests, as it was so simple that they thought they could do it (using mob programming)&lt;/li&gt;
&lt;li&gt;Ask if they were satisfied by the patch / fix. Answer was yes.&lt;/li&gt;
&lt;li&gt;Point out that there are regressions in the few lines of the patch&lt;/li&gt;
&lt;li&gt;Repeat the session, starting with adding tests to guarantee the behavior is preserved  (using mob programming)&lt;/li&gt;
&lt;li&gt;Explain the technique of the golden master&lt;/li&gt;
&lt;li&gt;Some more programming, until they start to see the light at the end of the tunnel&lt;/li&gt;
&lt;li&gt;Small retrospective, including:

&lt;ul&gt;
&lt;li&gt;asking them their feelings when dealing with legacy code. The contents of this is pretty similar to the concepts that appear in the retrospectives, when talking about the legacy project / submodule.&lt;/li&gt;
&lt;li&gt;what could I improve as facilitator or for the structure of the session
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The repo can be found &lt;a href=&#34;https://github.com/alvarogarcia7/trivia-kata-spike&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I prepared a small script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
  git add --all&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  git commit --all -m &lt;span class=&#34;s2&#34;&gt;&amp;quot;save process - uknown state&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  sleep 120&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;that saves the process and the progress, without disturbing the attendees. This allows you to follow the progress without any distraction. This idea was taken from a similar one from  &lt;a href=&#34;http://twitter.com/@xav1uzz&#34; target=&#34;_blank&#34;&gt;Xavi Gost&lt;/a&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This same idea was also cited by someone else, if I recall correctly by Sandro Mancuso, saying that it would be a good idea to have a background git repository while working. IntelliJ IDEA already does something similar (and saves the events, e.g., when the tests are run, either red or green)&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Cannot find the source, it was about having a script to commit automatically each time you run the tests; if it was red while refactoring, it would do git checkout (to revert); Was related to the noFlopSquad
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Self-study in June 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/</link>
      <pubDate>Wed, 03 Jun 2015 13:13:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/</guid>
      <description>

&lt;p&gt;Update: I&amp;rsquo;ve grouped all small posts related to the self-study from June 2015
into a single post&lt;/p&gt;

&lt;h2 id=&#34;le-monitoring-de-flux-par-l-exemple&#34;&gt;Le monitoring de flux par l’exemple&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.octo.com/le-monitoring-de-flux-par-lexemple/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about monitoring, in the way of &amp;ldquo;by example&amp;rdquo;, by Cédrick Lunven and Julien Kirch (French)&lt;/p&gt;

&lt;h2 id=&#34;the-first-micro-service-architecture&#34;&gt;The First Micro-service Architecture&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.cleancoder.com/uncle-bob/2015/05/28/TheFirstMicroserviceArchitecture.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about microservices and how they were implemented many years ago by Robert C. Martin&lt;/p&gt;

&lt;h2 id=&#34;how-i-learned-to-balance-my-life-with-remote-work&#34;&gt;How I Learned to Balance My Life With Remote Work&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://open.bufferapp.com/remote-work/?utm_content=bufferaa5a2&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about balancing life and work, either physical or remote by Michael Erasmus&lt;/p&gt;

&lt;h2 id=&#34;demystified-cqrs&#34;&gt;Demystified CQRS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.codecentric.de/en/2015/05/demystified-cqrs/?utm_content=buffer35b18&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about CQRS by Nino Martincevic&lt;/p&gt;

&lt;h2 id=&#34;the-perils-of-programmer-education-in-the-bazaar&#34;&gt;The perils of programmer education in the bazaar&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.practicingruby.com/2015/06/04/the-perils-of-programmer-education-in-the-bazaar/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Gregory Brown&lt;/p&gt;

&lt;h2 id=&#34;6-useful-and-lesser-known-git-commands&#34;&gt;6 useful and lesser-known git commands&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.joncairns.com/2015/05/6-useful-and-lesser-known-git-commands/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about git commands (log, checkout, stash, cherry-pick, annotate) by Jon Cairns&lt;/p&gt;

&lt;h2 id=&#34;is-your-scrum-standup-slowing-you-down&#34;&gt;Is Your Scrum Standup Slowing You Down?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.sitepoint.com/scrum-standup-slowing-down/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by M. David Green&lt;/p&gt;

&lt;h2 id=&#34;me-duele-indra&#34;&gt;Me duele Indra&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=67ce79e01b&#34; target=&#34;_blank&#34;&gt;this Bonilista&lt;/a&gt; (Spanish) by David Bonilla&lt;/p&gt;

&lt;h2 id=&#34;tdd-bdd-add-every-other-method-that-promises-software-quality-here-and-the-tea-tasting-lady&#34;&gt;TDD, BDD, [add every other method that promises software quality here] and the tea tasting lady&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blinkingcaret.wordpress.com/2012/10/02/tdd-bdd-add-every-other-method-that-promises-software-quality-here-and-the-tea-tasting-lady/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Rui Figueiredo about the scientific method, TDD / BDD and how to scientifically detect if the &amp;lsquo;how&amp;rsquo; affects the result. In this case, exemplified by how to prepare your tea&lt;/p&gt;

&lt;h2 id=&#34;the-art-of-metaprogramming-in-java&#34;&gt;The Art of Metaprogramming in Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/PolymathicCoder/the-art-of-metaprogramming-in-java&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Abdelmonaim Remani&lt;/p&gt;

&lt;h2 id=&#34;when-tdd-does-not-work&#34;&gt;When TDD does not work&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2014/04/30/When-tdd-does-not-work.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Uncle Bob on situations where TDD might not be appropiate, especially around the borders&lt;/p&gt;

&lt;h2 id=&#34;mi-primera-semana-como-aprendiz&#34;&gt;Mi primera semana como aprendiz&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ronnyancorini.es/blog/index.php/2015/06/08/mi-primera-semana-como-aprendiz/&#34; target=&#34;_blank&#34;&gt;Ronny Ancorini&amp;rsquo;s experiences&lt;/a&gt; in his first week as apprentince with Carlos Blé &amp;amp; Associates (Spanish)&lt;/p&gt;

&lt;h2 id=&#34;refactoring-without-good-tests&#34;&gt;Refactoring without good tests&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codeclimate.com/blog/2013/12/05/refactoring-without-good-tests/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Peter Bell on how to deal with a legacy codebase, what are the effects of not having tests and how to deal with. How to add tests to a codebase that is not ready for it.&lt;/p&gt;

&lt;h2 id=&#34;big-ball-of-mud&#34;&gt;Big Ball of Mud&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.laputan.org/mud/&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt;, containing a collection of patterns and antipatterns (disguised as notes) by Brian Foote and Joseph Yoder&lt;/p&gt;

&lt;h2 id=&#34;comparision-of-different-concurrency-models-actors-csp-disruptor-and-threads-sic&#34;&gt;Comparision of different concurrency models: Actors, CSP, Disruptor and Threads [sic]&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://java-is-the-new-c.blogspot.com.es/2014/01/comparision-of-different-concurrency.html&#34; target=&#34;_blank&#34;&gt;this comparison of concurrency models&lt;/a&gt; by Rüdiger Möller&lt;/p&gt;

&lt;h2 id=&#34;5-whys&#34;&gt;5 Whys&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/5_Whys&#34; target=&#34;_blank&#34;&gt;this wikipedia&lt;/a&gt; article on the technique called &amp;ldquo;5 Whys&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;expectations-outcomes-and-challenges-of-modern-code-review&#34;&gt;Expectations, Outcomes, and Challenges of Modern Code Review&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://research.microsoft.com/apps/pubs/default.aspx?id=180283&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt;, &lt;a href=&#34;http://research.microsoft.com/pubs/180283/ICSE%202013-codereview.pdf&#34; target=&#34;_blank&#34;&gt;direct link&lt;/a&gt;, by Alberto Bacchelli and Christian Bird on code review at Microsoft.&lt;/p&gt;

&lt;p&gt;They explain how they do it, the exact methodology they are using and why they do it.&lt;/p&gt;

&lt;p&gt;The main reasons to code review are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;finding defects&lt;/li&gt;
&lt;li&gt;code improvement&lt;/li&gt;
&lt;li&gt;alternative solutions&lt;/li&gt;
&lt;li&gt;knowledge transfer&lt;/li&gt;
&lt;li&gt;team awareness and transparency&lt;/li&gt;
&lt;li&gt;also:

&lt;ul&gt;
&lt;li&gt;improve development process&lt;/li&gt;
&lt;li&gt;avoid build breaks&lt;/li&gt;
&lt;li&gt;share code ownership&lt;/li&gt;
&lt;li&gt;track rationale&lt;/li&gt;
&lt;li&gt;team assessment&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-quality-wheel&#34;&gt;The quality wheel&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jessitron.com/2015/04/the-quality-wheel.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jessica Kerr about the qualities of beautiful code&lt;/p&gt;

&lt;h2 id=&#34;5-minute-physics&#34;&gt;5 Minute Physics&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=n6FKT-KafRk&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; on interactions with the mobile devices and related to physics by David DeSandro&lt;/p&gt;

&lt;h2 id=&#34;rise-of-the-transpilers&#34;&gt;Rise of the Transpilers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=DspYurD75Ns&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; on the rise of the transpilers and coffeescript by Jeremy Ashkenas&lt;/p&gt;

&lt;h2 id=&#34;drawing-lines-with-bresenham-s-line-algorithm&#34;&gt;Drawing Lines with Bresenham&amp;rsquo;s Line Algorithm&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=zytBpLlSHms&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; about how to apply the Bresenham&amp;rsquo;s algorithm to draw lines (implemented in pseudo-code and javascript) by Jenn Schiffer&lt;/p&gt;

&lt;h2 id=&#34;working-with-minified-javascript&#34;&gt;Working with Minified JavaScript&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=SuFNR7-XjKI&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by John Crepezzi on how to mix javascript files (clients and yours), how to decompile javascript in chrome, dev &amp;amp; debug tools&lt;/p&gt;

&lt;h2 id=&#34;how-we-ran-our-legacy-code-retreat&#34;&gt;How we ran our Legacy Code Retreat&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://pboop.wordpress.com/2012/02/19/how-we-ran-our-legacy-code-retreat/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Andreas Leidig, looking for inspiration on running a legacy code retreat / brown-bag session. The experience report &lt;a href=&#34;../../../../2015/06/23/brown-bag-session-refactoring-legacy-code/&#34;&gt;is here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;shift-left-testing-earlier-in-development&#34;&gt;Shift Left: Testing Earlier in Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://wirfs-brock.com/blog/2015/06/18/shift-left&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Rebecca Wirfs-Brock&lt;/p&gt;

&lt;h2 id=&#34;polymorphic-equality&#34;&gt;Polymorphic Equality&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/06/polymorphic-equality/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on implementing polymorphic equality on C#, by Carlos Blé&lt;/p&gt;

&lt;h2 id=&#34;commit-messages-are-not-titles&#34;&gt;Commit messages are not titles&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://antirez.com/news/90&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on git commit messages and how to use them, by antirez&lt;/p&gt;

&lt;h2 id=&#34;oracle-considers-g1-garbage-collector-for-java-9&#34;&gt;Oracle Considers G1 Garbage Collector for Java 9&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this &lt;a href=&#34;https://adtmag.com/articles/2015/06/22/oracle-java-9.aspx&#34; target=&#34;_blank&#34;&gt;press article&lt;/a&gt; on the G1 and CMS collector, by John K. Waters&lt;/p&gt;

&lt;h2 id=&#34;what-tech-newbies-need&#34;&gt;What Tech Newbies Need&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://storify.com/jesslynnrose/what-tech-newbies-need&#34; target=&#34;_blank&#34;&gt;this set of tweets&lt;/a&gt;, grouped by Jessica Rose about the most helpful things beginners can do to improve their programming skills.&lt;/p&gt;

&lt;h2 id=&#34;javascript-for-cats&#34;&gt;JavaScript For Cats&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://jsforcats.com/&#34; target=&#34;_blank&#34;&gt;this introductory guide&lt;/a&gt; to javascript by &lt;a href=&#34;https://twitter.com/maxogden&#34; target=&#34;_blank&#34;&gt;Max Ogden&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;why-doesn-t-python-have-switch-case&#34;&gt;Why Doesn&amp;rsquo;t Python Have Switch/Case?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pydanny.com/why-doesnt-python-have-switch-case.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the switch case in the python language by Daniel Roy Greenfeld&lt;/p&gt;

&lt;h2 id=&#34;joseph-moniz-s-notes-on-clojure&#34;&gt;[Joseph Moniz&amp;rsquo;s] Notes on Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read Joseph Moniz&amp;rsquo;s &lt;a href=&#34;http://blog.plasmaconduit.com/notes-on-clojure/&#34; target=&#34;_blank&#34;&gt;Notes on Clojure&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;chemical-computing-with-clojure&#34;&gt;Chemical Computing with Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://gigasquidsoftware.com/chemical-computing/index.html&#34; target=&#34;_blank&#34;&gt;an article&lt;/a&gt; on performing abstract computations with chemicals, written in Clojure by Carin Meier&lt;/p&gt;

&lt;h2 id=&#34;lenses&#34;&gt;Lenses&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.haskellforall.com/2012/01/haskell-for-mainstream-programmers_28.html&#34; target=&#34;_blank&#34;&gt;this tutorial&lt;/a&gt; on writing lenses for haskell, a way of importing imperative getters / setters to a Data. Written by Gabriel Gonzalez.&lt;/p&gt;

&lt;p&gt;On another note, the first part, about writing getters and setters in the naive way, is also explained in Learn you a Haskell &amp;gt; Chapter 8 Making Our Own Types and Typeclasses &amp;gt; Record syntax&lt;/p&gt;

&lt;h2 id=&#34;microservices-in-haskell&#34;&gt;Microservices in Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/AlexanderAA/haskell-microservices/blob/gh-pages/haskell-microservices.md&#34; target=&#34;_blank&#34;&gt;these notes&lt;/a&gt; on implementing a microservice in haskell, by &lt;a href=&#34;https://github.com/AlexanderAA&#34; target=&#34;_blank&#34;&gt;AlexanderAA&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;overcoming-resistance-to-change-isn-t-it-obvious&#34;&gt;Overcoming Resistance to Change - Isn&amp;rsquo;t It Obvious?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=hcz1aZ60k7w&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; in the channel of The World with Theory of Constraints&lt;/p&gt;

&lt;h2 id=&#34;bacon-is-bad-for-you&#34;&gt;Bacon is bad for you&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/garann/bacon-is-bad-for-you&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt;
 on professionalism and the programmer culture, by Garann Means&lt;/p&gt;

&lt;h2 id=&#34;code-is-a-job&#34;&gt;Code is a job&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/garann/code-is-a-job&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt;, that are the continuation of &amp;ldquo;Bacon is bad for you&amp;rdquo;, by the same author, Garann Means&lt;/p&gt;

&lt;h2 id=&#34;the-great-newline-schism&#34;&gt;The Great Newline Schism&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/the-great-newline-schism/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jeff Atwood on the difference in newline character(s)&lt;/p&gt;

&lt;h2 id=&#34;top-ten-reasons-why-i-won-t-use-your-open-source-project&#34;&gt;Top ten reasons why I won’t use your open source project&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://changelog.com/top-ten-reasons-why-i-wont-use-your-open-source-project/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on what&amp;rsquo;s necessary for an open-source project to be usable by others. Written by Adam Stacoviak&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What legacy code is about</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/21/what-legacy-code-is-about/</link>
      <pubDate>Tue, 21 Apr 2015 22:09:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/21/what-legacy-code-is-about/</guid>
      <description>&lt;p&gt;In his book &lt;a href=&#34;http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/ref=sr_1_1?ie=UTF8&amp;amp;qid=1429647115&amp;amp;sr=8-1&amp;amp;keywords=legacy+code+feathers&#34; target=&#34;_blank&#34;&gt;Working effectively with legacy code&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/mfeathers&#34; target=&#34;_blank&#34;&gt;Michael Feathers&lt;/a&gt; describes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] legacy code as code without tests. It is a good working definition, and it points to a solution [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;M Feathers, in the preface of Working effectively with legacy code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I really like this definition. It is objective and measurable. But this is also a downside. Let&amp;rsquo;s take any concurrent code, for example: you can achieve 100% coverage on a single thread and the program could have defects when executed in parallel. But this might be an outlier, as concurrency is difficult to test. Let&amp;rsquo;s take another example.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s a imagine a non-concurrent (i.e., single thread) code composed by a single class (no collaborators; just one responsibility; it is &amp;ldquo;Clean Code&amp;rdquo;, as defined per R.C. Martin&amp;rsquo;s book) that has some happy paths as well as some error-handling cases. As usual. The original code writer has decided to test only the happy paths. They deployed it to production, as the product was ready. You inherit this code.&lt;/p&gt;

&lt;p&gt;After the system is deployed to production, you start receiving defect reports on the happy paths (the tested part). The first one, you cross it off as an one-time thing. Then the second and third come. You take a deeper look and start seeing some inconsistencies in the tests, some tests that actually do not test anything interesting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;some test the test framework&lt;/li&gt;
&lt;li&gt;some the language&lt;/li&gt;
&lt;li&gt;some test a happy path that works by pure luck&lt;/li&gt;
&lt;li&gt;some functionalities are tested (not all happy paths)&lt;/li&gt;
&lt;li&gt;there&amp;rsquo;s actually a defect converted into a specification (test) (??)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, I ask myself this question: when did I start considering this code as legacy? When I saw the bug reports in production (several in a row) or when I saw the poor suite of tests?&lt;/p&gt;

&lt;p&gt;I do think this codebase is legacy, no matter when I realized about it. But my first instinct would be to consider it legacy from the moment I received the bug reports, as I lost the trust in that code.&lt;/p&gt;

&lt;p&gt;Because for me, &lt;strong&gt;legacy code is about trust, not tests&lt;/strong&gt;. You can have tests but no trust; you can have trust but no tests (the latter is more difficult in non-trivial codebases.)&lt;/p&gt;

&lt;p&gt;This is why I would like to update the definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Legacy code is code without tests that provide trust to all your stakeholders&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The last part is very important, because the definition is no longer objective but depends from person to person. If the codebase doesn&amp;rsquo;t have tests, it is definitely legacy. But even if it has them, would you consider the given example a legacy or non-legacy code?&lt;/p&gt;

&lt;p&gt;These stakeholders include everyone affected or affecting the product: owners, developer team (in the scrum, wide sense), users, clients, &amp;hellip;&lt;/p&gt;

&lt;p&gt;Full disclosure: I&amp;rsquo;ve written plenty of legacy code. Code which I thought was good but really wasn&amp;rsquo;t. Even with tests, even with TDD, even with Clean Code. This has made me change my mind about what legacy code is all about.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A legacy code introduction</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/21/a-legacy-code-introduction/</link>
      <pubDate>Sat, 21 Feb 2015 20:05:46 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/21/a-legacy-code-introduction/</guid>
      <description>&lt;p&gt;This is one of the best legacy code introductions I&amp;rsquo;ve seen:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Grand Redesign in the Sky&lt;/p&gt;

&lt;p&gt;Eventually the team rebels. They inform management that they cannot continue to develop in this odious code base. They demand a redesign. Management does not want to expend the resources on a whole new redesign of the project, but they cannot deny that productivity is terrible. Eventually they bend to the demands of the developers and authorize the grand redesign in the sky.&lt;/p&gt;

&lt;p&gt;A new tiger team is selected. Everyone wants to be on this team because it&amp;rsquo;s a greenfield project. They get to start over and create something truly beautiful. But only the best and brightest are chosen for the tiger team. Everyone else must continue to maintain the current system.&lt;/p&gt;

&lt;p&gt;Now the two teams are in a race. The tiger team must build a new system that does everything that the old system does. Not only that, they have to keep up with the changes that are continuously being made to the old system. Management will not replace the old system until the new system can do everything that the old system does.&lt;/p&gt;

&lt;p&gt;This race can go on for a very long time. I&amp;rsquo;ve seen it take 10 years. And by the time it&amp;rsquo;s done, the original members of the tiger team are long gone, and the current members are demanding that the new system be redesigned because it&amp;rsquo;s such a mess.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt; Robert C. Martin &lt;/cite&gt; in the chapter 1: Clean Code from the book by &lt;a href=&#34;http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/&#34; target=&#34;_blank&#34;&gt;the same name&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, why should you estimate the new tiger team abilities better than the old tiger team? Is it because the language, tools, or just because they are &amp;ldquo;plain better&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;What guarantees that the resulting software is going to be better than the old one?&lt;/p&gt;

&lt;p&gt;Another interesting definition of legacy code is Michael Feather&amp;rsquo;s one (code without tests).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>