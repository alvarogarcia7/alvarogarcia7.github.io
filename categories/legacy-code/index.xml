<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>legacy-code on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/legacy-code/</link>
    <description>Recent content in legacy-code on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Apr 2016 00:56:54 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/legacy-code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Quote: Characterization tests</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/18/quote-characterization-tests/</link>
      <pubDate>Mon, 18 Apr 2016 00:56:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/18/quote-characterization-tests/</guid>
      <description>In Working effectively with legacy code, Michael Feathers talks a type of tests to define or characterize the current behavior of the legacy system:
 In nearly every legacy system, what the system does is more important than what it is supposed to do.
A characterization test is a test that characterizes the actual behavior of a piece of code. [&amp;hellip;] The test document the actual current behavior of the system.</description>
    </item>
    
    <item>
      <title>Brownish Greenfield Gilded Rose Kata</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/18/brownish-greenfield-gilded-rose-kata-formulation/</link>
      <pubDate>Mon, 18 Apr 2016 00:44:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/18/brownish-greenfield-gilded-rose-kata-formulation/</guid>
      <description>(This formulation has been copied and adapted from Bobby Johnson and Terry Hughes&amp;rsquo;s repository)
Formulation Hi and welcome to team Gilded Rose. As you know, we are a small inn with a prime location in a prominent city ran by a friendly innkeeper named Allison. We also buy and sell only the finest goods.
Unfortunately, our goods are constantly degrading in quality as they approach their sell by date. We have a system in place that updates our inventory for us.</description>
    </item>
    
    <item>
      <title>Brown-bag session: refactoring legacy code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/01/brownbag-session-refactoring-legacy-code/</link>
      <pubDate>Wed, 01 Jul 2015 13:18:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/01/brownbag-session-refactoring-legacy-code/</guid>
      <description>Today I have done a brown bag session about refactoring legacy code. It includes:
 legacy code definition. There is no agreement about this in the team. the legacy code change algorithm (source is Feathers, Working effectively with legacy code). Plus an example about it. working with legacy code experience with it.  The slides are available here (PDF format)
We also did a practical session, whose experience report is here</description>
    </item>
    
    <item>
      <title>Brown-bag session: Refactoring legacy code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</link>
      <pubDate>Tue, 23 Jun 2015 19:19:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</guid>
      <description>Today I have facilitated a brown bag session about refactoring legacy code applications, as this is the case with one of the applications we maintain and add new features to.
The contents of the session:
 Briefly exposing the problem to the team, me taking the role of the Product Owner (PO) Ask the dev team to add an easy feature Do it without tests, as it was so simple that they thought they could do it (using mob programming) Ask if they were satisfied by the patch / fix.</description>
    </item>
    
    <item>
      <title>Self-study in June 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/</link>
      <pubDate>Wed, 03 Jun 2015 13:13:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/03/self-study-in-june-2015/</guid>
      <description>Update: I&amp;rsquo;ve grouped all small posts related to the self-study from June 2015 into a single post
Le monitoring de flux par l’exemple I&amp;rsquo;ve read this article about monitoring, in the way of &amp;ldquo;by example&amp;rdquo;, by Cédrick Lunven and Julien Kirch (French)
The First Micro-service Architecture I&amp;rsquo;ve read this article about microservices and how they were implemented many years ago by Robert C. Martin
How I Learned to Balance My Life With Remote Work I&amp;rsquo;ve read this article about balancing life and work, either physical or remote by Michael Erasmus</description>
    </item>
    
    <item>
      <title>What legacy code is about</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/21/what-legacy-code-is-about/</link>
      <pubDate>Tue, 21 Apr 2015 22:09:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/21/what-legacy-code-is-about/</guid>
      <description>In his book Working effectively with legacy code, Michael Feathers describes:
 [&amp;hellip;] legacy code as code without tests. It is a good working definition, and it points to a solution [&amp;hellip;]
M Feathers, in the preface of Working effectively with legacy code
 I really like this definition. It is objective and measurable. But this is also a downside. Let&amp;rsquo;s take any concurrent code, for example: you can achieve 100% coverage on a single thread and the program could have defects when executed in parallel.</description>
    </item>
    
    <item>
      <title>A legacy code introduction</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/21/a-legacy-code-introduction/</link>
      <pubDate>Sat, 21 Feb 2015 20:05:46 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/21/a-legacy-code-introduction/</guid>
      <description>This is one of the best legacy code introductions I&amp;rsquo;ve seen:
 The Grand Redesign in the Sky
Eventually the team rebels. They inform management that they cannot continue to develop in this odious code base. They demand a redesign. Management does not want to expend the resources on a whole new redesign of the project, but they cannot deny that productivity is terrible. Eventually they bend to the demands of the developers and authorize the grand redesign in the sky.</description>
    </item>
    
  </channel>
</rss>
