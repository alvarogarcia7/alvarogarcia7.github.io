<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/docker/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in April 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/04/01/self-study-in-april-2017/</link>
      <pubDate>Sat, 01 Apr 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/04/01/self-study-in-april-2017/</guid>
      <description>

&lt;!--
## Gerald Weinberg on Bugs, Errors, and Software Quality

I&#39;ve listened to [this interview][bug-error-weinberg] with Gerald Weinberg where he first talks about software quality, defining a fault, failure, a boo-boo, a blunder (below). Then, they move on to the cost of quality, experiences in his project &#39;Mercury&#39; (a man in orbit; his contribution was on the software side). Says it&#39;s one of his first projects where a person&#39;s life was directly related to a piece of software.

Fault: wrong operation in code
Failure: user&#39;s experience caused by a fault
Boo-boo: a one-off, small failure. Usually shrugged as a small defect
Blunder: a one-off, big failure. Can kill a career

About the cost of software, he mentions that many managers are not willing to pay the price of almost defect-free software and that this level of quality is not required in every project. This idea is similar to the one &#39;Testing every part is akin to reading every letter on the newspaper: one parts are more important than other&#39;.

This interview talks about similar topics than &#39;Why programs fail&#39;, especially about the definition.

At the end of the interview, he talks about team-based software development (~XP) and an anecdote about a company he was consulting with: follow the process or pay the defects out of your own pocket. One of them, accepted paying for defects, until he made a big mistake. Accepted training the rest of the employees into his very precise methods and became very valuable to the company.

Tags: podcast, gerald-weinberg, quality, interview, manager, software-quality, definition, fault, failure, boo-boo, blunder, project-mercury

TODO missing link

--&gt;

&lt;!--
## Microservice Practitioners with Austin Gunter and Richard Li

I&#39;ve listened to [this podcast][us-practitioners] at Software Engineering Daily with Austin Gunter and Richard Li. In it, they talk about how they have organized the conference &#39;Microservice Practicitioners&#39;: how to find speakers, the vibes of the conference, etc.

Tags: austin-gunter, richard-li, organize-a-conference, conference, microservice, microservice-practitioners, podcast, software-engineering-daily

TODO missing link

--&gt;

&lt;h2 id=&#34;10-myths-about-docker-that-stop-developers-cold&#34;&gt;10 Myths About Docker That Stop Developers Cold&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://dev.to/derickbailey/10-myths-about-docker-that-stop-developers-cold&#34; target=&#34;_blank&#34;&gt;this listicle&lt;/a&gt; of docker myths. By Derick Bailey&lt;/p&gt;

&lt;p&gt;Tags: derick-bailey, docker, myth&lt;/p&gt;

&lt;h2 id=&#34;bored-people-quit&#34;&gt;Bored People Quit&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://randsinrepose.com/archives/bored-people-quit/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Lopp on what are some mechanisms why bored people quit.&lt;/p&gt;

&lt;p&gt;Some interesting quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My gig is the care and feeding of engineers, and their productivity is my productivity. If they all leave, I have exactly no job.&lt;/p&gt;

&lt;p&gt;My job isn’t just building product; I also build people.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: michael-lopp, boredness, team-management, people, career, tech-lead, quote&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Convert a project from npm to yarn</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/03/convert-a-project-from-npm-to-yarn/</link>
      <pubDate>Fri, 03 Mar 2017 11:09:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/03/convert-a-project-from-npm-to-yarn/</guid>
      <description>

&lt;p&gt;At a  client, we&amp;rsquo;re converting all projects (i.e., sites, services, libraries) from &lt;code&gt;npm&lt;/code&gt; to &lt;code&gt;yarn&lt;/code&gt;. Mostly for the speed (as it uses the internal cache).&lt;/p&gt;

&lt;h2 id=&#34;step-by-step-guide&#34;&gt;Step by step guide&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Install yarn in your local environment

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yarnpkg.com/lang/en/docs/install/&#34; target=&#34;_blank&#34;&gt;https://yarnpkg.com/lang/en/docs/install/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;yarn install&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This will create a &lt;code&gt;yarn.lock&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Add that file to the repo: &lt;code&gt;git add yarn.lock&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Modify Dockerfile

&lt;ul&gt;
&lt;li&gt;Install yarn  (in the Dockerfile). Idea: shortcut this execution with &lt;code&gt;yarn --version&lt;/code&gt; in case it is installed&lt;/li&gt;
&lt;li&gt;Configure the PATH variable (ENV PATH &amp;hellip;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ADD yarn.lock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;npm install&lt;/code&gt; with &lt;code&gt;yarn install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Modify pipeline

&lt;ul&gt;
&lt;li&gt;See example (below)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install_yarn&lt;/code&gt;. Idea: shortcut this execution with &lt;code&gt;yarn --version&lt;/code&gt; in case it is installed&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;npm install&lt;/code&gt; with &lt;code&gt;yarn install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Test it&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h2&gt;

&lt;p&gt;Build step: execute shell&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; install_yarn &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  yarn --version &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; curl -o- -L https://yarnpkg.com/install.sh &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; bash
  &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.yarn/bin:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

install_yarn

yarn install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in December 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/12/01/self-study-in-december-2016/</link>
      <pubDate>Thu, 01 Dec 2016 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/12/01/self-study-in-december-2016/</guid>
      <description>

&lt;h2 id=&#34;a-docker-fork-talk-of-a-split-is-now-on-the-table&#34;&gt;A Docker Fork: Talk of a Split Is Now on the Table&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/docker-fork-talk-split-now-table/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Alex Williams and Joab Jackson about the possible split in the Docker environment following Docker&amp;rsquo;s and other providers&amp;rsquo; product roadmaps. Each own has their policies and priorities and they collide in this case&lt;/p&gt;

&lt;p&gt;Tags: docker, alex-williams, joab-jackson, container, oci, kubernetes, devops, tool&lt;/p&gt;

&lt;h2 id=&#34;an-ode-to-boring-creating-open-and-stable-container-world&#34;&gt;An Ode to Boring: Creating Open and Stable Container World&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Bob Wise, in which he describes the state of the Docker tool and the Docker Engine. Asks for some kind of Docker long-time support (LTS - like Ubuntu does, for example) and to create a boring environment so applications on top of the containers itself can thrive.&lt;/p&gt;

&lt;p&gt;The difference here is that application creators want some boring infrastructure because their product is the application on top, not the container themselves. Docker&amp;rsquo;s product, on the other hand, is the containers and the Engine.&lt;/p&gt;

&lt;p&gt;Tags: ode, bob-wise, devops, tool, request, kubernetes, docker-swarm&lt;/p&gt;

&lt;h2 id=&#34;how-to-use-npm-link&#34;&gt;How to use &amp;lsquo;npm link&amp;rsquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://tobyret.github.io/NPM-Link/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Toby Retallick about using npm link.&lt;/p&gt;

&lt;p&gt;Tags: npm, tool, npm-link, toby-retallick&lt;/p&gt;

&lt;h2 id=&#34;valve-s-flat-management-structure-like-high-school&#34;&gt;Valve&amp;rsquo;s flat management structure &amp;lsquo;like high school&amp;rsquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.wired.co.uk/article/valve-management-jeri-ellsworth&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Philippa Warr on the flat management hierarchy at Valve (a company cited as having some Teal practices) and its shortcomings.&lt;/p&gt;

&lt;p&gt;Tags:  philippa-warr, teal, teal-organization, valve, management, flat-hierarchy&lt;/p&gt;

&lt;h2 id=&#34;the-hazards-of-going-on-autopilot&#34;&gt;The hazards of going on autopilot&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.newyorker.com/science/maria-konnikova/hazards-automation&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Maria Konnikova on how pilots get distracted (their minds drift off) when not stimulated.&lt;/p&gt;

&lt;p&gt;The article introduces the idea of human-centric automation and letting the computer check what the human is doing (to tell when it is wrong), rather than the human what the computer is doing wrong.&lt;/p&gt;

&lt;p&gt;Tags: maria-konnikova, automation, autopilot, complacency&lt;/p&gt;

&lt;h2 id=&#34;the-cobra-effect-that-is-disabling-paste-on-password-fields&#34;&gt;The “Cobra Effect” that is disabling paste on password fields&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.troyhunt.com/the-cobra-effect-that-is-disabling/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on disabling paste on password fields, how that forces using a weaker password. Also names the &amp;lsquo;Cobra Effect&amp;rsquo;. By Troy Hunt&lt;/p&gt;

&lt;p&gt;Tags: troy-hunt, copy-paste, paste, password-field, cobra-effect, disable-paste, usability, ux&lt;/p&gt;

&lt;h2 id=&#34;of-course-smart-homes-are-targets-for-hackers&#34;&gt;Of course smart homes are targets for hackers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mjg59.dreamwidth.org/45483.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matthew Garrett on how the security of Internet of Things devices is as important as traditional devices and what rules should a consumer follow to decide whether a device is secure or not.&lt;/p&gt;

&lt;p&gt;Tags: matthew-garrett, security, internet-of-things, iot, hacker&lt;/p&gt;

&lt;h2 id=&#34;open-salaries-outcomes&#34;&gt;Open Salaries: Outcomes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.lunarlogic.io/2016/open-salaries-outcomes&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Paweł Brodziński on how the open salaries has affected them in their company (Lunar Logic):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;removing the bottleneck for salary reviews&lt;/li&gt;
&lt;li&gt;making more often and better the feedback process&lt;/li&gt;
&lt;li&gt;people more involved in running the company&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: teal, company, salary, teal-organization, company-practice, open-salary, pawel-brodzinski&lt;/p&gt;

&lt;h2 id=&#34;one-more-vote-for-functional-languages&#34;&gt;One more vote for functional languages&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.simeonov.com/2013/03/04/one-more-vote-for-functional-languages/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Simeon Simeonov in which he describes how setting a watch expression can cause a side effect (e.g. VBA, Ruby).&lt;/p&gt;

&lt;p&gt;Tags: immutability, simeon-simeonov, watch-expression&lt;/p&gt;

&lt;h2 id=&#34;the-fastest-way-to-learn-a-new-programming-language&#34;&gt;The fastest way to learn a new programming language&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.simeonov.com/2013/02/11/the-fastest-way-to-learn-a-new-programming-language/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; the ways the author (Simeon Simeonov) goes while learning a new language:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Curious George. During this phase, which usually lasts only a few hours and involves semi-random exploration of tutorials, reference manuals, blog posts and StackOverflow posts, I get my bearings straight, find analogies between the new language and ones I’m more familiar with and choose my initial tooling.&lt;/li&gt;
&lt;li&gt;Mario Bros. -&amp;gt; Super Mario Bros. In this phase, which usually lasts several days, I try to bring the meta-patterns I’m comfortable working with from familiar environments (the sewers of New York) to the new environment (the Mushroom Kingdom). It involves diving head first into advanced language features and building various utilities that I find lacking in the environment, e.g., debugging tools, all in the context of early prototypes of whatever it is that I need to work on.&lt;/li&gt;
&lt;li&gt;Bull in a china shop. This is the phase where my noble goal of bending the language to the way I solve problems meets the harsh reality of me being a neophyte in its intricacies. The observable attributes of this phase are lower velocity, increased use of expletives and more time on StackOverflow. The amount of time in this phase varies. The “Eureka!” moments are fun but overall it’s a dip in the experience curve.&lt;/li&gt;
&lt;li&gt;Singin’ in the Rain. With newly acquired knowledge and improved language-specific testing/debugging skills, the bull gently transforms into Fred Astaire. Coding is a lot of fun again. It’s time to go to production.&lt;/li&gt;
&lt;li&gt;Obi-Wan Kenobi. Over time, the interaction with the new language improves the meta-patterns I use for problem solving. I tend to use less and simpler code using natural language idioms as opposed to generalized utilities &amp;amp; abstractions. It’s like changing from using the Force to allowing the Force to do things through you. It takes a long time to get here. More often than not, I never do.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;He also describes several (advanced) techniques that helped him better understand programming:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;In C++ template, meta-programming [&amp;hellip;]&lt;/li&gt;
&lt;li&gt;In Java, dynamic bytecode generation [&amp;hellip;]&lt;/li&gt;
&lt;li&gt;In Python [&amp;hellip;] stateful decorators [&amp;hellip;]&lt;/li&gt;
&lt;li&gt;In Ruby, metaprogramming  [&amp;hellip;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: simeon-simeonov, metaprogramming, ruby, decorator, python, bytecode-generation, java, cpp, learning-programming-language, programming-language, curious-georde, mario-bros, bull-in-a-china-shop, singing-in-the-rain, obi-wan-kenobi, eureka, learning&lt;/p&gt;

&lt;h2 id=&#34;the-marvellously-mysterious-javascript-maybe-monad&#34;&gt;The marvellously mysterious javascript Maybe monad&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://jrsinclair.com/articles/2016/marvellously-mysterious-javascript-maybe-monad/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by James Sinclair in which he tries to explain monads in javascript, explaining how promises work, then establishing the parallellism between a promise and a type of monad.&lt;/p&gt;

&lt;p&gt;Tags: monad, javascript, promise, james-sinclair, analogy, functional-programming, monad-explanation&lt;/p&gt;

&lt;h2 id=&#34;debug-trace&#34;&gt;Debug.Trace&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read both &lt;a href=&#34;https://hackage.haskell.org/package/base-4.9.0.0/docs/Debug-Trace.html&#34; target=&#34;_blank&#34;&gt;the documentation&lt;/a&gt; and the source code for &lt;code&gt;Debug.Trace&lt;/code&gt;, a haskell module that contains functions to trace a program execution. It is interesting to see how a function performs side effects and its signature seems to be pure.&lt;/p&gt;

&lt;p&gt;The main trick is to use &lt;code&gt;unsafePerformIO&lt;/code&gt;, which points to &lt;code&gt;unsafeDupablePerformIO&lt;/code&gt;, which performs a side effect on the Real World (&lt;code&gt;runRW#&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Tags: haskell, debug, monitoring, source-code, real-world&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in February 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</link>
      <pubDate>Mon, 01 Feb 2016 02:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</guid>
      <description>

&lt;h2 id=&#34;software-and-all-that-comes-with-it&#34;&gt;Software and all that comes with it&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lanyrd.com/2011/fromthefront/sgfgw/&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about creating software and asking questions to deliver value, by Alberto Brandolini&lt;/p&gt;

&lt;p&gt;Tags: alberto-brandolini, software, slide, team-management, agile&lt;/p&gt;

&lt;h2 id=&#34;driving-your-dba-crazy-in-3-easy-steps&#34;&gt;Driving your DBA crazy in 3 easy steps&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lanyrd.com/2011/ddd-day-it/shzym&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about dealing with the knowledge that is present in the database, not expressed in ubiquitous language and cause of the low bus factor, by Alberto Brandolini&lt;/p&gt;

&lt;p&gt;Analogy between the movie The Shining and a model / entities / aggregates.&lt;/p&gt;

&lt;p&gt;Tags: ddd, model, entity, aggregate, team-management, dba, agile, ubiquitous-language, alberto-brandolini, bus-factor, slide&lt;/p&gt;

&lt;h2 id=&#34;shorter-feedback-is-not-always-bett&#34;&gt;Shorter Feedback is not Always Bett&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://facebook.com/notes/kent-beck/shorter-feedback-is-not-always-bett/1097086386990891&#34; target=&#34;_blank&#34;&gt;this note&lt;/a&gt; from Kent Beck on why shorter feedback loops might not always be better. I.e., why some processes take time to set in and results are not observable until that time.&lt;/p&gt;

&lt;p&gt;Tags:  kent-beck, feedback-loops, open-question, analogy&lt;/p&gt;

&lt;h2 id=&#34;la-regla-del-triple-check-para-ir-a-eventos&#34;&gt;La Regla del Triple Check para ir a eventos&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.bonillaware.com/regla-triple-check-para-ir-a-eventos&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Bonilla about a rule to help you decide attendance to events, in Spanish&lt;/p&gt;

&lt;p&gt;Tags: rule, time-management, david-bonilla, event, spanish, triple-check&lt;/p&gt;

&lt;h2 id=&#34;an-interview-with-charles-wetherell&#34;&gt;An interview with Charles Wetherell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://demin.ws/blog/english/2012/08/25/interview-with-charles-wetherell/&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt; by Alexander Demin about the interviewee&amp;rsquo;s book &amp;ldquo;Etudes for Programmers&amp;rdquo;. In it, they talk about the origin of the études, the author&amp;rsquo;s research interests and activities. Also about the book (written in 1978) and how computer science has changed since then.&lt;/p&gt;

&lt;p&gt;When asked about three things a programmer should know:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some ability to do formal mathematics. The level necessary to understand Hopcroft and Ullman combined with a little graph theory is enough. Discrete mathematics is essential; calculus is only necessary for folks working in special application areas.&lt;/p&gt;

&lt;p&gt;Some ability to write clearly in their native language. Dijkstra said that if a person couldn’t write their own language, they couldn’t write a correct program. (Well, that’s what I hope Dijkstra said!). Writing programs is essentially the same as writing a non-fiction essay. If you can’t make the step-by-step connections clearly in your own language, why would we think you could in C, for example?&lt;/p&gt;

&lt;p&gt;Remember that a program is primarily for communication with humans, not computers. When you write a program, the computer will do whatever you say. You must convince the humans who read the program that what you have asked the computer to do is the correct thing to do. Remember, the computer doesn’t care about correctness.&lt;/p&gt;

&lt;p&gt;The answer to the last question means that programs should always have the form of paragraphs of comments that describe the intention of the program followed by paragraphs of code that implement that intention. All of the formatting should be designed to make readers as able as possible to read the code easily; the compiler doesn’t care. In particular, follow conventions of mathematics and your native language, not those you found in some random language manual. Write the comments first and then write the code, not the other way around. If you don’t know what you want to achieve and why, any code you write is, by definition, incorrect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: charles-wetherell, alexander-demin, interview, book, etude, etudes-for-programmers, practice, ability, skill, list&lt;/p&gt;

&lt;h2 id=&#34;how-to-fix-javascript-maybe&#34;&gt;How to fix Javascript… maybe&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@wob/how-to-fix-javascript-maybe-8857819bfa16&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Drew Hamlett about the lack of style guide for javascript and how this affects the adoption of the language and the sprout of similar libraries.&lt;/p&gt;

&lt;p&gt;Suggests the creation of a standard style guide for javascript.&lt;/p&gt;

&lt;p&gt;Tags: drew-hamlett, javascript, style-guide, analysis&lt;/p&gt;

&lt;h2 id=&#34;isomorphic-javascript-devbeat-master-class&#34;&gt;Isomorphic JavaScript: #DevBeat Master Class&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/spikebrehm/a-28174727&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Spike Brehm on Isomorphic JavaScript and why it&amp;rsquo;s important: initial pageload and speed, reducing effort and duplication, SEO (crawlability).&lt;/p&gt;

&lt;p&gt;Tags: isomorphic-javascript, isomorphism, javascript, seo, crawler, frontend, app, application, fat-client, fat-server, thin-client, thin-server, ria-spike-brehm, slide&lt;/p&gt;

&lt;h2 id=&#34;open-sourcing-our-docker-images&#34;&gt;Open-sourcing our docker images&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.modulus.io/open-sourcing-our-docker-images&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brandon Cannaday about the Docker images that they have.&lt;/p&gt;

&lt;p&gt;Tags: docker, brandon-annaday, open-ource, image, container, modulus&lt;/p&gt;

&lt;h2 id=&#34;growing-up-in-an-open-source-world&#34;&gt;growing up in an open source world&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://fiveisprime.me/2015/02/18/growing-up-in-open-source/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matt Hernandez where he explains that fixing the style guide can limit your creativity and how the software is written in enterprise and open-source environments.&lt;/p&gt;

&lt;p&gt;Also about how developers grow when exposed to different style guides.&lt;/p&gt;

&lt;p&gt;Tags: style-guide, matt-hernandez, creativity, dreyfus-model, enterprise, open-source, programming&lt;/p&gt;

&lt;h2 id=&#34;hanlon-s-razor-and-working-with-young-engineers&#34;&gt;Hanlon&amp;rsquo;s Razor and working with young engineers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://fiveisprime.me/2013/07/27/young-engineers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matt Hernandez on the importance of understanding (and empathising) towards others&amp;rsquo; positions and worries.&lt;/p&gt;

&lt;p&gt;Cites the Hanlon Razor:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Never attribute to malice that which is adequately explained by ignorance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags:  hanlon-razor, empathy, team-management, ignorance, malice, matt-hernandez&lt;/p&gt;

&lt;h2 id=&#34;intro-to-sails-js&#34;&gt;Intro to sails.js&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://youtu.be/GK-tFvpIR7c&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt;, an introduction to the sails.js framework: a realtime nodejs server for creating REST APIs, inspired by Ruby on Rails.&lt;/p&gt;

&lt;p&gt;Tags: sailsjs, ruby-on-rails, ror, framework, video, introduction, mvc, rest-api, realtime, nodejs,&lt;/p&gt;

&lt;h2 id=&#34;node-js-and-hapi-creating-a-rest-api&#34;&gt;Node.js and hapi - creating a rest api&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.modulus.io/nodejs-and-hapi-create-rest-api&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about creating a REST API using &lt;a href=&#34;http://hapijs.com/&#34; target=&#34;_blank&#34;&gt;Hapi&lt;/a&gt;, a nodejs framework. Written by Matt Hernandez&lt;/p&gt;

&lt;p&gt;Tags: matt-hernandez, rest-api, nodejs, hapi, framework&lt;/p&gt;

&lt;h2 id=&#34;introducing-pokedex-org-a-progressive-webapp-for-pokémon-fans&#34;&gt;Introducing Pokedex.org: a progressive webapp for Pokémon fans&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Nolan Lawson about the challenge of having a 60 fps application on a mobile device, making it offline.&lt;/p&gt;

&lt;p&gt;Uses Angular 2, javascript 7, PouchDB as well as LocalForage for storage. All processing on WebWorkers, except for DOM manipulation.&lt;/p&gt;

&lt;p&gt;Tags: angular-2, javascript-7, angular, javascript, pouchdb, localforage, cloudant, 60fps, mobile, app, offline-first, offline, pokemon, api, nolan-lawson, web-worker, flip-technique, css, progressive, pokedex, svgomg, frontend&lt;/p&gt;

&lt;h2 id=&#34;lambdaconf-2015-how-to-learn-haskell-in-less-than-5-years-chris-allen&#34;&gt;LambdaConf 2015 - How to Learn Haskell in Less Than 5 Years Chris Allen&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=Bg9ccYzMbxc&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Chris Allen on how to learn haskell, what are some common pitfalls while learning it and how learning and teaching (it) are different.&lt;/p&gt;

&lt;p&gt;Talks about his (with a coauthor) book, focused on not reducing the readers that make it to the end and, finally, increasing the amount of haskell users.&lt;/p&gt;

&lt;p&gt;References &lt;a href=&#34;https://yow.eventer.com/yow-2014-1222/stop-treading-water-learning-to-learn-by-edward-kmett-1750&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Kmett.&lt;/p&gt;

&lt;p&gt;Tags: chris-allen, haskell, learning-to-learn, meta-learning, lambda-conf, talk&lt;/p&gt;

&lt;h2 id=&#34;extreme-continuous-delivery-at-unruly&#34;&gt;Extreme Continuous Delivery - at Unruly&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.xpdays.de/2014/downloads/002-extreme-continuous-delivery-at-unruly/cd_javaone.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about how the company Unruly does continuous delivery (CD), maximizing business value, minimizing time to market (TTM). Also describes how they do deployments and how to organize teams.&lt;/p&gt;

&lt;p&gt;References: Extreme Programming Explained (Beck), Continuous Delivery (Humble &amp;amp; Farley)&lt;/p&gt;

&lt;p&gt;Tags: silo, team-management, culture, continuous-delivery, tdd, nagdd, shared-infrastructure, acceptance-testing, module-testing, conway-law, cross-pollination, continuous-investment, slide&lt;/p&gt;

&lt;h2 id=&#34;building-chat-applications-and-robots-for-skype&#34;&gt;Building chat applications and robots for Skype&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://opensourcehacker.com/2013/03/28/building-chat-applications-and-robots-for-skype/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on building robots for skype. By Mikko Ohtamaa&lt;/p&gt;

&lt;p&gt;Tags: skype, robot, bot, mikko-ohtamaa, slack, integration, api&lt;/p&gt;

&lt;h2 id=&#34;why-i-never-wrote-down-our-company-values&#34;&gt;Why I never wrote down our company values&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/swlh/why-i-never-wrote-down-our-company-values-8143520497e8&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mikael Cho on the subject of having company values, preaching or writing them down. Also, what happens when hard times come, regarding your values.&lt;/p&gt;

&lt;p&gt;Tags: mikael-cho, value, company-value, analogy&lt;/p&gt;

&lt;h2 id=&#34;interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-protocol-design&#34;&gt;Interview with Jesper Louis Andersen about Erlang, Haskell, OCaml, Go, Idris, the JVM, software and protocol design &lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this interview (&lt;a href=&#34;https://medium.com/this-is-not-a-monad-tutorial/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-b0de06440fbd&#34; target=&#34;_blank&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;https://medium.com/this-is-not-a-monad-tutorial/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-5628fe591295&#34; target=&#34;_blank&#34;&gt;part 2&lt;/a&gt;) to Jesper Louis Andersen, interviewed by Federico Carrone.&lt;/p&gt;

&lt;p&gt;The first part is about a comparison of languages, what/why he uses them, and protocol design. The second is more about the Erlang language, the BEAM VM, and some experiences.&lt;/p&gt;

&lt;p&gt;Tags: federico-carrone, erlang, interview, jesper-andersen, jesper-louis-andersen, haskell, ocaml, go, idris, the-jvm, protocol-design, software-design, language, functional-programming, protocol, land-of-lisp, northern-war&lt;/p&gt;

&lt;h2 id=&#34;migrating-to-hugo-from-octopress&#34;&gt;Migrating to Hugo From Octopress&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://nathanleclaire.com/blog/2014/12/22/migrating-to-hugo-from-octopress/&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; by Nathan LeClaire on migrating the blog from Octopress to Hugo&lt;/p&gt;

&lt;p&gt;Tags: static-site-generator, hugo, go, octopress, ruby, jekyll, nathan-leclaire, migration, blog, meta&lt;/p&gt;

&lt;h2 id=&#34;dynamic-static-site-generators-strategies&#34;&gt;Dynamic Static Site Generators strategies&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://timnash.co.uk/dynamic-static-site-generators-strategies/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining what are static site generators, and an example with Jekyll. By Tim Nash&lt;/p&gt;

&lt;p&gt;Tags: tim-nash, static-site-generator, jekyll, strategy, explanation, comparison&lt;/p&gt;

&lt;h2 id=&#34;blog-like-a-confused-hacker&#34;&gt;Blog like a confused hacker&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://timnash.co.uk/using-wordpress-static-site-generator/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tim Nash on what tools he recomends for static site generation.&lt;/p&gt;

&lt;p&gt;Tags: tim-nash, static-site-generator, jekyll, hide, strategy, explanation, comparison, sublime, wordpress, amazon-s3, cdn&lt;/p&gt;

&lt;h2 id=&#34;resolving-the-frontend-backend-api-design-conflict&#34;&gt;Resolving the Frontend/Backend API Design Conflict&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://launchany.com/resolving-the-frontendbackend-api-design-conflict/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains the &amp;ldquo;Backend for Frontend&amp;rdquo; (BFF) pattern, for solving the different needs of data depending on each device / client. By James Higginbotham&lt;/p&gt;

&lt;p&gt;Tags: james-higginbotham, bff, pattern, backend-for-frontend, api, soa, microservice, frontend, backend, architecture&lt;/p&gt;

&lt;h2 id=&#34;what-if-we-forget-to-write-the-tests&#34;&gt;What If We Forget To Write The Tests?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=f70f14b644&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on the trust issues related to starting to use a new methodology (TDD in this case) and how to see what impacts it might have in your day to day.&lt;/p&gt;

&lt;p&gt;Tags: j-b-rainsberger, j-brains, rainsberger, tdd, motivation, team-management&lt;/p&gt;

&lt;h2 id=&#34;api-microservices-the-unix-philosophy-and-the-richardson-maturity-model-a-practical-perspective&#34;&gt;API microservices, the Unix philosophy, and the Richardson Maturity Model - a practical perspective&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@chrstphrhrt/microservices-the-unix-philosophy-and-the-richardson-maturity-model-425abed44826&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Chris Hart on why startups and companies alike should be careful when choosing th latest technology and how this applies to microservices.&lt;/p&gt;

&lt;p&gt;Tags: microservice, chris-hart, startup, analysis, company, technical-debt, bounded-context, ddd, rest-api&lt;/p&gt;

&lt;h2 id=&#34;effective-programming&#34;&gt;Effective programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@sebas5384/effective-programming-d7e5bb2f3b80&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sebastian Ferrari on the importance of clean code, systems thinking and functional programming.&lt;/p&gt;

&lt;p&gt;Specifies the important difference between effectiveness and efficiency.&lt;/p&gt;

&lt;p&gt;Links to this talk by &lt;a href=&#34;https://youtu.be/OqEeIG8aPPk&#34; target=&#34;_blank&#34;&gt;Russ Ackoff&lt;/a&gt;. States the difference between &amp;ldquo;the right thing&amp;rdquo; and &amp;ldquo;the thing right&amp;rdquo;, by Drucker.&lt;/p&gt;

&lt;p&gt;Tags: drucker, thing-right, right-thing, sebastian-ferrari, system-thinking, russ-ackoff, video, ted, difference, clean-code, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;learning-how-to-learn&#34;&gt;Learning how to learn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@thejameskyle/learning-how-to-learn-7f04d6f42c1e&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by James Kyle about the &amp;ldquo;how to learn&amp;rdquo; as one important skill for programmers and how having the solution at a few keystrokes limits / handicaps this ability.&lt;/p&gt;

&lt;p&gt;Tags: programmer, learn-to-learn, james-kyle, stack-overflow, skill&lt;/p&gt;

&lt;h2 id=&#34;why-do-some-functional-programmers-criticize-design-patterns-in-oop-languages-as-a-sign-of-language-deficiency-while-monad-is-also-a-design-pattern&#34;&gt;Why do some functional programmers criticize design patterns in OOP languages as a sign of language deficiency, while Monad is also a design pattern?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.quora.com/Why-do-some-functional-programmers-criticize-design-patterns-in-OOP-languages-as-a-sign-of-language-deficiency-while-Monad-is-also-a-design-pattern/answer/Edward-Kmett?srid=hVnO&amp;amp;share=12410d1e&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt; by Edward Kmett comparing the design patterns in OOP to the design patterns in functional languages.&lt;/p&gt;

&lt;p&gt;Tags: functional-language, object-oriented-language, edward-kmett, oop, pattern, monad, interface, quora, answer&lt;/p&gt;

&lt;h2 id=&#34;should-we-even-debate-refactoring-with-stakeholders&#34;&gt;Should We Even Debate Refactoring With Stakeholders?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=215f7f649b&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on the power balance between stakeholders and programmers and how it can be inclined to a &amp;lsquo;more trust&amp;rsquo; / &amp;lsquo;less trust&amp;rsquo; by following some actions. The analogy is to a trade you cannot understand, therefore you have to hope that the taken decisions are in your best interest.&lt;/p&gt;

&lt;p&gt;Tags: j-b-rainsberger, j-brains, rainsberger, refactor, business-need, communication, stakeholder&lt;/p&gt;

&lt;h2 id=&#34;the-eternal-struggle-between-business-and-programmers&#34;&gt;The Eternal Struggle Between Business and Programmers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.thecodewhisperer.com/permalink/the-eternal-struggle-between-business-and-programmers&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on the discussion between business (&amp;lsquo;we want more features, now&amp;rsquo;) and the programmers (&amp;lsquo;we want more refactoring, now&amp;rsquo;). Concludes that both players need each other, in a symbiotic fashion, to keep their jobs at the company.&lt;/p&gt;

&lt;p&gt;He suggests that Scrum cannot work without the XP practices and that we need to refactor aggressively after having finished our initial design, to keep the costs down. In fact, agreeing with both parts in this discussion.&lt;/p&gt;

&lt;p&gt;References one of his own videos, at Oredev&amp;rsquo;13, &amp;ldquo;Fundamental Theorem of Agile Software Development&amp;rdquo;, where he describes the relationship between accidental / essential complexity in the cost of a feature, attributing most of it to accidental (&amp;lsquo;we&amp;rsquo;re not good at our jobs&amp;rsquo;) and describing the need for more design / refactor after the initial design.&lt;/p&gt;

&lt;p&gt;Tags: j-b-rainsberger, j-brains, rainsberger, refactor, business-need, design, oredev, talk, agile, xp, scrum, software-development, accidental-complexity, essential-complexity, mythical-man-month&lt;/p&gt;

&lt;h2 id=&#34;turning-code-to-cash-how-to-make-money-as-a-web-developer-and-live-to-tell-the-tale&#34;&gt;Turning code to cash — How to make money as a Web Developer and live to tell the tale.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@kurtrohlandt/turning-code-to-cash-how-to-make-money-as-a-web-developer-and-live-to-tell-the-tale-f5eedc557b3e&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kurt Rohlandt with a list of items to check while dealing with clients as a freelancer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nothing is simple&lt;/li&gt;
&lt;li&gt;Know your skill set — and let your client know it&lt;/li&gt;
&lt;li&gt;Be clear about what they are buying&lt;/li&gt;
&lt;li&gt;Learn to use the best tool for the job&lt;/li&gt;
&lt;li&gt;To your client you’re more than just a developer&lt;/li&gt;
&lt;li&gt;Sign off your jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: freelancer, kurt-rohlandt, list, tip, client&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brown-bag session: docker</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/16/brown-bag-session-docker/</link>
      <pubDate>Tue, 16 Jun 2015 18:52:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/16/brown-bag-session-docker/</guid>
      <description>&lt;p&gt;Today we have done a brown bag session about Docker. One of the team members explained to us the latest news, topics and how tos, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the difference between a container and an image&lt;/li&gt;
&lt;li&gt;diffing image contents&lt;/li&gt;
&lt;li&gt;AUFS (Another Union FS)&lt;/li&gt;
&lt;li&gt;persistent vs non-persistent (volatile) filesystems&lt;/li&gt;
&lt;li&gt;running CMD and other commands on the instance&lt;/li&gt;
&lt;li&gt;problems of running with permission = root (or its group)&lt;/li&gt;
&lt;li&gt;downsides of it&lt;/li&gt;
&lt;li&gt;how to compare it with a virtual machine&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>