<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/maintenance/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/maintenance/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in March 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/03/01/self-study-march-2019/</link>
      <pubDate>Fri, 01 Mar 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/03/01/self-study-march-2019/</guid>
      <description>

&lt;h2 id=&#34;how-to-create-reality-https-www-mrmoneymustache-com-2019-02-27-how-to-create-reality&#34;&gt;&lt;a href=&#34;https://www.mrmoneymustache.com/2019/02/27/how-to-create-reality/&#34; target=&#34;_blank&#34;&gt;How to Create Reality&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In this article, it is explained how to create a (different) reality in the mind of your target (users).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Begin with the End in Mind – and Start by Painting a Beautiful Picture of that end  destination.&lt;/p&gt;

&lt;p&gt;It’s the technique at the core of the world’s best marketing and negotiation strategies, and it works so well because it short circuits the human brain into making everyone – including you – see things in the desired way.&lt;/p&gt;

&lt;p&gt;It was a simple picture of a very clear end destination that automatically got people’s imagination running and filling in their own details.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are some examples as well.&lt;/p&gt;

&lt;p&gt;Tags: communication, people-management, leadership, marketing, pete-adeney, mr-money-mustache, paint-the-picture, technique&lt;/p&gt;

&lt;p&gt;Id: add12910-3b3f-11e9-8a1b-0242ac110003
Read: Thu, 28 Feb 2019 8:00:29 +0000&lt;/p&gt;

&lt;h2 id=&#34;red-flags-in-software-developer-job-descriptions-https-joecmarshall-com-posts-job-description-red-flags&#34;&gt;&lt;a href=&#34;https://joecmarshall.com/posts/job-description-red-flags/&#34; target=&#34;_blank&#34;&gt;Red Flags in Software Developer Job Descriptions&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article that explains some red flags the author has detected while reading job offers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wordpress Developer - Degree + 10 years experience required: refers to the exageration of needed qualifications for jobs that do not require it, apparently.&lt;/li&gt;
&lt;li&gt;PHP Contractor - 2 Months: refers to the short-term mentality of jobs, and the environment that it creates&lt;/li&gt;
&lt;li&gt;Early Stage Emmployee / Technical Co-founder / Person to Make My Thing: refers to how cheap ideas are and how important (to developers) execution is.&lt;/li&gt;
&lt;li&gt;Technologies: Coldfusion + jQuery: refers to old/out of fashion technologies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: job-offer, pattern, joe-marshall, old-technology, fashionable, short-term, long-term, mentality, hiring, recruiting&lt;/p&gt;

&lt;p&gt;Id: 3841f764-3b40-11e9-9d75-0242ac110003
Read: Thu, 28 Feb 2019 8:04:21 +0000&lt;/p&gt;

&lt;h2 id=&#34;ask-hn-how-to-be-productive-with-big-existing-code-base-https-news-ycombinator-com-item-id-19254008&#34;&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=19254008&#34; target=&#34;_blank&#34;&gt;Ask HN: How to be productive with big existing code base&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In this HN discussion, there are some pearls regarding working with big, legacy codebases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just because you wouldn&amp;rsquo;t have done it the way they did doesn&amp;rsquo;t mean they did it wrong. A reference to &lt;a href=&#34;https://en.wikipedia.org/wiki/Wikipedia:Chesterton%27s_fence&#34; target=&#34;_blank&#34;&gt;Chesterton&amp;rsquo;s fence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A reference to Working Effectively With Legacy Code, by Feathers&lt;/li&gt;
&lt;li&gt;&amp;gt; 1. Assess how much of the code is actually understood. Is there any record of the &amp;gt; design decisions, the edge cases, the debugging process, the paths that weren&amp;rsquo;t taken? Who knows the most about the codebase and how it got to be how it is?&lt;/li&gt;
&lt;li&gt;&amp;gt; 2. What&amp;rsquo;s the current specification? Don&amp;rsquo;t look at the stack, look at input and output cases. How well does the code meet the spec? Where is it failing?&lt;/li&gt;
&lt;li&gt;&amp;gt; 3. Before you change anything you need to know what the change process is. You &amp;gt; probably do already know this, but if you don&amp;rsquo;t need to find out whether there are &amp;gt; any demarcations of responsibility, even if they&amp;rsquo;re only informal and unstated areas of interest.&lt;/li&gt;
&lt;li&gt;&amp;gt; 4. When you have all that, you can start working on the code with some knowledge of the context you - and the code - are operating in.&lt;/li&gt;
&lt;li&gt;&amp;gt; 5. If code works, don&amp;rsquo;t rewrite or refactor for style without a very very good &amp;gt; reason. And don&amp;rsquo;t do it unless you can change all the &amp;ldquo;bad&amp;rdquo; code at once. Otherwise &amp;gt; you&amp;rsquo;ll end up with a mess of incompatible idioms that make future changes hard to read.&lt;/li&gt;
&lt;li&gt;&amp;gt; 6. Write your own docs as you go. Best case is other people will benefit from reading them, worst case is you&amp;rsquo;ll remind yourself what you were doing six months from now - because you&amp;rsquo;ll have forgotten by then.&lt;/li&gt;
&lt;li&gt;A reference to flamegraphs&lt;/li&gt;
&lt;li&gt;&amp;gt; The problem with the after-the-fact abstraction layer is that if the original team members are not available, you are likely not in possession of the whole theory of the software. Hence it is not likely you can in the beginning choose the right abstractions. Endquote. This is a reference to &amp;ldquo;Programming as theory building&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;gt; Get it into a state that will support current business goals and roadmap while protecting current business value and users.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: the quotes are copied directly from the discussion page and are property of the original commentators.&lt;/p&gt;

&lt;p&gt;Tags: wewlc, michael-feathers, hackernews, yc, legacy-code, theory-building, quote, chesterton-fence, working-effectively-with-legacy-code, programming-as-theory-building&lt;/p&gt;

&lt;p&gt;Id: 0eb0ef62-3b41-11e9-863a-0242ac110003
Read: Thu, 28 Feb 2019 8:10:21 +0000&lt;/p&gt;

&lt;h2 id=&#34;nodejs-logging-made-right-https-itnext-io-nodejs-logging-made-right-117a19e8b4ce&#34;&gt;&lt;a href=&#34;https://itnext.io/nodejs-logging-made-right-117a19e8b4ce&#34; target=&#34;_blank&#34;&gt;NodeJS logging made right&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Explains logging and tracing in nodejs.&lt;/p&gt;

&lt;p&gt;Usage of thread-local storage, trace id, continuation local storage.&lt;/p&gt;

&lt;p&gt;Tags: nodejs, logging, tracing, thread-local, thread-local-storage, trace-id, continuation-local-storage, cls, tls, proxy, hook&lt;/p&gt;

&lt;p&gt;Id: 5bed4596-3f5b-11e9-83e1-0242ac110005
Read: Tue, 05 Mar 2019 15:28:42 +0000&lt;/p&gt;

&lt;h2 id=&#34;web-design-3-0-when-your-web-design-really-matters-https-nicepage-com-doc-article-20348-web-design-3-0-when-your-web-design-really-matters&#34;&gt;&lt;a href=&#34;https://nicepage.com/doc/article/20348/web-design-3-0-when-your-web-design-really-matters&#34; target=&#34;_blank&#34;&gt;Web Design 3.0: When Your Web Design Really Matters&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In Chapter 1, we will find out how Web Design is changing. Also, you will learn about the birth of the new generation of web designers, who are designing web pages in Web Design 3.0.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Chapter 2, we will talk about website builders that are lagging behind the trends and slowing down the Web Design evolution.&lt;/p&gt;

&lt;p&gt;In Chapter 3, you will learn how to create modern web designs quickly and easily in a new way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Has walk through the different design phases, techniques; both in press (printed) design as in web design.&lt;/p&gt;

&lt;p&gt;Explains some web builders.&lt;/p&gt;

&lt;p&gt;Explains the concept of the web 3.0:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Free positioning.&lt;/li&gt;
&lt;li&gt;Element overlapping.&lt;/li&gt;
&lt;li&gt;Breaking the limitations of Bootstrap-like Grids.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;States the different needs for webmasters and designers:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Web Designers need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free positioning&lt;/li&gt;
&lt;li&gt;Removing table constraints&lt;/li&gt;
&lt;li&gt;Layers&lt;/li&gt;
&lt;li&gt;Property Panel for elements&lt;/li&gt;
&lt;li&gt;Support for Windows and Mac OS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Webmasters need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clean HTML and CSS&lt;/li&gt;
&lt;li&gt;Mobile device support&lt;/li&gt;
&lt;li&gt;WordPress and Joomla support&lt;/li&gt;
&lt;li&gt;Building websites online&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Summary&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Website builders are lagging behind the rapidly changing Web Design world.&lt;/p&gt;

&lt;p&gt;The history of web design tools has involved several transitions. However, progress has stopped. There are numerous signs that the new transition must happen.&lt;/p&gt;

&lt;p&gt;There are separate markets for web designers and webmasters. Popular website builders do not support the main features of Web Design 3.0: free positioning, modern grids, and layers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: comparison, web-design, print-design, web-builder, creativity, metaphor, grid-layout, bootstrap, flexibility, design, web-3.0, web-design-3.0, web-2.0, progression&lt;/p&gt;

&lt;p&gt;Id: 5101ce2e-3f5e-11e9-83d9-0242ac110005
Read: Tue, 05 Mar 2019 15:49:52 +0000&lt;/p&gt;

&lt;h2 id=&#34;gotify-a-self-hosted-push-notifications-service-https-news-ycombinator-com-item-id-19347848&#34;&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=19347848&#34; target=&#34;_blank&#34;&gt;Gotify – a self-hosted push-notifications service&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Tags: gotify, self-hosted, notification, notification-service, android, open-source&lt;/p&gt;

&lt;p&gt;Id: e839c82a-4367-11e9-b34d-0242ac110007
Read: Sun, 10 Mar 2019 19:08:36 +0000&lt;/p&gt;

&lt;h2 id=&#34;ask-hn-how-to-speak-like-a-leader-not-like-an-engineer-https-news-ycombinator-com-item-id-19349676&#34;&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=19349676&#34; target=&#34;_blank&#34;&gt;Ask HN: How to speak like a leader, not like an engineer?&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Links and resources for speaking like a leader&lt;/p&gt;

&lt;p&gt;Tags: leader, engineer, comparison, change, public-speaking, speak, speaking, career-management, career-change, professional-growth, resource:&lt;/p&gt;

&lt;p&gt;Id: 1a478fc8-4368-11e9-b657-0242ac110007
Read: Sun, 10 Mar 2019 19:10:00 +0000&lt;/p&gt;

&lt;h2 id=&#34;archivebox-open-source-self-hosted-web-archive-https-news-ycombinator-com-item-id-19346985&#34;&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=19346985&#34; target=&#34;_blank&#34;&gt;ArchiveBox: Open-source self-hosted web archive&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Tools for archiving purposes. Has links to other sites:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/machawk1/warcreate&#34; target=&#34;_blank&#34;&gt;https://github.com/machawk1/warcreate&lt;/a&gt;
&lt;a href=&#34;https://getpolarized.io/&#34; target=&#34;_blank&#34;&gt;https://getpolarized.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: burtonator, web-archive, polarized, warch, warc, personal-knowledge-base&lt;/p&gt;

&lt;p&gt;Id: 4168161c-436e-11e9-aa0d-0242ac110007
Read: Sun, 10 Mar 2019 19:54:03 +0000&lt;/p&gt;

&lt;h2 id=&#34;ask-hn-as-a-freelancer-what-s-the-best-app-to-track-finances-https-news-ycombinator-com-item-id-19450331&#34;&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=19450331&#34; target=&#34;_blank&#34;&gt;Ask HN: As a freelancer, what&amp;rsquo;s the best app to track finances?&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Describes tools for finance for freelancers. Stresses the importance of time wealth&lt;/p&gt;

&lt;p&gt;Tags: time-management, money-management, freelance, tool, ask-hn, hackernews, finance, time-wealth, money-wealth&lt;/p&gt;

&lt;p&gt;Id: b74a6696-4c83-11e9-99bd-0242ac110005
Read: Fri, 22 Mar 2019 09:20:21 +0000&lt;/p&gt;

&lt;h2 id=&#34;what-i-learned-in-my-first-year-as-a-solo-founder-https-tik-dev-lessons-learned&#34;&gt;&lt;a href=&#34;https://tik.dev/lessons-learned&#34; target=&#34;_blank&#34;&gt;What I Learned in My First Year as a Solo Founder&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Learnings by a solo founder.&lt;/p&gt;

&lt;p&gt;Benefits of having a side project or side hustle&lt;/p&gt;

&lt;p&gt;Tags: side-hustle, side-business, learning, reflection, solo-founder, founder, revenue&lt;/p&gt;

&lt;p&gt;Id: f0dee42c-5142-11e9-9444-0242ac110006
Read: Thu, 28 Mar 2019 10:19:16 +0000&lt;/p&gt;

&lt;h2 id=&#34;write-tests-not-too-many-mostly-integration-https-kentcdodds-com-blog-write-tests&#34;&gt;&lt;a href=&#34;https://kentcdodds.com/blog/write-tests&#34; target=&#34;_blank&#34;&gt;Write tests. Not too many. Mostly integration.&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This is a paraphrasing of some advice for healthy eating: &amp;lsquo;Eat food, not too much, mostly plants.&amp;rsquo; (Pollan)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write tests.&lt;/p&gt;

&lt;p&gt;Often I find myself saving time when I put time in to write tests&lt;/p&gt;

&lt;p&gt;Not too many: you get diminishing returns on your tests as the coverage increases [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;Mostly integration: as you move up the pyramid, the confidence quotient of each form of testing increases&lt;/p&gt;

&lt;p&gt;Integration tests strike a great balance on the trade-offs between confidence and speed/expense&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: unit-test, testing, test-pyramid, healthy-testing, advice, integration-test, quote, kent-c-dodds, analogy&lt;/p&gt;

&lt;p&gt;Id: d148d774-5144-11e9-94d8-0242ac110006
Read: Thu, 28 Mar 2019 10:32:42 +0000&lt;/p&gt;

&lt;h2 id=&#34;7-rules-for-eating-https-www-webmd-com-food-recipes-news-20090323-7-rules-for-eating&#34;&gt;&lt;a href=&#34;https://www.webmd.com/food-recipes/news/20090323/7-rules-for-eating&#34; target=&#34;_blank&#34;&gt;7 Rules for Eating&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In this reference article, Michael Pollan explains his seven rules for eating:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don&amp;rsquo;t eat anything your great grandmother wouldn&amp;rsquo;t recognize as food. &amp;ldquo;When you pick up that box of portable yogurt tubes, or eat something with 15 ingredients you can&amp;rsquo;t pronounce, ask yourself, &amp;ldquo;What are those things doing there?&amp;rdquo; Pollan says.&lt;/li&gt;
&lt;li&gt;Don’t eat anything with more than five ingredients, or ingredients you can&amp;rsquo;t pronounce.&lt;/li&gt;
&lt;li&gt;Stay out of the middle of the supermarket; shop on the perimeter of the store. Real food tends to be on the outer edge of the store near the loading docks, where it can be replaced with fresh foods when it goes bad.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t eat anything that won&amp;rsquo;t eventually rot. &amp;ldquo;There are exceptions &amp;ndash; honey &amp;ndash; but as a rule, things like Twinkies that never go bad aren&amp;rsquo;t food,&amp;rdquo; Pollan says.&lt;/li&gt;
&lt;li&gt;It is not just what you eat but how you eat. &amp;ldquo;Always leave the table a little hungry,&amp;rdquo; Pollan says. &amp;ldquo;Many cultures have rules that you stop eating before you are full. In Japan, they say eat until you are four-fifths full. Islamic culture has a similar rule, and in German culture they say, &amp;lsquo;Tie off the sack before it&amp;rsquo;s full.&amp;rsquo;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Families traditionally ate together, around a table and not a TV, at regular meal times. It&amp;rsquo;s a good tradition. Enjoy meals with the people you love. &amp;ldquo;Remember when eating between meals felt wrong?&amp;rdquo; Pollan asks.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t buy food where you buy your gasoline. In the U.S., 20% of food is eaten in the car.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also, four myths:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Food is a delivery vehicle for nutrients. What really matters isn&amp;rsquo;t broccoli but its fiber and antioxidants. If we get that right, we get our diet right. Foods kind of get in the way.&lt;/li&gt;
&lt;li&gt;We need experts to tell us how to eat. Nutrients are invisible and mysterious. &amp;ldquo;It is a little like religion,&amp;rdquo; Pollan said. &amp;ldquo;If a powerful entity is invisible, you need a priesthood to mediate your relation with food.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;The whole point of eating is to maintain and promote bodily health. &amp;ldquo;You are either improving or ruining your health when you eat &amp;ndash; that is a very American idea,&amp;rdquo; Pollan says. &amp;ldquo;But there are many other reasons to eat food: pleasure, social community, identity, and ritual. Health is not the only thing going on on our plates.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;There are evil foods and good foods. &amp;ldquo;At any given time there is an evil nutrient we try to drive like Satan from the food supply &amp;ndash; first it was saturated fats, then it was trans fat,&amp;rdquo; Pollan says. &amp;ldquo;Then there is the evil nutrient&amp;rsquo;s doppelganger, the blessed nutrient. If we get enough of that we, will be healthy and maybe live forever. It&amp;rsquo;s funny through history how the good and bad guys keep changing.&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This can all be summarized as &amp;ldquo;Eat food, not too much, mostly plants.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: healthy-eating, michael-pollan, rule, advice, myth, analogy&lt;/p&gt;

&lt;p&gt;Id: 30ece1fc-5145-11e9-87de-0242ac110006
Read: Thu, 28 Mar 2019 10:35:22 +0000&lt;/p&gt;

&lt;h2 id=&#34;lean-testing-or-why-unit-tests-are-worse-than-you-think-https-blog-usejournal-com-lean-testing-or-why-unit-tests-are-worse-than-you-think-b6500139a009&#34;&gt;&lt;a href=&#34;https://blog.usejournal.com/lean-testing-or-why-unit-tests-are-worse-than-you-think-b6500139a009&#34; target=&#34;_blank&#34;&gt;Lean Testing or Why Unit Tests are Worse than You Think&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This article puts testing in an economic perspective. Calls it lean testing&lt;/p&gt;

&lt;p&gt;Also references/paraphrases Michael Pollan&amp;rsquo;s Rules for eating ().&lt;/p&gt;

&lt;p&gt;Creates a testing trophy, a figure to explain the best testing pattern, replacing the testing pyramid&lt;/p&gt;

&lt;p&gt;Explains return on investment (ROI) on tests&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;integration tests provide the best balance of cost, speed and confidence&lt;/p&gt;

&lt;p&gt;Integration tests lie somewhere between unit tests and end-to-end tests so they provide the best balance. Therefore, they have the highest ROI.&lt;/p&gt;

&lt;p&gt;The main idea is to just not mock so much&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: economic-perspective, lean-testing, testing-trophy, testing-pyramid, return-on-investment, roi, critical-path, testing, unit-test, anti-architecture, architecture, maintenance&lt;/p&gt;

&lt;p&gt;Id: efe85d00-5147-11e9-87ce-0242ac110006
Read: Thu, 28 Mar 2019 10:55:02 +0000&lt;/p&gt;

&lt;h2 id=&#34;end-user-programming-https-www-inkandswitch-com-end-user-programming-html&#34;&gt;&lt;a href=&#34;https://www.inkandswitch.com/end-user-programming.html&#34; target=&#34;_blank&#34;&gt;End-user programming&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In this article, the writer explains some of the end-user modifications to programs. Examples include: adding download capabilities to instagram, generating backups for files.&lt;/p&gt;

&lt;p&gt;On the other hand, applications (especially mobile) are tightly sealed, not allowing modification or extension. Even FOSS (free, open source software), modification implies the learning curve / entry barrier of having to setup, compile, debug the original program and modifications.&lt;/p&gt;

&lt;p&gt;Gives the example of the UNIX command line, as a programming environment. One that provides (one of) the best REPL examples.&lt;/p&gt;

&lt;p&gt;Characterizes spreadsheets as ad-hoc databases, programs; mostly created by domain experts (aka subject matter experts), than professional software engineers. Take into account that these hats are non-exclusive: a domain expert can also be a professional software engineer.&lt;/p&gt;

&lt;p&gt;The author tries to coin the term &amp;ldquo;end-user programming&amp;rdquo; to differentiate it from programming by professional software developers, who try to build general-purpose apps, to be used by thousands of people.&lt;/p&gt;

&lt;p&gt;This also means, that a professional software developer can be an &amp;ldquo;end-user programmer&amp;rdquo;, when creating solutions for themselves (limited user group), rather than for the general public. Maybe those one-off scripts that we create, are some kind of end-user programs. This is described in the article as well.&lt;/p&gt;

&lt;p&gt;Talks of the chasm the user has to cross in order to customize the behaviour of their software. This is related to working in a framework or a library, in the sense of &amp;lsquo;who keeps the control&amp;rsquo;. In an UNIX, filesystem environment, you keep the control.&lt;/p&gt;

&lt;p&gt;References &amp;ldquo;citizen developers&amp;rdquo; (&lt;a href=&#34;https://www.gartner.com/it-glossary/citizen-developer/&#34; target=&#34;_blank&#34;&gt;https://www.gartner.com/it-glossary/citizen-developer/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Three qualities for end-user programming: embodiment, living systems, and in-place toolchains&lt;/p&gt;

&lt;p&gt;Embodiment: it requires the programmer hold many abstractions in their mind. Related to abstract reasoning. Mentions that many end-users don&amp;rsquo;t have these abstractions in their mind, but are capable of abstract reasoning in their own domains of expertise. Mentions that via visual representations onscreen, we can help the end-user. An example: preview formula results in a spreadsheet; highlight the cells in a spreadsheet.&lt;/p&gt;

&lt;p&gt;Embodiment means, broadly, making elements of the programming experience more concrete and visual&lt;/p&gt;

&lt;p&gt;Living systems: interaction with them. Refers to shortening the feedback cycle&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Live programming gives the programmer immediate feedback on the behavior of a program as it is edited, replacing the edit compile-debug cycle with a fluid programming experience.“&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But only short feedback loops, but also to change the system behaviour from within, such as the LISP compiler reading and compiling the source code from inside a program.&lt;/p&gt;

&lt;p&gt;In-place tool chains&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The user should be able to edit their programs without installing additional tools or programs&lt;/p&gt;

&lt;p&gt;a Unix shell script is just a series of commands saved into a text file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Meaning that the user is already accustomed to issuing those commands. A script is just grouping those commands.&lt;/p&gt;

&lt;p&gt;Gives examples of end-user programming success stories: spreadsheets, SQL, browser dev tools,&lt;/p&gt;

&lt;p&gt;Tags: end-user-programming, programming, extensibility, open-closed-principle, ocp, mofication, user, extension, unix, repl, spreadsheet, reflection, theory, history, review, sql, dev-tools, chasm, abstraction&lt;/p&gt;

&lt;p&gt;Id: 4490792a-514b-11e9-9861-0242ac110006
Read: Thu, 28 Mar 2019 11:18:52 +0000&lt;/p&gt;

&lt;h2 id=&#34;why-developers-consider-agile-development-to-be-nonsense-https-medium-com-web-development-why-developers-consider-agile-development-to-be-nonsense-1eaf28715e66&#34;&gt;&lt;a href=&#34;https://medium.com/@web.development/why-developers-consider-agile-development-to-be-nonsense-1eaf28715e66&#34; target=&#34;_blank&#34;&gt;Why developers consider Agile development to be nonsense&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This article explains how Agile development is apt and indicated for short-term software development, especially for contracting or consulting companies, where the client is external to the team.&lt;/p&gt;

&lt;p&gt;Why it does not make as much sense in products/services where there is a leapfrog solution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don’t give the customer what they ask for; understand them, and revolutionize their world.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: leapfrog-solution, google, agile, agile-development, comparison, project-management, client, consulting, management&lt;/p&gt;

&lt;p&gt;Id: 9035ea3c-514f-11e9-9676-0242ac110006
Read: Thu, 28 Mar 2019 11:49:37 +0000&lt;/p&gt;

&lt;h2 id=&#34;why-bother-with-what-three-words-https-shkspr-mobi-blog-2019-03-why-bother-with-what-three-words&#34;&gt;&lt;a href=&#34;https://shkspr.mobi/blog/2019/03/why-bother-with-what-three-words/&#34; target=&#34;_blank&#34;&gt;Why bother with What Three Words?&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In this article, the author questions why using a closed protocol for translating geo-coordinates to words.&lt;/p&gt;

&lt;p&gt;The author complains that it is masquerading a for-profit, closed algorithm as an open standard.&lt;/p&gt;

&lt;p&gt;Also, that the GPS locations are drifting very quickly in some places, therefore the translated address changes, but the local address (e.g., 1 Wall Street), does not.&lt;/p&gt;

&lt;p&gt;Tags: gps-drift, australia, open-standard, closed-standard, for-profit, protocol, open, closed, what-three-words, w3w, i18n, startup&lt;/p&gt;

&lt;p&gt;Id: 960e6750-5202-11e9-bb40-0242ac110008
Read: Fri, 29 Mar 2019 09:11:07 +0000&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing safe(r) bash scripts</title>
      <link>https://alvarogarcia7.github.io/blog/2018/07/13/writing-safe-bash-scripts/</link>
      <pubDate>Fri, 13 Jul 2018 07:03:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/07/13/writing-safe-bash-scripts/</guid>
      <description>

&lt;p&gt;After writing more and more bash scripts for a client, I&amp;rsquo;ve decided to write down my thoughts about it.&lt;/p&gt;

&lt;p&gt;This assumes you have some knowledge about bash, as it is not intended as a beginner&amp;rsquo;s tutorial.&lt;/p&gt;

&lt;h2 id=&#34;why-bash-scripts&#34;&gt;Why bash scripts?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bash is present in almost every unix/linux-based stack, now some Windows as well. An exception is the &amp;lsquo;alpine&amp;rsquo; docker images, which have a smaller, lighter shell (more on that later)&lt;/li&gt;
&lt;li&gt;Everything that you can automate, you can do from bash. Bash forces you to create a (first?) client for your application and see how the integration is from the user&amp;rsquo;s perspective&lt;/li&gt;
&lt;li&gt;Testing your application from bash forces you to treat your application as a black-box (e.g., different technology, no shared state, no access to internals)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;using-a-safe-bash-subset-sh&#34;&gt;Using a safe bash subset: sh&lt;/h3&gt;

&lt;p&gt;This is useful for &amp;lsquo;alpine&amp;rsquo; docker images, as some alpine do not include bash.&lt;/p&gt;

&lt;p&gt;The more general you need your script to be, the more you should prefer sh rather than bash. A source of generality can be making your script public (publish it), executing it under multiple environments, making it the installer for other tools, etc.&lt;/p&gt;

&lt;h2 id=&#34;tips&#34;&gt;Tips&lt;/h2&gt;

&lt;h3 id=&#34;temporary-files&#34;&gt;Temporary files&lt;/h3&gt;

&lt;p&gt;Do not assume that the current directory is the place for writing temporary files (or any file, for that matter).&lt;/p&gt;

&lt;p&gt;For temporary files, use &lt;code&gt;mktemp&lt;/code&gt;, and for directories &lt;code&gt;mktemp -d&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ man mktemp
MKTEMP(1)                 BSD General Commands Manual                MKTEMP(1)

NAME
     mktemp -- make temporary file name (unique)

DESCRIPTION
     The mktemp utility takes each of the given file name templates and over-
     writes a portion of it to create a file name.  This file name is unique
     and suitable for use by the application.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(remember to cleanup resources when your script exists - maybe use exit traps)&lt;/p&gt;

&lt;h3 id=&#34;exit-traps&#34;&gt;(Exit) Traps&lt;/h3&gt;

&lt;p&gt;There are some resources that you need to remove / cleanup / close at the end of your script. Both when things go well as when they don&amp;rsquo;t. Think of it as a (java) try-with-resources or try..catch..finally.&lt;/p&gt;

&lt;p&gt;Bash offers &lt;a href=&#34;https://www.gnu.org/software/bash/manual/bash.html#Bourne-Shell-Builtins&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;trap&lt;/code&gt;&lt;/a&gt; to perform this task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;trap arg signal
trap command signal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Taken from &lt;a href=&#34;https://bash.cyberciti.biz/guide/Trap_statement&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function finish {
  # Your cleanup code here
}
trap finish EXIT
trap finish SIGQUIT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More information, and this example from &lt;a href=&#34;http://redsymbol.net/articles/bash-exit-traps/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;do-not-hardcode-the-shell-location&#34;&gt;Do not hardcode the shell location&lt;/h3&gt;

&lt;p&gt;This is more common with perl than with bash, as most bash installs are placed at &lt;code&gt;/bin/bash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can use &lt;code&gt;/usr/bin/env bash&lt;/code&gt; / &lt;code&gt;/usr/bin/env sh&lt;/code&gt; to spawn a shell.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash

#rest of commands
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;options-for-executing-header&#34;&gt;Options for executing / Header&lt;/h3&gt;

&lt;p&gt;add these options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set -euxo pipefail
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These can be added anywhere, but I usually add them after the shebang (the beginning of the script)&lt;/p&gt;

&lt;p&gt;Reference: &lt;a href=&#34;https://www.gnu.org/software/bash/manual/bash.html#The-Set-Builtin&#34; target=&#34;_blank&#34;&gt;The set built-in&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another reference: the inspiration for these options comes from &lt;a href=&#34;https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;a brief note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set -e&lt;/code&gt; stops the execution if a command fails (this is the default behavior in &lt;code&gt;make&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set -u&lt;/code&gt;: Treat unset variables and parameters other than the special parameters ‘@’ or ‘*’ as an error when performing parameter expansion. An error message will be written to the standard error, and a non-interactive shell will exit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set -x&lt;/code&gt;: debug. Trace the commands on the console&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set -o pipefail&lt;/code&gt;: make the pipe command fail if any of the commands in the pipe fail.

&lt;ul&gt;
&lt;li&gt;Example: with this option disabled, &lt;code&gt;a|b|c&lt;/code&gt; when &lt;code&gt;a&lt;/code&gt; fails, b will execute, the return value will be the one of &lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Example: with this option enabled, &lt;code&gt;a|b|c&lt;/code&gt; when &lt;code&gt;a&lt;/code&gt; fails, &lt;code&gt;b&lt;/code&gt; will not execute, the return value will be the one of &lt;code&gt;a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to use a try&amp;hellip;catch pattern, disable &lt;code&gt;-e&lt;/code&gt; temporarily:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set +e # 1
ls NON_EXISTING_FILE # 2
set -e # 3
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;1: Disable error-checking. Note this is a plus (+) sign&lt;/li&gt;
&lt;li&gt;2: a command that could fail. As the error checking is disabled, the execution continues even if 2 throws an error. Therefore, the exception is swallowed.&lt;/li&gt;
&lt;li&gt;3: Enable error-checking again&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;debugging&#34;&gt;Debugging&lt;/h3&gt;

&lt;h4 id=&#34;enable-tracing-debugging-mode&#34;&gt;Enable tracing / debugging mode&lt;/h4&gt;

&lt;p&gt;I usually make my bash scripts as simple as possible (see Limitations), but even then, they fail often while building them.&lt;/p&gt;

&lt;p&gt;For that reason, you can enable the &amp;lsquo;debug&amp;rsquo; option permanently:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Inside the script
set -x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or just for one invocation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# When invoking the script
bash -x myscript.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: your script will get the parameters in the same fashion as if executing &lt;code&gt;./myscript.sh&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat myscript.sh
echo $1
$ ./myscript.sh 1
1
$ bash -x myscript.sh 1
+ echo 1
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;dry-run-while-building-the-script&#34;&gt;Dry-run while building the script&lt;/h4&gt;

&lt;p&gt;A common pattern I use while building scripts is to prepare the command but do not execute it yet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
# prepare options, decide what to do
echo COMMAND_WITH_SIDE_EFFECTS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I am sure that this is the desired command, usually after trying it manually on the console, I can remove the &lt;code&gt;echo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
# prepare options, decide what to do
COMMAND_WITH_SIDE_EFFECTS
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;dry-run-as-another-switch&#34;&gt;Dry-run as another switch&lt;/h4&gt;

&lt;p&gt;You can use the previous pattern but as a feature of your script:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accept &amp;lsquo;-n / &amp;ndash;dry-run&amp;rsquo; (or similar)&lt;/li&gt;
&lt;li&gt;When the switch is enabled, it prepends &lt;code&gt;echo&lt;/code&gt; to your final command&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;COMMAND=&amp;quot;rm -rf ./.git&amp;quot;
if [ $DRY_RUN ]; then
  COMMAND=&amp;quot;echo $COMMAND&amp;quot;
fi

$COMMAND
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;verbosity-levels-and-other-modes&#34;&gt;Verbosity levels and other modes&lt;/h3&gt;

&lt;p&gt;When some scripts grow in size and are not a script but an application, being more or less verbose is useful.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;curl&lt;/code&gt; as an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl localhost:8080
curl: (7) Failed to connect to localhost port 8080: Connection refused
$ curl -vvv localhost:8080
* Rebuilt URL to: localhost:8080/
*   Trying ::1...
* connect to ::1 port 8080 failed: Connection refused
*   Trying fe80::1...
* connect to fe80::1 port 8080 failed: Connection refused
*   Trying 127.0.0.1...
* connect to 127.0.0.1 port 8080 failed: Connection refused
* Failed to connect to localhost port 8080: Connection refused
* Closing connection 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Same with quiet mode, a mode to reduce verbosity.&lt;/p&gt;

&lt;p&gt;Same with &amp;lsquo;raw&amp;rsquo; mode, a mode to only print the raw output, maybe for consumption from another script.&lt;/p&gt;

&lt;h3 id=&#34;using-quotes&#34;&gt;Using quotes&lt;/h3&gt;

&lt;p&gt;Imagine a script that prints the first, second, and third received parameter, then all of them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat myscript.sh
echo &amp;quot;first=$1 second=$2 third=$3; all=$@&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The normal invocation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./myscript.sh 1 2 3
first=1 second=2 third=3; all=1 2 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(everything works as expected)&lt;/p&gt;

&lt;p&gt;now let&amp;rsquo;s try strings (with spaces)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./myscript.sh hello world
first=hello second=world third=; all=hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, bash uses spaces to delimit words. Now that we know this, lets be careful.&lt;/p&gt;

&lt;p&gt;We want to process some files (with spaces):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls file*
file 1.txt file 2.txt
$ ./myscript.sh $(ls file*)
first=file second=1.txt third=file; all=file 1.txt file 2.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A defect appeared: I want &amp;ldquo;file 1.txt&amp;rdquo; to be a parameter, not two.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s imagine a script checking whether a file exists:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat file_exists.sh
if [ -e $1 ]; then # -e is for file exists; see `man test`
  echo &amp;quot;file $1 exists&amp;quot;
else
  echo &amp;quot;file $1 does not exist&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ls file*
file 1.txt     file 2.txt     file_exists.sh
$ ./file_exists.sh &amp;quot;file 1.txt&amp;quot;
./file_exists.sh: line 1: [: file: binary operator expected
file file 1.txt does not exist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s add quotes to the test to make it work with spaces:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat file_exists.sh
if [ -e &amp;quot;$1&amp;quot; ]; then # note the quotes
  echo &amp;quot;file $1 exists&amp;quot;
else
  echo &amp;quot;file $1 does not exist&amp;quot;
fi
$ ./file_exists.sh &amp;quot;file 1.txt&amp;quot;
file file 1.txt exists
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In general, be careful with spaces, as they mark the end of the string / parameter. Be proactive with quoting. From the &lt;a href=&#34;https://google.github.io/styleguide/shell.xml&#34; target=&#34;_blank&#34;&gt;google bash guide&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Always quote strings containing variables, command substitutions, spaces or shell meta characters, unless careful unquoted expansion is required.&lt;/li&gt;
&lt;li&gt;Prefer quoting strings that are &amp;ldquo;words&amp;rdquo; (as opposed to command options or path names).&lt;/li&gt;
&lt;li&gt;Never quote literal integers.&lt;/li&gt;
&lt;li&gt;Be aware of the quoting rules for pattern matches in [[.&lt;/li&gt;
&lt;li&gt;Use &amp;ldquo;$@&amp;rdquo; unless you have a specific reason to use $*.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single quote does not interpolate: &lt;code&gt;&#39;$PATH&#39; is literally $PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Double quotes interpolate: &lt;code&gt;&amp;quot;$PATH&amp;quot; is the contents of the variable $PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If possible, try having spaces in the files you produce. It makes life much simpler.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;solid&#34;&gt;SOLID&lt;/h3&gt;

&lt;p&gt;If your script is a one-off thing, or will not suffer churn/modification, then feel free to discard this tip. On the other hand, if this script will be part of a critical path (e.g., deploying) or will be modified in the future, try to apply the SOLID principles that we apply for other pieces of software.&lt;/p&gt;

&lt;p&gt;Especially the SRP (below)&lt;/p&gt;

&lt;h3 id=&#34;single-responsibility-principle-srp&#34;&gt;Single Responsibility Principle (SRP)&lt;/h3&gt;

&lt;p&gt;I like to design my scripts by separating concerns or responsibilities.&lt;/p&gt;

&lt;p&gt;One typical example: process many files at once:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat s1.sh
#!/usr/bin/env bash

function find_files {
   while IFS= read -r -d &#39;&#39; file; do
       files+=( &amp;quot;$file&amp;quot; )
   done &amp;lt; &amp;lt;(find . -maxdepth 1 -type f -iname &amp;quot;file*.txt&amp;quot; -print0)
}

function process_file {
  file=&amp;quot;$1&amp;quot;
  echo &amp;quot;Will write to file $file&amp;quot;
}

function main {
  declare -a files # this is a global variable inside the script
  find_files
  for file in &amp;quot;${files[@]}&amp;quot;; do
    process_file &amp;quot;$file&amp;quot;
  done
}

main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main benefit is that iterating the files is something that usually does not fail (just copy paste the script), while the main work is done in &lt;code&gt;process_file&lt;/code&gt;. The two functions have different pace of change, therefore two responsibilities. The latter, I can test manually (on the REPL) until it works, then copy-paste the script (see &amp;lsquo;How I write my scripts&amp;rsquo;).&lt;/p&gt;

&lt;p&gt;Its execution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls file*
file1.txt file2.txt
$ ./s1.sh
Will write to file ./file1.txt
Will write to file ./file2.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on return values and functions in bash, see &lt;a href=&#34;https://www.linuxjournal.com/content/return-values-bash-functions&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hot-swap-reload&#34;&gt;Hot-swap / reload&lt;/h3&gt;

&lt;p&gt;Files in bash are read every time you invoke them. So if you separate the &lt;code&gt;process_file&lt;/code&gt; function to another file, you can change the contents of it while the long-running main script is working.&lt;/p&gt;

&lt;h3 id=&#34;be-extra-careful-with-rm&#34;&gt;Be extra careful with &lt;code&gt;rm&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is common knowledge, but it can happen to any of us.&lt;/p&gt;

&lt;p&gt;Removing files is a sharp-edged tool, such as &lt;code&gt;DELETE&lt;/code&gt; in SQL. This is why we &lt;code&gt;SELECT&lt;/code&gt; the same data set before deleting. Why we &lt;code&gt;ls&lt;/code&gt; files before &lt;code&gt;rm&lt;/code&gt;ing them.&lt;/p&gt;

&lt;p&gt;Some operating systems now protect &lt;code&gt;#rm -rf /&lt;/code&gt; with another flag, but the mistake of &lt;code&gt;#rm -rf $VARIABLE/*&lt;/code&gt; where &lt;code&gt;$VARIABLE&lt;/code&gt; is empty is common enough.&lt;/p&gt;

&lt;p&gt;To avoid the above mistake,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/env/bin bash
set -euxo pipefail
cd $VARIABLE #this will fail if $VARIABLE is unbound
rm -rf ./* # notice the dot (.) before the star
cd - #go back to the previous folder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will only delete files from the current directory down (&lt;code&gt;./&lt;/code&gt;), yet another level of protection.&lt;/p&gt;

&lt;h3 id=&#34;static-code-analysis&#34;&gt;Static code analysis&lt;/h3&gt;

&lt;p&gt;Shell files can also be analyzed statically, (i.e., &lt;a href=&#34;https://en.wikipedia.org/wiki/Lint_(software)&#34; target=&#34;_blank&#34;&gt;lint&lt;/a&gt;). A tool for that is &lt;a href=&#34;https://www.shellcheck.net/&#34; target=&#34;_blank&#34;&gt;ShellCheck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Shellcheck helps you locate possible errors, bugs, stylistic errors and suspicious constructs in your scripts.&lt;/p&gt;

&lt;p&gt;The tool is large enough to warrant another article, but the basic usage is straightforward: run the linter with the shell script as input.&lt;/p&gt;

&lt;p&gt;Some example run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ shellcheck sh1.sh
In sh1.sh line 22:
  destination=${date}-$(basename $file)
                                 ^-- SC2086: Double quote to prevent globbing and word splitting.

In sh1.sh line 25:
  git add $file
          ^-- SC2086: Double quote to prevent globbing and word splitting.


In sh1.sh line 34:
  if [[ -z $(which imagemagick) ]]; then
             ^-- SC2230: which is non-standard. Use builtin &#39;command -v&#39; instead.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: I use the tool with docker (see &lt;a href=&#34;https://github.com/alvarogarcia7/shellcheck-docker&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://github.com/koalaman/shellcheck#installing&#34; target=&#34;_blank&#34;&gt;official docker image&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;how-i-write-my-scripts&#34;&gt;How I write my scripts&lt;/h2&gt;

&lt;p&gt;Usually, I design my scripts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the function &lt;code&gt;process_file&lt;/code&gt; to receive a single element (i.e., the function passed to &lt;code&gt;map&lt;/code&gt; / iterate). This is the hard part&lt;/li&gt;
&lt;li&gt;Create plumbing (either code or manual invocations), putting together the candidates with the other function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;example-1-a-long-lived-script&#34;&gt;Example 1: a long-lived script&lt;/h3&gt;

&lt;p&gt;This is a full example with code to plumb the candidate to the function.&lt;/p&gt;

&lt;p&gt;I want to remove all the existing files in a directory that are greater in size than 30 KB. (I know this can be done with &lt;code&gt;find -exec&lt;/code&gt; or &lt;code&gt;ls | xargs rm&lt;/code&gt;, this is just an example for arbitrary logic).&lt;/p&gt;

&lt;p&gt;First, on the REPL, find all the files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -lh file*
-rw-r--r--  1 user  group     0B Jul 13 00:50 file1.txt
-rw-r--r--  1 user  group     0B Jul 13 00:50 file2.txt
-rw-r--r--  1 user  group   531K Jul 13 00:07 file3.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find files greater than the desired size:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find . -maxdepth 1 -type f -iname &amp;quot;file*.txt&amp;quot; -size +30k -print0
./file3.txt%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;now, only need to delete the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function process_file {
  file=&amp;quot;$1&amp;quot;
  echo &amp;quot;rm $file&amp;quot; # 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: #1 - Notice the &lt;code&gt;echo&lt;/code&gt; command to protect the real execution&lt;/p&gt;

&lt;p&gt;First, I make sure that the plumbing code is all correct before executing commands with side effects (e.g., rm). If you are working with delicate data, you can consider working in a docker container.&lt;/p&gt;

&lt;p&gt;Then, remove the &amp;ldquo;temporary dry-run mode&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function process_file {
  file=&amp;quot;$1&amp;quot;
  rm $file
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The full script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat s2.sh
#!/usr/bin/env bash

function find_files {
   while IFS= read -r -d &#39;&#39; file; do
       files+=( &amp;quot;$file&amp;quot; )
   done &amp;lt; &amp;lt;(find . -maxdepth 1 -type f -iname &amp;quot;file*.txt&amp;quot; -size +30k -print0)
}

function process_file {
  file=&amp;quot;$1&amp;quot;
  rm $file
}

function main {
  declare -a files
  find_files
  for file in &amp;quot;${files[@]}&amp;quot;; do
    process_file &amp;quot;$file&amp;quot;
  done
}

main
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-2-a-one-off-script&#34;&gt;Example 2: a one-off script&lt;/h3&gt;

&lt;p&gt;This is a full example with a manual invocation to plumb the candidate to the function.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the function &lt;code&gt;process_file&lt;/code&gt; to receive a single element (i.e., the function passed to &lt;code&gt;map&lt;/code&gt; / iterate).&lt;/li&gt;
&lt;li&gt;Manually, I will list all files / candidates to a temporary file&lt;/li&gt;
&lt;li&gt;Review the candidates&lt;/li&gt;
&lt;li&gt;(with vim) turn the selected candidates into invocations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, on the REPL, find all the files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -lh file*
-rw-r--r--  1 user  group     0B Jul 13 00:50 file1.txt
-rw-r--r--  1 user  group     0B Jul 13 00:50 file2.txt
-rw-r--r--  1 user  group   531K Jul 13 00:07 file3.txt
-rw-r--r--  1 user  group   531K Jul 13 00:07 file_SUPER_IMPORTANT_DO_NOT_DELETE.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find files greater than the desired size:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find . -maxdepth 1 -type f -iname &amp;quot;file*.txt&amp;quot; -size +30k &amp;gt; candidates.txt
$ cat candidates.txt
./file3.txt
./file_SUPER_IMPORTANT_DO_NOT_DELETE.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, open vim to review, as a way of checking the valid candidates. This is the same process that &lt;code&gt;git rebase --interactive&lt;/code&gt; offers: a CLI command to rebase based on your editor.&lt;/p&gt;

&lt;p&gt;I realize that the file &lt;code&gt;file_SUPER_IMPORTANT_DO_NOT_DELETE.txt&lt;/code&gt; should not be deleted. So I remove that, manually.&lt;/p&gt;

&lt;p&gt;Now,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat candidates.txt
./file3.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then I prefer to edit the file manually than to create a script. Remember, this is a one-off effort. And programs need to be maintained. One-off scripts are to be thrown away, so no maintenance effort.&lt;/p&gt;

&lt;p&gt;Hint: the vim command &lt;code&gt;%s/^/rm /&lt;/code&gt; will insert at the beginning of the line the command &lt;code&gt;rm&lt;/code&gt; that we need. The command &lt;code&gt;%s/$/;/&lt;/code&gt; will append a semicolon at the end of the line. It&amp;rsquo;s not needed for this example, but as a reminder. This replacement can also be done with &lt;code&gt;sed&lt;/code&gt;/&lt;code&gt;awk&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat candidates.txt
rm ./file3.txt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, just execute this file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bash candidates.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And your files are processed. Gone, in this case.&lt;/p&gt;

&lt;h2 id=&#34;limitations&#34;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;Every tool (and metaphor) has its limits. Know when to use a tool and when to change tools.&lt;/p&gt;

&lt;h3 id=&#34;when-is-bash-enough&#34;&gt;When is bash enough&lt;/h3&gt;

&lt;p&gt;Small scripts, simple invocations, etc.&lt;/p&gt;

&lt;p&gt;One-off tasks are perfect for bash: write code, review effects, throw it away. Don&amp;rsquo;t plan on reusing it. Although you can keep a collection of snippets for iterating, dealing with spaces, etc.&lt;/p&gt;

&lt;p&gt;More than 50-100 bash lines (a rough approximation), I consider a small program already. Maybe start thinking on building a better foundation around it.&lt;/p&gt;

&lt;h3 id=&#34;when-it-is-too-much-for-bash&#34;&gt;When it is too much for bash&lt;/h3&gt;

&lt;h4 id=&#34;complex-multi-stage-scripts&#34;&gt;Complex/multi-stage scripts&lt;/h4&gt;

&lt;p&gt;With my current knowledge of bash, I feel that some jobs are not appropriate for bash. For example, when dealing with spaces in strings, arrays, complex functions, etc.&lt;/p&gt;

&lt;p&gt;For that, I prefer a more powerful language, ideally scripting (so I can get a quick feedback cycle.) I&amp;rsquo;ve been playing with Perl lately (works very well), Ruby in the past. I&amp;rsquo;ve heard good things about typescript and go as well.&lt;/p&gt;

&lt;p&gt;Perl works well for powerful scripts that don&amp;rsquo;t need to be tested.&lt;/p&gt;

&lt;p&gt;Ruby works well for programs (no longer scripts) that need to be tested.&lt;/p&gt;

&lt;h4 id=&#34;parameter-autocompletion&#34;&gt;Parameter autocompletion&lt;/h4&gt;

&lt;p&gt;For my build scripts, I enjoy hitting &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; for auto-completion of the goals. Bash does not offer that out of the box (but can be performed using &lt;a href=&#34;https://www.gnu.org/software/bash/manual/bash.html#Programmable-Completion&#34; target=&#34;_blank&#34;&gt;programmable completion&lt;/a&gt;). Make, on the other hand, offers goal autocompletion out of the box:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.PHONY: build
build:
    ./gradlew build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, I can &lt;code&gt;make b&amp;lt;TAB&amp;gt;&lt;/code&gt; and it will suggest &lt;code&gt;make build&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;other-resources&#34;&gt;Other resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shellcheck.net/&#34; target=&#34;_blank&#34;&gt;ShellCheck&lt;/a&gt; helps you check your shell scripts, using static analysis tools: ShellCheck is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/bash/manual/bash.html&#34; target=&#34;_blank&#34;&gt;Bash reference manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://google.github.io/styleguide/shell.xml&#34; target=&#34;_blank&#34;&gt;Google Bash reference guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>