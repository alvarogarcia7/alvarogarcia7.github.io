<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/duplicate/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/duplicate/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tool to Find Duplicate values in Constants</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/30/tool-to-find-duplicate-values-in-constants/</link>
      <pubDate>Thu, 30 Jul 2015 13:42:44 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/30/tool-to-find-duplicate-values-in-constants/</guid>
      <description>&lt;p&gt;Imagine having this java class:&lt;/p&gt;
private static class RepeatedConstants {
    public static final String A = &#34;A&#34;;
    public static final String A_1 = A;
    public static final String A_2 = &#34;A&#34;;

    public static final Integer _3 = 3;
    public static final Integer THREE = 3;
}

&lt;p&gt;I wanted to remove the repeated values in the constants, in an automatic way, because the file was big (&amp;gt; 4000 constants). A way of doing this is basing the differences on the values, directly. To do this, remove all text that is not a value:&lt;/p&gt;

&lt;p&gt;find what, regex mode: &lt;code&gt;^.*=\s*(.*);&lt;/code&gt;
replace with: $1&lt;/p&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^.*=\s*&lt;/code&gt;: any character before the equal sign. Any whitespace right after it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(.*);&lt;/code&gt;: capture everything that is before the semicolon (;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You end up with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;A&amp;quot;
A
&amp;quot;A&amp;quot;

3
3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy it to &lt;code&gt;a.txt&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt; it and &lt;code&gt;uniq&lt;/code&gt; it (to remove duplication):&lt;/p&gt;
cat a.txt | sort | uniq &gt; uniq.txt

&lt;p&gt;then sort the non-uniq version:&lt;/p&gt;
cat a.txt | sort &gt; sorted.txt

&lt;p&gt;and diff among them, to find the repeated values:&lt;/p&gt;
diff sorted.txt uniq.txt

3,4d2
&lt; &#34;A&#34;
&lt; 3

&lt;p&gt;These are the repeated values. The variable &lt;code&gt;public static final String A_1 = A;&lt;/code&gt; was not caught by this as it only has the same value in execution, not staticly.&lt;/p&gt;

&lt;p&gt;For this, at Gmaur, we have developed a small &lt;a href=&#34;https://github.com/GMaur/java-duplicates-detector&#34; target=&#34;_blank&#34;&gt;module to detect duplicates&lt;/a&gt;. The main code is this:&lt;/p&gt;
public class RepeatedFinder {

  private final Class aClass;

  public RepeatedFinder(Class aClass) {
    this.aClass = aClass;
  }

  public MultiMap findDuplicates() throws IllegalAccessException {
    return generateMapFromValueToVariables(aClass).valuesWithMoreThanOneVariable();
  }

  private ValueToNameRepository generateMapFromValueToVariables(Class&lt;?&gt; clazz) throws IllegalAccessException {
    ValueToNameRepository valueToNames = new ValueToNameRepository();
    Field[] fields = clazz.getDeclaredFields();
    Object object = new Object();
    for (Field field : fields) {
      Object value = field.get(object);
      valueToNames.add(value, field.getName());
    }
    return valueToNames;
  }

&lt;p&gt;The tests and the source code can be found here: &lt;a href=&#34;https://github.com/GMaur/java-duplicates-detector&#34; target=&#34;_blank&#34;&gt;https://github.com/GMaur/java-duplicates-detector&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you enjoy it, as much as we have enjoyed writing it!&lt;/p&gt;

&lt;p&gt;Any feedback is welcome.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>