<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>refactor on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/refactor/</link>
    <description>Recent content in refactor on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Sep 2016 20:36:50 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/refactor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Refactoring functional code</title>
      <link>https://alvarogarcia7.github.io/articles/2016/09/28/refactoring-functional-code/</link>
      <pubDate>Wed, 28 Sep 2016 20:36:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/articles/2016/09/28/refactoring-functional-code/</guid>
      <description>With my pairing mate we have refactored this piece of functional code.
Original code:
function filterTokens (rawTokens) { const cleanedTokens = rawTokens.map(token =&amp;gt; (token.length &amp;amp;&amp;amp; token[0] === &amp;#39;-&amp;#39;) ? token.substring(1) : token) return cleanedTokens.filter(token =&amp;gt; token !== &amp;#39;&amp;#39; &amp;amp;&amp;amp; stopWordsArray.indexOf(token) === -1) } Refactored code:
function filterTokens (rawTokens) { const cleanedTokens = rawTokens.map(token =&amp;gt; startsWithADash(token) ? removeDashFrom(token) : token) const processedTokens = cleanedTokens.filter(token =&amp;gt; isNotEmpty(token) &amp;amp;&amp;amp; isNotAStopWord(token)) return processedTokens function startsWithADash (token) { return (token.</description>
    </item>
    
    <item>
      <title>Self-Study in February 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</link>
      <pubDate>Mon, 01 Feb 2016 02:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</guid>
      <description>Software and all that comes with it I&amp;rsquo;ve read these slides about creating software and asking questions to deliver value, by Alberto Brandolini
Tags: alberto-brandolini, software, slide, team-management, agile
Driving your DBA crazy in 3 easy steps I&amp;rsquo;ve read these slides about dealing with the knowledge that is present in the database, not expressed in ubiquitous language and cause of the low bus factor, by Alberto Brandolini
Analogy between the movie The Shining and a model / entities / aggregates.</description>
    </item>
    
    <item>
      <title>Self-Study in December 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</link>
      <pubDate>Wed, 02 Dec 2015 09:50:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</guid>
      <description>Ruby Equality And Object Comparison I&amp;rsquo;ve read this article, written by Alan Skorkin, that explains equality comparisons in ruby:
 equal? is reference equality == is value equality eql? is value and type equality  Tags: ruby, comparison, equality, object, reference, alan-skorkin
Software Folklore I&amp;rsquo;ve watched this PechaKucha by Chris Ford on what are laws and how they relate to creating software. Also talks on what could be an analogy to software creation (says not science, not engineering)</description>
    </item>
    
    <item>
      <title>Brown-bag session: Refactoring legacy code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</link>
      <pubDate>Tue, 23 Jun 2015 19:19:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/23/brown-bag-session-refactoring-legacy-code/</guid>
      <description>Today I have facilitated a brown bag session about refactoring legacy code applications, as this is the case with one of the applications we maintain and add new features to.
The contents of the session:
 Briefly exposing the problem to the team, me taking the role of the Product Owner (PO) Ask the dev team to add an easy feature Do it without tests, as it was so simple that they thought they could do it (using mob programming) Ask if they were satisfied by the patch / fix.</description>
    </item>
    
    <item>
      <title>Demand for TDD and Refactor</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/25/demand-for-tdd-and-refactor/</link>
      <pubDate>Sat, 25 Apr 2015 13:28:20 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/25/demand-for-tdd-and-refactor/</guid>
      <description>When I went to the Jason Gorman&amp;rsquo;s TDD workshop (experience report here), he said something interesting regarding refactor and TDD:
 In job offers / advertisements, TDD is much more in demand than refactor. But the latter is included in the former as an integral part.
Jason Gorman
 I agree with the second thought: you cannot properly do TDD without refactoring, as it is an integral part; also the third phase.</description>
    </item>
    
    <item>
      <title>Destructuring as a refactor in Clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure/</link>
      <pubDate>Tue, 14 Apr 2015 23:36:23 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure/</guid>
      <description>Manuel has taught us today about the default value while destructuring:
 The following example illustrates the use of an :as directive to bind a local with the entire map.
 user=&amp;gt; (def point {:x 5 :y 7}) #&#39;user/point (let [{:keys [x y] :as the-point} point] (println &amp;quot;x:&amp;quot; x &amp;quot;y:&amp;quot; y &amp;quot;point:&amp;quot; the-point)) x: 5 y: 7 point: {:x 5, :y 7}  We&amp;rsquo;ve now seen the :as directive used for both vectors and maps.</description>
    </item>
    
    <item>
      <title>Trimming your plants</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/02/trimming-your-plants/</link>
      <pubDate>Thu, 02 Apr 2015 23:13:45 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/02/trimming-your-plants/</guid>
      <description>This post belongs to the growing-software series
Imagine this situation: the code works. You are at this stage
Disregarding the tests, the production code is complete. Could be better, but it is ready if you are in a hurry.
Now, picture your test as a plant in a plant pot: it might be healthy on the outside (external quality) but how are their roots (internal quality)?
Do you imagine them in an ordered fashion or in a jungle of roots?</description>
    </item>
    
  </channel>
</rss>
