<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hypothesis on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/hypothesis/</link>
    <description>Recent content in hypothesis on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Apr 2016 00:08:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/hypothesis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self-Study in April 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/01/self-study/</link>
      <pubDate>Fri, 01 Apr 2016 00:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/01/self-study/</guid>
      <description>Deliberate Practice: What It Is and Why You Need It I&amp;rsquo;ve read this article by Corbett Barr on what is deliberate practice and why it is needed to become an expert in a given domain field.
The four essential components:
 Motivation Tailored (practice) Feedback Repetion  Tags: corbett-barr, deliberate-practice, expert, practice, anders-ericsson, talent, professional-development, career
10 Features I Wish Java Would Steal From the Kotlin Language I&amp;rsquo;ve read this list of features that the Kotlin Language has that would be an improvement for the Java language.</description>
    </item>
    
    <item>
      <title>Self-Study in March 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</link>
      <pubDate>Wed, 02 Mar 2016 12:58:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</guid>
      <description>Learning Programming Isnâ€™t That Hard, Deep Work Is Hard I&amp;rsquo;ve read this article by Benedict Fritz on two types of work (i.e., deep and shallow) and how programming is of the deep type. He links the difficulty of learning to program to the difficulty of practicing deep work.
Tags: analogy, benedict-fritz, deep-work, shallow-work, learn-to-program, psychology
BeCodeWeek by Yeray Darias I&amp;rsquo;ve read this category of posts by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.</description>
    </item>
    
    <item>
      <title>Self-Study in August 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</link>
      <pubDate>Sun, 02 Aug 2015 21:45:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</guid>
      <description>Humble Object I&amp;rsquo;ve read the Humble Object list of patterns, by Gerard Meszaros, including:
 humble dialog humble executable humble transaction controller humble container adapter  Tags: pattern, gerard-meszaros
How you know I&amp;rsquo;ve reread this small essay by Paul Graham on storing information in our heads, based on the context. On the importance of rereading, to add more contexts to the initial one.
Tags: paul-graham, reread, read
Protected Variation: The Importance of Being Closed I&amp;rsquo;ve read this article by Craig Larman in the magazine IEEE Software &amp;gt; Design.</description>
    </item>
    
    <item>
      <title>Logging is a feature</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/19/logging-is-a-feature/</link>
      <pubDate>Sun, 19 Apr 2015 23:43:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/19/logging-is-a-feature/</guid>
      <description>At a client, we&amp;rsquo;re facing this challenge: we cannot access production logs, as we don&amp;rsquo;t have access to production environments. The solution we&amp;rsquo;ve chose is to implement the logging component as a layer on top of Splunk.
This formatter layer &amp;ndash;per component&amp;ndash; accesses a generic layer &amp;ndash;for the whole company&amp;ndash; that accesses splunk. In this manner, it is very easy to reuse the splunk connection and configuration and inject mocks. Also helps with the local environment: you always log to console (even if in production you don&amp;rsquo;t have access to it) and can disable this in local, not needing a local splunk installation.</description>
    </item>
    
    <item>
      <title>A legacy code introduction</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/21/a-legacy-code-introduction/</link>
      <pubDate>Sat, 21 Feb 2015 20:05:46 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/21/a-legacy-code-introduction/</guid>
      <description>This is one of the best legacy code introductions I&amp;rsquo;ve seen:
 The Grand Redesign in the Sky
Eventually the team rebels. They inform management that they cannot continue to develop in this odious code base. They demand a redesign. Management does not want to expend the resources on a whole new redesign of the project, but they cannot deny that productivity is terrible. Eventually they bend to the demands of the developers and authorize the grand redesign in the sky.</description>
    </item>
    
    <item>
      <title>Your First Language</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/02/your-first-language/</link>
      <pubDate>Mon, 02 Feb 2015 21:25:37 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/02/your-first-language/</guid>
      <description>After reading (in a specific order - below) part of the patterns in Apprenticeship Patterns, I stumbled upon the &amp;ldquo;Your First Language&amp;rdquo;
First of all, the illustration with the baby reading a Java book is priceless.
Having said that, I came to the realization that you might not know a paradigm but just an implementation (e.g., you don&amp;rsquo;t know about Object-Oriented programming but just about Java), in the same fashion as you could not know about LISPs but only about an implementation, such as clojure.</description>
    </item>
    
    <item>
      <title>Should we start the TDD cycle on refactor?</title>
      <link>https://alvarogarcia7.github.io/blog/2014/12/29/should-we-start-the-tdd-cycle-on-refactor/</link>
      <pubDate>Mon, 29 Dec 2014 20:30:01 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2014/12/29/should-we-start-the-tdd-cycle-on-refactor/</guid>
      <description>In this lexical scope, TDD by example is referring to this book1, available on Amazon
###The TDD cycle
Altough Kent Beck in his book Test-Driven Development by example explains in &amp;ldquo;Part I: the money example&amp;rdquo;2 that one should
 quickly add a test;
  run all the tests and see the new one fail [&amp;hellip;]
  Kent Beck  Implying that the TDD cycle starts with the red. Later on he explains that the cycle continues with green and refactor and back to red.</description>
    </item>
    
  </channel>
</rss>
