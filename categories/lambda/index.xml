<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lambda on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/lambda/</link>
    <description>Recent content in Lambda on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Mar 2016 12:58:19 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/lambda/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in March 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</link>
      <pubDate>Wed, 02 Mar 2016 12:58:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</guid>
      <description>

&lt;h2 id=&#34;learning-programming-isn-t-that-hard-deep-work-is-hard&#34;&gt;Learning Programming Isn’t That Hard, Deep Work Is Hard&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@benedictfritz/learning-programming-isn-t-that-hard-deep-work-is-hard-40a4cf3104f4&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Benedict Fritz on two types of work (i.e., deep and shallow) and how programming is of the deep type. He links the difficulty of learning to program to the difficulty of practicing deep work.&lt;/p&gt;

&lt;p&gt;Tags: analogy, benedict-fritz, deep-work, shallow-work, learn-to-program, psychology&lt;/p&gt;

&lt;h2 id=&#34;becodeweek-by-yeray-darias&#34;&gt;BeCodeWeek by Yeray Darias&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://developerscookbook.blogspot.com.es/search/label/desk-surfing&#34; target=&#34;_blank&#34;&gt;this category of posts&lt;/a&gt; by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.&lt;/p&gt;

&lt;p&gt;Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc&lt;/p&gt;

&lt;p&gt;Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis&lt;/p&gt;

&lt;h2 id=&#34;becodeweek-by-yeray-darias-1&#34;&gt;BeCodeWeek by Yeray Darias&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://developerscookbook.blogspot.com.es/search/label/desk-surfing&#34; target=&#34;_blank&#34;&gt;this category of posts&lt;/a&gt; by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.&lt;/p&gt;

&lt;p&gt;Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc&lt;/p&gt;

&lt;p&gt;Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis&lt;/p&gt;

&lt;h2 id=&#34;tracer-bullets&#34;&gt;Tracer Bullets&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://c2.com/cgi/wiki?TracerBullets&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt; about tracer bullets, an analogy from the military warfare to a software project.&lt;/p&gt;

&lt;p&gt;Serves the purpose of adjusting the aim of the cannon to better reach the target.&lt;/p&gt;

&lt;p&gt;Tags: analogy, metaphor, warfare, management&lt;/p&gt;

&lt;h2 id=&#34;cohesion-the-cornerstone-of-software-design&#34;&gt;Cohesion - the cornerstone of software design&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://codurance.com/2016/03/03/cohesion-cornerstone-software-design/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sandro Mancuso on the topic of cohesion. Describes the 7 types of cohesion, as described in Structured Design&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, from worst to best:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coincidental cohesion&lt;/li&gt;
&lt;li&gt;Logical cohesion&lt;/li&gt;
&lt;li&gt;Temporal cohesion&lt;/li&gt;
&lt;li&gt;Procedural cohesion&lt;/li&gt;
&lt;li&gt;Communicational/informational cohesion&lt;/li&gt;
&lt;li&gt;Sequential cohesion&lt;/li&gt;
&lt;li&gt;Functional cohesion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and about Design-Level Cohesion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coincidental relation (R1)&lt;/li&gt;
&lt;li&gt;Conditional relation (R2)&lt;/li&gt;
&lt;li&gt;Iterative relation (R3)&lt;/li&gt;
&lt;li&gt;Communication relation (R4)&lt;/li&gt;
&lt;li&gt;Sequential relation (R5)&lt;/li&gt;
&lt;li&gt;Functional (R6)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: cohesion, codurance, edward-yourdon, larry-constantine, list, sandro-mancuso, software-design, design-level-cohesion, smc-cohesion, dlc-cohesion&lt;/p&gt;

&lt;h2 id=&#34;etsy-cto-q-a-we-need-software-engineers-not-developers&#34;&gt;Etsy CTO Q&amp;amp;A: We Need Software Engineers, Not Developers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/etsy-cto-qa-need-software-engineers-not-developers/&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt; with John Allspaw, where they explain the onboarding experience for new hires at Etsy, the DevOps philosophy and the need for engineering skills, more than developer skills. This can be exemplified in the need to know more, defining the boundaries of your job and finding the right tool for the job.&lt;/p&gt;

&lt;p&gt;Tags: devops, interview, q-and-a, john-allspaw, etsy, onboarding, hire, team-management, deploy&lt;/p&gt;

&lt;h2 id=&#34;frequency-reduces-difficulty&#34;&gt;Frequency Reduces Difficulty&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://martinfowler.com/bliki/FrequencyReducesDifficulty.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Martin Fowler on why we should repeat things that are difficult for us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perfectioning the technique&lt;/li&gt;
&lt;li&gt;Internalizing the details&lt;/li&gt;
&lt;li&gt;Easing its automation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: martin-fowler, automation, process, perfection, internalizing, technique, detail, process-theory, agile&lt;/p&gt;

&lt;h2 id=&#34;lambdas-are-confusing&#34;&gt;Lambdas are confusing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this video where Coman Hamilton from JAXenter interviews Dr. Heinz Kabutz about Java&amp;rsquo;s lambda syntax. Cites the problem with exceptions, generics, method overloading.&lt;/p&gt;

&lt;p&gt;Tags: java, lambda, coman-hamilton, jaxenter, heinz-kabutz, problem&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WcHom1eVhi4&amp;amp;feature=youtu.be&#34; target=&#34;_blank&#34;&gt;https://www.youtube.com/watch?v=WcHom1eVhi4&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;el-full-stack-developer-en-2016&#34;&gt;El full-stack developer en 2016&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.developerdepueblo.com/development/full-stack-developer-2016/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jose Ignacio Andrés about the job descriptions of 2016.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;El principal valor de un full-stack es poder simplificar el trabajo a los demás miembros del equipo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My translation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The main value of a full-stack developer is to be able to simplify other teammates&amp;rsquo; work&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: teamwork, teammate, fullstack, simplification, work, team-management, jose andres&lt;/p&gt;

&lt;h2 id=&#34;i-am-a-software-craftsman&#34;&gt;I am a software craftsman&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.dirv.me/i-am-a-software-craftsman/index.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Daniel Irvine about calling yourself a craftsman or not. He says that if you adhere to their values, you should.&lt;/p&gt;

&lt;p&gt;Tags: craftsmanship, label, daniel-irvine, craftsman, group-belonging&lt;/p&gt;

&lt;h2 id=&#34;teaching-programming-languages-in-a-post-linnaean-age&#34;&gt;Teaching Programming Languages in a Post-Linnaean Age&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://cs.brown.edu/~sk/Publications/Papers/Published/sk-teach-pl-post-linnaean/paper.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; by Shriram Krishnamurthi where he explains the need for books like &lt;a href=&#34;http://www.plai.org/&#34; target=&#34;_blank&#34;&gt;PLAI&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lack of paradigms in new languages, and its separation (or lack of)&lt;/li&gt;
&lt;li&gt;design of languages cheaper and cheaper these days&lt;/li&gt;
&lt;li&gt;rigor level in publications&lt;/li&gt;
&lt;li&gt;inductive and deductive learning
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;post-Linnaean&lt;/code&gt; refers to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Carl_Linnaeus&#34; target=&#34;_blank&#34;&gt;Carl Linnaeus&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;He is known as the father of modern taxonomy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: inductive-learning, deductive-learning, dsl, domain-specific-language, type-soundness, continuation-style, garbage-collection, reactive-programming, scheme, plai, teaching, programming-language, shriram-krishnamurthi&lt;/p&gt;

&lt;h2 id=&#34;lazy-ruby&#34;&gt;Lazy Ruby&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://sonnym.github.io/2014/04/05/lazy-ruby/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by sonnym about using ruby&amp;rsquo;s lazy (non-strict) features, detailing an example with Fibonacci&amp;rsquo;s sequence.&lt;/p&gt;

&lt;p&gt;Tags: laziness, strictness, non-strictness, ruby, fibonacci, comparison&lt;/p&gt;

&lt;h2 id=&#34;jessica-livingston&#34;&gt;Jessica Livingston&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://paulgraham.com/jessica.html&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Paul Graham about his co-founder at the Y-combinator: Jessica Livingston. She was considered the Social Radar at YC&lt;/p&gt;

&lt;p&gt;The essay also talks about the non-existent separation between working hours and not and about her implication and personality.&lt;/p&gt;

&lt;p&gt;Tags: jessica-livingston, paul-graham, y-combinator, feminism, yc, essay&lt;/p&gt;

&lt;h2 id=&#34;four-laws-of-software-economics-part-1&#34;&gt;Four Laws Of Software Economics (Part 1)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@RichMironov/four-laws-of-software-economics-part-1-e162aa0ea9e5&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Rich Mironov on why the development team will never be big enough (because of economics, because there are more things to be done than time to do them, so we have to prioritize them) and about the communication problems between the dev team and the client(s).&lt;/p&gt;

&lt;p&gt;Also talks about the general personality of clients and devs and task prioritization&lt;/p&gt;

&lt;p&gt;Tags: exclusive-or, magical-thinking, tnstaafl, management, agile, team, capacity, death-march, estj, intp, software-economics, product-strategy, law-of-ruthless-prioritization, law, rich-mironov, slack, myers-briggs-type&lt;/p&gt;

&lt;h2 id=&#34;you-should-take-a-codecation&#34;&gt;You Should Take A Codecation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://robots.thoughtbot.com/you-should-take-a-codecation&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ben Orenstein explaining what is a codecation and what he&amp;rsquo;s done in the two codecations he&amp;rsquo;s taken.&lt;/p&gt;

&lt;p&gt;Tags: codecation, ben-orenstein, vacation, holiday, coding, shipping, in-company&lt;/p&gt;

&lt;h2 id=&#34;giving-up-on-tdd&#34;&gt;Giving Up on TDD&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://iansommerville.com/systems-software-and-technology/giving-up-on-test-first-development/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ian Sommerville about the problems he&amp;rsquo;s found while doing TDD, mainly about design, but also about being conservative in the amount of tests you allow yourself to break while refactoring.&lt;/p&gt;

&lt;p&gt;Tags: tdd, ian-sommerville, refactoring, problem, design-problem, design, giving-up-tdd&lt;/p&gt;

&lt;h2 id=&#34;giving-up-on-tdd-answer&#34;&gt;Giving Up on TDD - answer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.cleancoder.com/uncle-bob/2016/03/19/GivingUpOnTDD.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Robert C. Martin on the common issues for people adopting TDD:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Fragile Test Problem&lt;/li&gt;
&lt;li&gt;The Design Problem&lt;/li&gt;
&lt;li&gt;The Testable Design Problem&lt;/li&gt;
&lt;li&gt;The Magic Bullet Problem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article is an answer to another by Ian Sommerville.&lt;/p&gt;

&lt;p&gt;Tags: tdd, uncle-bob, robert-martin, adoption, ian-sommerville, fragile-test-problem, giving-up-tdd, design-problem, testable-design-problem, magic-bullet-problem&lt;/p&gt;

&lt;h2 id=&#34;seek-out-jobs-with-fast-learning-cycles&#34;&gt;Seek out jobs with fast learning cycles&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@sarahtavel/seek-out-jobs-with-fast-learning-cycles-f923c8d8a4be#.7bxx65a4x&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sarah Tavel on learning on the job and how fast these learning cycles can happen at companies at different stages of maturity.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So if you’re thinking of changing jobs, or taking your first, my advice: find a place with a fast learning cycle, and a steep learning curve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: learning, job, hypothesis, sarah-tavel, learning-cycle, maturity-level, learning-process, product-management&lt;/p&gt;

&lt;h2 id=&#34;clean-code-vs-implementation-patterns&#34;&gt;Clean Code Vs. Implementation Patterns&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.xebia.com/clean-code-vs-implementation-patterns/&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; of Clean Code vs Implementation Pattern books, by Vincent Partington.&lt;/p&gt;

&lt;p&gt;In it, the author explains the differences in style in both books, and how they compare to others.&lt;/p&gt;

&lt;p&gt;Tags: clean-code, implementation-patterns, comparison, book-review, book-comparison, vincent-partington&lt;/p&gt;

&lt;h2 id=&#34;stuck-in-traffic-vlog-103-new-spammer-techniques&#34;&gt;Stuck in Traffic vlog #103 - New Spammer Techniques&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.peerlyst.com/posts/stuck-in-traffic-vlog-103-new-spammer-techniques-j-wolfgang-goerlich&#34; target=&#34;_blank&#34;&gt;this vlog entry&lt;/a&gt; on machines fighting machines (exemplified with the spam producing and filtering) and how some spammers are trying more direct techniques focusing on higher-value targets, sometimes even handcrafting messages and modifying them every few units.&lt;/p&gt;

&lt;p&gt;Tags: wolfgang-goerlich, spam, vlog, spammer, machine-learning&lt;/p&gt;

&lt;h2 id=&#34;becoming-a-finisher&#34;&gt;Becoming A Finisher&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://christopherdbui.com/becoming-a-finisher/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Christopher Bui where he explains that projects that are too ambitious stall your productivity and make you lose your focus.&lt;/p&gt;

&lt;p&gt;Tags: christopher-bui, pomodoro, time-management, productivity, motivation, ambition, paul-graham, quote&lt;/p&gt;

&lt;h2 id=&#34;hanging-around-with-red-black-tree-implementations-the-beginnings&#34;&gt;Hanging around with red-black tree implementations: the beginnings&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.fraixed.es/post/hanging-around-red-black-trees-implementations/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ivan Fraixedes where he details the progress of implementing a red-black tree, and also his motivation for doing it.&lt;/p&gt;

&lt;p&gt;Tags: ivan-fraixedes, red-black-tree, abstract-data-structure, adt, deliberate-practice, pet-project&lt;/p&gt;

&lt;h2 id=&#34;some-tools-for-faster-blogging-in-octopress&#34;&gt;Some Tools for Faster Blogging in Octopress&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://dgmstuart.github.io/blog/2015/03/27/some-tools-for-faster-blogging-in-octopress/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; for tips and tricks on how to blog faster with octopress. Written by Duncan Stuart.&lt;/p&gt;

&lt;p&gt;Tags: duncan-stuart, blog, improvement, meta, octopress, tip-and-trick&lt;/p&gt;

&lt;h2 id=&#34;the-veil-of-ignorance&#34;&gt;The veil of ignorance&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mrmrs.io/writing/2016/03/23/the-veil-of-ignorance/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Adam Morse on how not being on the top of the skills performance can affect your design and your user experience. Also, references the concept of &amp;ldquo;The Veil of Ignorance&amp;rdquo;, a concept by John Rawls.&lt;/p&gt;

&lt;p&gt;Tags: john-rawls, veil-of-ignorance, user-experience, design&lt;/p&gt;

&lt;h2 id=&#34;to-smile-again-recovering-from-the-paralysis-of-burnout&#34;&gt;To Smile Again &amp;ndash; Recovering from the paralysis of burnout&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://m.signalvnoise.com/to-smile-again-ae0ba9f2198c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jamis Buck on his story of burnout, what symptoms had on him and how he got out of it.&lt;/p&gt;

&lt;p&gt;Tags: burnout, jamis-buck, psychology, productivity, personal, story, analogy&lt;/p&gt;

&lt;h2 id=&#34;beyond-email-could-startup-slack-change-the-way-you-work&#34;&gt;Beyond email: could startup Slack change the way you work?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.theguardian.com/technology/2016/mar/25/slack-butterfield-emoji-chat-nasa-harvard-silicon-valley&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on Slack&amp;rsquo;s office culture, with their diversity, policies and values after a high people growth in a short period of time. By Jemima Kiss&lt;/p&gt;

&lt;p&gt;Tags: culture, office-culture, slack, jemima-kiss&lt;/p&gt;

&lt;h2 id=&#34;slack-work-this-way&#34;&gt;Slack: Work This Way&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@iaintait/slack-work-this-way-9221284472dd&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, a response to my above read, about the office culture at Slack.&lt;/p&gt;

&lt;p&gt;Tags: iain-tait, response, slack, office-culture&lt;/p&gt;

&lt;h2 id=&#34;bem-101&#34;&gt;BEM 101&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://css-tricks.com/bem-101/&#34; target=&#34;_blank&#34;&gt;this introduction&lt;/a&gt; to a CSS style called Block, Element, Modifier methodology (BEM).&lt;/p&gt;

&lt;p&gt;In it,&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;a block is a top-level abstraction of a new component&lt;/li&gt;
&lt;li&gt;Child items, or elements, can be placed inside and these are denoted by two underscores following the name of the block [&amp;hellip;].
modifiers can manipulate the block so that we can theme or style that particular component without inflicting changes on a completely unrelated module. This is done by appending two hyphens to the name of the block [&amp;hellip;].&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;By Joe Richardson, Robin Rendle et al.&lt;/p&gt;

&lt;p&gt;Tags: joe-richardson, robin-rendle, bem, css, css-methodology, introduction, css-architecture, sass&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Structured Design: Fundamentals of a Discipline of Computer Program and Systems Design by Yourdon and Constantine.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Validating CSV data in clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/15/validating-csv-data-in-clojure/</link>
      <pubDate>Tue, 15 Dec 2015 11:52:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/15/validating-csv-data-in-clojure/</guid>
      <description>

&lt;p&gt;At a client, we have CSVs of data that can be simplified to this &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;[&lt;/span&gt;
           &lt;span class=&#34;nv&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;total&amp;quot;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;13]&lt;/span&gt;
           &lt;span class=&#34;nv&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;     &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;3]&lt;/span&gt;
           &lt;span class=&#34;nv&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;     &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;4]&lt;/span&gt;
           &lt;span class=&#34;nv&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;     &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;6]&lt;/span&gt;
          &lt;span class=&#34;nv&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, some of the row named &lt;code&gt;total&lt;/code&gt; is the sum of the rest of the rows, but only for some columns (second and fourth). We do not want to get rid of the columns, as they need to be printed at the end.&lt;/p&gt;

&lt;p&gt;This is what we need to validate:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sum (rest [1]) = total [1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sum (rest [3]) = total [3]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;this could be written as a one-off program but a better alternative for us was to write a program and let users decide what columns to validate. In the future, power users will write their own validations &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, thus creating an environment where users are no longer dependent on programmers as coupling business users to programmers does not scale.&lt;/p&gt;

&lt;!--
TODO
expand on this idea for another post:

thus creating an environment where users are no longer dependent on programmers as coupling business users to programmers does not scale. 

teach someone to fish vs fish for them

--&gt;

&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;The full &lt;a href=&#34;https://github.com/alvarogarcia7/clojure-simple-sessions/blob/master/test/simple/check-data-with-hofs.clj&#34; target=&#34;_blank&#34;&gt;source code is here&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sum-eq-total&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;[selector&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dataset]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;letfn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;total-and-rest&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;[coll]&lt;/span&gt;
             &lt;span class=&#34;nv&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;[[total&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rest-dataset]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;total-and-rest&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dataset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;selected-total&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;selector&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;selected-column&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;selector&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rest-dataset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;sum-of-column&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;reduce&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;selected-column&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;selected-total&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sum-of-column&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;validate-columns&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;[indices&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;[generate-selector&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;#(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;[dataset]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;nth&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dataset&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
         &lt;span class=&#34;nv&#34;&gt;selectors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;generate-selector&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;indices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;nv&#34;&gt;check-selector&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;#(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sum-eq-total&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;]&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;check-selector&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;selectors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We define the domain concept of &lt;code&gt;selector&lt;/code&gt; for pointing to a dataset column&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;generate-selector&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;#(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;[dataset]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;nth&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dataset&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This expression creates selectors based on a given index. It is a lambda that returns a function, thus being a HOF&lt;/p&gt;

&lt;p&gt;Users can use the application in this fashion:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;simple.core=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;validate-columns&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;[1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;3]&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The full &lt;a href=&#34;https://github.com/alvarogarcia7/clojure-simple-sessions/blob/master/test/simple/check-data-with-hofs.clj&#34; target=&#34;_blank&#34;&gt;source code is here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Working on the REPL for this problem has been a very good idea, but working in a spreadsheet software has been even better. Even faster feedback cycle &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The inclusion of the HOF for validating the data has paid its cost (good RoI)&lt;/p&gt;

&lt;p&gt;Do not limit what your users can do, let them decide but do not complicate things unnecessarily. Know when to stop adding features and limit work to prevent YAGNI.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;for more information and a spike on reading CSV data in clojure, &lt;a href=&#34;https://github.com/alvarogarcia7/clojure-simple-sessions/blob/master/src/simple/check-media-csv.clj&#34; target=&#34;_blank&#34;&gt;this spike&lt;/a&gt; may be useful
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;for the time being, there are no power users and no need to enable these custom validators. Doing it now would be YAGNI
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;in the case here, the data and business rules are so simple that there is no need for this software.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in August 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</link>
      <pubDate>Sun, 02 Aug 2015 21:45:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</guid>
      <description>

&lt;h2 id=&#34;humble-object&#34;&gt;Humble Object&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the &lt;a href=&#34;http://xunitpatterns.com/Humble%20Object.html&#34; target=&#34;_blank&#34;&gt;Humble Object&lt;/a&gt; list of patterns, by Gerard Meszaros, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;humble dialog&lt;/li&gt;
&lt;li&gt;humble executable&lt;/li&gt;
&lt;li&gt;humble transaction controller&lt;/li&gt;
&lt;li&gt;humble container adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: pattern, gerard-meszaros&lt;/p&gt;

&lt;h2 id=&#34;how-you-know&#34;&gt;How you know&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve reread &lt;a href=&#34;http://www.paulgraham.com/know.html&#34; target=&#34;_blank&#34;&gt;this small essay&lt;/a&gt; by Paul Graham on storing information in our heads, based on the context. On the importance of rereading, to add more contexts to the initial one.&lt;/p&gt;

&lt;p&gt;Tags: paul-graham, reread, read&lt;/p&gt;

&lt;h2 id=&#34;protected-variation-the-importance-of-being-closed&#34;&gt;Protected Variation: The Importance of Being Closed&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.martinfowler.com/ieeeSoftware/protectedVariation.pdf&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Craig Larman in the magazine IEEE Software &amp;gt; Design.&lt;/p&gt;

&lt;p&gt;Discusses Information Hiding, Protected Variation and the Open-Closed Principle.&lt;/p&gt;

&lt;p&gt;Tags: craig-larman, ocp, open-closed principle, design, information-hiding, ih, protected-variation, pv,&lt;/p&gt;

&lt;h2 id=&#34;lambda-javascript-micro-services-on-aws&#34;&gt;Lambda, Javascript Micro-Services on AWS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.jayway.com/2014/12/18/lambda-javascript-micro-services-aws/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; explaining how to deploy a microservice on AWS on top of Lambda. Written by Anders Janmyr&lt;/p&gt;

&lt;p&gt;The cool thing is that you get billed by milliseconds!&lt;/p&gt;

&lt;p&gt;Tags: anders-janmyr, devops, microservice, lambda, aws&lt;/p&gt;

&lt;h2 id=&#34;migrating-to-clojure-so-much-fn&#34;&gt;Migrating To Clojure. So Much Fn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=Hv4slaRydRM&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Jan Stępień where he talks about his experience on migrating part of an application to clojure from ruby on rails&lt;/p&gt;

&lt;p&gt;Tags: jan-stepien, clojure, migration, ruby-on-rails, talk, wrocloverb&lt;/p&gt;

&lt;h2 id=&#34;te-recomiendo-escribir-en-un-blog&#34;&gt;Te recomiendo escribir en un blog&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/07/te-recomiendo-escribir-en-un-blog/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; from Carlos Blé in which he recommends writing a blog, on things we discover along the way. (Spanish)&lt;/p&gt;

&lt;p&gt;Tags: carlos-ble, meta, blog, long-way&lt;/p&gt;

&lt;h2 id=&#34;we-need-enough-technical-debt&#34;&gt;We need enough technical debt&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.svpino.com/2015/08/05/we-need-enough-technical-debt&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why we need to accumulate a bit of technical debt, as a way of being less perfectionist and deliver more features / value to our stakeholders. Written by Santiago L. Valdarrama.&lt;/p&gt;

&lt;p&gt;Tags: santiago-valdarrama, technical-debt, perfectionism&lt;/p&gt;

&lt;h2 id=&#34;escribe-mejores-tests-en-javascript&#34;&gt;Escribe mejores tests en Javascript&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://carlosvillu.com/escribe-mejores-tests-en-javascript/&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of tips to write better javascript tests (Spanish). By Carlos Villuendas&lt;/p&gt;

&lt;p&gt;Tags: carlos-villuendas, javascript, test&lt;/p&gt;

&lt;h2 id=&#34;down-the-rabbit-hole&#34;&gt;Down the Rabbit Hole&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole&#34; target=&#34;_blank&#34;&gt;this wiki&lt;/a&gt; page on how to tune some aspects of the server hotspot JVM, by Brett Wooldridge&lt;/p&gt;

&lt;p&gt;Tags: performance, jvm, hotspot, inline, bytecode, brett-wooldridge&lt;/p&gt;

&lt;h2 id=&#34;xp-manchester-lightning-talks-2015-live-broadcast&#34;&gt;XP Manchester Lightning Talks 2015 Live broadcast&lt;/h2&gt;

&lt;p&gt;I have watched the first two &lt;a href=&#34;https://www.youtube.com/watch?v=VD4UEW2i7hU&#34; target=&#34;_blank&#34;&gt;lightning talks&lt;/a&gt; from XP Manchester, edition number 61.&lt;/p&gt;

&lt;p&gt;Tags: lightning-talk, broadcast, simplicity, manchester, 2015&lt;/p&gt;

&lt;h2 id=&#34;counting-hash-collisions-with-the-birthday-paradox&#34;&gt;Counting hash collisions with the birthday paradox&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://matt.might.net/articles/counting-hash-collisions/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the birthday paradox, or the percentage of chance of people sharing the same birthday. This could be applied to hash function, as the title says, but is not included in the article. Written by Matt Might&lt;/p&gt;

&lt;h2 id=&#34;why-i-m-the-best-programmer-in-the-world&#34;&gt;Why I&amp;rsquo;m The Best Programmer In The World*&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/why-im-the-best-programmer-in-the-world/&#34; target=&#34;_blank&#34;&gt;this ironically-titled article&lt;/a&gt; by Jeff Atwood on humility and how to improve as a programmer.&lt;/p&gt;

&lt;p&gt;Tags: jeff-atwood&lt;/p&gt;

&lt;h2 id=&#34;the-key-to-giving-and-receiving-negative-feedback&#34;&gt;The Key to Giving and Receiving Negative Feedback&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/2015/08/the-key-to-giving-and-receiving-negative-feedback?&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joseph Grenny about how to give and receive negative feedback. It is exemplified by the plant manager who was expecting another kind of feedback from his subordinates and was surprised by their negative feedback.&lt;/p&gt;

&lt;p&gt;Tags: joseph-grenny, negative-feedback, feedback, by-example&lt;/p&gt;

&lt;h2 id=&#34;testing-clojure-web-applications-with-kerodon&#34;&gt;Testing Clojure web applications with Kerodon&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://semaphoreci.com/community/tutorials/testing-clojure-web-applications-with-kerodon&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; on how to test compojure-based applications with kerodon. Written by Nebojša Stričević&lt;/p&gt;

&lt;p&gt;Tags: nebojsa-stricevic, compojure, kerodon, clojure, testing, guide&lt;/p&gt;

&lt;h2 id=&#34;using-the-option-type-effectively&#34;&gt;Using The Option Type Effectively&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/uku-taht/2015/04/29/using-the-option-type-effectively.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how to use the &lt;code&gt;Option&lt;/code&gt; type (in rust), similar to &lt;code&gt;Optional&lt;/code&gt; in java or &lt;code&gt;Maybe&lt;/code&gt; in haskell. Written by Uku Taht.&lt;/p&gt;

&lt;p&gt;Tags: uku-taht, option, maybe, optional, rust&lt;/p&gt;

&lt;h2 id=&#34;when-should-you-think&#34;&gt;When Should You Think?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2014/03/11/when-to-think.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Robert C Martin on when to think and the hypothesis that TDD does not allow you to think before coding.&lt;/p&gt;

&lt;p&gt;Tags: tdd, robert-c-martin, design, hypothesis&lt;/p&gt;

&lt;h2 id=&#34;orthogonal-latin-squares-an-application-of-experiment-design-to-compiler-testing&#34;&gt;Orthogonal latin squares: an application of experiment design to compiler testing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://barbie.uta.edu/~mehra/20_an%20application%20of%20experiment%20design%20to%20compiler%20testing.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; by Robert Mandl on techniques that can be applied to reduce the burden of exhaustive testing to compilers. Preferring &amp;ldquo;surely all relevant distinct combinations&amp;rdquo; we can reduce the amount of testing. This paper tries to formalize the concept of &amp;ldquo;near-exhaustive testing&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: latin-square, robert-mandl, compiler, testing, near-exhaustive-testing, optimization, exhaustive-testing&lt;/p&gt;

&lt;p&gt;##  Practical Type System Benefits&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://themonadreader.files.wordpress.com/2014/04/nccb.pdf&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Neil Brown on benefits of the type system, with examples in haskell. He goes on to explore the benefits of involving the type-checker at compile time to remove type errors and ease the programming effort:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I find that several problems in Haskell can be solved by involving the type system
further: The trick is to involve the type system in ways that provide a big benefit
for the cost, but not going so far that the type system gets in the way of code
that you know &amp;ndash;but can’t easily prove to the compiler&amp;ndash; is safe&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve also learned the concept of the quasi-quoter: similar to a preprocessor, executed at compile time and type-checked&lt;/p&gt;

&lt;p&gt;Tags: neil-brown, quote, quasi-quoter, preprocessor, haskell, monad-reader&lt;/p&gt;

&lt;h2 id=&#34;clojurescript-and-the-blub-paradox&#34;&gt;ClojureScript and the Blub Paradox&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article comparing javascript and clojurescript using the fizzbuzz kata. There is a nice example of the pattern matching for the cases (i.e. &amp;ldquo;switch&amp;rdquo;) of the fizz, buzz. Written by Nate Wildermuth&lt;/p&gt;

&lt;p&gt;Tags: clojurescript, javascript, fizzbuzz, kata, nate-wildermuth&lt;/p&gt;

&lt;h2 id=&#34;no-malinterpretes-tu-carrera&#34;&gt;No malinterpretes tu carrera&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2011/02/no-malinterpretes-tu-carrera/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on (not) changing careers from programmer to designer, analyst, team manager. About the programmer&amp;rsquo;s passion and why not to misinterpret your career. Written by Carlos Blé. In Spanish.&lt;/p&gt;

&lt;p&gt;Tags: carlos-ble, career, programming, management, career-change&lt;/p&gt;

&lt;h2 id=&#34;just-haskell-or-nothing&#34;&gt;Just Haskell or Nothing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://cheecheeo.github.io/just_haskell_or_nothing.html&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; on packaging values in (Just a) or Nothing for possibly failed computations in haskell. Written by John Chee&lt;/p&gt;

&lt;p&gt;Tags: john-chee, haskell, just, nothing, maybe, functor&lt;/p&gt;

&lt;h2 id=&#34;tracking-joy-at-work&#34;&gt;Tracking Joy at Work&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://begriffs.com/posts/2015-03-15-tracking-joy-at-work.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about quantifying happiness at the office (or at work). Joe Nelson, the author of the article, uses the quantifying method described int the book &lt;a href=&#34;http://www.amazon.com/Experience-Sampling-Method-Measuring-Everyday/dp/1412925576/&#34; target=&#34;_blank&#34;&gt;Experience Sampling Method&lt;/a&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Experience_sampling_method&#34; target=&#34;_blank&#34;&gt;wikipedia page&lt;/a&gt;) by Hektner, Schmidt, Csikszentmihalyi.&lt;/p&gt;

&lt;p&gt;The last one, not coincidentally is the author of &lt;a href=&#34;http://www.amazon.com/Flow-The-Psychology-Optimal-Experience/dp/0061339202&#34; target=&#34;_blank&#34;&gt;Flow: The Psychology of Optimal Experience&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tags: mihaly-csikszentmihalyi, flow, quantification, data, experience-sampling, article, joe-nelson&lt;/p&gt;

&lt;h2 id=&#34;going-write-only&#34;&gt;Going &amp;ldquo;Write-Only&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://begriffs.com/posts/2015-04-20-going-write-only.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joe Nelson on going &amp;ldquo;write-only&amp;rdquo; on social media, blogs, news, etc, as opposed to read-only (only consuming media) or read-write (consuming and producing). He cites another programmer, &lt;a href=&#34;http://joey.hess.usesthis.com/&#34; target=&#34;_blank&#34;&gt;Joey Hess&lt;/a&gt; and about the quality and durability of your work.&lt;/p&gt;

&lt;p&gt;Tags: article, joe-nelson, write-only, social-media, reading, philosophy, thoreau, nietzsche, joey-hess&lt;/p&gt;

&lt;h2 id=&#34;create-a-static-site-with-hakyll-github-and-travis-ci&#34;&gt;Create a static site with Hakyll, Github and Travis CI&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://begriffs.com/posts/2014-08-12-create-static-site-with-hakyll-github.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how to create your blog with hakyll and travis ci. Written by Joe Nelson&lt;/p&gt;

&lt;p&gt;Travis ci is used to do continuous integration and automatically deploy each commit to production (github pages).&lt;/p&gt;

&lt;p&gt;Tags: hakyll, haskell, joe-nelson, meta, blog, continuous-deployment, github, github-pages, travis-ci&lt;/p&gt;

&lt;h2 id=&#34;falling-in-love-with-computer-science&#34;&gt;Falling in Love with Computer Science&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=haxusGuUyt4&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Kathy Pham, an American that discovered her passion, her love to computer science a few years ago. She tells the events around computer science from the beginning of college to the current moment.&lt;/p&gt;

&lt;p&gt;Tags: kathy-pham, passion, love, computer-science, autobiography, time-lapse, google-developers&lt;/p&gt;

&lt;h2 id=&#34;duck-typing&#34;&gt;Duck Typing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=h0rTF__RNo4&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Dan Grossman, part of the &lt;a href=&#34;https://www.coursera.org/course/proglang&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Programming Languages&amp;rdquo; MOOC&lt;/a&gt;, in which he explains what is a Duck Type and how to use (and abuse) them in ruby.&lt;/p&gt;

&lt;p&gt;Tags: ruby, dan-grossman, mooc, mooc-programming-languages&lt;/p&gt;

&lt;h2 id=&#34;not-so-private-clojure-functions&#34;&gt;Not-So-Private Clojure Functions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://christophermaier.name/blog/2011/04/30/not-so-private-clojure-functions&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining how to bypass private functions in clojure: either create a lambda or create a different namespace. Written by Christopher Maier&lt;/p&gt;

&lt;p&gt;Tags: private-variable, clojure, testing, joy-of-clojure, christopher-maier, private-function, namespace&lt;/p&gt;

&lt;h2 id=&#34;frege-and-clojure&#34;&gt;Frege (and Clojure)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://seancorfield.github.io/blog/2015/02/13/frege-and-clojure/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that tells the Pragmatic Programmer&amp;rsquo;s advice to learn a new language every year and the author (Sean Corfield) explains his trajectory learning them. He also cites the Lein plugin he&amp;rsquo;s built: &lt;code&gt;lein-fregec&lt;/code&gt; and how to connect clojure and frege (a.k.a JVM&amp;rsquo;s haskell).&lt;/p&gt;

&lt;p&gt;Tags: haskell, frege, jvm, clojure, ffi, pragmatic-programmer, advice, lein-fregec,  sean-corfield, comparison&lt;/p&gt;

&lt;h2 id=&#34;two-months-early-300k-under-budget&#34;&gt;Two months early. 300k under budget&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://thoughtworks.github.io/p2/issue09/two-months-early/&#34; target=&#34;_blank&#34;&gt;the tale&lt;/a&gt; of a Thoughtworks Project Manager who convinced his client to start using clojure to deliver a custom-made CMS. Written by Dave Elliman.&lt;/p&gt;

&lt;p&gt;Tags: dave-elliman, thoughtworks, project-manager, clojure, cms, microservice&lt;/p&gt;

&lt;h2 id=&#34;convince-your-boss-to-use-clojure&#34;&gt;Convince your boss to use Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.lispcast.com/convince-your-boss-to-use-clojure&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; by Eric Normand on how to convince your boss or your company to start using clojure.&lt;/p&gt;

&lt;p&gt;Tags: company, clojure, eric-normand, how-to, guide&lt;/p&gt;

&lt;h2 id=&#34;a-brief-introduction-to-prolog&#34;&gt;A brief introduction to Prolog&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://docs.google.com/presentation/d/1NAUo8nWLfNvvW3Wb7HJMunljjDJbzu7mo-5twKeGDvc/edit#slide=id.g63daf4745_0_56&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about a brief introduction to prolog and how to do web development in it. By Jaelle Scheuerman&lt;/p&gt;

&lt;p&gt;Tags: jaelle-scheuerman, prolog, web-development, rest, slide&lt;/p&gt;

&lt;h2 id=&#34;arrayzing-the-javascript-array-cheatsheet&#34;&gt;Arrayzing - The JavaScript array cheatsheet&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://gist.github.com/ourmaninamsterdam/1be9a5590c9cf4a0ab42&#34; target=&#34;_blank&#34;&gt;this cheatsheet&lt;/a&gt; for javascript arrays. Written by Justin Perry&lt;/p&gt;

&lt;p&gt;Tags: cheatsheet, array, javascript, gist, justin-perry&lt;/p&gt;

&lt;h2 id=&#34;some-words-on-lazy-evaluation-and-sharing&#34;&gt;Some words on lazy evaluation and sharing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://pseudo.fixme.fi/~opqdonut/blog/Some_words_on_lazy_evaluation_and_sharing.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; comparing the &lt;code&gt;fix&lt;/code&gt; definition with a hand-made one and its &amp;ldquo;sharing&amp;rdquo; problems. Written by Joel E. Kaasinen&lt;/p&gt;

&lt;p&gt;Tags: joel-kaasinen, haskell, fix, sharing, non-strictness, lazy-evaluation&lt;/p&gt;

&lt;h2 id=&#34;hammock-driven-development&#34;&gt;Hammock Driven Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=f84n5oFoZBc&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Rich Hickey. A few notes:&lt;/p&gt;

&lt;p&gt;A: identifying a problem that we&amp;rsquo;re trying to solve&lt;/p&gt;

&lt;p&gt;D: assessing if the proposed solution solves the problem&lt;/p&gt;

&lt;p&gt;the union of the features is not the purpose of the product / is not the product&lt;/p&gt;

&lt;p&gt;proramming is not completing features&lt;/p&gt;

&lt;p&gt;avoiding problems /= solving problems&lt;/p&gt;

&lt;p&gt;book: how to solve it - G. Polya. Practices &amp;amp; techniques for solving mathematic problems&lt;/p&gt;

&lt;p&gt;How to solve the problem&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;state the problem&lt;/li&gt;
&lt;li&gt;understand the problem:

&lt;ul&gt;
&lt;li&gt;what do you know: facts, context, constraints.&lt;/li&gt;
&lt;li&gt;what do you don&amp;rsquo;t know&lt;/li&gt;
&lt;li&gt;are there related problems? solutions to related problems. find an analogy: starting from scratch vs incremental step&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;be discerning&lt;/li&gt;
&lt;li&gt;more input, better output:

&lt;ul&gt;
&lt;li&gt;read about your domain problem, research papers (maybe ACM)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;tradeoffs:

&lt;ul&gt;
&lt;li&gt;find at least two options (ups and downs) to compare before taking a decision&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Focus time for programmers like alone time for kids. Hammock time is important mind&amp;rsquo;s eye time&lt;/p&gt;

&lt;p&gt;Waking mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;critical thinking&lt;/li&gt;
&lt;li&gt;analysis&lt;/li&gt;
&lt;li&gt;tactics&lt;/li&gt;
&lt;li&gt;prone to local maxima&lt;/li&gt;
&lt;li&gt;feed work to background mind&lt;/li&gt;
&lt;li&gt;analyze its products&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Background mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;making connections&lt;/li&gt;
&lt;li&gt;synthesis&lt;/li&gt;
&lt;li&gt;strategy&lt;/li&gt;
&lt;li&gt;abstracts, analogies&lt;/li&gt;
&lt;li&gt;solves most non-trivial problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;loading it: work it hard in the waking mind to be included in the background mind&lt;/p&gt;

&lt;p&gt;abstraction = software strategy&lt;/p&gt;

&lt;p&gt;tip: small answer is better than big answer (occam&amp;rsquo;s razor?)​&lt;/p&gt;

&lt;p&gt;Tags: rich-hickey, hammock-driven-development, background-mind, waking-mind, solve-problem, george-polya, book, analysis, design, talk&lt;/p&gt;

&lt;h2 id=&#34;parallelism-concurrency&#34;&gt;Parallelism /= Concurrency&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ghcmutterings.wordpress.com/2009/10/06/parallelism-concurrency/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the differences between parallelism and concurrency, with examples in the haskell compiler GHC. Written by &lt;a href=&#34;https://ghcmutterings.wordpress.com/author/simonmar/&#34; target=&#34;_blank&#34;&gt;simonmar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: haskell, concurrency, parallelism, ghc, simonmar, comparison&lt;/p&gt;

&lt;h2 id=&#34;parallelism-vs-concurrency&#34;&gt;Parallelism vs. Concurrency&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://wiki.haskell.org/Parallelism_vs._Concurrency&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt; from the haskell wiki.&lt;/p&gt;

&lt;p&gt;Tags: haskell, concurrency, parallelism, ghc, comparison&lt;/p&gt;

&lt;h2 id=&#34;writing-code-that-writes-code-with-hack-codegen&#34;&gt;Writing code that writes code — with Hack Codegen&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://code.facebook.com/posts/1624644147776541/writing-code-that-writes-code-with-hack-codegen/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about metaprogramming (code that generates code) in PHP. Written by Alejandro Marcu.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve arrived to this from this tweet:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-cards=&#34;hidden&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;This is what happens when your programming language doesn&amp;#39;t have macros &lt;a href=&#34;https://t.co/ZfsEe2EJIj&#34;&gt;https://t.co/ZfsEe2EJIj&lt;/a&gt;. Yuck.&lt;/p&gt;&amp;mdash; David Nolen (@swannodette) &lt;a href=&#34;https://twitter.com/swannodette/status/634495099607613440&#34;&gt;August 20, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Tags: alejandro-marcu, metaprogramming, php, macro, lisp, clojure&lt;/p&gt;

&lt;h2 id=&#34;how-katas-can-help-you-learn&#34;&gt;How katas can help you learn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://codurance.com/2015/08/18/How-katas-can-help-you-learn/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on learning from katas, with the example of the Roman Numerals kata in Objective-C. Written by Sandro Mancuso.&lt;/p&gt;

&lt;p&gt;Tags: sandro-mancuso, kata, learning, roman-numeral, objective-c&lt;/p&gt;

&lt;h2 id=&#34;java-8-definitive-guide-to-completablefuture&#34;&gt;Java 8: Definitive guide to CompletableFuture&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.nurkiewicz.com/2013/05/java-8-definitive-guide-to.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about Java 8&amp;rsquo;s feature, the &lt;code&gt;CompletableFeature&lt;/code&gt;. Written by Tomasz Nurkiewicz&lt;/p&gt;

&lt;p&gt;Tags: tomasz-nurkiewicz, java-8, completable-future, future, non-blocking, reactive-programming&lt;/p&gt;

&lt;h2 id=&#34;are-you-making-these-10-ddd-mistakes&#34;&gt;Are You Making These 10 DDD Mistakes?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://danielwhittaker.me/2015/07/05/are-you-making-these-10-ddd-mistakes/#&#34; target=&#34;_blank&#34;&gt;this infographic&lt;/a&gt; on 10 DDD common mistakes, by Daniel Whittaker.&lt;/p&gt;

&lt;p&gt;Tags: ddd, daniel-whittaker, bounded-context, ubiquitous-language, infographic&lt;/p&gt;

&lt;h2 id=&#34;haste-full-stack-haskell-for-non-phd-candidates&#34;&gt;Haste: Full-Stack Haskell for Non-PhD Candidates&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=3v03NFcyvzc&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; at the Strange Loop Conference 2014 about Haste language, a haskell version that compiles to javascript, therefore letting you write haskell in the browser. By Erin Swenson-Healey and James Cooper&lt;/p&gt;

&lt;p&gt;In this talk they recommend the &lt;a href=&#34;http://www.seas.upenn.edu/~cis194/lectures.html&#34; target=&#34;_blank&#34;&gt;CIS194 course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: haste, haskell, james-cooper, erin-swenson-healey, strange-loop, 2014, talk&lt;/p&gt;

&lt;h2 id=&#34;a-year-of-haskell&#34;&gt;A Year of Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=wZ0RQG3mFPw&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; about experiences using haskell professionally, by the American Justin Leitgeb in a Equatorian company in Quito, Stack Builders. He goes on to explain the haskell language in comparison to ruby on rails, what he mostly used with his clients.&lt;/p&gt;

&lt;p&gt;Also explains what sells and doesn&amp;rsquo;t (mostly productivity, not security) and gives pointer for applying it to a company&lt;/p&gt;

&lt;p&gt;Tags: justin-leitgeb, ecuador, haskell, stack-builders, lambda-days, 2015, client, professional, consulting, consultancy&lt;/p&gt;

&lt;h2 id=&#34;a-taste-of-haskell&#34;&gt;A Taste of Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched a lesson by Simon Peyton-Jones, that introduces haskell to experienced programmers, not in the language but in programming in general. At the conference OSCON 2007&lt;/p&gt;

&lt;p&gt;Links: &lt;a href=&#34;https://www.youtube.com/watch?v=jLj1QV11o9g&#34; target=&#34;_blank&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=IqXTUbdLig0&#34; target=&#34;_blank&#34;&gt;part 2&lt;/a&gt;, &lt;a href=&#34;http://www.slideshare.net/oscon2007/os-peytonjones&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: oscon, 2007, haskell, introduction, lesson, simon-peyton-jones&lt;/p&gt;

&lt;h2 id=&#34;programming-why-haskell-is-great&#34;&gt;Programming - Why Haskell is Great&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.youtube.com/watch?v=RqvCNb7fKsg&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; introducing some features of haskell. The most basic features, the REPL,  function composition. By FrungyKing&lt;/p&gt;

&lt;p&gt;Tags: haskell, introduction, video, screencast, repl, frungyking&lt;/p&gt;

&lt;h2 id=&#34;history-of-haskell-being-lazy-with-class&#34;&gt;History of Haskell: being lazy with class&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=3bjXGrycMhQ&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Simon Peyton-Jones at the &amp;ldquo;History of Programming Languages Conference III&amp;rdquo; which explains how the language was designed and written, a language timeline, what options they took, how they decided about monadic IO, etc.&lt;/p&gt;

&lt;p&gt;Tags: simon-peyton-jones, 2007, history-of-programming-languages-conference, haskell, talk&lt;/p&gt;

&lt;h2 id=&#34;the-humble-programmer&#34;&gt;The Humble Programmer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.cs.utexas.edu/users/EWD/transcriptions/EWD03xx/EWD340.html&#34; target=&#34;_blank&#34;&gt;this EWD&lt;/a&gt; about the necessary humbleness for being a programmer and the slow expansion of the trade, as compared to hardware engineers.&lt;/p&gt;

&lt;p&gt;He cites six reasons for preferring to be a humble programmer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the programmer only needs to manage simple programs&lt;/li&gt;
&lt;li&gt;simple programs imply reducing the search space&lt;/li&gt;
&lt;li&gt;construct a program from a mathematical proof instead of test its properties after building the software. see quote below&lt;/li&gt;
&lt;li&gt;a good abstraction can hide much complexity and difficulty&lt;/li&gt;
&lt;li&gt;the importance of the used tool in the final product&lt;/li&gt;
&lt;li&gt;&amp;ldquo;the only problems we can satisfactory solve are the ones that admit a factored solution&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this essay I&amp;rsquo;ve found the idea of&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Testing shows the presence, not the absence of bugs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That &lt;a href=&#34;https://en.wikiquote.org/wiki/Edsger_W._Dijkstra&#34; target=&#34;_blank&#34;&gt;Wikiquote&lt;/a&gt; attributes to an earlier paper (in 1969). In this paper, the verbatim quote is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;program testing can be a very effective way to show the presence of bugs, but is hopelessly inadequate for showing their absence.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This idea also connects to the &amp;ldquo;lower bounds&amp;rdquo; and &amp;ldquo;upper bounds&amp;rdquo; of program correctness expressed in the article &lt;a href=&#34;https://cdsmith.wordpress.com/2011/01/09/an-old-article-i-wrote/&#34; target=&#34;_blank&#34;&gt;An Old Article I Wrote&lt;/a&gt; which is about static types, by Cdsmith. Admittedly, much later, in 2008, so this idea could be inspired by the Dijkstra&amp;rsquo;s article.&lt;/p&gt;

&lt;p&gt;Tags: edsger-dijkstra, ewd, dijkstra, humble-programmer, essay, comparison, absence-of-bugs, quote&lt;/p&gt;

&lt;h2 id=&#34;building-a-link-shortener-with-snaplets&#34;&gt;Building a Link Shortener with Snaplets&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://vimeo.com/59109358&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; of how to build a link shortener webapp in haskell with the framework snap. By Ryan Trinkle. Found it in the &lt;a href=&#34;http://snapframework.com/docs&#34; target=&#34;_blank&#34;&gt;snap docs&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;Tags: snap, haskell, link-shortener, talk, webapp, framework, ryan-trinkle&lt;/p&gt;

&lt;h2 id=&#34;comparing-haskell-web-frameworks&#34;&gt;Comparing Haskell Web Frameworks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.edofic.com/posts/2014-02-23-haskell-web.html&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; of haskell web frameworks, by Andraz Bajt (a.k.a, edofic)&lt;/p&gt;

&lt;p&gt;Tags: andraz-bajt, edofic, haskell, web-framework, framework, comparison&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring Testing with Java 8 Lambdas</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/30/exploring-testing-with-java-8-lambdas/</link>
      <pubDate>Thu, 30 Jul 2015 13:04:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/30/exploring-testing-with-java-8-lambdas/</guid>
      <description>

&lt;p&gt;At a client, we were testing a simple feature, but the resulting tests had much subtle repetition:&lt;/p&gt;

&lt;p&gt;(source code is &lt;a href=&#34;https://github.com/alvarogarcia7/spike-lambda-testing/tree/ef00a220f427900e3180dcbeec51248845446248&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;log_when_sending_greeting_letters&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sentGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;log_when_sending_love_letters&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LoveLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sentLoveLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the production code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MailSender&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;MailSender&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;eventLogger&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;send&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GreetingLetter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;letter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;// more business logic&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;eventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sentGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;send&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LoveLetter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;letter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;// more business logic&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;eventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sentLoveLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: this is an adapted code, so the business logic is not complete and seems simple.&lt;/p&gt;

&lt;p&gt;So I decided to explore a bit on refactoring these tests to use lambdas and reduce repetition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arrange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;log_greetings_letter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;arrange&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sentGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;assertAndVerify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;log_love_letter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;arrange&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LoveLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sentLoveLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;assertAndVerify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;assertAndVerify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;arrange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some comments, mine and my teammates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The tests are not very readable, maybe because we&amp;rsquo;re still not used to java 8 lambdas&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertAndVerify&lt;/code&gt; has multiple purposes / responsibilities&lt;/li&gt;
&lt;li&gt;The gain of usability does not outweight the loss of readability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, the refactor was discarded and we are using the initial version.&lt;/p&gt;

&lt;p&gt;Later, in the dojo, &lt;a href=&#34;https://twitter.com/@trikitrok&#34; target=&#34;_blank&#34;&gt;Manuel&lt;/a&gt; and I have refactored this a little bit more. Source code is &lt;a href=&#34;https://github.com/alvarogarcia7/spike-lambda-testing/tree/8e3dbecd91e1ead33c5b3f6560e2a786c36b0de9&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MailSenderShould&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mailSender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Before&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setUp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;eventLogger&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;mailSender&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;log_greetings_letter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;checkThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aLoggingLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;forA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;greetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;wasLoggedWhen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aGreetingLetterWasSent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()));&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;log_love_letter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;checkThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aLoggingLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;forA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loveLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;wasLoggedWhen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aLoveLetterWasSent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()));&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;checkThat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Check&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;checkFor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mailSender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aGreetingLetterWasSent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sentGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;greetingLetter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sendGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;loveLetter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sendLoveLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LoveLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aLoveLetterWasSent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sentLoveLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(the logger is &lt;a href=&#34;https://github.com/alvarogarcia7/spike-lambda-testing/blob/8e3dbecd91e1ead33c5b3f6560e2a786c36b0de9/src/test/java/com/example/lambdatesting/CheckBuilder.java&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Later, we have created a simpler functional DSL for the logging, joining the &lt;code&gt;act&lt;/code&gt; and &lt;code&gt;verify&lt;/code&gt; into an object called &lt;code&gt;Check&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MailSenderShould&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mailSender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Before&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setUp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;eventLogger&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;mailSender&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;log_greetings_letter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;mailSenderLogs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;whenSendingAGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;log_love_letter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;mailSenderLogs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;whenSendingALoveLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Check&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;whenSendingALoveLetter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
			&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;letter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LoveLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)),&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sentLoveLetter&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mailSenderLogs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Check&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;checkFor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mailSender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Check&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;whenSendingAGreetingLetter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
			&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;letter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)),&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sentGreetingLetter&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;letter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;typeOfLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;typeOfLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the &lt;code&gt;Check&lt;/code&gt;, just a placeholder for two &lt;code&gt;Consumer&lt;/code&gt;s:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Check&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;act&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Check&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;act&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;act&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;act&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;verify&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;checkFor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mailSender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;act&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mailSender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;comparison&#34;&gt;Comparison&lt;/h2&gt;

&lt;p&gt;Comparison between the original form and the three refactored forms of the test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;log_when_sending_greeting_letters&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sentGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This reads like a classical JUnit tests, using the interaction (with mocks).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;log_greetings_letter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;arrange&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sentGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;assertAndVerify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the first step towards more cohesion, at the cost of readability. You save the verify at the end, but the repeated method &lt;code&gt;assertAndVerify&lt;/code&gt; is still present.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;log_greetings_letter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;checkThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aLoggingLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;forA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;greetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;wasLoggedWhen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aGreetingLetterWasSent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()));&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This one reads more like a classical DSL, but is harder to read compared to a classical test.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;log_greetings_letter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;mailSenderLogs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;whenSendingAGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This one reads more like a business requirement.&lt;/p&gt;

&lt;h2 id=&#34;other&#34;&gt;Other&lt;/h2&gt;

&lt;p&gt;Other ideas we have tested:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;aNew&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sendGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;assertAndVerifyThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;theLoggingLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isLoggedWhen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;greetingLetterIsSent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sendGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Consumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;greetingLetterIsSent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sentGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;assertAndVerifyThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;theLoggingLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
			&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MailSender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sut&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sendGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isLoggedWhen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EventLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sentGreetingLetter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;assertAndVerifyThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TestContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;testContext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;testContext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;testContext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Self-study in July 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/</link>
      <pubDate>Wed, 01 Jul 2015 01:08:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve grouped all small posts related to the self-study from July 2015 into a single post&lt;/p&gt;

&lt;h2 id=&#34;clojure-made-simple&#34;&gt;Clojure made simple&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=VSdnJDO-xdg&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Rich Hickey at the Java One. It references the talk &lt;a href=&#34;http://www.infoq.com/presentations/Simple-Made-Easy&#34; target=&#34;_blank&#34;&gt;Easy made simple&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;polymorphism without inheritance; single dispatch on the first parameter&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;productive-pair-programming&#34;&gt;Productive pair programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/07/productive-pair-programming/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about pair programming, using the driver &amp;amp; copilot technique, written by Carlos Blé&lt;/p&gt;

&lt;h2 id=&#34;building-automated-rest-apis-with-python&#34;&gt;Building Automated REST APIs with Python&lt;/h2&gt;

&lt;p&gt;Investigating QA automation for REST APIs, I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/jeffknupp/building-automated-rest-apis-with-python&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about it&lt;/p&gt;

&lt;h2 id=&#34;backwards-compatibility-testing-for-your-clojure-project&#34;&gt;Backwards Compatibility Testing For Your Clojure Project&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jenkster.com/2014/02/backwards-compatibility-testing-your-clojure-project.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on making leiningen test the application on several clojure versions. Written by Kris Jenkins.&lt;/p&gt;

&lt;h2 id=&#34;succeeding-with-automated-integration-tests&#34;&gt;Succeeding with Automated Integration Tests&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://jeremydmiller.com/2015/06/25/succeeding_with_integration_testing/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jeremy Miller on integration testing and how to succeed with it. Some notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose the Quickest, Useful Feedback Mechanism, even if that means testing the backend and frontend separately&lt;/li&gt;
&lt;li&gt;Prefer white-box than black-box testing&lt;/li&gt;
&lt;li&gt;Use quick tests, that can be run locally in an easy fashion&lt;/li&gt;
&lt;li&gt;Do not share databases, as they introduce risks of flaky tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;applied-ddd-in-a-java-ee-7-and-open-source-world&#34;&gt;Applied DDD in a Java EE 7 and Open Source World&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=9D_-7E7Mrzw&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Edson Yanaga in the Java One, about DDD using Java EE 7, JSFs and lambdas on top of glassfish&lt;/p&gt;

&lt;h2 id=&#34;integrated-tests-are-a-scam&#34;&gt;Integrated tests are a scam&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read, again, &lt;a href=&#34;http://blog.thecodewhisperer.com/2010/10/16/integrated-tests-are-a-scam/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on integrated tests and why not to use them. From a numerical / combinatorics point of view.&lt;/p&gt;

&lt;h2 id=&#34;functional-programming-should-be-your-1-priority-for-2015&#34;&gt;Functional Programming should be your #1 priority for 2015&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@jugoncalves/functional-programming-should-be-your-1-priority-for-2015-47dd4641d6b9&#34; target=&#34;_blank&#34;&gt;this introduction&lt;/a&gt; to functional programming by Ju Gonçalves. Explains some functional concepts, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First-Class Functions&lt;/li&gt;
&lt;li&gt;High-Order Functions&lt;/li&gt;
&lt;li&gt;Pure Functions&lt;/li&gt;
&lt;li&gt;Closures&lt;/li&gt;
&lt;li&gt;Immutable State&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also recommends a few books on the subject (e.g., SICP, HTDP).&lt;/p&gt;

&lt;h2 id=&#34;a-tutorial-introduction-to-the-lambda-calculus&#34;&gt;A Tutorial Introduction to the Lambda Calculus&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt;, an introduction to the lambda calculus. Haven&amp;rsquo;t done the exercises. Written by Raúl Rojas&lt;/p&gt;

&lt;h2 id=&#34;20-common-mistakes-when-doing-test-driven-development&#34;&gt;20 common mistakes when doing Test-Driven Development&lt;/h2&gt;

&lt;p&gt;I had thought of converting all of &lt;a href=&#34;https://twitter.com/search?q=svpino%20%23tdd%20mistake&amp;amp;src=typd&#34; target=&#34;_blank&#34;&gt;his tweets&lt;/a&gt; into a blog post, but he has already done this for us: I&amp;rsquo;ve read a &lt;a href=&#34;https://blog.svpino.com/2015/05/29/20-common-mistakes-when-doing-test-driven-development&#34; target=&#34;_blank&#34;&gt;list of common mistakes&lt;/a&gt; when doing TDD by &lt;a href=&#34;https://twitter.com/svpino&#34; target=&#34;_blank&#34;&gt;Santiago Pino&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;reducing-coupling&#34;&gt;Reducing coupling&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the article by Martin Fowler &lt;a href=&#34;http://martinfowler.com/ieeeSoftware/coupling.pdf&#34; target=&#34;_blank&#34;&gt;Reducing Coupling&lt;/a&gt; in the IEEE SOFTWARE July/August 2001&lt;/p&gt;

&lt;h2 id=&#34;comparing-java-mock-frameworks-part-2-creating-mock-objects&#34;&gt;Comparing Java Mock Frameworks – Part 2: Creating Mock Objects&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://softwareinabottle.wordpress.com/2010/10/06/comparing-java-mock-frameworks-part-2-creating-mock-objects/&#34; target=&#34;_blank&#34;&gt;List of mock frameworks for java&lt;/a&gt;. Have only read the jMock, mockito and jMockit part.&lt;/p&gt;

&lt;p&gt;## Software Craftsmanship book review&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://meaganwaller.com/software-craftsmanship-book-review/&#34; target=&#34;_blank&#34;&gt;this review&lt;/a&gt; for a book that is already pending in my book list: Software Craftsmanship by Pete McBreen.&lt;/p&gt;

&lt;p&gt;The review has been written by Megan Waller, an (ex-)apprentice at 8th Light.&lt;/p&gt;

&lt;h2 id=&#34;fundamental-concepts-in-programming-languages&#34;&gt;Fundamental concepts in programming languages&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.cs.cmu.edu/~crary/819-f09/Strachey67.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; containing the contents for lectures in Computer Programming in the year 1967. Written by Christopher Strachey.&lt;/p&gt;

&lt;p&gt;Note: I&amp;rsquo;ve also seen this paper recommended in the repo &lt;a href=&#34;https://github.com/papers-we-love/papers-we-love/tree/master/plt&#34; target=&#34;_blank&#34;&gt;Papers We Love &amp;gt; plt&lt;/a&gt; (Programming Language Theory)&lt;/p&gt;

&lt;h2 id=&#34;what-is-reification&#34;&gt;What is reification?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.angelikalanger.com/GenericsFAQ/FAQSections/TechnicalDetails.html#FAQ101A&#34; target=&#34;_blank&#34;&gt;this FAQ&lt;/a&gt; on reification by Angelika Langer&lt;/p&gt;

&lt;h2 id=&#34;type-erasure&#34;&gt;Type erasure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this wikipedia &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_erasure&#34; target=&#34;_blank&#34;&gt;page on type erasure&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-to-make-an-intellij-idea-plugin-in-less-than-30-minutes&#34;&gt;How to make an IntelliJ IDEA plugin in less than 30 minutes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://bjorn.tipling.com/how-to-make-an-intellij-idea-plugin-in-30-minutes&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on creating new IntelliJ IDEA plugin, by Bjorn Tipling&lt;/p&gt;

&lt;h2 id=&#34;how-to-write-clean-testable-code&#34;&gt;How to Write Clean, Testable Code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched, again, &lt;a href=&#34;https://www.youtube.com/watch?v=XcT4yYu_TTs&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Miško Hevery. Discusses what are the characteristics of tested and untested code, how to get from one to the other. Discusses techniques for testing code. At the end, there are questions but they cannot be heard (lack of microphone), so it is harder to follow.&lt;/p&gt;

&lt;h2 id=&#34;how-to-find-a-mentor&#34;&gt;How to Find a Mentor&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/letters-to-my-mother/how-to-find-a-mentor-27fb978a8f1&#34; target=&#34;_blank&#34;&gt;this opinion&lt;/a&gt; on the importance of role models and mentors. The difference between them and a personal experience. Written by Joanne Wilson&lt;/p&gt;

&lt;h2 id=&#34;type-theory&#34;&gt;Type theory&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this wiki page on &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_theory&#34; target=&#34;_blank&#34;&gt;type theory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;type systems [&amp;hellip;] language feature used to reduce bugs&amp;rdquo;&lt;/li&gt;
&lt;li&gt;two types: Church&amp;rsquo;s typed λ-calculi and Martin-Löf&amp;rsquo;s intuitionistic type theory.&lt;/li&gt;
&lt;li&gt;notation:

&lt;ul&gt;
&lt;li&gt;typing judgement: &lt;code&gt;M : A&lt;/code&gt;. Term &lt;code&gt;M&lt;/code&gt; has type &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;example: &lt;code&gt;nat&lt;/code&gt; may be a type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 : nat&lt;/code&gt;, like in Scala&lt;/li&gt;
&lt;li&gt;function: &amp;ldquo;arrow&amp;rdquo;&lt;/li&gt;
&lt;li&gt;apply function to argument: no parenthesis&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;conversion rule: rule for rewriting terms

&lt;ul&gt;
&lt;li&gt;reduction rule: conversion rule that only works in one direction&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;normal form: a form that cannot be further reduced&lt;/li&gt;
&lt;li&gt;element: all closed elements that can be reduced to the same normal form&lt;/li&gt;
&lt;li&gt;closed term: a term without parameters. Opposite is an open term&lt;/li&gt;
&lt;li&gt;convertibility: property of terms, both open and closed. Said to be convertible if two terms can be reduced to the same term

&lt;ul&gt;
&lt;li&gt;warning: x + 1 and 1 + x are not convertible because they are in normal form and not the same&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;type-system&#34;&gt;Type system&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this wiki page on &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_system&#34; target=&#34;_blank&#34;&gt;type system&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;The depth of type constraints and the manner of their evaluation affect the typing of the language&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Type polymorphism&lt;/li&gt;
&lt;li&gt;{compile time, runtime} x {manually annotated, inferred}&lt;/li&gt;
&lt;li&gt;&amp;ldquo;A program associates each value with at least one particular type, but it also can occur that one value is associated with many subtypes.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Classification of types:

&lt;ul&gt;
&lt;li&gt;data type – a type of a value&lt;/li&gt;
&lt;li&gt;class – a type of an object&lt;/li&gt;
&lt;li&gt;kind – a type of a type, or metatype&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;the type inference might be undecidable (for more complex type inference)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Strong typing offers more safety, but cannot guarantee complete type safety.&amp;rdquo; An example is the division by zero, altough some languages may declare a dependent type &amp;ldquo;non-zero numbers&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-3-things-you-should-know-about-hashcode&#34;&gt;The 3 things you should know about hashCode()&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://eclipsesource.com/blogs/2012/09/04/the-3-things-you-should-know-about-hashcode/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the hashCode() method in java, written by Ralf Sternberg.&lt;/p&gt;

&lt;h2 id=&#34;reduce-complexity-with-variants&#34;&gt;Reduce Complexity with Variants&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.lispcast.com/reduce-complexity-with-variants&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on variants in clojure by Eric Normand&lt;/p&gt;

&lt;h2 id=&#34;what-is-new-in-sql-2011&#34;&gt;What is new in SQL:2011&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.sigmod.org/publications/sigmod-record/1203/pdfs/10.industry.zemke.pdf&#34; target=&#34;_blank&#34;&gt;this white paper&lt;/a&gt; on the new features in SQL 2011. Written by Fred Zemke&lt;/p&gt;

&lt;h2 id=&#34;5-error-tracking-tools-java-developers-should-know&#34;&gt;5 Error Tracking Tools Java Developers Should Know&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javacodegeeks.com/2014/09/5-error-tracking-tools-java-developers-should-know.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about tracking tools for java written by Alex Zhitnitsky, featuring:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Raygun&lt;/li&gt;
&lt;li&gt;Sentry&lt;/li&gt;
&lt;li&gt;Takipi&lt;/li&gt;
&lt;li&gt;Airbrake&lt;/li&gt;
&lt;li&gt;StackHunter&lt;/li&gt;
&lt;li&gt;[Bonus] ABRT&lt;/li&gt;
&lt;li&gt;Comments cite &lt;a href=&#34;http://squash.io&#34; target=&#34;_blank&#34;&gt;Squash&lt;/a&gt; (server written in ruby, java client available) and &lt;a href=&#34;http://rollbar.com&#34; target=&#34;_blank&#34;&gt;Rollbar&lt;/a&gt; (home says supports android but not says anything about java)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data-clump&#34;&gt;Data clump&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://martinfowler.com/bliki/DataClump.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the bliki, by Martin Fowler&lt;/p&gt;

&lt;h2 id=&#34;np-complete-problems&#34;&gt;NP-Complete problems&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://webdiis.unizar.es/asignaturas/TC/wp/wp-content/uploads/2012/01/L15_NPcompletos.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Prof. Elvira Mayordomo about NP-Complete problems, how to reduce them to other problems and practical applications. (In Spanish)&lt;/p&gt;

&lt;h2 id=&#34;removal-of-sun-misc-unsafe-in-java-9-a-disaster-in-the-making&#34;&gt;Removal of sun.misc.Unsafe in Java 9 - A disaster in the making&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.dripstat.com/removal-of-sun-misc-unsafe-a-disaster-in-the-making/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the removal of this Unsafe class in Java 9, by the DripStat team&lt;/p&gt;

&lt;h2 id=&#34;how-to-write-directly-to-a-memory-locations-in-java&#34;&gt;How To Write Directly to a Memory Locations In Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://robaustin.wikidot.com/how-to-write-to-direct-memory-locations-in-java&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; on how to write directly to a memory position in java, by Rob Austin&lt;/p&gt;

&lt;h2 id=&#34;interesting-uses-of-sun-misc-unsafe&#34;&gt;Interesting uses of sun.misc.Unsafe&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://bytescrolls.blogspot.com.es/2011/04/interesting-uses-of-sunmiscunsafe.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Haris A.L.&lt;/p&gt;

&lt;h2 id=&#34;introduction-to-the-theory-of-np-completeness&#34;&gt;Introduction to the theory of np-completeness&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.site.uottawa.ca/~lucia/courses/4105-02/np.pdf&#34; target=&#34;_blank&#34;&gt;these notes / slides&lt;/a&gt; to the introductory course of NP-completeness, by Prof Lucia Moura&lt;/p&gt;

&lt;h2 id=&#34;js-code-kata-linked-list&#34;&gt;JS Code Kata: Linked List&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/yitznewton/js-code-kata-linked-list&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; on the kata linked list, by Yitz Schaffer. The slide #13 talks about the transformations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;refactor: change form without changing behavior&lt;/li&gt;
&lt;li&gt;transform: change behavior while changing form as little as possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also about the Transformation Priority Premise (TPP) (also in this month)&lt;/p&gt;

&lt;h2 id=&#34;the-transformation-priority-premise&#34;&gt;The Transformation Priority Premise&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read, again, &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Uncle Bob (Robert C. Martin)&lt;/p&gt;

&lt;h2 id=&#34;data-structures&#34;&gt;Data structures&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the wiki page for&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/SPQR_tree&#34; target=&#34;_blank&#34;&gt;SPQR tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Binary_search_tree&#34; target=&#34;_blank&#34;&gt;BSR tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Red%E2%80%93black_tree&#34; target=&#34;_blank&#34;&gt;Red black tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Judy_array&#34; target=&#34;_blank&#34;&gt;Judy array&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, The &lt;a href=&#34;http://bigocheatsheet.com/&#34; target=&#34;_blank&#34;&gt;Big-O notation complexity cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;on-benchmarks-numbers-every-programmer-should-know-and-their-impact-on-benchmarks&#34;&gt;On benchmarks: Numbers every programmer should know and their impact on benchmarks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://hype-free.blogspot.com/2014/03/on-benchmarks.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; on doing back-of-the-envelope calculations on publicly available benchmarks, written by Attila-Mihaly Balazs&lt;/p&gt;

&lt;h2 id=&#34;top-java-ide-keyboard-shortcuts-for-eclipse-intellij-idea-netbeans&#34;&gt;Top Java IDE Keyboard Shortcuts for Eclipse, IntelliJ IDEA &amp;amp; NetBeans&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://zeroturnaround.com/rebellabs/top-java-ide-keyboard-shortcuts-for-eclipse-intellij-idea-netbeans/&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; on the topic of keyboard shortcuts for java IDEs, written by Oleg Šelajev&lt;/p&gt;

&lt;h2 id=&#34;the-hacker-s-summer-training-guide-part-1&#34;&gt;The hacker’s summer training guide – part 1&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.paymill.com/hackers-training-guide-1&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Paymill, that suggests which new languages to learn this summer: rust, go, elixir, ocaml, scala, livescript.&lt;/p&gt;

&lt;h2 id=&#34;applications-built-extremely-right&#34;&gt;Applications built extremely right&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://apiumtech.com/blog/applications-build-with-outsourcing/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; with a list of candidates for building nice products, written by Xavi Hidalgo.&lt;/p&gt;

&lt;h2 id=&#34;agile-project-seed-infrastructure-by-default&#34;&gt;Agile project seed. Infrastructure by default.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://apiumtech.com/blog/seed-de-proyecto-agile-infraestructura-por-defecto/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; on an agile seed project. Reminded me of the 12-factor app&lt;/p&gt;

&lt;h2 id=&#34;what-an-agile-developer-should-know&#34;&gt;What an agile developer should know&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.apiumtech.com/blog/lo-que-un-desarrollador-agile-deberia-saber/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Xavi Hidalgo&lt;/p&gt;

&lt;h2 id=&#34;bad-apples-that-can-destroy-a-team&#34;&gt;Bad Apples that can destroy a team&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve listened to &lt;a href=&#34;http://www.scrum-master-toolbox.com/2015/03/podcast/dominic-krimmer-describes-the-types-of-bad-apples-that-can-destroy-a-team/&#34; target=&#34;_blank&#34;&gt;this podcast&lt;/a&gt; about the bad apples in a team. Presented by Vasco Duarte and Dominic Krimmer as the main speaker&lt;/p&gt;

&lt;h2 id=&#34;how-scala-compares-with-20-other-programming-languages-according-to-reddit-analysis&#34;&gt;How Scala compares with 20 other programming languages according to Reddit analysis&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.typesafe.com/blog/how-scala-compares-20-programming-languages-reddit-analysis&#34; target=&#34;_blank&#34;&gt;this analysis&lt;/a&gt; of the language comparison, written by Oliver White&lt;/p&gt;

&lt;h2 id=&#34;javascript-patterns-book-review&#34;&gt;Javascript patterns book review&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.bennadel.com/blog/2047-javascript-patterns-by-stoyan-stefanov.htm&#34; target=&#34;_blank&#34;&gt;this review&lt;/a&gt; by Ben Nadel on the book Javascript Patterns, by Stoyan Stefanov&lt;/p&gt;

&lt;h2 id=&#34;monogamous-tdd&#34;&gt;Monogamous TDD&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2014/04/25/MonogamousTDD.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the fundamentalism of TDD, written by Robert C Martin&lt;/p&gt;

&lt;h2 id=&#34;encapsulating-localstorage-access-in-angularjs&#34;&gt;Encapsulating LocalStorage Access In AngularJS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.bennadel.com/blog/2861-encapsulating-localstorage-access-in-angularjs.htm&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why encapsulate the access to the localStorage, written by Ben Nadel&lt;/p&gt;

&lt;h2 id=&#34;anatomy-of-a-zero-knowledge-web-application&#34;&gt;Anatomy of a zero-knowledge web application&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://clipperz.is/blog/2007/08/24/anatomy_zero_knowledge_web_application/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on a zero-knowledge web application, by the clipperz team&lt;/p&gt;

&lt;h2 id=&#34;refactorización-de-código-legado-clase-maestra&#34;&gt;Refactorización de Código Legado Clase Maestra&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=VBgCKKevhyI&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; about refactoring a legacy code in C#, by Danijel Arsenovski&lt;/p&gt;

&lt;h2 id=&#34;taming-javaagents&#34;&gt;Taming Javaagents&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/shelajev/taming-javaagents-bcn-jug-2015&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt;, again, from a conference I went to a few months ago about java agents. Written by Oleg Šelajev.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/shelajev/ResourceLeakAgent&#34; target=&#34;_blank&#34;&gt;This&lt;/a&gt; is the repository containing the memory leak agent he talks about&lt;/p&gt;

&lt;h2 id=&#34;mathematics-for-computer-science-lecture-1&#34;&gt;Mathematics for Computer Science, Lecture 1&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched by &lt;a href=&#34;http://xoax.net/comp_sci/crs/math_for_comp_science_mit/lessons/Lecture1/&#34; target=&#34;_blank&#34;&gt;the first recitation&lt;/a&gt; in &lt;a href=&#34;http://xoax.net/comp_sci/crs/math_for_comp_science_mit/index.php&#34; target=&#34;_blank&#34;&gt;this course&lt;/a&gt;, offered by MIT Open Course Ware (OCW). Recited by Tom Leighton&lt;/p&gt;

&lt;h2 id=&#34;programming-abstractions-lecture-7&#34;&gt;Programming Abstractions: Lecture 7&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;http://xoax.net/comp_sci/crs/programming_abstractions_stanford/lessons/Lecture7/&#34; target=&#34;_blank&#34;&gt;this lecture&lt;/a&gt; by Julie Zelensky about the comparison operator, recursion and a live coding session calculating the most ocurring anagram word in a file.&lt;/p&gt;

&lt;p&gt;She uses small outputs to check the correctness of her programs to get short feedback cycles, even if they are manual.&lt;/p&gt;

&lt;h2 id=&#34;5-ways-to-launch-a-jmeter-test-without-using-the-jmeter-gui&#34;&gt;5 Ways To Launch a JMeter Test without Using the JMeter GUI&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blazemeter.com/blog/5-ways-launch-jmeter-test-without-using-jmeter-gui&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; on using jmeter without a GUI, by Dmitri Tikhanski&lt;/p&gt;

&lt;h2 id=&#34;clojure-unraveled-chapter-5&#34;&gt;Clojure unraveled, chapter 5&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the &lt;a href=&#34;http://funcool.github.io/clojurescript-unraveled/#language-advanced-topics&#34; target=&#34;_blank&#34;&gt;fifth chapter&lt;/a&gt;, on the topics of Transducers, Transients, Metadata, Macros, Core protocols. Written by Andrey Antukh and Alejandro Gómez&lt;/p&gt;

&lt;h2 id=&#34;a-guide-to-the-basics-of-data-structures&#34;&gt;A guide to the Basics of Data Structures&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://algosaur.us/data-structures-basics/&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; to data structures, covering the stack, the queue, the heap, the tree and the hashmap. Written by Radhika Ghosal&lt;/p&gt;

&lt;h2 id=&#34;government-abandonware&#34;&gt;Government Abandonware&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://techblog.bozho.net/government-abandonware/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; on abandoned, public software that is not opensource. Dubbed by the author as &amp;ldquo;Government Abandonware&amp;rdquo;. Written by Bozhidar Bozhanov&lt;/p&gt;

&lt;h2 id=&#34;the-art-of-incremental-stream-processing&#34;&gt;The Art of Incremental Stream Processing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mth.io/talks/streams/&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; on incremental stream processing. The examples are in haskell and scala. Written by Mark Hibberd&lt;/p&gt;

&lt;h2 id=&#34;reader-as-link-author&#34;&gt;Reader as Link Author&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://hapgood.us/2015/07/22/follow-up-reader-as-link-author/&#34; target=&#34;_blank&#34;&gt;this insight&lt;/a&gt; into federated wikis by Mike Caulfield&lt;/p&gt;

&lt;h2 id=&#34;kafkapocalypse-a-postmortem-on-our-service-outage&#34;&gt;Kafkapocalypse: a postmortem on our service outage&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.parsely.com/post/1738/kafkapocalypse/&#34; target=&#34;_blank&#34;&gt;this post-mortem analysis&lt;/a&gt; of the service outage at parse.ly, by Andrew Montalenti&lt;/p&gt;

&lt;h2 id=&#34;loving-a-log-oriented-architecture&#34;&gt;Loving a Log-Oriented Architecture&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.parsely.com/post/1550/kreps-logs/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; on experiences using the log-based architecture, by Andrew Montalenti. Cites the books &lt;a href=&#34;http://www.amazon.com/Heart-Logs-Stream-Processing-Integration/dp/1491909382&#34; target=&#34;_blank&#34;&gt;I Heart Logs&lt;/a&gt;,  and &lt;a href=&#34;http://www.amazon.com/gp/product/1617290343&#34; target=&#34;_blank&#34;&gt;Big Data: Principles and best practices of scalable realtime data systems&lt;/a&gt; the essay &lt;a href=&#34;http://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying&#34; target=&#34;_blank&#34;&gt;The Log&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-guide-to-algorithmic-complexity&#34;&gt;A guide to Algorithmic Complexity&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://algosaur.us/algorithmic-complexity&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; to algorithmic complexity, explaining Big-Oh notation (Big-Oh, Big-Theta, Big-Omega), with examples. Written by Radhika Ghosal&lt;/p&gt;

&lt;h2 id=&#34;a-guide-to-recursion&#34;&gt;A guide to Recursion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://algosaur.us/recursion&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; to recursion explaining the gist of it. Examples include the Fibonacci sequence and the Hanoi Towers problem. Later, an introduction to the chaos theory and fractals. Written by Radhika Ghosal&lt;/p&gt;

&lt;h2 id=&#34;bootstrapped-clojurescript-faq&#34;&gt;Bootstrapped ClojureScript FAQ&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/clojure/clojurescript/wiki/Bootstrapped-ClojureScript-FAQ&#34; target=&#34;_blank&#34;&gt;this FAQ&lt;/a&gt; related to bootstrapping clojurescript&lt;/p&gt;

&lt;h2 id=&#34;applying-property-based-testing-on-my-binary-search-tree-implementation&#34;&gt;Applying property-based testing on my binary search tree implementation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://garajeando.blogspot.com/2015/07/applying-property-based-testing-on-my.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, written by Manuel Rivero, on applying test-check (a property-based testing framework, similar to quickcheck) to a Binary Search Tree (BST) he did.&lt;/p&gt;

&lt;h2 id=&#34;do-extraterrestrials-use-functional-programming&#34;&gt;Do Extraterrestrials Use Functional Programming?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://yowconference.com.au/slides/yowlambdajam2013/Chakravarty-Extraterrestrials-Keynote.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt;, an introduction to lambda calculus, the Turing machine and the Halting Problem. Later, continues to describe ways of solving problems in a functional way. Also performance and optimizations; monads as well. Written by Manuel M T Chakravarty&lt;/p&gt;

&lt;h2 id=&#34;wip-limits&#34;&gt;WIP Limits&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://theagileist.wordpress.com/2015/06/15/wip-limits/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Tomas Rybing&lt;/p&gt;

&lt;h2 id=&#34;applied-capacity-planning&#34;&gt;Applied capacity planning&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://theagileist.wordpress.com/2015/07/27/applied-capacity-planning/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Tomas Rybing.&lt;/p&gt;

&lt;h2 id=&#34;don-t-get-attached-to-programming-languages&#34;&gt;Don’t Get Attached to Programming Languages&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mikecavaliere.com/dont-get-attached-programming-languages&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Mike Cavaliere&lt;/p&gt;

&lt;h2 id=&#34;the-top-5-skills-of-rock-star-software-engineers&#34;&gt;The Top 5 Skills of Rock Star Software Engineers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://softwareplusplus.com/2015/06/24/the-top-5-skills-of-rock-star-software-engineers/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Cory Berg&lt;/p&gt;

&lt;h2 id=&#34;5-reasons-to-use-protocol-buffers-instead-of-json-for-your-next-service&#34;&gt;5 Reasons to Use Protocol Buffers Instead of JSON For Your Next Service&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codeclimate.com/blog/2014/06/05/choose-protocol-buffers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on Protocol Buffers, written by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;data-serialization-formats&#34;&gt;Data Serialization Formats&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://gist.github.com/joshsz/11299196&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; between MsgPack, JSON, Protocol Buffers, by Josh Szmajda.&lt;/p&gt;

&lt;h2 id=&#34;protocol-buffer-basics-java&#34;&gt;Protocol Buffer Basics: Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/javatutorial&#34; target=&#34;_blank&#34;&gt;this introduction&lt;/a&gt; to Protocol Buffers in Java, by Google&lt;/p&gt;

&lt;h2 id=&#34;restful-considered-harmful&#34;&gt;RESTful Considered Harmful&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://dzone.com/articles/restful-considered-harmful?oid=top_title&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, commenting downsides to using JSON / RESTful APIs, written by Tomasz Nurkiewicz&lt;/p&gt;

&lt;h2 id=&#34;considered-harmful-essays-considered-harmful&#34;&gt;“Considered Harmful” Essays Considered Harmful&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://meyerweb.com/eric/comment/chech.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt;, by Eric Meyer, on why &amp;ldquo;Considered Harmful&amp;rdquo; are harmful as well.&lt;/p&gt;

&lt;h2 id=&#34;keep-lambdas-cohesive&#34;&gt;Keep Lambdas Cohesive&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.agiledeveloper.com/2015/07/keep-lambdas-cohesive.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; with recommendations on keeping the java lambdas cohesive. Written by Venkat Subramaniam&lt;/p&gt;

&lt;h2 id=&#34;the-joy-of-flying-robots-with-clojure&#34;&gt;The Joy of Flying Robots with Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=Ty9QDqV-_Ak&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Carin Meier at the OSCON 2013 about communicating with robots in Clojure&lt;/p&gt;

&lt;h2 id=&#34;how-to-learn-tdd-without-getting-overwhelmed&#34;&gt;How to Learn TDD Without Getting Overwhelmed&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.justinweiss.com/blog/2014/06/02/how-to-learn-tdd-without-getting-overwhelmed/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on learning TDD, by Justin Weiss&lt;/p&gt;

&lt;h2 id=&#34;kata-the-only-way-to-learn-tdd&#34;&gt;Kata - the Only Way to Learn TDD&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.peterprovost.org/blog/2012/05/02/kata-the-only-way-to-learn-tdd/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on learning TDD, by Peter Provost&lt;/p&gt;

&lt;h2 id=&#34;koan-past-perfect&#34;&gt;Koan: Past Perfect&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thecodelesscode.com/case/180&#34; target=&#34;_blank&#34;&gt;this koan&lt;/a&gt;, past perfect, reflecting on the people who prefer the past over the present. Who think that the past was simpler than currently is.&lt;/p&gt;

&lt;h2 id=&#34;koan-future-imperfect&#34;&gt;Koan: Future Imperfect&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thecodelesscode.com/case/181&#34; target=&#34;_blank&#34;&gt;this koan&lt;/a&gt;, continuation from past perfect.&lt;/p&gt;

&lt;h2 id=&#34;why-agile-and-especially-scrum-are-terrible&#34;&gt;Why “Agile” and especially Scrum are terrible&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://michaelochurch.wordpress.com/2015/06/06/why-agile-and-especially-scrum-are-terrible/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on downsides of Agile and Scrum, written by Michael Church.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>