<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Craftsmanship on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/craftsmanship/</link>
    <description>Recent content in Craftsmanship on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Apr 2016 00:08:19 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/craftsmanship/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in April 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/01/self-study/</link>
      <pubDate>Fri, 01 Apr 2016 00:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/01/self-study/</guid>
      <description>

&lt;h2 id=&#34;deliberate-practice-what-it-is-and-why-you-need-it&#34;&gt;Deliberate Practice: What It Is and Why You Need It&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Corbett Barr on what is deliberate practice and why it is needed to become an expert in a given domain field.&lt;/p&gt;

&lt;p&gt;The four essential components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Motivation&lt;/li&gt;
&lt;li&gt;Tailored (practice)&lt;/li&gt;
&lt;li&gt;Feedback&lt;/li&gt;
&lt;li&gt;Repetion
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: corbett-barr, deliberate-practice, expert, practice, anders-ericsson, talent, professional-development, career&lt;/p&gt;

&lt;h2 id=&#34;10-features-i-wish-java-would-steal-from-the-kotlin-language&#34;&gt;10 Features I Wish Java Would Steal From the Kotlin Language&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jooq.org/2016/03/31/10-features-i-wish-java-would-steal-from-the-kotlin-language/&#34; target=&#34;_blank&#34;&gt;this list of features&lt;/a&gt; that the Kotlin Language has that would be an improvement for the Java language. By Lukas Eder&lt;/p&gt;

&lt;p&gt;Tags: list, lukas-eder, kotlin, java, comparison, language, jooq&lt;/p&gt;

&lt;h2 id=&#34;how-we-built-uber-engineering-s-highest-query-per-second-service-using-go&#34;&gt;How we built Uber engineering&amp;rsquo;s highest query per second service using Go&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://eng.uber.com/go-geofence/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Kai Wei on a microservice they&amp;rsquo;ve built using Go.&lt;/p&gt;

&lt;p&gt;Explains the reasons for choosing that algorithm for geofencing, the performance they&amp;rsquo;re achieving, and the architecture.&lt;/p&gt;

&lt;p&gt;Tags: uber, go, microservice, performance, geofence, geofencing, rps, go-memory-model, kai-wei&lt;/p&gt;

&lt;h2 id=&#34;unwinding-uber-s-most-efficient-service&#34;&gt;Unwinding Uber&amp;rsquo;s Most Efficient Service&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@buckhx/unwinding-uber-s-most-efficient-service-406413c5871d&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Buck Heroux commenting on the decisions of Uber for building the geofencing microservice (above read).&lt;/p&gt;

&lt;p&gt;Explains the different alternatives for algorithms in this problem space and has implemented them in go. Provides a benchmark for comparing those, including a profiling session.&lt;/p&gt;

&lt;p&gt;Tags: s2, quadtree, rtree, brute-force, geofence, geofencing, uber, comment, buck-heroux, go, read-on-read, meta-read&lt;/p&gt;

&lt;h2 id=&#34;lawful-hacking-and-continuing-vulnerabilities&#34;&gt;Lawful Hacking and Continuing Vulnerabilities&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.schneier.com/blog/archives/2016/03/lawful_hacking_.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Bruce Schneier on the stance the FBI is taking in regards to vulnerabilities discovered in Apple&amp;rsquo;s devices.&lt;/p&gt;

&lt;p&gt;Tags: bruce-schneier, apple, security, fbi, vulnerability, exploit, law, hacking&lt;/p&gt;

&lt;h2 id=&#34;a-side-project-helped-jumpstart-my-career-life-learning&#34;&gt;A Side Project Helped Jumpstart My Career — Life Learning&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/life-learning/a-side-project-helped-jumpstart-my-career-7cd6f8e9b07f&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Dave Gerhardt on how making a side project happen affected his life and his skills.&lt;/p&gt;

&lt;p&gt;Some of the reasons for doing it include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It forces you to figure stuff out&lt;/li&gt;
&lt;li&gt;The only way to learn is by doing&lt;/li&gt;
&lt;li&gt;It gets your brain working on something other than your job&lt;/li&gt;
&lt;li&gt;You have to create your own network&lt;/li&gt;
&lt;li&gt;You are the CEO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: long-life-learning, continuous-learning, side-project, dave-gerhardt, drift, professional-development, personal-development, business, career&lt;/p&gt;

&lt;h2 id=&#34;fun-jekyll-tricks&#34;&gt;Fun Jekyll Tricks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.madebymarket.com/blog/dev/fun-jekyll-tricks.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brian Knapp where he explains some tips and tricks of jekyll (in which octopress is based on): speed, deployment, subcategories inside the blog, _data, _includes.&lt;/p&gt;

&lt;p&gt;Tags: brian-knapp, jekyll, octopress, tip-and-trick, improvement, subcategory, meta, automation, deployment&lt;/p&gt;

&lt;h2 id=&#34;la-ola-que-llega&#34;&gt;La ola que llega&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=f8a8ee92cc&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; by David Bonilla, where he explains (in Spanish) the &amp;lsquo;contractor&amp;rsquo; phenomenon arriving to Spain, 2-3 years after being in other countries and the effects that this could have both for workers and companies.&lt;/p&gt;

&lt;p&gt;Tags: bonilista, david-bonilla, contractor&lt;/p&gt;

&lt;h2 id=&#34;10-razones-por-las-que-este-sábado-deberías-ir-a-un-code-retreat&#34;&gt;10 razones por las que este sábado deberías ir a un code retreat&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://francho.org/2015/11/10/10-razones-para-ir-a-un-coderetreat/&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of reasons for attending a code retreat, by Francho Joven, who I met in the Global Day Of Code Retreat (GDCR) &amp;lsquo;15 in Zaragoza&lt;/p&gt;

&lt;p&gt;Tags: francho-joven, list, zaragoza, code-retreat, gdcr&lt;/p&gt;

&lt;h2 id=&#34;meaningful-work-through-passion-not-genius&#34;&gt;Meaningful Work through Passion, not Genius&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=pIYUMwxKFzo&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; on the importance of hard work and how it can be mistaken as genious. By Malcolm Gladwell&lt;/p&gt;

&lt;p&gt;Tags: malcolm-gladwell, passion, genius, work, time-management, productivity, career, mastery-autonomy-purpose&lt;/p&gt;

&lt;h2 id=&#34;how-to-ask-your-wife-for-permission-to-spend-250-000-on-a-domain-name&#34;&gt;How to ask your wife for permission to spend $250,000 on a domain name&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@Stockphoto.com/how-to-ask-your-wife-for-permission-to-spend-250-000-on-a-domain-name-c27a3c2852e1&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jon Yau on how they started StockPhoto.com, buying a $250,000 domain name.&lt;/p&gt;

&lt;p&gt;Tags: startup, domain, stockphoto, jon-yau&lt;/p&gt;

&lt;h2 id=&#34;sorry-developer-bootcamps-i-was-wrong&#34;&gt;Sorry, developer bootcamps: I was wrong&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@dillonforrest/sorry-developer-bootcamps-i-was-wrong-ea37fcc5572c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Dillon Forrest on the topic of developer bootcamps. Explains why developers should not be threatened by recent graduates of these programs and describes how people pursuing these programs usually are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intelligence&lt;/li&gt;
&lt;li&gt;Risk appetite&lt;/li&gt;
&lt;li&gt;Resilience&lt;/li&gt;
&lt;li&gt;Self-investment&lt;/li&gt;
&lt;li&gt;Entrepreneurship&lt;/li&gt;
&lt;li&gt;Growth trajectory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: bootcamp, developer-bootcamp, dev-bootcamp, dillon-forrest, intelligence, risk-appetite, resilience, self-investment, entrepreneurship, growth-trajectory&lt;/p&gt;

&lt;h2 id=&#34;the-jvm-and-java-garbage-collection&#34;&gt;The JVM and Java Garbage Collection&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=DoJr5QQYsl8&#34; target=&#34;_blank&#34;&gt;this webcast&lt;/a&gt; about how the JVM garbage collection works. By Michael W Williams&lt;/p&gt;

&lt;p&gt;Tags: michael-williams, oracle, webcast, jvm, garbage-collection, gc,&lt;/p&gt;

&lt;h2 id=&#34;files-are-hard&#34;&gt;Files Are Hard&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://danluu.com/file-consistency/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why software that writes on files is difficult, based on the different filesystems that are below, and the operating system. Written by Dan Luu.&lt;/p&gt;

&lt;p&gt;Uses software product to find bugs in filesystems&lt;/p&gt;

&lt;p&gt;Tags: filesystem, file, dan-luu, analysis&lt;/p&gt;

&lt;h2 id=&#34;contrata-a-un-fracasado-con-ilusión-inquebrantable&#34;&gt;Contrata a un fracasado con ilusión inquebrantable&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.contunegocio.es/tecnologia/contrata-a-un-fracasado-con-ilusion-inquebrantable/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Alberto Mena (in Spanish) on what are the qualities that define a good programmer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;humility&lt;/li&gt;
&lt;li&gt;failure&lt;/li&gt;
&lt;li&gt;illusion&lt;/li&gt;
&lt;li&gt;hard work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: alberto-mena, spanish, team-management, success, developer, quality, developer-quality&lt;/p&gt;

&lt;h2 id=&#34;don-t-react&#34;&gt;Don&amp;rsquo;t react&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://journal.avdi.org/2016/04/14/dont-react/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Avdi Grimm on how the action vs reaction attitude. Why to prefer the former.&lt;/p&gt;

&lt;p&gt;Tags: action, reaction, social-media, avdi-grimm, productivity&lt;/p&gt;

&lt;h2 id=&#34;ftp-is-so-90-s-let-s-deploy-via-git-instead&#34;&gt;FTP is so 90&amp;rsquo;s. Let&amp;rsquo;s deploy via Git instead!&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://coderwall.com/p/xczkaq/ftp-is-so-90-s-let-s-deploy-via-git-instead&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; on how to deploy using git. By Kerrick Long&lt;/p&gt;

&lt;p&gt;Tags: kerrick-long, git, deployment, webapp, application, devops&lt;/p&gt;

&lt;h2 id=&#34;job-vs-career-10-key-differences-you-need-to-understand&#34;&gt;Job vs Career: 10 Key Differences You Need To Understand&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.officevibe.com/blog/job-vs-career&#34; target=&#34;_blank&#34;&gt;the infographic and the article&lt;/a&gt; by Jacob Shriar on what differentiates a job from a career&lt;/p&gt;

&lt;p&gt;Tags: jacob-shriar, infographic, job-vs-career, comparison, job, career&lt;/p&gt;

&lt;h2 id=&#34;the-secret-to-employee-motivation&#34;&gt;The Secret To Employee Motivation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.officevibe.com/blog/secret-employee-motivation-infographic&#34; target=&#34;_blank&#34;&gt;the infographic and the article&lt;/a&gt; by Jacob Shriar on what motivates employess: mastery, autonomy and purpose. A direct reference to Dan Pink&amp;rsquo;s &amp;ldquo;The puzzle of motivation&amp;rdquo; TED talk.&lt;/p&gt;

&lt;p&gt;Tags: jacob-shriar, motivation, employee, infographic, mastery, autonomy, purpose&lt;/p&gt;

&lt;h2 id=&#34;the-puzzle-of-motivation&#34;&gt;The puzzle of motivation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.ted.com/talks/dan_pink_on_motivation&#34; target=&#34;_blank&#34;&gt;this TED talk&lt;/a&gt; by Dan Pink on what motivates us: intrinsic vs extrinsic motivation.&lt;/p&gt;

&lt;p&gt;Also about the gap that exists between what science knows and what businesses propose.&lt;/p&gt;

&lt;p&gt;Tags: ted, ted-talk, video, dan-pink, mastery, autonomy, purpose&lt;/p&gt;

&lt;h2 id=&#34;applying-a-ceiling-to-the-bug-count&#34;&gt;Applying a ceiling to the bug count&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://techblog.king.com/applying-a-ceiling-to-the-bug-count/&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt;, written by Susanna Berg, on how King has reduced the amount of bugs in their backlog using an agile technique, measuring and setting a limit.&lt;/p&gt;

&lt;p&gt;Tags: susanna-berg, king, agile, bug, bug-count, defect, defect-count, per-malmen&lt;/p&gt;

&lt;h2 id=&#34;coming-up-in-2016-spring-framework-4-3-5-0&#34;&gt;Coming up in 2016: Spring Framework 4.3 &amp;amp; 5.0&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://spring.io/blog/2015/08/03/coming-up-in-2016-spring-framework-4-3-5-0&#34; target=&#34;_blank&#34;&gt;this announcement&lt;/a&gt; of Spring&amp;rsquo;s new release, 5.0, which will require java 8 and will turn most of the features into the reactive programming paradigm. By Juergen Hoeller.&lt;/p&gt;

&lt;p&gt;Tags: juergen-hoeller, spring, reactive-programming, release, announcement&lt;/p&gt;

&lt;h2 id=&#34;why-offices-are-where-work-goes-to-die&#34;&gt;Why offices are where work goes to die&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://swizec.com/blog/why-offices-are-where-work-goes-to-die/swizec/6695&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Swizec Teller explaining the downsides of working in an office as compared to working remotely.&lt;/p&gt;

&lt;p&gt;Tags: swizec-teller, remote, home-office, office, comparison, time-management&lt;/p&gt;

&lt;h2 id=&#34;the-myth-of-the-passionate-developer&#34;&gt;The Myth of the Passionate Developer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@bm2yogi/the-myth-of-the-passionate-developer-76a41d457304&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Ibarra on what are the implications of being a passionate developer, how it affects your tasks and what are the factors to a job.&lt;/p&gt;

&lt;p&gt;Tags: michael-ibarra, passion, development, job, motivation, myth&lt;/p&gt;

&lt;h2 id=&#34;mossack-fonseca-breach-wordpress-revolution-slider-plugin-possible-cause&#34;&gt;Mossack Fonseca Breach – WordPress Revolution Slider Plugin Possible Cause&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.wordfence.com/blog/2016/04/mossack-fonseca-breach-vulnerable-slider-revolution/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mark Maunder, which describes an hypothesis on how the Mossack Fonseca breach could have happened. Also describes and shows how to breach a Wordpress installation with a vulnerable Revolution Slider plugin.&lt;/p&gt;

&lt;p&gt;Tags: mark-maunder, security, breach, mossack-fonseca-breach, mossack-fonseca, hypothesis, attack, plugin, revolution-slider, wordpress&lt;/p&gt;

&lt;h2 id=&#34;tim-urban-inside-the-mind-of-a-master-procrastinator&#34;&gt;Tim Urban: Inside the mind of a master procrastinator&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.ted.com/talks/tim_urban_inside_the_mind_of_a_master_procrastinator&#34; target=&#34;_blank&#34;&gt;this TED talk&lt;/a&gt; from Tim Urban on how the procrastinator&amp;rsquo;s mind works, exemplified by his own career.&lt;/p&gt;

&lt;p&gt;Tags: procrastinator, procrastination, mind, time-management, tim-urban&lt;/p&gt;

&lt;h2 id=&#34;pep-20-the-zen-of-python&#34;&gt;PEP 20 &amp;ndash; The Zen of Python&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.python.org/dev/peps/pep-0020/&#34; target=&#34;_blank&#34;&gt;the PEP20&lt;/a&gt;, the zen of python, with special attention to this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Explicit is better than implicit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: pep-20, pep, python, zen&lt;/p&gt;

&lt;h2 id=&#34;why-i-switched-from-octopress-2-to-hugo&#34;&gt;Why I switched from Octopress 2 to Hugo&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://conscientiousprogrammer.com/blog/2015/05/31/why-i-switched-from-octopress-2-to-hugo/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Franklin Chen on the change he made on the static site generator (SSG) he used. He considered hakyll, octopress, jekyll, hugo. Was decided between hakyll and hugo for their speed but, finally, decided to use hugo for their bigger community.&lt;/p&gt;

&lt;p&gt;Tags: franklin-chen, comparison, ssg, static-site-generator, hakyll, octopress, jekyll, hugo, change, speed, statically-typed, dynamically-typed, golang, performance&lt;/p&gt;

&lt;h2 id=&#34;why-incremental-regeneration-in-jekyll-3-0-is-such-a-big-deal&#34;&gt;Why incremental regeneration in Jekyll 3.0 is such a big deal&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://idratherbewriting.com/2015/11/04/jekyll-30-released-incremental-regeneration-rocks/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tom Johnson on one of the new features that jekyll 3.0 brings: incremental generation. How this can speed up the generation&lt;/p&gt;

&lt;p&gt;Tags: tom-johnson, incremental-generation, speed, performance, octopress-2, octopress-3, jekyll-3&lt;/p&gt;

&lt;h2 id=&#34;hugo-s3-travis-ci-oh-boy&#34;&gt;Hugo, S3, Travis CI, oh boy!&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://continuousfailure.com/post/s3_blog/&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; by Alan Scherger on how to set up a specific stack for developing and deploying a static site blog.&lt;/p&gt;

&lt;p&gt;Tags: alan-scherger, static-site-generator, ssg, travis, hugo, s3&lt;/p&gt;

&lt;h2 id=&#34;deploy-your-blog-to-github-pages-automatically-using-hugo-and-travis&#34;&gt;Deploy your blog to github pages automatically using Hugo and Travis&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://rcoedo.com/post/hugo-static-site-generator/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Roman Coedo on how to deploy a hugo blog to github pages, using travis.&lt;/p&gt;

&lt;p&gt;Tags: roman-coedo, travis, hugo, github, github-pages, ssg, static-site-generator&lt;/p&gt;

&lt;h2 id=&#34;improve-octopress-with-advanced-tweaks-tips&#34;&gt;Improve Octopress with Advanced Tweaks &amp;amp; Tips&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.narga.net/improve-octopress-advanced-tweaks-tips/&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of tips on how to improve the octopress (2) installation. By Nguyễn Đình Quân.&lt;/p&gt;

&lt;p&gt;Tags: nguyen-dinh-quan, octopress-2, tip, tweak&lt;/p&gt;

&lt;h2 id=&#34;laboratorios&#34;&gt;Laboratorios&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.presionblogosferica.com/2014/11/12/laboratorios/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ángel Medinilla, about laboratories to use a percentage of company time to investigate, innovate, learn and improve.&lt;/p&gt;

&lt;p&gt;Tags: angel-medinilla, team-management, time-management, innovation, strategy, improvement, kaizen, laboratory, craftsmanship, spanish&lt;/p&gt;

&lt;h2 id=&#34;what-refactoring-is-and-what-it-isn-t&#34;&gt;What Refactoring is, and what it isn’t&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://swreflections.blogspot.com/2012/04/what-refactoring-is-and-what-it-isnt.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jim Bird, where he splits some practices into refactoring and not refactoring. Draws the line between these two different activities.&lt;/p&gt;

&lt;p&gt;Also cites scratch refactoring.&lt;/p&gt;

&lt;p&gt;Tags: jim-bird, scratch-refactoring, refactoring, martin-fowler, kent-beck, definition, quote, design&lt;/p&gt;

&lt;h2 id=&#34;pitfalls-of-unlimited-vacations&#34;&gt;Pitfalls of Unlimited Vacations&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://haacked.com/archive/2016/02/18/unlimited-vaction-pitfalls/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Phil Haack on the github, travis and netflix policies about unlimited vacations and the effects they have on the employees.&lt;/p&gt;

&lt;p&gt;Also about minimum vacation periods, (paternity) paid leave.&lt;/p&gt;

&lt;p&gt;Tags: phil-haack, unlimited-vacation, holiday, vacation, team-management, burnout, github, travis, netflix, policy&lt;/p&gt;

&lt;h2 id=&#34;cultura-corporativa&#34;&gt;Cultura Corporativa&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.presionblogosferica.com/2011/02/06/cultura-corporativa/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ángel Medinilla about the corporate culture, and how &amp;ldquo;hanging a highly interchangeable sentence on a wall&amp;rdquo; does not represent it.&lt;/p&gt;

&lt;p&gt;Tags: angel-medinilla, corporate culture, spanish&lt;/p&gt;

&lt;h2 id=&#34;what-it-s-really-like-to-learn-to-code&#34;&gt;What It’s Really Like to Learn to Code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@sandjar/what-it-s-really-like-to-learn-to-code-53f6d9156a32&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains firsthand how it is to learn programming for a novice student,even with a strong financial background and having completed a university degree. By Sandjar Kozubaev&lt;/p&gt;

&lt;p&gt;Tags: sandjar-kozubaev, learning, programming, student, firsthand, coding, story&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in March 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</link>
      <pubDate>Wed, 02 Mar 2016 12:58:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</guid>
      <description>

&lt;h2 id=&#34;learning-programming-isn-t-that-hard-deep-work-is-hard&#34;&gt;Learning Programming Isn’t That Hard, Deep Work Is Hard&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@benedictfritz/learning-programming-isn-t-that-hard-deep-work-is-hard-40a4cf3104f4&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Benedict Fritz on two types of work (i.e., deep and shallow) and how programming is of the deep type. He links the difficulty of learning to program to the difficulty of practicing deep work.&lt;/p&gt;

&lt;p&gt;Tags: analogy, benedict-fritz, deep-work, shallow-work, learn-to-program, psychology&lt;/p&gt;

&lt;h2 id=&#34;becodeweek-by-yeray-darias&#34;&gt;BeCodeWeek by Yeray Darias&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://developerscookbook.blogspot.com.es/search/label/desk-surfing&#34; target=&#34;_blank&#34;&gt;this category of posts&lt;/a&gt; by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.&lt;/p&gt;

&lt;p&gt;Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc&lt;/p&gt;

&lt;p&gt;Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis&lt;/p&gt;

&lt;h2 id=&#34;becodeweek-by-yeray-darias-1&#34;&gt;BeCodeWeek by Yeray Darias&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://developerscookbook.blogspot.com.es/search/label/desk-surfing&#34; target=&#34;_blank&#34;&gt;this category of posts&lt;/a&gt; by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.&lt;/p&gt;

&lt;p&gt;Publishes one entry per day detailing his activities: working for an open-source library, discussions, etc&lt;/p&gt;

&lt;p&gt;Tags: becodeweek, yeray-darias, desk-surfing, experience, experience-report, analysis&lt;/p&gt;

&lt;h2 id=&#34;tracer-bullets&#34;&gt;Tracer Bullets&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://c2.com/cgi/wiki?TracerBullets&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt; about tracer bullets, an analogy from the military warfare to a software project.&lt;/p&gt;

&lt;p&gt;Serves the purpose of adjusting the aim of the cannon to better reach the target.&lt;/p&gt;

&lt;p&gt;Tags: analogy, metaphor, warfare, management&lt;/p&gt;

&lt;h2 id=&#34;cohesion-the-cornerstone-of-software-design&#34;&gt;Cohesion - the cornerstone of software design&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://codurance.com/2016/03/03/cohesion-cornerstone-software-design/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sandro Mancuso on the topic of cohesion. Describes the 7 types of cohesion, as described in Structured Design&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, from worst to best:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coincidental cohesion&lt;/li&gt;
&lt;li&gt;Logical cohesion&lt;/li&gt;
&lt;li&gt;Temporal cohesion&lt;/li&gt;
&lt;li&gt;Procedural cohesion&lt;/li&gt;
&lt;li&gt;Communicational/informational cohesion&lt;/li&gt;
&lt;li&gt;Sequential cohesion&lt;/li&gt;
&lt;li&gt;Functional cohesion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and about Design-Level Cohesion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coincidental relation (R1)&lt;/li&gt;
&lt;li&gt;Conditional relation (R2)&lt;/li&gt;
&lt;li&gt;Iterative relation (R3)&lt;/li&gt;
&lt;li&gt;Communication relation (R4)&lt;/li&gt;
&lt;li&gt;Sequential relation (R5)&lt;/li&gt;
&lt;li&gt;Functional (R6)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: cohesion, codurance, edward-yourdon, larry-constantine, list, sandro-mancuso, software-design, design-level-cohesion, smc-cohesion, dlc-cohesion&lt;/p&gt;

&lt;h2 id=&#34;etsy-cto-q-a-we-need-software-engineers-not-developers&#34;&gt;Etsy CTO Q&amp;amp;A: We Need Software Engineers, Not Developers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/etsy-cto-qa-need-software-engineers-not-developers/&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt; with John Allspaw, where they explain the onboarding experience for new hires at Etsy, the DevOps philosophy and the need for engineering skills, more than developer skills. This can be exemplified in the need to know more, defining the boundaries of your job and finding the right tool for the job.&lt;/p&gt;

&lt;p&gt;Tags: devops, interview, q-and-a, john-allspaw, etsy, onboarding, hire, team-management, deploy&lt;/p&gt;

&lt;h2 id=&#34;frequency-reduces-difficulty&#34;&gt;Frequency Reduces Difficulty&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://martinfowler.com/bliki/FrequencyReducesDifficulty.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Martin Fowler on why we should repeat things that are difficult for us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perfectioning the technique&lt;/li&gt;
&lt;li&gt;Internalizing the details&lt;/li&gt;
&lt;li&gt;Easing its automation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: martin-fowler, automation, process, perfection, internalizing, technique, detail, process-theory, agile&lt;/p&gt;

&lt;h2 id=&#34;lambdas-are-confusing&#34;&gt;Lambdas are confusing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this video where Coman Hamilton from JAXenter interviews Dr. Heinz Kabutz about Java&amp;rsquo;s lambda syntax. Cites the problem with exceptions, generics, method overloading.&lt;/p&gt;

&lt;p&gt;Tags: java, lambda, coman-hamilton, jaxenter, heinz-kabutz, problem&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WcHom1eVhi4&amp;amp;feature=youtu.be&#34; target=&#34;_blank&#34;&gt;https://www.youtube.com/watch?v=WcHom1eVhi4&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;el-full-stack-developer-en-2016&#34;&gt;El full-stack developer en 2016&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.developerdepueblo.com/development/full-stack-developer-2016/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jose Ignacio Andrés about the job descriptions of 2016.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;El principal valor de un full-stack es poder simplificar el trabajo a los demás miembros del equipo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My translation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The main value of a full-stack developer is to be able to simplify other teammates&amp;rsquo; work&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: teamwork, teammate, fullstack, simplification, work, team-management, jose andres&lt;/p&gt;

&lt;h2 id=&#34;i-am-a-software-craftsman&#34;&gt;I am a software craftsman&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.dirv.me/i-am-a-software-craftsman/index.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Daniel Irvine about calling yourself a craftsman or not. He says that if you adhere to their values, you should.&lt;/p&gt;

&lt;p&gt;Tags: craftsmanship, label, daniel-irvine, craftsman, group-belonging&lt;/p&gt;

&lt;h2 id=&#34;teaching-programming-languages-in-a-post-linnaean-age&#34;&gt;Teaching Programming Languages in a Post-Linnaean Age&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://cs.brown.edu/~sk/Publications/Papers/Published/sk-teach-pl-post-linnaean/paper.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; by Shriram Krishnamurthi where he explains the need for books like &lt;a href=&#34;http://www.plai.org/&#34; target=&#34;_blank&#34;&gt;PLAI&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lack of paradigms in new languages, and its separation (or lack of)&lt;/li&gt;
&lt;li&gt;design of languages cheaper and cheaper these days&lt;/li&gt;
&lt;li&gt;rigor level in publications&lt;/li&gt;
&lt;li&gt;inductive and deductive learning
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;post-Linnaean&lt;/code&gt; refers to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Carl_Linnaeus&#34; target=&#34;_blank&#34;&gt;Carl Linnaeus&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;He is known as the father of modern taxonomy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: inductive-learning, deductive-learning, dsl, domain-specific-language, type-soundness, continuation-style, garbage-collection, reactive-programming, scheme, plai, teaching, programming-language, shriram-krishnamurthi&lt;/p&gt;

&lt;h2 id=&#34;lazy-ruby&#34;&gt;Lazy Ruby&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://sonnym.github.io/2014/04/05/lazy-ruby/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by sonnym about using ruby&amp;rsquo;s lazy (non-strict) features, detailing an example with Fibonacci&amp;rsquo;s sequence.&lt;/p&gt;

&lt;p&gt;Tags: laziness, strictness, non-strictness, ruby, fibonacci, comparison&lt;/p&gt;

&lt;h2 id=&#34;jessica-livingston&#34;&gt;Jessica Livingston&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://paulgraham.com/jessica.html&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Paul Graham about his co-founder at the Y-combinator: Jessica Livingston. She was considered the Social Radar at YC&lt;/p&gt;

&lt;p&gt;The essay also talks about the non-existent separation between working hours and not and about her implication and personality.&lt;/p&gt;

&lt;p&gt;Tags: jessica-livingston, paul-graham, y-combinator, feminism, yc, essay&lt;/p&gt;

&lt;h2 id=&#34;four-laws-of-software-economics-part-1&#34;&gt;Four Laws Of Software Economics (Part 1)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@RichMironov/four-laws-of-software-economics-part-1-e162aa0ea9e5&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Rich Mironov on why the development team will never be big enough (because of economics, because there are more things to be done than time to do them, so we have to prioritize them) and about the communication problems between the dev team and the client(s).&lt;/p&gt;

&lt;p&gt;Also talks about the general personality of clients and devs and task prioritization&lt;/p&gt;

&lt;p&gt;Tags: exclusive-or, magical-thinking, tnstaafl, management, agile, team, capacity, death-march, estj, intp, software-economics, product-strategy, law-of-ruthless-prioritization, law, rich-mironov, slack, myers-briggs-type&lt;/p&gt;

&lt;h2 id=&#34;you-should-take-a-codecation&#34;&gt;You Should Take A Codecation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://robots.thoughtbot.com/you-should-take-a-codecation&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ben Orenstein explaining what is a codecation and what he&amp;rsquo;s done in the two codecations he&amp;rsquo;s taken.&lt;/p&gt;

&lt;p&gt;Tags: codecation, ben-orenstein, vacation, holiday, coding, shipping, in-company&lt;/p&gt;

&lt;h2 id=&#34;giving-up-on-tdd&#34;&gt;Giving Up on TDD&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://iansommerville.com/systems-software-and-technology/giving-up-on-test-first-development/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ian Sommerville about the problems he&amp;rsquo;s found while doing TDD, mainly about design, but also about being conservative in the amount of tests you allow yourself to break while refactoring.&lt;/p&gt;

&lt;p&gt;Tags: tdd, ian-sommerville, refactoring, problem, design-problem, design, giving-up-tdd&lt;/p&gt;

&lt;h2 id=&#34;giving-up-on-tdd-answer&#34;&gt;Giving Up on TDD - answer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.cleancoder.com/uncle-bob/2016/03/19/GivingUpOnTDD.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Robert C. Martin on the common issues for people adopting TDD:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Fragile Test Problem&lt;/li&gt;
&lt;li&gt;The Design Problem&lt;/li&gt;
&lt;li&gt;The Testable Design Problem&lt;/li&gt;
&lt;li&gt;The Magic Bullet Problem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article is an answer to another by Ian Sommerville.&lt;/p&gt;

&lt;p&gt;Tags: tdd, uncle-bob, robert-martin, adoption, ian-sommerville, fragile-test-problem, giving-up-tdd, design-problem, testable-design-problem, magic-bullet-problem&lt;/p&gt;

&lt;h2 id=&#34;seek-out-jobs-with-fast-learning-cycles&#34;&gt;Seek out jobs with fast learning cycles&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@sarahtavel/seek-out-jobs-with-fast-learning-cycles-f923c8d8a4be#.7bxx65a4x&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sarah Tavel on learning on the job and how fast these learning cycles can happen at companies at different stages of maturity.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So if you’re thinking of changing jobs, or taking your first, my advice: find a place with a fast learning cycle, and a steep learning curve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: learning, job, hypothesis, sarah-tavel, learning-cycle, maturity-level, learning-process, product-management&lt;/p&gt;

&lt;h2 id=&#34;clean-code-vs-implementation-patterns&#34;&gt;Clean Code Vs. Implementation Patterns&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.xebia.com/clean-code-vs-implementation-patterns/&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; of Clean Code vs Implementation Pattern books, by Vincent Partington.&lt;/p&gt;

&lt;p&gt;In it, the author explains the differences in style in both books, and how they compare to others.&lt;/p&gt;

&lt;p&gt;Tags: clean-code, implementation-patterns, comparison, book-review, book-comparison, vincent-partington&lt;/p&gt;

&lt;h2 id=&#34;stuck-in-traffic-vlog-103-new-spammer-techniques&#34;&gt;Stuck in Traffic vlog #103 - New Spammer Techniques&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.peerlyst.com/posts/stuck-in-traffic-vlog-103-new-spammer-techniques-j-wolfgang-goerlich&#34; target=&#34;_blank&#34;&gt;this vlog entry&lt;/a&gt; on machines fighting machines (exemplified with the spam producing and filtering) and how some spammers are trying more direct techniques focusing on higher-value targets, sometimes even handcrafting messages and modifying them every few units.&lt;/p&gt;

&lt;p&gt;Tags: wolfgang-goerlich, spam, vlog, spammer, machine-learning&lt;/p&gt;

&lt;h2 id=&#34;becoming-a-finisher&#34;&gt;Becoming A Finisher&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://christopherdbui.com/becoming-a-finisher/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Christopher Bui where he explains that projects that are too ambitious stall your productivity and make you lose your focus.&lt;/p&gt;

&lt;p&gt;Tags: christopher-bui, pomodoro, time-management, productivity, motivation, ambition, paul-graham, quote&lt;/p&gt;

&lt;h2 id=&#34;hanging-around-with-red-black-tree-implementations-the-beginnings&#34;&gt;Hanging around with red-black tree implementations: the beginnings&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.fraixed.es/post/hanging-around-red-black-trees-implementations/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ivan Fraixedes where he details the progress of implementing a red-black tree, and also his motivation for doing it.&lt;/p&gt;

&lt;p&gt;Tags: ivan-fraixedes, red-black-tree, abstract-data-structure, adt, deliberate-practice, pet-project&lt;/p&gt;

&lt;h2 id=&#34;some-tools-for-faster-blogging-in-octopress&#34;&gt;Some Tools for Faster Blogging in Octopress&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://dgmstuart.github.io/blog/2015/03/27/some-tools-for-faster-blogging-in-octopress/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; for tips and tricks on how to blog faster with octopress. Written by Duncan Stuart.&lt;/p&gt;

&lt;p&gt;Tags: duncan-stuart, blog, improvement, meta, octopress, tip-and-trick&lt;/p&gt;

&lt;h2 id=&#34;the-veil-of-ignorance&#34;&gt;The veil of ignorance&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mrmrs.io/writing/2016/03/23/the-veil-of-ignorance/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Adam Morse on how not being on the top of the skills performance can affect your design and your user experience. Also, references the concept of &amp;ldquo;The Veil of Ignorance&amp;rdquo;, a concept by John Rawls.&lt;/p&gt;

&lt;p&gt;Tags: john-rawls, veil-of-ignorance, user-experience, design&lt;/p&gt;

&lt;h2 id=&#34;to-smile-again-recovering-from-the-paralysis-of-burnout&#34;&gt;To Smile Again &amp;ndash; Recovering from the paralysis of burnout&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://m.signalvnoise.com/to-smile-again-ae0ba9f2198c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jamis Buck on his story of burnout, what symptoms had on him and how he got out of it.&lt;/p&gt;

&lt;p&gt;Tags: burnout, jamis-buck, psychology, productivity, personal, story, analogy&lt;/p&gt;

&lt;h2 id=&#34;beyond-email-could-startup-slack-change-the-way-you-work&#34;&gt;Beyond email: could startup Slack change the way you work?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.theguardian.com/technology/2016/mar/25/slack-butterfield-emoji-chat-nasa-harvard-silicon-valley&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on Slack&amp;rsquo;s office culture, with their diversity, policies and values after a high people growth in a short period of time. By Jemima Kiss&lt;/p&gt;

&lt;p&gt;Tags: culture, office-culture, slack, jemima-kiss&lt;/p&gt;

&lt;h2 id=&#34;slack-work-this-way&#34;&gt;Slack: Work This Way&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@iaintait/slack-work-this-way-9221284472dd&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, a response to my above read, about the office culture at Slack.&lt;/p&gt;

&lt;p&gt;Tags: iain-tait, response, slack, office-culture&lt;/p&gt;

&lt;h2 id=&#34;bem-101&#34;&gt;BEM 101&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://css-tricks.com/bem-101/&#34; target=&#34;_blank&#34;&gt;this introduction&lt;/a&gt; to a CSS style called Block, Element, Modifier methodology (BEM).&lt;/p&gt;

&lt;p&gt;In it,&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;a block is a top-level abstraction of a new component&lt;/li&gt;
&lt;li&gt;Child items, or elements, can be placed inside and these are denoted by two underscores following the name of the block [&amp;hellip;].
modifiers can manipulate the block so that we can theme or style that particular component without inflicting changes on a completely unrelated module. This is done by appending two hyphens to the name of the block [&amp;hellip;].&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;By Joe Richardson, Robin Rendle et al.&lt;/p&gt;

&lt;p&gt;Tags: joe-richardson, robin-rendle, bem, css, css-methodology, introduction, css-architecture, sass&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Structured Design: Fundamentals of a Discipline of Computer Program and Systems Design by Yourdon and Constantine.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Craftsmanship analogy</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/27/craftsmanship-analogy/</link>
      <pubDate>Mon, 27 Jul 2015 00:41:26 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/27/craftsmanship-analogy/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve found this set of tweets about the craftsmanship analogy by Sarah Mei:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Just put my finger on why the craft/workshop metaphor for software development doesn&amp;#39;t quite fit.&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625089415812022272&#34;&gt;July 25, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Craft&amp;quot; doesn&amp;#39;t build any collaboration into the process, except in a top-down control-oriented way (master, journeyman, apprentice).&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625089741046714368&#34;&gt;July 25, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Craft&amp;quot; casts software development as an individual achievement, just as in a workshop, the master did all the important work on each piece.&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625090561821642752&#34;&gt;July 25, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Software development is sometimes like that. But the craft/workshop metaphor doesn&amp;#39;t fit at all with what modern small teams do.&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625090750628261888&#34;&gt;July 25, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Modeling development as a &amp;quot;craft&amp;quot; means hoarding information rather than sharing openly, &amp;amp; individual rather than collective code ownership.&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625091765108760580&#34;&gt;July 25, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Craft means teams have a rigid hierarchy in which folks at the lowest levels just watch the higher-ups work, rather than participating.&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625092312742256640&#34;&gt;July 25, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The folks who like the craft metaphor tend to use it to mean &amp;quot;we take pride in our work.&amp;quot; I don&amp;#39;t dispute that that is important.&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625093820011540480&#34;&gt;July 26, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;But the craft metaphor has other implications, some of which, historically, were more important to a shop than &amp;quot;taking time to do it right.&amp;quot;&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625094414801604608&#34;&gt;July 26, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Some people want the information hoarding &amp;amp; rigid hierarchy that go along with &amp;quot;craft.&amp;quot; But some of the folks who use it surely don&amp;#39;t.&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625095815854305281&#34;&gt;July 26, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;It&amp;#39;s unfortunate they chose &amp;quot;craft&amp;quot; &amp;amp; built companies &amp;amp; conferences around a metaphor that is such a remarkably poor fit for a modern team.&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625096569075838980&#34;&gt;July 26, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Software as craft was a reaction to the growing popularity of the factory model, in which developers are replaceable line workers.&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625098649635192832&#34;&gt;July 26, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Both the factory and the craft metaphors, while they each describe some software orgs, don&amp;#39;t describe any sort of team I want to be on.&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625099626434072576&#34;&gt;July 26, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Or any sort of team I *have* been on, in the last 15 years.&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625099810656247808&#34;&gt;July 26, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I should say, any of the teams I have enjoyed being on. The teams I didn&amp;#39;t enjoy had some element of either the workshop or the factory.&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625101011997163520&#34;&gt;July 26, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;It&amp;#39;s time for us to move on from &amp;quot;craft.&amp;quot; To what, though?&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625101911276978176&#34;&gt;July 26, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I&amp;#39;ve been thinking about &amp;quot;stage,&amp;quot; in which team members are part of an ensemble cast working together to form a creative work.&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625102202982436864&#34;&gt;July 26, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Stage&amp;quot; does allow for a single person (perhaps a big name) to come in &amp;amp; ruin the collaboration by making it all about them. :D&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625103117151944705&#34;&gt;July 26, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;In broad strokes, the acting ensemble metaphor does describe the teams I&amp;#39;ve loved working on better than craft/workshop or factory.&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625104587842719744&#34;&gt;July 26, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The seed of this idea came from Artful Making&amp;#39;s descriptions of how a director &amp;amp; actors put together a play.&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625107441311576064&#34;&gt;July 26, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I don&amp;#39;t have first-hand experience to draw on. But I suppose none of the software-as-craft folks have apprenticed at a blacksmith, either.😊&lt;/p&gt;&amp;mdash; Sarah Mei (@sarahmei) &lt;a href=&#34;https://twitter.com/sarahmei/status/625107793230458880&#34;&gt;July 26, 2015&lt;/a&gt;&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Practical Object-Oriented Design in Ruby: Chapter 4</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/26/practical-object-oriented-design-in-ruby-chapter-4/</link>
      <pubDate>Sun, 26 Jul 2015 22:40:29 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/26/practical-object-oriented-design-in-ruby-chapter-4/</guid>
      <description>&lt;p&gt;We&amp;rsquo;ve read the fourth chapter from the Practical Object-Oriented Design in Ruby, by Sandi Metz.&lt;/p&gt;

&lt;p&gt;These are the concepts and links brought up during the discussion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The craftsmanship analogy, as exposed in &lt;a href=&#34;https://twitter.com/sarahmei/status/625089415812022272&#34; target=&#34;_blank&#34;&gt;these tweets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Difference between function and method&lt;/li&gt;
&lt;li&gt;What vs How (also present in the GOOS)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Self-study in July 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/</link>
      <pubDate>Wed, 01 Jul 2015 01:08:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve grouped all small posts related to the self-study from July 2015 into a single post&lt;/p&gt;

&lt;h2 id=&#34;clojure-made-simple&#34;&gt;Clojure made simple&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=VSdnJDO-xdg&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Rich Hickey at the Java One. It references the talk &lt;a href=&#34;http://www.infoq.com/presentations/Simple-Made-Easy&#34; target=&#34;_blank&#34;&gt;Easy made simple&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;polymorphism without inheritance; single dispatch on the first parameter&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;productive-pair-programming&#34;&gt;Productive pair programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/07/productive-pair-programming/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about pair programming, using the driver &amp;amp; copilot technique, written by Carlos Blé&lt;/p&gt;

&lt;h2 id=&#34;building-automated-rest-apis-with-python&#34;&gt;Building Automated REST APIs with Python&lt;/h2&gt;

&lt;p&gt;Investigating QA automation for REST APIs, I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/jeffknupp/building-automated-rest-apis-with-python&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about it&lt;/p&gt;

&lt;h2 id=&#34;backwards-compatibility-testing-for-your-clojure-project&#34;&gt;Backwards Compatibility Testing For Your Clojure Project&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jenkster.com/2014/02/backwards-compatibility-testing-your-clojure-project.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on making leiningen test the application on several clojure versions. Written by Kris Jenkins.&lt;/p&gt;

&lt;h2 id=&#34;succeeding-with-automated-integration-tests&#34;&gt;Succeeding with Automated Integration Tests&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://jeremydmiller.com/2015/06/25/succeeding_with_integration_testing/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jeremy Miller on integration testing and how to succeed with it. Some notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose the Quickest, Useful Feedback Mechanism, even if that means testing the backend and frontend separately&lt;/li&gt;
&lt;li&gt;Prefer white-box than black-box testing&lt;/li&gt;
&lt;li&gt;Use quick tests, that can be run locally in an easy fashion&lt;/li&gt;
&lt;li&gt;Do not share databases, as they introduce risks of flaky tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;applied-ddd-in-a-java-ee-7-and-open-source-world&#34;&gt;Applied DDD in a Java EE 7 and Open Source World&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=9D_-7E7Mrzw&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Edson Yanaga in the Java One, about DDD using Java EE 7, JSFs and lambdas on top of glassfish&lt;/p&gt;

&lt;h2 id=&#34;integrated-tests-are-a-scam&#34;&gt;Integrated tests are a scam&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read, again, &lt;a href=&#34;http://blog.thecodewhisperer.com/2010/10/16/integrated-tests-are-a-scam/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on integrated tests and why not to use them. From a numerical / combinatorics point of view.&lt;/p&gt;

&lt;h2 id=&#34;functional-programming-should-be-your-1-priority-for-2015&#34;&gt;Functional Programming should be your #1 priority for 2015&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@jugoncalves/functional-programming-should-be-your-1-priority-for-2015-47dd4641d6b9&#34; target=&#34;_blank&#34;&gt;this introduction&lt;/a&gt; to functional programming by Ju Gonçalves. Explains some functional concepts, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First-Class Functions&lt;/li&gt;
&lt;li&gt;High-Order Functions&lt;/li&gt;
&lt;li&gt;Pure Functions&lt;/li&gt;
&lt;li&gt;Closures&lt;/li&gt;
&lt;li&gt;Immutable State&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also recommends a few books on the subject (e.g., SICP, HTDP).&lt;/p&gt;

&lt;h2 id=&#34;a-tutorial-introduction-to-the-lambda-calculus&#34;&gt;A Tutorial Introduction to the Lambda Calculus&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt;, an introduction to the lambda calculus. Haven&amp;rsquo;t done the exercises. Written by Raúl Rojas&lt;/p&gt;

&lt;h2 id=&#34;20-common-mistakes-when-doing-test-driven-development&#34;&gt;20 common mistakes when doing Test-Driven Development&lt;/h2&gt;

&lt;p&gt;I had thought of converting all of &lt;a href=&#34;https://twitter.com/search?q=svpino%20%23tdd%20mistake&amp;amp;src=typd&#34; target=&#34;_blank&#34;&gt;his tweets&lt;/a&gt; into a blog post, but he has already done this for us: I&amp;rsquo;ve read a &lt;a href=&#34;https://blog.svpino.com/2015/05/29/20-common-mistakes-when-doing-test-driven-development&#34; target=&#34;_blank&#34;&gt;list of common mistakes&lt;/a&gt; when doing TDD by &lt;a href=&#34;https://twitter.com/svpino&#34; target=&#34;_blank&#34;&gt;Santiago Pino&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;reducing-coupling&#34;&gt;Reducing coupling&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the article by Martin Fowler &lt;a href=&#34;http://martinfowler.com/ieeeSoftware/coupling.pdf&#34; target=&#34;_blank&#34;&gt;Reducing Coupling&lt;/a&gt; in the IEEE SOFTWARE July/August 2001&lt;/p&gt;

&lt;h2 id=&#34;comparing-java-mock-frameworks-part-2-creating-mock-objects&#34;&gt;Comparing Java Mock Frameworks – Part 2: Creating Mock Objects&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://softwareinabottle.wordpress.com/2010/10/06/comparing-java-mock-frameworks-part-2-creating-mock-objects/&#34; target=&#34;_blank&#34;&gt;List of mock frameworks for java&lt;/a&gt;. Have only read the jMock, mockito and jMockit part.&lt;/p&gt;

&lt;p&gt;## Software Craftsmanship book review&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://meaganwaller.com/software-craftsmanship-book-review/&#34; target=&#34;_blank&#34;&gt;this review&lt;/a&gt; for a book that is already pending in my book list: Software Craftsmanship by Pete McBreen.&lt;/p&gt;

&lt;p&gt;The review has been written by Megan Waller, an (ex-)apprentice at 8th Light.&lt;/p&gt;

&lt;h2 id=&#34;fundamental-concepts-in-programming-languages&#34;&gt;Fundamental concepts in programming languages&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.cs.cmu.edu/~crary/819-f09/Strachey67.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; containing the contents for lectures in Computer Programming in the year 1967. Written by Christopher Strachey.&lt;/p&gt;

&lt;p&gt;Note: I&amp;rsquo;ve also seen this paper recommended in the repo &lt;a href=&#34;https://github.com/papers-we-love/papers-we-love/tree/master/plt&#34; target=&#34;_blank&#34;&gt;Papers We Love &amp;gt; plt&lt;/a&gt; (Programming Language Theory)&lt;/p&gt;

&lt;h2 id=&#34;what-is-reification&#34;&gt;What is reification?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.angelikalanger.com/GenericsFAQ/FAQSections/TechnicalDetails.html#FAQ101A&#34; target=&#34;_blank&#34;&gt;this FAQ&lt;/a&gt; on reification by Angelika Langer&lt;/p&gt;

&lt;h2 id=&#34;type-erasure&#34;&gt;Type erasure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this wikipedia &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_erasure&#34; target=&#34;_blank&#34;&gt;page on type erasure&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-to-make-an-intellij-idea-plugin-in-less-than-30-minutes&#34;&gt;How to make an IntelliJ IDEA plugin in less than 30 minutes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://bjorn.tipling.com/how-to-make-an-intellij-idea-plugin-in-30-minutes&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on creating new IntelliJ IDEA plugin, by Bjorn Tipling&lt;/p&gt;

&lt;h2 id=&#34;how-to-write-clean-testable-code&#34;&gt;How to Write Clean, Testable Code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched, again, &lt;a href=&#34;https://www.youtube.com/watch?v=XcT4yYu_TTs&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Miško Hevery. Discusses what are the characteristics of tested and untested code, how to get from one to the other. Discusses techniques for testing code. At the end, there are questions but they cannot be heard (lack of microphone), so it is harder to follow.&lt;/p&gt;

&lt;h2 id=&#34;how-to-find-a-mentor&#34;&gt;How to Find a Mentor&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/letters-to-my-mother/how-to-find-a-mentor-27fb978a8f1&#34; target=&#34;_blank&#34;&gt;this opinion&lt;/a&gt; on the importance of role models and mentors. The difference between them and a personal experience. Written by Joanne Wilson&lt;/p&gt;

&lt;h2 id=&#34;type-theory&#34;&gt;Type theory&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this wiki page on &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_theory&#34; target=&#34;_blank&#34;&gt;type theory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;type systems [&amp;hellip;] language feature used to reduce bugs&amp;rdquo;&lt;/li&gt;
&lt;li&gt;two types: Church&amp;rsquo;s typed λ-calculi and Martin-Löf&amp;rsquo;s intuitionistic type theory.&lt;/li&gt;
&lt;li&gt;notation:

&lt;ul&gt;
&lt;li&gt;typing judgement: &lt;code&gt;M : A&lt;/code&gt;. Term &lt;code&gt;M&lt;/code&gt; has type &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;example: &lt;code&gt;nat&lt;/code&gt; may be a type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 : nat&lt;/code&gt;, like in Scala&lt;/li&gt;
&lt;li&gt;function: &amp;ldquo;arrow&amp;rdquo;&lt;/li&gt;
&lt;li&gt;apply function to argument: no parenthesis&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;conversion rule: rule for rewriting terms

&lt;ul&gt;
&lt;li&gt;reduction rule: conversion rule that only works in one direction&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;normal form: a form that cannot be further reduced&lt;/li&gt;
&lt;li&gt;element: all closed elements that can be reduced to the same normal form&lt;/li&gt;
&lt;li&gt;closed term: a term without parameters. Opposite is an open term&lt;/li&gt;
&lt;li&gt;convertibility: property of terms, both open and closed. Said to be convertible if two terms can be reduced to the same term

&lt;ul&gt;
&lt;li&gt;warning: x + 1 and 1 + x are not convertible because they are in normal form and not the same&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;type-system&#34;&gt;Type system&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this wiki page on &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_system&#34; target=&#34;_blank&#34;&gt;type system&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;The depth of type constraints and the manner of their evaluation affect the typing of the language&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Type polymorphism&lt;/li&gt;
&lt;li&gt;{compile time, runtime} x {manually annotated, inferred}&lt;/li&gt;
&lt;li&gt;&amp;ldquo;A program associates each value with at least one particular type, but it also can occur that one value is associated with many subtypes.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Classification of types:

&lt;ul&gt;
&lt;li&gt;data type – a type of a value&lt;/li&gt;
&lt;li&gt;class – a type of an object&lt;/li&gt;
&lt;li&gt;kind – a type of a type, or metatype&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;the type inference might be undecidable (for more complex type inference)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Strong typing offers more safety, but cannot guarantee complete type safety.&amp;rdquo; An example is the division by zero, altough some languages may declare a dependent type &amp;ldquo;non-zero numbers&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-3-things-you-should-know-about-hashcode&#34;&gt;The 3 things you should know about hashCode()&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://eclipsesource.com/blogs/2012/09/04/the-3-things-you-should-know-about-hashcode/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the hashCode() method in java, written by Ralf Sternberg.&lt;/p&gt;

&lt;h2 id=&#34;reduce-complexity-with-variants&#34;&gt;Reduce Complexity with Variants&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.lispcast.com/reduce-complexity-with-variants&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on variants in clojure by Eric Normand&lt;/p&gt;

&lt;h2 id=&#34;what-is-new-in-sql-2011&#34;&gt;What is new in SQL:2011&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.sigmod.org/publications/sigmod-record/1203/pdfs/10.industry.zemke.pdf&#34; target=&#34;_blank&#34;&gt;this white paper&lt;/a&gt; on the new features in SQL 2011. Written by Fred Zemke&lt;/p&gt;

&lt;h2 id=&#34;5-error-tracking-tools-java-developers-should-know&#34;&gt;5 Error Tracking Tools Java Developers Should Know&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javacodegeeks.com/2014/09/5-error-tracking-tools-java-developers-should-know.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about tracking tools for java written by Alex Zhitnitsky, featuring:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Raygun&lt;/li&gt;
&lt;li&gt;Sentry&lt;/li&gt;
&lt;li&gt;Takipi&lt;/li&gt;
&lt;li&gt;Airbrake&lt;/li&gt;
&lt;li&gt;StackHunter&lt;/li&gt;
&lt;li&gt;[Bonus] ABRT&lt;/li&gt;
&lt;li&gt;Comments cite &lt;a href=&#34;http://squash.io&#34; target=&#34;_blank&#34;&gt;Squash&lt;/a&gt; (server written in ruby, java client available) and &lt;a href=&#34;http://rollbar.com&#34; target=&#34;_blank&#34;&gt;Rollbar&lt;/a&gt; (home says supports android but not says anything about java)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data-clump&#34;&gt;Data clump&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://martinfowler.com/bliki/DataClump.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the bliki, by Martin Fowler&lt;/p&gt;

&lt;h2 id=&#34;np-complete-problems&#34;&gt;NP-Complete problems&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://webdiis.unizar.es/asignaturas/TC/wp/wp-content/uploads/2012/01/L15_NPcompletos.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Prof. Elvira Mayordomo about NP-Complete problems, how to reduce them to other problems and practical applications. (In Spanish)&lt;/p&gt;

&lt;h2 id=&#34;removal-of-sun-misc-unsafe-in-java-9-a-disaster-in-the-making&#34;&gt;Removal of sun.misc.Unsafe in Java 9 - A disaster in the making&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.dripstat.com/removal-of-sun-misc-unsafe-a-disaster-in-the-making/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the removal of this Unsafe class in Java 9, by the DripStat team&lt;/p&gt;

&lt;h2 id=&#34;how-to-write-directly-to-a-memory-locations-in-java&#34;&gt;How To Write Directly to a Memory Locations In Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://robaustin.wikidot.com/how-to-write-to-direct-memory-locations-in-java&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; on how to write directly to a memory position in java, by Rob Austin&lt;/p&gt;

&lt;h2 id=&#34;interesting-uses-of-sun-misc-unsafe&#34;&gt;Interesting uses of sun.misc.Unsafe&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://bytescrolls.blogspot.com.es/2011/04/interesting-uses-of-sunmiscunsafe.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Haris A.L.&lt;/p&gt;

&lt;h2 id=&#34;introduction-to-the-theory-of-np-completeness&#34;&gt;Introduction to the theory of np-completeness&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.site.uottawa.ca/~lucia/courses/4105-02/np.pdf&#34; target=&#34;_blank&#34;&gt;these notes / slides&lt;/a&gt; to the introductory course of NP-completeness, by Prof Lucia Moura&lt;/p&gt;

&lt;h2 id=&#34;js-code-kata-linked-list&#34;&gt;JS Code Kata: Linked List&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/yitznewton/js-code-kata-linked-list&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; on the kata linked list, by Yitz Schaffer. The slide #13 talks about the transformations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;refactor: change form without changing behavior&lt;/li&gt;
&lt;li&gt;transform: change behavior while changing form as little as possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also about the Transformation Priority Premise (TPP) (also in this month)&lt;/p&gt;

&lt;h2 id=&#34;the-transformation-priority-premise&#34;&gt;The Transformation Priority Premise&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read, again, &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Uncle Bob (Robert C. Martin)&lt;/p&gt;

&lt;h2 id=&#34;data-structures&#34;&gt;Data structures&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the wiki page for&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/SPQR_tree&#34; target=&#34;_blank&#34;&gt;SPQR tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Binary_search_tree&#34; target=&#34;_blank&#34;&gt;BSR tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Red%E2%80%93black_tree&#34; target=&#34;_blank&#34;&gt;Red black tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Judy_array&#34; target=&#34;_blank&#34;&gt;Judy array&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, The &lt;a href=&#34;http://bigocheatsheet.com/&#34; target=&#34;_blank&#34;&gt;Big-O notation complexity cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;on-benchmarks-numbers-every-programmer-should-know-and-their-impact-on-benchmarks&#34;&gt;On benchmarks: Numbers every programmer should know and their impact on benchmarks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://hype-free.blogspot.com/2014/03/on-benchmarks.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; on doing back-of-the-envelope calculations on publicly available benchmarks, written by Attila-Mihaly Balazs&lt;/p&gt;

&lt;h2 id=&#34;top-java-ide-keyboard-shortcuts-for-eclipse-intellij-idea-netbeans&#34;&gt;Top Java IDE Keyboard Shortcuts for Eclipse, IntelliJ IDEA &amp;amp; NetBeans&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://zeroturnaround.com/rebellabs/top-java-ide-keyboard-shortcuts-for-eclipse-intellij-idea-netbeans/&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; on the topic of keyboard shortcuts for java IDEs, written by Oleg Šelajev&lt;/p&gt;

&lt;h2 id=&#34;the-hacker-s-summer-training-guide-part-1&#34;&gt;The hacker’s summer training guide – part 1&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.paymill.com/hackers-training-guide-1&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Paymill, that suggests which new languages to learn this summer: rust, go, elixir, ocaml, scala, livescript.&lt;/p&gt;

&lt;h2 id=&#34;applications-built-extremely-right&#34;&gt;Applications built extremely right&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://apiumtech.com/blog/applications-build-with-outsourcing/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; with a list of candidates for building nice products, written by Xavi Hidalgo.&lt;/p&gt;

&lt;h2 id=&#34;agile-project-seed-infrastructure-by-default&#34;&gt;Agile project seed. Infrastructure by default.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://apiumtech.com/blog/seed-de-proyecto-agile-infraestructura-por-defecto/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; on an agile seed project. Reminded me of the 12-factor app&lt;/p&gt;

&lt;h2 id=&#34;what-an-agile-developer-should-know&#34;&gt;What an agile developer should know&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.apiumtech.com/blog/lo-que-un-desarrollador-agile-deberia-saber/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Xavi Hidalgo&lt;/p&gt;

&lt;h2 id=&#34;bad-apples-that-can-destroy-a-team&#34;&gt;Bad Apples that can destroy a team&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve listened to &lt;a href=&#34;http://www.scrum-master-toolbox.com/2015/03/podcast/dominic-krimmer-describes-the-types-of-bad-apples-that-can-destroy-a-team/&#34; target=&#34;_blank&#34;&gt;this podcast&lt;/a&gt; about the bad apples in a team. Presented by Vasco Duarte and Dominic Krimmer as the main speaker&lt;/p&gt;

&lt;h2 id=&#34;how-scala-compares-with-20-other-programming-languages-according-to-reddit-analysis&#34;&gt;How Scala compares with 20 other programming languages according to Reddit analysis&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.typesafe.com/blog/how-scala-compares-20-programming-languages-reddit-analysis&#34; target=&#34;_blank&#34;&gt;this analysis&lt;/a&gt; of the language comparison, written by Oliver White&lt;/p&gt;

&lt;h2 id=&#34;javascript-patterns-book-review&#34;&gt;Javascript patterns book review&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.bennadel.com/blog/2047-javascript-patterns-by-stoyan-stefanov.htm&#34; target=&#34;_blank&#34;&gt;this review&lt;/a&gt; by Ben Nadel on the book Javascript Patterns, by Stoyan Stefanov&lt;/p&gt;

&lt;h2 id=&#34;monogamous-tdd&#34;&gt;Monogamous TDD&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2014/04/25/MonogamousTDD.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the fundamentalism of TDD, written by Robert C Martin&lt;/p&gt;

&lt;h2 id=&#34;encapsulating-localstorage-access-in-angularjs&#34;&gt;Encapsulating LocalStorage Access In AngularJS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.bennadel.com/blog/2861-encapsulating-localstorage-access-in-angularjs.htm&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why encapsulate the access to the localStorage, written by Ben Nadel&lt;/p&gt;

&lt;h2 id=&#34;anatomy-of-a-zero-knowledge-web-application&#34;&gt;Anatomy of a zero-knowledge web application&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://clipperz.is/blog/2007/08/24/anatomy_zero_knowledge_web_application/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on a zero-knowledge web application, by the clipperz team&lt;/p&gt;

&lt;h2 id=&#34;refactorización-de-código-legado-clase-maestra&#34;&gt;Refactorización de Código Legado Clase Maestra&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=VBgCKKevhyI&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; about refactoring a legacy code in C#, by Danijel Arsenovski&lt;/p&gt;

&lt;h2 id=&#34;taming-javaagents&#34;&gt;Taming Javaagents&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/shelajev/taming-javaagents-bcn-jug-2015&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt;, again, from a conference I went to a few months ago about java agents. Written by Oleg Šelajev.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/shelajev/ResourceLeakAgent&#34; target=&#34;_blank&#34;&gt;This&lt;/a&gt; is the repository containing the memory leak agent he talks about&lt;/p&gt;

&lt;h2 id=&#34;mathematics-for-computer-science-lecture-1&#34;&gt;Mathematics for Computer Science, Lecture 1&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched by &lt;a href=&#34;http://xoax.net/comp_sci/crs/math_for_comp_science_mit/lessons/Lecture1/&#34; target=&#34;_blank&#34;&gt;the first recitation&lt;/a&gt; in &lt;a href=&#34;http://xoax.net/comp_sci/crs/math_for_comp_science_mit/index.php&#34; target=&#34;_blank&#34;&gt;this course&lt;/a&gt;, offered by MIT Open Course Ware (OCW). Recited by Tom Leighton&lt;/p&gt;

&lt;h2 id=&#34;programming-abstractions-lecture-7&#34;&gt;Programming Abstractions: Lecture 7&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;http://xoax.net/comp_sci/crs/programming_abstractions_stanford/lessons/Lecture7/&#34; target=&#34;_blank&#34;&gt;this lecture&lt;/a&gt; by Julie Zelensky about the comparison operator, recursion and a live coding session calculating the most ocurring anagram word in a file.&lt;/p&gt;

&lt;p&gt;She uses small outputs to check the correctness of her programs to get short feedback cycles, even if they are manual.&lt;/p&gt;

&lt;h2 id=&#34;5-ways-to-launch-a-jmeter-test-without-using-the-jmeter-gui&#34;&gt;5 Ways To Launch a JMeter Test without Using the JMeter GUI&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blazemeter.com/blog/5-ways-launch-jmeter-test-without-using-jmeter-gui&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; on using jmeter without a GUI, by Dmitri Tikhanski&lt;/p&gt;

&lt;h2 id=&#34;clojure-unraveled-chapter-5&#34;&gt;Clojure unraveled, chapter 5&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the &lt;a href=&#34;http://funcool.github.io/clojurescript-unraveled/#language-advanced-topics&#34; target=&#34;_blank&#34;&gt;fifth chapter&lt;/a&gt;, on the topics of Transducers, Transients, Metadata, Macros, Core protocols. Written by Andrey Antukh and Alejandro Gómez&lt;/p&gt;

&lt;h2 id=&#34;a-guide-to-the-basics-of-data-structures&#34;&gt;A guide to the Basics of Data Structures&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://algosaur.us/data-structures-basics/&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; to data structures, covering the stack, the queue, the heap, the tree and the hashmap. Written by Radhika Ghosal&lt;/p&gt;

&lt;h2 id=&#34;government-abandonware&#34;&gt;Government Abandonware&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://techblog.bozho.net/government-abandonware/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; on abandoned, public software that is not opensource. Dubbed by the author as &amp;ldquo;Government Abandonware&amp;rdquo;. Written by Bozhidar Bozhanov&lt;/p&gt;

&lt;h2 id=&#34;the-art-of-incremental-stream-processing&#34;&gt;The Art of Incremental Stream Processing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mth.io/talks/streams/&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; on incremental stream processing. The examples are in haskell and scala. Written by Mark Hibberd&lt;/p&gt;

&lt;h2 id=&#34;reader-as-link-author&#34;&gt;Reader as Link Author&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://hapgood.us/2015/07/22/follow-up-reader-as-link-author/&#34; target=&#34;_blank&#34;&gt;this insight&lt;/a&gt; into federated wikis by Mike Caulfield&lt;/p&gt;

&lt;h2 id=&#34;kafkapocalypse-a-postmortem-on-our-service-outage&#34;&gt;Kafkapocalypse: a postmortem on our service outage&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.parsely.com/post/1738/kafkapocalypse/&#34; target=&#34;_blank&#34;&gt;this post-mortem analysis&lt;/a&gt; of the service outage at parse.ly, by Andrew Montalenti&lt;/p&gt;

&lt;h2 id=&#34;loving-a-log-oriented-architecture&#34;&gt;Loving a Log-Oriented Architecture&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.parsely.com/post/1550/kreps-logs/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; on experiences using the log-based architecture, by Andrew Montalenti. Cites the books &lt;a href=&#34;http://www.amazon.com/Heart-Logs-Stream-Processing-Integration/dp/1491909382&#34; target=&#34;_blank&#34;&gt;I Heart Logs&lt;/a&gt;,  and &lt;a href=&#34;http://www.amazon.com/gp/product/1617290343&#34; target=&#34;_blank&#34;&gt;Big Data: Principles and best practices of scalable realtime data systems&lt;/a&gt; the essay &lt;a href=&#34;http://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying&#34; target=&#34;_blank&#34;&gt;The Log&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-guide-to-algorithmic-complexity&#34;&gt;A guide to Algorithmic Complexity&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://algosaur.us/algorithmic-complexity&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; to algorithmic complexity, explaining Big-Oh notation (Big-Oh, Big-Theta, Big-Omega), with examples. Written by Radhika Ghosal&lt;/p&gt;

&lt;h2 id=&#34;a-guide-to-recursion&#34;&gt;A guide to Recursion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://algosaur.us/recursion&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; to recursion explaining the gist of it. Examples include the Fibonacci sequence and the Hanoi Towers problem. Later, an introduction to the chaos theory and fractals. Written by Radhika Ghosal&lt;/p&gt;

&lt;h2 id=&#34;bootstrapped-clojurescript-faq&#34;&gt;Bootstrapped ClojureScript FAQ&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/clojure/clojurescript/wiki/Bootstrapped-ClojureScript-FAQ&#34; target=&#34;_blank&#34;&gt;this FAQ&lt;/a&gt; related to bootstrapping clojurescript&lt;/p&gt;

&lt;h2 id=&#34;applying-property-based-testing-on-my-binary-search-tree-implementation&#34;&gt;Applying property-based testing on my binary search tree implementation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://garajeando.blogspot.com/2015/07/applying-property-based-testing-on-my.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, written by Manuel Rivero, on applying test-check (a property-based testing framework, similar to quickcheck) to a Binary Search Tree (BST) he did.&lt;/p&gt;

&lt;h2 id=&#34;do-extraterrestrials-use-functional-programming&#34;&gt;Do Extraterrestrials Use Functional Programming?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://yowconference.com.au/slides/yowlambdajam2013/Chakravarty-Extraterrestrials-Keynote.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt;, an introduction to lambda calculus, the Turing machine and the Halting Problem. Later, continues to describe ways of solving problems in a functional way. Also performance and optimizations; monads as well. Written by Manuel M T Chakravarty&lt;/p&gt;

&lt;h2 id=&#34;wip-limits&#34;&gt;WIP Limits&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://theagileist.wordpress.com/2015/06/15/wip-limits/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Tomas Rybing&lt;/p&gt;

&lt;h2 id=&#34;applied-capacity-planning&#34;&gt;Applied capacity planning&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://theagileist.wordpress.com/2015/07/27/applied-capacity-planning/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Tomas Rybing.&lt;/p&gt;

&lt;h2 id=&#34;don-t-get-attached-to-programming-languages&#34;&gt;Don’t Get Attached to Programming Languages&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mikecavaliere.com/dont-get-attached-programming-languages&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Mike Cavaliere&lt;/p&gt;

&lt;h2 id=&#34;the-top-5-skills-of-rock-star-software-engineers&#34;&gt;The Top 5 Skills of Rock Star Software Engineers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://softwareplusplus.com/2015/06/24/the-top-5-skills-of-rock-star-software-engineers/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Cory Berg&lt;/p&gt;

&lt;h2 id=&#34;5-reasons-to-use-protocol-buffers-instead-of-json-for-your-next-service&#34;&gt;5 Reasons to Use Protocol Buffers Instead of JSON For Your Next Service&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codeclimate.com/blog/2014/06/05/choose-protocol-buffers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on Protocol Buffers, written by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;data-serialization-formats&#34;&gt;Data Serialization Formats&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://gist.github.com/joshsz/11299196&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; between MsgPack, JSON, Protocol Buffers, by Josh Szmajda.&lt;/p&gt;

&lt;h2 id=&#34;protocol-buffer-basics-java&#34;&gt;Protocol Buffer Basics: Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/javatutorial&#34; target=&#34;_blank&#34;&gt;this introduction&lt;/a&gt; to Protocol Buffers in Java, by Google&lt;/p&gt;

&lt;h2 id=&#34;restful-considered-harmful&#34;&gt;RESTful Considered Harmful&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://dzone.com/articles/restful-considered-harmful?oid=top_title&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, commenting downsides to using JSON / RESTful APIs, written by Tomasz Nurkiewicz&lt;/p&gt;

&lt;h2 id=&#34;considered-harmful-essays-considered-harmful&#34;&gt;“Considered Harmful” Essays Considered Harmful&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://meyerweb.com/eric/comment/chech.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt;, by Eric Meyer, on why &amp;ldquo;Considered Harmful&amp;rdquo; are harmful as well.&lt;/p&gt;

&lt;h2 id=&#34;keep-lambdas-cohesive&#34;&gt;Keep Lambdas Cohesive&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.agiledeveloper.com/2015/07/keep-lambdas-cohesive.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; with recommendations on keeping the java lambdas cohesive. Written by Venkat Subramaniam&lt;/p&gt;

&lt;h2 id=&#34;the-joy-of-flying-robots-with-clojure&#34;&gt;The Joy of Flying Robots with Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=Ty9QDqV-_Ak&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Carin Meier at the OSCON 2013 about communicating with robots in Clojure&lt;/p&gt;

&lt;h2 id=&#34;how-to-learn-tdd-without-getting-overwhelmed&#34;&gt;How to Learn TDD Without Getting Overwhelmed&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.justinweiss.com/blog/2014/06/02/how-to-learn-tdd-without-getting-overwhelmed/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on learning TDD, by Justin Weiss&lt;/p&gt;

&lt;h2 id=&#34;kata-the-only-way-to-learn-tdd&#34;&gt;Kata - the Only Way to Learn TDD&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.peterprovost.org/blog/2012/05/02/kata-the-only-way-to-learn-tdd/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on learning TDD, by Peter Provost&lt;/p&gt;

&lt;h2 id=&#34;koan-past-perfect&#34;&gt;Koan: Past Perfect&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thecodelesscode.com/case/180&#34; target=&#34;_blank&#34;&gt;this koan&lt;/a&gt;, past perfect, reflecting on the people who prefer the past over the present. Who think that the past was simpler than currently is.&lt;/p&gt;

&lt;h2 id=&#34;koan-future-imperfect&#34;&gt;Koan: Future Imperfect&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thecodelesscode.com/case/181&#34; target=&#34;_blank&#34;&gt;this koan&lt;/a&gt;, continuation from past perfect.&lt;/p&gt;

&lt;h2 id=&#34;why-agile-and-especially-scrum-are-terrible&#34;&gt;Why “Agile” and especially Scrum are terrible&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://michaelochurch.wordpress.com/2015/06/06/why-agile-and-especially-scrum-are-terrible/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on downsides of Agile and Scrum, written by Michael Church.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-study in May 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/</link>
      <pubDate>Sat, 09 May 2015 16:41:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/</guid>
      <description>

&lt;p&gt;Update: I&amp;rsquo;ve grouped all small posts related to the self-study from May 2015
into a single post&lt;/p&gt;

&lt;h2 id=&#34;programmer-passion-considered-harmful&#34;&gt;Programmer passion considered harmful&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/on-coding/programmer-passion-considered-harmful-5c5d4e3a9b28&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why programmer passion could be negative. The title is similar to a paper by Dijkstra.&lt;/p&gt;

&lt;h2 id=&#34;software-craftsmanship-are-bootcamps-enough&#34;&gt;Software Craftsmanship: Are Bootcamps Enough?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.coursereport.com/blog/software-craftsmanship-are-bootcamps-enough&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on software craftsmanship, development bootcamps and passion by &lt;a href=&#34;https://twitter.com/kauerrolemodel&#34; target=&#34;_blank&#34;&gt;Ken Auer&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;improve-your-development-environments-with-virtualization&#34;&gt;Improve your development environments with virtualization&lt;/h2&gt;

&lt;p&gt;I have seen this video: &lt;a href=&#34;https://www.youtube.com/watch?v=Dg_vPMnC7_k&amp;amp;feature=youtu.be&#34; target=&#34;_blank&#34;&gt;Improve your development environments with virtualization&lt;/a&gt; by Luke Sneeringer.&lt;/p&gt;

&lt;p&gt;My notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;development should be exactly like production.&lt;/li&gt;
&lt;li&gt;except where it is too painful. there it should be different&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;buffer-s-take-on-values&#34;&gt;Buffer&amp;rsquo;s take on values&lt;/h2&gt;

&lt;p&gt;I have found these &lt;a href=&#34;http://www.slideshare.net/Bufferapp/buffer-culture-04&#34; target=&#34;_blank&#34;&gt;values&lt;/a&gt;, written by Buffer, very interesting.&lt;/p&gt;

&lt;h2 id=&#34;public-static-void&#34;&gt;Public static void&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this video: &lt;a href=&#34;https://www.youtube.com/watch?v=5kj5ApnhPAE&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Public, static void&amp;rdquo;&lt;/a&gt; by Rob Pike. The slides can be found &lt;a href=&#34;http://www.oscon.com/oscon2010/public/schedule/detail/13423&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;my-notes&#34;&gt;My notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;too much bureaucracy&lt;/li&gt;
&lt;li&gt;fighting the compiler&lt;/li&gt;
&lt;li&gt;dynamic vs static typing&lt;/li&gt;
&lt;li&gt;language too verbose&lt;/li&gt;

&lt;li&gt;&lt;p&gt;do not mix the two of them&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a language niche:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;comprehensible&lt;/li&gt;
&lt;li&gt;statically typed&lt;/li&gt;
&lt;li&gt;light on the page&lt;/li&gt;
&lt;li&gt;fast to work in&lt;/li&gt;
&lt;li&gt;scales well&lt;/li&gt;
&lt;li&gt;doesn&amp;rsquo;t require tools but supports them well&lt;/li&gt;
&lt;li&gt;good at networking and multiprocessing
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(minute 10:09)​&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org&#34; target=&#34;_blank&#34;&gt;Go&lt;/a&gt; was born to fill this niche&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nothing-is-something&#34;&gt;Nothing is something&lt;/h2&gt;

&lt;p&gt;This video has been extracted to a &lt;a href=&#34;../../../../2015/05/04/video-nothing-is-something/&#34;&gt;post&lt;/a&gt; of its own.&lt;/p&gt;

&lt;h2 id=&#34;software-is-eating-the-world&#34;&gt;Software is eating the world&lt;/h2&gt;

&lt;p&gt;This video has been extracted to a &lt;a href=&#34;../../../../2015/05/10/talk-software-is-eating-the-world/&#34;&gt;post&lt;/a&gt; of its own.&lt;/p&gt;

&lt;h2 id=&#34;the-cost-of-test-driven-development&#34;&gt;The Cost of Test Driven Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.typemock.com/2009/03/the-cost-of-test-driven-development.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, on the cost of doing TDD, which refers to &lt;a href=&#34;http://www.msr-waypoint.net/en-us/groups/ese/nagappan_tdd.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt;: Realizing quality improvement through test driven development: results and experiences of four industrial teams (below)&lt;/p&gt;

&lt;h2 id=&#34;realizing-quality-improvement-through-test-driven-development-results-and-experiences-of-four-industrial-teams&#34;&gt;Realizing quality improvement through test driven development: results and experiences of four industrial teams&lt;/h2&gt;

&lt;p&gt;This paper has been extracted to a &lt;a href=&#34;../../../../2015/05/12/paper-tdd-in-industrial-teams/&#34;&gt;post&lt;/a&gt; of its own.&lt;/p&gt;

&lt;h2 id=&#34;learn-you-some-lisp-for-great-good&#34;&gt;Learn You Some Lisp for Great Good&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched the video &lt;a href=&#34;https://www.youtube.com/watch?v=3T00X_sNg4Q&#34; target=&#34;_blank&#34;&gt;Learn You Some Lisp for Great Good&lt;/a&gt;, by Howard Abrams.&lt;/p&gt;

&lt;p&gt;I guess this is a reference to the popular &lt;a href=&#34;http://learnyouahaskell.com/&#34; target=&#34;_blank&#34;&gt;Learn You a Haskell for Great Good!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He suggests many interesting resources for learning Lisp dialects. The live coding is in Clojure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://landoflisp.com/&#34; target=&#34;_blank&#34;&gt;The land of Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mitpress.mit.edu/sicp/&#34; target=&#34;_blank&#34;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;. See also &lt;a href=&#34;https://twitter.com/SICPQuotes&#34; target=&#34;_blank&#34;&gt;SICPQuotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mitpress.mit.edu/books/little-schemer&#34; target=&#34;_blank&#34;&gt;The Little Schemer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/pdf/eintr.pdf&#34; target=&#34;_blank&#34;&gt;An Introduction to Programming in Emacs Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.4clojure.com/&#34; target=&#34;_blank&#34;&gt;4clojure Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://clojurekoans.com/&#34; target=&#34;_blank&#34;&gt;Clojure Koans&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On another topic, in the &lt;a href=&#34;http://www.meetup.com/ClojureBCN/events/222418104/&#34; target=&#34;_blank&#34;&gt;Bank accounts exercise from Exercism&lt;/a&gt; meetup, we discussed the book &lt;a href=&#34;https://pragprog.com/book/shcloj2/programming-clojure&#34; target=&#34;_blank&#34;&gt;Programming Clojure (2nd edition)&lt;/a&gt; by Stuart Halloway&lt;/p&gt;

&lt;h2 id=&#34;professor-frisby-s-mostly-adequate-guide-to-functional-programming&#34;&gt;Professor Frisby&amp;rsquo;s Mostly Adequate Guide to Functional Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/DrBoolean/mostly-adequate-guide&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; to functional programming. It is still work in progress (WIP) but still interesting. Written in javascript, so you can REPL in the browser.&lt;/p&gt;

&lt;h2 id=&#34;learning-code-good&#34;&gt;Learning Code Good&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this video, by Saron Yitbarek: &lt;a href=&#34;https://www.youtube.com/watch?v=-nsnAYRqYLA&#34; target=&#34;_blank&#34;&gt;Learn Code Good&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;why-you-don-t-get-mock-objects&#34;&gt;Why You Don&amp;rsquo;t Get Mock Objects&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=R9FOchgTtLM&#34; target=&#34;_blank&#34;&gt;Why You Don&amp;rsquo;t Get Mock Objects&lt;/a&gt;, by Gregory Moeck.&lt;/p&gt;

&lt;p&gt;In it, they point to the &lt;a href=&#34;http://www.growing-object-oriented-software.com/&#34; target=&#34;_blank&#34;&gt;Growing Object-Oriented Software Guided by Tests&lt;/a&gt; book (&lt;a href=&#34;https://alvarogarcia7.github.io/{{site.category_dir}}/goos&#34;&gt;category here&lt;/a&gt;), the paper &lt;a href=&#34;www.jmock.org/oopsla2004.pdf&#34; target=&#34;_blank&#34;&gt;Mock Roles, not Objects&lt;/a&gt; (also present in the GOOS book).&lt;/p&gt;

&lt;h2 id=&#34;technical-debt-a-repayment-plan&#34;&gt;Technical Debt: A Repayment Plan&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.infoq.com/articles/tech-debt-repayment&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/@jeremyjarrell&#34; target=&#34;_blank&#34;&gt;Jeremy Jarrell&lt;/a&gt; on technical debt how to repay it: schedule, taxes, default, etc&lt;/p&gt;

&lt;p&gt;This has made me think of the &lt;a href=&#34;http://scbcn.ideascale.com/a/dtd/Deuda-t%C3%A9cnica-origen-y-consecuencias/69782-25568&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Deuda técnica, origen y consecuencias&amp;rdquo; talk&lt;/a&gt; (Technical debt: origin and consequences) (Spanish), that was delivered by &lt;a href=&#34;https://twitter.com/@jgomezz&#34; target=&#34;_blank&#34;&gt;Javier Gómez&lt;/a&gt; at the Software Craftsmanship 2014.&lt;/p&gt;

&lt;h2 id=&#34;revisiting-xp-be-a-thoughtful-programmer-by-exercising-more-collective-ownership&#34;&gt;Revisiting XP: be a thoughtful programmer by exercising more collective ownership&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.infoq.com/articles/revisit-p-collective&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/tiagooo_romero&#34; target=&#34;_blank&#34;&gt;Tiago Garcia&lt;/a&gt; on the collective code ownership, as stated by Xtreme Programming (XP), with some example and guidelines.&lt;/p&gt;

&lt;h2 id=&#34;where-s-the-real-bottleneck-in-scientific-computing&#34;&gt;Where&amp;rsquo;s the Real Bottleneck in Scientific Computing?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.americanscientist.org/issues/pub/wheres-the-real-bottleneck-in-scientific-computing/99999&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Greg Wilson on the tools and procedures investigators use to produce software.&lt;/p&gt;

&lt;h2 id=&#34;testing-inside-the-sprint&#34;&gt;Testing inside the Sprint&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ronjeffries.com/articles/2015-03-01-testing-in-sprints/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ron Jeffries.&lt;/p&gt;

&lt;p&gt;Discusses the need for testing and why this hasn&amp;rsquo;t been communicated enough, as there still are people who have not understood it.&lt;/p&gt;

&lt;p&gt;Also about why people equal something failing when using scrum with scrum failing.&lt;/p&gt;

&lt;h2 id=&#34;dto-vs-domain-models&#34;&gt;DTO vs Domain Models&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/05/dto-vs-domain-models/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Carlos Blé&lt;/p&gt;

&lt;h2 id=&#34;homoiconicity-isn-t-the-point&#34;&gt;Homoiconicity isn’t the point&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://calculist.org/blog/2012/04/17/homoiconicity-isnt-the-point/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Herman about homoiconicity, comparing Lisp dialects (have it) to others that don&amp;rsquo;t. The main point is at the end, where it says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] homoiconicity isn’t the point, read is&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;so-you-don-t-want-to-be-a-programmer-after-all&#34;&gt;So You Don&amp;rsquo;t Want to be a Programmer After All&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/so-you-dont-want-to-be-a-programmer-after-all/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jeff Atwood. Cites the golden handcuffs (also known as golden shackles), reasons to be and not to be a programmer, and how to be an average and outstanding programmer&lt;/p&gt;

&lt;h2 id=&#34;the-nature-of-lisp&#34;&gt;The Nature of Lisp&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.defmacro.org/ramblings/lisp.html&#34; target=&#34;_blank&#34;&gt;this article / introduction&lt;/a&gt; to Lisp by Slava Akhmechet&lt;/p&gt;

&lt;h2 id=&#34;david-pollak-s-my-thoughts-on-go&#34;&gt;[David Pollak&amp;rsquo;s] My Thoughts on Go&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.goodstuff.im/golang&#34; target=&#34;_blank&#34;&gt;these comments&lt;/a&gt; on Go Lang from David Pollak&lt;/p&gt;

&lt;h2 id=&#34;the-well-rounded-technologist&#34;&gt;The Well-Rounded Technologist&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/04/02/the-well-rounded-technologist.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;should-i-read-papers&#34;&gt;Should I read papers?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/10/21/should-i-read-papers.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;lisp-1-vs-lisp-2&#34;&gt;Lisp-1 vs Lisp-2&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hornbeck.wordpress.com/2009/07/05/lisp-1-vs-lisp-2/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/hornbeck&#34; target=&#34;_blank&#34;&gt;@Hornbeck&lt;/a&gt; about the lisp 1 and lisp 2.&lt;/p&gt;

&lt;h2 id=&#34;science-corps&#34;&gt;Science Corps&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this &lt;a href=&#34;https://www.youtube.com/watch?v=dkQkafxFoIQ&#34; target=&#34;_blank&#34;&gt;TEDx talk&lt;/a&gt; by Aza Raskin, featuring Data Banks and Science corps&lt;/p&gt;

&lt;h2 id=&#34;healthy-codebase-and-preparatory-refactoring&#34;&gt;Healthy Codebase and Preparatory Refactoring&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://brewhouse.io/blog/2014/11/10/healthy-codebase-and-preparatory-refactoring.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Philippe Creux about preparatory refactoring&lt;/p&gt;

&lt;h2 id=&#34;you-are-learning-haskell-right-now-or-anything-you-want-really&#34;&gt;You Are Learning Haskell Right Now (Or Anything You Want Really)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/12/11/you-are-learning-haskell-right-now.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;lisp-is-abstract-syntax&#34;&gt;Lisp is Abstract Syntax&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/04/16/lisp-is-abstract-syntax.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;two-things-types-have-taught-me&#34;&gt;Two Things Types Have Taught Me&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/10/30/two-things-types-have-taught-me.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;don-t-bet-against-yourself&#34;&gt;Don&amp;rsquo;t Bet Against Yourself&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;learning-math-a-blank-is-a-blank-with-a-blank&#34;&gt;Learning Math: A Blank Is A Blank With A Blank&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;the-false-economy-of-metaprogramming&#34;&gt;The False Economy Of Metaprogramming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2015/03/06/the-false-economy-of-generated-methods.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;management-and-engineering-overlapping&#34;&gt;Management and Engineering, overlapping&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.quora.com/Does-Adam-DAngelo-feel-comfortable-with-the-transition-from-an-engineer-to-a-management-position?srid=3OC&amp;amp;share=1&#34; target=&#34;_blank&#34;&gt;this Quora answer&lt;/a&gt; by Adam D&amp;rsquo;Angelo. The original title is: Does Adam D&amp;rsquo;Angelo feel comfortable with the transition from an engineer to a management position?&lt;/p&gt;

&lt;h2 id=&#34;evolution-of-the-twitter-stack&#34;&gt;Evolution of The Twitter Stack&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.slideshare.net/slideshow/embed_code/key/ly83zQkBjCxnIX&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about changing the technology stack in Twitter: from Rails to JVM-based&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Guardian of the Source</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/17/the-guardian-of-the-source/</link>
      <pubDate>Fri, 17 Apr 2015 22:01:48 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/17/the-guardian-of-the-source/</guid>
      <description>&lt;p&gt;Overheard today at the office, while they were discussing the approval of a pull request:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[Pull request reviewer] - I&amp;rsquo;m sorry, can&amp;rsquo;t approve this: I don&amp;rsquo;t really agree with this design. Isn&amp;rsquo;t there an alternative for this?&lt;/p&gt;

&lt;p&gt;[Pull request author] - [redacted], of course you don&amp;rsquo;t, you&amp;rsquo;re the guardian of the source&lt;/p&gt;

&lt;p&gt;[PR reviewer] - Well, sometimes I&amp;rsquo;m a bit picky about introducing bad code into our codebase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This has made me think about Gandalf blocking the path of Balrog Demon, shouting &amp;ldquo;&lt;a href=&#34;http://knowyourmeme.com/memes/you-shall-not-pass&#34; target=&#34;_blank&#34;&gt;you shall not pass&lt;/a&gt;&amp;rdquo; while on top of the bridge.&lt;/p&gt;

&lt;p&gt;This is part of the objectives of doing a pull request before merging code: stop the bad code&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; before it is merged to the codebase.&lt;/p&gt;

&lt;p&gt;Later, as you start having &lt;a href=&#34;http://en.wikipedia.org/wiki/Broken_windows_theory&#34; target=&#34;_blank&#34;&gt;broken windows&lt;/a&gt; in your codebase, it is easier that you start introducing more. Exactly about this is the &lt;a href=&#34;http://en.wikipedia.org/wiki/Broken_windows_theory&#34; target=&#34;_blank&#34;&gt;broken windows theory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, if you try to block that bad code before it is merged, it is cheaper to remove it: nothing depends on it, you introduce no repetition, etc&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This also connects with the idea present in &lt;a href=&#34;http://www.amazon.com/The-Software-Craftsman-Professionalism-Pragmatism/dp/0134052501&#34; target=&#34;_blank&#34;&gt;Software Craftsmanship, now called The Software Craftsman&lt;/a&gt;, about preserving value for investors and treat software as an investment (with positive ROI) rather than a sunk cost.&lt;/p&gt;

&lt;p&gt;It is being picky and, to the most of our possibilities, do not letting any defects nor bad code into the codebase. A hedge fund manager would not let any toxic or dubious asset into the managed funds. This would be counterproductive in the long run (maybe even in the short one) and would be not doing their job correctly. Why is it that some developers suggest or accept these toxic assets?&lt;/p&gt;

&lt;p&gt;So, at least for me, would be an honor to be called the &amp;ldquo;Guardian of the Source&amp;rdquo; by someone I respect, as long as this is a serious proposition (i.e., not a joke of some kind).&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Bad code can be expressed in many ways: long methods, bad naming, breaking design principles (e.g., SOLID, KISS, DRY - OAOO), code with defects, no tests or no coverage, etc.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;A source is &lt;a href=&#34;http://c2.com/cgi/wiki?DiscoverDefectsEarly&#34; target=&#34;_blank&#34;&gt;Discover defects early&lt;/a&gt;. Another is &lt;a href=&#34;http://developers.slashdot.org/story/03/10/21/0141215/software-defects---do-late-bugs-really-cost-more&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; that cites the ratio of fixing it later to 5:1 (five times more expensive).
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Open Space: Code reviews</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews/</link>
      <pubDate>Mon, 16 Mar 2015 22:44:42 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/16/open-space-code-reviews/</guid>
      <description>

&lt;p&gt;Today we&amp;rsquo;ve discussed about code reviews on &lt;a href=&#34;http://www.meetup.com/Barcelona-Software-Craftsmanship/events/220293683/&#34; target=&#34;_blank&#34;&gt;this open space&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;

&lt;p&gt;These are my notes, in no particular order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reduce information silos all around the company, as everyone [technical] can participate in these events&lt;/li&gt;
&lt;li&gt;raise the &amp;ldquo;just arrived&amp;rdquo; people&amp;rsquo;s knowledge [Difficult to hit the ground up and running, but these code review sessions can help]&lt;/li&gt;
&lt;li&gt;invest one person as &amp;lsquo;sheriff&amp;rsquo; for the sprint: they will take care of static analysis tools (such as sonar) and continuous integration (CI; such as jenkins). They will make sure others follow the working agreements&lt;/li&gt;
&lt;li&gt;In the academic environment, some teams do share their patches via mailing lists and this makes it much slower to adapt and review changes [As compared to an on-line sharing system - like web-based interfaces to distributed version control systems] As this team doesn&amp;rsquo;t have a CI tool, they must test it / try it manually before reviewing the code.&lt;/li&gt;
&lt;li&gt;Pair programming does not remove the need for code review [This has been surfaced twice]&lt;/li&gt;
&lt;li&gt;Your work is not more important than your team members&amp;rsquo; one. [Related to not having time to code review]&lt;/li&gt;
&lt;li&gt;Do code reviews include architecture? [We&amp;rsquo;ve agreed that the architecture to some degree should be discussed before code reviews]&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Troll review&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Anyone can veto pull requests [By opening a question; do not allow for pull requests to be closed with open questions]&lt;/li&gt;
&lt;li&gt;A 15-minute time slot everyday to code review [As code hygiene; Done right after lunch,  breakfast or just before leaving, when you&amp;rsquo;re tired]&lt;/li&gt;
&lt;li&gt;Code review tasks have higher priority than other tasks [Do not take other tasks if there are code reviews to do]&lt;/li&gt;
&lt;li&gt;Code reviews put a lot of pressure so people learn and the knowledge level equalizes across the team&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;My conclusions, even though some of them were not shared by everyone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most of the people approve of code review practices: either they are doing them or are trying to apply them at their clients. (Warning: this was a code review meetup, so there&amp;rsquo;s a bias: people not interested in them won&amp;rsquo;t come). No one was against doing them.&lt;/li&gt;
&lt;li&gt;Code reviews have a cost, although it is beneficial to do them&lt;/li&gt;
&lt;li&gt;Should your teammates not want to participate in the code review after agreeing on doing them, appeal to their professionalism / accountability, then to their time (stated before), then troll them: after a few (healthy) trolling code review sessions, people will feel more comfortable reviewing and being reviewed. Special mention to Miguel who coined (?)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; the term: troll review.&lt;/li&gt;
&lt;li&gt;Great way of equalizing the (technical) knowledge level within the team&lt;/li&gt;
&lt;li&gt;Great way of reduce information silos across the whole company&lt;/li&gt;
&lt;li&gt;They can be fun if you do them properly&lt;/li&gt;
&lt;li&gt;The need for code reviews do not disappear when pair programming: as long as you have a personal attachment to the code, you might not see its defects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;your-own&#34;&gt;Your own&lt;/h2&gt;

&lt;p&gt;Should you have any conclusions to share, please add a pull request to this &lt;a href=&#34;https://github.com/alvarogarcia7/blog_source&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt; or do it as a comment.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;after searching some ten minutes on the internet, there are only a couple of questions on meta.codereview stackoverflow, but not related to this. &lt;strong&gt;Update&lt;/strong&gt;: In &lt;a href=&#34;https://twitter.com/mallyvai/status/314260072798752768&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;, Vaibhav Mallya talks about a #trollReview, related to code. So, unfortunately, Miguel, you&amp;rsquo;re not the first one. But there are fewer than 10 results on twitter.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Polishing your tools</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/22/polishing-your-tools/</link>
      <pubDate>Sun, 22 Feb 2015 09:30:20 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/22/polishing-your-tools/</guid>
      <description>

&lt;h2 id=&#34;the-toolsmith&#34;&gt;The toolsmith&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Fred_Brooks&#34; target=&#34;_blank&#34;&gt;Frederick P Brooks, Jr&lt;/a&gt; quoted / explained a theory explained by Mills and Baker&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; around 1971-72:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Chapter 3: The Surgical Team&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] but the team be organized like a surgical team rather than a hog-butchering team. That is, instead of each member cutting away on the problem, one does the cutting and the others give him[her] every support that will enhance his[her] effectiveness and productivity.&lt;/p&gt;

&lt;p&gt;[&amp;hellip;]&lt;/p&gt;

&lt;p&gt;&lt;quote&gt; Brooks, F. - The Mythical Man-Month, chapter 3: The Surgical Team &lt;/quote&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(Text between square brackets is mine)&lt;/p&gt;

&lt;p&gt;The author goes on to explain the job descriptions for the surgeon, copilot, administrator, editor, secretaries, program clerk, toolsmith, tester and the language lawyer.&lt;/p&gt;

&lt;p&gt;The one that will be covered in this post is the toolsmith:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The toolsmith&lt;/strong&gt;. File-editing, text-editing, and interactive debugging services are now readily available, so that a team will rarely need its own machine and machine-operating crew. But these services must be available with unquestionably satisfactory response and reliability; and the surgeon must be sole judge of the adequacy of the service available to him. He needs a toolsmith, responsible for ensuring this adequacy of the basic service and for constructing, maintaining, and upgrading special tools &amp;ndash;mostly interactive computer services&amp;ndash; needed by his team. Each team will need its own toolsmith, regardless of the excellence and reliability of any centrally provided service, for his job is to see to the tools needed or wanted by his surgeon, without regard to any other team&amp;rsquo;s needs. The tool-builder will often construct specialized utilities, cataloged procedures, macro libraries.&lt;/p&gt;

&lt;p&gt;&lt;quote&gt; Brooks, F. - The Mythical Man-Month, chapter 3: The Surgical Team &lt;/quote&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even though the chapter reads a bit outdated, especially with the part about genders and methodologies (i.e., waterfall), the part about roles is interesting. The surgical team, as the author presents will be composed by 9 &amp;frac12; (nine and a half) as the language lawyer can be shared among two or three teams.&lt;/p&gt;

&lt;h2 id=&#34;day-to-day-practices&#34;&gt;Day to day practices&lt;/h2&gt;

&lt;p&gt;So, one full-time job is to build tools to service the surgeon and the copilot (1:8,5 ratio), or approximately 12% of a full-time position.&lt;/p&gt;

&lt;p&gt;These tools can make the surgeon and the copilot more effective, ranging from a single digit percentage to orders of magnitude in other tasks.&lt;/p&gt;

&lt;p&gt;As agile teams no longer have a toolsmith and the scrum master is not necessarily a technical expert who can build tools for the whole team, the tasks of creating tools must be taken care by everyone. No one better than yourself can know your needs and tailor solutions for them.&lt;/p&gt;

&lt;p&gt;The only downside is you have to invest ~5h (for a full time position) per week into creating and polishing tools for your work: it is a need for achieving more productivity when working.&lt;/p&gt;

&lt;p&gt;Nowadays that IDEs are configurable, this time might be invested on learning more advanced features as other shortcuts, refactoring techniques, other design patterns, etc. I like having my own live templates (see &lt;a href=&#34;https://www.jetbrains.com/idea/help/creating-and-editing-live-templates.html#d1333587e219&#34; target=&#34;_blank&#34;&gt;description&lt;/a&gt;), especially for tests, as I saw on the &lt;a href=&#34;https://skillsmatter.com/courses/503-sandro-mancuso-s-crafting-code-course#programme&#34; target=&#34;_blank&#34;&gt;Crafting Code workshop&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/sandromancuso&#34; target=&#34;_blank&#34;&gt;Sandro Mancuso&lt;/a&gt;&lt;/p&gt;

&lt;!--
TODO: Add link to Sandro Mancuso&#39;s experience report, when I write it
--&gt;

&lt;p&gt;It may also include other activities as setting up your bash alias, cleaning your desk, trying a new UML diagram modeler, etc. Anything that improves the productivity of your main task.&lt;/p&gt;

&lt;p&gt;If we consider our experience and knowledge part of our tools (as we are knowledge workers), training could be considered part of polishing our tools. Short, daily or weekly training sessions (even internal) can make a great impact on breadth (not depth) of knowledge among your teammates. This shallow knowledge can open doors for more knowledge to be gained outside of company time, or used to practice and test other methods.&lt;/p&gt;

&lt;p&gt;This training is so useful for everyone (&amp;ldquo;when one teaches, two learn&amp;rdquo;) that I recommend my clients to do it. This has helped them cope with changing technologies, knowledge transfer and even some team building.&lt;/p&gt;

&lt;h2 id=&#34;company-provided-or-not&#34;&gt;Company provided or not?&lt;/h2&gt;

&lt;p&gt;Should the company provide for this time to improve? Although I don&amp;rsquo;t know the answer, it would greatly affect the programmers&amp;rsquo; productivity to do so. I would say, provide this time as long as what is produced is useful. How do you measure useful? This is a subjective opinion, so it depends on each one.&lt;/p&gt;

&lt;p&gt;Some companies acknowledge that this is so important as to invest part of their resources (0-2 hours per week) into training.&lt;/p&gt;

&lt;p&gt;Either way, should your company provide it for your or not, you are the one in charge of your career (from Mancuso, &lt;a href=&#34;https://leanpub.com/socra&#34; target=&#34;_blank&#34;&gt;Software Craftsmanship&lt;/a&gt; - now called &lt;a href=&#34;http://www.amazon.co.uk/Software-Craftsman-Professionalism-Pragmatism-Robert/dp/0134052501/ref=sr_1_1?ie=UTF8&amp;amp;qid=1416521895&amp;amp;sr=8-1&amp;amp;keywords=the+software+craftsman&#34; target=&#34;_blank&#34;&gt;The Software Craftsman&lt;/a&gt;). If you are not allowed to invest company time for your own benefit, you could use some of your personal time to do so. It is not required, but you will soon enjoy its profits.&lt;/p&gt;

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Every sprint, one of my clients (as of 2015-05) wants to review the work done using some slides and a live demo. The &amp;lsquo;sample&amp;rsquo; slides with the format, layout is useful. Everything that should be replaced (timestamp, contents, etc) is marked with a TODO&lt;/li&gt;
&lt;li&gt;Every day, I commit plenty of times to the control version system (i.e., git). I have an alias for commit, diff, status, etc, that saves me some keystrokes on the most common commands&lt;/li&gt;
&lt;li&gt;See the post &amp;ldquo;A basic working environment&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Deployment, even on local, is automated: a script for getting the latest &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt; or &lt;code&gt;master&lt;/code&gt; code, build the Docker container, start the docker image, notify me the code is ready&lt;/li&gt;
&lt;li&gt;Pipeline: I have a pipeline, in local, where I can push and the tests will be executed automatically. If the build fails (usually BDD tests), I can &lt;code&gt;push -f&lt;/code&gt; without affecting to the repo history.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Mills, H., &amp;ldquo;Chief programmer teams, principles, and procedures,&amp;rdquo; IBM Federal Systems Division Report FSC 715108, Gaithersburg, Md., 1971.&lt;/p&gt;

&lt;p&gt;Baker, F. T., &amp;ldquo;Chief programmer team management of production programming,&amp;rdquo; IBM Sys. J., 11, 1 (1972).&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Original references in &amp;ldquo;The Mythical Man-Month&amp;rdquo; (Notes and References, page 294) point to these:
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>