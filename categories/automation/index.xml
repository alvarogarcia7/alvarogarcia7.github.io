<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>automation on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/automation/</link>
    <description>Recent content in automation on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 May 2019 22:32:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/automation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automatically keeping the intermediate history of your work using git</title>
      <link>https://alvarogarcia7.github.io/blog/2019/05/29/keeping-intermediate-history-work-git/</link>
      <pubDate>Wed, 29 May 2019 22:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/05/29/keeping-intermediate-history-work-git/</guid>
      <description>This is another tool for your toolbox: using git to automatically document your development process (special cases only.)
Context When I&amp;rsquo;m spiking a feature, I usually get in the zone (e.g., Csikszentmihalyi&amp;rsquo;s Flow), and I can forget my good engineering practices, searching for that desired answer. After a few of those bouts of coding, you realize you&amp;rsquo;re wandering. You circle around, get lost, get back on track, then get lost again.</description>
    </item>
    
    <item>
      <title>Modifying titles in a Trello Board</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/16/modifying-titles-in-a-trello-board/</link>
      <pubDate>Thu, 16 Mar 2017 00:36:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/16/modifying-titles-in-a-trello-board/</guid>
      <description>A teammate and I have created a small tool to modify the titles of the trello card in a trello board.
Technical description It works by applying a function to the existing title (because we wanted to remove a prefix from the existing title).
The modification is done, not through the API, but simulating user interaction:
 Click to edit the card Input the new title Save  The full code is available here</description>
    </item>
    
    <item>
      <title>Self-Study in March 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/01/self-study-in-march-2017/</link>
      <pubDate>Wed, 01 Mar 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/01/self-study-in-march-2017/</guid>
      <description>¿Volver? I&amp;rsquo;ve read this article by Raul Avila comparing the options between working in the UK and in Spain (where he&amp;rsquo;s originally from). Inspired by other professionals (e.g., David Bonilla, Jerónimo Palacios).
Tags: spanish, jeronimo-palacios, david-bonilla, expat, comparison, raul-avila, united-kingdom, spain
Donkey code I&amp;rsquo;ve read this article by Einar W. Høst in which he introduces the concept of a &amp;lsquo;missing domain term&amp;rsquo; with the example of a donkey being &amp;lsquo;closely related to a horse, though not exactly the same&amp;rsquo;</description>
    </item>
    
    <item>
      <title>Self-Study in December 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/12/01/self-study-in-december-2016/</link>
      <pubDate>Thu, 01 Dec 2016 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/12/01/self-study-in-december-2016/</guid>
      <description>A Docker Fork: Talk of a Split Is Now on the Table I&amp;rsquo;ve read this article by Alex Williams and Joab Jackson about the possible split in the Docker environment following Docker&amp;rsquo;s and other providers&#39; product roadmaps. Each own has their policies and priorities and they collide in this case
Tags: docker, alex-williams, joab-jackson, container, oci, kubernetes, devops, tool
An Ode to Boring: Creating Open and Stable Container World I&amp;rsquo;ve read this article by Bob Wise, in which he describes the state of the Docker tool and the Docker Engine.</description>
    </item>
    
    <item>
      <title>Self-Study in April 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/01/self-study/</link>
      <pubDate>Fri, 01 Apr 2016 00:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/01/self-study/</guid>
      <description>Deliberate Practice: What It Is and Why You Need It I&amp;rsquo;ve read this article by Corbett Barr on what is deliberate practice and why it is needed to become an expert in a given domain field.
The four essential components:
 Motivation Tailored (practice) Feedback Repetion  Tags: corbett-barr, deliberate-practice, expert, practice, anders-ericsson, talent, professional-development, career
10 Features I Wish Java Would Steal From the Kotlin Language I&amp;rsquo;ve read this list of features that the Kotlin Language has that would be an improvement for the Java language.</description>
    </item>
    
    <item>
      <title>Self-Study in March 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</link>
      <pubDate>Wed, 02 Mar 2016 12:58:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</guid>
      <description>Learning Programming Isn’t That Hard, Deep Work Is Hard I&amp;rsquo;ve read this article by Benedict Fritz on two types of work (i.e., deep and shallow) and how programming is of the deep type. He links the difficulty of learning to program to the difficulty of practicing deep work.
Tags: analogy, benedict-fritz, deep-work, shallow-work, learn-to-program, psychology
BeCodeWeek by Yeray Darias I&amp;rsquo;ve read this category of posts by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.</description>
    </item>
    
    <item>
      <title>Tip: automate the blog publishing</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/02/tip-automate-the-blog-publishing/</link>
      <pubDate>Wed, 02 Dec 2015 19:10:40 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/02/tip-automate-the-blog-publishing/</guid>
      <description>I&amp;rsquo;ve automated the generation of the blog using Travis CI. Using this new way, each commit generates a new version of the pages.
These resources have been very useful:
 Prose.io + Octopress + Travis-CI + GitHub Pages = ♥. First post (in this set) that explains how this automation is possible Auto-deploying to My Octopress Blog With Travis-CI. Explains how to generate your key, encript it with travis Octopress + GitHub Pages + Travis: The most useful page, explains step by step what to do for mac and linux.</description>
    </item>
    
    <item>
      <title>Tool: Building a local pipeline</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/10/tool_building_local_pipeline/</link>
      <pubDate>Sat, 10 Oct 2015 11:06:58 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/10/tool_building_local_pipeline/</guid>
      <description>Motivation At a client, one of the projects has a long building process and the tests are mostly slow, so I use a local building pipeline, an example of the Pipes and Filters pattern.
This allows for executing manually only the fast unit tests, then automatically (no user intervention, no time spent) executing the rest of them before pushing. In case the latter fails, it is possible to do git push -f to the pipeline without corrupting the central repository (origin) history, possibly disturbing others.</description>
    </item>
    
    <item>
      <title>Tip: massively reverting local changes</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/08/tip-massively-reverting-local-changes/</link>
      <pubDate>Wed, 08 Jul 2015 02:40:24 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/08/tip-massively-reverting-local-changes/</guid>
      <description>I was changing a massive amount of files (&amp;gt;1000) for a repeated code. The search and replace query was not too exact and it broke many tests in the system. For that, I preferred reverting those tests.
Here&amp;rsquo;s how to do it automatically:
Copy all the failing tests to a text editor:
Input:
testSearchXMLDocument(io.company.controller.dms.DocumentControllerTest) testCreateXMLDocument(io.company.controller.dms.DocumentControllerTest) testUpdateXFPageMetadata(io.company.controller.dms.DocumentControllerTest) testCreateDocumentCrop(io.company.controller.dms.DocumentControllerTest) testUpdateCropMetadata(io.company.controller.dms.DocumentControllerTest) testDeleteDocument(io.company.controller.dms.DocumentControllerTest) testUpdateXmlDocumentMetadata(io.company.controller.dms.DocumentControllerTest) testUpdateXML(io.company.controller.dms.DocumentControllerTest) testSearchXFPage(io.company.controller.dms.DocumentControllerTest) testCreateXFPage(io.company.controller.dms.DocumentControllerTest) testUpdatePage(io.company.controller.dms.DocumentControllerTest) testSearchCrop(io.company.controller.dms.DocumentControllerTest) testUpdateCrop(io.company.controller.dms.DocumentControllerTest) testMoveDocument(io.company.controller.dms.DocumentControllerTest) testGetDocument(io.company.controller.dms.DocumentControllerTest) regex:
(tested in Sublime 3, build 3083, Windows 64)</description>
    </item>
    
    <item>
      <title>Tip: committing to the repo file by file</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/08/tip-committing-to-the-repo-file-by-file/</link>
      <pubDate>Wed, 08 Jul 2015 02:37:08 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/08/tip-committing-to-the-repo-file-by-file/</guid>
      <description>I was prefer committing to the repo with commits that are as small as possible as long as it makes sense. It makes it much easier to rever the changes.
This is why I have some scripts to commit all the changes, even with the same message. This is one of them:
for f in $(git status -s |grep &amp;#34;^M&amp;#34;|awk &amp;#39;{print $2}&amp;#39;); do git add $f git commit -m &amp;#34;generic commit for all files&amp;#34; done </description>
    </item>
    
  </channel>
</rss>
