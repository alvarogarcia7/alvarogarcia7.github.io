<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>destructuring on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/destructuring/</link>
    <description>Recent content in destructuring on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Oct 2016 11:32:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/destructuring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self-Study in October 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/10/01/self-study-in-october-2016/</link>
      <pubDate>Sat, 01 Oct 2016 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/10/01/self-study-in-october-2016/</guid>
      <description>Should Engineers Design? I&amp;rsquo;ve read this article by Cap Watkins where he explains the relationship between designers and programmers and how to get the latter involved in the design / UX / UI process.
Tags: cap-watkins, design, ux, ui, exchange, cross-functional
The Sliding Scale of Giving a Fuck I&amp;rsquo;ve read this article by Cap Watkins where he explains that different topics have a different importance to each one of us: this topic might be very important for someone else, ergo, it makes mores sense to evaluate their option more carefully.</description>
    </item>
    
    <item>
      <title>Destructuring as a refactor in Clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure/</link>
      <pubDate>Tue, 14 Apr 2015 23:36:23 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/14/destructuring-as-a-refactor-in-clojure/</guid>
      <description>Manuel has taught us today about the default value while destructuring:
 The following example illustrates the use of an :as directive to bind a local with the entire map.
 user=&amp;gt; (def point {:x 5 :y 7}) #&#39;user/point (let [{:keys [x y] :as the-point} point] (println &amp;quot;x:&amp;quot; x &amp;quot;y:&amp;quot; y &amp;quot;point:&amp;quot; the-point)) x: 5 y: 7 point: {:x 5, :y 7}  We&amp;rsquo;ve now seen the :as directive used for both vectors and maps.</description>
    </item>
    
  </channel>
</rss>
