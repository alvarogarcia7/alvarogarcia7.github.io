<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brown Bag on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/brown-bag/</link>
    <description>Recent content in Brown Bag on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Sep 2015 21:24:58 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/brown-bag/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Brown Bag Session: Clojure&#39;s Data and Code</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/23/brown-bag-session-clojures-data-and-code/</link>
      <pubDate>Wed, 23 Sep 2015 21:24:58 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/23/brown-bag-session-clojures-data-and-code/</guid>
      <description>

&lt;p&gt;Today, at a client, I&amp;rsquo;ve facilitated the brown-bag session on Clojure, introducing Lisp&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Homoiconicity&#34; target=&#34;_blank&#34;&gt;homoiconicity&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;session-structure&#34;&gt;Session Structure&lt;/h2&gt;

&lt;p&gt;The session was designed as a kata, first introducing participants in the problem, letting some time to read the initial version and to think about possible solutions.&lt;/p&gt;

&lt;p&gt;Then, I structured the rest of the time as a prepared kata, where I was explaining in the beamer our current problems (day-to-day tasks) and possible solutions in Clojure.&lt;/p&gt;

&lt;p&gt;Among them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configuration and extensibility: allowing for flexibility, define at configuration time new features without recompiling or modifying the system.&lt;/li&gt;
&lt;li&gt;Persisting and restoring certain state: this is a problem that could easily be solved persisting data in Lisp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I explained, in private to those who asked, about &lt;a href=&#34;https://en.wikipedia.org/wiki/Lisp_(programming_language)&#34; target=&#34;_blank&#34;&gt;Lisp&lt;/a&gt; and its dialects &lt;a href=&#34;https://en.wikipedia.org/wiki/Common_Lisp&#34; target=&#34;_blank&#34;&gt;Common Lisp&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Clojure&#34; target=&#34;_blank&#34;&gt;Clojure&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Scheme_(programming_language)&#34; target=&#34;_blank&#34;&gt;Scheme&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;feedback&#34;&gt;Feedback&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;They liked the effort of investigating new languages to solve problems we have in our current stack&lt;/li&gt;
&lt;li&gt;They liked introducing the language features with a back-story to better understand the concepts&lt;/li&gt;
&lt;li&gt;They suggested to improve the level of the session: as the group as a whole is still starting with Clojure, leaving them on their own with code is too much. They asked for more guidance&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>