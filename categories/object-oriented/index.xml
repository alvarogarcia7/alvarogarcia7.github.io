<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>object-oriented on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/object-oriented/</link>
    <description>Recent content in object-oriented on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Feb 2019 20:44:59 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/object-oriented/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Refactoring: split loop &#43; loop/map equivalence</title>
      <link>https://alvarogarcia7.github.io/blog/2019/02/06/refactoring-split-loop-map-equivalence/</link>
      <pubDate>Wed, 06 Feb 2019 20:44:59 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/02/06/refactoring-split-loop-map-equivalence/</guid>
      <description>We can combine the &amp;ldquo;Split loop&amp;rdquo; refactoring technique plus the &amp;ldquo;Loop / Map equivalence&amp;rdquo; when refactoring.
Given that it does not matter in which order we apply these operations, we can say that they have the associative property
Chart of the operations Take the case of a loop doing two things. From there:
 we can replace the loop for a map (including the two actions into a single map body) we can split the loop into two loops  Take the case of two loops, doing one thing each.</description>
    </item>
    
    <item>
      <title>Self-Study in October 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</link>
      <pubDate>Thu, 01 Oct 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</guid>
      <description>Blazing Fast HTML: Virtual DOM in Elm I&amp;rsquo;ve read this article explaining how Elm works in relation to the virtual DOM. By Evan Czaplicki.
Tags: elm, dom, virtual-dom, comparison, speed, haskell, evan-czaplicki
Why you should never, ever, ever use MongoDB I&amp;rsquo;ve read this article stating the downsides of using MongoDB. Written by Sven Slootweg
Tags: mongodb, downside, sven-slootweg, json, document-store, postgresql, acid
Do you really get classloaders? I&amp;rsquo;ve watched this video by Jevgeny Kabanov on classloaders: what they are, how they work nad some tips to solve common issues.</description>
    </item>
    
    <item>
      <title>Quote: Organizing Code to Allow for Easy Changes</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/08/quote-organizing-code-to-allow-for-easy-changes/</link>
      <pubDate>Wed, 08 Jul 2015 02:41:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/08/quote-organizing-code-to-allow-for-easy-changes/</guid>
      <description>Organizing Code to Allow for Easy Changes  Asserting that code should be easy to change is akin to stating that children should be polite; the statement is impossible to disagree with yet it in no way helps a parent raise an agreeable child. The idea of easy is too broad; you need concrete definitions of easiness and specific criteria by which to judge code. If you define easy to change as</description>
    </item>
    
  </channel>
</rss>
