<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>log on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/log/</link>
    <description>Recent content in log on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Jul 2017 10:32:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/log/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self-Study in July 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/07/01/self-study-july-2017/</link>
      <pubDate>Sat, 01 Jul 2017 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/07/01/self-study-july-2017/</guid>
      <description>A Brief History of the UUID I&amp;rsquo;ve read this article by Rick Branson on the history of UUID. Describes the history of uid, uuid, early computing (both networked and not networked) and their own implementation of a uuid library
Tags: uuid, uid, flake, snowflake, ksuid, go, golang, rick-branson, library, implementation-history
More data, more data I&amp;rsquo;ve read this article about how cloudflare manages its logs. By Hunter Blanks
Tags: log, cloudflare, comparison, what-worked, what-did-not-work, kafka, citusdb, sre, site-reliability-engineering, analytics, hunter-blanks</description>
    </item>
    
    <item>
      <title>Logging is a feature</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/19/logging-is-a-feature/</link>
      <pubDate>Sun, 19 Apr 2015 23:43:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/19/logging-is-a-feature/</guid>
      <description>At a client, we&amp;rsquo;re facing this challenge: we cannot access production logs, as we don&amp;rsquo;t have access to production environments. The solution we&amp;rsquo;ve chose is to implement the logging component as a layer on top of Splunk.
This formatter layer &amp;ndash;per component&amp;ndash; accesses a generic layer &amp;ndash;for the whole company&amp;ndash; that accesses splunk. In this manner, it is very easy to reuse the splunk connection and configuration and inject mocks. Also helps with the local environment: you always log to console (even if in production you don&amp;rsquo;t have access to it) and can disable this in local, not needing a local splunk installation.</description>
    </item>
    
  </channel>
</rss>
