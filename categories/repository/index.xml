<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/repository/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/repository/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in June 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/06/01/self-study-june-2017/</link>
      <pubDate>Thu, 01 Jun 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/06/01/self-study-june-2017/</guid>
      <description>

&lt;h2 id=&#34;so-hey-you-should-stop-using-texts-for-two-factor-authentication&#34;&gt;So Hey You Should Stop Using Texts for Two-Factor Authentication&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.wired.com/2016/06/hey-stop-using-texts-two-factor-authentication/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining why messages over SMS should not be used for the &amp;lsquo;what you own&amp;rsquo; in 2FA.&lt;/p&gt;

&lt;p&gt;Tags: andy-greenberg, 2fa, sms, security, warning&lt;/p&gt;

&lt;h2 id=&#34;why-i-d-never-work-for-google-twitter-or-facebook&#34;&gt;Why I&amp;rsquo;d never work for Google, Twitter, or Facebook&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://naildrivin5.com/blog/2011/08/01/why-i-wont-work-for-google-twitter-facebook.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Bryant Copeland on why he would never work for these three companies: he doesn&amp;rsquo;t share the principles and values from these companies.&lt;/p&gt;

&lt;p&gt;Tags: david-copeland, google, twitter, facebook, job-satisfaction, commitment&lt;/p&gt;

&lt;h2 id=&#34;design-thinking-needs-to-think-bigger&#34;&gt;Design Thinking Needs To Think Bigger&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.fastcodesign.com/90112320/design-thinking-needs-to-think-bigger&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by STEVE VASSALLO on systems thinking and design thinking.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What makes a system a system rather than just a collection of parts is that the components are interconnected and interdependent&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: steve-vassallo, design-thinking, system-thinking, mental-model, emergence-point, leverage-point, iceberg-model&lt;/p&gt;

&lt;h2 id=&#34;cobol-is-everywhere-who-will-maintain-it&#34;&gt;COBOL Is Everywhere. Who Will Maintain It?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://thenewstack.io/cobol-everywhere-will-maintain/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Cassel explaining the state of the COBOL systems at some banks and the difficulty of finding young COBOL programmers.&lt;/p&gt;

&lt;p&gt;Tags: david-cassel, cobol, youth, team-management, hiring, bank, java, mainframe, legacy-system&lt;/p&gt;

&lt;h2 id=&#34;you-re-too-busy-you-need-a-shultz-hour&#34;&gt;You’re Too Busy. You Need a ‘Shultz Hour.’&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.nytimes.com/2017/04/18/opinion/youre-too-busy-you-need-a-shultz-hour.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Leonhardt, about the Shultz Hour: time set aside to not be busy, so you can set aside the tactical topics and focus on the strategic topics.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“You waste years by not being able to waste hours.”&lt;/p&gt;

&lt;p&gt;Amos Tversky  (as Michael Lewis describes in his THE UNDOING PROJECT)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: david-leonhardt, busyness, time-management, shultz-hour, connectedness, social-media, quote&lt;/p&gt;

&lt;h1 id=&#34;avoid-these-35-habits-that-lead-to-unmaintainable-code&#34;&gt;Avoid these 35 habits that lead to unmaintainable code&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/avoid-35-habits-lead-unmaintainable-code-christian-maioli-mackeprang&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about habits that make writing software more difficult:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Saying “I’ll fix it later”, and never doing it&lt;/li&gt;
&lt;li&gt;Insisting on a one-liner solution&lt;/li&gt;
&lt;li&gt;Making pointless optimizations&lt;/li&gt;
&lt;li&gt;Convincing yourself that styling issues are not that important&lt;/li&gt;
&lt;li&gt;Sweeping things under the rug&lt;/li&gt;
&lt;li&gt;Using names that don’t add information&lt;/li&gt;
&lt;li&gt;Ignoring proven best practices&lt;/li&gt;
&lt;li&gt;Abandoning plans too early&lt;/li&gt;
&lt;li&gt;Insisting on a plan that has little chance of working&lt;/li&gt;
&lt;li&gt;Working on your own all the time&lt;/li&gt;
&lt;li&gt;Refusing to write bad code&lt;/li&gt;
&lt;li&gt;Blaming others&lt;/li&gt;
&lt;li&gt;Not sharing with your team what you’ve learned&lt;/li&gt;
&lt;li&gt;Being too slow on giving feedback to managers/clients&lt;/li&gt;
&lt;li&gt;Not using Google enough&lt;/li&gt;
&lt;li&gt;Overvaluing your personal style&lt;/li&gt;
&lt;li&gt;Having a personal attachment to your code&lt;/li&gt;
&lt;li&gt;Not knowing how to optimize&lt;/li&gt;
&lt;li&gt;Using the wrong tool for the job&lt;/li&gt;
&lt;li&gt;Not bothering with mastering your tools and IDE&lt;/li&gt;
&lt;li&gt;Ignoring error messages&lt;/li&gt;
&lt;li&gt;Romanticizing your developer toolkit&lt;/li&gt;
&lt;li&gt;Hardcoding values instead of making them configurable&lt;/li&gt;
&lt;li&gt;Reinventing the wheel all the time&lt;/li&gt;
&lt;li&gt;Blindly copy/pasting code&lt;/li&gt;
&lt;li&gt;Not taking the time to learn how things really work&lt;/li&gt;
&lt;li&gt;Having excessive confidence in your own code&lt;/li&gt;
&lt;li&gt;Not thinking about the trade-offs of each design, solution, or library&lt;/li&gt;
&lt;li&gt;Not getting help when you’re stuck&lt;/li&gt;
&lt;li&gt;Writing tests to pass&lt;/li&gt;
&lt;li&gt;Disregarding performance testing for critical cases&lt;/li&gt;
&lt;li&gt;Not checking that your build works&lt;/li&gt;
&lt;li&gt;Pushing large changes late, or leaving after making a large push&lt;/li&gt;
&lt;li&gt;Disowning code you wrote&lt;/li&gt;
&lt;li&gt;Ignoring the nonfunctional requirements&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: christian-maioli-mackeprang, maintanability, code, listicle, habit&lt;/p&gt;

&lt;h2 id=&#34;javascript-a-first-class-language-at-last&#34;&gt;JavaScript — A First-Class Language At Last&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/javascript-first-class-language-atlast-tom-goldenberg&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tom Goldenberg defending javascript, citing sources on why it is a first-class language,
the amount of job offers, and the state of the art in NodeJS.&lt;/p&gt;

&lt;p&gt;Tags: tom-goldenberg, javascript, java, comparison, first-class, language, analysis&lt;/p&gt;

&lt;h2 id=&#34;why-the-8-hour-workday-doesn-t-work&#34;&gt;Why the 8-Hour Workday Doesn&amp;rsquo;t Work&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/why-8-hour-workday-doesnt-work-dr-travis-bradberry&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; defending the removal of the 8-hour workday, preferring the division of time in slots.
In the article, 52 minutes of highly focused work then 17 minutes of rest.&lt;/p&gt;

&lt;p&gt;The key idea is the work-rest, no matter how big those slots are.&lt;/p&gt;

&lt;p&gt;Gives tips on how to separate both, some other tips for improving your performance.&lt;/p&gt;

&lt;p&gt;By Travis Bradberry&lt;/p&gt;

&lt;p&gt;Tags: time-management, pomodoro-technique, travis-bradberry, time, workday&lt;/p&gt;

&lt;h2 id=&#34;the-dark-side-of-extreme-productivity-and-how-to-steer-back-toward-the-light-https-medium-freecodecamp-com-the-dark-side-of-extreme-productivity-2a31ff7a4cd2&#34;&gt;&lt;a href=&#34;https://medium.freecodecamp.com/the-dark-side-of-extreme-productivity-2a31ff7a4cd2&#34; target=&#34;_blank&#34;&gt;The dark side of extreme productivity, and how to steer back toward the light&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Beau Carnes on how productivity can have a downside, how it can affect your healthy lifestyle.
Explains effective vs efficient, productivity, silent retreat, prayer or meditation&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The key is not to prioritize what’s on your schedule, but to schedule your priorities&lt;/p&gt;

&lt;p&gt;Stephen Covey&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: beau-carnes, productivity, quote, stephen-covey, sustainable-pace&lt;/p&gt;

&lt;h2 id=&#34;dejé-de-leer&#34;&gt;Dejé de leer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://culto.latercera.com/2017/03/15/deje-de-leer/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Catalina Bu on the tsundoku and how to read more. (In Spanish)&lt;/p&gt;

&lt;p&gt;Tags: catalina-bu, tsundoku, reading, time-management, spanish&lt;/p&gt;

&lt;h2 id=&#34;hacked-in-translation-from-subtitles-to-complete-takeover&#34;&gt;Hacked in Translation – from Subtitles to Complete Takeover&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.checkpoint.com/2017/05/23/hacked-in-translation/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about a vector to getting to user&amp;rsquo;s machines through the video player, using subtitle files.
by Check Point Research Team.&lt;/p&gt;

&lt;p&gt;Tags: check-point-research-team, security, vulnerability, vector, attack, subtitle, video-player&lt;/p&gt;

&lt;h2 id=&#34;8-teamwork-myths-to-tackle-at-your-office&#34;&gt;8 Teamwork Myths To Tackle At Your Office&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.trello.com/8-teamwork-myths-to-tackle-at-your-office&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Leah Ryder on remote work myths.&lt;/p&gt;

&lt;p&gt;Tags: leah-ryder, productivity, myth, remote, remote-work&lt;/p&gt;

&lt;h2 id=&#34;why-i-think-elm-is-the-future-of-front-end-development&#34;&gt;Why I think Elm is the Future of Front End Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@rgoomar/why-i-think-elm-is-the-future-of-front-end-development-21e9b091fa05&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Rishi Goomar comparing reactredux to elm, comparing javascript to elm.&lt;/p&gt;

&lt;p&gt;Tags: rishi-goomar, comparison, elm, javascript, react, redux, javascript-fatigue&lt;/p&gt;

&lt;h2 id=&#34;los-viejos-programadores-nunca-mueren-y-silicon-valley-se-está-dando-cuenta-de-ello&#34;&gt;Los viejos programadores nunca mueren, y Silicon Valley se está dando cuenta de ello&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://m.xataka.com/empresas-y-economia/los-viejos-programadores-nunca-mueren-y-silicon-valley-se-esta-dando-cuenta-de-ello&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Javier Pastor on the age of the programmers in Silicon Valley. In Spanish.&lt;/p&gt;

&lt;p&gt;Tags: spanish, javier-pastor, age, programmer, career-manager, silicon-valley&lt;/p&gt;

&lt;h2 id=&#34;creating-a-tensorflow-powered-ing-api-client&#34;&gt;Creating a TensorFlow-powered ING API client&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@donflopez/cracking-the-ing-api-with-tensorflow-9681ae7dc249&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Francisco López on how he has implemented a small bot to click the virtual keyboard and connect to the bank website.&lt;/p&gt;

&lt;p&gt;Tags: ing-direct, francisco-lopez, bot, opencv, tensorflow, machine-learning, python, banking, open-banking-data&lt;/p&gt;

&lt;h2 id=&#34;be-a-good-mentor-not-a-dickhead&#34;&gt;Be a good mentor, not a dickhead&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Edaqa Mortoray about traits of a mentor. &lt;a href=&#34;https://dev.to/mortoray/be-a-good-mentor-not-a-dickhead&#34; target=&#34;_blank&#34;&gt;https://dev.to/mortoray/be-a-good-mentor-not-a-dickhead&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: edaqa-mortoray, mentor, trait, skill, mentorship, apprentice, apprenticeship&lt;/p&gt;

&lt;h2 id=&#34;the-largest-git-repo-on-the-planet-https-blogs-msdn-microsoft-com-bharry-2017-05-24-the-largest-git-repo-on-the-planet&#34;&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/bharry/2017/05/24/the-largest-git-repo-on-the-planet/&#34; target=&#34;_blank&#34;&gt;The largest Git repo on the planet&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by  Brian Harry on how Microsoft manages one of its big repositories. Explains how they have virtualized the git folder and the git workspace at Microsoft using gvfs. Explains how they have performed the improvements necessary to make it useful and usable to programmers.&lt;/p&gt;

&lt;p&gt;They have support for clients, but what about Linux?&lt;/p&gt;

&lt;p&gt;Tags:  brian-harry, microsoft, continous-delivery, linux, windows, gvfs, repository, monorepo&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tool: Building a local pipeline</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/10/tool_building_local_pipeline/</link>
      <pubDate>Sat, 10 Oct 2015 11:06:58 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/10/tool_building_local_pipeline/</guid>
      <description>

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;At a client, one of the projects has a long building process and the tests are mostly slow, so I use a local building &lt;a href=&#34;https://en.wikipedia.org/wiki/Pipeline_(software)&#34; target=&#34;_blank&#34;&gt;pipeline&lt;/a&gt;, an example of the &lt;a href=&#34;https://msdn.microsoft.com/library/dn568100.aspx&#34; target=&#34;_blank&#34;&gt;Pipes and Filters&lt;/a&gt; pattern.&lt;/p&gt;

&lt;p&gt;This allows for executing manually only the fast unit tests, then automatically (no user intervention, no time spent) executing the rest of them before pushing. In case the latter fails, it is possible to do &lt;code&gt;git push -f&lt;/code&gt; to the &lt;code&gt;pipeline&lt;/code&gt; without corrupting the central repository (&lt;code&gt;origin&lt;/code&gt;) history, possibly disturbing others.&lt;/p&gt;

&lt;p&gt;This strategy also allows for parallel modification of sources: you can continue working on your IDE while the compiler is working on the other working directory. Should you introduce any syntax / logical error on your working code, the compiler is not affected, as it has a working copy just for itself.&lt;/p&gt;

&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;This requires two git repositories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;local&lt;/code&gt; or working copy. Configure it so it has a remote called &lt;code&gt;pipeline&lt;/code&gt; and the &lt;code&gt;origin&lt;/code&gt;, the repository you cloned from. This is a non-bare repository.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipeline&lt;/code&gt;, used for building. This also is a non-bare repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;code&gt;local&lt;/code&gt; you can do the development and local commits.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re done, instead of&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;git push origin &lt;span class=&#34;nv&#34;&gt;$branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;do&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;git push pipeline &lt;span class=&#34;nv&#34;&gt;$branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After the git hook is installed, this will trigger the pipeline execution.&lt;/p&gt;

&lt;h3 id=&#34;git-hook&#34;&gt;Git hook&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;pipeline&lt;/code&gt;, in the &lt;code&gt;.git/hooks/post-receive&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/bin/bash&lt;/span&gt;
chmod +x pipeline.sh
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; oldrev newrev refname
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# whatever you want to execute&lt;/span&gt;
   &lt;span class=&#34;nv&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;git rev-parse --symbolic --abbrev-ref &lt;span class=&#34;nv&#34;&gt;$refname&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
  ./pipeline.sh &lt;span class=&#34;nv&#34;&gt;$branch&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above script, we&amp;rsquo;re telling git to execute the &lt;code&gt;pipeline.sh&lt;/code&gt; with the received branch as argument.&lt;/p&gt;

&lt;h3 id=&#34;pipeline-executor&#34;&gt;Pipeline executor&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;pipeline&lt;/code&gt; repository, in &lt;code&gt;.git/pipeline.sh&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -e
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -o pipefail

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; cleanup &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  git checkout develop
  git pull develop
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# upon failure, tell the user&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; err &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  cleanup
  growlnotify &lt;span class=&#34;s2&#34;&gt;&amp;quot;pipeline fails&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# trap signal ERR, executing function &amp;#39;err&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;trap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;err&amp;quot;&lt;/span&gt; ERR

&lt;span class=&#34;nv&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; -z &lt;span class=&#34;nv&#34;&gt;$branch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;need to specify a branch&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; -1
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

git checkout &lt;span class=&#34;nv&#34;&gt;$branch&lt;/span&gt;
mvn clean install &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tee output.log
git push --set-upstream origin &lt;span class=&#34;nv&#34;&gt;$branch&lt;/span&gt;
cleanup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;pipeline-executor-explanation&#34;&gt;Pipeline executor explanation&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We prepare the bash environment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;: fail the script when a command fails&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o pipefail&lt;/code&gt;: fail the script when some command fails in a pipe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;err&lt;/code&gt; and &lt;code&gt;trap&lt;/code&gt;: create a hook to be executed when the signal is trapped&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We require a branch to execute this script.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Checkout to that branch&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clean, compile &amp;amp; execute tests&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push to origin&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clean up&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In case this fails, the script will stop and notify the user with &lt;code&gt;growl&lt;/code&gt; and clean up.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Clean up: checkout to develop (or any other branch that always exists), leaving the system prepared to execute again.&lt;/p&gt;

&lt;h3 id=&#34;notifications-telling-the-user&#34;&gt;Notifications: telling the user&lt;/h3&gt;

&lt;p&gt;The program &lt;code&gt;growlnotify&lt;/code&gt; is a &lt;a href=&#34;http://www.growlforwindows.com/gfw/help/growlnotify.aspx&#34; target=&#34;_blank&#34;&gt;CLI notifier&lt;/a&gt; to &lt;code&gt;growl&lt;/code&gt; (&lt;a href=&#34;http://www.growlforwindows.com/gfw/default.aspx&#34; target=&#34;_blank&#34;&gt;windows&lt;/a&gt;, &lt;a href=&#34;http://mattn.github.io/growl-for-linux/&#34; target=&#34;_blank&#34;&gt;linux&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Ideally, the tests should be faster, and executing them locally should always be possible, maybe in the &lt;code&gt;pre-commit&lt;/code&gt; hook. Whenever this is not possible, a local pipeline can reduce the time spent waiting for test execution and remove the lock on the working directory while the compiler is working.&lt;/p&gt;

&lt;p&gt;This pipeline aims to be simple, without many customizations and being single-user. For more complex workflows and other restrictions, it might be better to drop this project and start investigating continuous integration (CI) tools such as e.g., &lt;a href=&#34;https://jenkins-ci.org/&#34; target=&#34;_blank&#34;&gt;Jenkins&lt;/a&gt;, &lt;a href=&#34;https://travis-ci.org/&#34; target=&#34;_blank&#34;&gt;Travis&lt;/a&gt;, &lt;a href=&#34;https://atlassian.com/software/bamboo&#34; target=&#34;_blank&#34;&gt;Bamboo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;further-work&#34;&gt;Further work&lt;/h2&gt;

&lt;p&gt;The jobs in the &lt;code&gt;pipeline&lt;/code&gt; could be queued, so it is possible to push to the pipeline before the previous job has started. See reference below.&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_12_02.html&#34; target=&#34;_blank&#34;&gt;Trap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html#The-Set-Builtin&#34; target=&#34;_blank&#34;&gt;Set Builtin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://idolinux.blogspot.com/2008/08/bash-script-error-handling.html&#34; target=&#34;_blank&#34;&gt;Sample bash error handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://superuser.com/questions/220364/how-to-run-commands-as-in-a-queue&#34; target=&#34;_blank&#34;&gt;Queuing bash jobs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;

&lt;p&gt;This script will push to the pipeline:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/bin/bash&lt;/span&gt;

git push pipeline  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &amp;gt; /dev/null &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Navigating the GitHub repositories</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/08/navigating-the-github-repositories/</link>
      <pubDate>Tue, 08 Sep 2015 07:54:15 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/08/navigating-the-github-repositories/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve reorganized my github repositories, especially the katas and the &lt;code&gt;simple sessions&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;katas&#34;&gt;Katas&lt;/h2&gt;

&lt;p&gt;All of them can be found in &lt;a href=&#34;https://github.com/search?utf8=%E2%9C%93&amp;amp;q=user%3Aalvarogarcia7+kata&amp;amp;type=Repositories&amp;amp;ref=searchresults&#34; target=&#34;_blank&#34;&gt;this search&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Separated by language:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/search?l=Java&amp;amp;q=kata+user%3Aalvarogarcia7&amp;amp;ref=searchresults&amp;amp;type=Repositories&amp;amp;utf8=%E2%9C%93&#34; target=&#34;_blank&#34;&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/search?l=Clojure&amp;amp;q=kata+user%3Aalvarogarcia7&amp;amp;ref=searchresults&amp;amp;type=Repositories&amp;amp;utf8=%E2%9C%93&#34; target=&#34;_blank&#34;&gt;Clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/search?l=JavaScript&amp;amp;q=kata+user%3Aalvarogarcia7&amp;amp;ref=searchresults&amp;amp;type=Repositories&amp;amp;utf8=%E2%9C%93&#34; target=&#34;_blank&#34;&gt;Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/search?l=Haskell&amp;amp;q=kata+user%3Aalvarogarcia7&amp;amp;ref=searchresults&amp;amp;type=Repositories&amp;amp;utf8=%E2%9C%93&#34; target=&#34;_blank&#34;&gt;Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/search?l=ruby&amp;amp;q=kata+user%3Aalvarogarcia7&amp;amp;ref=searchresults&amp;amp;type=Repositories&amp;amp;utf8=%E2%9C%93&#34; target=&#34;_blank&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To the best of my knowledge, all repositories follow a similar pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Contain the keyword &amp;lsquo;kata&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Contain the language&lt;/li&gt;
&lt;li&gt;Contain a description of the exercise&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example: &lt;a href=&#34;https://github.com/alvarogarcia7/palindromes-searcher-kata-haskell&#34; target=&#34;_blank&#34;&gt;palindromes-searcher-kata-haskell&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;simple-sessions&#34;&gt;Simple sessions&lt;/h2&gt;

&lt;p&gt;A simple session is a lapse of time working with the language to solve a problem, but not big enough to deserve a repository of its own. Usually, the simple sessions are performed in languages that have a REPL, tool that eases this need&lt;/p&gt;

&lt;p&gt;They can be found in &lt;a href=&#34;https://github.com/search?q=user%3Aalvarogarcia7+simple-sessions&#34; target=&#34;_blank&#34;&gt;this search&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brown-bag session and Dojo: Beginning Clojure</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/05/brown-bag-session-and-dojo-beginning-clojure/</link>
      <pubDate>Wed, 05 Aug 2015 01:14:14 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/05/brown-bag-session-and-dojo-beginning-clojure/</guid>
      <description>&lt;p&gt;At a client, today I&amp;rsquo;ve facilitated a brown-bag session introducing the Clojure language to a group of java programmers.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve started hands-on, live coding on a REPL. To make things easier, I&amp;rsquo;ve created a maven project that imports the clojure jar and lets you obtain dependencies from clojars. The repo is &lt;a href=&#34;https://github.com/alvarogarcia7/clojure-for-java-devs&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. This repo wouldn&amp;rsquo;t have been possible without the &lt;a href=&#34;https://github.com/talios/clojure-maven-plugin&#34; target=&#34;_blank&#34;&gt;clojure maven plugin&lt;/a&gt;, written by Mark Derricutt.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve more or less followed &lt;a href=&#34;https://github.com/alvarogarcia7/clojure-for-java-devs/blob/master/guide.md&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve also practiced, using a dojo in clojure, the fizzbuzz kata.&lt;/p&gt;

&lt;p&gt;There is a sample implementation in the same repo, &lt;a href=&#34;https://github.com/alvarogarcia7/clojure-for-java-devs/tree/sample-implementation/src&#34; target=&#34;_blank&#34;&gt;this folder&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Maven module Base for cucumber in java</title>
      <link>https://alvarogarcia7.github.io/blog/2015/03/10/maven-module-base-for-cucumber-in-java/</link>
      <pubDate>Tue, 10 Mar 2015 07:24:38 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/03/10/maven-module-base-for-cucumber-in-java/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve built a small maven module, to be used directly with cucumber. You can fork the repository &lt;a href=&#34;https://github.com/alvarogarcia7/base-bdd-cucumber&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the setup I&amp;rsquo;ve proposed for the meetup &lt;a href=&#34;http://www.meetup.com/Agile-Barcelona-Meetup/events/220673134/&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;BDD Cucumber kata (gherkin + code)&amp;rdquo;&lt;/a&gt;. Will see if this code is successfully used by the ~40 participants in a couple of weeks&lt;/p&gt;

&lt;p&gt;(Quote from the &lt;a href=&#34;https://github.com/alvarogarcia7/base-bdd-cucumber/blob/master/README.md&#34; target=&#34;_blank&#34;&gt;README.md&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;This maven project has been possible due to &lt;a href=&#34;https://twitter.com/@thomassundberg&#34; target=&#34;_blank&#34;&gt;Thomas Sundberg&lt;/a&gt; and &lt;a href=&#34;https://thomassundberg.wordpress.com/2014/05/29/cucumber-jvm-hello-world&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Should you want to, there&amp;rsquo;s a tweet to thank him the effort: &lt;a href=&#34;https://twitter.com/intent/tweet?text=@thomassundberg thanks for the cucumber bdd tutorial! Will be using it from @agilebcn;Keep up
the good work&amp;amp;url=https://thomassundberg.wordpress.com/2014/05/29/cucumber-jvm-hello-world/&#34; target=&#34;_blank&#34;&gt;tweet intent here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy katas and happy bdd&amp;rsquo;ing!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Snippets Stash</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/24/code-snippets-stash/</link>
      <pubDate>Sat, 24 Jan 2015 20:49:55 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/24/code-snippets-stash/</guid>
      <description>&lt;p&gt;Following a team member&amp;rsquo;s recommendation, I recently started a repository to save all my useful snippets.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve decided that the examples should be designed guided by tests or at least to have a working example exercised by tests. Also, that I should not reinvent the wheel and use as many open source libraries as possible, reducing the amount of code I have to write myself.&lt;/p&gt;

&lt;p&gt;Ideally, every snippet should be a maven project (where applicable) and be imported as a small library, therefore being able to reuse the functionality incrementally across projects.&lt;/p&gt;

&lt;p&gt;For the time being, I&amp;rsquo;m saving my snippets into a private repository and later I might decide to publish it for common usage.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>