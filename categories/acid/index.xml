<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/acid/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/acid/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in February 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/02/01/self-study-february-2019/</link>
      <pubDate>Fri, 01 Feb 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/02/01/self-study-february-2019/</guid>
      <description>

&lt;h2 id=&#34;amazon-dynamodb-transactions-how-it-works-https-docs-aws-amazon-com-amazondynamodb-latest-developerguide-transaction-apis-html&#34;&gt;&lt;a href=&#34;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/transaction-apis.html&#34; target=&#34;_blank&#34;&gt;Amazon DynamoDB Transactions: How it Works&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Explains how transactions work in DynamoDB&lt;/p&gt;

&lt;p&gt;Tags: dynamodb, aws, help, transaction, serializable&lt;/p&gt;

&lt;p&gt;Id: 7fb09cd4-2639-11e9-9377-0242ac110002
Read: Fri, 01 Feb 2019 15:53:20 +0000&lt;/p&gt;

&lt;h2 id=&#34;jepsen-aerospike-https-aphyr-com-posts-324-call-me-maybe-aerospike&#34;&gt;&lt;a href=&#34;https://aphyr.com/posts/324-call-me-maybe-aerospike&#34; target=&#34;_blank&#34;&gt;Jepsen: Aerospike&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this analysis of Aerospike, that explains what kind of database it is, what CAP properties satisfies&lt;/p&gt;

&lt;p&gt;Tags: cap, cap-theorem, jepsen, aphyr, aerospike, database, acid, ap, cp, consistency, availability, partitioning, paxos&lt;/p&gt;

&lt;p&gt;Id: bd7151c6-2639-11e9-a38e-0242ac110002
Read: Fri, 01 Feb 2019 15:55:04 +0000&lt;/p&gt;

&lt;h2 id=&#34;a-critique-of-ansi-sql-isolation-levels-https-www-microsoft-com-en-us-research-wp-content-uploads-2016-02-tr-95-51-pdf&#34;&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tr-95-51.pdf&#34; target=&#34;_blank&#34;&gt;A Critique of ANSI SQL Isolation Levels&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this paper that explains the ANSI SQL isolation levels&lt;/p&gt;

&lt;p&gt;Tags: non-repeatable, fuzzy-read, dirty-read, phantom, phantom-read, isolation, serializability, consistency, consistency, consistency-level, read-uncommitted, read-committed, repeatable-read, serializable, microsoft&lt;/p&gt;

&lt;p&gt;Id: 01292b8c-263a-11e9-a7fe-0242ac110002
Read: Fri, 01 Feb 2019 15:56:58 +0000&lt;/p&gt;

&lt;h2 id=&#34;weak-consistency-a-generalized-theory-and-optimistic-implementations-for-distributed-transactions-http-pmg-csail-mit-edu-papers-adya-phd-pdf&#34;&gt;&lt;a href=&#34;http://pmg.csail.mit.edu/papers/adya-phd.pdf&#34; target=&#34;_blank&#34;&gt;Weak Consistency: A Generalized Theory and Optimistic Implementations for Distributed Transactions&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;An extended paper on ACID properties for SQL databases&lt;/p&gt;

&lt;p&gt;Tags: liskov, atul-adya, stronger-serializable, consistency, consistency-level, isolation, database, sql-database, acid, transaction&lt;/p&gt;

&lt;p&gt;Id: 4a1c6f7a-263a-11e9-8e08-0242ac110002
Read: Fri, 01 Feb 2019 15:59:00 +0000&lt;/p&gt;

&lt;h2 id=&#34;no-todo-el-mundo-sabe-o-debe-dar-feedback-https-softwareyotrasdesvirtudes-com-2018-11-26-no-todo-el-mundo-sabe-o-debe-dar-feedback&#34;&gt;&lt;a href=&#34;https://softwareyotrasdesvirtudes.com/2018/11/26/no-todo-el-mundo-sabe-o-debe-dar-feedback/&#34; target=&#34;_blank&#34;&gt;No todo el mundo sabe o debe dar feedback&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The author explains why some feedback is dangerous: either the way of giving it, or the message, or both.&lt;/p&gt;

&lt;p&gt;In this case, she&amp;rsquo;s talking about the Commit Conf, but this is applicable to any situation&lt;/p&gt;

&lt;p&gt;Para dar un buen feedback es importante:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primero: agradecer el esfuerzo por la charla.&lt;/li&gt;
&lt;li&gt;Segundo: resaltar algo positivo de ella.  Seguro que algo cumple.&lt;/li&gt;
&lt;li&gt;Tercero: decir cómo mejorarías un aspecto&lt;/li&gt;
&lt;li&gt;Último: volver a dar las gracias o decir una frase buena que motive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dar un mal feedback es muy fácil:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primero: no leerte la descripción ni el nivel de la charla&lt;/li&gt;
&lt;li&gt;Segundo: te cabreas porque no es lo esperado y dudabas entre esa y otra charla&lt;/li&gt;
&lt;li&gt;Tercero: dices lo que no te ha gustado sin rodeos.&lt;/li&gt;
&lt;li&gt;Cuarto: además asumes cosas que no ha hecho y las escribes. Igual que yo he hecho en el Primero y Segundo.&lt;/li&gt;
&lt;li&gt;Quinto: si además dices algo faltoso gana puntos.&lt;/li&gt;
&lt;li&gt;Sexto: Utilizas esa tónica destructiva en todos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: laura-lacarra, commit, commit-conf, feedback, good-feedback, honest-feedback, spanish&lt;/p&gt;

&lt;p&gt;Id: 20d8145e-3a92-11e9-8023-0242ac110003
Read: Wed, 27 Feb 2019 13:18:10 +0000&lt;/p&gt;

&lt;h2 id=&#34;how-to-deal-with-difficult-people-on-software-projects-https-people-neilon-software&#34;&gt;&lt;a href=&#34;https://people.neilon.software/&#34; target=&#34;_blank&#34;&gt;How to Deal with Difficult People on Software Projects&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this guide on dealing with difficult people.&lt;/p&gt;

&lt;p&gt;There are many (48) personality types, including these types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Product Managers&lt;/li&gt;
&lt;li&gt;Designers&lt;/li&gt;
&lt;li&gt;Project Managers&lt;/li&gt;
&lt;li&gt;Development Managers&lt;/li&gt;
&lt;li&gt;Developers&lt;/li&gt;
&lt;li&gt;Quality Assurance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: people, people-management, personality-type, guide, neil-green&lt;/p&gt;

&lt;p&gt;Id: 95554892-3a92-11e9-9bbf-0242ac110003
Read: Wed, 27 Feb 2019 13:21:25 +0000&lt;/p&gt;

&lt;h2 id=&#34;software-disenchantment-http-tonsky-me-blog-disenchantment&#34;&gt;&lt;a href=&#34;http://tonsky.me/blog/disenchantment/&#34; target=&#34;_blank&#34;&gt;Software disenchantment&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article about somebody disenchanted with the current state of the art of software: slow, bloated, not better than 10 years ago, or faster.&lt;/p&gt;

&lt;p&gt;Tags: nikita-prokopov, bloat, rant, disenchantment, tonsky, comparison, speed, software&lt;/p&gt;

&lt;p&gt;Id: 0078d58a-3a93-11e9-8f23-0242ac110003
Read: Wed, 27 Feb 2019 13:24:25 +0000&lt;/p&gt;

&lt;h2 id=&#34;the-values-and-principles-of-agile-software-development-https-www-slideshare-net-bradapp-the-values-and-principles-of-agile-software-development&#34;&gt;&lt;a href=&#34;https://www.slideshare.net/bradapp/the-values-and-principles-of-agile-software-development&#34; target=&#34;_blank&#34;&gt;The Values and Principles of Agile Software Development&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the slides of this presentation by Brad Appleton, on Values, Principles, and Practices in an Agile environment.&lt;/p&gt;

&lt;p&gt;Plenty of good quotes&lt;/p&gt;

&lt;p&gt;Tags: brad-appleton, slideshare, slide, agile, practice, principle, value, xp, extreme-programming, quote, lean-software, lean&lt;/p&gt;

&lt;p&gt;Id: 42cdde80-3a93-11e9-814c-0242ac110003
Read: Wed, 27 Feb 2019 13:26:16 +0000&lt;/p&gt;

&lt;h2 id=&#34;makefiles-como-dejar-de-memorizar-comandos-en-docker-developer-vago-https-jesuslc-com-2018-04-21-makefiles-como-dejar-de-memorizar-comandos-en-docker-developer-vago&#34;&gt;&lt;a href=&#34;https://jesuslc.com/2018/04/21/makefiles-como-dejar-de-memorizar-comandos-en-docker-developer-vago/&#34; target=&#34;_blank&#34;&gt;Makefiles como dejar de memorizar comandos en docker – Developer Vago&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve discovered a new technique for Makefiles:\n\nUsing a common format (a DSL, in fact) to document the goal, then a new goal &amp;lsquo;help&amp;rsquo; to print that documentation.\n\n```bash
.PHONY: help
help: ## Print this help.
  @grep -E &amp;lsquo;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a-zA-Z&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a-zA-Z&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;+:.&lt;em&gt;?## .&lt;/em&gt;$$&amp;rsquo; $(MAKEFILE_LIST) | awk &amp;lsquo;BEGIN {FS = \&amp;rdquo;:.*?## \&amp;ldquo;}; {printf \&amp;rdquo;\033[36m%-20s\033[0m %s\n\&amp;ldquo;, $$1, $$2}&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
when you run `make help`, then
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Print this help.
```&lt;/p&gt;

&lt;p&gt;Tags: makefile, jesuslc, documentation, executable-documentation, awk, trick, help&lt;/p&gt;

&lt;p&gt;Id: d6a4b78c-3a93-11e9-88d7-0242ac110003
Read: Wed, 27 Feb 2019 13:30:24 +0000&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a-zA-Z&#34;&gt;a-zA-Z_- &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a-zA-Z&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in October 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</link>
      <pubDate>Thu, 01 Oct 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</guid>
      <description>

&lt;h2 id=&#34;blazing-fast-html-virtual-dom-in-elm&#34;&gt;Blazing Fast HTML: Virtual DOM in Elm&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://elm-lang.org/blog/blazing-fast-html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining how Elm works in relation to the virtual DOM. By Evan Czaplicki.&lt;/p&gt;

&lt;p&gt;Tags: elm, dom, virtual-dom, comparison, speed, haskell, evan-czaplicki&lt;/p&gt;

&lt;h2 id=&#34;why-you-should-never-ever-ever-use-mongodb&#34;&gt;Why you should never, ever, ever use MongoDB&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; stating the downsides of using MongoDB. Written by Sven Slootweg&lt;/p&gt;

&lt;p&gt;Tags: mongodb, downside, sven-slootweg, json, document-store, postgresql, acid&lt;/p&gt;

&lt;h2 id=&#34;do-you-really-get-classloaders&#34;&gt;Do you really get classloaders?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;http://zeroturnaround.com/rebellabs/rebel-labs-tutorial-do-you-really-get-classloaders/&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Jevgeny Kabanov on classloaders: what they are, how they work nad some tips to solve common issues.&lt;/p&gt;

&lt;p&gt;My notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the classloading is lazy: the resources are not loaded until they are mentioned&lt;/li&gt;
&lt;li&gt;every classloader has a parent&lt;/li&gt;
&lt;li&gt;every class has a classloader associated with it&lt;/li&gt;
&lt;li&gt;every object has a class associated with it&lt;/li&gt;
&lt;li&gt;classloading delegation: the parent is consulted before loading a class. if it has it, it will load it. If not, I will delegate it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also &lt;a href=&#34;http://www.javaworld.com/article/2074396/core-java/javaone-2011--do-you-really-get-classloaders-.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the same video&lt;/p&gt;

&lt;p&gt;Tags: jevgeny-kabanov, classloader, java,&lt;/p&gt;

&lt;h2 id=&#34;truth-table&#34;&gt;Truth table&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Truth_table&#34; target=&#34;_blank&#34;&gt;the wikipedia article&lt;/a&gt; about the truth table and the 16 possible binary boolean operators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Contradiction&lt;/li&gt;
&lt;li&gt;NOR&lt;/li&gt;
&lt;li&gt;Converse nonimplication&lt;/li&gt;
&lt;li&gt;Negation (of p)&lt;/li&gt;
&lt;li&gt;Material nonimplication&lt;/li&gt;
&lt;li&gt;Negation (of q)&lt;/li&gt;
&lt;li&gt;XOR (exclusive disjunction)&lt;/li&gt;
&lt;li&gt;NAND&lt;/li&gt;
&lt;li&gt;AND (conjunction)&lt;/li&gt;
&lt;li&gt;XNOR (biconditional)&lt;/li&gt;
&lt;li&gt;Projection (of p)&lt;/li&gt;
&lt;li&gt;Implication&lt;/li&gt;
&lt;li&gt;Projection (of q)&lt;/li&gt;
&lt;li&gt;Converse implication&lt;/li&gt;
&lt;li&gt;OR (disjunction)&lt;/li&gt;
&lt;li&gt;Tautology&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-lines-of-code-3-minutes-implement-a-programming-language-from-scratch&#34;&gt;7 lines of code, 3 minutes: Implement a programming language from scratch&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://matt.might.net/articles/implementing-a-programming-language/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matt Might about the benefits of implementing a language (from scratch but on top of another existing language used as framework). Chooses lambda calculus as the desired DSL&lt;/p&gt;

&lt;p&gt;Tags: matt-might, lambda-calculus, racket, domain-specific-language&lt;/p&gt;

&lt;h2 id=&#34;turing-completeness&#34;&gt;Turing completeness&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing_completeness&#34; target=&#34;_blank&#34;&gt;this wikipedia article&lt;/a&gt; (both main and discussion) about this subject.&lt;/p&gt;

&lt;p&gt;It has sounded strange to me the reference to S-expressions:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Data languages
The notion of Turing-completeness does not apply to languages such as XML, HTML, JSON, YAML and S-expressions because they are typically used to represent structured data, not describe computation [&amp;hellip;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If data (S-expression) is represented as the same format as code (e.g., Lisp&amp;rsquo;s S-expression) and the latter is used to represent a computation, shouldn&amp;rsquo;t be &amp;ldquo;data languages that also are used as computation languages&amp;rdquo; excluded from that list?&lt;/p&gt;

&lt;p&gt;As a side note, Lisp is Turing Complete (see &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing_completeness#Examples&#34; target=&#34;_blank&#34;&gt;Turing Complete#Examples&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;the-prize-is-won-the-simplest-universal-turing-machine-is-proved&#34;&gt;The Prize Is Won; The Simplest Universal Turing Machine Is Proved&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.wolfram.com/2007/10/24/the-prize-is-won-the-simplest-universal-turing-machine-is-proved/?year=2007&amp;amp;monthnum=10&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Stephen Wolfram about the proof of a Turing Machine 2,3 being universal by Alex Smith.&lt;/p&gt;

&lt;p&gt;Tags: stephen-wolfram, turing-machine, universal-turing-machine, proof, paper, alex-smith&lt;/p&gt;

&lt;h2 id=&#34;making-a-successful-commitment-in-each-sprint&#34;&gt;Making a successful commitment in each Sprint&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://succeeding-with-agile.blogspot.com/2015/07/making-successful-commitment-in-each.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Nikolaos Raptis on committing to work in each sprint.&lt;/p&gt;

&lt;p&gt;Tags: nikolaos-raptis, sprint, agile, commitment&lt;/p&gt;

&lt;h2 id=&#34;no-increment-operator-in-ruby&#34;&gt;No increment operator (++) in Ruby?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/3717519/no-increment-operator-in-ruby&#34; target=&#34;_blank&#34;&gt;this stackoverflow&lt;/a&gt; question about the lack of post-increment operator (i++) in Ruby:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;++ and &amp;ndash; are NOT reserved operator in Ruby.&lt;/p&gt;

&lt;p&gt;Mailing list from &lt;a href=&#34;http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/2710&#34; target=&#34;_blank&#34;&gt;Yukihiro Matsumoto aka matz&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;code-is-data-data-is-code&#34;&gt;Code is Data, Data is Code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blogs.mulesoft.com/dev/news-dev/code-is-data-data-is-code/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by James Donelan on the equivalence of code and data in homoiconic languages, including Clojure.&lt;/p&gt;

&lt;p&gt;The article talks about homoiconicity, manually creating Abstract Syntax Trees (AST) out of data and the macro environment. Also, compares the difference between macros and functions.&lt;/p&gt;

&lt;p&gt;Tags: code=data, data=code, james-donelan, clojure, homoiconicity, abstract-syntax-tree, ast, macro, function&lt;/p&gt;

&lt;h2 id=&#34;agile-in-practice-test-driven-development&#34;&gt;Agile in Practice: Test Driven Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=uGaNkTahrIw&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; introducing TDD by the Agile Academy. Explains its motivations and the basic cyclical fashion.&lt;/p&gt;

&lt;p&gt;Tags: agile-academy, video, tdd, introduction&lt;/p&gt;

&lt;h2 id=&#34;agile-in-practice-pair-programming&#34;&gt;Agile in Practice: Pair Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=ET3Q6zNK3Io&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Agile Academy on practicing pair programming. Explains the destination and how to get there.&lt;/p&gt;

&lt;p&gt;Tags: agile-academy, pair-programming, video, introduction&lt;/p&gt;

&lt;h2 id=&#34;a-low-cost-approach-to-working-on-side-projects&#34;&gt;A low cost approach to working on side projects&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://practicingruby.com/articles/low-cost-approach-to-side-projects&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Gregory Brown on how to apply the MVP and Lean Startup principles to side projects (a.k.a. pet projects). Try to start with a brainstorming session of all the features you want your product to have, then prioritise, picking the most important ones.&lt;/p&gt;

&lt;p&gt;Most projects&amp;rsquo; needs can be solved with a minimal version, in the form of a script that took half an hour to develop.&lt;/p&gt;

&lt;p&gt;Tags: gregory-brown, mvp, lean-startup, script, proof-of-concept, priority, backlog, side-project, pet-project, low-cost, cost-reduction&lt;/p&gt;

&lt;h2 id=&#34;extreme-programming&#34;&gt;Extreme Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=kFM2Vcu-BRo&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by STAR Videos on the basic principles behind Extreme Programming and how to use it to improve software quality&lt;/p&gt;

&lt;p&gt;Tags: star-videos, extreme-programming, xp, software-quality&lt;/p&gt;

&lt;h2 id=&#34;disruptor-high-performance-alternative-to-bounded-queues-for-exchanging-data-between-concurrent-threads&#34;&gt;Disruptor: High performance alternative to bounded queues for exchanging data between concurrent threads&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lmax-exchange.github.io/disruptor/files/Disruptor-1.0.pdf&#34; target=&#34;_blank&#34;&gt;this white paper&lt;/a&gt; describing the disruptor framework: a way of exchanging data between concurrent threads.&lt;/p&gt;

&lt;p&gt;It uses a ring buffer and other techniques to eliminate write contention, reduce read contention and produces good results. It was developed for a financial exchange environment but it&amp;rsquo;s general purpose.&lt;/p&gt;

&lt;p&gt;Tags: martin-thompson, dave-farley, michael-barker, patricia-gee, andrew-stewart, trisha-gee, disruptor, contention, framework, concurrency, parallelism, white-paper, comparison, arrayblockingqueue, concurrentlinkedqueue, doug-lea, benchmark, lmax, low-level-optimization, optimization&lt;/p&gt;

&lt;h2 id=&#34;dissecting-the-disruptor-what-s-so-special-about-a-ring-buffer&#34;&gt;Dissecting the Disruptor: What&amp;rsquo;s so special about a ring buffer?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mechanitis.blogspot.com.es/2011/06/dissecting-disruptor-whats-so-special.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the ring buffer data structure. A FIFO data structure where elements get overwritten to reduce pressure on the garbage collector. Every message gets sent to every consumer.&lt;/p&gt;

&lt;p&gt;Tags: patricia-gee, trisha-gee, disruptor, ring-buffer, data-structure&lt;/p&gt;

&lt;h2 id=&#34;the-dependency-inversion-principle&#34;&gt;The Dependency Inversion Principle&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.objectmentor.com/resources/articles/dip.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; about the Dependency Inversion Principle (DIP) written Robert C. Martin.&lt;/p&gt;

&lt;p&gt;It explains the theory, philosophy behind it. Also, creates an example with a copy buffer and different output locations&lt;/p&gt;

&lt;p&gt;Tags: robert-martin, dependency-inversion-principle, dip, example, comparison, object-oriented, principle, solid, design-principle&lt;/p&gt;

&lt;h2 id=&#34;dip-in-the-wild&#34;&gt;DIP in the Wild&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://martinfowler.com/articles/dipInTheWild.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the Dependency Inversion Principle (DIP) written by Brett L. Schuchert.&lt;/p&gt;

&lt;p&gt;It is explained non-canonical representations of this principle, how in other cases he has solved it and conclusions of using it day to day.&lt;/p&gt;

&lt;p&gt;Tags: brett-l.-schuchert, dependency-inversion-principle, dip, example, object-oriented, solid, design-principle&lt;/p&gt;

&lt;h2 id=&#34;the-new-new-product-development-game&#34;&gt;The New New Product Development Game&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/1986/01/the-new-new-product-development-game&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; about the holistic approach to product development, considered seminal for Scrum and other Agile methodologies. Written by Hirotaka Takeuchi and Ikujiro Nonaka&lt;/p&gt;

&lt;p&gt;In it, they describe how teams are distributed, the responsibilities for each one, and the degrees of freedom.&lt;/p&gt;

&lt;p&gt;Cites the six basic characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;built-in instability&lt;/li&gt;
&lt;li&gt;self-organizing project teams&lt;/li&gt;
&lt;li&gt;overlapping development phases&lt;/li&gt;
&lt;li&gt;multilearning&lt;/li&gt;
&lt;li&gt;subtle control&lt;/li&gt;
&lt;li&gt;organizational transfer of learning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: hirotaka-takeuchi, ikujiro-nonaka, scrum, agile, product-development, management, 1986&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>