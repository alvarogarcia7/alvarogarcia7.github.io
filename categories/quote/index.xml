<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>quote on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/quote/</link>
    <description>Recent content in quote on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Sep 2019 10:32:19 +0000</lastBuildDate><atom:link href="https://alvarogarcia7.github.io/categories/quote/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self-Study in September 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/09/01/self-study-september-2019/</link>
      <pubDate>Sun, 01 Sep 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/09/01/self-study-september-2019/</guid>
      <description>Profiling Memory Allocations In iOS With Instruments Describes a technique for profiling memory allocations
Tags: memory-management, memory-allocation, tool, technique, ios, matt-eaton
Id: 237dd71a-dc50-11e9-b201-0242ac110003 Read: Sat, 21 Sep 2019 09:13:56 +0000
Programming as translation  Converting the real world into digital abstractions requires distillation. And, like literary translators, developers must understand their biases.
 Tags: alvaro-videla, old_sound, analogy, metaphor, quote, umberto-eco
Id: a2c0f458-dc50-11e9-95d7-0242ac110003 Read: Sat, 21 Sep 2019 09:17:29 +0000</description>
    </item>
    
    <item>
      <title>In Defense of Tooling</title>
      <link>https://alvarogarcia7.github.io/blog/2019/05/30/defense-tooling/</link>
      <pubDate>Thu, 30 May 2019 00:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/05/30/defense-tooling/</guid>
      <description>A quote (on a curriculum vitae) that I&amp;rsquo;ve enjoyed:
 I am a firm believer in the value of tools, and often spend significant time at the beginning of a project developing tools specific to the needs of the project. This always pays off in the long run. I use tools to:
 Perform tasks not otherwise achievable Automate tedious/repetative processes Simplify steps in the build/debug cycle Eliminate &amp;ldquo;human error&amp;rdquo; in scanning, translation etc.</description>
    </item>
    
    <item>
      <title>Self-Study in April 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/04/01/self-study-april-2019/</link>
      <pubDate>Mon, 01 Apr 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/04/01/self-study-april-2019/</guid>
      <description>How to validate password with regular expression Explains the &amp;lsquo;?=&amp;rsquo; character in a regex, to validate conditions. Make it &amp;lsquo;.*&amp;rsquo; to &amp;lsquo;contain&amp;rsquo;, rather than &amp;lsquo;startWith&amp;rsquo;
Tags: password, validation, look-ahead, regex, regular-expression
Id: 2ed5999a-555f-11e9-8bf8-0242ac110005 Read: Tue, 02 Apr 2019 15:51:30 +0000
Unlock honest feedback from your employees with this one word I&amp;rsquo;ve read this article about asking for advice instead of asking for feedback and how that helped.
Tags: comparison, advice, feedback</description>
    </item>
    
    <item>
      <title>Self-Study in March 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/03/01/self-study-march-2019/</link>
      <pubDate>Fri, 01 Mar 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/03/01/self-study-march-2019/</guid>
      <description>NodeJS logging made right Explains logging and tracing in nodejs.
Usage of thread-local storage, trace id, continuation local storage.
Tags: nodejs, logging, tracing, thread-local, thread-local-storage, trace-id, continuation-local-storage, cls, tls, proxy, hook
Id: 5bed4596-3f5b-11e9-83e1-0242ac110005 Read: Tue, 05 Mar 2019 15:28:42 +0000
Web Design 3.0: When Your Web Design Really Matters In Chapter 1, we will find out how Web Design is changing. Also, you will learn about the birth of the new generation of web designers, who are designing web pages in Web Design 3.</description>
    </item>
    
    <item>
      <title>Self-Study in February 2019</title>
      <link>https://alvarogarcia7.github.io/blog/2019/02/01/self-study-february-2019/</link>
      <pubDate>Fri, 01 Feb 2019 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2019/02/01/self-study-february-2019/</guid>
      <description>Amazon DynamoDB Transactions: How it Works Explains how transactions work in DynamoDB
Tags: dynamodb, aws, help, transaction, serializable
Id: 7fb09cd4-2639-11e9-9377-0242ac110002 Read: Fri, 01 Feb 2019 15:53:20 +0000
Jepsen: Aerospike I&amp;rsquo;ve read this analysis of Aerospike, that explains what kind of database it is, what CAP properties satisfies
Tags: cap, cap-theorem, jepsen, aphyr, aerospike, database, acid, ap, cp, consistency, availability, partitioning, paxos
Id: bd7151c6-2639-11e9-a38e-0242ac110002 Read: Fri, 01 Feb 2019 15:55:04 +0000</description>
    </item>
    
    <item>
      <title>Self-Study in June 2018</title>
      <link>https://alvarogarcia7.github.io/blog/2018/06/01/self-study-june-2018/</link>
      <pubDate>Fri, 01 Jun 2018 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2018/06/01/self-study-june-2018/</guid>
      <description>Don&amp;rsquo;t look, don&amp;rsquo;t tell I&amp;rsquo;ve read this bonilista by David Bonilla on what strategies companies use to deal with security and defects.
Explains full disclosure, responsible disclosure and bug bounties.
Tags: david-bonilla, bonilista, security, full-disclosure, responsible-disclosure, bug-bounty, reporting, hacker, cracker
Id: a1a6925a-7958-11e8-a87f-0242ac110002 Read: Tue, 26 Jun 2018 15:50:21 +0000
La vida de las ideas I&amp;rsquo;ve read this bonilista by David Bonilla about the value of the ideas and what differentiates a good idea from a good execution from a good outcome</description>
    </item>
    
    <item>
      <title>Self-Study in August 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/08/01/self-study-august-2017/</link>
      <pubDate>Tue, 01 Aug 2017 10:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/08/01/self-study-august-2017/</guid>
      <description>How I ended up paying $150 for a single 60GB download from Amazon Glacier I&amp;rsquo;ve read this article by Marko Karppinen that explains how a mistake in understanding the pricing model of AWS Glacier cost 150$ instead of the expected 0.86$
 When cloud providers use uncommon and/or unpredictable pricing models, even your informed hunch about the cost can be off by several orders of magnitude, like the price differential between an iPad and a Ferrari.</description>
    </item>
    
    <item>
      <title>The Nature of Software Development: Part I</title>
      <link>https://alvarogarcia7.github.io/blog/2017/07/09/nature-software-development-part-1/</link>
      <pubDate>Sun, 09 Jul 2017 13:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/07/09/nature-software-development-part-1/</guid>
      <description>The Nature of Software development: reading breadcrumbs, quotes, thoughts Preface  The Natural Way serves end users well because it delivers value to them sooner.
serves the business [&amp;hellip;] because it provides important information quickly, and because it provides the ability to adjust direction as needed.
serves management [&amp;hellip;] see what’s really going on inside the project so that when action is needed, there will be time to act. And it reduces management’s problems by making information visible [&amp;hellip;]</description>
    </item>
    
    <item>
      <title>The Search for Value (a quote)</title>
      <link>https://alvarogarcia7.github.io/blog/2017/07/09/search-for-value-quote-chapter-1/</link>
      <pubDate>Sun, 09 Jul 2017 13:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/07/09/search-for-value-quote-chapter-1/</guid>
      <description>A quote from the book The Nature of Software Development by Ron Jeffries, talking about value (in software) and the building blocks to achieve it:
 Value. Value, we’ll see, is “what you want.” [&amp;hellip;]
We’ll tell the story by building up from the bottom of the pyramid, describing how to guide, organize, plan, and build our product, in small slices, with a focus on quality. The value we produce is based on these.</description>
    </item>
    
    <item>
      <title>Self-Study in June 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/06/01/self-study-june-2017/</link>
      <pubDate>Thu, 01 Jun 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/06/01/self-study-june-2017/</guid>
      <description>So Hey You Should Stop Using Texts for Two-Factor Authentication I&amp;rsquo;ve read this article explaining why messages over SMS should not be used for the &amp;lsquo;what you own&amp;rsquo; in 2FA.
Tags: andy-greenberg, 2fa, sms, security, warning
Why I&amp;rsquo;d never work for Google, Twitter, or Facebook I&amp;rsquo;ve read this article by David Bryant Copeland on why he would never work for these three companies: he doesn&amp;rsquo;t share the principles and values from these companies.</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 8</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</link>
      <pubDate>Sun, 28 May 2017 16:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</guid>
      <description>Chapter 8: Bootstrap a Greenfield System  Working on a brand new application can be a lot of fun. There’s no &amp;ldquo;baggage&amp;rdquo; from legacy code, no technical debt, and there’s a wonderful feeling of freshness when starting an app from scratch.
(p. 101)
  The decisions you make [&amp;hellip;] can have a lasting impact
(p. 101)
 8.1 Overview  When given a greenfield project [&amp;hellip;] you have two main goals:</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 7</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/24/senior-software-engineer-chapter-7/</link>
      <pubDate>Wed, 24 May 2017 11:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/24/senior-software-engineer-chapter-7/</guid>
      <description>Chapter 7: Make Technical Decisions  Opinions like this are often indicators of hidden facts that you have yet to identify
(p. 90)
 </description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 6</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-6/</link>
      <pubDate>Tue, 23 May 2017 07:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-6/</guid>
      <description>Chapter 6: Play Well With Others  challenges you’ll face as a programmer is to explain what you do, or how you’ve done it, to someone who is not a programmer
Translating your work to non-technical people is a skill that can be more valuable than any specific technical knowledge you have. It’s what makes a senior developer in the eyes of others.
(p 77)
 6.1 Empathize With Your Audience  these &amp;ldquo;interested parties&amp;rdquo; understand the problem more deeply than you, but lack the technical knowledge, skill, or time to solve it directly.</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 5</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-5/</link>
      <pubDate>Tue, 23 May 2017 07:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-5/</guid>
      <description>Chapter 5: Deal With Technical Debt and Slop  Seeing legacy as tech debt that has been acquired Slop as source for sloppy code Chapter about understanding the difference between slop and technical debt.   Many developers, if they are feeling pressured to complete their work, would call this an acceptable compromise, promise to fix it later, and ship it
(p. 70)
  Technical Debt is [&amp;hellip;] used to explain compromises in implementation that save cost now, at a larger future cost (just like real debt).</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 3</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/13/senior-software-engineer-chapter-3/</link>
      <pubDate>Sat, 13 May 2017 13:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/13/senior-software-engineer-chapter-3/</guid>
      <description>Chapter 3: Fix bugs efficiently and cleanly In the beginning, you will be given tasks that require no in-depth domain knowledge
Process  A process allows you to focus on the right thing at th right time (p. 14)
It will make your productivity and quality more predictable, which, in turn, will help you estimate and keep more of your promises about your work (paraphrased from p. 14)
 TDD Explains some benefits about TDD:</description>
    </item>
    
    <item>
      <title>Self-Study in May 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/01/self-study-in-may-2017/</link>
      <pubDate>Mon, 01 May 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/01/self-study-in-may-2017/</guid>
      <description>The real reason why the Spotify model is broken I&amp;rsquo;ve read this article by Sharky Laguana, comparing several royalty models for spotify
Tags: sharky-laguana, spotify, comparison, royalty
[Day 3 of 7] &amp;ldquo;Badass&amp;rdquo; developer gets a RUDE awakening I&amp;rsquo;ve read this email that John Sonmez sends, about being a programmer vs a language programmer. Some quotes:
 Someone who could tear apart complex, confusing puzzles and engineer elegant, reliable solutions&amp;hellip; whether those challenges were software, hardware or &amp;ldquo;wetware.</description>
    </item>
    
    <item>
      <title>Self-Study in April 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/04/01/self-study-in-april-2017/</link>
      <pubDate>Sat, 01 Apr 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/04/01/self-study-in-april-2017/</guid>
      <description>10 Myths About Docker That Stop Developers Cold I&amp;rsquo;ve read this listicle of docker myths. By Derick Bailey
Tags: derick-bailey, docker, myth
Bored People Quit I&amp;rsquo;ve read this article by Michael Lopp on what are some mechanisms why bored people quit.
Some interesting quotes:
 My gig is the care and feeding of engineers, and their productivity is my productivity. If they all leave, I have exactly no job.
  My job isn’t just building product; I also build people.</description>
    </item>
    
    <item>
      <title>On the Make, Buy or Rent decision: Stateful vs Stateless components</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/16/on-the-make-buy-or-rent-decision-stateful-vs-stateless-components/</link>
      <pubDate>Thu, 16 Mar 2017 07:39:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/16/on-the-make-buy-or-rent-decision-stateful-vs-stateless-components/</guid>
      <description>From the Make, Buy or Rent article:
 [&amp;hellip;] [T]he three main system options for organizations seeking to upgrade their systems [are :]
  Make Buy Rent  IT managers have different criteria for deciding which components to assign in each category.
Another criteria for deciding At a client, they have taken the decision to split their core IT systems in to the three options: make, buy, rent.
 The business logic to handle the core business is &amp;lsquo;make&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Self-Study in February 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/02/01/self-study-in-february-2017/</link>
      <pubDate>Wed, 01 Feb 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/02/01/self-study-in-february-2017/</guid>
      <description>WhatsApp Security Vulnerability I&amp;rsquo;ve read this article by Bruce Schneier on a security defect in whatsapp, where an &amp;lsquo;unconfirmed&amp;rsquo; message can be re-encrypted (with a new key) and resent. This is a vector for some attacks.
Tags: bruce-schneier, security, whatsapp, encryption, attack-vector
Encrypted email service once used by Edward Snowden relaunches I&amp;rsquo;ve read this article, by Kim Zetter, on Lavabit restablishing its service. Explains the company&amp;rsquo;s past and the new services they are offering</description>
    </item>
    
    <item>
      <title>A common misunderstanding about `reduce`</title>
      <link>https://alvarogarcia7.github.io/blog/2016/12/14/a-common-misunderstanding-about-reduce/</link>
      <pubDate>Wed, 14 Dec 2016 18:48:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/12/14/a-common-misunderstanding-about-reduce/</guid>
      <description>Misconception I&amp;rsquo;ve read in several places that reduce reduces an array1 of values to a single one. The main characteristic of this function is not to reduce to a &amp;lsquo;smaller element&amp;rsquo; / &amp;lsquo;single element&amp;rsquo;, but to have access to the accumulated results and the elements, one by one. Quoting Mozilla Developer Network&amp;rsquo;s (MDN) Javascript reference:
 The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.</description>
    </item>
    
    <item>
      <title>Stability terms from &#34;Release it!&#34;, a quote</title>
      <link>https://alvarogarcia7.github.io/blog/2016/06/26/stability-terms-from-release-it-a-quote/</link>
      <pubDate>Sun, 26 Jun 2016 22:19:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/06/26/stability-terms-from-release-it-a-quote/</guid>
      <description>In Release It!, terms related to stability:
 transaction: is an abstract unit of work processed by the system mixed workload: is a combination of different transaction types processed by a system. system: the complete, interdependent set of hardware, applications, and services required to process transactions for users stability: resilient system keeps processing transactions, even when there are transient impulses, persistent stresses, or component failures disrupting normal processing stress (to the system): is a force applied to the system over an extended period.</description>
    </item>
    
    <item>
      <title>The role of a software consultant</title>
      <link>https://alvarogarcia7.github.io/blog/2016/06/10/role-software-consultant/</link>
      <pubDate>Fri, 10 Jun 2016 10:50:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/06/10/role-software-consultant/</guid>
      <description>A quote from Reinventing Organizations, about roles, job descriptions and job titles in Chapter 2.2: Self-management (structures), page 90:
 [In] Teal Organizations [&amp;hellip;] people are not made to fit pre-defined jobs; their job emerge from a multitude of roles and responsibilities they pick up based on their interests, talents, and the needs of the organization.
 Frederic Laloux, Reinventing Organizations   In my opinion, this is the role of the software consultant when working with a client: even if the customer has asked for help in some parts of their activity, a senior-enough consultant can discover other areas where they can add value, even if that new work doesn&amp;rsquo;t have much in common with the initial request (this change should be approved by the people that will be affected).</description>
    </item>
    
    <item>
      <title>Unwritten principles for coaching, a quote</title>
      <link>https://alvarogarcia7.github.io/blog/2016/06/10/unwritten-principles-coaching/</link>
      <pubDate>Fri, 10 Jun 2016 10:49:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/06/10/unwritten-principles-coaching/</guid>
      <description>A quote from Reinventing Organizations, about a few unwritten principles for coaching, in Chapter 2.2: Self-management (structures), page 70:
  It’s okay for teams to struggle. From struggle comes learning. And teams that have gone through difficult moments build resilience and a deep sense of community. The coach’s role therefore is not to prevent foreseeable problems, but to support teams in solving them (and later help them reflect on how they’ve grown in the process).</description>
    </item>
    
    <item>
      <title>Quote: Characterization tests</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/18/quote-characterization-tests/</link>
      <pubDate>Mon, 18 Apr 2016 00:56:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/18/quote-characterization-tests/</guid>
      <description>In Working effectively with legacy code, Michael Feathers talks a type of tests to define or characterize the current behavior of the legacy system:
 In nearly every legacy system, what the system does is more important than what it is supposed to do.
A characterization test is a test that characterizes the actual behavior of a piece of code. [&amp;hellip;] The test document the actual current behavior of the system.</description>
    </item>
    
    <item>
      <title>Self-Study in April 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/01/self-study/</link>
      <pubDate>Fri, 01 Apr 2016 00:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/01/self-study/</guid>
      <description>Deliberate Practice: What It Is and Why You Need It I&amp;rsquo;ve read this article by Corbett Barr on what is deliberate practice and why it is needed to become an expert in a given domain field.
The four essential components:
 Motivation Tailored (practice) Feedback Repetion  Tags: corbett-barr, deliberate-practice, expert, practice, anders-ericsson, talent, professional-development, career
10 Features I Wish Java Would Steal From the Kotlin Language I&amp;rsquo;ve read this list of features that the Kotlin Language has that would be an improvement for the Java language.</description>
    </item>
    
    <item>
      <title>Self-Study in March 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</link>
      <pubDate>Wed, 02 Mar 2016 12:58:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/03/02/self-study-in-march-2016/</guid>
      <description>Learning Programming Isn’t That Hard, Deep Work Is Hard I&amp;rsquo;ve read this article by Benedict Fritz on two types of work (i.e., deep and shallow) and how programming is of the deep type. He links the difficulty of learning to program to the difficulty of practicing deep work.
Tags: analogy, benedict-fritz, deep-work, shallow-work, learn-to-program, psychology
BeCodeWeek by Yeray Darias I&amp;rsquo;ve read this category of posts by Yeray Darias about his BeCodeWeek, a desk-surfing experience at BeCode.</description>
    </item>
    
    <item>
      <title>Self-Study in January 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</link>
      <pubDate>Fri, 01 Jan 2016 16:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</guid>
      <description>Test cases in inner classes with JUnit I&amp;rsquo;ve read this answer in stackoverflow about nested test runners in JUnit
Tags: junit, stackoverflow, answer, nested-runner
Recording a Great Coding Screencast I&amp;rsquo;ve read this article by John Lindquist where he explains how he sets up the recording environment for egghead.
Tags: john-lindquist, record, screencast, egghead, code-screencast, record-video, video
React Testing Course I&amp;rsquo;ve watched the full course by Trevor D. Miller on how to test react components and the libraries to make it possible.</description>
    </item>
    
    <item>
      <title>Self-Study in November 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</link>
      <pubDate>Mon, 02 Nov 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/11/02/self-study-in-november-2015/</guid>
      <description>Call me maybe: RabbitMQ I&amp;rsquo;ve read this article by Kyle Kingsbury on using RabbitMQ as a lock service. It investigates and gives a counterexample of using it for this purpose.
Uses Knossos to do the testing and surfaces a problem with it. Explains specific problems on locking: at-most-once and at-least-once message delivery
Note: References Jepsen (I guess an inside joke to the song &amp;ldquo;Call me maybe&amp;rdquo; by Carly Rae Jepsen) for at-most-once and at-least-once message delivery.</description>
    </item>
    
    <item>
      <title>The Animal Laborans and the Homo Faber</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/10/the-animal-laborans-and-the-homo-faber/</link>
      <pubDate>Mon, 10 Aug 2015 01:19:58 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/10/the-animal-laborans-and-the-homo-faber/</guid>
      <description>I&amp;rsquo;ve found this quote very interesting from the book &amp;ldquo;The Craftsman&amp;rdquo;, by Richard Sennett:
 Animal laborans is, as the name implies, the human being akin to a beast of burden, a drudge condemned to routine. Arendt enriched this image by imagining him or her absorbed in a task that shuts out the world, a state well exemplified by Oppenheimer&amp;rsquo;s feeling that the atomic bomb was a &amp;ldquo;sweet&amp;rdquo; problem, or Eichmann&amp;rsquo;s obsession with making the gas chambers efficient.</description>
    </item>
    
    <item>
      <title>Recognizing dependencies</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/08/recognizing-dependencies/</link>
      <pubDate>Sat, 08 Aug 2015 14:11:29 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/08/recognizing-dependencies/</guid>
      <description>From the Chapter 3, Managing Dependencies, from the book Practical Object-Oriented Design in Ruby, by Sandi Metz:
 An object has a dependency when it knows:
 The name of another class. [&amp;hellip;] The name of a message that it intends to send to someone other than self. [&amp;hellip;] The arguments that a message requires. [&amp;hellip;] The order of those arguments. [&amp;hellip;]   If an object knows any of these facts about another object, it has dependencies to the other.</description>
    </item>
    
    <item>
      <title>Self-Study in August 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</link>
      <pubDate>Sun, 02 Aug 2015 21:45:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</guid>
      <description>Humble Object I&amp;rsquo;ve read the Humble Object list of patterns, by Gerard Meszaros, including:
 humble dialog humble executable humble transaction controller humble container adapter  Tags: pattern, gerard-meszaros
How you know I&amp;rsquo;ve reread this small essay by Paul Graham on storing information in our heads, based on the context. On the importance of rereading, to add more contexts to the initial one.
Tags: paul-graham, reread, read
Protected Variation: The Importance of Being Closed I&amp;rsquo;ve read this article by Craig Larman in the magazine IEEE Software &amp;gt; Design.</description>
    </item>
    
    <item>
      <title>Quote: Organizing Code to Allow for Easy Changes</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/08/quote-organizing-code-to-allow-for-easy-changes/</link>
      <pubDate>Wed, 08 Jul 2015 02:41:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/08/quote-organizing-code-to-allow-for-easy-changes/</guid>
      <description>Organizing Code to Allow for Easy Changes  Asserting that code should be easy to change is akin to stating that children should be polite; the statement is impossible to disagree with yet it in no way helps a parent raise an agreeable child. The idea of easy is too broad; you need concrete definitions of easiness and specific criteria by which to judge code. If you define easy to change as</description>
    </item>
    
    <item>
      <title>Types of defects</title>
      <link>https://alvarogarcia7.github.io/blog/2015/06/14/types-of-defects/</link>
      <pubDate>Sun, 14 Jun 2015 16:16:51 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/06/14/types-of-defects/</guid>
      <description>Some time ago, while researching types of defects and the cost of fixing them1, I stumbled upon this:
 Years ago I worked with a bunch of economists in the US Federal Government - they categorized &amp;lsquo;bugs&amp;rsquo; in their memos into three types:
  Typos: Simple misspellings of words. Infrequent, easy to detect, easy to fix.
  Writos: Incoherent sentences. More frequent, hard to detect, harder to fix.</description>
    </item>
    
    <item>
      <title>Paper: TDD in industrial teams</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams/</link>
      <pubDate>Tue, 12 May 2015 00:02:44 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/12/paper-tdd-in-industrial-teams/</guid>
      <description>I&amp;rsquo;ve read this paper by Nagappan, Maximilien, Bhat and Williams on the cost, advantages, pitfalls of doing TDD in industrial teams (private companies who create software).
My notes Abstract:
 little empirical evidence supports or refutes the utility of this practice in an industrial context
  they seem to be talking about inside-out tdd as in chapter 2 (page 291), they talk about small units and then integrating them in a bigger context  Benefits taken from chapter 2 (page 292)</description>
    </item>
    
    <item>
      <title>Whose fault is this?</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/25/whose-fault-is-this/</link>
      <pubDate>Sat, 25 Apr 2015 14:10:31 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/25/whose-fault-is-this/</guid>
      <description>In the prologue of the book, while thanking everyone that has made the book possible:
 [&amp;hellip;], none of the people mentioned here would be responsible for any inaccuracy that might exist in the book, as this responsibility is exclusively mine
Mihaly Csikszentmihalyi (translated)1, prologue of &amp;ldquo;Flow&amp;rdquo;
 (More posts on this same book, here)
This connects with what Dan North said in the Craft Conf about this idea of the &amp;ldquo;I&amp;rsquo;m the only one in the company producing good quality work, the rest are not doing the same&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Demand for TDD and Refactor</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/25/demand-for-tdd-and-refactor/</link>
      <pubDate>Sat, 25 Apr 2015 13:28:20 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/25/demand-for-tdd-and-refactor/</guid>
      <description>When I went to the Jason Gorman&amp;rsquo;s TDD workshop (experience report here), he said something interesting regarding refactor and TDD:
 In job offers / advertisements, TDD is much more in demand than refactor. But the latter is included in the former as an integral part.
Jason Gorman
 I agree with the second thought: you cannot properly do TDD without refactoring, as it is an integral part; also the third phase.</description>
    </item>
    
    <item>
      <title>What legacy code is about</title>
      <link>https://alvarogarcia7.github.io/blog/2015/04/21/what-legacy-code-is-about/</link>
      <pubDate>Tue, 21 Apr 2015 22:09:54 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/04/21/what-legacy-code-is-about/</guid>
      <description>In his book Working effectively with legacy code, Michael Feathers describes:
 [&amp;hellip;] legacy code as code without tests. It is a good working definition, and it points to a solution [&amp;hellip;]
M Feathers, in the preface of Working effectively with legacy code
 I really like this definition. It is objective and measurable. But this is also a downside. Let&amp;rsquo;s take any concurrent code, for example: you can achieve 100% coverage on a single thread and the program could have defects when executed in parallel.</description>
    </item>
    
    <item>
      <title>The purple wire</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/24/the-purple-wire/</link>
      <pubDate>Tue, 24 Feb 2015 20:57:43 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/24/the-purple-wire/</guid>
      <description>A quote from the Mythical Man-Month:
 Chapter 13: The Whole and the Parts
[&amp;hellip;] In System/360 engineering models, one saw occasional strands of purple wire among the routine yellow wires. When a bug was found, two things were done. A quick fix was devised and installed on the system, so testing could proceed. This change was put on in purple wire, so it stuck out like a sore thumb. It was entered in the log.</description>
    </item>
    
    <item>
      <title>A legacy code introduction</title>
      <link>https://alvarogarcia7.github.io/blog/2015/02/21/a-legacy-code-introduction/</link>
      <pubDate>Sat, 21 Feb 2015 20:05:46 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/02/21/a-legacy-code-introduction/</guid>
      <description>This is one of the best legacy code introductions I&amp;rsquo;ve seen:
 The Grand Redesign in the Sky
Eventually the team rebels. They inform management that they cannot continue to develop in this odious code base. They demand a redesign. Management does not want to expend the resources on a whole new redesign of the project, but they cannot deny that productivity is terrible. Eventually they bend to the demands of the developers and authorize the grand redesign in the sky.</description>
    </item>
    
  </channel>
</rss>
