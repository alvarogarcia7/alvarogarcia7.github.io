<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/quote/index.xml</link>
    <description>Recent content on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://alvarogarcia7.github.io/categories/quote/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Search for Value (a quote)</title>
      <link>https://alvarogarcia7.github.io/blog/2017/07/09/search-for-value-quote-chapter-1/</link>
      <pubDate>Sun, 09 Jul 2017 13:00:00 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/07/09/search-for-value-quote-chapter-1/</guid>
      <description>&lt;p&gt;A quote from the book &lt;a href=&#34;https://pragprog.com/book/rjnsd/the-nature-of-software-development&#34; target=&#34;_blank&#34;&gt;The Nature of Software Development&lt;/a&gt; by Ron Jeffries, talking about value (in software) and the building blocks to achieve it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Value. Value, we’ll see, is “what you want.” [&amp;hellip;]&lt;/p&gt;

&lt;p&gt;We’ll tell the story by building up from the bottom of the pyramid, describing how to guide, organize, plan, and build our product, in small slices, with a focus on quality. The value we produce is based on these.&lt;/p&gt;

&lt;p&gt;Guiding. We produce value by creating teams with responsibility for creating value. We make sure they understand what is needed, and understand the time available. We guide them by observing what they actually build.&lt;/p&gt;

&lt;p&gt;Organizing. We organize teams with the ability to get the job done. We organize around features, because features give us the ability to plan and build value most rapidly. We apply good people and help them build their skills.&lt;/p&gt;

&lt;p&gt;Planning. We steer our projects by selecting the features we need, in the order we need them. We produce value in a timely fashion.&lt;/p&gt;

&lt;p&gt;Building. We build up our product feature by feature. This provides frequent delivery of value. We can see how things are progressing early and often.&lt;/p&gt;

&lt;p&gt;Slicing. We slice features down to the smallest possible value-bearing size. We build a capable product as early as possible, and then enhance and grow it as the deadline approaches. We’re always ready to ship.&lt;/p&gt;

&lt;p&gt;Quality. We apply the necessary practices to ensure that our product always has a good design and that it is as nearly defect-free as possible. We’re able to build value continuously, sustainably, indefinitely.&lt;/p&gt;

&lt;p&gt;(p. 5)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in June 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/06/01/self-study-june-2017/</link>
      <pubDate>Thu, 01 Jun 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/06/01/self-study-june-2017/</guid>
      <description>

&lt;h2 id=&#34;so-hey-you-should-stop-using-texts-for-two-factor-authentication&#34;&gt;So Hey You Should Stop Using Texts for Two-Factor Authentication&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.wired.com/2016/06/hey-stop-using-texts-two-factor-authentication/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining why messages over SMS should not be used for the &amp;lsquo;what you own&amp;rsquo; in 2FA.&lt;/p&gt;

&lt;p&gt;Tags: andy-greenberg, 2fa, sms, security, warning&lt;/p&gt;

&lt;h2 id=&#34;why-i-d-never-work-for-google-twitter-or-facebook&#34;&gt;Why I&amp;rsquo;d never work for Google, Twitter, or Facebook&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://naildrivin5.com/blog/2011/08/01/why-i-wont-work-for-google-twitter-facebook.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Bryant Copeland on why he would never work for these three companies: he doesn&amp;rsquo;t share the principles and values from these companies.&lt;/p&gt;

&lt;p&gt;Tags: david-copeland, google, twitter, facebook, job-satisfaction, commitment&lt;/p&gt;

&lt;h2 id=&#34;design-thinking-needs-to-think-bigger&#34;&gt;Design Thinking Needs To Think Bigger&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.fastcodesign.com/90112320/design-thinking-needs-to-think-bigger&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by STEVE VASSALLO on systems thinking and design thinking.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What makes a system a system rather than just a collection of parts is that the components are interconnected and interdependent&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: steve-vassallo, design-thinking, system-thinking, mental-model, emergence-point, leverage-point, iceberg-model&lt;/p&gt;

&lt;h2 id=&#34;cobol-is-everywhere-who-will-maintain-it&#34;&gt;COBOL Is Everywhere. Who Will Maintain It?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://thenewstack.io/cobol-everywhere-will-maintain/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Cassel explaining the state of the COBOL systems at some banks and the difficulty of finding young COBOL programmers.&lt;/p&gt;

&lt;p&gt;Tags: david-cassel, cobol, youth, team-management, hiring, bank, java, mainframe, legacy-system&lt;/p&gt;

&lt;h2 id=&#34;you-re-too-busy-you-need-a-shultz-hour&#34;&gt;You’re Too Busy. You Need a ‘Shultz Hour.’&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.nytimes.com/2017/04/18/opinion/youre-too-busy-you-need-a-shultz-hour.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Leonhardt, about the Shultz Hour: time set aside to not be busy, so you can set aside the tactical topics and focus on the strategic topics.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“You waste years by not being able to waste hours.”&lt;/p&gt;

&lt;p&gt;Amos Tversky  (as Michael Lewis describes in his THE UNDOING PROJECT)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: david-leonhardt, busyness, time-management, shultz-hour, connectedness, social-media, quote&lt;/p&gt;

&lt;h1 id=&#34;avoid-these-35-habits-that-lead-to-unmaintainable-code&#34;&gt;Avoid these 35 habits that lead to unmaintainable code&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/avoid-35-habits-lead-unmaintainable-code-christian-maioli-mackeprang&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about habits that make writing software more difficult:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Saying “I’ll fix it later”, and never doing it&lt;/li&gt;
&lt;li&gt;Insisting on a one-liner solution&lt;/li&gt;
&lt;li&gt;Making pointless optimizations&lt;/li&gt;
&lt;li&gt;Convincing yourself that styling issues are not that important&lt;/li&gt;
&lt;li&gt;Sweeping things under the rug&lt;/li&gt;
&lt;li&gt;Using names that don’t add information&lt;/li&gt;
&lt;li&gt;Ignoring proven best practices&lt;/li&gt;
&lt;li&gt;Abandoning plans too early&lt;/li&gt;
&lt;li&gt;Insisting on a plan that has little chance of working&lt;/li&gt;
&lt;li&gt;Working on your own all the time&lt;/li&gt;
&lt;li&gt;Refusing to write bad code&lt;/li&gt;
&lt;li&gt;Blaming others&lt;/li&gt;
&lt;li&gt;Not sharing with your team what you’ve learned&lt;/li&gt;
&lt;li&gt;Being too slow on giving feedback to managers/clients&lt;/li&gt;
&lt;li&gt;Not using Google enough&lt;/li&gt;
&lt;li&gt;Overvaluing your personal style&lt;/li&gt;
&lt;li&gt;Having a personal attachment to your code&lt;/li&gt;
&lt;li&gt;Not knowing how to optimize&lt;/li&gt;
&lt;li&gt;Using the wrong tool for the job&lt;/li&gt;
&lt;li&gt;Not bothering with mastering your tools and IDE&lt;/li&gt;
&lt;li&gt;Ignoring error messages&lt;/li&gt;
&lt;li&gt;Romanticizing your developer toolkit&lt;/li&gt;
&lt;li&gt;Hardcoding values instead of making them configurable&lt;/li&gt;
&lt;li&gt;Reinventing the wheel all the time&lt;/li&gt;
&lt;li&gt;Blindly copy/pasting code&lt;/li&gt;
&lt;li&gt;Not taking the time to learn how things really work&lt;/li&gt;
&lt;li&gt;Having excessive confidence in your own code&lt;/li&gt;
&lt;li&gt;Not thinking about the trade-offs of each design, solution, or library&lt;/li&gt;
&lt;li&gt;Not getting help when you’re stuck&lt;/li&gt;
&lt;li&gt;Writing tests to pass&lt;/li&gt;
&lt;li&gt;Disregarding performance testing for critical cases&lt;/li&gt;
&lt;li&gt;Not checking that your build works&lt;/li&gt;
&lt;li&gt;Pushing large changes late, or leaving after making a large push&lt;/li&gt;
&lt;li&gt;Disowning code you wrote&lt;/li&gt;
&lt;li&gt;Ignoring the nonfunctional requirements&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: christian-maioli-mackeprang, maintanability, code, listicle, habit&lt;/p&gt;

&lt;h2 id=&#34;javascript-a-first-class-language-at-last&#34;&gt;JavaScript — A First-Class Language At Last&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/javascript-first-class-language-atlast-tom-goldenberg&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tom Goldenberg defending javascript, citing sources on why it is a first-class language,
the amount of job offers, and the state of the art in NodeJS.&lt;/p&gt;

&lt;p&gt;Tags: tom-goldenberg, javascript, java, comparison, first-class, language, analysis&lt;/p&gt;

&lt;h2 id=&#34;why-the-8-hour-workday-doesn-t-work&#34;&gt;Why the 8-Hour Workday Doesn&amp;rsquo;t Work&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.linkedin.com/pulse/why-8-hour-workday-doesnt-work-dr-travis-bradberry&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; defending the removal of the 8-hour workday, preferring the division of time in slots.
In the article, 52 minutes of highly focused work then 17 minutes of rest.&lt;/p&gt;

&lt;p&gt;The key idea is the work-rest, no matter how big those slots are.&lt;/p&gt;

&lt;p&gt;Gives tips on how to separate both, some other tips for improving your performance.&lt;/p&gt;

&lt;p&gt;By Travis Bradberry&lt;/p&gt;

&lt;p&gt;Tags: time-management, pomodoro-technique, travis-bradberry, time, workday&lt;/p&gt;

&lt;h2 id=&#34;the-dark-side-of-extreme-productivity-and-how-to-steer-back-toward-the-light-https-medium-freecodecamp-com-the-dark-side-of-extreme-productivity-2a31ff7a4cd2&#34;&gt;&lt;a href=&#34;https://medium.freecodecamp.com/the-dark-side-of-extreme-productivity-2a31ff7a4cd2&#34; target=&#34;_blank&#34;&gt;The dark side of extreme productivity, and how to steer back toward the light&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Beau Carnes on how productivity can have a downside, how it can affect your healthy lifestyle.
Explains effective vs efficient, productivity, silent retreat, prayer or meditation&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The key is not to prioritize what’s on your schedule, but to schedule your priorities&lt;/p&gt;

&lt;p&gt;Stephen Covey&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: beau-carnes, productivity, quote, stephen-covey, sustainable-pace&lt;/p&gt;

&lt;h2 id=&#34;dejé-de-leer&#34;&gt;Dejé de leer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://culto.latercera.com/2017/03/15/deje-de-leer/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Catalina Bu on the tsundoku and how to read more. (In Spanish)&lt;/p&gt;

&lt;p&gt;Tags: catalina-bu, tsundoku, reading, time-management, spanish&lt;/p&gt;

&lt;h2 id=&#34;hacked-in-translation-from-subtitles-to-complete-takeover&#34;&gt;Hacked in Translation – from Subtitles to Complete Takeover&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.checkpoint.com/2017/05/23/hacked-in-translation/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about a vector to getting to user&amp;rsquo;s machines through the video player, using subtitle files.
by Check Point Research Team.&lt;/p&gt;

&lt;p&gt;Tags: check-point-research-team, security, vulnerability, vector, attack, subtitle, video-player&lt;/p&gt;

&lt;h2 id=&#34;8-teamwork-myths-to-tackle-at-your-office&#34;&gt;8 Teamwork Myths To Tackle At Your Office&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.trello.com/8-teamwork-myths-to-tackle-at-your-office&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Leah Ryder on remote work myths.&lt;/p&gt;

&lt;p&gt;Tags: leah-ryder, productivity, myth, remote, remote-work&lt;/p&gt;

&lt;h2 id=&#34;why-i-think-elm-is-the-future-of-front-end-development&#34;&gt;Why I think Elm is the Future of Front End Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@rgoomar/why-i-think-elm-is-the-future-of-front-end-development-21e9b091fa05&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Rishi Goomar comparing reactredux to elm, comparing javascript to elm.&lt;/p&gt;

&lt;p&gt;Tags: rishi-goomar, comparison, elm, javascript, react, redux, javascript-fatigue&lt;/p&gt;

&lt;h2 id=&#34;los-viejos-programadores-nunca-mueren-y-silicon-valley-se-está-dando-cuenta-de-ello&#34;&gt;Los viejos programadores nunca mueren, y Silicon Valley se está dando cuenta de ello&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://m.xataka.com/empresas-y-economia/los-viejos-programadores-nunca-mueren-y-silicon-valley-se-esta-dando-cuenta-de-ello&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Javier Pastor on the age of the programmers in Silicon Valley. In Spanish.&lt;/p&gt;

&lt;p&gt;Tags: spanish, javier-pastor, age, programmer, career-manager, silicon-valley&lt;/p&gt;

&lt;h2 id=&#34;creating-a-tensorflow-powered-ing-api-client&#34;&gt;Creating a TensorFlow-powered ING API client&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@donflopez/cracking-the-ing-api-with-tensorflow-9681ae7dc249&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Francisco López on how he has implemented a small bot to click the virtual keyboard and connect to the bank website.&lt;/p&gt;

&lt;p&gt;Tags: ing-direct, francisco-lopez, bot, opencv, tensorflow, machine-learning, python, banking, open-banking-data&lt;/p&gt;

&lt;h2 id=&#34;be-a-good-mentor-not-a-dickhead&#34;&gt;Be a good mentor, not a dickhead&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Edaqa Mortoray about traits of a mentor. &lt;a href=&#34;https://dev.to/mortoray/be-a-good-mentor-not-a-dickhead&#34; target=&#34;_blank&#34;&gt;https://dev.to/mortoray/be-a-good-mentor-not-a-dickhead&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: edaqa-mortoray, mentor, trait, skill, mentorship, apprentice, apprenticeship&lt;/p&gt;

&lt;h2 id=&#34;the-largest-git-repo-on-the-planet-https-blogs-msdn-microsoft-com-bharry-2017-05-24-the-largest-git-repo-on-the-planet&#34;&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/bharry/2017/05/24/the-largest-git-repo-on-the-planet/&#34; target=&#34;_blank&#34;&gt;The largest Git repo on the planet&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by  Brian Harry on how Microsoft manages one of its big repositories. Explains how they have virtualized the git folder and the git workspace at Microsoft using gvfs. Explains how they have performed the improvements necessary to make it useful and usable to programmers.&lt;/p&gt;

&lt;p&gt;They have support for clients, but what about Linux?&lt;/p&gt;

&lt;p&gt;Tags:  brian-harry, microsoft, continous-delivery, linux, windows, gvfs, repository, monorepo&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 8</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</link>
      <pubDate>Sun, 28 May 2017 16:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/28/senior-software-engineer-chapter-8/</guid>
      <description>

&lt;h1 id=&#34;chapter-8-bootstrap-a-greenfield-system&#34;&gt;Chapter 8: Bootstrap a Greenfield System&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Working on a brand new application can be a lot of fun.
There’s no &amp;ldquo;baggage&amp;rdquo; from legacy code, no technical debt,
and there’s a wonderful feeling of freshness when starting
an app from scratch.&lt;/p&gt;

&lt;p&gt;(p. 101)&lt;/p&gt;

&lt;p&gt;The decisions you make [&amp;hellip;] can have a lasting impact&lt;/p&gt;

&lt;p&gt;(p. 101)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-1-overview&#34;&gt;8.1 Overview&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;When given a greenfield project [&amp;hellip;] you have two main goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure everyone involved in the project feels good about the initial direction and decisions being made&lt;/li&gt;
&lt;li&gt;Establish a location for developers to start contributing code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p. 102)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mention of the iteration Zero, that&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] indicates that no direct business value is going
to be delivered initially&lt;/p&gt;

&lt;p&gt;(p. 102)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-2-understand-the-problem&#34;&gt;8.2 Understand the problem&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You do your company a disservice to build an application you don’t think needs to exist.&lt;/p&gt;

&lt;p&gt;To understand why the application should be built, find answers to these questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What business problems will this application solve?&lt;/li&gt;
&lt;li&gt;Why is the proposed application the best solutiont o those problems?&lt;/li&gt;
&lt;li&gt;What other solutions were considered?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p. 104)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mentioning the importance of asking why about these problems, also, whether this decided solution is good / the best.&lt;/p&gt;

&lt;h3 id=&#34;8-3-understand-the-system-s-place-in-the-technical-architecture&#34;&gt;8.3 Understand the System’s Place in the Technical Architecture&lt;/h3&gt;

&lt;p&gt;Mention of the &amp;lsquo;technical architecture&amp;rsquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;existing applications and existing infrastructure&lt;/p&gt;

&lt;p&gt;(p. 105)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-4-choose-technology&#34;&gt;8.4 Choose Technology&lt;/h3&gt;

&lt;h4 id=&#34;using-the-blessed-stack&#34;&gt;Using the Blessed Stack&lt;/h4&gt;

&lt;p&gt;Be prepared to heavily defend your position if you decide to not use
the blessed stack, both to yourself and others. (paraphrased from p. 107)&lt;/p&gt;

&lt;h3 id=&#34;using-a-different-technology&#34;&gt;Using a Different Technology&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You must answer the question “Why shouldn’t I use the blessed stack?”&lt;/p&gt;

&lt;p&gt;[&amp;hellip;]&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] your first duty is to deliver results.&lt;/p&gt;

&lt;p&gt;(p. 108).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also consider these factors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fitness for purpose&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Developer productivity&lt;/li&gt;
&lt;li&gt;Developer happiness - also called developer experience (DX)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(from p. 108)&lt;/p&gt;

&lt;h3 id=&#34;8-5-outline-the-application-s-architecture&#34;&gt;8.5 Outline the Application’s Architecture&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You want your application to ooze consistency&lt;/p&gt;

&lt;p&gt;(p. 111)&lt;/p&gt;

&lt;p&gt;you want to establish a “culture of consistency”&lt;/p&gt;

&lt;p&gt;(p. 113)&lt;/p&gt;

&lt;p&gt;Each developer should be encouraged to establish a convention when
they first face the need to have one.&lt;/p&gt;

&lt;p&gt;(p. 113)&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] considering the political impact [&amp;hellip;] Since it often doesn’t
matter what the decision is, making an unpopular decision can be
little gain for a lot of trouble.&lt;/p&gt;

&lt;p&gt;(p. 114)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;8-7-create-a-minimum-deployable-system&#34;&gt;8.7 Create a Minimum Deployable System&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I like to think of deployment as the physical act of getting the code up in the production environment and launching as the act of allowing users access.&lt;/p&gt;

&lt;p&gt;(p. 118)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The difference between deploying and launching. This can be enforced
with some techniques to block/allow access, such as enabling/disabling
these features or controlling access to said features.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 7</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/24/senior-software-engineer-chapter-7/</link>
      <pubDate>Wed, 24 May 2017 11:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/24/senior-software-engineer-chapter-7/</guid>
      <description>

&lt;h1 id=&#34;chapter-7-make-technical-decisions&#34;&gt;Chapter 7: Make Technical Decisions&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Opinions like this are often indicators of hidden facts that you have yet to identify&lt;/p&gt;

&lt;p&gt;(p. 90)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 6</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-6/</link>
      <pubDate>Tue, 23 May 2017 07:12:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-6/</guid>
      <description>

&lt;h1 id=&#34;chapter-6-play-well-with-others&#34;&gt;Chapter 6: Play Well With Others&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;challenges you’ll face as a programmer is to explain what you do,
or how you’ve done it, to someone who is not a programmer&lt;/p&gt;

&lt;p&gt;Translating your work to non-technical people is a skill that
can be more valuable than any specific technical knowledge you have.
It’s what makes a senior developer in the eyes of others.&lt;/p&gt;

&lt;p&gt;(p 77)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;6-1-empathize-with-your-audience&#34;&gt;6.1 Empathize With Your Audience&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;these &amp;ldquo;interested parties&amp;rdquo; understand the problem more deeply than
you, but lack the technical knowledge, skill, or time to solve it directly.&lt;/p&gt;

&lt;p&gt;(p 78)&lt;/p&gt;

&lt;p&gt;Instead of thinking of them as &amp;ldquo;pointy-haired bosses&amp;rdquo;, think of
them as partners. They understand the problem and you know how
to solve it. This &amp;ldquo;division of labor&amp;rdquo; is why teams can achieve
greater things than any individual.&lt;/p&gt;

&lt;p&gt;(p 79)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;6-2-adapt-and-abstract-information&#34;&gt;6.2 Adapt and Abstract Information&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;We want to adapt our terms to theirs, and we want to abstract
away irrelevant information as much as we can.&lt;/p&gt;

&lt;p&gt;(p 80)&lt;/p&gt;

&lt;p&gt;When communicating with others, you need to learn how to speak
the language.&lt;/p&gt;

&lt;p&gt;(p 80)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some tips:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid technical jargon of your own&lt;/li&gt;
&lt;li&gt;Listen carefully and ask questions&lt;/li&gt;
&lt;li&gt;Don’t &amp;ldquo;talk down&amp;rdquo;&lt;/li&gt;
&lt;li&gt;longer descriptive phrases in place of acronyms or other jargon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p 81)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;need to distill your message to its absolute minimum without giving out
false information.&lt;/p&gt;

&lt;p&gt;(p 82)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a conclusion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Being able to &amp;ldquo;talk the talk&amp;rdquo; with others can make you more effective
and more valuable to your company. Being able to briefly summarize
technical details even more so.&lt;/p&gt;

&lt;p&gt;(p 87)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 5</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-5/</link>
      <pubDate>Tue, 23 May 2017 07:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/23/senior-software-engineer-chapter-5/</guid>
      <description>

&lt;h1 id=&#34;chapter-5-deal-with-technical-debt-and-slop&#34;&gt;Chapter 5: Deal With Technical Debt and Slop&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Seeing legacy as tech debt that has been acquired&lt;/li&gt;
&lt;li&gt;Slop as source for sloppy code&lt;/li&gt;
&lt;li&gt;Chapter about understanding the difference between slop and technical debt.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Many developers, if they are feeling pressured to complete their work, would call this an acceptable compromise, promise to fix it later, and ship it&lt;/p&gt;

&lt;p&gt;(p. 70)&lt;/p&gt;

&lt;p&gt;Technical Debt is [&amp;hellip;] used to explain compromises in implementation that save cost now,
at a larger future cost (just like real debt). [&amp;hellip;] technical debt is code written
under certain assumptions that no longer hold.&lt;/p&gt;

&lt;p&gt;(p. 72)&lt;/p&gt;

&lt;p&gt;Although you’ll likely need to pay it off someday, you might not necessarily have to.&lt;/p&gt;

&lt;p&gt;(p. 73)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Uses a marker (&lt;code&gt;TECHDEBT&lt;/code&gt;) to explain what and why has been introduced. Also
serves to find this debt later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Senior Software Engineer, Chapter 3</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/13/senior-software-engineer-chapter-3/</link>
      <pubDate>Sat, 13 May 2017 13:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/13/senior-software-engineer-chapter-3/</guid>
      <description>

&lt;h1 id=&#34;chapter-3-fix-bugs-efficiently-and-cleanly&#34;&gt;Chapter 3: Fix bugs efficiently and cleanly&lt;/h1&gt;

&lt;p&gt;In the beginning, you will be given tasks that require no in-depth domain knowledge&lt;/p&gt;

&lt;h3 id=&#34;process&#34;&gt;Process&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A process allows you to focus on the right thing at th right time (p. 14)&lt;/p&gt;

&lt;p&gt;It will make your productivity and quality more predictable, which, in turn, will help you estimate and keep more of your promises about your work (paraphrased from p. 14)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;tdd&#34;&gt;TDD&lt;/h3&gt;

&lt;p&gt;Explains some benefits about TDD:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Thinking before coding&lt;/li&gt;
&lt;li&gt;Separating the &amp;lsquo;getting it to work&amp;rsquo; from &amp;lsquo;getting it right&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(p. 15)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The latter can be interpreted as &amp;lsquo;building the thing right&amp;rsquo; vs &amp;lsquo;building the right thing&amp;rsquo;: a red test can be seen as question, a green test as an answer. If the question is defined in business terms, you are building the right thing. When refactoring, you are turning the right thing (no matter how it was built) into the thing right&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] senior software engineers don&amp;rsquo;t ask permission to do their job, they just do it&lt;/p&gt;

&lt;p&gt;(p. 20)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- TODO this will turn into a blog post --&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in May 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/05/01/self-study-in-may-2017/</link>
      <pubDate>Mon, 01 May 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/05/01/self-study-in-may-2017/</guid>
      <description>

&lt;h2 id=&#34;the-real-reason-why-the-spotify-model-is-broken&#34;&gt;The real reason why the Spotify model is broken&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://kernelmag.dailydot.com/issue-sections/staff-editorials/12136/spotify-royalty-payment-model/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sharky Laguana, comparing several royalty models for spotify&lt;/p&gt;

&lt;p&gt;Tags: sharky-laguana, spotify, comparison, royalty&lt;/p&gt;

&lt;h2 id=&#34;day-3-of-7-badass-developer-gets-a-rude-awakening&#34;&gt;[Day 3 of 7] &amp;ldquo;Badass&amp;rdquo; developer gets a RUDE awakening&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this email that John Sonmez sends, about being a programmer vs a language programmer. Some quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Someone who could tear apart complex, confusing puzzles and engineer elegant, reliable solutions&amp;hellip; whether those challenges were software, hardware or &amp;ldquo;wetware.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;In other words, they wanted a professional problem solver who could jump in and deliver what the company needed, to meet THEIR customers&amp;rsquo; demands.&lt;/p&gt;

&lt;p&gt;I started looking for ways that I could add value to my employer outside of the code I wrote.&lt;/p&gt;

&lt;p&gt;I developed my &amp;ldquo;soft skills&amp;rdquo;—my ability to communicate, learn quickly, and pass my knowledge on to others.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: john-sonmez, programmer, language-programmer, quote&lt;/p&gt;

&lt;h2 id=&#34;6-rules-to-live-by-when-you-work-in-an-office-but-have-remote-team-members&#34;&gt;6 Rules To Live By When You Work In An Office But Have Remote Team Members&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.trello.com/6-mistakes-when-you-work-in-office-but-have-remote-team-members&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Lauren Moon about how trello works remotely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Value Individuals Over Infrastructure&lt;/li&gt;
&lt;li&gt;Avoid Impromptu Meetings At Someone’s Desk&lt;/li&gt;
&lt;li&gt;If One Person Is On A Video Call, EVERYONE Is On A Video Call&lt;/li&gt;
&lt;li&gt;Communication Is Asynchronous. Deal With It.&lt;/li&gt;
&lt;li&gt;Socializing Is Not Around A Watercooler&lt;/li&gt;
&lt;li&gt;The Tools You’re Using Matter. A Lot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: remote, remote-work, lauren-moon, listicle, trello, team-management&lt;/p&gt;

&lt;h2 id=&#34;princeton-s-ad-blocking-superweapon-may-put-an-end-to-the-ad-blocking-arms-race&#34;&gt;Princeton’s Ad-Blocking Superweapon May Put an End to the Ad-Blocking Arms Race&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://motherboard.vice.com/en_us/article/princetons-ad-blocking-superweapon-may-put-an-end-to-the-ad-blocking-arms-race&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jason Koebler on the tool a university has written and published, that using computer vision, is able to detect sponsored content in native form.&lt;/p&gt;

&lt;p&gt;Tags: jason-koebler, computer-vision, ad, advertisement, ublock, adblock&lt;/p&gt;

&lt;h2 id=&#34;on-sabbaticals&#34;&gt;On Sabbaticals&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://indecorous.com/sabbaticals/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about sabbaticals by Ian Malpass. In it, he explains why we need sabbaticals, how to take them, and some details about them.&lt;/p&gt;

&lt;p&gt;Some principles:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;If you think you can’t take a sabbatical, you need to take your sabbatical.&lt;/li&gt;
&lt;li&gt;Day-to-day work pushes us to think tactically; sabbaticals push us to think strategically. Both are valuable.&lt;/li&gt;
&lt;li&gt;Do the work to gain confidence that you can be away, and then trust that that the mechanisms you put in place are good.&lt;/li&gt;
&lt;li&gt;Just because your team can function without you, doesn’t mean they want to.&lt;/li&gt;
&lt;li&gt;There is rarely a good time to leave work for an extended period of time - don’t let this stop you.&lt;/li&gt;
&lt;li&gt;Allow room for serendipity, the unexpected, and exploration.&lt;/li&gt;
&lt;li&gt;Plan for your return before you leave, to avoid worry.&lt;/li&gt;
&lt;li&gt;The sabbatical process doesn’t end after six weeks.&lt;/li&gt;
&lt;li&gt;You don’t have to be unhappy or frustrated in your work to go on sabbatical.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: sabbatical, ian-malpass, team-management, career&lt;/p&gt;

&lt;h2 id=&#34;hasta-pronto&#34;&gt;Hasta pronto…&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javiergarzas.com/2016/07/hasta-pronto.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Javier Garzás, where he explains that he&amp;rsquo;ll stop blogging for a while and why&lt;/p&gt;

&lt;p&gt;Tags: javier-garzas, blog, personal&lt;/p&gt;

&lt;h2 id=&#34;the-principles-of-clean-architecture&#34;&gt;The principles of Clean Architecture&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this video about the clean architecture (with a client&amp;rsquo;s lunch and learn initiative). By Uncle Bob (Robert C. Martin)&lt;/p&gt;

&lt;p&gt;A quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the plugin is vulnerable to the plugged-in system, at the source code level&lt;/p&gt;

&lt;p&gt;Separate the detail from the general things&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: clean-architecture, uncle-bob, robert-martin, video, mvp, model-view-presenter, model-view-controller, mvc, quote, plugin&lt;/p&gt;

&lt;h2 id=&#34;the-languages-which-almost-became-css&#34;&gt;The Languages Which Almost Became CSS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://eager.io/blog/the-languages-which-almost-were-css/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Zack Bloom on the origins of CSS and the languages to add representation to HTML pages / markup.&lt;/p&gt;

&lt;p&gt;Describes the origins of these languages (e.g., RPP, PWP, CHSS, PSL, FOSI, DSSSL) and how the acceptance of CSS came to be:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;it was the technology which was easiest for a beginner to pick up which won, rather than those which were most powerful for an expert.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt; Zack Bloom&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: css, html, history, zack-bloom, mosaic, violawww&lt;/p&gt;

&lt;h2 id=&#34;you-re-not-going-to-believe-what-i-m-about-to-tell-you&#34;&gt;You&amp;rsquo;re not going to believe what I&amp;rsquo;m about to tell you&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://theoatmeal.com/comics/believe&#34; target=&#34;_blank&#34;&gt;this comic&lt;/a&gt; by Matthew Inman about how we process information from outside, especially when it conflicts with our beliefs&lt;/p&gt;

&lt;p&gt;Tags: matthew-inman, comic, oatmeal, belief&lt;/p&gt;

&lt;h2 id=&#34;how-to-be-perfectly-unhappy&#34;&gt;How to be perfectly unhappy&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://theoatmeal.com/comics/unhappy&#34; target=&#34;_blank&#34;&gt;this comic&lt;/a&gt; by Matthew Inman about the definition of happiness and how it affects the author&lt;/p&gt;

&lt;p&gt;Tags: matthew-inman, oatmeal, happiness, comic, definition&lt;/p&gt;

&lt;h2 id=&#34;spotify-engineering-culture-part-1&#34;&gt;Spotify Engineering Culture - part 1&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://vimeo.com/85490944&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; about the Spotify engineering culture: team organization, the terms they introduce and some general culture about them.&lt;/p&gt;

&lt;p&gt;Tags: team-management, people, spotify, henrik-kniberg, squad, chapter, guild, tribe&lt;/p&gt;

&lt;h2 id=&#34;speak-like-a-leader&#34;&gt;Speak like a leader&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=bGBamfWasNQ&#34; target=&#34;_blank&#34;&gt;this TEDx Talk&lt;/a&gt; by Simon Lancaster in which he explains the importance of rhetoric in our speech. Explains 6 techniques for achieving better communication:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Three breathless sentences: &amp;ldquo;Mangia Bene, Ridi Spesso, ama molto&amp;rdquo;, &amp;ldquo;Ein Volk, ein Reich, ein Fuhrer&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Three repetitive sentences&lt;/li&gt;
&lt;li&gt;Three balancing statements: if we hear the statements as balanced, we imagine that the underlaying thinking is balanced&lt;/li&gt;
&lt;li&gt;Metaphor&lt;/li&gt;
&lt;li&gt;Exaggeration&lt;/li&gt;
&lt;li&gt;Rhyme&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: simon-lancaster, tedx, ted, quote, speech, leadership, communication&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in April 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/04/01/self-study-in-april-2017/</link>
      <pubDate>Sat, 01 Apr 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/04/01/self-study-in-april-2017/</guid>
      <description>

&lt;!--
## Gerald Weinberg on Bugs, Errors, and Software Quality

I&#39;ve listened to [this interview][bug-error-weinberg] with Gerald Weinberg where he first talks about software quality, defining a fault, failure, a boo-boo, a blunder (below). Then, they move on to the cost of quality, experiences in his project &#39;Mercury&#39; (a man in orbit; his contribution was on the software side). Says it&#39;s one of his first projects where a person&#39;s life was directly related to a piece of software.

Fault: wrong operation in code
Failure: user&#39;s experience caused by a fault
Boo-boo: a one-off, small failure. Usually shrugged as a small defect
Blunder: a one-off, big failure. Can kill a career

About the cost of software, he mentions that many managers are not willing to pay the price of almost defect-free software and that this level of quality is not required in every project. This idea is similar to the one &#39;Testing every part is akin to reading every letter on the newspaper: one parts are more important than other&#39;.

This interview talks about similar topics than &#39;Why programs fail&#39;, especially about the definition.

At the end of the interview, he talks about team-based software development (~XP) and an anecdote about a company he was consulting with: follow the process or pay the defects out of your own pocket. One of them, accepted paying for defects, until he made a big mistake. Accepted training the rest of the employees into his very precise methods and became very valuable to the company.

Tags: podcast, gerald-weinberg, quality, interview, manager, software-quality, definition, fault, failure, boo-boo, blunder, project-mercury

TODO missing link

--&gt;

&lt;!--
## Microservice Practitioners with Austin Gunter and Richard Li

I&#39;ve listened to [this podcast][us-practitioners] at Software Engineering Daily with Austin Gunter and Richard Li. In it, they talk about how they have organized the conference &#39;Microservice Practicitioners&#39;: how to find speakers, the vibes of the conference, etc.

Tags: austin-gunter, richard-li, organize-a-conference, conference, microservice, microservice-practitioners, podcast, software-engineering-daily

TODO missing link

--&gt;

&lt;h2 id=&#34;10-myths-about-docker-that-stop-developers-cold&#34;&gt;10 Myths About Docker That Stop Developers Cold&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://dev.to/derickbailey/10-myths-about-docker-that-stop-developers-cold&#34; target=&#34;_blank&#34;&gt;this listicle&lt;/a&gt; of docker myths. By Derick Bailey&lt;/p&gt;

&lt;p&gt;Tags: derick-bailey, docker, myth&lt;/p&gt;

&lt;h2 id=&#34;bored-people-quit&#34;&gt;Bored People Quit&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://randsinrepose.com/archives/bored-people-quit/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Lopp on what are some mechanisms why bored people quit.&lt;/p&gt;

&lt;p&gt;Some interesting quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My gig is the care and feeding of engineers, and their productivity is my productivity. If they all leave, I have exactly no job.&lt;/p&gt;

&lt;p&gt;My job isn’t just building product; I also build people.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: michael-lopp, boredness, team-management, people, career, tech-lead, quote&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On the Make, Buy or Rent decision: Stateful vs Stateless components</title>
      <link>https://alvarogarcia7.github.io/blog/2017/03/16/on-the-make-buy-or-rent-decision-stateful-vs-stateless-components/</link>
      <pubDate>Thu, 16 Mar 2017 07:39:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/03/16/on-the-make-buy-or-rent-decision-stateful-vs-stateless-components/</guid>
      <description>

&lt;p&gt;From the &lt;a href=&#34;http://www.ittoday.info/Articles/Make_Buy_or_Rent.htm&#34; target=&#34;_blank&#34;&gt;Make, Buy or Rent&lt;/a&gt; article:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] [T]he three main system options for organizations seeking to upgrade their systems [are :]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Make&lt;/li&gt;
&lt;li&gt;Buy&lt;/li&gt;
&lt;li&gt;Rent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IT managers have different criteria for deciding which components to assign in each category.&lt;/p&gt;

&lt;h2 id=&#34;another-criteria-for-deciding&#34;&gt;Another criteria for deciding&lt;/h2&gt;

&lt;p&gt;At a client, they have taken the decision to split their core IT systems in to the three options: make, buy, rent.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The business logic to handle the core business is &amp;lsquo;make&amp;rsquo;. These systems are completely stateless&lt;/li&gt;
&lt;li&gt;The persistance (or storage) for the core business is &amp;lsquo;rent&amp;rsquo;. These systems, by definition, are stateful&lt;/li&gt;
&lt;li&gt;Other parts of the system are &amp;lsquo;buy&amp;rsquo;. Not important for this article&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key concept for this separation is moving the responsibility for uptime and complex data management to a provider. The provider can take better care of those procedures and use economies of scale to provide a better service that we could do in-house (&amp;lsquo;make&amp;rsquo;) (e.g., high availability, reliability and SLAs) at the cost of paying a price for that.
This idea simplifies our components (e.g., services), making them stateless. Even if they cache any internal information, it is a &amp;lsquo;Read Through Cache&amp;rsquo;, meaning that in case the data is not available in the cache, the service will transparently fetch it from the underlying storage system.&lt;/p&gt;

&lt;p&gt;This idea for separating components simplifies both development, testing and maintainance, therefore reducing the Total Cost of Ownership (TCO) of our services.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in February 2017</title>
      <link>https://alvarogarcia7.github.io/blog/2017/02/01/self-study-in-february-2017/</link>
      <pubDate>Wed, 01 Feb 2017 11:32:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2017/02/01/self-study-in-february-2017/</guid>
      <description>

&lt;h2 id=&#34;whatsapp-security-vulnerability&#34;&gt;WhatsApp Security Vulnerability&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.schneier.com/blog/archives/2017/01/whatsapp_securi.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Bruce Schneier on a security defect in whatsapp, where an &amp;lsquo;unconfirmed&amp;rsquo; message can be re-encrypted (with a new key) and resent. This is a vector for some attacks.&lt;/p&gt;

&lt;p&gt;Tags: bruce-schneier, security, whatsapp, encryption, attack-vector&lt;/p&gt;

&lt;h2 id=&#34;encrypted-email-service-once-used-by-edward-snowden-relaunches&#34;&gt;Encrypted email service once used by Edward Snowden relaunches&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://theintercept.com/2017/01/20/encrypted-email-service-once-used-by-edward-snowden-to-relaunch/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, by Kim Zetter, on Lavabit restablishing its service. Explains the company&amp;rsquo;s past and the new services they are offering&lt;/p&gt;

&lt;p&gt;Tags: lavabit, kim-zetter, privacy, encryption, email, mail&lt;/p&gt;

&lt;h2 id=&#34;what-happens-when-you-mix-java-with-a-1960-ibm-mainframe&#34;&gt;What Happens When You Mix Java with a 1960 IBM Mainframe&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/happens-use-java-1960-ibm-mainframe/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Cassel about the legacy infrastructure of hardware that the U.S. government agencies have. How old mainframes are still useful to web applications and how these mainframes can communicate with more modern systems, through APIs&lt;/p&gt;

&lt;p&gt;Tags: mainframe, david-cassel, marianne-bellotti, legacy-hardware, legacy-software, legacy-system, legacy, api&lt;/p&gt;

&lt;h2 id=&#34;systems-we-love-how-the-past-informs-our-present&#34;&gt;Systems We Love: How the Past Informs Our Present&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thenewstack.io/systems-we-love/&#34; target=&#34;_blank&#34;&gt;this experience report&lt;/a&gt; by David Cassel about the conference &amp;ldquo;Systems we love&amp;rdquo;: a mix of papers we love and systems that happened at San Francisco in December 2016&lt;/p&gt;

&lt;p&gt;Tags: david-cassel, systems-we-love, papers-we-love, system, conference, experience-report, joyent&lt;/p&gt;

&lt;h2 id=&#34;the-agonizing-death-of-an-astronaut&#34;&gt;The agonizing death of an astronaut&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.javaslang.io/the-agonizing-death-of-an-astronaut/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Daniel Dietrich on why the implementation of the &lt;code&gt;Option&lt;/code&gt; in Javaslang seems to be broken but, in fact, follows the rules of the monads.&lt;/p&gt;

&lt;p&gt;Explains why &lt;code&gt;map&lt;/code&gt; should be used for non-changing contexts and &lt;code&gt;flatmap&lt;/code&gt; should be used for changing it.&lt;/p&gt;

&lt;p&gt;Tags: daniel-dietrich, monad, option, haskell, optional, maybe, scala, javaslang&lt;/p&gt;

&lt;h2 id=&#34;we-reverse-engineered-16k-apps-here-s-what-we-found&#34;&gt;We reverse engineered 16k apps, here’s what we found&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hackernoon.com/we-reverse-engineered-16k-apps-heres-what-we-found-51bdf3b456bb&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Fallible team, in which they describe the analysis of apps. They discovered 2500 apps with key and secret on them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] whenever you hardcode any API key/token in the app, think hard if you really need to hardcode this, understand the API usage and the read/write scope of the tokens before putting it in the apps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: analysis, security, app, key, token, api, fallible&lt;/p&gt;

&lt;h2 id=&#34;oh-the-emails-you-ll-get&#34;&gt;Oh, the emails you’ll get&amp;hellip;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.joelonsoftware.com/2006/11/09/oh-the-emails-youll-get/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joel Spolsky, in which he explains how some companies focus on some metrics for measuring performance, how difficult it is to measure performance.&lt;/p&gt;

&lt;p&gt;Tags: joel-spolsky, performance, management, consulting&lt;/p&gt;

&lt;h2 id=&#34;2002-07-15-measurement&#34;&gt;2002/07/15 - Measurement&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.joelonsoftware.com/2002/07/15/20020715/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joel Spolsky where he explains how measuring performance is difficult, according to  Robert D. Austin in his book Measuring and Managing Performance in Organizations. He gives some examples of that, mainly about paying out bonuses for performance reasons.&lt;/p&gt;

&lt;p&gt;Tags: joel-spolsky, robert-austin, measuring-performance, managing-performance, book, knowledge-worker, bonus, pay, performance, organization&lt;/p&gt;

&lt;h2 id=&#34;the-purpose-of-life-is-not-happiness-it-s-usefulness&#34;&gt;The Purpose Of Life Is Not Happiness: It’s Usefulness&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://dariusforoux.com/happiness-usefulness/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Darius Foroux on what the purpose of life is about: making a difference (even if small) in what you leave behind.&lt;/p&gt;

&lt;p&gt;Tags: psychology, purpose-of-life, usefulness, happiness, darius-foroux&lt;/p&gt;

&lt;h2 id=&#34;the-future-of-user-interfaces&#34;&gt;The Future of User Interfaces&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://brandur.org/interfaces&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brandur on how interfaces are becoming more and more bloated, slow and ridden with animations. All of that is targeted to the beginner user, rather than the proficient one. He suggests some ideas on finding inspiration from the terminal applications&lt;/p&gt;

&lt;p&gt;Tags: brandur, interface, interface-design, ux, ui&lt;/p&gt;

&lt;h2 id=&#34;my-increasing-frustration-with-clojure&#34;&gt;My Increasing Frustration With Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ashtonkemerling.com/blog/2016/06/11/my-increasing-frustration-with-clojure/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ashton Kemerling on the problems he has found working professionally with Clojure and some possible solutions.&lt;/p&gt;

&lt;p&gt;Tags: clojure, language, ashton-kemerling, functional-programming, problem, frustration&lt;/p&gt;

&lt;h2 id=&#34;java-without-if&#34;&gt;Java Without If&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ashtonkemerling.com/blog/2017/01/26/java-without-if/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ashton Kemerling on how he is using a library called &amp;lsquo;lambda&amp;rsquo;, which brings some of the functional programming features to Java.&lt;/p&gt;

&lt;p&gt;Tags: lambda, library, ashton-kemerling, functional-programming, java, palatable, john-napier&lt;/p&gt;

&lt;h2 id=&#34;top-ten-pull-request-review-mistakes&#34;&gt;Top ten pull request review mistakes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.scottnonnenberg.com/top-ten-pull-request-review-mistakes/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Scott Nonnenberg on the most common mistakes while doing a code review in the context of a pull request.&lt;/p&gt;

&lt;p&gt;Tags: scott-nonnenberg, pull-request, code-review, github, diff, listicle&lt;/p&gt;

&lt;h2 id=&#34;shutting-down-simplicity-itself&#34;&gt;Shutting down Simplicity Itself&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://daviddawson.me/blog/2017/02/04/simplicity-itself-shutdown.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Dawson on why he&amp;rsquo;s shutting down his consultancy company, Simplicity Itself, which was mainly focused on microservices.&lt;/p&gt;

&lt;p&gt;Tags: david-dawson, simplicity-itself, shut-down, company, consulting, post-mortem, postmortem&lt;/p&gt;

&lt;h2 id=&#34;turn-off-your-cellphone&#34;&gt;Turn Off Your Cellphone&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://brandur.org/fragments/turn-off-your-cellphone&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brandur on how to get more done by unplugging the notifications&lt;/p&gt;

&lt;p&gt;Tags: brandur, time-management, interruption, phone, notification&lt;/p&gt;

&lt;h2 id=&#34;the-dark-standup&#34;&gt;The Dark Standup&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://18f.gsa.gov/2017/01/19/the-dark-standup/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Alan Brouilette on the steps they took to reduce the amount of hours worked. It started with a few extra questions during the daily standup:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;What didn’t you do today because you stopped working on time?&lt;/li&gt;
&lt;li&gt;What will the impact be on tomorrow because of it?&lt;/li&gt;
&lt;li&gt;How much more time would you have needed to get everything done today?&lt;/li&gt;
&lt;li&gt;What will you do with those hours tonight instead?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;and what they realized after a two-week experiment:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The costs of context switching are much higher than we realized.&lt;/li&gt;
&lt;li&gt;We were spending a lot of time doing things that were urgent but not important, or that didn’t need to have been urgent at all.&lt;/li&gt;
&lt;li&gt;We needed to be a lot more ruthless about saying “No.”&lt;/li&gt;
&lt;li&gt;Some Operations roles are legitimately shorthanded, some of us just needed to impose a little order.&lt;/li&gt;
&lt;li&gt;FOMO WIP (unnecessary work one takes on because one fears missing something) is a real problem, especially as regards to Slack and meetings.&lt;/li&gt;
&lt;li&gt;We worked better in the time we had to work, knowing it was finite.&lt;/li&gt;
&lt;li&gt;Work-life balance improves both work and life. People literally slept better when limiting after-hours exposure to Slack and email. [&amp;hellip;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: dark-standup, quote, limited-time, overtime, team-management, experiment, question, alan-brouilette&lt;/p&gt;

&lt;h2 id=&#34;what-it-means-to-be-a-remote-first-company&#34;&gt;What it Means to be a Remote-First Company&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.stackoverflow.blog/code-for-a-living/what-it-means-to-be-a-remote-first-company&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by  Alyssa Mazzina on what Stack Overflow does to keep its remote employees happy, how they are a remote-first company and small practicalities like tools, holiday gifts and stipends.&lt;/p&gt;

&lt;p&gt;Tags: alyssa-mazzina, team-management, remote, remote-work, stack-overflow, team&lt;/p&gt;

&lt;h2 id=&#34;google-s-not-so-secret-new-os&#34;&gt;Google’s not-so-secret new OS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://techspecs.blog/blog/2017/2/14/googles-not-so-secret-new-os&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; describing the state of Google&amp;rsquo;s new operating system, Fuchsia or Andromeda (the final name is not final yet).&lt;/p&gt;

&lt;p&gt;Tags: google, os, operating-system, daniel-matte, fuchsia, andromeda&lt;/p&gt;

&lt;h2 id=&#34;four-secrets-of-people-who-finish-their-workweeks-on-thursday&#34;&gt;Four Secrets Of People Who Finish Their Workweeks On Thursday&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.fastcompany.com/3068122/work-smart/four-secrets-of-people-who-finish-their-workweeks-on-thursday&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kat Boogaard that includes four tips to finish your week early:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They Schedule Intentionally&lt;/li&gt;
&lt;li&gt;They Focus On Priorities&lt;/li&gt;
&lt;li&gt;They Tune Out Distractions&lt;/li&gt;
&lt;li&gt;They Find Shortcuts&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tags: kat-boogaard, time-management, eisenhower-productivity-matrix, urgent-vs-important, important-vs-urgent, urgent, important, productivity&lt;/p&gt;

&lt;h2 id=&#34;reflecting-on-one-very-very-strange-year-at-uber&#34;&gt;Reflecting On One Very, Very Strange Year At Uber&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Susan J Fowler on some bad HR practices at Uber and how they are part of the reason their low percentage of women (3%) in the engineering team.&lt;/p&gt;

&lt;p&gt;Tags: sexism, uber, susan-fowler, hr, human-resources, women, work-environment, review&lt;/p&gt;

&lt;h2 id=&#34;ni-dioses-ni-reyes-sólo-el-hombre&#34;&gt;Ni dioses ni reyes. Sólo el hombre.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive1.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=860ccae5e2&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; (in Spanish) by David Bonilla on which he talks about the God Mode and how that is implemented in different applications.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also liked this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Los desarrolladores sólo somos herreros que forjan ceros y unos. Construimos herramientas para satisfacer necesidades de nuestros usuarios, sin que eso nos haga mejores que ellos o nos dé el derecho de supervisar y juzgar sus actos. A la hora de diseñar nuevos sistemas y funcionalidades, lo único que nunca deberíamos olvidar es que no somos dioses ni reyes, sólo hombres.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rough translation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We, developers, we are only blacksmiths of the digital era. We build tools to satisfy our user&amp;rsquo;s need, without that fact making us better than they are or without the right to overview what they do or to judge their acts. When designing new systems and features, the only thing we must never forget is that we are neither gods nor kings, just humans.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;las-tres-erres&#34;&gt;Las tres erres&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article (in Spanish) by David Bonilla in which he explains three necessary factors when considering a job offer:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Referentes: es imposible conocer a toda la plantilla de una empresa, pero si conoces a dos o tres empleados clave, podrás hacerte una idea de cómo será el equipo que te vas a encontrar. La gente prefiere trabajar con compañeros que compartan su ética y valores. Yo conocía a casi toda la plantilla de Comalatech tras haber coincidido con unos y otros en distintos eventos… y aún hay gente que se pregunta para qué sirve ir a conferencias técnicas si en Internet “se puede encontrar todo”.&lt;/li&gt;
&lt;li&gt;Referencias: es complicado, pero en el día a día una persona puede ser completamente diferente a la imagen que proyecta públicamente. Me ha pasado. Por eso es importante contar con referencias, terceras personas –antiguos empleados, clientes o proveedores- con las que haya trabajado. Los españoles no solemos pedirlas, pero para los anglosajones son un requisito imprescindible. En el caso de Comala, conseguí las mejores de la mejor fuente posible.&lt;/li&gt;
&lt;li&gt;Retos: los profesionales trabajamos por dinero, pero a partir de cierto nivel de salario, podemos permitirnos el lujo de elegir un trabajo u otro según otros factores. En mi caso, siempre he priorizado por encima de todo el potencial de aprendizaje y, en ese sentido, Comalatech no tenía rival.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: referent, reference, challenge, david-bonilla, bonilista, change-job, job-offer&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A common misunderstanding about `reduce`</title>
      <link>https://alvarogarcia7.github.io/blog/2016/12/14/a-common-misunderstanding-about-reduce/</link>
      <pubDate>Wed, 14 Dec 2016 18:48:28 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/12/14/a-common-misunderstanding-about-reduce/</guid>
      <description>

&lt;h3 id=&#34;misconception&#34;&gt;Misconception&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve read in several places that &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;/a&gt; reduces an array&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; of values to a single one. The main characteristic of this function is not to reduce to a &amp;lsquo;smaller element&amp;rsquo; / &amp;lsquo;single element&amp;rsquo;, but to have access to the accumulated results and the elements, one by one. Quoting Mozilla Developer Network&amp;rsquo;s (MDN) Javascript reference:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&#34; target=&#34;_blank&#34;&gt;Array.prototype.reduce()&lt;/a&gt; at MDN&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Note: the examples in this article are in Javascript.&lt;/p&gt;

&lt;p&gt;This is a simple example of such function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;reduce&lt;/code&gt; can reduce a collection of elements to a single one. But this is not its defining characteristic. Let&amp;rsquo;s see another example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;accumulator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;accumulator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;accumulator&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: this is a special case, where the elements are not altered by the &lt;code&gt;reduce&lt;/code&gt;. Can be seen as the identity element for &lt;code&gt;reduce&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This same behaviour can be reproduced with a &lt;code&gt;map&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;identity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;identity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An example that requires a &lt;code&gt;reduce&lt;/code&gt; (and not a &lt;code&gt;map&lt;/code&gt;) is &lt;a href=&#34;https://clojuredocs.org/clojure.core/frequencies&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;frequencies&lt;/code&gt;&lt;/a&gt;. This function calculates the frequency of the elements in the collection:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;frequencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;-1&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Why not a &lt;code&gt;map&lt;/code&gt;? Because you need to cumulate the results.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;frequency&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;accumulator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;accumulator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;accumulator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;accumulator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;accumulator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;frequencies&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Identity element: &lt;a href=&#34;https://en.wikipedia.org/wiki/Identity_element&#34; target=&#34;_blank&#34;&gt;https://en.wikipedia.org/wiki/Identity_element&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;In fact, any type in the &lt;code&gt;Foldable&lt;/code&gt; class in Haskell. The &lt;code&gt;reduce&lt;/code&gt; function in Javascript is in the &lt;code&gt;Array&lt;/code&gt; prototype (only). In Clojure, a set, a map, an array, a list can be &lt;code&gt;reduce&lt;/code&gt;d.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Stability terms from &#34;Release it!&#34;, a quote</title>
      <link>https://alvarogarcia7.github.io/blog/2016/06/26/stability-terms-from-release-it-a-quote/</link>
      <pubDate>Sun, 26 Jun 2016 22:19:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/06/26/stability-terms-from-release-it-a-quote/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://pragprog.com/book/mnee/release-it&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Release It!&lt;/strong&gt;&lt;/a&gt;, terms related to stability:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;transaction: is an abstract unit of work processed by the system&lt;/li&gt;
&lt;li&gt;mixed workload: is a combination of different transaction types processed by a system.&lt;/li&gt;
&lt;li&gt;system: the complete, interdependent set of hardware, applications, and services required to process transactions for users&lt;/li&gt;
&lt;li&gt;stability: resilient system keeps processing transactions, even when there are transient impulses, persistent stresses, or component failures disrupting normal processing&lt;/li&gt;
&lt;li&gt;stress (to the system): is a force applied to the system over an extended period.&lt;/li&gt;
&lt;li&gt;impulse: is a rapid shock to the system.&lt;/li&gt;
&lt;li&gt;a material changes shape when stress is applied. This change in shape is called the strain.&lt;/li&gt;
&lt;li&gt;The original trigger and the way the crack spreads to the rest of the system, together with the result of the damage, failure mode.&lt;/li&gt;
&lt;li&gt;crumple zones: areas designed to protect passengers by failing first. called crackstoppers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these are quotes from the book.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The role of a software consultant</title>
      <link>https://alvarogarcia7.github.io/blog/2016/06/10/role-software-consultant/</link>
      <pubDate>Fri, 10 Jun 2016 10:50:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/06/10/role-software-consultant/</guid>
      <description>&lt;p&gt;A quote from &lt;a href=&#34;http://www.reinventingorganizations.com&#34; target=&#34;_blank&#34;&gt;Reinventing Organizations&lt;/a&gt;,
about roles, job descriptions and job titles in Chapter 2.2:
Self-management (structures), page 90:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[In] Teal Organizations [&amp;hellip;] people are not made to fit pre-defined jobs;
 their job emerge from a multitude of roles and responsibilities they pick
 up based on their interests, talents, and the needs of the organization.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frederic Laloux, Reinventing Organizations&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my opinion, this is the role of the software consultant when working with a client:
even if the customer has asked for help in some parts of their activity, a senior-enough
consultant can discover other areas where they can add value, even if that new
work doesn&amp;rsquo;t have much in common with the initial request (this change should
be approved by the people that will be affected).&lt;/p&gt;

&lt;p&gt;This is also a thought that &lt;a href=&#34;https://twitter.com/@mashooq&#34; target=&#34;_blank&#34;&gt;Mash&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/@sandromancuso&#34; target=&#34;_blank&#34;&gt;Sandro&lt;/a&gt; were discussing lately.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unwritten principles for coaching, a quote</title>
      <link>https://alvarogarcia7.github.io/blog/2016/06/10/unwritten-principles-coaching/</link>
      <pubDate>Fri, 10 Jun 2016 10:49:50 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/06/10/unwritten-principles-coaching/</guid>
      <description>&lt;p&gt;A quote from &lt;a href=&#34;http://www.reinventingorganizations.com&#34; target=&#34;_blank&#34;&gt;Reinventing Organizations&lt;/a&gt;,
about a few unwritten principles for coaching, in Chapter 2.2:
Self-management (structures), page 70:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;It’s okay for teams to struggle. From struggle comes learning. And
teams that have gone through difficult moments build resilience
and a deep sense of community. The coach’s role therefore is not
to prevent foreseeable problems, but to support teams in solving
them (and later help them reflect on how they’ve grown in the
process).&lt;/li&gt;
&lt;li&gt;The coach’s role is to let teams make their own choices, even if she
believes she knows a better solution.&lt;/li&gt;
&lt;li&gt;The coach supports the team mostly by asking insightful questions
and mirroring what she sees. She helps teams frame issues and
solutions in light of [the company’s] purpose and its holistic approach
to care.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The starting point is always to look for enthusiasm, strengths, and
existing capabilities within the team. The coach projects trust that
the team has all it takes to solve the problems it faces.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Frederic Laloux, Reinventing Organizations&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>