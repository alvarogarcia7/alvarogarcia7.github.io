<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Video on The long way through Software Craftsmanship</title>
    <link>https://alvarogarcia7.github.io/categories/video/</link>
    <description>Recent content in Video on The long way through Software Craftsmanship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Apr 2016 00:08:19 +0000</lastBuildDate>
    <atom:link href="https://alvarogarcia7.github.io/categories/video/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Self-Study in April 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/04/01/self-study-in-april-2016/</link>
      <pubDate>Fri, 01 Apr 2016 00:08:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/04/01/self-study-in-april-2016/</guid>
      <description>

&lt;h2 id=&#34;deliberate-practice-what-it-is-and-why-you-need-it&#34;&gt;Deliberate Practice: What It Is and Why You Need It&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Corbett Barr on what is deliberate practice and why it is needed to become an expert in a given domain field.&lt;/p&gt;

&lt;p&gt;The four essential components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Motivation&lt;/li&gt;
&lt;li&gt;Tailored (practice)&lt;/li&gt;
&lt;li&gt;Feedback&lt;/li&gt;
&lt;li&gt;Repetion
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: corbett-barr, deliberate-practice, expert, practice, anders-ericsson, talent, professional-development, career&lt;/p&gt;

&lt;h2 id=&#34;10-features-i-wish-java-would-steal-from-the-kotlin-language&#34;&gt;10 Features I Wish Java Would Steal From the Kotlin Language&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jooq.org/2016/03/31/10-features-i-wish-java-would-steal-from-the-kotlin-language/&#34; target=&#34;_blank&#34;&gt;this list of features&lt;/a&gt; that the Kotlin Language has that would be an improvement for the Java language. By Lukas Eder&lt;/p&gt;

&lt;p&gt;Tags: list, lukas-eder, kotlin, java, comparison, language, jooq&lt;/p&gt;

&lt;h2 id=&#34;how-we-built-uber-engineering-s-highest-query-per-second-service-using-go&#34;&gt;How we built Uber engineering&amp;rsquo;s highest query per second service using Go&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://eng.uber.com/go-geofence/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Kai Wei on a microservice they&amp;rsquo;ve built using Go.&lt;/p&gt;

&lt;p&gt;Explains the reasons for choosing that algorithm for geofencing, the performance they&amp;rsquo;re achieving, and the architecture.&lt;/p&gt;

&lt;p&gt;Tags: uber, go, microservice, performance, geofence, geofencing, rps, go-memory-model, kai-wei&lt;/p&gt;

&lt;h2 id=&#34;unwinding-uber-s-most-efficient-service&#34;&gt;Unwinding Uber&amp;rsquo;s Most Efficient Service&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@buckhx/unwinding-uber-s-most-efficient-service-406413c5871d&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Buck Heroux commenting on the decisions of Uber for building the geofencing microservice (above read).&lt;/p&gt;

&lt;p&gt;Explains the different alternatives for algorithms in this problem space and has implemented them in go. Provides a benchmark for comparing those, including a profiling session.&lt;/p&gt;

&lt;p&gt;Tags: s2, quadtree, rtree, brute-force, geofence, geofencing, uber, comment, buck-heroux, go, read-on-read, meta-read&lt;/p&gt;

&lt;h2 id=&#34;lawful-hacking-and-continuing-vulnerabilities&#34;&gt;Lawful Hacking and Continuing Vulnerabilities&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.schneier.com/blog/archives/2016/03/lawful_hacking_.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Bruce Schneier on the stance the FBI is taking in regards to vulnerabilities discovered in Apple&amp;rsquo;s devices.&lt;/p&gt;

&lt;p&gt;Tags: bruce-schneier, apple, security, fbi, vulnerability, exploit, law, hacking&lt;/p&gt;

&lt;h2 id=&#34;a-side-project-helped-jumpstart-my-career-life-learning&#34;&gt;A Side Project Helped Jumpstart My Career — Life Learning&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/life-learning/a-side-project-helped-jumpstart-my-career-7cd6f8e9b07f&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Dave Gerhardt on how making a side project happen affected his life and his skills.&lt;/p&gt;

&lt;p&gt;Some of the reasons for doing it include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It forces you to figure stuff out&lt;/li&gt;
&lt;li&gt;The only way to learn is by doing&lt;/li&gt;
&lt;li&gt;It gets your brain working on something other than your job&lt;/li&gt;
&lt;li&gt;You have to create your own network&lt;/li&gt;
&lt;li&gt;You are the CEO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: long-life-learning, continuous-learning, side-project, dave-gerhardt, drift, professional-development, personal-development, business, career&lt;/p&gt;

&lt;h2 id=&#34;fun-jekyll-tricks&#34;&gt;Fun Jekyll Tricks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.madebymarket.com/blog/dev/fun-jekyll-tricks.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brian Knapp where he explains some tips and tricks of jekyll (in which octopress is based on): speed, deployment, subcategories inside the blog, _data, _includes.&lt;/p&gt;

&lt;p&gt;Tags: brian-knapp, jekyll, octopress, tip-and-trick, improvement, subcategory, meta, automation, deployment&lt;/p&gt;

&lt;h2 id=&#34;la-ola-que-llega&#34;&gt;La ola que llega&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=f8a8ee92cc&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; by David Bonilla, where he explains (in Spanish) the &amp;lsquo;contractor&amp;rsquo; phenomenon arriving to Spain, 2-3 years after being in other countries and the effects that this could have both for workers and companies.&lt;/p&gt;

&lt;p&gt;Tags: bonilista, david-bonilla, contractor&lt;/p&gt;

&lt;h2 id=&#34;10-razones-por-las-que-este-sábado-deberías-ir-a-un-code-retreat&#34;&gt;10 razones por las que este sábado deberías ir a un code retreat&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://francho.org/2015/11/10/10-razones-para-ir-a-un-coderetreat/&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of reasons for attending a code retreat, by Francho Joven, who I met in the Global Day Of Code Retreat (GDCR) &amp;lsquo;15 in Zaragoza&lt;/p&gt;

&lt;p&gt;Tags: francho-joven, list, zaragoza, code-retreat, gdcr&lt;/p&gt;

&lt;h2 id=&#34;meaningful-work-through-passion-not-genius&#34;&gt;Meaningful Work through Passion, not Genius&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=pIYUMwxKFzo&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; on the importance of hard work and how it can be mistaken as genious. By Malcolm Gladwell&lt;/p&gt;

&lt;p&gt;Tags: malcolm-gladwell, passion, genius, work, time-management, productivity, career, mastery-autonomy-purpose&lt;/p&gt;

&lt;h2 id=&#34;how-to-ask-your-wife-for-permission-to-spend-250-000-on-a-domain-name&#34;&gt;How to ask your wife for permission to spend $250,000 on a domain name&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@Stockphoto.com/how-to-ask-your-wife-for-permission-to-spend-250-000-on-a-domain-name-c27a3c2852e1&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jon Yau on how they started StockPhoto.com, buying a $250,000 domain name.&lt;/p&gt;

&lt;p&gt;Tags: startup, domain, stockphoto, jon-yau&lt;/p&gt;

&lt;h2 id=&#34;sorry-developer-bootcamps-i-was-wrong&#34;&gt;Sorry, developer bootcamps: I was wrong&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@dillonforrest/sorry-developer-bootcamps-i-was-wrong-ea37fcc5572c&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Dillon Forrest on the topic of developer bootcamps. Explains why developers should not be threatened by recent graduates of these programs and describes how people pursuing these programs usually are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intelligence&lt;/li&gt;
&lt;li&gt;Risk appetite&lt;/li&gt;
&lt;li&gt;Resilience&lt;/li&gt;
&lt;li&gt;Self-investment&lt;/li&gt;
&lt;li&gt;Entrepreneurship&lt;/li&gt;
&lt;li&gt;Growth trajectory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: bootcamp, developer-bootcamp, dev-bootcamp, dillon-forrest, intelligence, risk-appetite, resilience, self-investment, entrepreneurship, growth-trajectory&lt;/p&gt;

&lt;h2 id=&#34;the-jvm-and-java-garbage-collection&#34;&gt;The JVM and Java Garbage Collection&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=DoJr5QQYsl8&#34; target=&#34;_blank&#34;&gt;this webcast&lt;/a&gt; about how the JVM garbage collection works. By Michael W Williams&lt;/p&gt;

&lt;p&gt;Tags: michael-williams, oracle, webcast, jvm, garbage-collection, gc,&lt;/p&gt;

&lt;h2 id=&#34;files-are-hard&#34;&gt;Files Are Hard&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://danluu.com/file-consistency/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why software that writes on files is difficult, based on the different filesystems that are below, and the operating system. Written by Dan Luu.&lt;/p&gt;

&lt;p&gt;Uses software product to find bugs in filesystems&lt;/p&gt;

&lt;p&gt;Tags: filesystem, file, dan-luu, analysis&lt;/p&gt;

&lt;h2 id=&#34;contrata-a-un-fracasado-con-ilusión-inquebrantable&#34;&gt;Contrata a un fracasado con ilusión inquebrantable&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.contunegocio.es/tecnologia/contrata-a-un-fracasado-con-ilusion-inquebrantable/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Alberto Mena (in Spanish) on what are the qualities that define a good programmer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;humility&lt;/li&gt;
&lt;li&gt;failure&lt;/li&gt;
&lt;li&gt;illusion&lt;/li&gt;
&lt;li&gt;hard work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: alberto-mena, spanish, team-management, success, developer, quality, developer-quality&lt;/p&gt;

&lt;h2 id=&#34;don-t-react&#34;&gt;Don&amp;rsquo;t react&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://journal.avdi.org/2016/04/14/dont-react/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Avdi Grimm on how the action vs reaction attitude. Why to prefer the former.&lt;/p&gt;

&lt;p&gt;Tags: action, reaction, social-media, avdi-grimm, productivity&lt;/p&gt;

&lt;h2 id=&#34;ftp-is-so-90-s-let-s-deploy-via-git-instead&#34;&gt;FTP is so 90&amp;rsquo;s. Let&amp;rsquo;s deploy via Git instead!&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://coderwall.com/p/xczkaq/ftp-is-so-90-s-let-s-deploy-via-git-instead&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; on how to deploy using git. By Kerrick Long&lt;/p&gt;

&lt;p&gt;Tags: kerrick-long, git, deployment, webapp, application, devops&lt;/p&gt;

&lt;h2 id=&#34;job-vs-career-10-key-differences-you-need-to-understand&#34;&gt;Job vs Career: 10 Key Differences You Need To Understand&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.officevibe.com/blog/job-vs-career&#34; target=&#34;_blank&#34;&gt;the infographic and the article&lt;/a&gt; by Jacob Shriar on what differentiates a job from a career&lt;/p&gt;

&lt;p&gt;Tags: jacob-shriar, infographic, job-vs-career, comparison, job, career&lt;/p&gt;

&lt;h2 id=&#34;the-secret-to-employee-motivation&#34;&gt;The Secret To Employee Motivation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.officevibe.com/blog/secret-employee-motivation-infographic&#34; target=&#34;_blank&#34;&gt;the infographic and the article&lt;/a&gt; by Jacob Shriar on what motivates employess: mastery, autonomy and purpose. A direct reference to Dan Pink&amp;rsquo;s &amp;ldquo;The puzzle of motivation&amp;rdquo; TED talk.&lt;/p&gt;

&lt;p&gt;Tags: jacob-shriar, motivation, employee, infographic, mastery, autonomy, purpose&lt;/p&gt;

&lt;h2 id=&#34;the-puzzle-of-motivation&#34;&gt;The puzzle of motivation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.ted.com/talks/dan_pink_on_motivation&#34; target=&#34;_blank&#34;&gt;this TED talk&lt;/a&gt; by Dan Pink on what motivates us: intrinsic vs extrinsic motivation.&lt;/p&gt;

&lt;p&gt;Also about the gap that exists between what science knows and what businesses propose.&lt;/p&gt;

&lt;p&gt;Tags: ted, ted-talk, video, dan-pink, mastery, autonomy, purpose&lt;/p&gt;

&lt;h2 id=&#34;applying-a-ceiling-to-the-bug-count&#34;&gt;Applying a ceiling to the bug count&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://techblog.king.com/applying-a-ceiling-to-the-bug-count/&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt;, written by Susanna Berg, on how King has reduced the amount of bugs in their backlog using an agile technique, measuring and setting a limit.&lt;/p&gt;

&lt;p&gt;Tags: susanna-berg, king, agile, bug, bug-count, defect, defect-count, per-malmen&lt;/p&gt;

&lt;h2 id=&#34;coming-up-in-2016-spring-framework-4-3-5-0&#34;&gt;Coming up in 2016: Spring Framework 4.3 &amp;amp; 5.0&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://spring.io/blog/2015/08/03/coming-up-in-2016-spring-framework-4-3-5-0&#34; target=&#34;_blank&#34;&gt;this announcement&lt;/a&gt; of Spring&amp;rsquo;s new release, 5.0, which will require java 8 and will turn most of the features into the reactive programming paradigm. By Juergen Hoeller.&lt;/p&gt;

&lt;p&gt;Tags: juergen-hoeller, spring, reactive-programming, release, announcement&lt;/p&gt;

&lt;h2 id=&#34;why-offices-are-where-work-goes-to-die&#34;&gt;Why offices are where work goes to die&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://swizec.com/blog/why-offices-are-where-work-goes-to-die/swizec/6695&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Swizec Teller explaining the downsides of working in an office as compared to working remotely.&lt;/p&gt;

&lt;p&gt;Tags: swizec-teller, remote, home-office, office, comparison, time-management&lt;/p&gt;

&lt;h2 id=&#34;the-myth-of-the-passionate-developer&#34;&gt;The Myth of the Passionate Developer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@bm2yogi/the-myth-of-the-passionate-developer-76a41d457304&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Ibarra on what are the implications of being a passionate developer, how it affects your tasks and what are the factors to a job.&lt;/p&gt;

&lt;p&gt;Tags: michael-ibarra, passion, development, job, motivation, myth&lt;/p&gt;

&lt;h2 id=&#34;mossack-fonseca-breach-wordpress-revolution-slider-plugin-possible-cause&#34;&gt;Mossack Fonseca Breach – WordPress Revolution Slider Plugin Possible Cause&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.wordfence.com/blog/2016/04/mossack-fonseca-breach-vulnerable-slider-revolution/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mark Maunder, which describes an hypothesis on how the Mossack Fonseca breach could have happened. Also describes and shows how to breach a Wordpress installation with a vulnerable Revolution Slider plugin.&lt;/p&gt;

&lt;p&gt;Tags: mark-maunder, security, breach, mossack-fonseca-breach, mossack-fonseca, hypothesis, attack, plugin, revolution-slider, wordpress&lt;/p&gt;

&lt;h2 id=&#34;tim-urban-inside-the-mind-of-a-master-procrastinator&#34;&gt;Tim Urban: Inside the mind of a master procrastinator&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.ted.com/talks/tim_urban_inside_the_mind_of_a_master_procrastinator&#34; target=&#34;_blank&#34;&gt;this TED talk&lt;/a&gt; from Tim Urban on how the procrastinator&amp;rsquo;s mind works, exemplified by his own career.&lt;/p&gt;

&lt;p&gt;Tags: procrastinator, procrastination, mind, time-management, tim-urban&lt;/p&gt;

&lt;h2 id=&#34;pep-20-the-zen-of-python&#34;&gt;PEP 20 &amp;ndash; The Zen of Python&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.python.org/dev/peps/pep-0020/&#34; target=&#34;_blank&#34;&gt;the PEP20&lt;/a&gt;, the zen of python, with special attention to this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Explicit is better than implicit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: pep-20, pep, python, zen&lt;/p&gt;

&lt;h2 id=&#34;why-i-switched-from-octopress-2-to-hugo&#34;&gt;Why I switched from Octopress 2 to Hugo&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://conscientiousprogrammer.com/blog/2015/05/31/why-i-switched-from-octopress-2-to-hugo/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Franklin Chen on the change he made on the static site generator (SSG) he used. He considered hakyll, octopress, jekyll, hugo. Was decided between hakyll and hugo for their speed but, finally, decided to use hugo for their bigger community.&lt;/p&gt;

&lt;p&gt;Tags: franklin-chen, comparison, ssg, static-site-generator, hakyll, octopress, jekyll, hugo, change, speed, statically-typed, dynamically-typed, golang, performance&lt;/p&gt;

&lt;h2 id=&#34;why-incremental-regeneration-in-jekyll-3-0-is-such-a-big-deal&#34;&gt;Why incremental regeneration in Jekyll 3.0 is such a big deal&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://idratherbewriting.com/2015/11/04/jekyll-30-released-incremental-regeneration-rocks/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tom Johnson on one of the new features that jekyll 3.0 brings: incremental generation. How this can speed up the generation&lt;/p&gt;

&lt;p&gt;Tags: tom-johnson, incremental-generation, speed, performance, octopress-2, octopress-3, jekyll-3&lt;/p&gt;

&lt;h2 id=&#34;hugo-s3-travis-ci-oh-boy&#34;&gt;Hugo, S3, Travis CI, oh boy!&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://continuousfailure.com/post/s3_blog/&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; by Alan Scherger on how to set up a specific stack for developing and deploying a static site blog.&lt;/p&gt;

&lt;p&gt;Tags: alan-scherger, static-site-generator, ssg, travis, hugo, s3&lt;/p&gt;

&lt;h2 id=&#34;deploy-your-blog-to-github-pages-automatically-using-hugo-and-travis&#34;&gt;Deploy your blog to github pages automatically using Hugo and Travis&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://rcoedo.com/post/hugo-static-site-generator/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Roman Coedo on how to deploy a hugo blog to github pages, using travis.&lt;/p&gt;

&lt;p&gt;Tags: roman-coedo, travis, hugo, github, github-pages, ssg, static-site-generator&lt;/p&gt;

&lt;h2 id=&#34;improve-octopress-with-advanced-tweaks-tips&#34;&gt;Improve Octopress with Advanced Tweaks &amp;amp; Tips&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.narga.net/improve-octopress-advanced-tweaks-tips/&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of tips on how to improve the octopress (2) installation. By Nguyễn Đình Quân.&lt;/p&gt;

&lt;p&gt;Tags: nguyen-dinh-quan, octopress-2, tip, tweak&lt;/p&gt;

&lt;h2 id=&#34;laboratorios&#34;&gt;Laboratorios&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.presionblogosferica.com/2014/11/12/laboratorios/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ángel Medinilla, about laboratories to use a percentage of company time to investigate, innovate, learn and improve.&lt;/p&gt;

&lt;p&gt;Tags: angel-medinilla, team-management, time-management, innovation, strategy, improvement, kaizen, laboratory, craftsmanship, spanish&lt;/p&gt;

&lt;h2 id=&#34;what-refactoring-is-and-what-it-isn-t&#34;&gt;What Refactoring is, and what it isn’t&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://swreflections.blogspot.com/2012/04/what-refactoring-is-and-what-it-isnt.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jim Bird, where he splits some practices into refactoring and not refactoring. Draws the line between these two different activities.&lt;/p&gt;

&lt;p&gt;Also cites scratch refactoring.&lt;/p&gt;

&lt;p&gt;Tags: jim-bird, scratch-refactoring, refactoring, martin-fowler, kent-beck, definition, quote, design&lt;/p&gt;

&lt;h2 id=&#34;pitfalls-of-unlimited-vacations&#34;&gt;Pitfalls of Unlimited Vacations&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://haacked.com/archive/2016/02/18/unlimited-vaction-pitfalls/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Phil Haack on the github, travis and netflix policies about unlimited vacations and the effects they have on the employees.&lt;/p&gt;

&lt;p&gt;Also about minimum vacation periods, (paternity) paid leave.&lt;/p&gt;

&lt;p&gt;Tags: phil-haack, unlimited-vacation, holiday, vacation, team-management, burnout, github, travis, netflix, policy&lt;/p&gt;

&lt;h2 id=&#34;cultura-corporativa&#34;&gt;Cultura Corporativa&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.presionblogosferica.com/2011/02/06/cultura-corporativa/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ángel Medinilla about the corporate culture, and how &amp;ldquo;hanging a highly interchangeable sentence on a wall&amp;rdquo; does not represent it.&lt;/p&gt;

&lt;p&gt;Tags: angel-medinilla, corporate culture, spanish&lt;/p&gt;

&lt;h2 id=&#34;what-it-s-really-like-to-learn-to-code&#34;&gt;What It’s Really Like to Learn to Code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@sandjar/what-it-s-really-like-to-learn-to-code-53f6d9156a32&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains firsthand how it is to learn programming for a novice student,even with a strong financial background and having completed a university degree. By Sandjar Kozubaev&lt;/p&gt;

&lt;p&gt;Tags: sandjar-kozubaev, learning, programming, student, firsthand, coding, story&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in February 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</link>
      <pubDate>Mon, 01 Feb 2016 02:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/02/01/self-study-in-february-2016/</guid>
      <description>

&lt;h2 id=&#34;software-and-all-that-comes-with-it&#34;&gt;Software and all that comes with it&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lanyrd.com/2011/fromthefront/sgfgw/&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about creating software and asking questions to deliver value, by Alberto Brandolini&lt;/p&gt;

&lt;p&gt;Tags: alberto-brandolini, software, slide, team-management, agile&lt;/p&gt;

&lt;h2 id=&#34;driving-your-dba-crazy-in-3-easy-steps&#34;&gt;Driving your DBA crazy in 3 easy steps&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lanyrd.com/2011/ddd-day-it/shzym&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about dealing with the knowledge that is present in the database, not expressed in ubiquitous language and cause of the low bus factor, by Alberto Brandolini&lt;/p&gt;

&lt;p&gt;Analogy between the movie The Shining and a model / entities / aggregates.&lt;/p&gt;

&lt;p&gt;Tags: ddd, model, entity, aggregate, team-management, dba, agile, ubiquitous-language, alberto-brandolini, bus-factor, slide&lt;/p&gt;

&lt;h2 id=&#34;shorter-feedback-is-not-always-bett&#34;&gt;Shorter Feedback is not Always Bett&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://facebook.com/notes/kent-beck/shorter-feedback-is-not-always-bett/1097086386990891&#34; target=&#34;_blank&#34;&gt;this note&lt;/a&gt; from Kent Beck on why shorter feedback loops might not always be better. I.e., why some processes take time to set in and results are not observable until that time.&lt;/p&gt;

&lt;p&gt;Tags:  kent-beck, feedback-loops, open-question, analogy&lt;/p&gt;

&lt;h2 id=&#34;la-regla-del-triple-check-para-ir-a-eventos&#34;&gt;La Regla del Triple Check para ir a eventos&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.bonillaware.com/regla-triple-check-para-ir-a-eventos&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Bonilla about a rule to help you decide attendance to events, in Spanish&lt;/p&gt;

&lt;p&gt;Tags: rule, time-management, david-bonilla, event, spanish, triple-check&lt;/p&gt;

&lt;h2 id=&#34;an-interview-with-charles-wetherell&#34;&gt;An interview with Charles Wetherell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://demin.ws/blog/english/2012/08/25/interview-with-charles-wetherell/&#34; target=&#34;_blank&#34;&gt;this interview&lt;/a&gt; by Alexander Demin about the interviewee&amp;rsquo;s book &amp;ldquo;Etudes for Programmers&amp;rdquo;. In it, they talk about the origin of the études, the author&amp;rsquo;s research interests and activities. Also about the book (written in 1978) and how computer science has changed since then.&lt;/p&gt;

&lt;p&gt;When asked about three things a programmer should know:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some ability to do formal mathematics. The level necessary to understand Hopcroft and Ullman combined with a little graph theory is enough. Discrete mathematics is essential; calculus is only necessary for folks working in special application areas.&lt;/p&gt;

&lt;p&gt;Some ability to write clearly in their native language. Dijkstra said that if a person couldn’t write their own language, they couldn’t write a correct program. (Well, that’s what I hope Dijkstra said!). Writing programs is essentially the same as writing a non-fiction essay. If you can’t make the step-by-step connections clearly in your own language, why would we think you could in C, for example?&lt;/p&gt;

&lt;p&gt;Remember that a program is primarily for communication with humans, not computers. When you write a program, the computer will do whatever you say. You must convince the humans who read the program that what you have asked the computer to do is the correct thing to do. Remember, the computer doesn’t care about correctness.&lt;/p&gt;

&lt;p&gt;The answer to the last question means that programs should always have the form of paragraphs of comments that describe the intention of the program followed by paragraphs of code that implement that intention. All of the formatting should be designed to make readers as able as possible to read the code easily; the compiler doesn’t care. In particular, follow conventions of mathematics and your native language, not those you found in some random language manual. Write the comments first and then write the code, not the other way around. If you don’t know what you want to achieve and why, any code you write is, by definition, incorrect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: charles-wetherell, alexander-demin, interview, book, etude, etudes-for-programmers, practice, ability, skill, list&lt;/p&gt;

&lt;h2 id=&#34;how-to-fix-javascript-maybe&#34;&gt;How to fix Javascript… maybe&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@wob/how-to-fix-javascript-maybe-8857819bfa16&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Drew Hamlett about the lack of style guide for javascript and how this affects the adoption of the language and the sprout of similar libraries.&lt;/p&gt;

&lt;p&gt;Suggests the creation of a standard style guide for javascript.&lt;/p&gt;

&lt;p&gt;Tags: drew-hamlett, javascript, style-guide, analysis&lt;/p&gt;

&lt;h2 id=&#34;isomorphic-javascript-devbeat-master-class&#34;&gt;Isomorphic JavaScript: #DevBeat Master Class&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/spikebrehm/a-28174727&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Spike Brehm on Isomorphic JavaScript and why it&amp;rsquo;s important: initial pageload and speed, reducing effort and duplication, SEO (crawlability).&lt;/p&gt;

&lt;p&gt;Tags: isomorphic-javascript, isomorphism, javascript, seo, crawler, frontend, app, application, fat-client, fat-server, thin-client, thin-server, ria-spike-brehm, slide&lt;/p&gt;

&lt;h2 id=&#34;open-sourcing-our-docker-images&#34;&gt;Open-sourcing our docker images&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.modulus.io/open-sourcing-our-docker-images&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Brandon Cannaday about the Docker images that they have.&lt;/p&gt;

&lt;p&gt;Tags: docker, brandon-annaday, open-ource, image, container, modulus&lt;/p&gt;

&lt;h2 id=&#34;growing-up-in-an-open-source-world&#34;&gt;growing up in an open source world&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://fiveisprime.me/2015/02/18/growing-up-in-open-source/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matt Hernandez where he explains that fixing the style guide can limit your creativity and how the software is written in enterprise and open-source environments.&lt;/p&gt;

&lt;p&gt;Also about how developers grow when exposed to different style guides.&lt;/p&gt;

&lt;p&gt;Tags: style-guide, matt-hernandez, creativity, dreyfus-model, enterprise, open-source, programming&lt;/p&gt;

&lt;h2 id=&#34;hanlon-s-razor-and-working-with-young-engineers&#34;&gt;Hanlon&amp;rsquo;s Razor and working with young engineers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://fiveisprime.me/2013/07/27/young-engineers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matt Hernandez on the importance of understanding (and empathising) towards others&amp;rsquo; positions and worries.&lt;/p&gt;

&lt;p&gt;Cites the Hanlon Razor:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Never attribute to malice that which is adequately explained by ignorance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags:  hanlon-razor, empathy, team-management, ignorance, malice, matt-hernandez&lt;/p&gt;

&lt;h2 id=&#34;intro-to-sails-js&#34;&gt;Intro to sails.js&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://youtu.be/GK-tFvpIR7c&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt;, an introduction to the sails.js framework: a realtime nodejs server for creating REST APIs, inspired by Ruby on Rails.&lt;/p&gt;

&lt;p&gt;Tags: sailsjs, ruby-on-rails, ror, framework, video, introduction, mvc, rest-api, realtime, nodejs,&lt;/p&gt;

&lt;h2 id=&#34;node-js-and-hapi-creating-a-rest-api&#34;&gt;Node.js and hapi - creating a rest api&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.modulus.io/nodejs-and-hapi-create-rest-api&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about creating a REST API using &lt;a href=&#34;http://hapijs.com/&#34; target=&#34;_blank&#34;&gt;Hapi&lt;/a&gt;, a nodejs framework. Written by Matt Hernandez&lt;/p&gt;

&lt;p&gt;Tags: matt-hernandez, rest-api, nodejs, hapi, framework&lt;/p&gt;

&lt;h2 id=&#34;introducing-pokedex-org-a-progressive-webapp-for-pokémon-fans&#34;&gt;Introducing Pokedex.org: a progressive webapp for Pokémon fans&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Nolan Lawson about the challenge of having a 60 fps application on a mobile device, making it offline.&lt;/p&gt;

&lt;p&gt;Uses Angular 2, javascript 7, PouchDB as well as LocalForage for storage. All processing on WebWorkers, except for DOM manipulation.&lt;/p&gt;

&lt;p&gt;Tags: angular-2, javascript-7, angular, javascript, pouchdb, localforage, cloudant, 60fps, mobile, app, offline-first, offline, pokemon, api, nolan-lawson, web-worker, flip-technique, css, progressive, pokedex, svgomg, frontend&lt;/p&gt;

&lt;h2 id=&#34;lambdaconf-2015-how-to-learn-haskell-in-less-than-5-years-chris-allen&#34;&gt;LambdaConf 2015 - How to Learn Haskell in Less Than 5 Years Chris Allen&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=Bg9ccYzMbxc&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Chris Allen on how to learn haskell, what are some common pitfalls while learning it and how learning and teaching (it) are different.&lt;/p&gt;

&lt;p&gt;Talks about his (with a coauthor) book, focused on not reducing the readers that make it to the end and, finally, increasing the amount of haskell users.&lt;/p&gt;

&lt;p&gt;References &lt;a href=&#34;https://yow.eventer.com/yow-2014-1222/stop-treading-water-learning-to-learn-by-edward-kmett-1750&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Kmett.&lt;/p&gt;

&lt;p&gt;Tags: chris-allen, haskell, learning-to-learn, meta-learning, lambda-conf, talk&lt;/p&gt;

&lt;h2 id=&#34;extreme-continuous-delivery-at-unruly&#34;&gt;Extreme Continuous Delivery - at Unruly&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.xpdays.de/2014/downloads/002-extreme-continuous-delivery-at-unruly/cd_javaone.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about how the company Unruly does continuous delivery (CD), maximizing business value, minimizing time to market (TTM). Also describes how they do deployments and how to organize teams.&lt;/p&gt;

&lt;p&gt;References: Extreme Programming Explained (Beck), Continuous Delivery (Humble &amp;amp; Farley)&lt;/p&gt;

&lt;p&gt;Tags: silo, team-management, culture, continuous-delivery, tdd, nagdd, shared-infrastructure, acceptance-testing, module-testing, conway-law, cross-pollination, continuous-investment, slide&lt;/p&gt;

&lt;h2 id=&#34;building-chat-applications-and-robots-for-skype&#34;&gt;Building chat applications and robots for Skype&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://opensourcehacker.com/2013/03/28/building-chat-applications-and-robots-for-skype/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on building robots for skype. By Mikko Ohtamaa&lt;/p&gt;

&lt;p&gt;Tags: skype, robot, bot, mikko-ohtamaa, slack, integration, api&lt;/p&gt;

&lt;h2 id=&#34;why-i-never-wrote-down-our-company-values&#34;&gt;Why I never wrote down our company values&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/swlh/why-i-never-wrote-down-our-company-values-8143520497e8&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mikael Cho on the subject of having company values, preaching or writing them down. Also, what happens when hard times come, regarding your values.&lt;/p&gt;

&lt;p&gt;Tags: mikael-cho, value, company-value, analogy&lt;/p&gt;

&lt;h2 id=&#34;interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-protocol-design&#34;&gt;Interview with Jesper Louis Andersen about Erlang, Haskell, OCaml, Go, Idris, the JVM, software and protocol design &lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this interview (&lt;a href=&#34;https://medium.com/this-is-not-a-monad-tutorial/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-b0de06440fbd&#34; target=&#34;_blank&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;https://medium.com/this-is-not-a-monad-tutorial/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-5628fe591295&#34; target=&#34;_blank&#34;&gt;part 2&lt;/a&gt;) to Jesper Louis Andersen, interviewed by Federico Carrone.&lt;/p&gt;

&lt;p&gt;The first part is about a comparison of languages, what/why he uses them, and protocol design. The second is more about the Erlang language, the BEAM VM, and some experiences.&lt;/p&gt;

&lt;p&gt;Tags: federico-carrone, erlang, interview, jesper-andersen, jesper-louis-andersen, haskell, ocaml, go, idris, the-jvm, protocol-design, software-design, language, functional-programming, protocol, land-of-lisp, northern-war&lt;/p&gt;

&lt;h2 id=&#34;migrating-to-hugo-from-octopress&#34;&gt;Migrating to Hugo From Octopress&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://nathanleclaire.com/blog/2014/12/22/migrating-to-hugo-from-octopress/&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; by Nathan LeClaire on migrating the blog from Octopress to Hugo&lt;/p&gt;

&lt;p&gt;Tags: static-site-generator, hugo, go, octopress, ruby, jekyll, nathan-leclaire, migration, blog, meta&lt;/p&gt;

&lt;h2 id=&#34;dynamic-static-site-generators-strategies&#34;&gt;Dynamic Static Site Generators strategies&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://timnash.co.uk/dynamic-static-site-generators-strategies/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining what are static site generators, and an example with Jekyll. By Tim Nash&lt;/p&gt;

&lt;p&gt;Tags: tim-nash, static-site-generator, jekyll, strategy, explanation, comparison&lt;/p&gt;

&lt;h2 id=&#34;blog-like-a-confused-hacker&#34;&gt;Blog like a confused hacker&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://timnash.co.uk/using-wordpress-static-site-generator/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tim Nash on what tools he recomends for static site generation.&lt;/p&gt;

&lt;p&gt;Tags: tim-nash, static-site-generator, jekyll, hide, strategy, explanation, comparison, sublime, wordpress, amazon-s3, cdn&lt;/p&gt;

&lt;h2 id=&#34;resolving-the-frontend-backend-api-design-conflict&#34;&gt;Resolving the Frontend/Backend API Design Conflict&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://launchany.com/resolving-the-frontendbackend-api-design-conflict/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains the &amp;ldquo;Backend for Frontend&amp;rdquo; (BFF) pattern, for solving the different needs of data depending on each device / client. By James Higginbotham&lt;/p&gt;

&lt;p&gt;Tags: james-higginbotham, bff, pattern, backend-for-frontend, api, soa, microservice, frontend, backend, architecture&lt;/p&gt;

&lt;h2 id=&#34;what-if-we-forget-to-write-the-tests&#34;&gt;What If We Forget To Write The Tests?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=f70f14b644&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on the trust issues related to starting to use a new methodology (TDD in this case) and how to see what impacts it might have in your day to day.&lt;/p&gt;

&lt;p&gt;Tags: j-b-rainsberger, j-brains, rainsberger, tdd, motivation, team-management&lt;/p&gt;

&lt;h2 id=&#34;api-microservices-the-unix-philosophy-and-the-richardson-maturity-model-a-practical-perspective&#34;&gt;API microservices, the Unix philosophy, and the Richardson Maturity Model - a practical perspective&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@chrstphrhrt/microservices-the-unix-philosophy-and-the-richardson-maturity-model-425abed44826&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Chris Hart on why startups and companies alike should be careful when choosing th latest technology and how this applies to microservices.&lt;/p&gt;

&lt;p&gt;Tags: microservice, chris-hart, startup, analysis, company, technical-debt, bounded-context, ddd, rest-api&lt;/p&gt;

&lt;h2 id=&#34;effective-programming&#34;&gt;Effective programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@sebas5384/effective-programming-d7e5bb2f3b80&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sebastian Ferrari on the importance of clean code, systems thinking and functional programming.&lt;/p&gt;

&lt;p&gt;Specifies the important difference between effectiveness and efficiency.&lt;/p&gt;

&lt;p&gt;Links to this talk by &lt;a href=&#34;https://youtu.be/OqEeIG8aPPk&#34; target=&#34;_blank&#34;&gt;Russ Ackoff&lt;/a&gt;. States the difference between &amp;ldquo;the right thing&amp;rdquo; and &amp;ldquo;the thing right&amp;rdquo;, by Drucker.&lt;/p&gt;

&lt;p&gt;Tags: drucker, thing-right, right-thing, sebastian-ferrari, system-thinking, russ-ackoff, video, ted, difference, clean-code, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;learning-how-to-learn&#34;&gt;Learning how to learn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@thejameskyle/learning-how-to-learn-7f04d6f42c1e&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by James Kyle about the &amp;ldquo;how to learn&amp;rdquo; as one important skill for programmers and how having the solution at a few keystrokes limits / handicaps this ability.&lt;/p&gt;

&lt;p&gt;Tags: programmer, learn-to-learn, james-kyle, stack-overflow, skill&lt;/p&gt;

&lt;h2 id=&#34;why-do-some-functional-programmers-criticize-design-patterns-in-oop-languages-as-a-sign-of-language-deficiency-while-monad-is-also-a-design-pattern&#34;&gt;Why do some functional programmers criticize design patterns in OOP languages as a sign of language deficiency, while Monad is also a design pattern?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.quora.com/Why-do-some-functional-programmers-criticize-design-patterns-in-OOP-languages-as-a-sign-of-language-deficiency-while-Monad-is-also-a-design-pattern/answer/Edward-Kmett?srid=hVnO&amp;amp;share=12410d1e&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt; by Edward Kmett comparing the design patterns in OOP to the design patterns in functional languages.&lt;/p&gt;

&lt;p&gt;Tags: functional-language, object-oriented-language, edward-kmett, oop, pattern, monad, interface, quora, answer&lt;/p&gt;

&lt;h2 id=&#34;should-we-even-debate-refactoring-with-stakeholders&#34;&gt;Should We Even Debate Refactoring With Stakeholders?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=80ca60ec48ef77dfaa1f38943&amp;amp;id=215f7f649b&amp;amp;e=4a925444f9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on the power balance between stakeholders and programmers and how it can be inclined to a &amp;lsquo;more trust&amp;rsquo; / &amp;lsquo;less trust&amp;rsquo; by following some actions. The analogy is to a trade you cannot understand, therefore you have to hope that the taken decisions are in your best interest.&lt;/p&gt;

&lt;p&gt;Tags: j-b-rainsberger, j-brains, rainsberger, refactor, business-need, communication, stakeholder&lt;/p&gt;

&lt;h2 id=&#34;the-eternal-struggle-between-business-and-programmers&#34;&gt;The Eternal Struggle Between Business and Programmers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.thecodewhisperer.com/permalink/the-eternal-struggle-between-business-and-programmers&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on the discussion between business (&amp;lsquo;we want more features, now&amp;rsquo;) and the programmers (&amp;lsquo;we want more refactoring, now&amp;rsquo;). Concludes that both players need each other, in a symbiotic fashion, to keep their jobs at the company.&lt;/p&gt;

&lt;p&gt;He suggests that Scrum cannot work without the XP practices and that we need to refactor aggressively after having finished our initial design, to keep the costs down. In fact, agreeing with both parts in this discussion.&lt;/p&gt;

&lt;p&gt;References one of his own videos, at Oredev&amp;rsquo;13, &amp;ldquo;Fundamental Theorem of Agile Software Development&amp;rdquo;, where he describes the relationship between accidental / essential complexity in the cost of a feature, attributing most of it to accidental (&amp;lsquo;we&amp;rsquo;re not good at our jobs&amp;rsquo;) and describing the need for more design / refactor after the initial design.&lt;/p&gt;

&lt;p&gt;Tags: j-b-rainsberger, j-brains, rainsberger, refactor, business-need, design, oredev, talk, agile, xp, scrum, software-development, accidental-complexity, essential-complexity, mythical-man-month&lt;/p&gt;

&lt;h2 id=&#34;turning-code-to-cash-how-to-make-money-as-a-web-developer-and-live-to-tell-the-tale&#34;&gt;Turning code to cash — How to make money as a Web Developer and live to tell the tale.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@kurtrohlandt/turning-code-to-cash-how-to-make-money-as-a-web-developer-and-live-to-tell-the-tale-f5eedc557b3e&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kurt Rohlandt with a list of items to check while dealing with clients as a freelancer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nothing is simple&lt;/li&gt;
&lt;li&gt;Know your skill set — and let your client know it&lt;/li&gt;
&lt;li&gt;Be clear about what they are buying&lt;/li&gt;
&lt;li&gt;Learn to use the best tool for the job&lt;/li&gt;
&lt;li&gt;To your client you’re more than just a developer&lt;/li&gt;
&lt;li&gt;Sign off your jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: freelancer, kurt-rohlandt, list, tip, client&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in January 2016</title>
      <link>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</link>
      <pubDate>Fri, 01 Jan 2016 16:55:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2016/01/01/self-study-in-january-2016/</guid>
      <description>

&lt;h2 id=&#34;test-cases-in-inner-classes-with-junit&#34;&gt;Test cases in inner classes with JUnit&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/8758294/test-cases-in-inner-classes-with-junit&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt; in stackoverflow about nested test runners in JUnit&lt;/p&gt;

&lt;p&gt;Tags: junit, stackoverflow, answer, nested-runner&lt;/p&gt;

&lt;h2 id=&#34;recording-a-great-coding-screencast&#34;&gt;Recording a Great Coding Screencast&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://egghead.io/articles/recording-a-great-coding-screencast&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by John Lindquist where he explains how he sets up the recording environment for egghead.&lt;/p&gt;

&lt;p&gt;Tags: john-lindquist, record, screencast, egghead, code-screencast, record-video, video&lt;/p&gt;

&lt;h2 id=&#34;react-testing-course&#34;&gt;React Testing Course&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://egghead.io/lessons/react-testing-jsx-error-diffs&#34; target=&#34;_blank&#34;&gt;the full course&lt;/a&gt; by Trevor D. Miller on how to test react components and the libraries to make it possible.&lt;/p&gt;

&lt;p&gt;Tags: trevor-miller, online-course, screencast, mooc, react, flux, egghead&lt;/p&gt;

&lt;h2 id=&#34;what-is-functional-programming&#34;&gt;What Is Functional Programming?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jenkster.com/2015/12/what-is-functional-programming.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kris Jenkins where the author describes functional programming from an input &amp;amp; output point of view.&lt;/p&gt;

&lt;p&gt;Describes state of the system (maybe global or local) is input &amp;amp; output of the function&lt;/p&gt;

&lt;p&gt;Produced state changes are called side effects. the author calls the state inputs as &amp;ldquo;side causes&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Side effects and causes are called complexity iceberg, as they are not visible under the water level (surface)&lt;/p&gt;

&lt;p&gt;Also what a pure function is: one with no side causes or side effects; e.g., all its inputs are declared inputs (i.e., parameters) and all outputs are declared outputs (i.e., return value).&lt;/p&gt;

&lt;p&gt;notes on jobbing programmer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.safaribooksonline.com/library/view/becoming-a-better/9781491905562/ch32.html&#34; target=&#34;_blank&#34;&gt;at Becoming a Better Programmer&lt;/a&gt;, by Pete Goodliffe&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://books.google.es/books?id=P-09CgAAQBAJ&amp;amp;pg=PA67&amp;amp;lpg=PA67&amp;amp;dq=%22jobbing+programmer%22&amp;amp;source=bl&amp;amp;ots=U6Gvi9OSda&amp;amp;sig=J4qWDUtnk768SMjAK3yuEeWUv5Y&amp;amp;hl=es&amp;amp;sa=X&amp;amp;ved=0ahUKEwjz58K615DKAhUFVRQKHfyhAZAQ6AEIOTAE#v=onepage&amp;amp;q=%22jobbing%20programmer%22&amp;amp;f=false&#34; target=&#34;_blank&#34;&gt;at Mastering Julia&lt;/a&gt;, by Malcolm Sherrington&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://joshsymonds.com/blog/2013/11/03/what-makes-a-good-programmer-good/&#34; target=&#34;_blank&#34;&gt;at What Makes a Good Programmer Good?&lt;/a&gt; by Josh Symonds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: kris-jenkins, functional-programming, input, output, function, complexity-iceberg, pure-function, impure-function, side-effect, side-cause&lt;/p&gt;

&lt;h2 id=&#34;which-programming-languages-are-functional&#34;&gt;Which Programming Languages Are Functional?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jenkster.com/2015/12/which-programming-languages-are-functional.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kris Jenkins where the author analyses languages, determining whether they are functional or not.&lt;/p&gt;

&lt;p&gt;Describes how functional languages deal with side effects and side causes, and to identify them (was also explained in part one&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;

&lt;!--
    FOOTNOTES are at the beginning
--&gt;

&lt;p&gt;Tags: kris-jenkins, functional-programming, side-effect, side-cause, comparison, haskell, clojure, python, perl, javascript, java, map, reduce, hof, scala, moc&lt;/p&gt;

&lt;h2 id=&#34;argument-from-the-real-world&#34;&gt;Argument from the &amp;ldquo;Real World&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ronjeffries.com/xprog/articles/argument-from-the-real-world/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ron Jeffries that dismantles the &amp;ldquo;real world&amp;rdquo;, as an excuse to use good practices: as in &amp;ldquo;we could use that, but we live in the real world&amp;rdquo;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] our job is to create the “real world” and not to imagine that our present situation is the only situation there is&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is exactly our day to day task, to imagine a real world solution to present problems, maybe involving software in between.&lt;/p&gt;

&lt;p&gt;Can&amp;rsquo;t we do this for product and team management?&lt;/p&gt;

&lt;p&gt;Tags: ron-jeffries, agile, scrum, tdd, bdd, incremental-iterative-development, product-management, team-management&lt;/p&gt;

&lt;h2 id=&#34;self-contained-systems&#34;&gt;Self-Contained Systems&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/rstrangh/self-contained-systems-1&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about a self-contained system (SCS), an architecture choice to split monolithic systems in parts. It includes the use of microservices in the business logic to solve domain specific problems. Written by Roman Stranghöner&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;development, operation and maintenance [&amp;hellip;] by a single team&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: big-bang-release, roman-stranghoner, self-contained-system, scs, microservice, monolith, monolithic-system, architecture&lt;/p&gt;

&lt;h2 id=&#34;what-makes-a-good-programmer-good&#34;&gt;What Makes a Good Programmer Good?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://joshsymonds.com/blog/2013/11/03/what-makes-a-good-programmer-good/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Josh Symonds on the characteristics that differentiate a good programmer from the jobbing programmers, the list of skills to be a good programmer.&lt;/p&gt;

&lt;p&gt;Explains what factors are related and not related to being a good one&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;knowing that most programming problems have already been solved. You have to know where to look for the solution&lt;/li&gt;
&lt;li&gt;not to be afraid to dig deep into problems: detect a problem and be eager to solve it; figure out what is wrong&lt;/li&gt;
&lt;li&gt;go to the source: use the source as a fact, as analysis needs to be based on facts, not beliefs&lt;/li&gt;
&lt;li&gt;just do it: to be driven to act&lt;/li&gt;
&lt;li&gt;instinctively tackle problems head-on, grabbing the bull by the horns instead of waiting for it to be solved automagically; start solving the problem&lt;/li&gt;
&lt;li&gt;excited about grabbing problems, about facing the cutting edge&lt;/li&gt;
&lt;li&gt;taking the time to reflect and understand it before moving one to the next one&lt;/li&gt;
&lt;li&gt;communicate well: succintly and eloquently expressing your thoughts. The author thinks this might be the most important aspect of all.&lt;/li&gt;
&lt;li&gt;to be truly caring about what you do: not just a job, but a hobby, an interest, even a fascination; great programmers are always programming&lt;/li&gt;
&lt;li&gt;thinking of programming of a way to shape the world, not just a money-making activity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: jobbing-programmer, good-programmer, career, career-management, skill, josh-symonds, quote&lt;/p&gt;

&lt;h2 id=&#34;the-best-programming-language-or-how-to-stop-worrying-and-love-the-code&#34;&gt;The Best Programming Language (or How to Stop Worrying and Love the Code)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.fourthbit.com/2014/03/01/the-best-programming-language-or-how-to-stop-worrying-and-love-the-code&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Álvaro Castro-Castilla analysing different programming languages and what to choose each of them.&lt;/p&gt;

&lt;p&gt;Tags: alvaro-castro-castilla, programming-language, language, analysis, comparison&lt;/p&gt;

&lt;h2 id=&#34;tomates-en-el-campo&#34;&gt;Tomates en el campo&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.presionblogosferica.com/2011/02/20/tomates-en-el-campo/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ángel Medinilla, about how to cultivate teams, instead of creating or building them. Talks about the mandatory conditions, necessary factors and how to enable it, not guaranteeing success.&lt;/p&gt;

&lt;p&gt;Tags: angel-medinilla, team-management, spanish, team, analogy&lt;/p&gt;

&lt;h2 id=&#34;default-constructors-in-java&#34;&gt;Default constructors in Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/17068389/default-constructors-in-java&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt; in stackoverflow about extending a java class that has a private constructor.&lt;/p&gt;

&lt;p&gt;Tags: stackoverflow, answer, java, constructor, syntax&lt;/p&gt;

&lt;h2 id=&#34;what-s-so-great-about-reducers&#34;&gt;What&amp;rsquo;s So Great About Reducers?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.guillermowinkler.com/blog/2013/12/01/whats-so-great-about-reducers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Guillermo Winkler explaining reducers, a type of divide and conquer strategy clojure.&lt;/p&gt;

&lt;p&gt;Tags: guillermo-winkler, reducer, clojure, parallelism, concurrency&lt;/p&gt;

&lt;h2 id=&#34;don-t-use-slack&#34;&gt;Don’t use Slack?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/hacker-daily/don-t-use-slack-8e70452f3eed&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Christian Heilmann about the relation between open / closed software and accessibility.&lt;/p&gt;

&lt;p&gt;Tags: slack, christian-heilmann, accessibility, open-source, propietary-software, closed-source&lt;/p&gt;

&lt;h2 id=&#34;towards-an-understanding-of-technical-debt&#34;&gt;Towards an understanding of technical debt&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@kellan/towards-an-understanding-of-technical-debt-ae0f97cc0553&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kellan Elliott-McCrea about some definitions of technical debt and why taking care of it matters for the future.&lt;/p&gt;

&lt;p&gt;Talks about the way of inheriting projects by other teams and the paradox of &amp;ldquo;investing more time to fix the problem than originally invested in coding it.&amp;rdquo; Also about judgement.&lt;/p&gt;

&lt;p&gt;I find it related to the &amp;ldquo;theory building&amp;rdquo; by Naur.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are at least 5 distinct things we mean we say “technical debt”.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Maintenance work: buying breathing room&lt;/li&gt;
&lt;li&gt;Features of the codebase that resist change&lt;/li&gt;
&lt;li&gt;Operability choices that resist change&lt;/li&gt;
&lt;li&gt;Code choices that suck the will to live&lt;/li&gt;
&lt;li&gt;Dependencies that resist upgrading&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: kellan-elliott-mccrea, kellan, technical-debt, list, definition, quote&lt;/p&gt;

&lt;h2 id=&#34;lifetimes-of-cryptographic-hash-functions&#34;&gt;Lifetimes of cryptographic hash functions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://valerieaurora.org/hash.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Valerie Aurora where she explains the lifetimes of cryptographic hash functions up to 2012.&lt;/p&gt;

&lt;p&gt;Tags: hash-function, valerie-aurora&lt;/p&gt;

&lt;h2 id=&#34;collisions-for-hash-functions-md4-md5-haval-128-and-ripemd&#34;&gt;Collisions for Hash Functions - MD4, MD5, HAVAL-128 and RIPEMD&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://eprint.iacr.org/2004/199.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; that explains some collisions found for MD4, MD5, HAVAL-128 and RIPEMD. By Xiaoyun Wang, Dengguo Feng, Xuejia Lai, Hongbo Yu.&lt;/p&gt;

&lt;p&gt;Tags: collision, hash-function, xiaoyun-wang, dengguo-feng, xuejia-lai, hongbo-yu, paper&lt;/p&gt;

&lt;h2 id=&#34;the-future-is-parallel-what-s-a-programmer-to-do&#34;&gt;The future is parallel: What&amp;rsquo;s a programmer to do?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://groups.csail.mit.edu/mac/users/gjs/6.945/readings/MITApril2009Steele.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Guy Steele about the differences in linear vs parallel computing and about the old habits that we still have.&lt;/p&gt;

&lt;p&gt;Some quotes:&lt;/p&gt;

&lt;h3 id=&#34;motivation&#34;&gt;Motivation&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Good sequential code minimizes total number of operations.

&lt;ul&gt;
&lt;li&gt;Clever tricks to reuse previously computed results.&lt;/li&gt;
&lt;li&gt;Good parallel code often performs redundant operations to reduce communication.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Good sequential algorithms minimize space usage.

&lt;ul&gt;
&lt;li&gt;Clever tricks to reuse storage.&lt;/li&gt;
&lt;li&gt;Good parallel code often requires extra space to permit temporal decoupling.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Sequential idioms stress linear problem decomposition.

&lt;ul&gt;
&lt;li&gt;Process one thing at a time and accumulate results.&lt;/li&gt;
&lt;li&gt;Good parallel code usually requires multiway problem decomposition and multiway aggregation of results.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;a-new-mindset&#34;&gt;A New Mindset&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;DO loops are so 1950s! (Literally: Fortran is now 50 years old.)&lt;/li&gt;
&lt;li&gt;So are linear linked lists! (Literally: Lisp is now 50 years old.)&lt;/li&gt;
&lt;li&gt;Java-style iterators are so last millennium!&lt;/li&gt;
&lt;li&gt;Even arrays are suspect!&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;As soon as you say &lt;code&gt;first, SUM = 0&lt;/code&gt; you are hosed. Accumulators are BAD.&lt;/li&gt;
&lt;li&gt;If you say, “process subproblems in order,” you lose.&lt;/li&gt;
&lt;li&gt;The great tricks of the sequential past DON’T WORK.&lt;/li&gt;
&lt;li&gt;The programming idioms that have become second nature to us as everyday tools DON’T WORK.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;the-parallel-future&#34;&gt;The Parallel Future&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;We need new strategies for problem decomposition.&lt;/li&gt;
&lt;li&gt;Data structure design/object relationships&lt;/li&gt;
&lt;li&gt;Algorithmic organization&lt;/li&gt;
&lt;li&gt;Don’t split a problem into “the first” and “the rest.”&lt;/li&gt;
&lt;li&gt;Do split a problem into roughly equal pieces. Then figure out how to combine general subsolutions.&lt;/li&gt;
&lt;li&gt;Often this makes combining the results a bit harder.&lt;/li&gt;
&lt;li&gt;We need programming languages and runtime implementations that support parallel strategies and hybrid sequential/parallel strategies.&lt;/li&gt;
&lt;li&gt;We must learn to manage new space-time tradeoffs&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A program organized according to linear problem decomposition principles can be really hard to parallelize.&lt;/li&gt;
&lt;li&gt;A program organized according to parallel problem decomposition principles is easily run either in parallel or sequentially, according to available resources.&lt;/li&gt;
&lt;li&gt;The new strategy has costs and overheads. They will be reduced over time but will not disappear.&lt;/li&gt;
&lt;li&gt;In a world of parallel computers of wildly varying sizes, this is our only hope for program portability in the future.&lt;/li&gt;
&lt;li&gt;Better language design can encourage better parallel programming.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: representation, computation, catamorphism, list, associativity
commutativity, idempotency, abstract-data-type, slide, operator, mapreduce, mindset, comparison, parallel, guy-steele,  linear-computing, parallel-computing&lt;/p&gt;

&lt;h2 id=&#34;surviving-being-senior-tech-management&#34;&gt;Surviving being senior (tech) management.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@kellan/surviving-being-senior-tech-management-aa6654efd027&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kellan Elliott-McCrea about the basic things to do as management to retain the best performance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;exercise&lt;/li&gt;
&lt;li&gt;someone to talk to&lt;/li&gt;
&lt;li&gt;discuss with peers, in petit commité&lt;/li&gt;
&lt;li&gt;personal mastery project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: kellan-elliott-mccrea, kellan, list, management, tip, exercise, pet-project&lt;/p&gt;

&lt;h2 id=&#34;you-don-t-need-more-free-time&#34;&gt;You Don’t Need More Free Time&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.nytimes.com/2016/01/10/opinion/sunday/you-dont-need-more-free-time.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the quality of life, work-life balance by Cristobal Young on why the time where we have more fun is spent together, in company.&lt;/p&gt;

&lt;p&gt;Tags: cristobal-young, time-management, work-life-balance&lt;/p&gt;

&lt;h2 id=&#34;taking-longer-to-reach-the-top-has-its-benefits&#34;&gt;Taking Longer to Reach the Top Has Its Benefits&lt;/h2&gt;

&lt;p&gt;​I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/2015/12/taking-longer-to-reach-the-top-has-its-benefits&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains how having work life balance and preventing burn out syndrome, aided by a patient career, can help with reaching a higher destination on your career. By Karen Firestone&lt;/p&gt;

&lt;p&gt;Tags: career-management, patience, burnout, burn-out, ceo, karen-firestone, professional-career, improvement&lt;/p&gt;

&lt;h2 id=&#34;all-bugs-lead-to-rome&#34;&gt;All bugs lead to Rome&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@nickbaum/all-bugs-lead-to-rome-505a1205bb9&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains how the author tracks down a bug present in mail communication, just for a handful of client. By Nick Baum&lt;/p&gt;

&lt;p&gt;Tags: track-down, bug, defect, mailgun, rot13, nick-baum&lt;/p&gt;

&lt;h2 id=&#34;design-patterns-coming-full-circle&#34;&gt;Design Patterns — Coming Full Circle&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/swlh/design-patterns-coming-full-circle-d8292e261dc6&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains what a design pattern is, where does it come from, the figure of Christopher Alexander and the architecture design patterns. By Jen Carlile&lt;/p&gt;

&lt;p&gt;Tags: design-pattern, christopher-alexander, jen-carlile, comparison, example, proxy, command, observer&lt;/p&gt;

&lt;h2 id=&#34;react-performance&#34;&gt;React + Performance = ?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://aerotwist.com/blog/react-plus-performance-equals-what/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Paul Lewis comparing the performance and developer experience of react.js and vanilla js.&lt;/p&gt;

&lt;p&gt;Conclusion: under his measurements, react is too slow once the amount of elements is big on mobile devices&lt;/p&gt;

&lt;p&gt;Tags: paul-lewis, comparison, javascript, react, mobile, perfomance, jsperf, js-perf, vanilla-javascript&lt;/p&gt;

&lt;h2 id=&#34;full-speed-then-stop-gracefully&#34;&gt;Full speed, then stop, gracefully&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://sethgodin.typepad.com/seths_blog/2015/12/full-speed-then-stop.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about how to end professional relationships with an employer or a team.&lt;/p&gt;

&lt;p&gt;Makes an analogy to the hockey sport attitude: &amp;ldquo;full speed, then stop&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: seth-godin, professional, employer, team-management, team, analogy&lt;/p&gt;

&lt;h2 id=&#34;por-qué-tendrás-que-facturar-55-000-para-cobrar-una-nómina-de-26-000&#34;&gt;Por qué tendrás que facturar 55.000€ para cobrar una nómina de 26.000€&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive1.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=7e79a27689&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; by David Bonilla on why freelancers need to bill more to clients to achieve the same (economic) results as being hired by a company.&lt;/p&gt;

&lt;p&gt;Tags: david-bonilla, bonilista, freelancer, contractor, employee&lt;/p&gt;

&lt;h2 id=&#34;principles-of-microservices&#34;&gt;Principles Of Microservices&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://vimeo.com/131632250&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Sam Newman on microservices at the NDC 2015 at Oslo&lt;/p&gt;

&lt;p&gt;Describes a microservice as a small, autonomous services that work together, modelled around a business domain&lt;/p&gt;

&lt;p&gt;Microservices can mix technology, persistence stack, idioms, options&lt;/p&gt;

&lt;p&gt;reference to the twelve factors (by heroku).&lt;/p&gt;

&lt;p&gt;At a client:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Design and delivery practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;standard http/rest&lt;/li&gt;
&lt;li&gt;encapsulate legacy&lt;/li&gt;
&lt;li&gt;eliminate integration databases&lt;/li&gt;
&lt;li&gt;consolidate and cleanse data&lt;/li&gt;
&lt;li&gt;published integration model&lt;/li&gt;
&lt;li&gt;small independent devices&lt;/li&gt;
&lt;li&gt;continous deployment&lt;/li&gt;
&lt;li&gt;minimal customization of COTS/SAAS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Architectural principles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reduce inertia&lt;/li&gt;
&lt;li&gt;eliminate accidential complexity&lt;/li&gt;
&lt;li&gt;consistent interfaces and data flows&lt;/li&gt;
&lt;li&gt;no silver bullets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Strategic goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;enable scalable businesses&lt;/li&gt;
&lt;li&gt;support entry into new markets&lt;/li&gt;
&lt;li&gt;support innovation in existing markets&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Principles of microservices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;modelled around a business domain&lt;/li&gt;
&lt;li&gt;culture of automation&lt;/li&gt;
&lt;li&gt;hide implementation details&lt;/li&gt;
&lt;li&gt;decentralise all the things&lt;/li&gt;
&lt;li&gt;deploy independently&lt;/li&gt;
&lt;li&gt;consumer first&lt;/li&gt;
&lt;li&gt;isolate failure&lt;/li&gt;
&lt;li&gt;highly observable&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;p&gt;the business domain changes more slowly. find these boundaries (reference to IDDD)&lt;/p&gt;

&lt;p&gt;bounded contexts is about concepts which are shared and others who are hidden&lt;/p&gt;

&lt;p&gt;consumer driven contracts as a way to express to consumer expectations, written as tests. this is a high-trust pattern (requires it). reduces end to end testing, considerably. Using tools as &lt;a href=&#34;http://github.com/realestate&#34; target=&#34;_blank&#34;&gt;pact&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;parallel change for endpoints (or APIs) for avoiding lock step release (expand contract pattern). high cost to change an API: apply upfront thought to it.&lt;/p&gt;

&lt;p&gt;explains about a case writing a strangler application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;circuit breakers&lt;/li&gt;
&lt;li&gt;one thread pool per application&lt;/li&gt;
&lt;li&gt;bulkhead downstream connections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the book &amp;ldquo;Release It!&amp;rdquo;&lt;/li&gt;
&lt;li&gt;the book &amp;ldquo;Implementing Domain-Driven Design (IDDD)&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;p&gt;correlation ids, parent and child ids
extracting information from logs (e.g., kibana, splunk, new relic)
see how services connect to each other based on logs instead of based on documentation&lt;/p&gt;

&lt;p&gt;Tags: lock-step-release, autonomy, sam-newman, consumer-driven-contract, team, zookeper, etcd, consul, service-discovery, distributed-consensus, talk, ndc, humane-registry, bulkhead-pattern, circuit-breaker&lt;/p&gt;

&lt;h2 id=&#34;the-website-obesity-crisis&#34;&gt;The Website Obesity Crisis&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://idlewords.com/talks/website_obesity.htm&#34; target=&#34;_blank&#34;&gt;this transcription&lt;/a&gt; of &lt;a href=&#34;http://www.webdirections.org/blog/the-website-obesity-crisis/&#34; target=&#34;_blank&#34;&gt;this presentation&lt;/a&gt; about the increase of weight of websites and how this connects with new needs for automation and other services. How the solution is to keep the pages lightweight and open for everybody to use and learn; without invading our privacy. By Maciej Ceglowski&lt;/p&gt;

&lt;p&gt;Tags: obesity, fat-page, slide, transcription, slide-transcription, maciej-ceglowski, simplicity, speed&lt;/p&gt;

&lt;h2 id=&#34;command-line-tools-can-be-235x-faster-than-your-hadoop-cluster&#34;&gt;Command-line tools can be 235x faster than your Hadoop cluster&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://aadrake.com/command-line-tools-can-be-235x-faster-than-your-hadoop-cluster.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how using command-line based (&lt;code&gt;find&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;) can have a better performance as compared to Hadoop for a specific case, which is analyzing 2 million chess games. By Adam Drake&lt;/p&gt;

&lt;p&gt;Tags: adam-drake, chess, comparison, performance, cli-commands, unix, nix, hadoop, awk&lt;/p&gt;

&lt;h2 id=&#34;the-serializable-isolation-level&#34;&gt;The Serializable Isolation Level&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://sqlperformance.com/2014/04/t-sql-queries/the-serializable-isolation-level&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Paul White about the serializable isolation level and how it is implemented in some databases.&lt;/p&gt;

&lt;p&gt;Tags: serializable, isolation level, paul-white, oracle, mssql, database, sql&lt;/p&gt;

&lt;h2 id=&#34;academic-writing-with-markdown-pandoc-and-emacs&#34;&gt;Academic Writing With Markdown, Pandoc and Emacs&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://milinda.svbtle.com/academic-writing-with-markdown-pandoc-and-emacs&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Milinda Pathirage that explains an alternative way of writing LaTeX in a user-friendly manner, writing markdown then converting it to the output format (he provides &lt;a href=&#34;https://gist.github.com/milinda/d9272e67711d324f18ba&#34; target=&#34;_blank&#34;&gt;such a script&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Tags: latex, milinda-pathirage, academia, research, paper, markdown, script&lt;/p&gt;

&lt;h2 id=&#34;rest-ddd-layers-jsf-microservices-sizing-a-umejug-conversation&#34;&gt;Rest, DDD, layers, JSF, microservices sizing a Umejug conversation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;http://www.adam-bien.com/roller/abien/entry/rest_ddd_layers_jsf_a&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Adam Bien on topics related to microservices and architecture. Discusses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What do you think a typical web application should look like? How should it be built?&lt;/li&gt;
&lt;li&gt;When using REST, which level of REST is appropriate when, is HATEOAS something to strive for, how to implement it?&lt;/li&gt;
&lt;li&gt;Which patterns do you recommend, hexagonal architecture, layers, &amp;hellip;?&lt;/li&gt;
&lt;li&gt;What do you think of the DDD strategic and tactical patterns?&lt;/li&gt;
&lt;li&gt;Microservices vs right-sized services, is transactions over several services always a bad idea?&lt;/li&gt;
&lt;li&gt;When use JSF? Is it still useful?&lt;/li&gt;
&lt;li&gt;Entity-Control-Boundary Pattern (ECB) (around &lt;a href=&#34;https://youtu.be/VkcLpRs0i0g?t=995&#34; target=&#34;_blank&#34;&gt;16:37&lt;/a&gt;). &lt;a href=&#34;http://www.cs.sjsu.edu/~pearce/modules/patterns/enterprise/ecb/ecb.htm&#34; target=&#34;_blank&#34;&gt;More info&lt;/a&gt; on the pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: hateoas, rest, microservice, pattern, architecture, umejug, hexagonal-architecture, ddd, adam-bien, ecb-pattern, mvc-pattern&lt;/p&gt;

&lt;h2 id=&#34;how-to-go-remote&#34;&gt;How To Go Remote&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://workdifferent.com/how-to-remote/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Sebastian Kade that explains how to go remote: where the possibility of working anywhere is a luxury, even if it is in an office.&lt;/p&gt;

&lt;p&gt;Explains the case of Automattic, some examples of communication, culture. Suggests using some tools to accomplish this cultural change.&lt;/p&gt;

&lt;p&gt;Tags: remote-work, sebastian-kade, remote, work, asynchronous-communication, communication, automattic, tool, culture, team-management&lt;/p&gt;

&lt;h2 id=&#34;why-your-company-should-have-a-creed&#34;&gt;Why Your Company Should Have a Creed&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ma.tt/2011/09/automattic-creed/&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Matt Mullenweg about the importance of having a company creed (a belief system, ethos), which ideally would be shared by the colleagues. These should be the values that help deciding, when in doubt, so everyone is aligned.&lt;/p&gt;

&lt;p&gt;At Automattic, this is theirs (as of September 19th, 2011):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I will never stop learning. I won’t just work on things that are assigned to me. I know there’s no such thing as a status quo. I will build our business sustainably through passionate and loyal customers. I will never pass up an opportunity to help out a colleague, and I’ll remember the days before I knew everything. I am more motivated by impact than money, and I know that Open Source is one of the most powerful ideas of our generation. I will communicate as much as possible, because it’s the oxygen of a distributed company. I am in a marathon, not a sprint, and no matter how far away the goal is, the only way to get there is by putting one foot in front of another every day. Given time, there is no problem that’s insurmountable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: quote, matt-mullenweg, automattic, creed, ethos, learning, team-management, startup, communication, essay&lt;/p&gt;

&lt;h2 id=&#34;mob-programming-the-unruly-experience&#34;&gt;Mob Programming: The Unruly Experience&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://wirfs-brock.com/blog/2015/06/05/mob-programming/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Rebecca Wirfs-Brock on mob programming and the experience report (+ &lt;a href=&#34;http://www.xp2015.org/wp-content/uploads/2015/06/TH2.3_Wilson.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;) at the company called Unruly.&lt;/p&gt;

&lt;p&gt;She explains what works for them and what does not.&lt;/p&gt;

&lt;p&gt;Also, she makes a difference on complex vs complicated work:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;complex work (where there is the potential for errors) over complicated work (where the solution is known, but is merely time consuming)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Explains some characteristics of learning organizations:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Teams in learning organizations perform ongoing experiments. While they settle on a core set of practices, they also try to build upon them. They keep innovating, improving, and reflecting. And how they work continues to evolve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: learning, learning-organization, xp, rebecca-wirfs-brock, mob-programming, pair-programming, complex-work, complicated-work, experience-report, unruly, team-management, team-building, team-dysfunction, comparison&lt;/p&gt;

&lt;h2 id=&#34;what-you-re-hiding-from-when-you-constantly-check-your-phone&#34;&gt;What You’re Hiding from When You Constantly Check Your Phone&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/2016/01/what-youre-hiding-from-when-you-constantly-check-your-phone&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Charlotte Lieberman where she explains the technology-stress paradox and the fact of replacing one addiction with another, as some addictions are more socially than others.&lt;/p&gt;

&lt;p&gt;Explains that the constant connection to social media allow us to avoid ourselves, and the connection to mindfulness.&lt;/p&gt;

&lt;p&gt;On the paradox:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;technology-stress paradox: we share the desire for greater freedom from our devices, and yet that very freedom itself causes anxiety&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the work-life balance:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;work-life balance [is]  [&amp;hellip;] about noticing those moments in which you really don&amp;rsquo;t want to deal with yourself&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: charlotte-lieberman, paradox, quote, social-media, mindfulness, technology-stress-paradox, stress, addiction, time-management&lt;/p&gt;

&lt;h2 id=&#34;testing-myth-1-writing-tests-slows-you-down&#34;&gt;Testing myth #1: Writing tests slows you down&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://arhohuttunen.fi/testing/testing-myth-1-writing-tests-slows-you-down/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Arho Huttunen on an excuse to not test: there is no time.&lt;/p&gt;

&lt;p&gt;In the article, he explains the false assumptions based on that reason and the gains (short term and long term) from doing it.&lt;/p&gt;

&lt;p&gt;Tags: arho-huttunen, test, excuse&lt;/p&gt;

&lt;h2 id=&#34;becodeweek-by-josé-manuel-beas&#34;&gt;BeCodeWeek by José Manuel Beas&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jmbeas.es/category/becodeweek/&#34; target=&#34;_blank&#34;&gt;this category of posts&lt;/a&gt; by José Manuel Beas about his BeCodeWeek, a desk-surfing experience at BeCode.&lt;/p&gt;

&lt;p&gt;Analyses facts and publishes one entry per day detailing his activities.&lt;/p&gt;

&lt;p&gt;Tags: becodeweek, jmbeas, jose-manuel-beas, desk-surfing, experience, experience-report, analysis&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;code&gt;What Is Functional Programming?&lt;/code&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;many of these fragments are quotes or paraphrased quotes
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in December 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</link>
      <pubDate>Wed, 02 Dec 2015 09:50:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/12/02/self-study-in-december-2015/</guid>
      <description>

&lt;h2 id=&#34;ruby-equality-and-object-comparison&#34;&gt;Ruby Equality And Object Comparison&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.skorks.com/2009/09/ruby-equality-and-object-comparison/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, written by Alan Skorkin, that explains equality comparisons in ruby:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;equal? is reference equality&lt;/li&gt;
&lt;li&gt;== is value equality&lt;/li&gt;
&lt;li&gt;eql? is value and type equality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: ruby, comparison, equality, object, reference, alan-skorkin&lt;/p&gt;

&lt;h2 id=&#34;software-folklore&#34;&gt;Software Folklore&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.thoughtworks.com/insights/blog/software-folklore&#34; target=&#34;_blank&#34;&gt;this PechaKucha&lt;/a&gt; by Chris Ford on what are laws and how they relate to creating software. Also talks on what could be an analogy to software creation (says not science, not engineering)&lt;/p&gt;

&lt;p&gt;Tags: folklore, chris-ford, analogy, computer-science, pechakucha, software-engineering, software-creation, law&lt;/p&gt;

&lt;h2 id=&#34;3-things-java-programmers-can-steal-from-clojure&#34;&gt;3 Things Java Programmers Can Steal from Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.lispcast.com/3-things-java-can-steal-from-clojure&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Normand, where he explains 3 clojure things that can be applied to your day to day java:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Persistent Data Structures&lt;/li&gt;
&lt;li&gt;Software Transactional Memory&lt;/li&gt;
&lt;li&gt;Extensible Data Notation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tags: clojure, java, eric-normand, stm, edn&lt;/p&gt;

&lt;h2 id=&#34;2-features-of-clojure-editors-professionals-won-t-do-without&#34;&gt;2 Features of Clojure Editors Professionals Won&amp;rsquo;t Do Without&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.lispcast.com/clojure-editors&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Normand, where he explains the most necessary features for a clojure editor:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;REPL Integration&lt;/li&gt;
&lt;li&gt;Structural Editing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tags: clojure, java, eric-normand, stm, edn&lt;/p&gt;

&lt;h2 id=&#34;how-to-read-more-books&#34;&gt;How to read more books&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://verraes.net/2012/12/how-to-read-more-books/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Mathias Verraes on tips to read more books:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Negative things to stop doing&lt;/li&gt;
&lt;li&gt;Positive things to start doing&lt;/li&gt;
&lt;li&gt;Habits to form&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: mathias-verraes, reading, book&lt;/p&gt;

&lt;h2 id=&#34;effective-learning-strategies-for-programmers&#34;&gt;Effective Learning Strategies for Programmers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://akaptur.com/blog/2015/10/10/effective-learning-strategies-for-programmers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Allison Kaptur on fixed vs growth mindset and the need for having the latter for being a programmer.&lt;/p&gt;

&lt;p&gt;Especially interesting is the provided example of the confusion in the documentation, that can hinder productivity&lt;/p&gt;

&lt;p&gt;(Note: this entry is also present in this same month)&lt;/p&gt;

&lt;p&gt;Tags: allison-kaptur, fixed-mindset, growth-mindset, research, learning-strategy, recurse-center, carol-dweck, mindset&lt;/p&gt;

&lt;h2 id=&#34;code-a-fully-functional-web-app-in-14-days-challenge-accepted&#34;&gt;Code a fully-functional web app in 14 days… - Challenge Accepted&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@OggimusPrime/code-a-fully-functional-web-app-in-14-days-e247f536772d&#34; target=&#34;_blank&#34;&gt;this experience report&lt;/a&gt; on how Ryan Haase and Benjamin Hoffman built an MVP in 14 days. They describe their stack choices, gotchas and key points.&lt;/p&gt;

&lt;p&gt;Tags: ryan-haase, benjamin-hoffman, mvp, angular, firebase, challenge&lt;/p&gt;

&lt;h2 id=&#34;writing-clear-code-not-clever-code&#34;&gt;Writing-Clear-Code, Not-Clever-Code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve-read &lt;a href=&#34;https://medium.com/@mikesherov/writing-clear-code-not-clever-code-d6b90353a3c5&#34; target=&#34;_blank&#34;&gt;this-article&lt;/a&gt; by-Mike-Sherov-where-he-explains-the-reflection-he-did-since-his-team-members-were-asking-too-much-about-his-code. His-conclusion-was-to-stop-reducing-the-size-of-the-code-to-improve-readability.&lt;/p&gt;

&lt;p&gt;Tags: mike-sherov, clean-code,clear-code, clever-code, reflection, team, code&lt;/p&gt;

&lt;h2 id=&#34;en-vez-de-un-scrum-por-proyecto-mejor-un-scrum-por-equipo&#34;&gt;En vez de “un Scrum por proyecto” mejor un “Scrum por equipo”&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javiergarzas.com/2015/12/alejate-del-concepto-proyecto-si-quieres-usar-bien-scrum-22-adaptar-scrum-segun-cada-proyecto.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; where Javier Garzás explains scrum by teams or by projects and why the former should be preferred (in Spanish).&lt;/p&gt;

&lt;p&gt;Tags:  javier-garzas, scrum, project-management, team, agile&lt;/p&gt;

&lt;h2 id=&#34;application-gateways-an-example-in-clojure&#34;&gt;Application gateways: an example in Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.obliquo.eu/post/134421923177/application-gateways-an-example-in-clojure&#34; target=&#34;_blank&#34;&gt;this example&lt;/a&gt; that Cristobal Garcia prepared for me after asking for it at the local Barcelona Software Craftsmanship community (Many thanks!).&lt;/p&gt;

&lt;p&gt;He describes what an application gateway is, giving an example in clojure. In this case, the application gateway is used to cache and forward/deny requests to another webservice.&lt;/p&gt;

&lt;p&gt;Tags: cristobal-garcia, application-gateway, clojure, example, level-7-firewall, barcelona-software-craftsmanship, scbcn, gift&lt;/p&gt;

&lt;h2 id=&#34;habits-for-effective-refactoring&#34;&gt;Habits For Effective Refactoring&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=THw8t7ePlsc&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Jason Gorman about techniques for effective and sustainable refactoring. Among them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;check the tests, the coverage to make sure that the refactored code has a good safety net&lt;/li&gt;
&lt;li&gt;set a refactoring goal: decide what you want to refactor at this time and when you&amp;rsquo;ll be done&lt;/li&gt;
&lt;li&gt;know your code smells&lt;/li&gt;
&lt;li&gt;only refactor on green&lt;/li&gt;
&lt;li&gt;use automated refactoring steps whenever possible: for the benefits of transactionability and undo are huge and the risk of messing it up decreases&lt;/li&gt;
&lt;li&gt;commit after achieving the refactoring goal: allows to create a checkpoint to revert to&lt;/li&gt;
&lt;li&gt;bottle the code smells for faster/better learning (in the commit message, he uses a hashtag for searching)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: jason-gorman, refactoring, video, technique, refactor, tutorial, code-smell&lt;/p&gt;

&lt;h2 id=&#34;key-to-oeis-org-poster-n-15&#34;&gt;Key to &amp;ldquo;OEIS.org&amp;rdquo; Poster, n. 15&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://oeisf.org/Poster15a_key.pdf&#34; target=&#34;_blank&#34;&gt;the 15th &amp;ldquo;poster and its key&amp;rdquo;&lt;/a&gt; by the OEIS, published by N. J. A. Sloane.&lt;/p&gt;

&lt;p&gt;Tags: sloane, oeis, poster-and-key, neil-sloane&lt;/p&gt;

&lt;h2 id=&#34;the-clojure-style-guide&#34;&gt;The Clojure Style Guide&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/bbatsov/clojure-style-guide&#34; target=&#34;_blank&#34;&gt;this style guide&lt;/a&gt; to clojure, by Bozhidar Batsov&lt;/p&gt;

&lt;p&gt;Tags: bozhidar-batsov, clojure, style-guide&lt;/p&gt;

&lt;h2 id=&#34;marick-s-midje-information&#34;&gt;Marick&amp;rsquo;s Midje information&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marick/Midje/wiki/Writing-your-own-checkers&#34; target=&#34;_blank&#34;&gt;Custom checkers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marick/Midje/wiki/Two-words-you-need-to-know&#34; target=&#34;_blank&#34;&gt;Domain concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marick/Midje/wiki/Top-down-testing&#34; target=&#34;_blank&#34;&gt;Top-down testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marick/Midje/wiki/Nested-checkers&#34; target=&#34;_blank&#34;&gt;Nested checkers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;clusterware-11gr2-setting-up-an-active-passive-failover-configuration&#34;&gt;Clusterware 11gR2 – Setting up an Active/Passive failover configuration&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blogs.oracle.com/xpsoluxdb/entry/clusterware_11gr2_setting_up_an_activepassive_failover_configuration&#34; target=&#34;_blank&#34;&gt;this how-to guide&lt;/a&gt; by Gilles Haro on how to create an Active/Passive failover configuration for Oracle.&lt;/p&gt;

&lt;p&gt;Tags: failover, high-availability, oracle, gilles-haro, active-passive, database&lt;/p&gt;

&lt;h2 id=&#34;old-stuff-that-rocks&#34;&gt;Old stuff that rocks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://wincent.com/blog/old-stuff-that-rocks&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of old technologies that still rock, according to Greg Hurrell.&lt;/p&gt;

&lt;p&gt;Tags: list, old-stuff, greg-hurrell&lt;/p&gt;

&lt;h2 id=&#34;do-not-underestimate-credentials-leaks&#34;&gt;Do not underestimate credentials leaks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/ChALkeR/notes/blob/master/Do-not-underestimate-credentials-leaks.md&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that describes how credentials are usually accidentally leaked and a guide on what to do about it. By Сковорода Никита Андреевич.&lt;/p&gt;

&lt;p&gt;Tags: credential, leak, guide, how-to&lt;/p&gt;

&lt;h2 id=&#34;clojure-for-the-brave-and-true-chapter-8-writing-macros&#34;&gt;Clojure for the brave and true: chapter 8 - Writing Macros&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.braveclojure.com/writing-macros&#34; target=&#34;_blank&#34;&gt;this chapter&lt;/a&gt; from Daniel Higginbotham about macros in clojure. In it, he explains common gotchas (e.g., double execution, variable capture), splicing, quoting and unquoting.&lt;/p&gt;

&lt;p&gt;Tags: daniel-higginbotham, clojure, macro, chapter, quoting, unquoting, splicing&lt;/p&gt;

&lt;h2 id=&#34;the-telescoping-constructor-anti-pattern&#34;&gt;The Telescoping Constructor (Anti)Pattern&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.captaindebug.com/2011/05/telescoping-constructor-antipattern.html#.ViF57eztmkp&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Roger Hughes on the telescoping constructor, with the example in java. The discussion is whether to apply this or not and whether this is a pattern or an anti-pattern&lt;/p&gt;

&lt;p&gt;Tags: roger-hughes, telescoping-constructor, java, pattern, antipattern&lt;/p&gt;

&lt;h2 id=&#34;ruby-for-newbies-testing-with-rspec&#34;&gt;Ruby for Newbies: Testing with Rspec&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://code.tutsplus.com/tutorials/ruby-for-newbies-testing-with-rspec--net-21297&#34; target=&#34;_blank&#34;&gt;this tutorial&lt;/a&gt; on how to make write tests with RSpec in Ruby. Written by Andrew Burgess&lt;/p&gt;

&lt;p&gt;Tags: andrew-burgess, ruby, rspec, test, tutorial&lt;/p&gt;

&lt;h2 id=&#34;ruby-dynamic-method-calling&#34;&gt;Ruby dynamic method calling&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.khd.me/ruby/ruby-dynamic-method-calling/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about dynamically calling methods and a benchmark on three ways of doing it in Ruby:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;call&lt;/li&gt;
&lt;li&gt;send&lt;/li&gt;
&lt;li&gt;eval&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: khell, metaprogramming, comparison, benchmark, ruby, evaluation, dynamic&lt;/p&gt;

&lt;h2 id=&#34;becoming-a-cto&#34;&gt;Becoming a CTO&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article []&lt;a href=&#34;https://medium.com/@juokaz/becoming-a-cto-337dc1a9c6ae&#34; target=&#34;_blank&#34;&gt;becoming-a-cto&lt;/a&gt; by Juozas Kaziukėnas about the profile and the abilities of a CTO. Talks about the limiting factors for being one (e.g., stop programming, attend many meetings) and the type of work you are supposed to do (e.g., face business people, communicate the strategy, make yourself respectable).&lt;/p&gt;

&lt;p&gt;Tags: juozas-kaziukenas, cto, career-change, technology, career, programmer, title, job&lt;/p&gt;

&lt;h2 id=&#34;4-stages-of-team-development&#34;&gt;4 Stages of Team Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?feature=player_embedded&amp;amp;v=7NouiH2ZT8w&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by the Glenn Smith &amp;ldquo;Growth Coach Houston&amp;rdquo; about the four stages of team development: forming, norming, storming, performing and how to get through them.&lt;/p&gt;

&lt;p&gt;Tags: tuckman, forming, norming, storming, performing, glenn-smith, video, team-management, team&lt;/p&gt;

&lt;h2 id=&#34;time-hacking-for-college-students&#34;&gt;Time Hacking for College Students&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://goel.io/time-hacking/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Karan Goel about techniques for finding time for important things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prioritizing&lt;/li&gt;
&lt;li&gt;waking up early&lt;/li&gt;
&lt;li&gt;automate&lt;/li&gt;
&lt;li&gt;keep learning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: karan-goel, time-management, important-vs-urgent, prioritization&lt;/p&gt;

&lt;h2 id=&#34;clojure-at-a-real-estate-portal&#34;&gt;Clojure at a Real Estate Portal&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pitheringabout.com/?p=1069&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jon Pither, where he does a post-mortem analysis of a real-estate project with a fixed deadline (TV ads) with around ten months of development time. They brought in an external company, JUXT, who with 6 seasoned developers were able to finish the project on time and on budget.&lt;/p&gt;

&lt;p&gt;Their stack was:  Ring, Compojure, Bidi, and http-kit for our Clojure web-apps, mixing in Friend and Liberator.&lt;/p&gt;

&lt;p&gt;Tags: ring, compojure, bidi, http-kit, clojure, fixed-deadline, project, success-story, post-mortem, jon-pither&lt;/p&gt;

&lt;h2 id=&#34;musing-on-tdd-impulsive-developers-and-aesthetics&#34;&gt;Musing on TDD, Impulsive Developers and Aesthetics&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article by Jon Pither on why TDD can be harmful sometimes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;limits the amount of lateral thinking&lt;/li&gt;
&lt;li&gt;forces a technology&lt;/li&gt;
&lt;li&gt;limits the solution space given a fixed problem space&lt;/li&gt;
&lt;li&gt;limits creativity and freedom when performing large / aggressive refactorings&lt;/li&gt;
&lt;li&gt;sterile place&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;while he agrees that can be useful sometimes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mostly in OOP&lt;/li&gt;
&lt;li&gt;to keep you on the rails and focused&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: tdd, jon-pither, senior-developer, junior-developer, aesthetics, lateral-thinking&lt;/p&gt;

&lt;h2 id=&#34;fred-george-on-programmer-anarchy&#34;&gt;Fred George On Programmer Anarchy&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.infoq.com/news/2012/02/programmer-anarchy&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Roopesh Shenoy on a talk by Fred George: &amp;ldquo;Programmer Anarchy&amp;rdquo;, where programmers make business decisions based on business metrics set by clients, among other things.&lt;/p&gt;

&lt;p&gt;Tags: roopesh-shenoy, fred-george, programmer-anarchy, analogy, anarchy, business-metric, client, agile, methodology&lt;/p&gt;

&lt;h2 id=&#34;programmer-anarchy&#34;&gt;Programmer Anarchy&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/fredgeorge/programmer-anarchy-chinese&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Fred George about programmer&amp;rsquo;s anarchy. Commented in the article above&lt;/p&gt;

&lt;p&gt;Tags: slide, fred-george, programmer-anarchy, analogy, anarchy, business-metric, client, agile, methodology&lt;/p&gt;

&lt;h2 id=&#34;what-is-programmer-anarchy-and-does-it-have-a-future&#34;&gt;What is Programmer Anarchy and does it have a future?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://martinjeeblog.com/2012/11/20/what-is-programmer-anarchy-and-does-it-have-a-future/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Martin Jee explaining what is programmer anarchy and how it compares to an agile team. Compares the division of labor structure in anarchist and agile teams, using Marxist terms.&lt;/p&gt;

&lt;p&gt;He finishes saying that what is a powerful idea in this methodology is the taking of personal responsibilities by the programmers.&lt;/p&gt;

&lt;p&gt;Tags: fred-george, programmer-anarchy, analogy, anarchy, martin-jee, agile, methodology&lt;/p&gt;

&lt;h2 id=&#34;agile-is-the-new-black&#34;&gt;Agile is the New Black&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/fredgeorge/agile-is-thenewblack&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Fred George where compares xp/agile development in 1999, 2006 and 2011.&lt;/p&gt;

&lt;p&gt;Tags: fred-george, agile, methodology, comparison, slide&lt;/p&gt;

&lt;h2 id=&#34;show-how-don-t-tell-what-a-management-style&#34;&gt;Show How, Don&amp;rsquo;t Tell What - A Management Style&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://2ndscale.com/rtomayko/2012/management-style&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ryan Tomayko about the management style they apply at github:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;instead of telling them what to do, show people how to plan, build, and ship product together.&lt;/p&gt;

&lt;p&gt;I’ve never actually told anyone what to do here. In fact, I vehemently refuse to tell people what to do. Here are just a couple reasons why:&lt;/p&gt;

&lt;p&gt;I don’t scale. If I tell someone what to do and they do it, then what? Do I have to tell them another thing to do? What happens when I have to decide what to do for 20 people?&lt;/p&gt;

&lt;p&gt;Telling people what to do is lazy. Instead, try to convince them with argument. This is how humans interact when there’s no artificial authority structure and it works great. If you can’t convince people through argument then maybe you shouldn’t be doing it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;about managers:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s often cited that GitHub doesn’t have managers. In my opinion, a better way to describe the phenomenon would be to say that everyone at GitHub is a manager&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags: ryan-tomayko, management, management-style, team-management, github&lt;/p&gt;

&lt;h2 id=&#34;clojure-for-the-brave-and-true-chapter-7-clojure-alchemy-reading-evaluation-and-macros&#34;&gt;Clojure for the brave and true: chapter 7 - Clojure Alchemy: Reading, Evaluation, and Macros&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.braveclojure.com/read-and-eval/&#34; target=&#34;_blank&#34;&gt;this chapter&lt;/a&gt; from Daniel Higginbotham about the essential concepts for macros: the reader, the evaluator, their relative order and independence. How to use clojure to extend itself and an example: the thread (&lt;code&gt;-&amp;gt;&lt;/code&gt;) macro&lt;/p&gt;

&lt;p&gt;Tags: daniel-higginbotham, clojure, macro, chapter, reader, evaluator&lt;/p&gt;

&lt;h2 id=&#34;team-bus-factors-how-to-reduce-them-and-how-to-prevent-them&#34;&gt;Team Bus Factors: How to Reduce Them and How to Prevent Them&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://5whys.com/blog/team-bus-factors-how-to-reduce-them-and-how-to-prevent-them.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Roy Osherove on the bus factor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what is it&lt;/li&gt;
&lt;li&gt;how to reduce them&lt;/li&gt;
&lt;li&gt;how to prevent them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also talks about examples of bus-factor people&lt;/p&gt;

&lt;p&gt;Tags: bus-factor, roy-osherove, team-management, prevention, reduction, definition&lt;/p&gt;

&lt;h2 id=&#34;hambre-de-programar&#34;&gt;Hambre de programar&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@xav1uzz/hambre-de-programar-166aeae3b525&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; (in Spanish) by Xavi Gost where he analyses the Barcelona Software Craftsmanship 2015: the events, the relationships and the passion that it has injected to attendees&lt;/p&gt;

&lt;p&gt;Tags: xavi-gost, barcelona-software-craftsmanship, 2015, experience-report, scbcn15&lt;/p&gt;

&lt;h2 id=&#34;software-craftsmanship-barcelona-2015&#34;&gt;Software Craftsmanship Barcelona 2015&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.idealista.com/labs/blog/idealista/software-craftsmanship-barcelona-2015/&#34; target=&#34;_blank&#34;&gt;this analysis&lt;/a&gt; of the Barcelona Software Craftsmanship 2015 by the Idealista R&amp;amp;D team.&lt;/p&gt;

&lt;p&gt;Tags: jaime-perera, barcelona-software-craftsmanship, 2015, idealista, experience-report, scbcn15&lt;/p&gt;

&lt;h2 id=&#34;jvmls-2015-compilers-are-databases&#34;&gt;JVMLS 2015 - Compilers are Databases&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=48js0H6ooBY&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Martin Odersky on why compilers resemble databases and explains how a functional compiler works on the inside.&lt;/p&gt;

&lt;p&gt;Explains the notion of a Type, Reference, Symbol, Denotation (and Multi-Denotation) living in the Abstract Syntax Tree (AST)&lt;/p&gt;

&lt;p&gt;Also explains the need for a reading compiler (e.g., for quick validation in the IDE), single-pass and multi-pass compiler.&lt;/p&gt;

&lt;p&gt;They have built phases to transform the source code into bytecode, but to better use the cache locality, they programmatically mix phases using Java Reflection (metaprogramming) to traverse the tree (AST) once for these selected phases.&lt;/p&gt;

&lt;p&gt;Tags: type, reference, symbol, denotation, abstract-syntax-tree, ast, compiler, functional-compiler, scalac, dotty, martin-odersky, analogy, database&lt;/p&gt;

&lt;h2 id=&#34;in-functional-programming-what-is-a-functor&#34;&gt;In Functional Programming, what is a functor?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/2030863/in-functional-programming-what-is-a-functor/2031421#2031421&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt; of what is a functor&lt;/p&gt;

&lt;p&gt;Tags: stack-overflow, functor, answer, functional-programming&lt;/p&gt;

&lt;h2 id=&#34;ten-habits-of-a-good-programmer&#34;&gt;Ten Habits of a Good Programmer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://hintjens.com/blog:98&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of good habits of good programmers by Pieter Hintjens:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If it works and is still useful, don&amp;rsquo;t throw it out.&lt;/li&gt;
&lt;li&gt;Never solve the same problem twice in parallel.&lt;/li&gt;
&lt;li&gt;Solve the same problem often in serial.&lt;/li&gt;
&lt;li&gt;Write code, and repeat, until you are fluent in your language.&lt;/li&gt;
&lt;li&gt;Learn to use code generators.&lt;/li&gt;
&lt;li&gt;Work with others.&lt;/li&gt;
&lt;li&gt;Technology is a tool, not a tribal affiliation.&lt;/li&gt;
&lt;li&gt;Aim for this cycle: learn, play, work, teach.&lt;/li&gt;
&lt;li&gt;Get your edit-compile-run-fail cycles down to seconds.&lt;/li&gt;
&lt;li&gt;If you need debuggers, you&amp;rsquo;re doing it wrong.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tags: pieter-hintjens, list, habit, good-programmer&lt;/p&gt;

&lt;h2 id=&#34;beginning-clojure-cursive&#34;&gt;Beginning Clojure: Cursive&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://potetm.github.io/2015/10/04/beginning-clojure-cursive.html&#34; target=&#34;_blank&#34;&gt;this tutorial&lt;/a&gt; on installing Cursive, IntelliJ Idea&amp;rsquo;s plugin for working with Clojure. Written by Tim Pote&lt;/p&gt;

&lt;p&gt;Tags: cursive, clojure, intellij-idea, plugin, tutorial, tim-pote&lt;/p&gt;

&lt;h2 id=&#34;nodejs-a-quick-optimization-advice&#34;&gt;#NodeJS : A quick optimization advice&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://top.fse.guru/nodejs-a-quick-optimization-advice-7353b820c92e&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the limit for inlining for the NodeJS optimizing compiler (Crankshaft), that includes both source code and comments. Written Julien Crouzet&lt;/p&gt;

&lt;p&gt;Tags: nodejs, comment, julien-crouzet, crankshaft, optimizer, inline, function-inline&lt;/p&gt;

&lt;h2 id=&#34;specification-pattern&#34;&gt;Specification Pattern&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Specification_pattern&#34; target=&#34;_blank&#34;&gt;this wikipedia&lt;/a&gt; page on the specification pattern&lt;/p&gt;

&lt;p&gt;Tags: eric-evans, martin-fowler, specification-pattern, pattern, design-pattern, dsl, domain-specific-language&lt;/p&gt;

&lt;h2 id=&#34;el-recruiting-está-roto-bonilista&#34;&gt;El recruiting está ROTO #Bonilista&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=539364dde4&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; where David Bonilla explains why the recruitment sector for technical people in Spain is broken. Article is in Spanish.&lt;/p&gt;

&lt;p&gt;Tags: david-bonilla, bonilista, recruitment, job, career&lt;/p&gt;

&lt;h2 id=&#34;bddon-t-the-practice-and-the-tools&#34;&gt;BDDon’t: The practice and the tools&lt;/h2&gt;

&lt;p&gt;​I&amp;rsquo;ve  read &lt;a href=&#34;https://www.thoughtworks.com/p2magazine/issue12/bdd-dont/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Kevin Dishman that explains what is BDD and how it I  usually used. Also the common downsides and what to do about it&lt;/p&gt;

&lt;p&gt;Suggests using a faster tool, lower on the test pyramid that can bring the same business value at a lower cost&lt;/p&gt;

&lt;p&gt;Tags: kevin-dishman, downside, test-pyramid, bdd, test, unit-test, functional-test, acceptance-test&lt;/p&gt;

&lt;h2 id=&#34;cómo-usan-git-en-github-scbcn&#34;&gt;Cómo usan #Git en GitHub – #scbcn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;http://codely.tv/screencasts/como-usan-git-en-github/&#34; target=&#34;_blank&#34;&gt;this screencast&lt;/a&gt; on the talk we organized yesterday about github.&lt;/p&gt;

&lt;p&gt;Tags: javier-ferrer, codely-tv, codely, event, scbcn, alain-helaili, screencast&lt;/p&gt;

&lt;h2 id=&#34;trying-to-speed-up-binary-search&#34;&gt;Trying to speed up Binary Search&lt;/h2&gt;

&lt;p&gt;I have read &lt;a href=&#34;http://databasearchitects.blogspot.com.es/2015/09/trying-to-speed-up-binary-search.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how the binary search is implemented and what other algorithms are possible to speed up the search in large datasets, especially common in databases.&lt;/p&gt;

&lt;p&gt;Tags: optimization, branch-misprediction, clang, o3, gpp, c, database, binary-search, thomas-neumann&lt;/p&gt;

&lt;h2 id=&#34;scrum-3-0-and-organization-4-0-impressions-from-a-great-evening-with-boris-gloger-at-immobilienscout24&#34;&gt;Scrum 3.0 and Organization 4.0 - impressions from a great evening with Boris Gloger at ImmobilienScout24&lt;/h2&gt;

&lt;p&gt;I have read &lt;a href=&#34;http://www.ontheagilepath.net/2015/12/scrum-30-and-organization-40.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by  Sebastian Radics that compares the different ways of doing scrum: 1 2 3, most comments on other strategies or management methodologies like no estimates.&lt;/p&gt;

&lt;p&gt;Compares the importance of focusing on the process or on the final product, the role of the scrum master, the role of the product owner, and the team itself.&lt;/p&gt;

&lt;p&gt;Tags: management, agile, scrum, team-management, sebastian-radics, scrum30&lt;/p&gt;

&lt;h2 id=&#34;trucos-para-trabajar-con-equipos-remotos&#34;&gt;Trucos para trabajar con equipos remotos&lt;/h2&gt;

&lt;p&gt;I have read &lt;a href=&#34;http://thinkingwithyou.com/2015/11/trucos-para-trabajar-con-equipos-remotos/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Israel Alcázar (Spanish). Explains how this company organized their product development process. explains tools for working with a remote team.&lt;/p&gt;

&lt;p&gt;give three pieces of advice for improving it, and further resources to read&lt;/p&gt;

&lt;p&gt;Tags: remote, remote-first, isra-alcazar, israel-alcazar, team-management, advice&lt;/p&gt;

&lt;h2 id=&#34;introducing-new-open-source-tools-for-the-elixir-community&#34;&gt;Introducing new open-source tools for the Elixir community&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://engineering.pinterest.com/blog/introducing-new-open-source-tools-elixir-community&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Steve Cohen that explains what the actor model is and what is the spirit of the elixir language: user friendlier syntax for erlang&lt;/p&gt;

&lt;p&gt;They also explain that they have implemented and ad server and access control using elixir. For this matter, they rely on two tools that are now open source&lt;/p&gt;

&lt;p&gt;Tags: elixir, microsecond, latency, erlang, actor-model, language-syntax, open-source, steve-cohen&lt;/p&gt;

&lt;h2 id=&#34;cuánto-pagas-por-tus-herramientas-de-trabajo&#34;&gt;¿Cuánto pagas por tus herramientas de trabajo?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=12ed2d6eb0&#34; target=&#34;_blank&#34;&gt;this bonilista&lt;/a&gt; about how much programmers invest in buying their tools (and honing them). By David Bonilla, in Spanish&lt;/p&gt;

&lt;p&gt;Tags: david-bonilla, bonilista, tool, investment&lt;/p&gt;

&lt;h2 id=&#34;clojure-at-a-bank-freeing-the-rules&#34;&gt;Clojure at a Bank – Freeing the Rules&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pitheringabout.com/?p=830&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jon Pither about converting OO business rules into Clojure and using the homoiconicity for increasing the power: when code is data, the rules themselves become searchable (using a search engine), visualizable and analyzable. This wasn&amp;rsquo;t possible before when code was not data.&lt;/p&gt;

&lt;p&gt;They have also build further tools to analyze rules with larger sets of data, rather than unit tests, to see if they conflict among each other.&lt;/p&gt;

&lt;p&gt;Tags: jon-pither, clojure, homoiconicity, code=data, data=code, rule, rule-engine, bank, business-rule, code-analysis&lt;/p&gt;

&lt;h2 id=&#34;five-reasons-to-learn-clojure-and-emacs-together&#34;&gt;Five reasons to learn Clojure and Emacs together&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pitheringabout.com/?p=849&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jon Pither advocating the learning of Clojure and Emacs at the same time. The main reasons are: liberation, change, support, simplicity, mass adoption.&lt;/p&gt;

&lt;p&gt;Cites that being hard to learn a new editor is a good idea to separate those who are willing to invest the time in learning (both an editor and a new language) from those who don&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Tags: clojure, emacs, jon-pither, learning, liberation, change, support, simplicity, mass-adoption&lt;/p&gt;

&lt;h2 id=&#34;pull-requests-maintainers-won-t-hate&#34;&gt;Pull Requests Maintainers Won&amp;rsquo;t Hate&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this &lt;a href=&#34;https://www.booleanknot.com/blog/2013/09/07/pull-requests.html&#34; target=&#34;_blank&#34;&gt;list of tips&lt;/a&gt; by James Reeves on improving the pull requests
Tags: pull-request, james-reeves, tip, list&lt;/p&gt;

&lt;h2 id=&#34;how-to-get-rich-in-tech-guaranteed&#34;&gt;How to get rich in tech, guaranteed.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://startupljackson.com/post/135800367395/how-to-get-rich-in-tech-guaranteed&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that describes what is a way to make good money and retire rich why working for a company.&lt;/p&gt;

&lt;p&gt;It also explains about entering the startup market, what questions should be asked, what&amp;rsquo;s your real value, what are the benefits of doing it, known limitations and other questions&lt;/p&gt;

&lt;p&gt;Tags: startup, career, career-management, work, professional-career, value, money&lt;/p&gt;

&lt;h2 id=&#34;modern-perl-4th-edition-a-review&#34;&gt;Modern Perl 4th edition, a review&lt;/h2&gt;

&lt;p&gt;I have read &lt;a href=&#34;http://perltricks.com/article/205/2015/12/21/Modern-Perl-4th-edition--a-review&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains how this new book covers the syntax, idioms and the rest of the Perl language.&lt;/p&gt;

&lt;p&gt;In this 4th edition, parts of  the text have completely been rewritten, a New formatting applied to ease and improve the reading comprehension&lt;/p&gt;

&lt;p&gt;Tags: book-review, review, david-farrell, perl, reedition, modern-perl&lt;/p&gt;

&lt;h2 id=&#34;8-characteristics-of-agile-software-developers&#34;&gt;8 Characteristics of Agile Software Developers&lt;/h2&gt;

&lt;p&gt;​I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@pm_loop/8-characteristics-of-successful-agile-software-developers-ab2c43abb959&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that describes what characteristics are common in companies practicing an agile methodology, as revealed by a study (that even though it&amp;rsquo;s not cited, can be tracked back to &lt;a href=&#34;http://productdevelopmentsuccess.com/study&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Suggests ideas for teams that change in a changing environment and what to do about it.&lt;/p&gt;

&lt;p&gt;Written by Keela Robison.&lt;/p&gt;

&lt;p&gt;Tags: keela-robison, agile, team-management&lt;/p&gt;

&lt;h2 id=&#34;this-is-why-you-never-end-up-hiring-good-developers&#34;&gt;This is why you never end up hiring good developers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://qz.com/258066/this-is-why-you-dont-hire-good-developers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains what to look for in a strong, stronger, strongest (software) developer&lt;/p&gt;

&lt;p&gt;The main idea is to find a good person that fits the job, without inflicting pain in the team morale and can learn to perform the specific tasks in the future, as (paraprasing) the pool of people that know what you need is much smaller than the people who can learn it.&lt;/p&gt;

&lt;p&gt;The article specifies what to look and not look for in a candidate.&lt;/p&gt;

&lt;p&gt;Some quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;grasp of complex topics and the ability to clearly communicate about them, which are the two jobs of the working engineer.&lt;/p&gt;

&lt;p&gt;track record of learning new skills and applying them successfully&lt;/p&gt;

&lt;p&gt;TL;DR:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Many interview techniques test skills that are at best irrelevant to real working life;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;you want somebody who knows enough to do the job right now;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;or somebody smart and motivated enough that they can learn the job quickly;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;you want somebody who keeps getting better at what they do;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;your interview should be a collaborative conversations, not a combative interrogation;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;you also want somebody who you will enjoy working with;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;it’s important to separate “enjoy working with” from “enjoy hanging out with;”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;don’t hire assholes, no matter how good they are;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if your team isn’t diverse, your team is worse than it needed to be;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;accept that hiring takes a really long time and is really, really hard.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;effective-learning-strategies-for-programmers-1&#34;&gt;Effective Learning Strategies for Programmers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve (re-)read &lt;a href=&#34;http://akaptur.com/blog/2015/10/10/effective-learning-strategies-for-programmers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Allison Kaptur on fixed vs growth mindset and the need for having the latter for being a programmer.&lt;/p&gt;

&lt;p&gt;The fixed mindset is present in the 10x-engineer, and the worshipping of heroes.&lt;/p&gt;

&lt;p&gt;It also includes a recipe for changing from a fixed-mindset to a growth-mindset.&lt;/p&gt;

&lt;p&gt;(Note: this entry is also present in this same month)&lt;/p&gt;

&lt;p&gt;Tags: allison-kaptur, fixed-mindset, growth-mindset, research, learning-strategy, recurse-center, carol-dweck, mindset, 10x-engineer, impostor-syndrome&lt;/p&gt;

&lt;h2 id=&#34;doctor-please-fix-my-agile&#34;&gt;Doctor! Please fix my agile!&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://dl.dropboxusercontent.com/u/59614769/Presentations/Doctor%20please%20fix%20my%20Agile.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Ville Törmälä on what is agile, organizational problems and the distinction between efficiency and effectiveness. Also talks about the distribution of time and the organization of the environment (what calls)&lt;/p&gt;

&lt;p&gt;Tags: slide, agile, efficiency, effectiveness, tip, organization, ville-tormala, project-thinking, team-thinking&lt;/p&gt;

&lt;h2 id=&#34;wolf-narrative-considered-harmful-also-biologically-unlikely&#34;&gt;“Wolf” narrative considered harmful (also biologically unlikely)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://laughingmeme.org/2014/09/02/wolf-narrative-considered-harmful-also-biologically-unlikely/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains what the &amp;ldquo;lone wolf&amp;rdquo; archetype is, among programmers, and possible outcomings for those profiles. Written by Kellan Elliott-McCrea.&lt;/p&gt;

&lt;p&gt;Describes some craftsmanship ideas for these roles, based on their proficiency with their tools, that will generate tools for the rest of the team and make the rest more effective. Also discusses the non-management advancement career.&lt;/p&gt;

&lt;p&gt;Tags: analogy, wolf, lone-wolf, archetype, programmer, programmer-analogy, profile, team-management, kellan-elliott-mccrea&lt;/p&gt;

&lt;h2 id=&#34;the-wolf-dictating-their-own-terms&#34;&gt;The Wolf - dictating their own terms&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://randsinrepose.com/archives/the-wolf/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Lopp about the &lt;code&gt;wolf&lt;/code&gt; position as a person or in a team. He describes their characteristics and his own experiences working with them.&lt;/p&gt;

&lt;p&gt;Tags: management, wolf, team-management, analogy, michael-lopp&lt;/p&gt;

&lt;h2 id=&#34;volkswagen-and-cheating-software&#34;&gt;Volkswagen and Cheating Software&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.schneier.com/crypto-gram/archives/2015/1015.html#1&#34; target=&#34;_blank&#34;&gt;this essay&lt;/a&gt; by Bruce Schneier on cheating software, using as an example the Volkswagen case, but especially centered on software that is made do cheat in an undetectable fashion. Or that could be attributed to a programming mistake. The later, says the author, is so common that there could be already intentional or unintentional errors hiding cheating.&lt;/p&gt;

&lt;p&gt;The author cites the Internet of Things of new opportunities for companies to use / produce cheating software and about a possible solution: transparency and oversight of the software that more and more reigns our lives.&lt;/p&gt;

&lt;p&gt;Other (opinion) articles I&amp;rsquo;ve read on the issue are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nytimes.com/2015/09/24/opinion/volkswagen-and-the-era-of-cheating-software.html&#34; target=&#34;_blank&#34;&gt;Volkswagen and the Era of Cheating Software&lt;/a&gt; by Zeynep Tufekci&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fusion.net/story/202867/volkswagen-software-deception-ai/&#34; target=&#34;_blank&#34;&gt;Volkswagen isn’t the first company to use software to break the law and it won’t be the last&lt;/a&gt; by Daniela Hernandez&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slate.com/articles/technology/future_tense/2015/09/volkswagen_s_cheating_emissions_software_and_the_threat_of_black_boxes.html&#34; target=&#34;_blank&#34;&gt;Harry Potter and the Mysterious Defeat Device&lt;/a&gt; by James Grimmelmann&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: cryptogram, bruce Schneier, volkswagen, mistake, quality, transparency, oversight, iot, essay, cheating, cheating software&lt;/p&gt;

&lt;h2 id=&#34;please-java-do-finally-support-multiline-string-literals&#34;&gt;Please, Java. Do Finally Support Multiline String Literals&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jooq.org/2015/12/29/please-java-do-finally-support-multiline-strings/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining the need for multi-line string literal in java.&lt;/p&gt;

&lt;p&gt;Tags: java, syntax, string, feature, multi-line string&lt;/p&gt;

&lt;h2 id=&#34;the-silver-bullet-syndrome&#34;&gt;The Silver Bullet Syndrome&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=3wyd6J3yjcs&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Hadi Hariri about chasing the next silver bullet.&lt;/p&gt;

&lt;p&gt;He explains this with javascript and nodejs, but it could be exemplified with other technologies / promises as well.&lt;/p&gt;

&lt;p&gt;Note: ABC stands for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A = address&lt;/li&gt;
&lt;li&gt;B = binding&lt;/li&gt;
&lt;li&gt;C = contract&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: hadi-hariri, silver-bullet, talk, devoxx&lt;/p&gt;

&lt;h2 id=&#34;writing-clean-tests-small-is-beautiful&#34;&gt;Writing Clean Tests – Small Is Beautiful&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.petrikainulainen.net/programming/testing/writing-clean-tests-small-is-beautiful/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Petri Kainulainen on writing BDD style tests with JUnit in java.&lt;/p&gt;

&lt;p&gt;There is &lt;a href=&#34;https://github.com/NitorCreations/CoreComponents/tree/master/junit-runners&#34; target=&#34;_blank&#34;&gt;a tool&lt;/a&gt;, created by Nitor Creations that allows you to write nested classes in JUnit, allowing for test specialization.&lt;/p&gt;

&lt;p&gt;Tags: junit, runner, bdd, test, nitor-creations, petri-kainulainen, tdd&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in October 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</link>
      <pubDate>Thu, 01 Oct 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/10/01/self-study-in-october-2015/</guid>
      <description>

&lt;h2 id=&#34;blazing-fast-html-virtual-dom-in-elm&#34;&gt;Blazing Fast HTML: Virtual DOM in Elm&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://elm-lang.org/blog/blazing-fast-html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining how Elm works in relation to the virtual DOM. By Evan Czaplicki.&lt;/p&gt;

&lt;p&gt;Tags: elm, dom, virtual-dom, comparison, speed, haskell, evan-czaplicki&lt;/p&gt;

&lt;h2 id=&#34;why-you-should-never-ever-ever-use-mongodb&#34;&gt;Why you should never, ever, ever use MongoDB&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; stating the downsides of using MongoDB. Written by Sven Slootweg&lt;/p&gt;

&lt;p&gt;Tags: mongodb, downside, sven-slootweg, json, document-store, postgresql, acid&lt;/p&gt;

&lt;h2 id=&#34;do-you-really-get-classloaders&#34;&gt;Do you really get classloaders?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;http://zeroturnaround.com/rebellabs/rebel-labs-tutorial-do-you-really-get-classloaders/&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Jevgeny Kabanov on classloaders: what they are, how they work nad some tips to solve common issues.&lt;/p&gt;

&lt;p&gt;My notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the classloading is lazy: the resources are not loaded until they are mentioned&lt;/li&gt;
&lt;li&gt;every classloader has a parent&lt;/li&gt;
&lt;li&gt;every class has a classloader associated with it&lt;/li&gt;
&lt;li&gt;every object has a class associated with it&lt;/li&gt;
&lt;li&gt;classloading delegation: the parent is consulted before loading a class. if it has it, it will load it. If not, I will delegate it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also &lt;a href=&#34;http://www.javaworld.com/article/2074396/core-java/javaone-2011--do-you-really-get-classloaders-.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the same video&lt;/p&gt;

&lt;p&gt;Tags: jevgeny-kabanov, classloader, java,&lt;/p&gt;

&lt;h2 id=&#34;truth-table&#34;&gt;Truth table&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Truth_table&#34; target=&#34;_blank&#34;&gt;the wikipedia article&lt;/a&gt; about the truth table and the 16 possible binary boolean operators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Contradiction&lt;/li&gt;
&lt;li&gt;NOR&lt;/li&gt;
&lt;li&gt;Converse nonimplication&lt;/li&gt;
&lt;li&gt;Negation (of p)&lt;/li&gt;
&lt;li&gt;Material nonimplication&lt;/li&gt;
&lt;li&gt;Negation (of q)&lt;/li&gt;
&lt;li&gt;XOR (exclusive disjunction)&lt;/li&gt;
&lt;li&gt;NAND&lt;/li&gt;
&lt;li&gt;AND (conjunction)&lt;/li&gt;
&lt;li&gt;XNOR (biconditional)&lt;/li&gt;
&lt;li&gt;Projection (of p)&lt;/li&gt;
&lt;li&gt;Implication&lt;/li&gt;
&lt;li&gt;Projection (of q)&lt;/li&gt;
&lt;li&gt;Converse implication&lt;/li&gt;
&lt;li&gt;OR (disjunction)&lt;/li&gt;
&lt;li&gt;Tautology&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-lines-of-code-3-minutes-implement-a-programming-language-from-scratch&#34;&gt;7 lines of code, 3 minutes: Implement a programming language from scratch&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://matt.might.net/articles/implementing-a-programming-language/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Matt Might about the benefits of implementing a language (from scratch but on top of another existing language used as framework). Chooses lambda calculus as the desired DSL&lt;/p&gt;

&lt;p&gt;Tags: matt-might, lambda-calculus, racket, domain-specific-language&lt;/p&gt;

&lt;h2 id=&#34;turing-completeness&#34;&gt;Turing completeness&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing_completeness&#34; target=&#34;_blank&#34;&gt;this wikipedia article&lt;/a&gt; (both main and discussion) about this subject.&lt;/p&gt;

&lt;p&gt;It has sounded strange to me the reference to S-expressions:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Data languages
The notion of Turing-completeness does not apply to languages such as XML, HTML, JSON, YAML and S-expressions because they are typically used to represent structured data, not describe computation [&amp;hellip;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If data (S-expression) is represented as the same format as code (e.g., Lisp&amp;rsquo;s S-expression) and the latter is used to represent a computation, shouldn&amp;rsquo;t be &amp;ldquo;data languages that also are used as computation languages&amp;rdquo; excluded from that list?&lt;/p&gt;

&lt;p&gt;As a side note, Lisp is Turing Complete (see &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing_completeness#Examples&#34; target=&#34;_blank&#34;&gt;Turing Complete#Examples&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;the-prize-is-won-the-simplest-universal-turing-machine-is-proved&#34;&gt;The Prize Is Won; The Simplest Universal Turing Machine Is Proved&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.wolfram.com/2007/10/24/the-prize-is-won-the-simplest-universal-turing-machine-is-proved/?year=2007&amp;amp;monthnum=10&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Stephen Wolfram about the proof of a Turing Machine 2,3 being universal by Alex Smith.&lt;/p&gt;

&lt;p&gt;Tags: stephen-wolfram, turing-machine, universal-turing-machine, proof, paper, alex-smith&lt;/p&gt;

&lt;h2 id=&#34;making-a-successful-commitment-in-each-sprint&#34;&gt;Making a successful commitment in each Sprint&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://succeeding-with-agile.blogspot.com/2015/07/making-successful-commitment-in-each.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Nikolaos Raptis on committing to work in each sprint.&lt;/p&gt;

&lt;p&gt;Tags: nikolaos-raptis, sprint, agile, commitment&lt;/p&gt;

&lt;h2 id=&#34;no-increment-operator-in-ruby&#34;&gt;No increment operator (++) in Ruby?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/3717519/no-increment-operator-in-ruby&#34; target=&#34;_blank&#34;&gt;this stackoverflow&lt;/a&gt; question about the lack of post-increment operator (i++) in Ruby:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;++ and &amp;ndash; are NOT reserved operator in Ruby.&lt;/p&gt;

&lt;p&gt;Mailing list from &lt;a href=&#34;http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/2710&#34; target=&#34;_blank&#34;&gt;Yukihiro Matsumoto aka matz&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;code-is-data-data-is-code&#34;&gt;Code is Data, Data is Code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blogs.mulesoft.com/dev/news-dev/code-is-data-data-is-code/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by James Donelan on the equivalence of code and data in homoiconic languages, including Clojure.&lt;/p&gt;

&lt;p&gt;The article talks about homoiconicity, manually creating Abstract Syntax Trees (AST) out of data and the macro environment. Also, compares the difference between macros and functions.&lt;/p&gt;

&lt;p&gt;Tags: code=data, data=code, james-donelan, clojure, homoiconicity, abstract-syntax-tree, ast, macro, function&lt;/p&gt;

&lt;h2 id=&#34;agile-in-practice-test-driven-development&#34;&gt;Agile in Practice: Test Driven Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=uGaNkTahrIw&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; introducing TDD by the Agile Academy. Explains its motivations and the basic cyclical fashion.&lt;/p&gt;

&lt;p&gt;Tags: agile-academy, video, tdd, introduction&lt;/p&gt;

&lt;h2 id=&#34;agile-in-practice-pair-programming&#34;&gt;Agile in Practice: Pair Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=ET3Q6zNK3Io&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Agile Academy on practicing pair programming. Explains the destination and how to get there.&lt;/p&gt;

&lt;p&gt;Tags: agile-academy, pair-programming, video, introduction&lt;/p&gt;

&lt;h2 id=&#34;a-low-cost-approach-to-working-on-side-projects&#34;&gt;A low cost approach to working on side projects&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://practicingruby.com/articles/low-cost-approach-to-side-projects&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Gregory Brown on how to apply the MVP and Lean Startup principles to side projects (a.k.a. pet projects). Try to start with a brainstorming session of all the features you want your product to have, then prioritise, picking the most important ones.&lt;/p&gt;

&lt;p&gt;Most projects&amp;rsquo; needs can be solved with a minimal version, in the form of a script that took half an hour to develop.&lt;/p&gt;

&lt;p&gt;Tags: gregory-brown, mvp, lean-startup, script, proof-of-concept, priority, backlog, side-project, pet-project, low-cost, cost-reduction&lt;/p&gt;

&lt;h2 id=&#34;extreme-programming&#34;&gt;Extreme Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=kFM2Vcu-BRo&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by STAR Videos on the basic principles behind Extreme Programming and how to use it to improve software quality&lt;/p&gt;

&lt;p&gt;Tags: star-videos, extreme-programming, xp, software-quality&lt;/p&gt;

&lt;h2 id=&#34;disruptor-high-performance-alternative-to-bounded-queues-for-exchanging-data-between-concurrent-threads&#34;&gt;Disruptor: High performance alternative to bounded queues for exchanging data between concurrent threads&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://lmax-exchange.github.io/disruptor/files/Disruptor-1.0.pdf&#34; target=&#34;_blank&#34;&gt;this white paper&lt;/a&gt; describing the disruptor framework: a way of exchanging data between concurrent threads.&lt;/p&gt;

&lt;p&gt;It uses a ring buffer and other techniques to eliminate write contention, reduce read contention and produces good results. It was developed for a financial exchange environment but it&amp;rsquo;s general purpose.&lt;/p&gt;

&lt;p&gt;Tags: martin-thompson, dave-farley, michael-barker, patricia-gee, andrew-stewart, trisha-gee, disruptor, contention, framework, concurrency, parallelism, white-paper, comparison, arrayblockingqueue, concurrentlinkedqueue, doug-lea, benchmark, lmax, low-level-optimization, optimization&lt;/p&gt;

&lt;h2 id=&#34;dissecting-the-disruptor-what-s-so-special-about-a-ring-buffer&#34;&gt;Dissecting the Disruptor: What&amp;rsquo;s so special about a ring buffer?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mechanitis.blogspot.com.es/2011/06/dissecting-disruptor-whats-so-special.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the ring buffer data structure. A FIFO data structure where elements get overwritten to reduce pressure on the garbage collector. Every message gets sent to every consumer.&lt;/p&gt;

&lt;p&gt;Tags: patricia-gee, trisha-gee, disruptor, ring-buffer, data-structure&lt;/p&gt;

&lt;h2 id=&#34;the-dependency-inversion-principle&#34;&gt;The Dependency Inversion Principle&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.objectmentor.com/resources/articles/dip.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; about the Dependency Inversion Principle (DIP) written Robert C. Martin.&lt;/p&gt;

&lt;p&gt;It explains the theory, philosophy behind it. Also, creates an example with a copy buffer and different output locations&lt;/p&gt;

&lt;p&gt;Tags: robert-martin, dependency-inversion-principle, dip, example, comparison, object-oriented, principle, solid, design-principle&lt;/p&gt;

&lt;h2 id=&#34;dip-in-the-wild&#34;&gt;DIP in the Wild&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://martinfowler.com/articles/dipInTheWild.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the Dependency Inversion Principle (DIP) written by Brett L. Schuchert.&lt;/p&gt;

&lt;p&gt;It is explained non-canonical representations of this principle, how in other cases he has solved it and conclusions of using it day to day.&lt;/p&gt;

&lt;p&gt;Tags: brett-l.-schuchert, dependency-inversion-principle, dip, example, object-oriented, solid, design-principle&lt;/p&gt;

&lt;h2 id=&#34;the-new-new-product-development-game&#34;&gt;The New New Product Development Game&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/1986/01/the-new-new-product-development-game&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; about the holistic approach to product development, considered seminal for Scrum and other Agile methodologies. Written by Hirotaka Takeuchi and Ikujiro Nonaka&lt;/p&gt;

&lt;p&gt;In it, they describe how teams are distributed, the responsibilities for each one, and the degrees of freedom.&lt;/p&gt;

&lt;p&gt;Cites the six basic characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;built-in instability&lt;/li&gt;
&lt;li&gt;self-organizing project teams&lt;/li&gt;
&lt;li&gt;overlapping development phases&lt;/li&gt;
&lt;li&gt;multilearning&lt;/li&gt;
&lt;li&gt;subtle control&lt;/li&gt;
&lt;li&gt;organizational transfer of learning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: hirotaka-takeuchi, ikujiro-nonaka, scrum, agile, product-development, management, 1986&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in September 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015/</link>
      <pubDate>Tue, 01 Sep 2015 15:25:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/09/01/self-study-in-september-2015/</guid>
      <description>

&lt;h2 id=&#34;the-30-second-habit-with-a-lifelong-impact&#34;&gt;The 30 second habit with a lifelong impact&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.growth.supply/the-30-second-habit-with-a-lifelong-impact-2c3f948ead98&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; list of patterns, by Robyn Scott, in which it is explained why to compress information in a few ideas, investing 30 seconds to condense the article.&lt;/p&gt;

&lt;p&gt;Tags: 30-second, habit, robyn-scott&lt;/p&gt;

&lt;h2 id=&#34;the-strengths-and-weaknesses-of-extreme-programming&#34;&gt;The Strengths and Weaknesses of Extreme Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=LkhLZ7_KZ5w&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; explaining the strengths and weaknesses of extreme programming. By William Matheson&lt;/p&gt;

&lt;p&gt;Tags: extreme-programming, xp, william-matheson, video, strength, weakness&lt;/p&gt;

&lt;h2 id=&#34;poster-de-extreme-programming&#34;&gt;Poster de Extreme Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=4nN6Gh79Yg8&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; introducing eXtreme Programming. By Martín Salías&lt;/p&gt;

&lt;p&gt;Tags: martin-salias, kleer, extreme-programming, xp&lt;/p&gt;

&lt;h2 id=&#34;good-tech-lead-bad-tech-lead&#34;&gt;Good Tech Lead, Bad Tech Lead&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.growth.supply/good-tech-lead-bad-tech-lead-948b2b806d86&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; of good and bad traits in tech leads. By Jason Liszka.&lt;/p&gt;

&lt;p&gt;Explains the differences between good and bad tech leads, even though many of these qualities are shared by plain team members&lt;/p&gt;

&lt;p&gt;Tags: jason-liszka, tech-lead, comparison&lt;/p&gt;

&lt;h2 id=&#34;why-procrastinators-procrastinate&#34;&gt;Why Procrastinators Procrastinate&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://waitbutwhy.com/2013/10/why-procrastinators-procrastinate.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tim Urban on procrastination: this article compares the procrastinator and the non-procrastinator brain with pictures, introducing the Rational part, the Instant Gratification Monkey and the Panic Monster. Shows some reasons why.&lt;/p&gt;

&lt;p&gt;There is more on part 2: &lt;a href=&#34;http://waitbutwhy.com/2013/11/how-to-beat-procrastination.html&#34; target=&#34;_blank&#34;&gt;How to beat procrastination&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: tim-urban, procrastination, rational-part, instant-gratification-monkey, panic-monster, brain, comparison&lt;/p&gt;

&lt;h2 id=&#34;algebraic-data-type&#34;&gt;Algebraic data type&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that explains what this is, a few examples and the theory behind it.&lt;/p&gt;

&lt;p&gt;Tags: wikipedia, data-type, algebraic-data-type&lt;/p&gt;

&lt;h2 id=&#34;recursion&#34;&gt;Recursion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Recursion_(computer_science)&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that explains the recursion basic concepts, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;induction, coinduction&lt;/li&gt;
&lt;li&gt;recursion, corecursion&lt;/li&gt;
&lt;li&gt;implementation details in iterative vs recursive programs:

&lt;ul&gt;
&lt;li&gt;shortcutting recursion (i.e., arm-length&amp;rsquo;s recursion)&lt;/li&gt;
&lt;li&gt;wrapper function&lt;/li&gt;
&lt;li&gt;tail-call optimization, related to tail-recursive functions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;recursion and its relation to data structures&lt;/li&gt;
&lt;li&gt;base case / recursive case and removing the need of the base one in corecursion or in non-strict languages&lt;/li&gt;
&lt;li&gt;types of recursion:

&lt;ul&gt;
&lt;li&gt;direct, indirect, mutual&lt;/li&gt;
&lt;li&gt;generative, structural&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: recursion, corecursion, induction, coinduction, tail-call-optimization, tail-recursion, direct-recursion, indirect-recursion, mutual-recursion, generative-recursion, structural-recursion, arm-length-recursion, iterative-function, recursive-function, base-case, recursive-case, wikipedia, data-structure&lt;/p&gt;

&lt;h2 id=&#34;anonymous-function&#34;&gt;Anonymous function&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Anonymous_function&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that describes what is a lambda expression or an anonymous function. How it can be used (e.g., currying, higher-order function, closures) and gives examples in many languages.&lt;/p&gt;

&lt;p&gt;Cites its invention (Church, 1936, lambda-calculus) and its first implementation (Lisp, 1958)&lt;/p&gt;

&lt;p&gt;Tags: alonzo-church, anonymous-function, lambda-expression, closure, lambda-calculus, lisp, currying, higher-order-function, wikipedia&lt;/p&gt;

&lt;h2 id=&#34;closure&#34;&gt;Closure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Closure_(computer_programming)&#34; target=&#34;_blank&#34;&gt;this wikipedia page&lt;/a&gt;, that explains the concept of closures and the usual confusion between closure and lambda. Also some applications.&lt;/p&gt;

&lt;p&gt;Discusses closures as a way of deferring execution and implementing object-oriented (OO) systems&lt;/p&gt;

&lt;p&gt;Tags: wikipedia, closure, object-orientation, lambda-expression&lt;/p&gt;

&lt;h2 id=&#34;zen-story-the-master-archer&#34;&gt;Zen Story: The Master Archer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.thedailyzen.org/2015/06/23/zen-story-the-master-archer/&#34; target=&#34;_blank&#34;&gt;this story&lt;/a&gt; by Charlie Ambler about perfectionism and deep study, exemplified by the general that retires to study archery and the child who draws targets around the arrows.&lt;/p&gt;

&lt;p&gt;Tags: charlie-amber, master, student, zen, story&lt;/p&gt;

&lt;h2 id=&#34;loosely-coupled&#34;&gt;Loosely Coupled&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.bwhaley.com/loosely-coupled&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ben Whaley about how to loosely couple services introducing a queue and the difference in patterns between push and pull communication.&lt;/p&gt;

&lt;p&gt;Tags: ben-whaley, push, pull, coupling, loose-coupling, service, queue, aws&lt;/p&gt;

&lt;h2 id=&#34;being-good-at-programming-competitions-correlates-negatively-with-being-good-on-the-job&#34;&gt;Being good at programming competitions correlates negatively with being good on the job&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched the small video and the discussion about programmers&amp;rsquo; talent at &lt;a href=&#34;http://www.catonmat.net/blog/programming-competitions-work-performance/&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt;. By Peteris Krumins.&lt;/p&gt;

&lt;p&gt;The original video explains that being good at a programming contest correlates negatively with skill at a programming job, even if the company hires them.&lt;/p&gt;

&lt;p&gt;The discussion explains the analogy with height and the NBA and concludes that this parameter should be preponderated with less importance than others.&lt;/p&gt;

&lt;p&gt;Tags: google, peter-norvig, nba, analogy, programming-contest, programming-skill, peteris-krumins&lt;/p&gt;

&lt;h2 id=&#34;on-functors&#34;&gt;On Functors&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.catonmat.net/blog/on-functors/&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; by Peteris Krumins of what the functors are in different languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++: function objects&lt;/li&gt;
&lt;li&gt;Standard ML: generic implementation of interfaces. They allow to compose structures&lt;/li&gt;
&lt;li&gt;Haskell: structure containing zero or more objects that can be converted to another structure containing the other objects. It&amp;rsquo;s an homomorphism between two categories.&lt;/li&gt;
&lt;li&gt;Prolog: built-in predicate for self-inspection and the atom at the start of the structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: peteris-krumins, comparison, haskell, c-plus-plus, standard-ml, prolog, functor&lt;/p&gt;

&lt;h2 id=&#34;recursive-regular-expressions&#34;&gt;Recursive Regular Expressions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.catonmat.net/blog/recursive-regular-expressions/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on recursive regular expressions by Peteris Krumins.&lt;/p&gt;

&lt;p&gt;In it, he lightly describes how a regular expression relates to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Context-free_grammar&#34; target=&#34;_blank&#34;&gt;Context-Free Grammar&lt;/a&gt; and the language support for Perl to include recursive regular expressions. Based on the examples (e.g., &lt;code&gt;0^n1^n&lt;/code&gt;), it really clicked to me that this could be expressed as a recursive function, with its base case and the recursive one. Also that it &amp;ldquo;depends on solutions to smaller instances of the same problem&amp;rdquo; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Recursion_(computer_science)&#34; target=&#34;_blank&#34;&gt;wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Tags: peteris-krumins, regular-expression, recursion, recursive-regular-expression, perl, context-free-grammar, formal-language-theory&lt;/p&gt;

&lt;h2 id=&#34;in-functional-programming-what-is-a-functor&#34;&gt;In Functional Programming, what is a functor?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://stackoverflow.com/questions/2030863/in-functional-programming-what-is-a-functor/2031421#2031421&#34; target=&#34;_blank&#34;&gt;this answer&lt;/a&gt;, by Norman Ramsey, on what is a functor.&lt;/p&gt;

&lt;p&gt;He explains in simple words what the concept is and how a type can belong to the class functor. Examples in haskell.&lt;/p&gt;

&lt;p&gt;Tags: norman-ramsey, functor, stack-overflow, haskell, type-class, class, map, fmap&lt;/p&gt;

&lt;h2 id=&#34;functors&#34;&gt;Functors&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.clojure.net/2013/01/19/Functors/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jim Duey explaining functors in Clojure. He introduces a couple of notes of Haskell but all of the examples are in Clojure. Explains functors, a subset of it called applicatives, and the two libraries he has created.&lt;/p&gt;

&lt;p&gt;Tags: jim-duey, functor, clojure, haskell&lt;/p&gt;

&lt;h2 id=&#34;10-tips-for-proper-application-logging&#34;&gt;10 Tips for Proper Application Logging&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javacodegeeks.com/2011/01/10-tips-proper-application-logging.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Tomasz Nurkiewicz about tips on logging:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reduce side effects&lt;/li&gt;
&lt;li&gt;use categories and levels&lt;/li&gt;
&lt;li&gt;connection with external systems&lt;/li&gt;
&lt;li&gt;handling exceptions&lt;/li&gt;
&lt;li&gt;automatically / manually reading logging files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: tomasz-nurkiewicz, logging, sl4j, log4j, tip&lt;/p&gt;

&lt;h2 id=&#34;what-is-duck-typing&#34;&gt;What is &amp;ldquo;duck typing&amp;rdquo;?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ericlippert.com/2014/01/02/what-is-duck-typing/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Eric Lippert about duck typing&lt;/p&gt;

&lt;p&gt;Tags: duck-typing, eric-lippert, type-system, c-sharp&lt;/p&gt;

&lt;h2 id=&#34;yagni&#34;&gt;Yagni&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve reread &lt;a href=&#34;http://martinfowler.com/bliki/Yagni.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Martin Fowler on the cost of developing features that are not needed&lt;/p&gt;

&lt;p&gt;Tags: martin-fowler, yagni, article, misunderstanding&lt;/p&gt;

&lt;h2 id=&#34;learn-haskell&#34;&gt;Learn Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.youtube.com/watch?v=JJlI5FPTbgE&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Jordan Medlock on learning haskell, explaining the basics and how to use the REPL&lt;/p&gt;

&lt;p&gt;Tags: haskell, repl, jordan-medlock, beginner, video&lt;/p&gt;

&lt;h2 id=&#34;learn-haskell-1&#34;&gt;Learn Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.youtube.com/watch?v=JJlI5FPTbgE&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Jordan Medlock on learning haskell, explaining the basics and how to use the REPL&lt;/p&gt;

&lt;p&gt;Tags: haskell, repl, jordan-medlock, beginner, video&lt;/p&gt;

&lt;h2 id=&#34;tmux-the-terminal-multiplexer&#34;&gt;TMUX - The Terminal Multiplexer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read these two parts: (&lt;a href=&#34;http://blog.hawkhost.com/2010/06/28/tmux-the-terminal-multiplexer/&#34; target=&#34;_blank&#34;&gt;one&lt;/a&gt;, &lt;a href=&#34;http://blog.hawkhost.com/2010/07/02/tmux-%E2%80%93-the-terminal-multiplexer-part-2&#34; target=&#34;_blank&#34;&gt;two&lt;/a&gt;) of an introduction guide to &lt;code&gt;tmux&lt;/code&gt; (the unix terminal multiplexer) by Cody from Hawk Host.&lt;/p&gt;

&lt;p&gt;In it, he explains the basics of tmux and the main differences with &lt;code&gt;screen&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Tags: cody, hawk-host, tmux, how-to&lt;/p&gt;

&lt;h2 id=&#34;thermodynamics-and-garbage-collection&#34;&gt;Thermodynamics and Garbage Collection&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.pipeline.com/~hbaker1/ThermoGC.html&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; by Henry G. Baker that explains the analogy of the garbage collection (&amp;ldquo;a freezer&amp;rdquo;) and thermodynamics, where the state mutator (th program, also an oven) modifies the garbage heap and introduces / extracts entropy into the system.&lt;/p&gt;

&lt;p&gt;Comparison between entropy and lack of information, using the theories from Shannon, Maxwell-Boltzmann. There&amp;rsquo;s a reference to the knapsack problem and to simulated annealing.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a gentle introduction to thermodynamics in layman terms: heat, temperature, microstates, macrostates, reversability, etc.&lt;/p&gt;

&lt;p&gt;In this paper it is also reflected (in macro vs micro states) that the sum all parts is simpler than the single ones (i.e., Information Hiding)&lt;/p&gt;

&lt;p&gt;Tags: henry-baker, thermodynamics, microstate, macrostate, analogy, simulated-annealing, garbage-collection, shannon, information, maxwell-boltzmann, freezer, oven, entropy&lt;/p&gt;

&lt;h2 id=&#34;how-we-ended-up-with-microservices&#34;&gt;How we ended up with microservices&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://philcalcado.com/2015/09/08/how_we_ended_up_with_microservices.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, by Phil Calçado, where he talks about his stay at SoundCloud:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the value stream map: from X days to Y&lt;/li&gt;
&lt;li&gt;reorganizing teams into service teams&lt;/li&gt;
&lt;li&gt;conway&amp;rsquo;s law and teams being responsible for support. Also, being given full authority&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: phil-calcado, soundcloud, microservice, team-split, value-stream-mapping, conversion, reorganization&lt;/p&gt;

&lt;h2 id=&#34;lisp-is-still-a-secret-weapon&#34;&gt;Lisp is still a secret weapon&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://kep.io/is-lisp-still-a-secret-weapon/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Judd Keppel where he explains it is a good idea that Clojure / ClojureScript continues to be a secret, not known among developers. Cites the article &amp;lsquo;Beating the averages&amp;rsquo; by Paul Graham and the amount of available packages in npm, maven central, etc&lt;/p&gt;

&lt;p&gt;Tags: paul-graham, judd-keppel, clojure, clojurescript, weapon, developer&lt;/p&gt;

&lt;h2 id=&#34;perceptron&#34;&gt;Perceptron&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://en.wikipedia.org/wiki/Perceptron&#34; target=&#34;_blank&#34;&gt;this wikipedia&lt;/a&gt; article that explains the single-layer and multi-layer perceptron. First designed to be a machine (hardware), but later an algorithm for supervised machine learning. Worked by Minsky &amp;amp; Papert and invented by Frank Rosenblatt in 1958.&lt;/p&gt;

&lt;p&gt;Tags: peceptron, artificial-intelligence, machine-learning, frank-rosenblatt, 1958, marvin-minsky, seymour-papert&lt;/p&gt;

&lt;h2 id=&#34;is-c-a-strongly-typed-or-a-weakly-typed-language&#34;&gt;Is C# a strongly typed or a weakly typed language?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ericlippert.com/2012/10/15/is-c-a-strongly-typed-or-a-weakly-typed-language/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, in the form of a dialogue between Eric Lippert and himself about the C# language and its type system.&lt;/p&gt;

&lt;p&gt;Tags: type-system, c-sharp, eric-lippert, dialogue, strongly-typed, weakly-typed, language&lt;/p&gt;

&lt;h2 id=&#34;diseño-por-contratos-construyendo-software-confiable&#34;&gt;Diseño por contratos: construyendo software confiable&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.revista.unam.mx/vol.4/num5/art11/sep_art11.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; that explains design by contract, based on the Hoare triplet, pre-post condition, method and class invariant. With examples in Eiffel, Java about a package sender company. Also explains pre/post with inheritance. By Gerardo Rossel and Andrea Manna. In Spanish.&lt;/p&gt;

&lt;p&gt;Tags: gerardo-rossel, andrea-manna, design-by-contract, unam-mx, eiffel, java, precondition, postcondition, trust, quality, hoare-triplet, method-invariant, class-invariant&lt;/p&gt;

&lt;h2 id=&#34;the-inevitable-return-of-cobol&#34;&gt;The Inevitable Return of COBOL&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.hackerrank.com/the-inevitable-return-of-cobol/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that explains the current state of COBOL in programming and systems. Written by Ritika Trikha&lt;/p&gt;

&lt;p&gt;Tags: ritika-trikha, cobol, programming-language, retirement, median-age&lt;/p&gt;

&lt;h2 id=&#34;the-risky-eclipse-of-statisticians&#34;&gt;The Risky Eclipse of Statisticians&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.hackerrank.com/the-risky-eclipse-of-statisticians/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; where Ritika Trikha explains the current situation regarding Big Data and the statiscian jobs. How Big Data is in demand but the latter are not and what effects this might have.&lt;/p&gt;

&lt;p&gt;Tags: ritika-trikha, bootcamp, programming, hiring, big-data, analysis, statistics&lt;/p&gt;

&lt;h2 id=&#34;give-it-five-minutes&#34;&gt;Give it five minutes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://signalvnoise.com/posts/3124-give-it-five-minutes&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jason Fried where he explains why we should give ideas time to sink in and marinate, before dismissing them. Ideas are so fragile that it is better to let them live for a while before dismissing them. This also applies for thoughts (other people&amp;rsquo;s or your own).&lt;/p&gt;

&lt;p&gt;Tags: jason-fried, idea, think, startup, blue-hat, thinking-hat,  six-thinking-hats, red-hat&lt;/p&gt;

&lt;h2 id=&#34;reading-clojure-stacktraces&#34;&gt;Reading Clojure Stacktraces&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jayfields.com/2012/06/reading-clojure-stacktraces.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jay Fields on reading clojure stacktraces. Very similar to &amp;ldquo;Clojure Stack Traces for the Uninitiated&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: jay-fields, clojure, stacktrace&lt;/p&gt;

&lt;h2 id=&#34;clojure-stack-traces-for-the-uninitiated&#34;&gt;Clojure Stack Traces for the Uninitiated&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/connor-mendenhall/2014/09/12/clojure-stacktraces.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how to interpret clojure stacktraces. Written by Connor Mendenhall&lt;/p&gt;

&lt;p&gt;Tags: connor-mendenhall, clojure, stacktrace&lt;/p&gt;

&lt;h2 id=&#34;javascript-type-inference&#34;&gt;JavaScript type inference&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve found (and played) with &lt;a href=&#34;http://www.ccs.neu.edu/home/dimvar/jstypes.html&#34; target=&#34;_blank&#34;&gt;this JavaScript type inference engine&lt;/a&gt;. Written in Javascript (and available online). Written by Dimitrios Vardoulakis.&lt;/p&gt;

&lt;p&gt;Tags: javascript-type-inference, type-inference, type-inference-algorithm, dimitrios-vardoulakis, cfa2&lt;/p&gt;

&lt;h2 id=&#34;alternatives-to-boolean-parameters&#34;&gt;Alternatives to boolean parameters&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/dariusz-pasciak/2015/05/28/alternatives-to-boolean-parameters.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining alternatives to sending a boolean parameter to decide on the contents of the function. Written by Dariusz Pasciak&lt;/p&gt;

&lt;p&gt;As I heard some time ago, if a function receives a boolean to decide on what to do, it will for sure have more than one responsibility: one for the false value and one for the true value.&lt;/p&gt;

&lt;p&gt;Tags: dariusz-pasciak, boolean, srp, boolean-parameter&lt;/p&gt;

&lt;h2 id=&#34;why-are-web-uploads-so-painful&#34;&gt;Why Are Web Uploads So Painful?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/why-are-web-uploads-so-painful/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on web uploads being painful. By Jeff Atwood. The screenshots feel old (2007) and some of the problems have already been solved.&lt;/p&gt;

&lt;p&gt;Tags: jeff-atwood, article, upload, browser&lt;/p&gt;

&lt;h2 id=&#34;can-your-team-pass-the-elevator-test&#34;&gt;Can Your Team Pass The Elevator Test?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/can-your-team-pass-the-elevator-test/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the elevator test by Jeff Atwood.&lt;/p&gt;

&lt;p&gt;Tags: jeff-atwood, article, elevator-test, assumption, microsoft-bob, vision, product, feature&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-Study in August 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</link>
      <pubDate>Sun, 02 Aug 2015 21:45:19 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/08/02/self-study-in-august-2015/</guid>
      <description>

&lt;h2 id=&#34;humble-object&#34;&gt;Humble Object&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the &lt;a href=&#34;http://xunitpatterns.com/Humble%20Object.html&#34; target=&#34;_blank&#34;&gt;Humble Object&lt;/a&gt; list of patterns, by Gerard Meszaros, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;humble dialog&lt;/li&gt;
&lt;li&gt;humble executable&lt;/li&gt;
&lt;li&gt;humble transaction controller&lt;/li&gt;
&lt;li&gt;humble container adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tags: pattern, gerard-meszaros&lt;/p&gt;

&lt;h2 id=&#34;how-you-know&#34;&gt;How you know&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve reread &lt;a href=&#34;http://www.paulgraham.com/know.html&#34; target=&#34;_blank&#34;&gt;this small essay&lt;/a&gt; by Paul Graham on storing information in our heads, based on the context. On the importance of rereading, to add more contexts to the initial one.&lt;/p&gt;

&lt;p&gt;Tags: paul-graham, reread, read&lt;/p&gt;

&lt;h2 id=&#34;protected-variation-the-importance-of-being-closed&#34;&gt;Protected Variation: The Importance of Being Closed&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.martinfowler.com/ieeeSoftware/protectedVariation.pdf&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Craig Larman in the magazine IEEE Software &amp;gt; Design.&lt;/p&gt;

&lt;p&gt;Discusses Information Hiding, Protected Variation and the Open-Closed Principle.&lt;/p&gt;

&lt;p&gt;Tags: craig-larman, ocp, open-closed principle, design, information-hiding, ih, protected-variation, pv,&lt;/p&gt;

&lt;h2 id=&#34;lambda-javascript-micro-services-on-aws&#34;&gt;Lambda, Javascript Micro-Services on AWS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.jayway.com/2014/12/18/lambda-javascript-micro-services-aws/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; explaining how to deploy a microservice on AWS on top of Lambda. Written by Anders Janmyr&lt;/p&gt;

&lt;p&gt;The cool thing is that you get billed by milliseconds!&lt;/p&gt;

&lt;p&gt;Tags: anders-janmyr, devops, microservice, lambda, aws&lt;/p&gt;

&lt;h2 id=&#34;migrating-to-clojure-so-much-fn&#34;&gt;Migrating To Clojure. So Much Fn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=Hv4slaRydRM&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Jan Stępień where he talks about his experience on migrating part of an application to clojure from ruby on rails&lt;/p&gt;

&lt;p&gt;Tags: jan-stepien, clojure, migration, ruby-on-rails, talk, wrocloverb&lt;/p&gt;

&lt;h2 id=&#34;te-recomiendo-escribir-en-un-blog&#34;&gt;Te recomiendo escribir en un blog&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/07/te-recomiendo-escribir-en-un-blog/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; from Carlos Blé in which he recommends writing a blog, on things we discover along the way. (Spanish)&lt;/p&gt;

&lt;p&gt;Tags: carlos-ble, meta, blog, long-way&lt;/p&gt;

&lt;h2 id=&#34;we-need-enough-technical-debt&#34;&gt;We need enough technical debt&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.svpino.com/2015/08/05/we-need-enough-technical-debt&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why we need to accumulate a bit of technical debt, as a way of being less perfectionist and deliver more features / value to our stakeholders. Written by Santiago L. Valdarrama.&lt;/p&gt;

&lt;p&gt;Tags: santiago-valdarrama, technical-debt, perfectionism&lt;/p&gt;

&lt;h2 id=&#34;escribe-mejores-tests-en-javascript&#34;&gt;Escribe mejores tests en Javascript&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://carlosvillu.com/escribe-mejores-tests-en-javascript/&#34; target=&#34;_blank&#34;&gt;this list&lt;/a&gt; of tips to write better javascript tests (Spanish). By Carlos Villuendas&lt;/p&gt;

&lt;p&gt;Tags: carlos-villuendas, javascript, test&lt;/p&gt;

&lt;h2 id=&#34;down-the-rabbit-hole&#34;&gt;Down the Rabbit Hole&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole&#34; target=&#34;_blank&#34;&gt;this wiki&lt;/a&gt; page on how to tune some aspects of the server hotspot JVM, by Brett Wooldridge&lt;/p&gt;

&lt;p&gt;Tags: performance, jvm, hotspot, inline, bytecode, brett-wooldridge&lt;/p&gt;

&lt;h2 id=&#34;xp-manchester-lightning-talks-2015-live-broadcast&#34;&gt;XP Manchester Lightning Talks 2015 Live broadcast&lt;/h2&gt;

&lt;p&gt;I have watched the first two &lt;a href=&#34;https://www.youtube.com/watch?v=VD4UEW2i7hU&#34; target=&#34;_blank&#34;&gt;lightning talks&lt;/a&gt; from XP Manchester, edition number 61.&lt;/p&gt;

&lt;p&gt;Tags: lightning-talk, broadcast, simplicity, manchester, 2015&lt;/p&gt;

&lt;h2 id=&#34;counting-hash-collisions-with-the-birthday-paradox&#34;&gt;Counting hash collisions with the birthday paradox&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://matt.might.net/articles/counting-hash-collisions/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the birthday paradox, or the percentage of chance of people sharing the same birthday. This could be applied to hash function, as the title says, but is not included in the article. Written by Matt Might&lt;/p&gt;

&lt;h2 id=&#34;why-i-m-the-best-programmer-in-the-world&#34;&gt;Why I&amp;rsquo;m The Best Programmer In The World*&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/why-im-the-best-programmer-in-the-world/&#34; target=&#34;_blank&#34;&gt;this ironically-titled article&lt;/a&gt; by Jeff Atwood on humility and how to improve as a programmer.&lt;/p&gt;

&lt;p&gt;Tags: jeff-atwood&lt;/p&gt;

&lt;h2 id=&#34;the-key-to-giving-and-receiving-negative-feedback&#34;&gt;The Key to Giving and Receiving Negative Feedback&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hbr.org/2015/08/the-key-to-giving-and-receiving-negative-feedback?&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joseph Grenny about how to give and receive negative feedback. It is exemplified by the plant manager who was expecting another kind of feedback from his subordinates and was surprised by their negative feedback.&lt;/p&gt;

&lt;p&gt;Tags: joseph-grenny, negative-feedback, feedback, by-example&lt;/p&gt;

&lt;h2 id=&#34;testing-clojure-web-applications-with-kerodon&#34;&gt;Testing Clojure web applications with Kerodon&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://semaphoreci.com/community/tutorials/testing-clojure-web-applications-with-kerodon&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; on how to test compojure-based applications with kerodon. Written by Nebojša Stričević&lt;/p&gt;

&lt;p&gt;Tags: nebojsa-stricevic, compojure, kerodon, clojure, testing, guide&lt;/p&gt;

&lt;h2 id=&#34;using-the-option-type-effectively&#34;&gt;Using The Option Type Effectively&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/uku-taht/2015/04/29/using-the-option-type-effectively.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how to use the &lt;code&gt;Option&lt;/code&gt; type (in rust), similar to &lt;code&gt;Optional&lt;/code&gt; in java or &lt;code&gt;Maybe&lt;/code&gt; in haskell. Written by Uku Taht.&lt;/p&gt;

&lt;p&gt;Tags: uku-taht, option, maybe, optional, rust&lt;/p&gt;

&lt;h2 id=&#34;when-should-you-think&#34;&gt;When Should You Think?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2014/03/11/when-to-think.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Robert C Martin on when to think and the hypothesis that TDD does not allow you to think before coding.&lt;/p&gt;

&lt;p&gt;Tags: tdd, robert-c-martin, design, hypothesis&lt;/p&gt;

&lt;h2 id=&#34;orthogonal-latin-squares-an-application-of-experiment-design-to-compiler-testing&#34;&gt;Orthogonal latin squares: an application of experiment design to compiler testing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://barbie.uta.edu/~mehra/20_an%20application%20of%20experiment%20design%20to%20compiler%20testing.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; by Robert Mandl on techniques that can be applied to reduce the burden of exhaustive testing to compilers. Preferring &amp;ldquo;surely all relevant distinct combinations&amp;rdquo; we can reduce the amount of testing. This paper tries to formalize the concept of &amp;ldquo;near-exhaustive testing&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Tags: latin-square, robert-mandl, compiler, testing, near-exhaustive-testing, optimization, exhaustive-testing&lt;/p&gt;

&lt;p&gt;##  Practical Type System Benefits&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://themonadreader.files.wordpress.com/2014/04/nccb.pdf&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Neil Brown on benefits of the type system, with examples in haskell. He goes on to explore the benefits of involving the type-checker at compile time to remove type errors and ease the programming effort:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I find that several problems in Haskell can be solved by involving the type system
further: The trick is to involve the type system in ways that provide a big benefit
for the cost, but not going so far that the type system gets in the way of code
that you know &amp;ndash;but can’t easily prove to the compiler&amp;ndash; is safe&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve also learned the concept of the quasi-quoter: similar to a preprocessor, executed at compile time and type-checked&lt;/p&gt;

&lt;p&gt;Tags: neil-brown, quote, quasi-quoter, preprocessor, haskell, monad-reader&lt;/p&gt;

&lt;h2 id=&#34;clojurescript-and-the-blub-paradox&#34;&gt;ClojureScript and the Blub Paradox&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this article comparing javascript and clojurescript using the fizzbuzz kata. There is a nice example of the pattern matching for the cases (i.e. &amp;ldquo;switch&amp;rdquo;) of the fizz, buzz. Written by Nate Wildermuth&lt;/p&gt;

&lt;p&gt;Tags: clojurescript, javascript, fizzbuzz, kata, nate-wildermuth&lt;/p&gt;

&lt;h2 id=&#34;no-malinterpretes-tu-carrera&#34;&gt;No malinterpretes tu carrera&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2011/02/no-malinterpretes-tu-carrera/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on (not) changing careers from programmer to designer, analyst, team manager. About the programmer&amp;rsquo;s passion and why not to misinterpret your career. Written by Carlos Blé. In Spanish.&lt;/p&gt;

&lt;p&gt;Tags: carlos-ble, career, programming, management, career-change&lt;/p&gt;

&lt;h2 id=&#34;just-haskell-or-nothing&#34;&gt;Just Haskell or Nothing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://cheecheeo.github.io/just_haskell_or_nothing.html&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; on packaging values in (Just a) or Nothing for possibly failed computations in haskell. Written by John Chee&lt;/p&gt;

&lt;p&gt;Tags: john-chee, haskell, just, nothing, maybe, functor&lt;/p&gt;

&lt;h2 id=&#34;tracking-joy-at-work&#34;&gt;Tracking Joy at Work&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://begriffs.com/posts/2015-03-15-tracking-joy-at-work.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about quantifying happiness at the office (or at work). Joe Nelson, the author of the article, uses the quantifying method described int the book &lt;a href=&#34;http://www.amazon.com/Experience-Sampling-Method-Measuring-Everyday/dp/1412925576/&#34; target=&#34;_blank&#34;&gt;Experience Sampling Method&lt;/a&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Experience_sampling_method&#34; target=&#34;_blank&#34;&gt;wikipedia page&lt;/a&gt;) by Hektner, Schmidt, Csikszentmihalyi.&lt;/p&gt;

&lt;p&gt;The last one, not coincidentally is the author of &lt;a href=&#34;http://www.amazon.com/Flow-The-Psychology-Optimal-Experience/dp/0061339202&#34; target=&#34;_blank&#34;&gt;Flow: The Psychology of Optimal Experience&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tags: mihaly-csikszentmihalyi, flow, quantification, data, experience-sampling, article, joe-nelson&lt;/p&gt;

&lt;h2 id=&#34;going-write-only&#34;&gt;Going &amp;ldquo;Write-Only&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://begriffs.com/posts/2015-04-20-going-write-only.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Joe Nelson on going &amp;ldquo;write-only&amp;rdquo; on social media, blogs, news, etc, as opposed to read-only (only consuming media) or read-write (consuming and producing). He cites another programmer, &lt;a href=&#34;http://joey.hess.usesthis.com/&#34; target=&#34;_blank&#34;&gt;Joey Hess&lt;/a&gt; and about the quality and durability of your work.&lt;/p&gt;

&lt;p&gt;Tags: article, joe-nelson, write-only, social-media, reading, philosophy, thoreau, nietzsche, joey-hess&lt;/p&gt;

&lt;h2 id=&#34;create-a-static-site-with-hakyll-github-and-travis-ci&#34;&gt;Create a static site with Hakyll, Github and Travis CI&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://begriffs.com/posts/2014-08-12-create-static-site-with-hakyll-github.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on how to create your blog with hakyll and travis ci. Written by Joe Nelson&lt;/p&gt;

&lt;p&gt;Travis ci is used to do continuous integration and automatically deploy each commit to production (github pages).&lt;/p&gt;

&lt;p&gt;Tags: hakyll, haskell, joe-nelson, meta, blog, continuous-deployment, github, github-pages, travis-ci&lt;/p&gt;

&lt;h2 id=&#34;falling-in-love-with-computer-science&#34;&gt;Falling in Love with Computer Science&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=haxusGuUyt4&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Kathy Pham, an American that discovered her passion, her love to computer science a few years ago. She tells the events around computer science from the beginning of college to the current moment.&lt;/p&gt;

&lt;p&gt;Tags: kathy-pham, passion, love, computer-science, autobiography, time-lapse, google-developers&lt;/p&gt;

&lt;h2 id=&#34;duck-typing&#34;&gt;Duck Typing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=h0rTF__RNo4&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Dan Grossman, part of the &lt;a href=&#34;https://www.coursera.org/course/proglang&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Programming Languages&amp;rdquo; MOOC&lt;/a&gt;, in which he explains what is a Duck Type and how to use (and abuse) them in ruby.&lt;/p&gt;

&lt;p&gt;Tags: ruby, dan-grossman, mooc, mooc-programming-languages&lt;/p&gt;

&lt;h2 id=&#34;not-so-private-clojure-functions&#34;&gt;Not-So-Private Clojure Functions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://christophermaier.name/blog/2011/04/30/not-so-private-clojure-functions&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; explaining how to bypass private functions in clojure: either create a lambda or create a different namespace. Written by Christopher Maier&lt;/p&gt;

&lt;p&gt;Tags: private-variable, clojure, testing, joy-of-clojure, christopher-maier, private-function, namespace&lt;/p&gt;

&lt;h2 id=&#34;frege-and-clojure&#34;&gt;Frege (and Clojure)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://seancorfield.github.io/blog/2015/02/13/frege-and-clojure/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; that tells the Pragmatic Programmer&amp;rsquo;s advice to learn a new language every year and the author (Sean Corfield) explains his trajectory learning them. He also cites the Lein plugin he&amp;rsquo;s built: &lt;code&gt;lein-fregec&lt;/code&gt; and how to connect clojure and frege (a.k.a JVM&amp;rsquo;s haskell).&lt;/p&gt;

&lt;p&gt;Tags: haskell, frege, jvm, clojure, ffi, pragmatic-programmer, advice, lein-fregec,  sean-corfield, comparison&lt;/p&gt;

&lt;h2 id=&#34;two-months-early-300k-under-budget&#34;&gt;Two months early. 300k under budget&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://thoughtworks.github.io/p2/issue09/two-months-early/&#34; target=&#34;_blank&#34;&gt;the tale&lt;/a&gt; of a Thoughtworks Project Manager who convinced his client to start using clojure to deliver a custom-made CMS. Written by Dave Elliman.&lt;/p&gt;

&lt;p&gt;Tags: dave-elliman, thoughtworks, project-manager, clojure, cms, microservice&lt;/p&gt;

&lt;h2 id=&#34;convince-your-boss-to-use-clojure&#34;&gt;Convince your boss to use Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.lispcast.com/convince-your-boss-to-use-clojure&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; by Eric Normand on how to convince your boss or your company to start using clojure.&lt;/p&gt;

&lt;p&gt;Tags: company, clojure, eric-normand, how-to, guide&lt;/p&gt;

&lt;h2 id=&#34;a-brief-introduction-to-prolog&#34;&gt;A brief introduction to Prolog&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://docs.google.com/presentation/d/1NAUo8nWLfNvvW3Wb7HJMunljjDJbzu7mo-5twKeGDvc/edit#slide=id.g63daf4745_0_56&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about a brief introduction to prolog and how to do web development in it. By Jaelle Scheuerman&lt;/p&gt;

&lt;p&gt;Tags: jaelle-scheuerman, prolog, web-development, rest, slide&lt;/p&gt;

&lt;h2 id=&#34;arrayzing-the-javascript-array-cheatsheet&#34;&gt;Arrayzing - The JavaScript array cheatsheet&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://gist.github.com/ourmaninamsterdam/1be9a5590c9cf4a0ab42&#34; target=&#34;_blank&#34;&gt;this cheatsheet&lt;/a&gt; for javascript arrays. Written by Justin Perry&lt;/p&gt;

&lt;p&gt;Tags: cheatsheet, array, javascript, gist, justin-perry&lt;/p&gt;

&lt;h2 id=&#34;some-words-on-lazy-evaluation-and-sharing&#34;&gt;Some words on lazy evaluation and sharing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://pseudo.fixme.fi/~opqdonut/blog/Some_words_on_lazy_evaluation_and_sharing.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; comparing the &lt;code&gt;fix&lt;/code&gt; definition with a hand-made one and its &amp;ldquo;sharing&amp;rdquo; problems. Written by Joel E. Kaasinen&lt;/p&gt;

&lt;p&gt;Tags: joel-kaasinen, haskell, fix, sharing, non-strictness, lazy-evaluation&lt;/p&gt;

&lt;h2 id=&#34;hammock-driven-development&#34;&gt;Hammock Driven Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=f84n5oFoZBc&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Rich Hickey. A few notes:&lt;/p&gt;

&lt;p&gt;A: identifying a problem that we&amp;rsquo;re trying to solve&lt;/p&gt;

&lt;p&gt;D: assessing if the proposed solution solves the problem&lt;/p&gt;

&lt;p&gt;the union of the features is not the purpose of the product / is not the product&lt;/p&gt;

&lt;p&gt;proramming is not completing features&lt;/p&gt;

&lt;p&gt;avoiding problems /= solving problems&lt;/p&gt;

&lt;p&gt;book: how to solve it - G. Polya. Practices &amp;amp; techniques for solving mathematic problems&lt;/p&gt;

&lt;p&gt;How to solve the problem&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;state the problem&lt;/li&gt;
&lt;li&gt;understand the problem:

&lt;ul&gt;
&lt;li&gt;what do you know: facts, context, constraints.&lt;/li&gt;
&lt;li&gt;what do you don&amp;rsquo;t know&lt;/li&gt;
&lt;li&gt;are there related problems? solutions to related problems. find an analogy: starting from scratch vs incremental step&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;be discerning&lt;/li&gt;
&lt;li&gt;more input, better output:

&lt;ul&gt;
&lt;li&gt;read about your domain problem, research papers (maybe ACM)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;tradeoffs:

&lt;ul&gt;
&lt;li&gt;find at least two options (ups and downs) to compare before taking a decision&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Focus time for programmers like alone time for kids. Hammock time is important mind&amp;rsquo;s eye time&lt;/p&gt;

&lt;p&gt;Waking mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;critical thinking&lt;/li&gt;
&lt;li&gt;analysis&lt;/li&gt;
&lt;li&gt;tactics&lt;/li&gt;
&lt;li&gt;prone to local maxima&lt;/li&gt;
&lt;li&gt;feed work to background mind&lt;/li&gt;
&lt;li&gt;analyze its products&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Background mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;making connections&lt;/li&gt;
&lt;li&gt;synthesis&lt;/li&gt;
&lt;li&gt;strategy&lt;/li&gt;
&lt;li&gt;abstracts, analogies&lt;/li&gt;
&lt;li&gt;solves most non-trivial problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;loading it: work it hard in the waking mind to be included in the background mind&lt;/p&gt;

&lt;p&gt;abstraction = software strategy&lt;/p&gt;

&lt;p&gt;tip: small answer is better than big answer (occam&amp;rsquo;s razor?)​&lt;/p&gt;

&lt;p&gt;Tags: rich-hickey, hammock-driven-development, background-mind, waking-mind, solve-problem, george-polya, book, analysis, design, talk&lt;/p&gt;

&lt;h2 id=&#34;parallelism-concurrency&#34;&gt;Parallelism /= Concurrency&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://ghcmutterings.wordpress.com/2009/10/06/parallelism-concurrency/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the differences between parallelism and concurrency, with examples in the haskell compiler GHC. Written by &lt;a href=&#34;https://ghcmutterings.wordpress.com/author/simonmar/&#34; target=&#34;_blank&#34;&gt;simonmar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: haskell, concurrency, parallelism, ghc, simonmar, comparison&lt;/p&gt;

&lt;h2 id=&#34;parallelism-vs-concurrency&#34;&gt;Parallelism vs. Concurrency&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://wiki.haskell.org/Parallelism_vs._Concurrency&#34; target=&#34;_blank&#34;&gt;this page&lt;/a&gt; from the haskell wiki.&lt;/p&gt;

&lt;p&gt;Tags: haskell, concurrency, parallelism, ghc, comparison&lt;/p&gt;

&lt;h2 id=&#34;writing-code-that-writes-code-with-hack-codegen&#34;&gt;Writing code that writes code — with Hack Codegen&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://code.facebook.com/posts/1624644147776541/writing-code-that-writes-code-with-hack-codegen/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about metaprogramming (code that generates code) in PHP. Written by Alejandro Marcu.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve arrived to this from this tweet:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-cards=&#34;hidden&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;This is what happens when your programming language doesn&amp;#39;t have macros &lt;a href=&#34;https://t.co/ZfsEe2EJIj&#34;&gt;https://t.co/ZfsEe2EJIj&lt;/a&gt;. Yuck.&lt;/p&gt;&amp;mdash; David Nolen (@swannodette) &lt;a href=&#34;https://twitter.com/swannodette/status/634495099607613440&#34;&gt;August 20, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Tags: alejandro-marcu, metaprogramming, php, macro, lisp, clojure&lt;/p&gt;

&lt;h2 id=&#34;how-katas-can-help-you-learn&#34;&gt;How katas can help you learn&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://codurance.com/2015/08/18/How-katas-can-help-you-learn/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on learning from katas, with the example of the Roman Numerals kata in Objective-C. Written by Sandro Mancuso.&lt;/p&gt;

&lt;p&gt;Tags: sandro-mancuso, kata, learning, roman-numeral, objective-c&lt;/p&gt;

&lt;h2 id=&#34;java-8-definitive-guide-to-completablefuture&#34;&gt;Java 8: Definitive guide to CompletableFuture&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.nurkiewicz.com/2013/05/java-8-definitive-guide-to.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about Java 8&amp;rsquo;s feature, the &lt;code&gt;CompletableFeature&lt;/code&gt;. Written by Tomasz Nurkiewicz&lt;/p&gt;

&lt;p&gt;Tags: tomasz-nurkiewicz, java-8, completable-future, future, non-blocking, reactive-programming&lt;/p&gt;

&lt;h2 id=&#34;are-you-making-these-10-ddd-mistakes&#34;&gt;Are You Making These 10 DDD Mistakes?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://danielwhittaker.me/2015/07/05/are-you-making-these-10-ddd-mistakes/#&#34; target=&#34;_blank&#34;&gt;this infographic&lt;/a&gt; on 10 DDD common mistakes, by Daniel Whittaker.&lt;/p&gt;

&lt;p&gt;Tags: ddd, daniel-whittaker, bounded-context, ubiquitous-language, infographic&lt;/p&gt;

&lt;h2 id=&#34;haste-full-stack-haskell-for-non-phd-candidates&#34;&gt;Haste: Full-Stack Haskell for Non-PhD Candidates&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=3v03NFcyvzc&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; at the Strange Loop Conference 2014 about Haste language, a haskell version that compiles to javascript, therefore letting you write haskell in the browser. By Erin Swenson-Healey and James Cooper&lt;/p&gt;

&lt;p&gt;In this talk they recommend the &lt;a href=&#34;http://www.seas.upenn.edu/~cis194/lectures.html&#34; target=&#34;_blank&#34;&gt;CIS194 course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: haste, haskell, james-cooper, erin-swenson-healey, strange-loop, 2014, talk&lt;/p&gt;

&lt;h2 id=&#34;a-year-of-haskell&#34;&gt;A Year of Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=wZ0RQG3mFPw&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; about experiences using haskell professionally, by the American Justin Leitgeb in a Equatorian company in Quito, Stack Builders. He goes on to explain the haskell language in comparison to ruby on rails, what he mostly used with his clients.&lt;/p&gt;

&lt;p&gt;Also explains what sells and doesn&amp;rsquo;t (mostly productivity, not security) and gives pointer for applying it to a company&lt;/p&gt;

&lt;p&gt;Tags: justin-leitgeb, ecuador, haskell, stack-builders, lambda-days, 2015, client, professional, consulting, consultancy&lt;/p&gt;

&lt;h2 id=&#34;a-taste-of-haskell&#34;&gt;A Taste of Haskell&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched a lesson by Simon Peyton-Jones, that introduces haskell to experienced programmers, not in the language but in programming in general. At the conference OSCON 2007&lt;/p&gt;

&lt;p&gt;Links: &lt;a href=&#34;https://www.youtube.com/watch?v=jLj1QV11o9g&#34; target=&#34;_blank&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=IqXTUbdLig0&#34; target=&#34;_blank&#34;&gt;part 2&lt;/a&gt;, &lt;a href=&#34;http://www.slideshare.net/oscon2007/os-peytonjones&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags: oscon, 2007, haskell, introduction, lesson, simon-peyton-jones&lt;/p&gt;

&lt;h2 id=&#34;programming-why-haskell-is-great&#34;&gt;Programming - Why Haskell is Great&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://www.youtube.com/watch?v=RqvCNb7fKsg&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; introducing some features of haskell. The most basic features, the REPL,  function composition. By FrungyKing&lt;/p&gt;

&lt;p&gt;Tags: haskell, introduction, video, screencast, repl, frungyking&lt;/p&gt;

&lt;h2 id=&#34;history-of-haskell-being-lazy-with-class&#34;&gt;History of Haskell: being lazy with class&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=3bjXGrycMhQ&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Simon Peyton-Jones at the &amp;ldquo;History of Programming Languages Conference III&amp;rdquo; which explains how the language was designed and written, a language timeline, what options they took, how they decided about monadic IO, etc.&lt;/p&gt;

&lt;p&gt;Tags: simon-peyton-jones, 2007, history-of-programming-languages-conference, haskell, talk&lt;/p&gt;

&lt;h2 id=&#34;the-humble-programmer&#34;&gt;The Humble Programmer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.cs.utexas.edu/users/EWD/transcriptions/EWD03xx/EWD340.html&#34; target=&#34;_blank&#34;&gt;this EWD&lt;/a&gt; about the necessary humbleness for being a programmer and the slow expansion of the trade, as compared to hardware engineers.&lt;/p&gt;

&lt;p&gt;He cites six reasons for preferring to be a humble programmer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the programmer only needs to manage simple programs&lt;/li&gt;
&lt;li&gt;simple programs imply reducing the search space&lt;/li&gt;
&lt;li&gt;construct a program from a mathematical proof instead of test its properties after building the software. see quote below&lt;/li&gt;
&lt;li&gt;a good abstraction can hide much complexity and difficulty&lt;/li&gt;
&lt;li&gt;the importance of the used tool in the final product&lt;/li&gt;
&lt;li&gt;&amp;ldquo;the only problems we can satisfactory solve are the ones that admit a factored solution&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this essay I&amp;rsquo;ve found the idea of&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Testing shows the presence, not the absence of bugs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That &lt;a href=&#34;https://en.wikiquote.org/wiki/Edsger_W._Dijkstra&#34; target=&#34;_blank&#34;&gt;Wikiquote&lt;/a&gt; attributes to an earlier paper (in 1969). In this paper, the verbatim quote is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;program testing can be a very effective way to show the presence of bugs, but is hopelessly inadequate for showing their absence.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This idea also connects to the &amp;ldquo;lower bounds&amp;rdquo; and &amp;ldquo;upper bounds&amp;rdquo; of program correctness expressed in the article &lt;a href=&#34;https://cdsmith.wordpress.com/2011/01/09/an-old-article-i-wrote/&#34; target=&#34;_blank&#34;&gt;An Old Article I Wrote&lt;/a&gt; which is about static types, by Cdsmith. Admittedly, much later, in 2008, so this idea could be inspired by the Dijkstra&amp;rsquo;s article.&lt;/p&gt;

&lt;p&gt;Tags: edsger-dijkstra, ewd, dijkstra, humble-programmer, essay, comparison, absence-of-bugs, quote&lt;/p&gt;

&lt;h2 id=&#34;building-a-link-shortener-with-snaplets&#34;&gt;Building a Link Shortener with Snaplets&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve seen &lt;a href=&#34;https://vimeo.com/59109358&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; of how to build a link shortener webapp in haskell with the framework snap. By Ryan Trinkle. Found it in the &lt;a href=&#34;http://snapframework.com/docs&#34; target=&#34;_blank&#34;&gt;snap docs&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;Tags: snap, haskell, link-shortener, talk, webapp, framework, ryan-trinkle&lt;/p&gt;

&lt;h2 id=&#34;comparing-haskell-web-frameworks&#34;&gt;Comparing Haskell Web Frameworks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.edofic.com/posts/2014-02-23-haskell-web.html&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; of haskell web frameworks, by Andraz Bajt (a.k.a, edofic)&lt;/p&gt;

&lt;p&gt;Tags: andraz-bajt, edofic, haskell, web-framework, framework, comparison&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-study in July 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/</link>
      <pubDate>Wed, 01 Jul 2015 01:08:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/07/01/self-study-in-july-2015/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve grouped all small posts related to the self-study from July 2015 into a single post&lt;/p&gt;

&lt;h2 id=&#34;clojure-made-simple&#34;&gt;Clojure made simple&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=VSdnJDO-xdg&#34; target=&#34;_blank&#34;&gt;this talk&lt;/a&gt; by Rich Hickey at the Java One. It references the talk &lt;a href=&#34;http://www.infoq.com/presentations/Simple-Made-Easy&#34; target=&#34;_blank&#34;&gt;Easy made simple&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;polymorphism without inheritance; single dispatch on the first parameter&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;productive-pair-programming&#34;&gt;Productive pair programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/07/productive-pair-programming/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about pair programming, using the driver &amp;amp; copilot technique, written by Carlos Blé&lt;/p&gt;

&lt;h2 id=&#34;building-automated-rest-apis-with-python&#34;&gt;Building Automated REST APIs with Python&lt;/h2&gt;

&lt;p&gt;Investigating QA automation for REST APIs, I&amp;rsquo;ve read &lt;a href=&#34;http://www.slideshare.net/jeffknupp/building-automated-rest-apis-with-python&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about it&lt;/p&gt;

&lt;h2 id=&#34;backwards-compatibility-testing-for-your-clojure-project&#34;&gt;Backwards Compatibility Testing For Your Clojure Project&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.jenkster.com/2014/02/backwards-compatibility-testing-your-clojure-project.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on making leiningen test the application on several clojure versions. Written by Kris Jenkins.&lt;/p&gt;

&lt;h2 id=&#34;succeeding-with-automated-integration-tests&#34;&gt;Succeeding with Automated Integration Tests&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://jeremydmiller.com/2015/06/25/succeeding_with_integration_testing/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jeremy Miller on integration testing and how to succeed with it. Some notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose the Quickest, Useful Feedback Mechanism, even if that means testing the backend and frontend separately&lt;/li&gt;
&lt;li&gt;Prefer white-box than black-box testing&lt;/li&gt;
&lt;li&gt;Use quick tests, that can be run locally in an easy fashion&lt;/li&gt;
&lt;li&gt;Do not share databases, as they introduce risks of flaky tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;applied-ddd-in-a-java-ee-7-and-open-source-world&#34;&gt;Applied DDD in a Java EE 7 and Open Source World&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=9D_-7E7Mrzw&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Edson Yanaga in the Java One, about DDD using Java EE 7, JSFs and lambdas on top of glassfish&lt;/p&gt;

&lt;h2 id=&#34;integrated-tests-are-a-scam&#34;&gt;Integrated tests are a scam&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read, again, &lt;a href=&#34;http://blog.thecodewhisperer.com/2010/10/16/integrated-tests-are-a-scam/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by J. B. Rainsberger on integrated tests and why not to use them. From a numerical / combinatorics point of view.&lt;/p&gt;

&lt;h2 id=&#34;functional-programming-should-be-your-1-priority-for-2015&#34;&gt;Functional Programming should be your #1 priority for 2015&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/@jugoncalves/functional-programming-should-be-your-1-priority-for-2015-47dd4641d6b9&#34; target=&#34;_blank&#34;&gt;this introduction&lt;/a&gt; to functional programming by Ju Gonçalves. Explains some functional concepts, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First-Class Functions&lt;/li&gt;
&lt;li&gt;High-Order Functions&lt;/li&gt;
&lt;li&gt;Pure Functions&lt;/li&gt;
&lt;li&gt;Closures&lt;/li&gt;
&lt;li&gt;Immutable State&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also recommends a few books on the subject (e.g., SICP, HTDP).&lt;/p&gt;

&lt;h2 id=&#34;a-tutorial-introduction-to-the-lambda-calculus&#34;&gt;A Tutorial Introduction to the Lambda Calculus&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt;, an introduction to the lambda calculus. Haven&amp;rsquo;t done the exercises. Written by Raúl Rojas&lt;/p&gt;

&lt;h2 id=&#34;20-common-mistakes-when-doing-test-driven-development&#34;&gt;20 common mistakes when doing Test-Driven Development&lt;/h2&gt;

&lt;p&gt;I had thought of converting all of &lt;a href=&#34;https://twitter.com/search?q=svpino%20%23tdd%20mistake&amp;amp;src=typd&#34; target=&#34;_blank&#34;&gt;his tweets&lt;/a&gt; into a blog post, but he has already done this for us: I&amp;rsquo;ve read a &lt;a href=&#34;https://blog.svpino.com/2015/05/29/20-common-mistakes-when-doing-test-driven-development&#34; target=&#34;_blank&#34;&gt;list of common mistakes&lt;/a&gt; when doing TDD by &lt;a href=&#34;https://twitter.com/svpino&#34; target=&#34;_blank&#34;&gt;Santiago Pino&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;reducing-coupling&#34;&gt;Reducing coupling&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the article by Martin Fowler &lt;a href=&#34;http://martinfowler.com/ieeeSoftware/coupling.pdf&#34; target=&#34;_blank&#34;&gt;Reducing Coupling&lt;/a&gt; in the IEEE SOFTWARE July/August 2001&lt;/p&gt;

&lt;h2 id=&#34;comparing-java-mock-frameworks-part-2-creating-mock-objects&#34;&gt;Comparing Java Mock Frameworks – Part 2: Creating Mock Objects&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://softwareinabottle.wordpress.com/2010/10/06/comparing-java-mock-frameworks-part-2-creating-mock-objects/&#34; target=&#34;_blank&#34;&gt;List of mock frameworks for java&lt;/a&gt;. Have only read the jMock, mockito and jMockit part.&lt;/p&gt;

&lt;p&gt;## Software Craftsmanship book review&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://meaganwaller.com/software-craftsmanship-book-review/&#34; target=&#34;_blank&#34;&gt;this review&lt;/a&gt; for a book that is already pending in my book list: Software Craftsmanship by Pete McBreen.&lt;/p&gt;

&lt;p&gt;The review has been written by Megan Waller, an (ex-)apprentice at 8th Light.&lt;/p&gt;

&lt;h2 id=&#34;fundamental-concepts-in-programming-languages&#34;&gt;Fundamental concepts in programming languages&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.cs.cmu.edu/~crary/819-f09/Strachey67.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt; containing the contents for lectures in Computer Programming in the year 1967. Written by Christopher Strachey.&lt;/p&gt;

&lt;p&gt;Note: I&amp;rsquo;ve also seen this paper recommended in the repo &lt;a href=&#34;https://github.com/papers-we-love/papers-we-love/tree/master/plt&#34; target=&#34;_blank&#34;&gt;Papers We Love &amp;gt; plt&lt;/a&gt; (Programming Language Theory)&lt;/p&gt;

&lt;h2 id=&#34;what-is-reification&#34;&gt;What is reification?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.angelikalanger.com/GenericsFAQ/FAQSections/TechnicalDetails.html#FAQ101A&#34; target=&#34;_blank&#34;&gt;this FAQ&lt;/a&gt; on reification by Angelika Langer&lt;/p&gt;

&lt;h2 id=&#34;type-erasure&#34;&gt;Type erasure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this wikipedia &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_erasure&#34; target=&#34;_blank&#34;&gt;page on type erasure&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-to-make-an-intellij-idea-plugin-in-less-than-30-minutes&#34;&gt;How to make an IntelliJ IDEA plugin in less than 30 minutes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://bjorn.tipling.com/how-to-make-an-intellij-idea-plugin-in-30-minutes&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on creating new IntelliJ IDEA plugin, by Bjorn Tipling&lt;/p&gt;

&lt;h2 id=&#34;how-to-write-clean-testable-code&#34;&gt;How to Write Clean, Testable Code&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched, again, &lt;a href=&#34;https://www.youtube.com/watch?v=XcT4yYu_TTs&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Miško Hevery. Discusses what are the characteristics of tested and untested code, how to get from one to the other. Discusses techniques for testing code. At the end, there are questions but they cannot be heard (lack of microphone), so it is harder to follow.&lt;/p&gt;

&lt;h2 id=&#34;how-to-find-a-mentor&#34;&gt;How to Find a Mentor&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/letters-to-my-mother/how-to-find-a-mentor-27fb978a8f1&#34; target=&#34;_blank&#34;&gt;this opinion&lt;/a&gt; on the importance of role models and mentors. The difference between them and a personal experience. Written by Joanne Wilson&lt;/p&gt;

&lt;h2 id=&#34;type-theory&#34;&gt;Type theory&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this wiki page on &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_theory&#34; target=&#34;_blank&#34;&gt;type theory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;type systems [&amp;hellip;] language feature used to reduce bugs&amp;rdquo;&lt;/li&gt;
&lt;li&gt;two types: Church&amp;rsquo;s typed λ-calculi and Martin-Löf&amp;rsquo;s intuitionistic type theory.&lt;/li&gt;
&lt;li&gt;notation:

&lt;ul&gt;
&lt;li&gt;typing judgement: &lt;code&gt;M : A&lt;/code&gt;. Term &lt;code&gt;M&lt;/code&gt; has type &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;example: &lt;code&gt;nat&lt;/code&gt; may be a type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 : nat&lt;/code&gt;, like in Scala&lt;/li&gt;
&lt;li&gt;function: &amp;ldquo;arrow&amp;rdquo;&lt;/li&gt;
&lt;li&gt;apply function to argument: no parenthesis&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;conversion rule: rule for rewriting terms

&lt;ul&gt;
&lt;li&gt;reduction rule: conversion rule that only works in one direction&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;normal form: a form that cannot be further reduced&lt;/li&gt;
&lt;li&gt;element: all closed elements that can be reduced to the same normal form&lt;/li&gt;
&lt;li&gt;closed term: a term without parameters. Opposite is an open term&lt;/li&gt;
&lt;li&gt;convertibility: property of terms, both open and closed. Said to be convertible if two terms can be reduced to the same term

&lt;ul&gt;
&lt;li&gt;warning: x + 1 and 1 + x are not convertible because they are in normal form and not the same&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;type-system&#34;&gt;Type system&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read this wiki page on &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_system&#34; target=&#34;_blank&#34;&gt;type system&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;The depth of type constraints and the manner of their evaluation affect the typing of the language&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Type polymorphism&lt;/li&gt;
&lt;li&gt;{compile time, runtime} x {manually annotated, inferred}&lt;/li&gt;
&lt;li&gt;&amp;ldquo;A program associates each value with at least one particular type, but it also can occur that one value is associated with many subtypes.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Classification of types:

&lt;ul&gt;
&lt;li&gt;data type – a type of a value&lt;/li&gt;
&lt;li&gt;class – a type of an object&lt;/li&gt;
&lt;li&gt;kind – a type of a type, or metatype&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;the type inference might be undecidable (for more complex type inference)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Strong typing offers more safety, but cannot guarantee complete type safety.&amp;rdquo; An example is the division by zero, altough some languages may declare a dependent type &amp;ldquo;non-zero numbers&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-3-things-you-should-know-about-hashcode&#34;&gt;The 3 things you should know about hashCode()&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://eclipsesource.com/blogs/2012/09/04/the-3-things-you-should-know-about-hashcode/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the hashCode() method in java, written by Ralf Sternberg.&lt;/p&gt;

&lt;h2 id=&#34;reduce-complexity-with-variants&#34;&gt;Reduce Complexity with Variants&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.lispcast.com/reduce-complexity-with-variants&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on variants in clojure by Eric Normand&lt;/p&gt;

&lt;h2 id=&#34;what-is-new-in-sql-2011&#34;&gt;What is new in SQL:2011&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.sigmod.org/publications/sigmod-record/1203/pdfs/10.industry.zemke.pdf&#34; target=&#34;_blank&#34;&gt;this white paper&lt;/a&gt; on the new features in SQL 2011. Written by Fred Zemke&lt;/p&gt;

&lt;h2 id=&#34;5-error-tracking-tools-java-developers-should-know&#34;&gt;5 Error Tracking Tools Java Developers Should Know&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.javacodegeeks.com/2014/09/5-error-tracking-tools-java-developers-should-know.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about tracking tools for java written by Alex Zhitnitsky, featuring:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Raygun&lt;/li&gt;
&lt;li&gt;Sentry&lt;/li&gt;
&lt;li&gt;Takipi&lt;/li&gt;
&lt;li&gt;Airbrake&lt;/li&gt;
&lt;li&gt;StackHunter&lt;/li&gt;
&lt;li&gt;[Bonus] ABRT&lt;/li&gt;
&lt;li&gt;Comments cite &lt;a href=&#34;http://squash.io&#34; target=&#34;_blank&#34;&gt;Squash&lt;/a&gt; (server written in ruby, java client available) and &lt;a href=&#34;http://rollbar.com&#34; target=&#34;_blank&#34;&gt;Rollbar&lt;/a&gt; (home says supports android but not says anything about java)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;data-clump&#34;&gt;Data clump&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://martinfowler.com/bliki/DataClump.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the bliki, by Martin Fowler&lt;/p&gt;

&lt;h2 id=&#34;np-complete-problems&#34;&gt;NP-Complete problems&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://webdiis.unizar.es/asignaturas/TC/wp/wp-content/uploads/2012/01/L15_NPcompletos.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; by Prof. Elvira Mayordomo about NP-Complete problems, how to reduce them to other problems and practical applications. (In Spanish)&lt;/p&gt;

&lt;h2 id=&#34;removal-of-sun-misc-unsafe-in-java-9-a-disaster-in-the-making&#34;&gt;Removal of sun.misc.Unsafe in Java 9 - A disaster in the making&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.dripstat.com/removal-of-sun-misc-unsafe-a-disaster-in-the-making/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; about the removal of this Unsafe class in Java 9, by the DripStat team&lt;/p&gt;

&lt;h2 id=&#34;how-to-write-directly-to-a-memory-locations-in-java&#34;&gt;How To Write Directly to a Memory Locations In Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://robaustin.wikidot.com/how-to-write-to-direct-memory-locations-in-java&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; on how to write directly to a memory position in java, by Rob Austin&lt;/p&gt;

&lt;h2 id=&#34;interesting-uses-of-sun-misc-unsafe&#34;&gt;Interesting uses of sun.misc.Unsafe&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://bytescrolls.blogspot.com.es/2011/04/interesting-uses-of-sunmiscunsafe.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Haris A.L.&lt;/p&gt;

&lt;h2 id=&#34;introduction-to-the-theory-of-np-completeness&#34;&gt;Introduction to the theory of np-completeness&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.site.uottawa.ca/~lucia/courses/4105-02/np.pdf&#34; target=&#34;_blank&#34;&gt;these notes / slides&lt;/a&gt; to the introductory course of NP-completeness, by Prof Lucia Moura&lt;/p&gt;

&lt;h2 id=&#34;js-code-kata-linked-list&#34;&gt;JS Code Kata: Linked List&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/yitznewton/js-code-kata-linked-list&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; on the kata linked list, by Yitz Schaffer. The slide #13 talks about the transformations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;refactor: change form without changing behavior&lt;/li&gt;
&lt;li&gt;transform: change behavior while changing form as little as possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also about the Transformation Priority Premise (TPP) (also in this month)&lt;/p&gt;

&lt;h2 id=&#34;the-transformation-priority-premise&#34;&gt;The Transformation Priority Premise&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read, again, &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Uncle Bob (Robert C. Martin)&lt;/p&gt;

&lt;h2 id=&#34;data-structures&#34;&gt;Data structures&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the wiki page for&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/SPQR_tree&#34; target=&#34;_blank&#34;&gt;SPQR tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Binary_search_tree&#34; target=&#34;_blank&#34;&gt;BSR tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Red%E2%80%93black_tree&#34; target=&#34;_blank&#34;&gt;Red black tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Judy_array&#34; target=&#34;_blank&#34;&gt;Judy array&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, The &lt;a href=&#34;http://bigocheatsheet.com/&#34; target=&#34;_blank&#34;&gt;Big-O notation complexity cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;on-benchmarks-numbers-every-programmer-should-know-and-their-impact-on-benchmarks&#34;&gt;On benchmarks: Numbers every programmer should know and their impact on benchmarks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://hype-free.blogspot.com/2014/03/on-benchmarks.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; on doing back-of-the-envelope calculations on publicly available benchmarks, written by Attila-Mihaly Balazs&lt;/p&gt;

&lt;h2 id=&#34;top-java-ide-keyboard-shortcuts-for-eclipse-intellij-idea-netbeans&#34;&gt;Top Java IDE Keyboard Shortcuts for Eclipse, IntelliJ IDEA &amp;amp; NetBeans&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://zeroturnaround.com/rebellabs/top-java-ide-keyboard-shortcuts-for-eclipse-intellij-idea-netbeans/&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; on the topic of keyboard shortcuts for java IDEs, written by Oleg Šelajev&lt;/p&gt;

&lt;h2 id=&#34;the-hacker-s-summer-training-guide-part-1&#34;&gt;The hacker’s summer training guide – part 1&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.paymill.com/hackers-training-guide-1&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Paymill, that suggests which new languages to learn this summer: rust, go, elixir, ocaml, scala, livescript.&lt;/p&gt;

&lt;h2 id=&#34;applications-built-extremely-right&#34;&gt;Applications built extremely right&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://apiumtech.com/blog/applications-build-with-outsourcing/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; with a list of candidates for building nice products, written by Xavi Hidalgo.&lt;/p&gt;

&lt;h2 id=&#34;agile-project-seed-infrastructure-by-default&#34;&gt;Agile project seed. Infrastructure by default.&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://apiumtech.com/blog/seed-de-proyecto-agile-infraestructura-por-defecto/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; on an agile seed project. Reminded me of the 12-factor app&lt;/p&gt;

&lt;h2 id=&#34;what-an-agile-developer-should-know&#34;&gt;What an agile developer should know&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.apiumtech.com/blog/lo-que-un-desarrollador-agile-deberia-saber/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Xavi Hidalgo&lt;/p&gt;

&lt;h2 id=&#34;bad-apples-that-can-destroy-a-team&#34;&gt;Bad Apples that can destroy a team&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve listened to &lt;a href=&#34;http://www.scrum-master-toolbox.com/2015/03/podcast/dominic-krimmer-describes-the-types-of-bad-apples-that-can-destroy-a-team/&#34; target=&#34;_blank&#34;&gt;this podcast&lt;/a&gt; about the bad apples in a team. Presented by Vasco Duarte and Dominic Krimmer as the main speaker&lt;/p&gt;

&lt;h2 id=&#34;how-scala-compares-with-20-other-programming-languages-according-to-reddit-analysis&#34;&gt;How Scala compares with 20 other programming languages according to Reddit analysis&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.typesafe.com/blog/how-scala-compares-20-programming-languages-reddit-analysis&#34; target=&#34;_blank&#34;&gt;this analysis&lt;/a&gt; of the language comparison, written by Oliver White&lt;/p&gt;

&lt;h2 id=&#34;javascript-patterns-book-review&#34;&gt;Javascript patterns book review&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.bennadel.com/blog/2047-javascript-patterns-by-stoyan-stefanov.htm&#34; target=&#34;_blank&#34;&gt;this review&lt;/a&gt; by Ben Nadel on the book Javascript Patterns, by Stoyan Stefanov&lt;/p&gt;

&lt;h2 id=&#34;monogamous-tdd&#34;&gt;Monogamous TDD&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blog.8thlight.com/uncle-bob/2014/04/25/MonogamousTDD.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on the fundamentalism of TDD, written by Robert C Martin&lt;/p&gt;

&lt;h2 id=&#34;encapsulating-localstorage-access-in-angularjs&#34;&gt;Encapsulating LocalStorage Access In AngularJS&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.bennadel.com/blog/2861-encapsulating-localstorage-access-in-angularjs.htm&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why encapsulate the access to the localStorage, written by Ben Nadel&lt;/p&gt;

&lt;h2 id=&#34;anatomy-of-a-zero-knowledge-web-application&#34;&gt;Anatomy of a zero-knowledge web application&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://clipperz.is/blog/2007/08/24/anatomy_zero_knowledge_web_application/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on a zero-knowledge web application, by the clipperz team&lt;/p&gt;

&lt;h2 id=&#34;refactorización-de-código-legado-clase-maestra&#34;&gt;Refactorización de Código Legado Clase Maestra&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=VBgCKKevhyI&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; about refactoring a legacy code in C#, by Danijel Arsenovski&lt;/p&gt;

&lt;h2 id=&#34;taming-javaagents&#34;&gt;Taming Javaagents&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://speakerdeck.com/shelajev/taming-javaagents-bcn-jug-2015&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt;, again, from a conference I went to a few months ago about java agents. Written by Oleg Šelajev.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/shelajev/ResourceLeakAgent&#34; target=&#34;_blank&#34;&gt;This&lt;/a&gt; is the repository containing the memory leak agent he talks about&lt;/p&gt;

&lt;h2 id=&#34;mathematics-for-computer-science-lecture-1&#34;&gt;Mathematics for Computer Science, Lecture 1&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched by &lt;a href=&#34;http://xoax.net/comp_sci/crs/math_for_comp_science_mit/lessons/Lecture1/&#34; target=&#34;_blank&#34;&gt;the first recitation&lt;/a&gt; in &lt;a href=&#34;http://xoax.net/comp_sci/crs/math_for_comp_science_mit/index.php&#34; target=&#34;_blank&#34;&gt;this course&lt;/a&gt;, offered by MIT Open Course Ware (OCW). Recited by Tom Leighton&lt;/p&gt;

&lt;h2 id=&#34;programming-abstractions-lecture-7&#34;&gt;Programming Abstractions: Lecture 7&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;http://xoax.net/comp_sci/crs/programming_abstractions_stanford/lessons/Lecture7/&#34; target=&#34;_blank&#34;&gt;this lecture&lt;/a&gt; by Julie Zelensky about the comparison operator, recursion and a live coding session calculating the most ocurring anagram word in a file.&lt;/p&gt;

&lt;p&gt;She uses small outputs to check the correctness of her programs to get short feedback cycles, even if they are manual.&lt;/p&gt;

&lt;h2 id=&#34;5-ways-to-launch-a-jmeter-test-without-using-the-jmeter-gui&#34;&gt;5 Ways To Launch a JMeter Test without Using the JMeter GUI&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://blazemeter.com/blog/5-ways-launch-jmeter-test-without-using-jmeter-gui&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; on using jmeter without a GUI, by Dmitri Tikhanski&lt;/p&gt;

&lt;h2 id=&#34;clojure-unraveled-chapter-5&#34;&gt;Clojure unraveled, chapter 5&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read the &lt;a href=&#34;http://funcool.github.io/clojurescript-unraveled/#language-advanced-topics&#34; target=&#34;_blank&#34;&gt;fifth chapter&lt;/a&gt;, on the topics of Transducers, Transients, Metadata, Macros, Core protocols. Written by Andrey Antukh and Alejandro Gómez&lt;/p&gt;

&lt;h2 id=&#34;a-guide-to-the-basics-of-data-structures&#34;&gt;A guide to the Basics of Data Structures&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://algosaur.us/data-structures-basics/&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; to data structures, covering the stack, the queue, the heap, the tree and the hashmap. Written by Radhika Ghosal&lt;/p&gt;

&lt;h2 id=&#34;government-abandonware&#34;&gt;Government Abandonware&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://techblog.bozho.net/government-abandonware/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; on abandoned, public software that is not opensource. Dubbed by the author as &amp;ldquo;Government Abandonware&amp;rdquo;. Written by Bozhidar Bozhanov&lt;/p&gt;

&lt;h2 id=&#34;the-art-of-incremental-stream-processing&#34;&gt;The Art of Incremental Stream Processing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mth.io/talks/streams/&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; on incremental stream processing. The examples are in haskell and scala. Written by Mark Hibberd&lt;/p&gt;

&lt;h2 id=&#34;reader-as-link-author&#34;&gt;Reader as Link Author&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://hapgood.us/2015/07/22/follow-up-reader-as-link-author/&#34; target=&#34;_blank&#34;&gt;this insight&lt;/a&gt; into federated wikis by Mike Caulfield&lt;/p&gt;

&lt;h2 id=&#34;kafkapocalypse-a-postmortem-on-our-service-outage&#34;&gt;Kafkapocalypse: a postmortem on our service outage&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.parsely.com/post/1738/kafkapocalypse/&#34; target=&#34;_blank&#34;&gt;this post-mortem analysis&lt;/a&gt; of the service outage at parse.ly, by Andrew Montalenti&lt;/p&gt;

&lt;h2 id=&#34;loving-a-log-oriented-architecture&#34;&gt;Loving a Log-Oriented Architecture&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.parsely.com/post/1550/kreps-logs/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; on experiences using the log-based architecture, by Andrew Montalenti. Cites the books &lt;a href=&#34;http://www.amazon.com/Heart-Logs-Stream-Processing-Integration/dp/1491909382&#34; target=&#34;_blank&#34;&gt;I Heart Logs&lt;/a&gt;,  and &lt;a href=&#34;http://www.amazon.com/gp/product/1617290343&#34; target=&#34;_blank&#34;&gt;Big Data: Principles and best practices of scalable realtime data systems&lt;/a&gt; the essay &lt;a href=&#34;http://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying&#34; target=&#34;_blank&#34;&gt;The Log&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-guide-to-algorithmic-complexity&#34;&gt;A guide to Algorithmic Complexity&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://algosaur.us/algorithmic-complexity&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; to algorithmic complexity, explaining Big-Oh notation (Big-Oh, Big-Theta, Big-Omega), with examples. Written by Radhika Ghosal&lt;/p&gt;

&lt;h2 id=&#34;a-guide-to-recursion&#34;&gt;A guide to Recursion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://algosaur.us/recursion&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; to recursion explaining the gist of it. Examples include the Fibonacci sequence and the Hanoi Towers problem. Later, an introduction to the chaos theory and fractals. Written by Radhika Ghosal&lt;/p&gt;

&lt;h2 id=&#34;bootstrapped-clojurescript-faq&#34;&gt;Bootstrapped ClojureScript FAQ&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/clojure/clojurescript/wiki/Bootstrapped-ClojureScript-FAQ&#34; target=&#34;_blank&#34;&gt;this FAQ&lt;/a&gt; related to bootstrapping clojurescript&lt;/p&gt;

&lt;h2 id=&#34;applying-property-based-testing-on-my-binary-search-tree-implementation&#34;&gt;Applying property-based testing on my binary search tree implementation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://garajeando.blogspot.com/2015/07/applying-property-based-testing-on-my.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, written by Manuel Rivero, on applying test-check (a property-based testing framework, similar to quickcheck) to a Binary Search Tree (BST) he did.&lt;/p&gt;

&lt;h2 id=&#34;do-extraterrestrials-use-functional-programming&#34;&gt;Do Extraterrestrials Use Functional Programming?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://yowconference.com.au/slides/yowlambdajam2013/Chakravarty-Extraterrestrials-Keynote.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt;, an introduction to lambda calculus, the Turing machine and the Halting Problem. Later, continues to describe ways of solving problems in a functional way. Also performance and optimizations; monads as well. Written by Manuel M T Chakravarty&lt;/p&gt;

&lt;h2 id=&#34;wip-limits&#34;&gt;WIP Limits&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://theagileist.wordpress.com/2015/06/15/wip-limits/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Tomas Rybing&lt;/p&gt;

&lt;h2 id=&#34;applied-capacity-planning&#34;&gt;Applied capacity planning&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://theagileist.wordpress.com/2015/07/27/applied-capacity-planning/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Tomas Rybing.&lt;/p&gt;

&lt;h2 id=&#34;don-t-get-attached-to-programming-languages&#34;&gt;Don’t Get Attached to Programming Languages&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://mikecavaliere.com/dont-get-attached-programming-languages&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Mike Cavaliere&lt;/p&gt;

&lt;h2 id=&#34;the-top-5-skills-of-rock-star-software-engineers&#34;&gt;The Top 5 Skills of Rock Star Software Engineers&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://softwareplusplus.com/2015/06/24/the-top-5-skills-of-rock-star-software-engineers/&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Cory Berg&lt;/p&gt;

&lt;h2 id=&#34;5-reasons-to-use-protocol-buffers-instead-of-json-for-your-next-service&#34;&gt;5 Reasons to Use Protocol Buffers Instead of JSON For Your Next Service&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codeclimate.com/blog/2014/06/05/choose-protocol-buffers/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on Protocol Buffers, written by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;data-serialization-formats&#34;&gt;Data Serialization Formats&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://gist.github.com/joshsz/11299196&#34; target=&#34;_blank&#34;&gt;this comparison&lt;/a&gt; between MsgPack, JSON, Protocol Buffers, by Josh Szmajda.&lt;/p&gt;

&lt;h2 id=&#34;protocol-buffer-basics-java&#34;&gt;Protocol Buffer Basics: Java&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/javatutorial&#34; target=&#34;_blank&#34;&gt;this introduction&lt;/a&gt; to Protocol Buffers in Java, by Google&lt;/p&gt;

&lt;h2 id=&#34;restful-considered-harmful&#34;&gt;RESTful Considered Harmful&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://dzone.com/articles/restful-considered-harmful?oid=top_title&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, commenting downsides to using JSON / RESTful APIs, written by Tomasz Nurkiewicz&lt;/p&gt;

&lt;h2 id=&#34;considered-harmful-essays-considered-harmful&#34;&gt;“Considered Harmful” Essays Considered Harmful&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://meyerweb.com/eric/comment/chech.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt;, by Eric Meyer, on why &amp;ldquo;Considered Harmful&amp;rdquo; are harmful as well.&lt;/p&gt;

&lt;h2 id=&#34;keep-lambdas-cohesive&#34;&gt;Keep Lambdas Cohesive&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.agiledeveloper.com/2015/07/keep-lambdas-cohesive.html&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; with recommendations on keeping the java lambdas cohesive. Written by Venkat Subramaniam&lt;/p&gt;

&lt;h2 id=&#34;the-joy-of-flying-robots-with-clojure&#34;&gt;The Joy of Flying Robots with Clojure&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=Ty9QDqV-_Ak&#34; target=&#34;_blank&#34;&gt;this video&lt;/a&gt; by Carin Meier at the OSCON 2013 about communicating with robots in Clojure&lt;/p&gt;

&lt;h2 id=&#34;how-to-learn-tdd-without-getting-overwhelmed&#34;&gt;How to Learn TDD Without Getting Overwhelmed&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.justinweiss.com/blog/2014/06/02/how-to-learn-tdd-without-getting-overwhelmed/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on learning TDD, by Justin Weiss&lt;/p&gt;

&lt;h2 id=&#34;kata-the-only-way-to-learn-tdd&#34;&gt;Kata - the Only Way to Learn TDD&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.peterprovost.org/blog/2012/05/02/kata-the-only-way-to-learn-tdd/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on learning TDD, by Peter Provost&lt;/p&gt;

&lt;h2 id=&#34;koan-past-perfect&#34;&gt;Koan: Past Perfect&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thecodelesscode.com/case/180&#34; target=&#34;_blank&#34;&gt;this koan&lt;/a&gt;, past perfect, reflecting on the people who prefer the past over the present. Who think that the past was simpler than currently is.&lt;/p&gt;

&lt;h2 id=&#34;koan-future-imperfect&#34;&gt;Koan: Future Imperfect&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://thecodelesscode.com/case/181&#34; target=&#34;_blank&#34;&gt;this koan&lt;/a&gt;, continuation from past perfect.&lt;/p&gt;

&lt;h2 id=&#34;why-agile-and-especially-scrum-are-terrible&#34;&gt;Why “Agile” and especially Scrum are terrible&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://michaelochurch.wordpress.com/2015/06/06/why-agile-and-especially-scrum-are-terrible/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on downsides of Agile and Scrum, written by Michael Church.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-study in May 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/</link>
      <pubDate>Sat, 09 May 2015 16:41:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/</guid>
      <description>

&lt;p&gt;Update: I&amp;rsquo;ve grouped all small posts related to the self-study from May 2015
into a single post&lt;/p&gt;

&lt;h2 id=&#34;programmer-passion-considered-harmful&#34;&gt;Programmer passion considered harmful&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/on-coding/programmer-passion-considered-harmful-5c5d4e3a9b28&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why programmer passion could be negative. The title is similar to a paper by Dijkstra.&lt;/p&gt;

&lt;h2 id=&#34;software-craftsmanship-are-bootcamps-enough&#34;&gt;Software Craftsmanship: Are Bootcamps Enough?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.coursereport.com/blog/software-craftsmanship-are-bootcamps-enough&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on software craftsmanship, development bootcamps and passion by &lt;a href=&#34;https://twitter.com/kauerrolemodel&#34; target=&#34;_blank&#34;&gt;Ken Auer&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;improve-your-development-environments-with-virtualization&#34;&gt;Improve your development environments with virtualization&lt;/h2&gt;

&lt;p&gt;I have seen this video: &lt;a href=&#34;https://www.youtube.com/watch?v=Dg_vPMnC7_k&amp;amp;feature=youtu.be&#34; target=&#34;_blank&#34;&gt;Improve your development environments with virtualization&lt;/a&gt; by Luke Sneeringer.&lt;/p&gt;

&lt;p&gt;My notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;development should be exactly like production.&lt;/li&gt;
&lt;li&gt;except where it is too painful. there it should be different&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;buffer-s-take-on-values&#34;&gt;Buffer&amp;rsquo;s take on values&lt;/h2&gt;

&lt;p&gt;I have found these &lt;a href=&#34;http://www.slideshare.net/Bufferapp/buffer-culture-04&#34; target=&#34;_blank&#34;&gt;values&lt;/a&gt;, written by Buffer, very interesting.&lt;/p&gt;

&lt;h2 id=&#34;public-static-void&#34;&gt;Public static void&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this video: &lt;a href=&#34;https://www.youtube.com/watch?v=5kj5ApnhPAE&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Public, static void&amp;rdquo;&lt;/a&gt; by Rob Pike. The slides can be found &lt;a href=&#34;http://www.oscon.com/oscon2010/public/schedule/detail/13423&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;my-notes&#34;&gt;My notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;too much bureaucracy&lt;/li&gt;
&lt;li&gt;fighting the compiler&lt;/li&gt;
&lt;li&gt;dynamic vs static typing&lt;/li&gt;
&lt;li&gt;language too verbose&lt;/li&gt;

&lt;li&gt;&lt;p&gt;do not mix the two of them&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a language niche:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;comprehensible&lt;/li&gt;
&lt;li&gt;statically typed&lt;/li&gt;
&lt;li&gt;light on the page&lt;/li&gt;
&lt;li&gt;fast to work in&lt;/li&gt;
&lt;li&gt;scales well&lt;/li&gt;
&lt;li&gt;doesn&amp;rsquo;t require tools but supports them well&lt;/li&gt;
&lt;li&gt;good at networking and multiprocessing
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(minute 10:09)​&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org&#34; target=&#34;_blank&#34;&gt;Go&lt;/a&gt; was born to fill this niche&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nothing-is-something&#34;&gt;Nothing is something&lt;/h2&gt;

&lt;p&gt;This video has been extracted to a &lt;a href=&#34;../../../../2015/05/04/video-nothing-is-something/&#34;&gt;post&lt;/a&gt; of its own.&lt;/p&gt;

&lt;h2 id=&#34;software-is-eating-the-world&#34;&gt;Software is eating the world&lt;/h2&gt;

&lt;p&gt;This video has been extracted to a &lt;a href=&#34;../../../../2015/05/10/talk-software-is-eating-the-world/&#34;&gt;post&lt;/a&gt; of its own.&lt;/p&gt;

&lt;h2 id=&#34;the-cost-of-test-driven-development&#34;&gt;The Cost of Test Driven Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.typemock.com/2009/03/the-cost-of-test-driven-development.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, on the cost of doing TDD, which refers to &lt;a href=&#34;http://www.msr-waypoint.net/en-us/groups/ese/nagappan_tdd.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt;: Realizing quality improvement through test driven development: results and experiences of four industrial teams (below)&lt;/p&gt;

&lt;h2 id=&#34;realizing-quality-improvement-through-test-driven-development-results-and-experiences-of-four-industrial-teams&#34;&gt;Realizing quality improvement through test driven development: results and experiences of four industrial teams&lt;/h2&gt;

&lt;p&gt;This paper has been extracted to a &lt;a href=&#34;../../../../2015/05/12/paper-tdd-in-industrial-teams/&#34;&gt;post&lt;/a&gt; of its own.&lt;/p&gt;

&lt;h2 id=&#34;learn-you-some-lisp-for-great-good&#34;&gt;Learn You Some Lisp for Great Good&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched the video &lt;a href=&#34;https://www.youtube.com/watch?v=3T00X_sNg4Q&#34; target=&#34;_blank&#34;&gt;Learn You Some Lisp for Great Good&lt;/a&gt;, by Howard Abrams.&lt;/p&gt;

&lt;p&gt;I guess this is a reference to the popular &lt;a href=&#34;http://learnyouahaskell.com/&#34; target=&#34;_blank&#34;&gt;Learn You a Haskell for Great Good!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He suggests many interesting resources for learning Lisp dialects. The live coding is in Clojure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://landoflisp.com/&#34; target=&#34;_blank&#34;&gt;The land of Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mitpress.mit.edu/sicp/&#34; target=&#34;_blank&#34;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;. See also &lt;a href=&#34;https://twitter.com/SICPQuotes&#34; target=&#34;_blank&#34;&gt;SICPQuotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mitpress.mit.edu/books/little-schemer&#34; target=&#34;_blank&#34;&gt;The Little Schemer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/pdf/eintr.pdf&#34; target=&#34;_blank&#34;&gt;An Introduction to Programming in Emacs Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.4clojure.com/&#34; target=&#34;_blank&#34;&gt;4clojure Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://clojurekoans.com/&#34; target=&#34;_blank&#34;&gt;Clojure Koans&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On another topic, in the &lt;a href=&#34;http://www.meetup.com/ClojureBCN/events/222418104/&#34; target=&#34;_blank&#34;&gt;Bank accounts exercise from Exercism&lt;/a&gt; meetup, we discussed the book &lt;a href=&#34;https://pragprog.com/book/shcloj2/programming-clojure&#34; target=&#34;_blank&#34;&gt;Programming Clojure (2nd edition)&lt;/a&gt; by Stuart Halloway&lt;/p&gt;

&lt;h2 id=&#34;professor-frisby-s-mostly-adequate-guide-to-functional-programming&#34;&gt;Professor Frisby&amp;rsquo;s Mostly Adequate Guide to Functional Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/DrBoolean/mostly-adequate-guide&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; to functional programming. It is still work in progress (WIP) but still interesting. Written in javascript, so you can REPL in the browser.&lt;/p&gt;

&lt;h2 id=&#34;learning-code-good&#34;&gt;Learning Code Good&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this video, by Saron Yitbarek: &lt;a href=&#34;https://www.youtube.com/watch?v=-nsnAYRqYLA&#34; target=&#34;_blank&#34;&gt;Learn Code Good&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;why-you-don-t-get-mock-objects&#34;&gt;Why You Don&amp;rsquo;t Get Mock Objects&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=R9FOchgTtLM&#34; target=&#34;_blank&#34;&gt;Why You Don&amp;rsquo;t Get Mock Objects&lt;/a&gt;, by Gregory Moeck.&lt;/p&gt;

&lt;p&gt;In it, they point to the &lt;a href=&#34;http://www.growing-object-oriented-software.com/&#34; target=&#34;_blank&#34;&gt;Growing Object-Oriented Software Guided by Tests&lt;/a&gt; book (&lt;a href=&#34;https://alvarogarcia7.github.io/{{site.category_dir}}/goos&#34;&gt;category here&lt;/a&gt;), the paper &lt;a href=&#34;www.jmock.org/oopsla2004.pdf&#34; target=&#34;_blank&#34;&gt;Mock Roles, not Objects&lt;/a&gt; (also present in the GOOS book).&lt;/p&gt;

&lt;h2 id=&#34;technical-debt-a-repayment-plan&#34;&gt;Technical Debt: A Repayment Plan&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.infoq.com/articles/tech-debt-repayment&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/@jeremyjarrell&#34; target=&#34;_blank&#34;&gt;Jeremy Jarrell&lt;/a&gt; on technical debt how to repay it: schedule, taxes, default, etc&lt;/p&gt;

&lt;p&gt;This has made me think of the &lt;a href=&#34;http://scbcn.ideascale.com/a/dtd/Deuda-t%C3%A9cnica-origen-y-consecuencias/69782-25568&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Deuda técnica, origen y consecuencias&amp;rdquo; talk&lt;/a&gt; (Technical debt: origin and consequences) (Spanish), that was delivered by &lt;a href=&#34;https://twitter.com/@jgomezz&#34; target=&#34;_blank&#34;&gt;Javier Gómez&lt;/a&gt; at the Software Craftsmanship 2014.&lt;/p&gt;

&lt;h2 id=&#34;revisiting-xp-be-a-thoughtful-programmer-by-exercising-more-collective-ownership&#34;&gt;Revisiting XP: be a thoughtful programmer by exercising more collective ownership&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.infoq.com/articles/revisit-p-collective&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/tiagooo_romero&#34; target=&#34;_blank&#34;&gt;Tiago Garcia&lt;/a&gt; on the collective code ownership, as stated by Xtreme Programming (XP), with some example and guidelines.&lt;/p&gt;

&lt;h2 id=&#34;where-s-the-real-bottleneck-in-scientific-computing&#34;&gt;Where&amp;rsquo;s the Real Bottleneck in Scientific Computing?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.americanscientist.org/issues/pub/wheres-the-real-bottleneck-in-scientific-computing/99999&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Greg Wilson on the tools and procedures investigators use to produce software.&lt;/p&gt;

&lt;h2 id=&#34;testing-inside-the-sprint&#34;&gt;Testing inside the Sprint&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ronjeffries.com/articles/2015-03-01-testing-in-sprints/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ron Jeffries.&lt;/p&gt;

&lt;p&gt;Discusses the need for testing and why this hasn&amp;rsquo;t been communicated enough, as there still are people who have not understood it.&lt;/p&gt;

&lt;p&gt;Also about why people equal something failing when using scrum with scrum failing.&lt;/p&gt;

&lt;h2 id=&#34;dto-vs-domain-models&#34;&gt;DTO vs Domain Models&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/05/dto-vs-domain-models/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Carlos Blé&lt;/p&gt;

&lt;h2 id=&#34;homoiconicity-isn-t-the-point&#34;&gt;Homoiconicity isn’t the point&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://calculist.org/blog/2012/04/17/homoiconicity-isnt-the-point/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Herman about homoiconicity, comparing Lisp dialects (have it) to others that don&amp;rsquo;t. The main point is at the end, where it says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] homoiconicity isn’t the point, read is&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;so-you-don-t-want-to-be-a-programmer-after-all&#34;&gt;So You Don&amp;rsquo;t Want to be a Programmer After All&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/so-you-dont-want-to-be-a-programmer-after-all/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jeff Atwood. Cites the golden handcuffs (also known as golden shackles), reasons to be and not to be a programmer, and how to be an average and outstanding programmer&lt;/p&gt;

&lt;h2 id=&#34;the-nature-of-lisp&#34;&gt;The Nature of Lisp&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.defmacro.org/ramblings/lisp.html&#34; target=&#34;_blank&#34;&gt;this article / introduction&lt;/a&gt; to Lisp by Slava Akhmechet&lt;/p&gt;

&lt;h2 id=&#34;david-pollak-s-my-thoughts-on-go&#34;&gt;[David Pollak&amp;rsquo;s] My Thoughts on Go&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.goodstuff.im/golang&#34; target=&#34;_blank&#34;&gt;these comments&lt;/a&gt; on Go Lang from David Pollak&lt;/p&gt;

&lt;h2 id=&#34;the-well-rounded-technologist&#34;&gt;The Well-Rounded Technologist&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/04/02/the-well-rounded-technologist.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;should-i-read-papers&#34;&gt;Should I read papers?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/10/21/should-i-read-papers.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;lisp-1-vs-lisp-2&#34;&gt;Lisp-1 vs Lisp-2&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hornbeck.wordpress.com/2009/07/05/lisp-1-vs-lisp-2/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/hornbeck&#34; target=&#34;_blank&#34;&gt;@Hornbeck&lt;/a&gt; about the lisp 1 and lisp 2.&lt;/p&gt;

&lt;h2 id=&#34;science-corps&#34;&gt;Science Corps&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this &lt;a href=&#34;https://www.youtube.com/watch?v=dkQkafxFoIQ&#34; target=&#34;_blank&#34;&gt;TEDx talk&lt;/a&gt; by Aza Raskin, featuring Data Banks and Science corps&lt;/p&gt;

&lt;h2 id=&#34;healthy-codebase-and-preparatory-refactoring&#34;&gt;Healthy Codebase and Preparatory Refactoring&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://brewhouse.io/blog/2014/11/10/healthy-codebase-and-preparatory-refactoring.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Philippe Creux about preparatory refactoring&lt;/p&gt;

&lt;h2 id=&#34;you-are-learning-haskell-right-now-or-anything-you-want-really&#34;&gt;You Are Learning Haskell Right Now (Or Anything You Want Really)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/12/11/you-are-learning-haskell-right-now.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;lisp-is-abstract-syntax&#34;&gt;Lisp is Abstract Syntax&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/04/16/lisp-is-abstract-syntax.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;two-things-types-have-taught-me&#34;&gt;Two Things Types Have Taught Me&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/10/30/two-things-types-have-taught-me.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;don-t-bet-against-yourself&#34;&gt;Don&amp;rsquo;t Bet Against Yourself&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;learning-math-a-blank-is-a-blank-with-a-blank&#34;&gt;Learning Math: A Blank Is A Blank With A Blank&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;the-false-economy-of-metaprogramming&#34;&gt;The False Economy Of Metaprogramming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2015/03/06/the-false-economy-of-generated-methods.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;management-and-engineering-overlapping&#34;&gt;Management and Engineering, overlapping&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.quora.com/Does-Adam-DAngelo-feel-comfortable-with-the-transition-from-an-engineer-to-a-management-position?srid=3OC&amp;amp;share=1&#34; target=&#34;_blank&#34;&gt;this Quora answer&lt;/a&gt; by Adam D&amp;rsquo;Angelo. The original title is: Does Adam D&amp;rsquo;Angelo feel comfortable with the transition from an engineer to a management position?&lt;/p&gt;

&lt;h2 id=&#34;evolution-of-the-twitter-stack&#34;&gt;Evolution of The Twitter Stack&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.slideshare.net/slideshow/embed_code/key/ly83zQkBjCxnIX&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about changing the technology stack in Twitter: from Rails to JVM-based&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-study in May 2015</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/</link>
      <pubDate>Sat, 09 May 2015 16:41:10 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/09/self-study-in-may-2015/</guid>
      <description>

&lt;p&gt;Update: I&amp;rsquo;ve grouped all small posts related to the self-study from May 2015
into a single post&lt;/p&gt;

&lt;h2 id=&#34;programmer-passion-considered-harmful&#34;&gt;Programmer passion considered harmful&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://medium.com/on-coding/programmer-passion-considered-harmful-5c5d4e3a9b28&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on why programmer passion could be negative. The title is similar to a paper by Dijkstra.&lt;/p&gt;

&lt;h2 id=&#34;software-craftsmanship-are-bootcamps-enough&#34;&gt;Software Craftsmanship: Are Bootcamps Enough?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.coursereport.com/blog/software-craftsmanship-are-bootcamps-enough&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; on software craftsmanship, development bootcamps and passion by &lt;a href=&#34;https://twitter.com/kauerrolemodel&#34; target=&#34;_blank&#34;&gt;Ken Auer&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;improve-your-development-environments-with-virtualization&#34;&gt;Improve your development environments with virtualization&lt;/h2&gt;

&lt;p&gt;I have seen this video: &lt;a href=&#34;https://www.youtube.com/watch?v=Dg_vPMnC7_k&amp;amp;feature=youtu.be&#34; target=&#34;_blank&#34;&gt;Improve your development environments with virtualization&lt;/a&gt; by Luke Sneeringer.&lt;/p&gt;

&lt;p&gt;My notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;development should be exactly like production.&lt;/li&gt;
&lt;li&gt;except where it is too painful. there it should be different&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;buffer-s-take-on-values&#34;&gt;Buffer&amp;rsquo;s take on values&lt;/h2&gt;

&lt;p&gt;I have found these &lt;a href=&#34;http://www.slideshare.net/Bufferapp/buffer-culture-04&#34; target=&#34;_blank&#34;&gt;values&lt;/a&gt;, written by Buffer, very interesting.&lt;/p&gt;

&lt;h2 id=&#34;public-static-void&#34;&gt;Public static void&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this video: &lt;a href=&#34;https://www.youtube.com/watch?v=5kj5ApnhPAE&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Public, static void&amp;rdquo;&lt;/a&gt; by Rob Pike. The slides can be found &lt;a href=&#34;http://www.oscon.com/oscon2010/public/schedule/detail/13423&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;my-notes&#34;&gt;My notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;too much bureaucracy&lt;/li&gt;
&lt;li&gt;fighting the compiler&lt;/li&gt;
&lt;li&gt;dynamic vs static typing&lt;/li&gt;
&lt;li&gt;language too verbose&lt;/li&gt;

&lt;li&gt;&lt;p&gt;do not mix the two of them&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a language niche:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;comprehensible&lt;/li&gt;
&lt;li&gt;statically typed&lt;/li&gt;
&lt;li&gt;light on the page&lt;/li&gt;
&lt;li&gt;fast to work in&lt;/li&gt;
&lt;li&gt;scales well&lt;/li&gt;
&lt;li&gt;doesn&amp;rsquo;t require tools but supports them well&lt;/li&gt;
&lt;li&gt;good at networking and multiprocessing
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(minute 10:09)​&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org&#34; target=&#34;_blank&#34;&gt;Go&lt;/a&gt; was born to fill this niche&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nothing-is-something&#34;&gt;Nothing is something&lt;/h2&gt;

&lt;p&gt;This video has been extracted to a &lt;a href=&#34;../../../../2015/05/04/video-nothing-is-something/&#34;&gt;post&lt;/a&gt; of its own.&lt;/p&gt;

&lt;h2 id=&#34;software-is-eating-the-world&#34;&gt;Software is eating the world&lt;/h2&gt;

&lt;p&gt;This video has been extracted to a &lt;a href=&#34;../../../../2015/05/10/talk-software-is-eating-the-world/&#34;&gt;post&lt;/a&gt; of its own.&lt;/p&gt;

&lt;h2 id=&#34;the-cost-of-test-driven-development&#34;&gt;The Cost of Test Driven Development&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.typemock.com/2009/03/the-cost-of-test-driven-development.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt;, on the cost of doing TDD, which refers to &lt;a href=&#34;http://www.msr-waypoint.net/en-us/groups/ese/nagappan_tdd.pdf&#34; target=&#34;_blank&#34;&gt;this paper&lt;/a&gt;: Realizing quality improvement through test driven development: results and experiences of four industrial teams (below)&lt;/p&gt;

&lt;h2 id=&#34;realizing-quality-improvement-through-test-driven-development-results-and-experiences-of-four-industrial-teams&#34;&gt;Realizing quality improvement through test driven development: results and experiences of four industrial teams&lt;/h2&gt;

&lt;p&gt;This paper has been extracted to a &lt;a href=&#34;../../../../2015/05/12/paper-tdd-in-industrial-teams/&#34;&gt;post&lt;/a&gt; of its own.&lt;/p&gt;

&lt;h2 id=&#34;learn-you-some-lisp-for-great-good&#34;&gt;Learn You Some Lisp for Great Good&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched the video &lt;a href=&#34;https://www.youtube.com/watch?v=3T00X_sNg4Q&#34; target=&#34;_blank&#34;&gt;Learn You Some Lisp for Great Good&lt;/a&gt;, by Howard Abrams.&lt;/p&gt;

&lt;p&gt;I guess this is a reference to the popular &lt;a href=&#34;http://learnyouahaskell.com/&#34; target=&#34;_blank&#34;&gt;Learn You a Haskell for Great Good!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He suggests many interesting resources for learning Lisp dialects. The live coding is in Clojure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://landoflisp.com/&#34; target=&#34;_blank&#34;&gt;The land of Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mitpress.mit.edu/sicp/&#34; target=&#34;_blank&#34;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;. See also &lt;a href=&#34;https://twitter.com/SICPQuotes&#34; target=&#34;_blank&#34;&gt;SICPQuotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mitpress.mit.edu/books/little-schemer&#34; target=&#34;_blank&#34;&gt;The Little Schemer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/pdf/eintr.pdf&#34; target=&#34;_blank&#34;&gt;An Introduction to Programming in Emacs Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.4clojure.com/&#34; target=&#34;_blank&#34;&gt;4clojure Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://clojurekoans.com/&#34; target=&#34;_blank&#34;&gt;Clojure Koans&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On another topic, in the &lt;a href=&#34;http://www.meetup.com/ClojureBCN/events/222418104/&#34; target=&#34;_blank&#34;&gt;Bank accounts exercise from Exercism&lt;/a&gt; meetup, we discussed the book &lt;a href=&#34;https://pragprog.com/book/shcloj2/programming-clojure&#34; target=&#34;_blank&#34;&gt;Programming Clojure (2nd edition)&lt;/a&gt; by Stuart Halloway&lt;/p&gt;

&lt;h2 id=&#34;professor-frisby-s-mostly-adequate-guide-to-functional-programming&#34;&gt;Professor Frisby&amp;rsquo;s Mostly Adequate Guide to Functional Programming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://github.com/DrBoolean/mostly-adequate-guide&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; to functional programming. It is still work in progress (WIP) but still interesting. Written in javascript, so you can REPL in the browser.&lt;/p&gt;

&lt;h2 id=&#34;learning-code-good&#34;&gt;Learning Code Good&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this video, by Saron Yitbarek: &lt;a href=&#34;https://www.youtube.com/watch?v=-nsnAYRqYLA&#34; target=&#34;_blank&#34;&gt;Learn Code Good&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;why-you-don-t-get-mock-objects&#34;&gt;Why You Don&amp;rsquo;t Get Mock Objects&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched &lt;a href=&#34;https://www.youtube.com/watch?v=R9FOchgTtLM&#34; target=&#34;_blank&#34;&gt;Why You Don&amp;rsquo;t Get Mock Objects&lt;/a&gt;, by Gregory Moeck.&lt;/p&gt;

&lt;p&gt;In it, they point to the &lt;a href=&#34;http://www.growing-object-oriented-software.com/&#34; target=&#34;_blank&#34;&gt;Growing Object-Oriented Software Guided by Tests&lt;/a&gt; book (&lt;a href=&#34;https://alvarogarcia7.github.io/{{site.category_dir}}/goos&#34;&gt;category here&lt;/a&gt;), the paper &lt;a href=&#34;www.jmock.org/oopsla2004.pdf&#34; target=&#34;_blank&#34;&gt;Mock Roles, not Objects&lt;/a&gt; (also present in the GOOS book).&lt;/p&gt;

&lt;h2 id=&#34;technical-debt-a-repayment-plan&#34;&gt;Technical Debt: A Repayment Plan&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.infoq.com/articles/tech-debt-repayment&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/@jeremyjarrell&#34; target=&#34;_blank&#34;&gt;Jeremy Jarrell&lt;/a&gt; on technical debt how to repay it: schedule, taxes, default, etc&lt;/p&gt;

&lt;p&gt;This has made me think of the &lt;a href=&#34;http://scbcn.ideascale.com/a/dtd/Deuda-t%C3%A9cnica-origen-y-consecuencias/69782-25568&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Deuda técnica, origen y consecuencias&amp;rdquo; talk&lt;/a&gt; (Technical debt: origin and consequences) (Spanish), that was delivered by &lt;a href=&#34;https://twitter.com/@jgomezz&#34; target=&#34;_blank&#34;&gt;Javier Gómez&lt;/a&gt; at the Software Craftsmanship 2014.&lt;/p&gt;

&lt;h2 id=&#34;revisiting-xp-be-a-thoughtful-programmer-by-exercising-more-collective-ownership&#34;&gt;Revisiting XP: be a thoughtful programmer by exercising more collective ownership&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.infoq.com/articles/revisit-p-collective&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/tiagooo_romero&#34; target=&#34;_blank&#34;&gt;Tiago Garcia&lt;/a&gt; on the collective code ownership, as stated by Xtreme Programming (XP), with some example and guidelines.&lt;/p&gt;

&lt;h2 id=&#34;where-s-the-real-bottleneck-in-scientific-computing&#34;&gt;Where&amp;rsquo;s the Real Bottleneck in Scientific Computing?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.americanscientist.org/issues/pub/wheres-the-real-bottleneck-in-scientific-computing/99999&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Greg Wilson on the tools and procedures investigators use to produce software.&lt;/p&gt;

&lt;h2 id=&#34;testing-inside-the-sprint&#34;&gt;Testing inside the Sprint&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://ronjeffries.com/articles/2015-03-01-testing-in-sprints/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Ron Jeffries.&lt;/p&gt;

&lt;p&gt;Discusses the need for testing and why this hasn&amp;rsquo;t been communicated enough, as there still are people who have not understood it.&lt;/p&gt;

&lt;p&gt;Also about why people equal something failing when using scrum with scrum failing.&lt;/p&gt;

&lt;h2 id=&#34;dto-vs-domain-models&#34;&gt;DTO vs Domain Models&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.carlosble.com/2015/05/dto-vs-domain-models/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Carlos Blé&lt;/p&gt;

&lt;h2 id=&#34;homoiconicity-isn-t-the-point&#34;&gt;Homoiconicity isn’t the point&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://calculist.org/blog/2012/04/17/homoiconicity-isnt-the-point/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by David Herman about homoiconicity, comparing Lisp dialects (have it) to others that don&amp;rsquo;t. The main point is at the end, where it says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] homoiconicity isn’t the point, read is&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;so-you-don-t-want-to-be-a-programmer-after-all&#34;&gt;So You Don&amp;rsquo;t Want to be a Programmer After All&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.codinghorror.com/so-you-dont-want-to-be-a-programmer-after-all/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Jeff Atwood. Cites the golden handcuffs (also known as golden shackles), reasons to be and not to be a programmer, and how to be an average and outstanding programmer&lt;/p&gt;

&lt;h2 id=&#34;the-nature-of-lisp&#34;&gt;The Nature of Lisp&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.defmacro.org/ramblings/lisp.html&#34; target=&#34;_blank&#34;&gt;this article / introduction&lt;/a&gt; to Lisp by Slava Akhmechet&lt;/p&gt;

&lt;h2 id=&#34;david-pollak-s-my-thoughts-on-go&#34;&gt;[David Pollak&amp;rsquo;s] My Thoughts on Go&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://blog.goodstuff.im/golang&#34; target=&#34;_blank&#34;&gt;these comments&lt;/a&gt; on Go Lang from David Pollak&lt;/p&gt;

&lt;h2 id=&#34;the-well-rounded-technologist&#34;&gt;The Well-Rounded Technologist&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/04/02/the-well-rounded-technologist.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;should-i-read-papers&#34;&gt;Should I read papers?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/10/21/should-i-read-papers.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;lisp-1-vs-lisp-2&#34;&gt;Lisp-1 vs Lisp-2&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://hornbeck.wordpress.com/2009/07/05/lisp-1-vs-lisp-2/&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/hornbeck&#34; target=&#34;_blank&#34;&gt;@Hornbeck&lt;/a&gt; about the lisp 1 and lisp 2.&lt;/p&gt;

&lt;h2 id=&#34;science-corps&#34;&gt;Science Corps&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve watched this &lt;a href=&#34;https://www.youtube.com/watch?v=dkQkafxFoIQ&#34; target=&#34;_blank&#34;&gt;TEDx talk&lt;/a&gt; by Aza Raskin, featuring Data Banks and Science corps&lt;/p&gt;

&lt;h2 id=&#34;healthy-codebase-and-preparatory-refactoring&#34;&gt;Healthy Codebase and Preparatory Refactoring&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://brewhouse.io/blog/2014/11/10/healthy-codebase-and-preparatory-refactoring.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Philippe Creux about preparatory refactoring&lt;/p&gt;

&lt;h2 id=&#34;you-are-learning-haskell-right-now-or-anything-you-want-really&#34;&gt;You Are Learning Haskell Right Now (Or Anything You Want Really)&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/12/11/you-are-learning-haskell-right-now.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;lisp-is-abstract-syntax&#34;&gt;Lisp is Abstract Syntax&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/04/16/lisp-is-abstract-syntax.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;two-things-types-have-taught-me&#34;&gt;Two Things Types Have Taught Me&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2014/10/30/two-things-types-have-taught-me.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;don-t-bet-against-yourself&#34;&gt;Don&amp;rsquo;t Bet Against Yourself&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;learning-math-a-blank-is-a-blank-with-a-blank&#34;&gt;Learning Math: A Blank Is A Blank With A Blank&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2015/04/15/dont-bet-against-yourself.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;the-false-economy-of-metaprogramming&#34;&gt;The False Economy Of Metaprogramming&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://michaelrbernste.in/2015/03/06/the-false-economy-of-generated-methods.html&#34; target=&#34;_blank&#34;&gt;this article&lt;/a&gt; by Michael Bernstein&lt;/p&gt;

&lt;h2 id=&#34;management-and-engineering-overlapping&#34;&gt;Management and Engineering, overlapping&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;http://www.quora.com/Does-Adam-DAngelo-feel-comfortable-with-the-transition-from-an-engineer-to-a-management-position?srid=3OC&amp;amp;share=1&#34; target=&#34;_blank&#34;&gt;this Quora answer&lt;/a&gt; by Adam D&amp;rsquo;Angelo. The original title is: Does Adam D&amp;rsquo;Angelo feel comfortable with the transition from an engineer to a management position?&lt;/p&gt;

&lt;h2 id=&#34;evolution-of-the-twitter-stack&#34;&gt;Evolution of The Twitter Stack&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve read &lt;a href=&#34;https://www.slideshare.net/slideshow/embed_code/key/ly83zQkBjCxnIX&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; about changing the technology stack in Twitter: from Rails to JVM-based&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Video: Nothing is something</title>
      <link>https://alvarogarcia7.github.io/blog/2015/05/04/video-nothing-is-something/</link>
      <pubDate>Mon, 04 May 2015 07:43:14 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/05/04/video-nothing-is-something/</guid>
      <description>&lt;p&gt;I have seen this video: &lt;a href=&#34;https://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=9lv2lBq6x4A&#34; target=&#34;_blank&#34;&gt;Nothing is something&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/@sandimetz&#34; target=&#34;_blank&#34;&gt;Sandi Metz&lt;/a&gt;, as I saw it recommended &lt;a href=&#34;http://garajeando.blogspot.com.es/2015/04/interesting-talk-nothing-is-something.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the video, she talks programming in this fashion: (it is a stack, not an unordered list)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Abstraction seeking&lt;/li&gt;
&lt;li&gt;Message centric&lt;/li&gt;
&lt;li&gt;Condition Averse&lt;/li&gt;
&lt;li&gt;Smalltalk Infected&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Not here to change the language but change you&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a pattern I&amp;rsquo;ve also heard from &lt;a href=&#34;https://twitter.com/@old_sound&#34; target=&#34;_blank&#34;&gt;Alvaro Videla&lt;/a&gt;, where he said that other, more powerful languages can change your mind and help you bring some of those concepts to your own language. He was talking about Haskell, she, about Smalltalk.&lt;/p&gt;

&lt;p&gt;She shows how to smell the &lt;code&gt;null object pattern&lt;/code&gt; (that she independently discovered herself too - can be improved studying the classics&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;), also called &lt;code&gt;active nothing&lt;/code&gt;. Decorates the &lt;code&gt;Animal&lt;/code&gt; with a wrapper, to call it &lt;code&gt;GuaranteedAnimal&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Later on, shows how to code an example on a &amp;lsquo;tail&amp;rsquo;, extending behaviour with inheritance and how to get rid of it: prefer composition versus inheritance. The importance of roles.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Inheritance is for specialization, not for sharing code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Steps to convert inheritance into composition:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Isolate the difference&lt;/li&gt;
&lt;li&gt;Name the concept&lt;/li&gt;
&lt;li&gt;Define the role&lt;/li&gt;
&lt;li&gt;Inject the players&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a trick I discovered here: when you don&amp;rsquo;t know what name put here, create a spreadsheet and ask yourself what name the row should have. There is an example &lt;a href=&#34;https://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=9lv2lBq6x4A#t=1959&#34; target=&#34;_blank&#34;&gt;at this minute&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;a reference to a pattern by the same name at &lt;a href=&#34;http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382&#34; target=&#34;_blank&#34;&gt;Apprenticeship Patterns&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Talk: &#39;Is TDD Dead? Of course not! But what´s all the fuzz about then?&#39; by Emily Bache</title>
      <link>https://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-but-whats-all-the-fuzz-about-then-by-emily-bache/</link>
      <pubDate>Tue, 06 Jan 2015 15:47:47 +0000</pubDate>
      
      <guid>https://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-but-whats-all-the-fuzz-about-then-by-emily-bache/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve just seen this talk: &lt;a href=&#34;https://www.youtube.com/watch?v=PCEHRFHKZSk&#34; target=&#34;_blank&#34;&gt;Is TDD dead? Of course not! But what´s all the fuzz about then?&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/emilybache&#34; target=&#34;_blank&#34;&gt;Emily Bache&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###My notes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;deliberate vs accidental learning (around minute 19)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;do not be an evangelist for tdd but rather &amp;ldquo;come learn tdd, come at a dojo with us!&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;points to &lt;a href=&#34;https://twitter.com/tastapod&#34; target=&#34;_blank&#34;&gt;Dan North&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;www.youtube.com/watch?v=SPj-23z-hQA&#34; target=&#34;_blank&#34;&gt;talk&lt;/a&gt; (at the same foo café)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;points to her book - &lt;a href=&#34;https://leanpub.com/codingdojohandbook&#34; target=&#34;_blank&#34;&gt;The Coding Dojo Handbook&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;points to &lt;a href=&#34;http://cyber-dojo.org/&#34; target=&#34;_blank&#34;&gt;cyber dojo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;design is hard whether you do TDD or not&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/dhh&#34; target=&#34;_blank&#34;&gt;dhh&lt;/a&gt;: too much focus on unit test.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;I thought we got rid of best practices in agile&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;different kinds of advice for each kind of target (eg, based on experience level)&lt;/li&gt;
&lt;li&gt;points to self-testing code (by &lt;a href=&#34;https://twitter.com/martinfowler&#34; target=&#34;_blank&#34;&gt;Martin Fowler&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;problem: the test suite is no longer in sync with the production code&lt;/li&gt;
&lt;li&gt;points to approval testing:

&lt;ul&gt;
&lt;li&gt;code kata &amp;ldquo;minesweeper&amp;rdquo;&lt;/li&gt;
&lt;li&gt;test data + code produces output data&lt;/li&gt;
&lt;li&gt;I approve the data&lt;/li&gt;
&lt;li&gt;Useful for full features&lt;/li&gt;
&lt;li&gt;Useful for asserting on difficult parts like images&lt;/li&gt;
&lt;li&gt;realistic users to generate tests&lt;/li&gt;
&lt;li&gt;tool to manage these &amp;ldquo;approval tests&amp;rdquo;. Easy way of managing tests cases&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://texttest.org&#34; target=&#34;_blank&#34;&gt;TextTest&lt;/a&gt; is one of these tools&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###Her conclusions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Watch out the fundamentalism&lt;/li&gt;
&lt;li&gt;TDD might take you to too many layers of indirection&lt;/li&gt;
&lt;li&gt;The share of each test (end to end, integration, unit) depends on each project / part&lt;/li&gt;
&lt;li&gt;Many TDD pieces of advice is directed to novices. When you&amp;rsquo;re not, you should know when to stop listening&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PS: I&amp;rsquo;ve first seen this video in &lt;a href=&#34;http://garajeando.blogspot.com/2015/01/interesting-talk-is-tdd-dead-of-course.html&#34; target=&#34;_blank&#34;&gt;garajeando&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>